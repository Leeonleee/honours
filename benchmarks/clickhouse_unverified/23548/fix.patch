diff --git a/src/Databases/MySQL/DatabaseConnectionMySQL.cpp b/src/Databases/MySQL/DatabaseConnectionMySQL.cpp
index 4e63bed9c6df..59a575996ee5 100644
--- a/src/Databases/MySQL/DatabaseConnectionMySQL.cpp
+++ b/src/Databases/MySQL/DatabaseConnectionMySQL.cpp
@@ -246,9 +246,19 @@ void DatabaseConnectionMySQL::fetchLatestTablesStructureIntoCache(
             local_tables_cache.erase(iterator);
         }
 
-        local_tables_cache[table_name] = std::make_pair(table_modification_time, StorageMySQL::create(
-            StorageID(database_name, table_name), std::move(mysql_pool), database_name_in_mysql, table_name,
-            false, "", ColumnsDescription{columns_name_and_type}, ConstraintsDescription{}, getContext()));
+        local_tables_cache[table_name] = std::make_pair(
+            table_modification_time,
+            StorageMySQL::create(
+                StorageID(database_name, table_name),
+                std::move(mysql_pool),
+                database_name_in_mysql,
+                table_name,
+                false,
+                "",
+                ColumnsDescription{columns_name_and_type},
+                ConstraintsDescription{},
+                String{},
+                getContext()));
     }
 }
 
diff --git a/src/Databases/PostgreSQL/DatabasePostgreSQL.cpp b/src/Databases/PostgreSQL/DatabasePostgreSQL.cpp
index ec87b528779b..55813e519e48 100644
--- a/src/Databases/PostgreSQL/DatabasePostgreSQL.cpp
+++ b/src/Databases/PostgreSQL/DatabasePostgreSQL.cpp
@@ -169,8 +169,13 @@ StoragePtr DatabasePostgreSQL::fetchTable(const String & table_name, ContextPtr
             return StoragePtr{};
 
         auto storage = StoragePostgreSQL::create(
-                StorageID(database_name, table_name), connection_pool, table_name,
-                ColumnsDescription{*columns}, ConstraintsDescription{}, local_context);
+            StorageID(database_name, table_name),
+            connection_pool,
+            table_name,
+            ColumnsDescription{*columns},
+            ConstraintsDescription{},
+            String{},
+            local_context);
 
         if (cache_tables)
             cached_tables[table_name] = storage;
diff --git a/src/Interpreters/DatabaseCatalog.cpp b/src/Interpreters/DatabaseCatalog.cpp
index 6b5da80d2949..091661031552 100644
--- a/src/Interpreters/DatabaseCatalog.cpp
+++ b/src/Interpreters/DatabaseCatalog.cpp
@@ -84,21 +84,18 @@ TemporaryTableHolder::TemporaryTableHolder(
     const ConstraintsDescription & constraints,
     const ASTPtr & query,
     bool create_for_global_subquery)
-    : TemporaryTableHolder
-      (
-          context_,
-          [&](const StorageID & table_id)
-          {
-              auto storage = StorageMemory::create(
-                      table_id, ColumnsDescription{columns}, ConstraintsDescription{constraints});
-
-              if (create_for_global_subquery)
-                  storage->delayReadForGlobalSubqueries();
-
-              return storage;
-          },
-          query
-      )
+    : TemporaryTableHolder(
+        context_,
+        [&](const StorageID & table_id)
+        {
+            auto storage = StorageMemory::create(table_id, ColumnsDescription{columns}, ConstraintsDescription{constraints}, String{});
+
+            if (create_for_global_subquery)
+                storage->delayReadForGlobalSubqueries();
+
+            return storage;
+        },
+        query)
 {
 }
 
diff --git a/src/Parsers/ASTCreateQuery.cpp b/src/Parsers/ASTCreateQuery.cpp
index 07cb53287570..d6d424beb3a7 100644
--- a/src/Parsers/ASTCreateQuery.cpp
+++ b/src/Parsers/ASTCreateQuery.cpp
@@ -32,6 +32,9 @@ ASTPtr ASTStorage::clone() const
     if (settings)
         res->set(res->settings, settings->clone());
 
+    if (comment)
+        res->set(res->comment, comment->clone());
+
     return res;
 }
 
@@ -72,6 +75,11 @@ void ASTStorage::formatImpl(const FormatSettings & s, FormatState & state, Forma
         s.ostr << (s.hilite ? hilite_keyword : "") << s.nl_or_ws << "SETTINGS " << (s.hilite ? hilite_none : "");
         settings->formatImpl(s, state, frame);
     }
+    if (comment)
+    {
+        s.ostr << (s.hilite ? hilite_keyword : "") << s.nl_or_ws << "COMMENT " << (s.hilite ? hilite_none : "");
+        comment->formatImpl(s, state, frame);
+    }
 
 }
 
diff --git a/src/Parsers/ASTCreateQuery.h b/src/Parsers/ASTCreateQuery.h
index 6fe75d7273d8..c7be67d9b786 100644
--- a/src/Parsers/ASTCreateQuery.h
+++ b/src/Parsers/ASTCreateQuery.h
@@ -23,8 +23,10 @@ class ASTStorage : public IAST
     IAST * order_by = nullptr;
     IAST * sample_by = nullptr;
     IAST * ttl_table = nullptr;
+    IAST * comment = nullptr;
     ASTSetQuery * settings = nullptr;
 
+
     String getID(char) const override { return "Storage definition"; }
 
     ASTPtr clone() const override;
diff --git a/src/Parsers/ParserCreateQuery.cpp b/src/Parsers/ParserCreateQuery.cpp
index 8c358fbd1829..4bbe9cc08485 100644
--- a/src/Parsers/ParserCreateQuery.cpp
+++ b/src/Parsers/ParserCreateQuery.cpp
@@ -315,11 +315,13 @@ bool ParserStorage::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)
     ParserKeyword s_sample_by("SAMPLE BY");
     ParserKeyword s_ttl("TTL");
     ParserKeyword s_settings("SETTINGS");
+    ParserKeyword s_comment("COMMENT");
 
     ParserIdentifierWithOptionalParameters ident_with_optional_params_p;
     ParserExpression expression_p;
     ParserSetQuery settings_p(/* parse_only_internals_ = */ true);
     ParserTTLExpressionList parser_ttl_list;
+    ParserStringLiteral string_literal_parser;
 
     ASTPtr engine;
     ASTPtr partition_by;
@@ -328,6 +330,7 @@ bool ParserStorage::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)
     ASTPtr sample_by;
     ASTPtr ttl_table;
     ASTPtr settings;
+    ASTPtr comment_expression;
 
     if (!s_engine.ignore(pos, expected))
         return false;
@@ -385,6 +388,13 @@ bool ParserStorage::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)
                 return false;
         }
 
+        if (s_comment.ignore(pos, expected))
+        {
+            /// should be followed by a string literal
+            if (!string_literal_parser.parse(pos, comment_expression, expected))
+                return false;
+        }
+
         break;
     }
 
@@ -398,6 +408,8 @@ bool ParserStorage::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)
 
     storage->set(storage->settings, settings);
 
+    storage->set(storage->comment, comment_expression);
+
     node = storage;
     return true;
 }
diff --git a/src/Storages/HDFS/StorageHDFS.cpp b/src/Storages/HDFS/StorageHDFS.cpp
index c08e487f1790..989f35c40054 100644
--- a/src/Storages/HDFS/StorageHDFS.cpp
+++ b/src/Storages/HDFS/StorageHDFS.cpp
@@ -35,24 +35,23 @@ namespace ErrorCodes
     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;
 }
 
-StorageHDFS::StorageHDFS(const String & uri_,
+StorageHDFS::StorageHDFS(
+    const String & uri_,
     const StorageID & table_id_,
     const String & format_name_,
     const ColumnsDescription & columns_,
     const ConstraintsDescription & constraints_,
+    const String & comment,
     ContextPtr context_,
     const String & compression_method_ = "")
-    : IStorage(table_id_)
-    , WithContext(context_)
-    , uri(uri_)
-    , format_name(format_name_)
-    , compression_method(compression_method_)
+    : IStorage(table_id_), WithContext(context_), uri(uri_), format_name(format_name_), compression_method(compression_method_)
 {
     context_->getRemoteHostFilter().checkURL(Poco::URI(uri));
 
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
     storage_metadata.setConstraints(constraints_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 }
 
@@ -347,7 +346,8 @@ void registerStorageHDFS(StorageFactory & factory)
             compression_method = engine_args[2]->as<ASTLiteral &>().value.safeGet<String>();
         } else compression_method = "auto";
 
-        return StorageHDFS::create(url, args.table_id, format_name, args.columns, args.constraints, args.getContext(), compression_method);
+        return StorageHDFS::create(
+            url, args.table_id, format_name, args.columns, args.constraints, args.comment, args.getContext(), compression_method);
     },
     {
         .source_access_type = AccessType::HDFS,
diff --git a/src/Storages/HDFS/StorageHDFS.h b/src/Storages/HDFS/StorageHDFS.h
index e3f235296ac6..5e446c76f030 100644
--- a/src/Storages/HDFS/StorageHDFS.h
+++ b/src/Storages/HDFS/StorageHDFS.h
@@ -33,11 +33,13 @@ class StorageHDFS final : public ext::shared_ptr_helper<StorageHDFS>, public ISt
     NamesAndTypesList getVirtuals() const override;
 
 protected:
-    StorageHDFS(const String & uri_,
+    StorageHDFS(
+        const String & uri_,
         const StorageID & table_id_,
         const String & format_name_,
         const ColumnsDescription & columns_,
         const ConstraintsDescription & constraints_,
+        const String & comment,
         ContextPtr context_,
         const String & compression_method_);
 
diff --git a/src/Storages/MergeTree/registerStorageMergeTree.cpp b/src/Storages/MergeTree/registerStorageMergeTree.cpp
index 70d1239cc153..ce7fc38b9041 100644
--- a/src/Storages/MergeTree/registerStorageMergeTree.cpp
+++ b/src/Storages/MergeTree/registerStorageMergeTree.cpp
@@ -625,7 +625,8 @@ static StoragePtr create(const StorageFactory::Arguments & args)
     String date_column_name;
 
     StorageInMemoryMetadata metadata;
-    metadata.columns = args.columns;
+    metadata.setColumns(args.columns);
+    metadata.setComment(args.comment);
 
     std::unique_ptr<MergeTreeSettings> storage_settings;
     if (replicated)
diff --git a/src/Storages/StorageBuffer.cpp b/src/Storages/StorageBuffer.cpp
index bfc282ed4eb0..a2be3384cf02 100644
--- a/src/Storages/StorageBuffer.cpp
+++ b/src/Storages/StorageBuffer.cpp
@@ -102,6 +102,7 @@ StorageBuffer::StorageBuffer(
     const StorageID & table_id_,
     const ColumnsDescription & columns_,
     const ConstraintsDescription & constraints_,
+    const String & comment,
     ContextPtr context_,
     size_t num_shards_,
     const Thresholds & min_thresholds_,
@@ -111,7 +112,8 @@ StorageBuffer::StorageBuffer(
     bool allow_materialized_)
     : IStorage(table_id_)
     , WithContext(context_->getBufferContext())
-    , num_shards(num_shards_), buffers(num_shards_)
+    , num_shards(num_shards_)
+    , buffers(num_shards_)
     , min_thresholds(min_thresholds_)
     , max_thresholds(max_thresholds_)
     , flush_thresholds(flush_thresholds_)
@@ -123,6 +125,7 @@ StorageBuffer::StorageBuffer(
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
     storage_metadata.setConstraints(constraints_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 }
 
@@ -1135,9 +1138,12 @@ void registerStorageBuffer(StorageFactory & factory)
             args.table_id,
             args.columns,
             args.constraints,
+            args.comment,
             args.getContext(),
             num_buckets,
-            min, max, flush,
+            min,
+            max,
+            flush,
             destination_id,
             static_cast<bool>(args.getLocalContext()->getSettingsRef().insert_allow_materialized_columns));
     },
diff --git a/src/Storages/StorageBuffer.h b/src/Storages/StorageBuffer.h
index 2224bce14b98..83bdf9de2498 100644
--- a/src/Storages/StorageBuffer.h
+++ b/src/Storages/StorageBuffer.h
@@ -178,6 +178,7 @@ friend class BufferBlockOutputStream;
         const StorageID & table_id_,
         const ColumnsDescription & columns_,
         const ConstraintsDescription & constraints_,
+        const String & comment,
         ContextPtr context_,
         size_t num_shards_,
         const Thresholds & min_thresholds_,
diff --git a/src/Storages/StorageDictionary.cpp b/src/Storages/StorageDictionary.cpp
index 16818c9ea182..1ce74b16f466 100644
--- a/src/Storages/StorageDictionary.cpp
+++ b/src/Storages/StorageDictionary.cpp
@@ -96,15 +96,14 @@ StorageDictionary::StorageDictionary(
     const StorageID & table_id_,
     const String & dictionary_name_,
     const ColumnsDescription & columns_,
+    const String & comment,
     Location location_,
     ContextPtr context_)
-    : IStorage(table_id_)
-    , WithContext(context_->getGlobalContext())
-    , dictionary_name(dictionary_name_)
-    , location(location_)
+    : IStorage(table_id_), WithContext(context_->getGlobalContext()), dictionary_name(dictionary_name_), location(location_)
 {
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 }
 
@@ -116,11 +115,7 @@ StorageDictionary::StorageDictionary(
     Location location_,
     ContextPtr context_)
     : StorageDictionary(
-        table_id_,
-        dictionary_name_,
-        ColumnsDescription{getNamesAndTypes(dictionary_structure_)},
-        location_,
-        context_)
+        table_id_, dictionary_name_, ColumnsDescription{getNamesAndTypes(dictionary_structure_)}, String{}, location_, context_)
 {
 }
 
@@ -289,7 +284,8 @@ void registerStorageDictionary(StorageFactory & factory)
                 checkNamesAndTypesCompatibleWithDictionary(dictionary_name, args.columns, dictionary_structure);
             }
 
-            return StorageDictionary::create(args.table_id, dictionary_name, args.columns, StorageDictionary::Location::Custom, local_context);
+            return StorageDictionary::create(
+                args.table_id, dictionary_name, args.columns, args.comment, StorageDictionary::Location::Custom, local_context);
         }
     });
 }
diff --git a/src/Storages/StorageDictionary.h b/src/Storages/StorageDictionary.h
index c22c337d40a6..9c92cd90d368 100644
--- a/src/Storages/StorageDictionary.h
+++ b/src/Storages/StorageDictionary.h
@@ -82,6 +82,7 @@ class StorageDictionary final : public ext::shared_ptr_helper<StorageDictionary>
         const StorageID & table_id_,
         const String & dictionary_name_,
         const ColumnsDescription & columns_,
+        const String & comment,
         Location location_,
         ContextPtr context_);
 
diff --git a/src/Storages/StorageDistributed.cpp b/src/Storages/StorageDistributed.cpp
index fa2f77d49a71..de243c2d2e12 100644
--- a/src/Storages/StorageDistributed.cpp
+++ b/src/Storages/StorageDistributed.cpp
@@ -386,6 +386,7 @@ StorageDistributed::StorageDistributed(
     const StorageID & id_,
     const ColumnsDescription & columns_,
     const ConstraintsDescription & constraints_,
+    const String & comment,
     const String & remote_database_,
     const String & remote_table_,
     const String & cluster_name_,
@@ -411,6 +412,7 @@ StorageDistributed::StorageDistributed(
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
     storage_metadata.setConstraints(constraints_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 
     if (sharding_key_)
@@ -452,8 +454,21 @@ StorageDistributed::StorageDistributed(
     const DistributedSettings & distributed_settings_,
     bool attach,
     ClusterPtr owned_cluster_)
-    : StorageDistributed(id_, columns_, constraints_, String{}, String{}, cluster_name_, context_, sharding_key_,
-    storage_policy_name_, relative_data_path_, distributed_settings_, attach, std::move(owned_cluster_))
+    : StorageDistributed(
+        id_,
+        columns_,
+        constraints_,
+        String{},
+        String{},
+        String{},
+        cluster_name_,
+        context_,
+        sharding_key_,
+        storage_policy_name_,
+        relative_data_path_,
+        distributed_settings_,
+        attach,
+        std::move(owned_cluster_))
 {
     remote_table_function_ptr = std::move(remote_table_function_ptr_);
 }
@@ -1253,8 +1268,13 @@ void registerStorageDistributed(StorageFactory & factory)
         }
 
         return StorageDistributed::create(
-            args.table_id, args.columns, args.constraints,
-            remote_database, remote_table, cluster_name,
+            args.table_id,
+            args.columns,
+            args.constraints,
+            args.comment,
+            remote_database,
+            remote_table,
+            cluster_name,
             args.getContext(),
             sharding_key,
             storage_policy,
diff --git a/src/Storages/StorageDistributed.h b/src/Storages/StorageDistributed.h
index 241c6ddb1aab..61e83c611a73 100644
--- a/src/Storages/StorageDistributed.h
+++ b/src/Storages/StorageDistributed.h
@@ -124,6 +124,7 @@ class StorageDistributed final : public ext::shared_ptr_helper<StorageDistribute
         const StorageID & id_,
         const ColumnsDescription & columns_,
         const ConstraintsDescription & constraints_,
+        const String & comment,
         const String & remote_database_,
         const String & remote_table_,
         const String & cluster_name_,
diff --git a/src/Storages/StorageExternalDistributed.cpp b/src/Storages/StorageExternalDistributed.cpp
index 10eb1696d99c..5a153f16a0a7 100644
--- a/src/Storages/StorageExternalDistributed.cpp
+++ b/src/Storages/StorageExternalDistributed.cpp
@@ -36,12 +36,14 @@ StorageExternalDistributed::StorageExternalDistributed(
     const String & password,
     const ColumnsDescription & columns_,
     const ConstraintsDescription & constraints_,
+    const String & comment,
     ContextPtr context)
     : IStorage(table_id_)
 {
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
     storage_metadata.setConstraints(constraints_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 
     size_t max_addresses = context->getSettingsRef().glob_expansion_max_elements;
@@ -74,7 +76,9 @@ StorageExternalDistributed::StorageExternalDistributed(
                     remote_table,
                     /* replace_query = */ false,
                     /* on_duplicate_clause = */ "",
-                    columns_, constraints_,
+                    columns_,
+                    constraints_,
+                    String{},
                     context);
                 break;
             }
@@ -92,12 +96,7 @@ StorageExternalDistributed::StorageExternalDistributed(
                     context->getSettingsRef().postgresql_connection_pool_size,
                     context->getSettingsRef().postgresql_connection_pool_wait_timeout);
 
-                shard = StoragePostgreSQL::create(
-                    table_id_,
-                    std::move(pool),
-                    remote_table,
-                    columns_, constraints_,
-                    context);
+                shard = StoragePostgreSQL::create(table_id_, std::move(pool), remote_table, columns_, constraints_, String{}, context);
                 break;
             }
 #endif
@@ -164,12 +163,7 @@ StorageExternalDistributed::StorageExternalDistributed(
         {
             Poco::URI uri(url_description);
             shard = std::make_shared<StorageURL>(
-                uri,
-                table_id,
-                format_name,
-                format_settings,
-                columns, constraints, context,
-                compression_method);
+                uri, table_id, format_name, format_settings, columns, constraints, String{}, context, compression_method);
 
             LOG_DEBUG(&Poco::Logger::get("StorageURLDistributed"), "Adding URL: {}", url_description);
         }
@@ -271,6 +265,7 @@ void registerStorageExternalDistributed(StorageFactory & factory)
                 password,
                 args.columns,
                 args.constraints,
+                args.comment,
                 args.getContext());
         }
     },
diff --git a/src/Storages/StorageExternalDistributed.h b/src/Storages/StorageExternalDistributed.h
index a6718398a3a7..00ec868b4601 100644
--- a/src/Storages/StorageExternalDistributed.h
+++ b/src/Storages/StorageExternalDistributed.h
@@ -50,6 +50,7 @@ class StorageExternalDistributed final : public ext::shared_ptr_helper<StorageEx
         const String & password,
         const ColumnsDescription & columns_,
         const ConstraintsDescription & constraints_,
+        const String & comment,
         ContextPtr context_);
 
     StorageExternalDistributed(
diff --git a/src/Storages/StorageFactory.cpp b/src/Storages/StorageFactory.cpp
index 18cf42dd4e27..836d8bae7f3a 100644
--- a/src/Storages/StorageFactory.cpp
+++ b/src/Storages/StorageFactory.cpp
@@ -65,7 +65,7 @@ StoragePtr StorageFactory::get(
     const ConstraintsDescription & constraints,
     bool has_force_restore_data_flag) const
 {
-    String name;
+    String name, comment;
     ASTStorage * storage_def = query.storage;
 
     bool has_engine_args = false;
@@ -146,6 +146,9 @@ StoragePtr StorageFactory::get(
                     throw Exception("Unknown table engine " + name, ErrorCodes::UNKNOWN_STORAGE);
             }
 
+            if (storage_def->comment)
+                comment = storage_def->comment->as<ASTLiteral &>().value.get<String>();
+
             auto check_feature = [&](String feature_description, FeatureMatcherFn feature_matcher_fn)
             {
                 if (!feature_matcher_fn(it->second.features))
@@ -192,8 +195,7 @@ StoragePtr StorageFactory::get(
     }
 
     ASTs empty_engine_args;
-    Arguments arguments
-    {
+    Arguments arguments{
         .engine_name = name,
         .engine_args = has_engine_args ? storage_def->engine->arguments->children : empty_engine_args,
         .storage_def = storage_def,
@@ -205,8 +207,9 @@ StoragePtr StorageFactory::get(
         .columns = columns,
         .constraints = constraints,
         .attach = query.attach,
-        .has_force_restore_data_flag = has_force_restore_data_flag
-    };
+        .has_force_restore_data_flag = has_force_restore_data_flag,
+        .comment = comment};
+
     assert(arguments.getContext() == arguments.getContext()->getGlobalContext());
 
     auto res = storages.at(name).creator_fn(arguments);
diff --git a/src/Storages/StorageFactory.h b/src/Storages/StorageFactory.h
index 66be974d5b3a..e04e5459dda0 100644
--- a/src/Storages/StorageFactory.h
+++ b/src/Storages/StorageFactory.h
@@ -45,6 +45,7 @@ class StorageFactory : private boost::noncopyable, public IHints<1, StorageFacto
         const ConstraintsDescription & constraints;
         bool attach;
         bool has_force_restore_data_flag;
+        const String & comment;
 
         ContextPtr getContext() const;
         ContextPtr getLocalContext() const;
diff --git a/src/Storages/StorageFile.cpp b/src/Storages/StorageFile.cpp
index 14b91d29805d..cfb4934dae0a 100644
--- a/src/Storages/StorageFile.cpp
+++ b/src/Storages/StorageFile.cpp
@@ -221,6 +221,7 @@ StorageFile::StorageFile(CommonArguments args)
         storage_metadata.setColumns(args.columns);
 
     storage_metadata.setConstraints(args.constraints);
+    storage_metadata.setComment(args.comment);
     setInMemoryMetadata(storage_metadata);
 }
 
@@ -687,6 +688,7 @@ void registerStorageFile(StorageFactory & factory)
                 {},
                 factory_args.columns,
                 factory_args.constraints,
+                factory_args.comment,
             };
 
             ASTs & engine_args_ast = factory_args.engine_args;
diff --git a/src/Storages/StorageFile.h b/src/Storages/StorageFile.h
index a277dda7cc03..5be8378b53e3 100644
--- a/src/Storages/StorageFile.h
+++ b/src/Storages/StorageFile.h
@@ -57,6 +57,7 @@ class StorageFile final : public ext::shared_ptr_helper<StorageFile>, public ISt
         std::string compression_method;
         const ColumnsDescription & columns;
         const ConstraintsDescription & constraints;
+        const String & comment;
     };
 
     NamesAndTypesList getVirtuals() const override;
diff --git a/src/Storages/StorageGenerateRandom.cpp b/src/Storages/StorageGenerateRandom.cpp
index 7987fcc3b311..abe288bd9995 100644
--- a/src/Storages/StorageGenerateRandom.cpp
+++ b/src/Storages/StorageGenerateRandom.cpp
@@ -418,8 +418,13 @@ class GenerateSource : public SourceWithProgress
 }
 
 
-StorageGenerateRandom::StorageGenerateRandom(const StorageID & table_id_, const ColumnsDescription & columns_,
-    UInt64 max_array_length_, UInt64 max_string_length_, std::optional<UInt64> random_seed_)
+StorageGenerateRandom::StorageGenerateRandom(
+    const StorageID & table_id_,
+    const ColumnsDescription & columns_,
+    const String & comment,
+    UInt64 max_array_length_,
+    UInt64 max_string_length_,
+    std::optional<UInt64> random_seed_)
     : IStorage(table_id_), max_array_length(max_array_length_), max_string_length(max_string_length_)
 {
     static constexpr size_t MAX_ARRAY_SIZE = 1 << 30;
@@ -435,6 +440,7 @@ StorageGenerateRandom::StorageGenerateRandom(const StorageID & table_id_, const
     random_seed = random_seed_ ? sipHash64(*random_seed_) : randomSeed();
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 }
 
@@ -467,7 +473,7 @@ void registerStorageGenerateRandom(StorageFactory & factory)
         if (engine_args.size() == 3)
             max_array_length = engine_args[2]->as<const ASTLiteral &>().value.safeGet<UInt64>();
 
-        return StorageGenerateRandom::create(args.table_id, args.columns, max_array_length, max_string_length, random_seed);
+        return StorageGenerateRandom::create(args.table_id, args.columns, args.comment, max_array_length, max_string_length, random_seed);
     });
 }
 
diff --git a/src/Storages/StorageGenerateRandom.h b/src/Storages/StorageGenerateRandom.h
index d9c2acb782b6..4a4015ebc0d1 100644
--- a/src/Storages/StorageGenerateRandom.h
+++ b/src/Storages/StorageGenerateRandom.h
@@ -30,8 +30,13 @@ class StorageGenerateRandom final : public ext::shared_ptr_helper<StorageGenerat
     UInt64 random_seed = 0;
 
 protected:
-    StorageGenerateRandom(const StorageID & table_id_, const ColumnsDescription & columns_,
-        UInt64 max_array_length, UInt64 max_string_length, std::optional<UInt64> random_seed);
+    StorageGenerateRandom(
+        const StorageID & table_id_,
+        const ColumnsDescription & columns_,
+        const String & comment,
+        UInt64 max_array_length,
+        UInt64 max_string_length,
+        std::optional<UInt64> random_seed);
 };
 
 }
diff --git a/src/Storages/StorageInMemoryMetadata.cpp b/src/Storages/StorageInMemoryMetadata.cpp
index c4a04b04a047..390816482483 100644
--- a/src/Storages/StorageInMemoryMetadata.cpp
+++ b/src/Storages/StorageInMemoryMetadata.cpp
@@ -36,6 +36,7 @@ StorageInMemoryMetadata::StorageInMemoryMetadata(const StorageInMemoryMetadata &
     , table_ttl(other.table_ttl)
     , settings_changes(other.settings_changes ? other.settings_changes->clone() : nullptr)
     , select(other.select)
+    , comment(other.comment)
 {
 }
 
@@ -59,9 +60,14 @@ StorageInMemoryMetadata & StorageInMemoryMetadata::operator=(const StorageInMemo
     else
         settings_changes.reset();
     select = other.select;
+    comment = other.comment;
     return *this;
 }
 
+void StorageInMemoryMetadata::setComment(const String & comment_)
+{
+    comment = comment_;
+}
 
 void StorageInMemoryMetadata::setColumns(ColumnsDescription columns_)
 {
diff --git a/src/Storages/StorageInMemoryMetadata.h b/src/Storages/StorageInMemoryMetadata.h
index 1a14c73fd47c..861cb5866ee3 100644
--- a/src/Storages/StorageInMemoryMetadata.h
+++ b/src/Storages/StorageInMemoryMetadata.h
@@ -47,6 +47,8 @@ struct StorageInMemoryMetadata
     /// SELECT QUERY. Supported for MaterializedView and View (have to support LiveView).
     SelectQueryDescription select;
 
+    String comment;
+
     StorageInMemoryMetadata() = default;
 
     StorageInMemoryMetadata(const StorageInMemoryMetadata & other);
@@ -56,6 +58,9 @@ struct StorageInMemoryMetadata
     /// structure from different threads. It should be used as MultiVersion
     /// object. See example in IStorage.
 
+    /// Sets a user-defined comment for a table
+    void setComment(const String & comment_);
+
     /// Sets only real columns, possibly overwrites virtual ones.
     void setColumns(ColumnsDescription columns_);
 
diff --git a/src/Storages/StorageJoin.cpp b/src/Storages/StorageJoin.cpp
index d9970bab22ca..f0129e954953 100644
--- a/src/Storages/StorageJoin.cpp
+++ b/src/Storages/StorageJoin.cpp
@@ -46,9 +46,10 @@ StorageJoin::StorageJoin(
     ASTTableJoin::Strictness strictness_,
     const ColumnsDescription & columns_,
     const ConstraintsDescription & constraints_,
+    const String & comment,
     bool overwrite_,
     bool persistent_)
-    : StorageSetOrJoinBase{disk_, relative_path_, table_id_, columns_, constraints_, persistent_}
+    : StorageSetOrJoinBase{disk_, relative_path_, table_id_, columns_, constraints_, comment, persistent_}
     , key_names(key_names_)
     , use_nulls(use_nulls_)
     , limits(limits_)
@@ -263,6 +264,7 @@ void registerStorageJoin(StorageFactory & factory)
             strictness,
             args.columns,
             args.constraints,
+            args.comment,
             join_any_take_last_row,
             persistent);
     };
diff --git a/src/Storages/StorageJoin.h b/src/Storages/StorageJoin.h
index 4baac53c69ce..b89780a0f759 100644
--- a/src/Storages/StorageJoin.h
+++ b/src/Storages/StorageJoin.h
@@ -81,9 +81,11 @@ class StorageJoin final : public ext::shared_ptr_helper<StorageJoin>, public Sto
         const Names & key_names_,
         bool use_nulls_,
         SizeLimits limits_,
-        ASTTableJoin::Kind kind_, ASTTableJoin::Strictness strictness_,
+        ASTTableJoin::Kind kind_,
+        ASTTableJoin::Strictness strictness_,
         const ColumnsDescription & columns_,
         const ConstraintsDescription & constraints_,
+        const String & comment,
         bool overwrite,
         bool persistent_);
 };
diff --git a/src/Storages/StorageLog.cpp b/src/Storages/StorageLog.cpp
index 8ed68e0b44da..663deddfd1f4 100644
--- a/src/Storages/StorageLog.cpp
+++ b/src/Storages/StorageLog.cpp
@@ -465,6 +465,7 @@ StorageLog::StorageLog(
     const StorageID & table_id_,
     const ColumnsDescription & columns_,
     const ConstraintsDescription & constraints_,
+    const String & comment,
     bool attach,
     size_t max_compress_block_size_)
     : IStorage(table_id_)
@@ -476,6 +477,7 @@ StorageLog::StorageLog(
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
     storage_metadata.setConstraints(constraints_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 
     if (relative_path_.empty())
@@ -734,8 +736,14 @@ void registerStorageLog(StorageFactory & factory)
         DiskPtr disk = args.getContext()->getDisk(disk_name);
 
         return StorageLog::create(
-            disk, args.relative_data_path, args.table_id, args.columns, args.constraints,
-            args.attach, args.getContext()->getSettings().max_compress_block_size);
+            disk,
+            args.relative_data_path,
+            args.table_id,
+            args.columns,
+            args.constraints,
+            args.comment,
+            args.attach,
+            args.getContext()->getSettings().max_compress_block_size);
     }, features);
 }
 
diff --git a/src/Storages/StorageLog.h b/src/Storages/StorageLog.h
index 4fbaf53529ff..20103f514799 100644
--- a/src/Storages/StorageLog.h
+++ b/src/Storages/StorageLog.h
@@ -57,6 +57,7 @@ class StorageLog final : public ext::shared_ptr_helper<StorageLog>, public IStor
         const StorageID & table_id_,
         const ColumnsDescription & columns_,
         const ConstraintsDescription & constraints_,
+        const String & comment,
         bool attach,
         size_t max_compress_block_size_);
 
diff --git a/src/Storages/StorageMemory.cpp b/src/Storages/StorageMemory.cpp
index 4cae73676068..289a17366bba 100644
--- a/src/Storages/StorageMemory.cpp
+++ b/src/Storages/StorageMemory.cpp
@@ -164,12 +164,14 @@ StorageMemory::StorageMemory(
     const StorageID & table_id_,
     ColumnsDescription columns_description_,
     ConstraintsDescription constraints_,
+    const String & comment,
     bool compress_)
     : IStorage(table_id_), data(std::make_unique<const Blocks>()), compress(compress_)
 {
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(std::move(columns_description_));
     storage_metadata.setConstraints(std::move(constraints_));
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 }
 
@@ -349,7 +351,7 @@ void registerStorageMemory(StorageFactory & factory)
         if (has_settings)
             settings.loadFromQuery(*args.storage_def);
 
-        return StorageMemory::create(args.table_id, args.columns, args.constraints, settings.compress);
+        return StorageMemory::create(args.table_id, args.columns, args.constraints, args.comment, settings.compress);
     },
     {
         .supports_settings = true,
diff --git a/src/Storages/StorageMemory.h b/src/Storages/StorageMemory.h
index 1118474deee1..e623f29e2e64 100644
--- a/src/Storages/StorageMemory.h
+++ b/src/Storages/StorageMemory.h
@@ -115,6 +115,7 @@ friend struct ext::shared_ptr_helper<StorageMemory>;
         const StorageID & table_id_,
         ColumnsDescription columns_description_,
         ConstraintsDescription constraints_,
+        const String & comment,
         bool compress_ = false);
 };
 
diff --git a/src/Storages/StorageMerge.cpp b/src/Storages/StorageMerge.cpp
index 0a3a9ea2633c..aff62d2a337a 100644
--- a/src/Storages/StorageMerge.cpp
+++ b/src/Storages/StorageMerge.cpp
@@ -102,6 +102,7 @@ TreeRewriterResult modifySelect(ASTSelectQuery & select, const TreeRewriterResul
 StorageMerge::StorageMerge(
     const StorageID & table_id_,
     const ColumnsDescription & columns_,
+    const String & comment,
     const String & source_database_,
     const Strings & source_tables_,
     ContextPtr context_)
@@ -112,12 +113,14 @@ StorageMerge::StorageMerge(
 {
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 }
 
 StorageMerge::StorageMerge(
     const StorageID & table_id_,
     const ColumnsDescription & columns_,
+    const String & comment,
     const String & source_database_,
     const String & source_table_regexp_,
     ContextPtr context_)
@@ -128,6 +131,7 @@ StorageMerge::StorageMerge(
 {
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 }
 
@@ -623,9 +627,7 @@ void registerStorageMerge(StorageFactory & factory)
         String source_database = engine_args[0]->as<ASTLiteral &>().value.safeGet<String>();
         String table_name_regexp = engine_args[1]->as<ASTLiteral &>().value.safeGet<String>();
 
-        return StorageMerge::create(
-            args.table_id, args.columns,
-            source_database, table_name_regexp, args.getContext());
+        return StorageMerge::create(args.table_id, args.columns, args.comment, source_database, table_name_regexp, args.getContext());
     });
 }
 
diff --git a/src/Storages/StorageMerge.h b/src/Storages/StorageMerge.h
index f7381bf51933..7c5a50af4865 100644
--- a/src/Storages/StorageMerge.h
+++ b/src/Storages/StorageMerge.h
@@ -71,6 +71,7 @@ class StorageMerge final : public ext::shared_ptr_helper<StorageMerge>, public I
     StorageMerge(
         const StorageID & table_id_,
         const ColumnsDescription & columns_,
+        const String & comment,
         const String & source_database_,
         const Strings & source_tables_,
         ContextPtr context_);
@@ -78,6 +79,7 @@ class StorageMerge final : public ext::shared_ptr_helper<StorageMerge>, public I
     StorageMerge(
         const StorageID & table_id_,
         const ColumnsDescription & columns_,
+        const String & comment,
         const String & source_database_,
         const String & source_table_regexp_,
         ContextPtr context_);
diff --git a/src/Storages/StorageMongoDB.cpp b/src/Storages/StorageMongoDB.cpp
index 2b0200f3643e..f5f604c6f41c 100644
--- a/src/Storages/StorageMongoDB.cpp
+++ b/src/Storages/StorageMongoDB.cpp
@@ -34,7 +34,8 @@ StorageMongoDB::StorageMongoDB(
     const std::string & username_,
     const std::string & password_,
     const ColumnsDescription & columns_,
-    const ConstraintsDescription & constraints_)
+    const ConstraintsDescription & constraints_,
+    const String & comment)
     : IStorage(table_id_)
     , host(host_)
     , port(port_)
@@ -46,6 +47,7 @@ StorageMongoDB::StorageMongoDB(
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
     storage_metadata.setConstraints(constraints_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 }
 
@@ -125,7 +127,8 @@ void registerStorageMongoDB(StorageFactory & factory)
             username,
             password,
             args.columns,
-            args.constraints);
+            args.constraints,
+            args.comment);
     },
     {
         .source_access_type = AccessType::MONGO,
diff --git a/src/Storages/StorageMongoDB.h b/src/Storages/StorageMongoDB.h
index 5e96d1543a22..e5f60f59c1ac 100644
--- a/src/Storages/StorageMongoDB.h
+++ b/src/Storages/StorageMongoDB.h
@@ -27,7 +27,8 @@ class StorageMongoDB final : public ext::shared_ptr_helper<StorageMongoDB>, publ
         const std::string & username_,
         const std::string & password_,
         const ColumnsDescription & columns_,
-        const ConstraintsDescription & constraints_);
+        const ConstraintsDescription & constraints_,
+        const String & comment);
 
     std::string getName() const override { return "MongoDB"; }
 
diff --git a/src/Storages/StorageMySQL.cpp b/src/Storages/StorageMySQL.cpp
index 35eb85e41d27..4cf69d7dd777 100644
--- a/src/Storages/StorageMySQL.cpp
+++ b/src/Storages/StorageMySQL.cpp
@@ -49,6 +49,7 @@ StorageMySQL::StorageMySQL(
     const std::string & on_duplicate_clause_,
     const ColumnsDescription & columns_,
     const ConstraintsDescription & constraints_,
+    const String & comment,
     ContextPtr context_)
     : IStorage(table_id_)
     , WithContext(context_->getGlobalContext())
@@ -61,6 +62,7 @@ StorageMySQL::StorageMySQL(
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
     storage_metadata.setConstraints(constraints_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 }
 
@@ -272,6 +274,7 @@ void registerStorageMySQL(StorageFactory & factory)
             on_duplicate_clause,
             args.columns,
             args.constraints,
+            args.comment,
             args.getContext());
     },
     {
diff --git a/src/Storages/StorageMySQL.h b/src/Storages/StorageMySQL.h
index a68c06c1abed..a7aca48197e1 100644
--- a/src/Storages/StorageMySQL.h
+++ b/src/Storages/StorageMySQL.h
@@ -32,6 +32,7 @@ class StorageMySQL final : public ext::shared_ptr_helper<StorageMySQL>, public I
         const std::string & on_duplicate_clause_,
         const ColumnsDescription & columns_,
         const ConstraintsDescription & constraints_,
+        const String & comment,
         ContextPtr context_);
 
     std::string getName() const override { return "MySQL"; }
diff --git a/src/Storages/StorageNull.cpp b/src/Storages/StorageNull.cpp
index 6c8a21db571b..85f0daf3fa80 100644
--- a/src/Storages/StorageNull.cpp
+++ b/src/Storages/StorageNull.cpp
@@ -29,7 +29,7 @@ void registerStorageNull(StorageFactory & factory)
                 "Engine " + args.engine_name + " doesn't support any arguments (" + toString(args.engine_args.size()) + " given)",
                 ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);
 
-        return StorageNull::create(args.table_id, args.columns, args.constraints);
+        return StorageNull::create(args.table_id, args.columns, args.constraints, args.comment);
     },
     {
         .supports_parallel_insert = true,
diff --git a/src/Storages/StorageNull.h b/src/Storages/StorageNull.h
index 7fe65eb25dc0..85fae2cc4708 100644
--- a/src/Storages/StorageNull.h
+++ b/src/Storages/StorageNull.h
@@ -57,12 +57,14 @@ class StorageNull final : public ext::shared_ptr_helper<StorageNull>, public ISt
 private:
 
 protected:
-    StorageNull(const StorageID & table_id_, ColumnsDescription columns_description_, ConstraintsDescription constraints_)
+    StorageNull(
+        const StorageID & table_id_, ColumnsDescription columns_description_, ConstraintsDescription constraints_, const String & comment)
         : IStorage(table_id_)
     {
         StorageInMemoryMetadata metadata_;
         metadata_.setColumns(columns_description_);
         metadata_.setConstraints(constraints_);
+        metadata_.setComment(comment);
         setInMemoryMetadata(metadata_);
     }
 };
diff --git a/src/Storages/StoragePostgreSQL.cpp b/src/Storages/StoragePostgreSQL.cpp
index 81c451d08dff..1d863a43b29e 100644
--- a/src/Storages/StoragePostgreSQL.cpp
+++ b/src/Storages/StoragePostgreSQL.cpp
@@ -45,6 +45,7 @@ StoragePostgreSQL::StoragePostgreSQL(
     const String & remote_table_name_,
     const ColumnsDescription & columns_,
     const ConstraintsDescription & constraints_,
+    const String & comment,
     ContextPtr context_,
     const String & remote_table_schema_)
     : IStorage(table_id_)
@@ -56,6 +57,7 @@ StoragePostgreSQL::StoragePostgreSQL(
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
     storage_metadata.setConstraints(constraints_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 }
 
@@ -328,8 +330,14 @@ void registerStoragePostgreSQL(StorageFactory & factory)
             args.getContext()->getSettingsRef().postgresql_connection_pool_wait_timeout);
 
         return StoragePostgreSQL::create(
-            args.table_id, std::move(pool), remote_table,
-            args.columns, args.constraints, args.getContext(), remote_table_schema);
+            args.table_id,
+            std::move(pool),
+            remote_table,
+            args.columns,
+            args.constraints,
+            args.comment,
+            args.getContext(),
+            remote_table_schema);
     },
     {
         .source_access_type = AccessType::POSTGRES,
diff --git a/src/Storages/StoragePostgreSQL.h b/src/Storages/StoragePostgreSQL.h
index bb7cce28e5b3..76e10bebf677 100644
--- a/src/Storages/StoragePostgreSQL.h
+++ b/src/Storages/StoragePostgreSQL.h
@@ -26,6 +26,7 @@ class StoragePostgreSQL final : public ext::shared_ptr_helper<StoragePostgreSQL>
         const String & remote_table_name_,
         const ColumnsDescription & columns_,
         const ConstraintsDescription & constraints_,
+        const String & comment,
         ContextPtr context_,
         const std::string & remote_table_schema_ = "");
 
diff --git a/src/Storages/StorageS3.cpp b/src/Storages/StorageS3.cpp
index 2e7d43a03bf4..36d078e7bf30 100644
--- a/src/Storages/StorageS3.cpp
+++ b/src/Storages/StorageS3.cpp
@@ -330,6 +330,7 @@ StorageS3::StorageS3(
     UInt64 max_connections_,
     const ColumnsDescription & columns_,
     const ConstraintsDescription & constraints_,
+    const String & comment,
     ContextPtr context_,
     const String & compression_method_,
     bool distributed_processing_)
@@ -347,6 +348,7 @@ StorageS3::StorageS3(
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
     storage_metadata.setConstraints(constraints_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
     updateClientAndAuthSettings(context_, client_auth);
 }
@@ -520,9 +522,9 @@ void registerStorageS3Impl(const String & name, StorageFactory & factory)
             max_connections,
             args.columns,
             args.constraints,
+            args.comment,
             args.getContext(),
-            compression_method
-        );
+            compression_method);
     },
     {
         .source_access_type = AccessType::S3,
diff --git a/src/Storages/StorageS3.h b/src/Storages/StorageS3.h
index b068f82cfb1a..694dec4c0dc7 100644
--- a/src/Storages/StorageS3.h
+++ b/src/Storages/StorageS3.h
@@ -97,7 +97,8 @@ class StorageS3Source : public SourceWithProgress, WithContext
 class StorageS3 : public ext::shared_ptr_helper<StorageS3>, public IStorage, WithContext
 {
 public:
-    StorageS3(const S3::URI & uri,
+    StorageS3(
+        const S3::URI & uri,
         const String & access_key_id,
         const String & secret_access_key,
         const StorageID & table_id_,
@@ -108,6 +109,7 @@ class StorageS3 : public ext::shared_ptr_helper<StorageS3>, public IStorage, Wit
         UInt64 max_connections_,
         const ColumnsDescription & columns_,
         const ConstraintsDescription & constraints_,
+        const String & comment,
         ContextPtr context_,
         const String & compression_method_ = "",
         bool distributed_processing_ = false);
diff --git a/src/Storages/StorageS3Cluster.cpp b/src/Storages/StorageS3Cluster.cpp
index df5b655bf4ec..8a320190036b 100644
--- a/src/Storages/StorageS3Cluster.cpp
+++ b/src/Storages/StorageS3Cluster.cpp
@@ -51,8 +51,6 @@
 
 namespace DB
 {
-
-
 StorageS3Cluster::StorageS3Cluster(
     const String & filename_,
     const String & access_key_id_,
diff --git a/src/Storages/StorageS3Cluster.h b/src/Storages/StorageS3Cluster.h
index b2c8d4a086cc..a2d7c63e7b6f 100644
--- a/src/Storages/StorageS3Cluster.h
+++ b/src/Storages/StorageS3Cluster.h
@@ -43,9 +43,17 @@ class StorageS3Cluster : public ext::shared_ptr_helper<StorageS3Cluster>, public
 
 protected:
     StorageS3Cluster(
-        const String & filename_, const String & access_key_id_, const String & secret_access_key_, const StorageID & table_id_,
-        String cluster_name_, const String & format_name_, UInt64 max_connections_, const ColumnsDescription & columns_,
-        const ConstraintsDescription & constraints_, ContextPtr context_, const String & compression_method_);
+        const String & filename_,
+        const String & access_key_id_,
+        const String & secret_access_key_,
+        const StorageID & table_id_,
+        String cluster_name_,
+        const String & format_name_,
+        UInt64 max_connections_,
+        const ColumnsDescription & columns_,
+        const ConstraintsDescription & constraints_,
+        ContextPtr context_,
+        const String & compression_method_);
 
 private:
     /// Connections from initiator to other nodes
diff --git a/src/Storages/StorageSet.cpp b/src/Storages/StorageSet.cpp
index 34bbfed874fc..f585a5747b81 100644
--- a/src/Storages/StorageSet.cpp
+++ b/src/Storages/StorageSet.cpp
@@ -112,14 +112,14 @@ StorageSetOrJoinBase::StorageSetOrJoinBase(
     const StorageID & table_id_,
     const ColumnsDescription & columns_,
     const ConstraintsDescription & constraints_,
+    const String & comment,
     bool persistent_)
-    : IStorage(table_id_),
-    disk(disk_),
-    persistent(persistent_)
+    : IStorage(table_id_), disk(disk_), persistent(persistent_)
 {
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
     storage_metadata.setConstraints(constraints_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 
 
@@ -136,9 +136,10 @@ StorageSet::StorageSet(
     const StorageID & table_id_,
     const ColumnsDescription & columns_,
     const ConstraintsDescription & constraints_,
+    const String & comment,
     bool persistent_)
-    : StorageSetOrJoinBase{disk_, relative_path_, table_id_, columns_, constraints_, persistent_},
-    set(std::make_shared<Set>(SizeLimits(), false, true))
+    : StorageSetOrJoinBase{disk_, relative_path_, table_id_, columns_, constraints_, comment, persistent_}
+    , set(std::make_shared<Set>(SizeLimits(), false, true))
 {
 
     Block header = getInMemoryMetadataPtr()->getSampleBlock();
@@ -247,7 +248,8 @@ void registerStorageSet(StorageFactory & factory)
             set_settings.loadFromQuery(*args.storage_def);
 
         DiskPtr disk = args.getContext()->getDisk(set_settings.disk);
-        return StorageSet::create(disk, args.relative_data_path, args.table_id, args.columns, args.constraints, set_settings.persistent);
+        return StorageSet::create(
+            disk, args.relative_data_path, args.table_id, args.columns, args.constraints, args.comment, set_settings.persistent);
     }, StorageFactory::StorageFeatures{ .supports_settings = true, });
 }
 
diff --git a/src/Storages/StorageSet.h b/src/Storages/StorageSet.h
index b87dcf21a238..5dd497527a93 100644
--- a/src/Storages/StorageSet.h
+++ b/src/Storages/StorageSet.h
@@ -35,6 +35,7 @@ class StorageSetOrJoinBase : public IStorage
         const StorageID & table_id_,
         const ColumnsDescription & columns_,
         const ConstraintsDescription & constraints_,
+        const String & comment,
         bool persistent_);
 
     DiskPtr disk;
@@ -91,6 +92,7 @@ friend struct ext::shared_ptr_helper<StorageSet>;
         const StorageID & table_id_,
         const ColumnsDescription & columns_,
         const ConstraintsDescription & constraints_,
+        const String & comment,
         bool persistent_);
 };
 
diff --git a/src/Storages/StorageStripeLog.cpp b/src/Storages/StorageStripeLog.cpp
index d845dfb71f2c..36b10dfd2bbd 100644
--- a/src/Storages/StorageStripeLog.cpp
+++ b/src/Storages/StorageStripeLog.cpp
@@ -258,6 +258,7 @@ StorageStripeLog::StorageStripeLog(
     const StorageID & table_id_,
     const ColumnsDescription & columns_,
     const ConstraintsDescription & constraints_,
+    const String & comment,
     bool attach,
     size_t max_compress_block_size_)
     : IStorage(table_id_)
@@ -270,6 +271,7 @@ StorageStripeLog::StorageStripeLog(
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
     storage_metadata.setConstraints(constraints_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 
     if (relative_path_.empty())
@@ -410,8 +412,14 @@ void registerStorageStripeLog(StorageFactory & factory)
         DiskPtr disk = args.getContext()->getDisk(disk_name);
 
         return StorageStripeLog::create(
-            disk, args.relative_data_path, args.table_id, args.columns, args.constraints,
-            args.attach, args.getContext()->getSettings().max_compress_block_size);
+            disk,
+            args.relative_data_path,
+            args.table_id,
+            args.columns,
+            args.constraints,
+            args.comment,
+            args.attach,
+            args.getContext()->getSettings().max_compress_block_size);
     }, features);
 }
 
diff --git a/src/Storages/StorageStripeLog.h b/src/Storages/StorageStripeLog.h
index 7fad94870dc3..21dbbd4bae8c 100644
--- a/src/Storages/StorageStripeLog.h
+++ b/src/Storages/StorageStripeLog.h
@@ -52,6 +52,7 @@ class StorageStripeLog final : public ext::shared_ptr_helper<StorageStripeLog>,
         const StorageID & table_id_,
         const ColumnsDescription & columns_,
         const ConstraintsDescription & constraints_,
+        const String & comment,
         bool attach,
         size_t max_compress_block_size_);
 
diff --git a/src/Storages/StorageTinyLog.cpp b/src/Storages/StorageTinyLog.cpp
index 41c2961e9299..689b1307f4d7 100644
--- a/src/Storages/StorageTinyLog.cpp
+++ b/src/Storages/StorageTinyLog.cpp
@@ -386,6 +386,7 @@ StorageTinyLog::StorageTinyLog(
     const StorageID & table_id_,
     const ColumnsDescription & columns_,
     const ConstraintsDescription & constraints_,
+    const String & comment,
     bool attach,
     size_t max_compress_block_size_)
     : IStorage(table_id_)
@@ -398,6 +399,7 @@ StorageTinyLog::StorageTinyLog(
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
     storage_metadata.setConstraints(constraints_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 
     if (relative_path_.empty())
@@ -551,8 +553,14 @@ void registerStorageTinyLog(StorageFactory & factory)
         DiskPtr disk = args.getContext()->getDisk(disk_name);
 
         return StorageTinyLog::create(
-            disk, args.relative_data_path, args.table_id, args.columns, args.constraints,
-            args.attach, args.getContext()->getSettings().max_compress_block_size);
+            disk,
+            args.relative_data_path,
+            args.table_id,
+            args.columns,
+            args.constraints,
+            args.comment,
+            args.attach,
+            args.getContext()->getSettings().max_compress_block_size);
     }, features);
 }
 
diff --git a/src/Storages/StorageTinyLog.h b/src/Storages/StorageTinyLog.h
index 01652169b625..72cf1ce7e2e5 100644
--- a/src/Storages/StorageTinyLog.h
+++ b/src/Storages/StorageTinyLog.h
@@ -52,6 +52,7 @@ class StorageTinyLog final : public ext::shared_ptr_helper<StorageTinyLog>, publ
         const StorageID & table_id_,
         const ColumnsDescription & columns_,
         const ConstraintsDescription & constraints_,
+        const String & comment,
         bool attach,
         size_t max_compress_block_size_);
 
diff --git a/src/Storages/StorageURL.cpp b/src/Storages/StorageURL.cpp
index 824f11648512..fd9453e632c1 100644
--- a/src/Storages/StorageURL.cpp
+++ b/src/Storages/StorageURL.cpp
@@ -41,16 +41,14 @@ IStorageURLBase::IStorageURLBase(
     const std::optional<FormatSettings> & format_settings_,
     const ColumnsDescription & columns_,
     const ConstraintsDescription & constraints_,
+    const String & comment,
     const String & compression_method_)
-    : IStorage(table_id_)
-    , uri(uri_)
-    , compression_method(compression_method_)
-    , format_name(format_name_)
-    , format_settings(format_settings_)
+    : IStorage(table_id_), uri(uri_), compression_method(compression_method_), format_name(format_name_), format_settings(format_settings_)
 {
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
     storage_metadata.setConstraints(constraints_);
+    storage_metadata.setComment(comment);
     setInMemoryMetadata(storage_metadata);
 }
 
@@ -299,31 +297,32 @@ BlockOutputStreamPtr IStorageURLBase::write(const ASTPtr & /*query*/, const Stor
         chooseCompressionMethod(uri.toString(), compression_method));
 }
 
-StorageURL::StorageURL(const Poco::URI & uri_,
-           const StorageID & table_id_,
-           const String & format_name_,
-           const std::optional<FormatSettings> & format_settings_,
-           const ColumnsDescription & columns_,
-           const ConstraintsDescription & constraints_,
-           ContextPtr context_,
-           const String & compression_method_)
-    : IStorageURLBase(uri_, context_, table_id_, format_name_,
-                      format_settings_, columns_, constraints_, compression_method_)
+StorageURL::StorageURL(
+    const Poco::URI & uri_,
+    const StorageID & table_id_,
+    const String & format_name_,
+    const std::optional<FormatSettings> & format_settings_,
+    const ColumnsDescription & columns_,
+    const ConstraintsDescription & constraints_,
+    const String & comment,
+    ContextPtr context_,
+    const String & compression_method_)
+    : IStorageURLBase(uri_, context_, table_id_, format_name_, format_settings_, columns_, constraints_, comment, compression_method_)
 {
     context_->getRemoteHostFilter().checkURL(uri);
 }
 
 
 StorageURLWithFailover::StorageURLWithFailover(
-        const std::vector<String> & uri_options_,
-        const StorageID & table_id_,
-        const String & format_name_,
-        const std::optional<FormatSettings> & format_settings_,
-        const ColumnsDescription & columns_,
-        const ConstraintsDescription & constraints_,
-        ContextPtr context_,
-        const String & compression_method_)
-    : StorageURL(Poco::URI(), table_id_, format_name_, format_settings_, columns_, constraints_, context_, compression_method_)
+    const std::vector<String> & uri_options_,
+    const StorageID & table_id_,
+    const String & format_name_,
+    const std::optional<FormatSettings> & format_settings_,
+    const ColumnsDescription & columns_,
+    const ConstraintsDescription & constraints_,
+    ContextPtr context_,
+    const String & compression_method_)
+    : StorageURL(Poco::URI(), table_id_, format_name_, format_settings_, columns_, constraints_, String{}, context_, compression_method_)
 {
     for (const auto & uri_option : uri_options_)
     {
@@ -404,7 +403,10 @@ void registerStorageURL(StorageFactory & factory)
             args.table_id,
             format_name,
             format_settings,
-            args.columns, args.constraints, args.getContext(),
+            args.columns,
+            args.constraints,
+            args.comment,
+            args.getContext(),
             compression_method);
     },
     {
diff --git a/src/Storages/StorageURL.h b/src/Storages/StorageURL.h
index 012915c9b24f..e1aa1735936b 100644
--- a/src/Storages/StorageURL.h
+++ b/src/Storages/StorageURL.h
@@ -43,6 +43,7 @@ class IStorageURLBase : public IStorage
         const std::optional<FormatSettings> & format_settings_,
         const ColumnsDescription & columns_,
         const ConstraintsDescription & constraints_,
+        const String & comment,
         const String & compression_method_);
 
     Poco::URI uri;
@@ -107,14 +108,16 @@ class StorageURL : public ext::shared_ptr_helper<StorageURL>, public IStorageURL
 {
     friend struct ext::shared_ptr_helper<StorageURL>;
 public:
-    StorageURL(const Poco::URI & uri_,
-            const StorageID & table_id_,
-            const String & format_name_,
-            const std::optional<FormatSettings> & format_settings_,
-            const ColumnsDescription & columns_,
-            const ConstraintsDescription & constraints_,
-            ContextPtr context_,
-            const String & compression_method_);
+    StorageURL(
+        const Poco::URI & uri_,
+        const StorageID & table_id_,
+        const String & format_name_,
+        const std::optional<FormatSettings> & format_settings_,
+        const ColumnsDescription & columns_,
+        const ConstraintsDescription & constraints_,
+        const String & comment,
+        ContextPtr context_,
+        const String & compression_method_);
 
     String getName() const override
     {
diff --git a/src/Storages/StorageView.cpp b/src/Storages/StorageView.cpp
index 75bd4b2967f0..a83e0f62c296 100644
--- a/src/Storages/StorageView.cpp
+++ b/src/Storages/StorageView.cpp
@@ -31,13 +31,12 @@ namespace ErrorCodes
 
 
 StorageView::StorageView(
-    const StorageID & table_id_,
-    const ASTCreateQuery & query,
-    const ColumnsDescription & columns_)
+    const StorageID & table_id_, const ASTCreateQuery & query, const ColumnsDescription & columns_, const String & comment)
     : IStorage(table_id_)
 {
     StorageInMemoryMetadata storage_metadata;
     storage_metadata.setColumns(columns_);
+    storage_metadata.setComment(comment);
 
     if (!query.select)
         throw Exception("SELECT query is not specified for " + getName(), ErrorCodes::INCORRECT_QUERY);
@@ -173,7 +172,7 @@ void registerStorageView(StorageFactory & factory)
         if (args.query.storage)
             throw Exception("Specifying ENGINE is not allowed for a View", ErrorCodes::INCORRECT_QUERY);
 
-        return StorageView::create(args.table_id, args.query, args.columns);
+        return StorageView::create(args.table_id, args.query, args.columns, args.comment);
     });
 }
 
diff --git a/src/Storages/StorageView.h b/src/Storages/StorageView.h
index fa11472218de..b5b8ae2dd8e6 100644
--- a/src/Storages/StorageView.h
+++ b/src/Storages/StorageView.h
@@ -49,10 +49,7 @@ class StorageView final : public ext::shared_ptr_helper<StorageView>, public ISt
     static ASTPtr restoreViewName(ASTSelectQuery & select_query, const ASTPtr & view_name);
 
 protected:
-    StorageView(
-        const StorageID & table_id_,
-        const ASTCreateQuery & query,
-        const ColumnsDescription & columns_);
+    StorageView(const StorageID & table_id_, const ASTCreateQuery & query, const ColumnsDescription & columns_, const String & comment);
 };
 
 }
diff --git a/src/Storages/StorageXDBC.cpp b/src/Storages/StorageXDBC.cpp
index f94696c716b7..88d546698893 100644
--- a/src/Storages/StorageXDBC.cpp
+++ b/src/Storages/StorageXDBC.cpp
@@ -30,17 +30,20 @@ StorageXDBC::StorageXDBC(
     const std::string & remote_database_name_,
     const std::string & remote_table_name_,
     const ColumnsDescription & columns_,
+    const String & comment,
     ContextPtr context_,
     const BridgeHelperPtr bridge_helper_)
     /// Please add support for constraints as soon as StorageODBC or JDBC will support insertion.
-    : IStorageURLBase(Poco::URI(),
-                      context_,
-                      table_id_,
-                      IXDBCBridgeHelper::DEFAULT_FORMAT,
-                      getFormatSettings(context_),
-                      columns_,
-                      ConstraintsDescription{},
-                      "" /* CompressionMethod */)
+    : IStorageURLBase(
+        Poco::URI(),
+        context_,
+        table_id_,
+        IXDBCBridgeHelper::DEFAULT_FORMAT,
+        getFormatSettings(context_),
+        columns_,
+        ConstraintsDescription{},
+        comment,
+        "" /* CompressionMethod */)
     , bridge_helper(bridge_helper_)
     , remote_database_name(remote_database_name_)
     , remote_table_name(remote_table_name_)
@@ -167,10 +170,12 @@ namespace
             BridgeHelperPtr bridge_helper = std::make_shared<XDBCBridgeHelper<BridgeHelperMixin>>(args.getContext(),
                 args.getContext()->getSettingsRef().http_receive_timeout.value,
                 engine_args[0]->as<ASTLiteral &>().value.safeGet<String>());
-            return std::make_shared<StorageXDBC>(args.table_id,
+            return std::make_shared<StorageXDBC>(
+                args.table_id,
                 engine_args[1]->as<ASTLiteral &>().value.safeGet<String>(),
                 engine_args[2]->as<ASTLiteral &>().value.safeGet<String>(),
                 args.columns,
+                args.comment,
                 args.getContext(),
                 bridge_helper);
 
diff --git a/src/Storages/StorageXDBC.h b/src/Storages/StorageXDBC.h
index 064912fda925..db0b506546d3 100644
--- a/src/Storages/StorageXDBC.h
+++ b/src/Storages/StorageXDBC.h
@@ -29,6 +29,7 @@ class StorageXDBC : public IStorageURLBase
         const std::string & remote_database_name,
         const std::string & remote_table_name,
         const ColumnsDescription & columns_,
+        const String & comment,
         ContextPtr context_,
         BridgeHelperPtr bridge_helper_);
 
diff --git a/src/Storages/System/StorageSystemTables.cpp b/src/Storages/System/StorageSystemTables.cpp
index 783bc50749c6..1d38ca6ebbb8 100644
--- a/src/Storages/System/StorageSystemTables.cpp
+++ b/src/Storages/System/StorageSystemTables.cpp
@@ -34,8 +34,7 @@ StorageSystemTables::StorageSystemTables(const StorageID & table_id_)
     : IStorage(table_id_)
 {
     StorageInMemoryMetadata storage_metadata;
-    storage_metadata.setColumns(ColumnsDescription(
-    {
+    storage_metadata.setColumns(ColumnsDescription({
         {"database", std::make_shared<DataTypeString>()},
         {"name", std::make_shared<DataTypeString>()},
         {"uuid", std::make_shared<DataTypeUUID>()},
@@ -57,6 +56,7 @@ StorageSystemTables::StorageSystemTables(const StorageID & table_id_)
         {"total_bytes", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt64>())},
         {"lifetime_rows", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt64>())},
         {"lifetime_bytes", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeUInt64>())},
+        {"comment", std::make_shared<DataTypeString>()},
     }));
     setInMemoryMetadata(storage_metadata);
 }
@@ -244,6 +244,10 @@ class TablesBlockSource : public SourceWithProgress
                         // lifetime_bytes
                         if (columns_mask[src_index++])
                             res_columns[res_index++]->insertDefault();
+
+                        // comment
+                        if (columns_mask[src_index++])
+                            res_columns[res_index++]->insertDefault();
                     }
                 }
 
@@ -471,6 +475,14 @@ class TablesBlockSource : public SourceWithProgress
                     else
                         res_columns[res_index++]->insertDefault();
                 }
+
+                if (columns_mask[src_index++])
+                {
+                    if (metadata_snapshot)
+                        res_columns[res_index++]->insert(metadata_snapshot->comment);
+                    else
+                        res_columns[res_index++]->insertDefault();
+                }
             }
         }
 
diff --git a/src/TableFunctions/ITableFunctionXDBC.cpp b/src/TableFunctions/ITableFunctionXDBC.cpp
index 51431a1e3a66..9aa099c13339 100644
--- a/src/TableFunctions/ITableFunctionXDBC.cpp
+++ b/src/TableFunctions/ITableFunctionXDBC.cpp
@@ -95,7 +95,8 @@ StoragePtr ITableFunctionXDBC::executeImpl(const ASTPtr & /*ast_function*/, Cont
 {
     startBridgeIfNot(context);
     auto columns = getActualTableStructure(context);
-    auto result = std::make_shared<StorageXDBC>(StorageID(getDatabaseName(), table_name), schema_name, remote_table_name, columns, context, helper);
+    auto result = std::make_shared<StorageXDBC>(
+        StorageID(getDatabaseName(), table_name), schema_name, remote_table_name, columns, String{}, context, helper);
     result->startup();
     return result;
 }
diff --git a/src/TableFunctions/TableFunctionDictionary.cpp b/src/TableFunctions/TableFunctionDictionary.cpp
index 268f49b912e6..0eb3c286be0b 100644
--- a/src/TableFunctions/TableFunctionDictionary.cpp
+++ b/src/TableFunctions/TableFunctionDictionary.cpp
@@ -54,11 +54,7 @@ StoragePtr TableFunctionDictionary::executeImpl(
     auto dictionary_table_structure = getActualTableStructure(context);
 
     auto result = StorageDictionary::create(
-        dict_id,
-        dictionary_name,
-        std::move(dictionary_table_structure),
-        StorageDictionary::Location::Custom,
-        context);
+        dict_id, dictionary_name, std::move(dictionary_table_structure), String{}, StorageDictionary::Location::Custom, context);
 
     return result;
 }
diff --git a/src/TableFunctions/TableFunctionFile.cpp b/src/TableFunctions/TableFunctionFile.cpp
index 6ecb5606d56d..f732e160751e 100644
--- a/src/TableFunctions/TableFunctionFile.cpp
+++ b/src/TableFunctions/TableFunctionFile.cpp
@@ -17,8 +17,7 @@ StoragePtr TableFunctionFile::getStorage(const String & source,
 {
     // For `file` table function, we are going to use format settings from the
     // query context.
-    StorageFile::CommonArguments args
-    {
+    StorageFile::CommonArguments args{
         WithContext(global_context),
         StorageID(getDatabaseName(), table_name),
         format_,
@@ -26,6 +25,7 @@ StoragePtr TableFunctionFile::getStorage(const String & source,
         compression_method_,
         columns,
         ConstraintsDescription{},
+        String{},
     };
 
     return StorageFile::create(source, global_context->getUserFilesPath(), args);
diff --git a/src/TableFunctions/TableFunctionGenerateRandom.cpp b/src/TableFunctions/TableFunctionGenerateRandom.cpp
index b19be7bd7a30..ff9630eabd8c 100644
--- a/src/TableFunctions/TableFunctionGenerateRandom.cpp
+++ b/src/TableFunctions/TableFunctionGenerateRandom.cpp
@@ -82,7 +82,8 @@ ColumnsDescription TableFunctionGenerateRandom::getActualTableStructure(ContextP
 StoragePtr TableFunctionGenerateRandom::executeImpl(const ASTPtr & /*ast_function*/, ContextPtr context, const std::string & table_name, ColumnsDescription /*cached_columns*/) const
 {
     auto columns = getActualTableStructure(context);
-    auto res = StorageGenerateRandom::create(StorageID(getDatabaseName(), table_name), columns, max_array_length, max_string_length, random_seed);
+    auto res = StorageGenerateRandom::create(
+        StorageID(getDatabaseName(), table_name), columns, String{}, max_array_length, max_string_length, random_seed);
     res->startup();
     return res;
 }
diff --git a/src/TableFunctions/TableFunctionHDFS.cpp b/src/TableFunctions/TableFunctionHDFS.cpp
index 714c6ea1f59c..245674b0e06b 100644
--- a/src/TableFunctions/TableFunctionHDFS.cpp
+++ b/src/TableFunctions/TableFunctionHDFS.cpp
@@ -19,6 +19,7 @@ StoragePtr TableFunctionHDFS::getStorage(
         format_,
         columns,
         ConstraintsDescription{},
+        String{},
         global_context,
         compression_method_);
 }
diff --git a/src/TableFunctions/TableFunctionMerge.cpp b/src/TableFunctions/TableFunctionMerge.cpp
index 6d10b0d04b61..051aa38398ff 100644
--- a/src/TableFunctions/TableFunctionMerge.cpp
+++ b/src/TableFunctions/TableFunctionMerge.cpp
@@ -109,6 +109,7 @@ StoragePtr TableFunctionMerge::executeImpl(const ASTPtr & /*ast_function*/, Cont
     auto res = StorageMerge::create(
         StorageID(getDatabaseName(), table_name),
         getActualTableStructure(context),
+        String{},
         source_database,
         getSourceTables(context),
         context);
diff --git a/src/TableFunctions/TableFunctionMySQL.cpp b/src/TableFunctions/TableFunctionMySQL.cpp
index 7d3fca58451a..325b2dc44c6b 100644
--- a/src/TableFunctions/TableFunctionMySQL.cpp
+++ b/src/TableFunctions/TableFunctionMySQL.cpp
@@ -106,6 +106,7 @@ StoragePtr TableFunctionMySQL::executeImpl(
         on_duplicate_clause,
         columns,
         ConstraintsDescription{},
+        String{},
         context);
 
     pool.reset();
diff --git a/src/TableFunctions/TableFunctionNull.cpp b/src/TableFunctions/TableFunctionNull.cpp
index 334d7c3dcbd4..63e496ecd0c0 100644
--- a/src/TableFunctions/TableFunctionNull.cpp
+++ b/src/TableFunctions/TableFunctionNull.cpp
@@ -38,7 +38,7 @@ ColumnsDescription TableFunctionNull::getActualTableStructure(ContextPtr context
 StoragePtr TableFunctionNull::executeImpl(const ASTPtr & /*ast_function*/, ContextPtr context, const std::string & table_name, ColumnsDescription /*cached_columns*/) const
 {
     auto columns = getActualTableStructure(context);
-    auto res = StorageNull::create(StorageID(getDatabaseName(), table_name), columns, ConstraintsDescription());
+    auto res = StorageNull::create(StorageID(getDatabaseName(), table_name), columns, ConstraintsDescription(), String{});
     res->startup();
     return res;
 }
diff --git a/src/TableFunctions/TableFunctionPostgreSQL.cpp b/src/TableFunctions/TableFunctionPostgreSQL.cpp
index 47d0c0168867..6c3d77f226eb 100644
--- a/src/TableFunctions/TableFunctionPostgreSQL.cpp
+++ b/src/TableFunctions/TableFunctionPostgreSQL.cpp
@@ -30,8 +30,14 @@ StoragePtr TableFunctionPostgreSQL::executeImpl(const ASTPtr & /*ast_function*/,
 {
     auto columns = getActualTableStructure(context);
     auto result = std::make_shared<StoragePostgreSQL>(
-            StorageID(getDatabaseName(), table_name), connection_pool, remote_table_name,
-            columns, ConstraintsDescription{}, context, remote_table_schema);
+        StorageID(getDatabaseName(), table_name),
+        connection_pool,
+        remote_table_name,
+        columns,
+        ConstraintsDescription{},
+        String{},
+        context,
+        remote_table_schema);
 
     result->startup();
     return result;
diff --git a/src/TableFunctions/TableFunctionRemote.cpp b/src/TableFunctions/TableFunctionRemote.cpp
index ab2458b64f4b..8539705a2d28 100644
--- a/src/TableFunctions/TableFunctionRemote.cpp
+++ b/src/TableFunctions/TableFunctionRemote.cpp
@@ -240,6 +240,7 @@ StoragePtr TableFunctionRemote::executeImpl(const ASTPtr & /*ast_function*/, Con
             StorageID(getDatabaseName(), table_name),
             cached_columns,
             ConstraintsDescription{},
+            String{},
             remote_table_id.database_name,
             remote_table_id.table_name,
             String{},
diff --git a/src/TableFunctions/TableFunctionS3.cpp b/src/TableFunctions/TableFunctionS3.cpp
index 973899d21019..1eddbf69b7c9 100644
--- a/src/TableFunctions/TableFunctionS3.cpp
+++ b/src/TableFunctions/TableFunctionS3.cpp
@@ -89,19 +89,20 @@ StoragePtr TableFunctionS3::executeImpl(const ASTPtr & /*ast_function*/, Context
     UInt64 max_connections = context->getSettingsRef().s3_max_connections;
 
     StoragePtr storage = StorageS3::create(
-            s3_uri,
-            access_key_id,
-            secret_access_key,
-            StorageID(getDatabaseName(), table_name),
-            format,
-            s3_max_single_read_retries,
-            min_upload_part_size,
-            max_single_part_upload_size,
-            max_connections,
-            getActualTableStructure(context),
-            ConstraintsDescription{},
-            context,
-            compression_method);
+        s3_uri,
+        access_key_id,
+        secret_access_key,
+        StorageID(getDatabaseName(), table_name),
+        format,
+        s3_max_single_read_retries,
+        min_upload_part_size,
+        max_single_part_upload_size,
+        max_connections,
+        getActualTableStructure(context),
+        ConstraintsDescription{},
+        String{},
+        context,
+        compression_method);
 
     storage->startup();
 
diff --git a/src/TableFunctions/TableFunctionS3Cluster.cpp b/src/TableFunctions/TableFunctionS3Cluster.cpp
index 16f48c706089..7b0d50a6a0ab 100644
--- a/src/TableFunctions/TableFunctionS3Cluster.cpp
+++ b/src/TableFunctions/TableFunctionS3Cluster.cpp
@@ -114,14 +114,21 @@ StoragePtr TableFunctionS3Cluster::executeImpl(
         UInt64 max_single_part_upload_size = context->getSettingsRef().s3_max_single_part_upload_size;
         UInt64 max_connections = context->getSettingsRef().s3_max_connections;
         storage = StorageS3::create(
-            s3_uri, access_key_id, secret_access_key, StorageID(getDatabaseName(), table_name),
+            s3_uri,
+            access_key_id,
+            secret_access_key,
+            StorageID(getDatabaseName(), table_name),
             format,
             s3_max_single_read_retries,
             min_upload_part_size,
             max_single_part_upload_size,
             max_connections,
-            getActualTableStructure(context), ConstraintsDescription{},
-            context, compression_method, /*distributed_processing=*/true);
+            getActualTableStructure(context),
+            ConstraintsDescription{},
+            String{},
+            context,
+            compression_method,
+            /*distributed_processing=*/true);
     }
     else
     {
diff --git a/src/TableFunctions/TableFunctionURL.cpp b/src/TableFunctions/TableFunctionURL.cpp
index c2acb3ee207e..a1fe142bea68 100644
--- a/src/TableFunctions/TableFunctionURL.cpp
+++ b/src/TableFunctions/TableFunctionURL.cpp
@@ -20,9 +20,16 @@ StoragePtr TableFunctionURL::getStorage(
     if ((source.find('{') == std::string::npos || source.find('}') == std::string::npos) && source.find('|') == std::string::npos)
     {
         Poco::URI uri(source);
-        return StorageURL::create(uri, StorageID(getDatabaseName(), table_name),
-            format_, std::nullopt /*format settings*/, columns,
-            ConstraintsDescription{}, global_context, compression_method_);
+        return StorageURL::create(
+            uri,
+            StorageID(getDatabaseName(), table_name),
+            format_,
+            std::nullopt /*format settings*/,
+            columns,
+            ConstraintsDescription{},
+            String{},
+            global_context,
+            compression_method_);
     }
     else
     {
diff --git a/src/TableFunctions/TableFunctionView.cpp b/src/TableFunctions/TableFunctionView.cpp
index 3f51e0bbc950..8ca061c43d55 100644
--- a/src/TableFunctions/TableFunctionView.cpp
+++ b/src/TableFunctions/TableFunctionView.cpp
@@ -42,7 +42,7 @@ StoragePtr TableFunctionView::executeImpl(
     const ASTPtr & /*ast_function*/, ContextPtr context, const std::string & table_name, ColumnsDescription /*cached_columns*/) const
 {
     auto columns = getActualTableStructure(context);
-    auto res = StorageView::create(StorageID(getDatabaseName(), table_name), create, columns);
+    auto res = StorageView::create(StorageID(getDatabaseName(), table_name), create, columns, String{});
     res->startup();
     return res;
 }
