diff --git a/src/Storages/tests/gtest_storage_log.cpp b/src/Storages/tests/gtest_storage_log.cpp
index a4886de434cc..e18e4b40ac9c 100644
--- a/src/Storages/tests/gtest_storage_log.cpp
+++ b/src/Storages/tests/gtest_storage_log.cpp
@@ -33,7 +33,7 @@ DB::StoragePtr createStorage(DB::DiskPtr & disk)
     names_and_types.emplace_back("a", std::make_shared<DataTypeUInt64>());
 
     StoragePtr table = StorageLog::create(
-        disk, "table/", StorageID("test", "test"), ColumnsDescription{names_and_types}, ConstraintsDescription{}, false, 1048576);
+        disk, "table/", StorageID("test", "test"), ColumnsDescription{names_and_types}, ConstraintsDescription{}, String{}, false, 1048576);
 
     table->startup();
 
diff --git a/src/Storages/tests/gtest_transform_query_for_external_database.cpp b/src/Storages/tests/gtest_transform_query_for_external_database.cpp
index d774fd144cfa..6735206862d6 100644
--- a/src/Storages/tests/gtest_transform_query_for_external_database.cpp
+++ b/src/Storages/tests/gtest_transform_query_for_external_database.cpp
@@ -85,7 +85,8 @@ struct State
             const auto & db_name = tab.table.database;
             database->attachTable(
                 table_name,
-                StorageMemory::create(StorageID(db_name, table_name), ColumnsDescription{getColumns()}, ConstraintsDescription{}));
+                StorageMemory::create(
+                    StorageID(db_name, table_name), ColumnsDescription{getColumns()}, ConstraintsDescription{}, String{}));
         }
         DatabaseCatalog::instance().attachDatabase(database->getDatabaseName(), database);
         context->setCurrentDatabase("test");
diff --git a/tests/queries/0_stateless/01821_table_comment.reference b/tests/queries/0_stateless/01821_table_comment.reference
new file mode 100644
index 000000000000..05acabae3d45
--- /dev/null
+++ b/tests/queries/0_stateless/01821_table_comment.reference
@@ -0,0 +1,4 @@
+t1	this is a temtorary table
+t2	this is a MergeTree table
+t3	this is a Log table
+CREATE TABLE default.t1
(
    `n` Int8
)
ENGINE = Memory
COMMENT \'this is a temtorary table\'
diff --git a/tests/queries/0_stateless/01821_table_comment.sql b/tests/queries/0_stateless/01821_table_comment.sql
new file mode 100644
index 000000000000..c09f121459c1
--- /dev/null
+++ b/tests/queries/0_stateless/01821_table_comment.sql
@@ -0,0 +1,37 @@
+DROP TABLE IF EXISTS t1;
+DROP TABLE IF EXISTS t2;
+DROP TABLE IF EXISTS t3;
+
+CREATE TABLE t1
+(
+    `n` Int8
+)
+ENGINE = Memory
+COMMENT 'this is a temtorary table';
+
+CREATE TABLE t2
+(
+    `n` Int8
+)
+ENGINE = MergeTree
+ORDER BY n
+COMMENT 'this is a MergeTree table';
+
+CREATE TABLE t3
+(
+    `n` Int8
+)
+ENGINE = Log
+COMMENT 'this is a Log table';
+
+SELECT
+    name,
+    comment
+FROM system.tables
+WHERE name IN ('t1', 't2', 't3') order by name;
+
+SHOW CREATE TABLE t1;
+
+DROP TABLE t1;
+DROP TABLE t2;
+DROP TABLE t3;
diff --git a/tests/queries/skip_list.json b/tests/queries/skip_list.json
index ce1cfe5f6899..f6f44baeacaa 100644
--- a/tests/queries/skip_list.json
+++ b/tests/queries/skip_list.json
@@ -718,6 +718,7 @@
         "01802_test_postgresql_protocol_with_row_policy", /// Creates database and users
         "01804_dictionary_decimal256_type",
         "01850_dist_INSERT_preserve_error", // uses cluster with different static databases shard_0/shard_1
+        "01821_table_comment",
         "01710_projection_fetch"
     ]
 }
