{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 26051,
  "instance_id": "ClickHouse__ClickHouse-26051",
  "issue_numbers": [
    "21184"
  ],
  "base_commit": "e231f6ce5cea254acbf7a7f681c52d83a04f6626",
  "patch": "diff --git a/src/Core/MySQL/MySQLClient.cpp b/src/Core/MySQL/MySQLClient.cpp\nindex 3650818c543e..d103ea873e5f 100644\n--- a/src/Core/MySQL/MySQLClient.cpp\n+++ b/src/Core/MySQL/MySQLClient.cpp\n@@ -26,13 +26,14 @@ namespace ErrorCodes\n MySQLClient::MySQLClient(const String & host_, UInt16 port_, const String & user_, const String & password_)\n     : host(host_), port(port_), user(user_), password(std::move(password_))\n {\n-    client_capability_flags = CLIENT_PROTOCOL_41 | CLIENT_PLUGIN_AUTH | CLIENT_SECURE_CONNECTION;\n+    mysql_context.client_capabilities = CLIENT_PROTOCOL_41 | CLIENT_PLUGIN_AUTH | CLIENT_SECURE_CONNECTION;\n }\n \n MySQLClient::MySQLClient(MySQLClient && other)\n     : host(std::move(other.host)), port(other.port), user(std::move(other.user)), password(std::move(other.password))\n-    , client_capability_flags(other.client_capability_flags)\n+    , mysql_context(other.mysql_context)\n {\n+    mysql_context.sequence_id = 0;\n }\n \n void MySQLClient::connect()\n@@ -56,7 +57,7 @@ void MySQLClient::connect()\n \n     in = std::make_shared<ReadBufferFromPocoSocket>(*socket);\n     out = std::make_shared<WriteBufferFromPocoSocket>(*socket);\n-    packet_endpoint = std::make_shared<PacketEndpoint>(*in, *out, seq);\n+    packet_endpoint = mysql_context.makeEndpoint(*in, *out);\n     handshake();\n }\n \n@@ -68,7 +69,7 @@ void MySQLClient::disconnect()\n         socket->close();\n     socket = nullptr;\n     connected = false;\n-    seq = 0;\n+    mysql_context.sequence_id = 0;\n }\n \n /// https://dev.mysql.com/doc/internals/en/connection-phase-packets.html\n@@ -87,10 +88,10 @@ void MySQLClient::handshake()\n     String auth_plugin_data = native41.getAuthPluginData();\n \n     HandshakeResponse handshake_response(\n-        client_capability_flags, MAX_PACKET_LENGTH, charset_utf8, user, \"\", auth_plugin_data, mysql_native_password);\n+        mysql_context.client_capabilities, MAX_PACKET_LENGTH, charset_utf8, user, \"\", auth_plugin_data, mysql_native_password);\n     packet_endpoint->sendPacket<HandshakeResponse>(handshake_response, true);\n \n-    ResponsePacket packet_response(client_capability_flags, true);\n+    ResponsePacket packet_response(mysql_context.client_capabilities, true);\n     packet_endpoint->receivePacket(packet_response);\n     packet_endpoint->resetSequenceId();\n \n@@ -105,7 +106,7 @@ void MySQLClient::writeCommand(char command, String query)\n     WriteCommand write_command(command, query);\n     packet_endpoint->sendPacket<WriteCommand>(write_command, true);\n \n-    ResponsePacket packet_response(client_capability_flags);\n+    ResponsePacket packet_response(mysql_context.client_capabilities);\n     packet_endpoint->receivePacket(packet_response);\n     switch (packet_response.getType())\n     {\n@@ -124,7 +125,7 @@ void MySQLClient::registerSlaveOnMaster(UInt32 slave_id)\n     RegisterSlave register_slave(slave_id);\n     packet_endpoint->sendPacket<RegisterSlave>(register_slave, true);\n \n-    ResponsePacket packet_response(client_capability_flags);\n+    ResponsePacket packet_response(mysql_context.client_capabilities);\n     packet_endpoint->receivePacket(packet_response);\n     packet_endpoint->resetSequenceId();\n     if (packet_response.getType() == PACKET_ERR)\ndiff --git a/src/Core/MySQL/MySQLClient.h b/src/Core/MySQL/MySQLClient.h\nindex e503c9855843..6144b14690d2 100644\n--- a/src/Core/MySQL/MySQLClient.h\n+++ b/src/Core/MySQL/MySQLClient.h\n@@ -45,9 +45,7 @@ class MySQLClient\n     String password;\n \n     bool connected = false;\n-    UInt32 client_capability_flags = 0;\n-\n-    uint8_t seq = 0;\n+    MySQLWireContext mysql_context;\n     const UInt8 charset_utf8 = 33;\n     const String mysql_native_password = \"mysql_native_password\";\n \ndiff --git a/src/Core/MySQL/PacketEndpoint.cpp b/src/Core/MySQL/PacketEndpoint.cpp\nindex 0bc5c5855161..fa1d60034d2b 100644\n--- a/src/Core/MySQL/PacketEndpoint.cpp\n+++ b/src/Core/MySQL/PacketEndpoint.cpp\n@@ -68,4 +68,15 @@ String PacketEndpoint::packetToText(const String & payload)\n \n }\n \n+\n+MySQLProtocol::PacketEndpointPtr MySQLWireContext::makeEndpoint(WriteBuffer & out)\n+{\n+    return MySQLProtocol::PacketEndpoint::create(out, sequence_id);\n+}\n+\n+MySQLProtocol::PacketEndpointPtr MySQLWireContext::makeEndpoint(ReadBuffer & in, WriteBuffer & out)\n+{\n+    return MySQLProtocol::PacketEndpoint::create(in, out, sequence_id);\n+}\n+\n }\ndiff --git a/src/Core/MySQL/PacketEndpoint.h b/src/Core/MySQL/PacketEndpoint.h\nindex d027934eafb1..3aa76ac93de5 100644\n--- a/src/Core/MySQL/PacketEndpoint.h\n+++ b/src/Core/MySQL/PacketEndpoint.h\n@@ -5,6 +5,7 @@\n #include \"IMySQLReadPacket.h\"\n #include \"IMySQLWritePacket.h\"\n #include \"IO/MySQLPacketPayloadReadBuffer.h\"\n+#include <common/shared_ptr_helper.h>\n \n namespace DB\n {\n@@ -15,19 +16,13 @@ namespace MySQLProtocol\n /* Writes and reads packets, keeping sequence-id.\n  * Throws ProtocolError, if packet with incorrect sequence-id was received.\n  */\n-class PacketEndpoint\n+class PacketEndpoint : public shared_ptr_helper<PacketEndpoint>\n {\n public:\n     uint8_t & sequence_id;\n     ReadBuffer * in;\n     WriteBuffer * out;\n \n-    /// For writing.\n-    PacketEndpoint(WriteBuffer & out_, uint8_t & sequence_id_);\n-\n-    /// For reading and writing.\n-    PacketEndpoint(ReadBuffer & in_, WriteBuffer & out_, uint8_t & sequence_id_);\n-\n     MySQLPacketPayloadReadBuffer getPayload();\n \n     void receivePacket(IMySQLReadPacket & packet);\n@@ -48,8 +43,29 @@ class PacketEndpoint\n \n     /// Converts packet to text. Is used for debug output.\n     static String packetToText(const String & payload);\n+\n+protected:\n+    /// For writing.\n+    PacketEndpoint(WriteBuffer & out_, uint8_t & sequence_id_);\n+\n+    /// For reading and writing.\n+    PacketEndpoint(ReadBuffer & in_, WriteBuffer & out_, uint8_t & sequence_id_);\n+\n+    friend struct shared_ptr_helper<PacketEndpoint>;\n };\n \n+using PacketEndpointPtr = std::shared_ptr<PacketEndpoint>;\n+\n }\n \n+struct MySQLWireContext\n+{\n+    uint8_t sequence_id = 0;\n+    uint32_t client_capabilities = 0;\n+    size_t max_packet_size = 0;\n+\n+    MySQLProtocol::PacketEndpointPtr makeEndpoint(WriteBuffer & out);\n+    MySQLProtocol::PacketEndpointPtr makeEndpoint(ReadBuffer & in, WriteBuffer & out);\n+};\n+\n }\ndiff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp\nindex 8b7cf9635b49..a00839fc5f56 100644\n--- a/src/Formats/FormatFactory.cpp\n+++ b/src/Formats/FormatFactory.cpp\n@@ -33,6 +33,7 @@ namespace ErrorCodes\n     extern const int LOGICAL_ERROR;\n     extern const int FORMAT_IS_NOT_SUITABLE_FOR_INPUT;\n     extern const int FORMAT_IS_NOT_SUITABLE_FOR_OUTPUT;\n+    extern const int UNSUPPORTED_METHOD;\n }\n \n const FormatFactory::Creators & FormatFactory::getCreators(const String & name) const\n@@ -207,6 +208,9 @@ BlockOutputStreamPtr FormatFactory::getOutputStreamParallelIfPossible(\n     WriteCallback callback,\n     const std::optional<FormatSettings> & _format_settings) const\n {\n+    if (context->getMySQLProtocolContext() && name != \"MySQLWire\")\n+        throw Exception(ErrorCodes::UNSUPPORTED_METHOD, \"MySQL protocol does not support custom output formats\");\n+\n     const auto & output_getter = getCreators(name).output_processor_creator;\n \n     const Settings & settings = context->getSettingsRef();\n@@ -309,7 +313,10 @@ OutputFormatPtr FormatFactory::getOutputFormatParallelIfPossible(\n {\n     const auto & output_getter = getCreators(name).output_processor_creator;\n     if (!output_getter)\n-        throw Exception(\"Format \" + name + \" is not suitable for output (with processors)\", ErrorCodes::FORMAT_IS_NOT_SUITABLE_FOR_OUTPUT);\n+        throw Exception(ErrorCodes::FORMAT_IS_NOT_SUITABLE_FOR_OUTPUT, \"Format {} is not suitable for output (with processors)\", name);\n+\n+    if (context->getMySQLProtocolContext() && name != \"MySQLWire\")\n+        throw Exception(ErrorCodes::UNSUPPORTED_METHOD, \"MySQL protocol does not support custom output formats\");\n \n     auto format_settings = _format_settings ? *_format_settings : getFormatSettings(context);\n \n@@ -344,7 +351,7 @@ OutputFormatPtr FormatFactory::getOutputFormat(\n {\n     const auto & output_getter = getCreators(name).output_processor_creator;\n     if (!output_getter)\n-        throw Exception(\"Format \" + name + \" is not suitable for output (with processors)\", ErrorCodes::FORMAT_IS_NOT_SUITABLE_FOR_OUTPUT);\n+        throw Exception(ErrorCodes::FORMAT_IS_NOT_SUITABLE_FOR_OUTPUT, \"Format {} is not suitable for output (with processors)\", name);\n \n     if (context->hasQueryContext() && context->getSettingsRef().log_queries)\n         context->getQueryContext()->addQueryFactoriesInfo(Context::QueryLogFactories::Format, name);\ndiff --git a/src/Interpreters/Context.cpp b/src/Interpreters/Context.cpp\nindex 9b204f12ab25..901c38791b93 100644\n--- a/src/Interpreters/Context.cpp\n+++ b/src/Interpreters/Context.cpp\n@@ -2335,11 +2335,6 @@ OutputFormatPtr Context::getOutputFormatParallelIfPossible(const String & name,\n     return FormatFactory::instance().getOutputFormatParallelIfPossible(name, buf, sample, shared_from_this());\n }\n \n-OutputFormatPtr Context::getOutputFormat(const String & name, WriteBuffer & buf, const Block & sample) const\n-{\n-    return FormatFactory::instance().getOutputFormat(name, buf, sample, shared_from_this());\n-}\n-\n \n time_t Context::getUptimeSeconds() const\n {\n@@ -2712,4 +2707,18 @@ PartUUIDsPtr Context::getIgnoredPartUUIDs() const\n     return ignored_part_uuids;\n }\n \n+void Context::setMySQLProtocolContext(MySQLWireContext * mysql_context)\n+{\n+    assert(session_context.lock().get() == this);\n+    assert(!mysql_protocol_context);\n+    assert(mysql_context);\n+    mysql_protocol_context = mysql_context;\n+}\n+\n+MySQLWireContext * Context::getMySQLProtocolContext() const\n+{\n+    assert(!mysql_protocol_context || session_context.lock().get());\n+    return mysql_protocol_context;\n+}\n+\n }\ndiff --git a/src/Interpreters/Context.h b/src/Interpreters/Context.h\nindex 2b53c7379157..9c14a50e0e16 100644\n--- a/src/Interpreters/Context.h\n+++ b/src/Interpreters/Context.h\n@@ -119,6 +119,8 @@ using ThrottlerPtr = std::shared_ptr<Throttler>;\n class ZooKeeperMetadataTransaction;\n using ZooKeeperMetadataTransactionPtr = std::shared_ptr<ZooKeeperMetadataTransaction>;\n \n+struct MySQLWireContext;\n+\n /// Callback for external tables initializer\n using ExternalTablesInitializer = std::function<void(ContextPtr)>;\n \n@@ -298,6 +300,8 @@ class Context: public std::enable_shared_from_this<Context>\n                                                     /// thousands of signatures.\n                                                     /// And I hope it will be replaced with more common Transaction sometime.\n \n+    MySQLWireContext * mysql_protocol_context = nullptr;\n+\n     Context();\n     Context(const Context &);\n     Context & operator=(const Context &);\n@@ -533,7 +537,6 @@ class Context: public std::enable_shared_from_this<Context>\n     BlockOutputStreamPtr getOutputStream(const String & name, WriteBuffer & buf, const Block & sample) const;\n \n     OutputFormatPtr getOutputFormatParallelIfPossible(const String & name, WriteBuffer & buf, const Block & sample) const;\n-    OutputFormatPtr getOutputFormat(const String & name, WriteBuffer & buf, const Block & sample) const;\n \n     InterserverIOHandler & getInterserverIOHandler();\n \n@@ -789,14 +792,10 @@ class Context: public std::enable_shared_from_this<Context>\n     /// Returns context of current distributed DDL query or nullptr.\n     ZooKeeperMetadataTransactionPtr getZooKeeperMetadataTransaction() const;\n \n-    struct MySQLWireContext\n-    {\n-        uint8_t sequence_id = 0;\n-        uint32_t client_capabilities = 0;\n-        size_t max_packet_size = 0;\n-    };\n-\n-    MySQLWireContext mysql;\n+    /// Caller is responsible for lifetime of mysql_context.\n+    /// Used in MySQLHandler for session context.\n+    void setMySQLProtocolContext(MySQLWireContext * mysql_context);\n+    MySQLWireContext * getMySQLProtocolContext() const;\n \n     PartUUIDsPtr getPartUUIDs() const;\n     PartUUIDsPtr getIgnoredPartUUIDs() const;\ndiff --git a/src/Processors/Formats/Impl/MySQLOutputFormat.cpp b/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\nindex 0f73349c271d..0f6d90b720e4 100644\n--- a/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/MySQLOutputFormat.cpp\n@@ -17,6 +17,22 @@ MySQLOutputFormat::MySQLOutputFormat(WriteBuffer & out_, const Block & header_,\n {\n }\n \n+void MySQLOutputFormat::setContext(ContextPtr context_)\n+{\n+    context = context_;\n+    /// MySQlWire is a special format that is usually used as output format for MySQL protocol connections.\n+    /// In this case we have to use the corresponding session context to set correct sequence_id.\n+    mysql_context = getContext()->getMySQLProtocolContext();\n+    if (!mysql_context)\n+    {\n+        /// But it's also possible to specify MySQLWire as output format for clickhouse-client or clickhouse-local.\n+        /// There is no MySQL protocol context in this case, so we create dummy one.\n+        own_mysql_context.emplace();\n+        mysql_context = &own_mysql_context.value();\n+    }\n+    packet_endpoint = mysql_context->makeEndpoint(out);\n+}\n+\n void MySQLOutputFormat::initialize()\n {\n     if (initialized)\n@@ -40,7 +56,7 @@ void MySQLOutputFormat::initialize()\n             packet_endpoint->sendPacket(getColumnDefinition(column_name, data_types[i]->getTypeId()));\n         }\n \n-        if (!(getContext()->mysql.client_capabilities & Capability::CLIENT_DEPRECATE_EOF))\n+        if (!(mysql_context->client_capabilities & Capability::CLIENT_DEPRECATE_EOF))\n         {\n             packet_endpoint->sendPacket(EOFPacket(0, 0));\n         }\n@@ -79,10 +95,10 @@ void MySQLOutputFormat::finalize()\n     const auto & header = getPort(PortKind::Main).getHeader();\n     if (header.columns() == 0)\n         packet_endpoint->sendPacket(\n-            OKPacket(0x0, getContext()->mysql.client_capabilities, affected_rows, 0, 0, \"\", human_readable_info), true);\n-    else if (getContext()->mysql.client_capabilities & CLIENT_DEPRECATE_EOF)\n+            OKPacket(0x0, mysql_context->client_capabilities, affected_rows, 0, 0, \"\", human_readable_info), true);\n+    else if (mysql_context->client_capabilities & CLIENT_DEPRECATE_EOF)\n         packet_endpoint->sendPacket(\n-            OKPacket(0xfe, getContext()->mysql.client_capabilities, affected_rows, 0, 0, \"\", human_readable_info), true);\n+            OKPacket(0xfe, mysql_context->client_capabilities, affected_rows, 0, 0, \"\", human_readable_info), true);\n     else\n         packet_endpoint->sendPacket(EOFPacket(0, 0), true);\n }\ndiff --git a/src/Processors/Formats/Impl/MySQLOutputFormat.h b/src/Processors/Formats/Impl/MySQLOutputFormat.h\nindex 7d67df3015ea..fed2a431860b 100644\n--- a/src/Processors/Formats/Impl/MySQLOutputFormat.h\n+++ b/src/Processors/Formats/Impl/MySQLOutputFormat.h\n@@ -25,11 +25,7 @@ class MySQLOutputFormat final : public IOutputFormat, WithContext\n \n     String getName() const override { return \"MySQLOutputFormat\"; }\n \n-    void setContext(ContextPtr context_)\n-    {\n-        context = context_;\n-        packet_endpoint = std::make_unique<MySQLProtocol::PacketEndpoint>(out, const_cast<uint8_t &>(getContext()->mysql.sequence_id)); /// TODO: fix it\n-    }\n+    void setContext(ContextPtr context_);\n \n     void consume(Chunk) override;\n     void finalize() override;\n@@ -41,7 +37,9 @@ class MySQLOutputFormat final : public IOutputFormat, WithContext\n private:\n     bool initialized = false;\n \n-    std::unique_ptr<MySQLProtocol::PacketEndpoint> packet_endpoint;\n+    std::optional<MySQLWireContext> own_mysql_context;\n+    MySQLWireContext * mysql_context = nullptr;\n+    MySQLProtocol::PacketEndpointPtr packet_endpoint;\n     FormatSettings format_settings;\n     DataTypes data_types;\n     Serializations serializations;\ndiff --git a/src/Server/MySQLHandler.cpp b/src/Server/MySQLHandler.cpp\nindex beace5dd5764..b8913f5e64ff 100644\n--- a/src/Server/MySQLHandler.cpp\n+++ b/src/Server/MySQLHandler.cpp\n@@ -95,10 +95,11 @@ void MySQLHandler::run()\n     connection_context->getClientInfo().interface = ClientInfo::Interface::MYSQL;\n     connection_context->setDefaultFormat(\"MySQLWire\");\n     connection_context->getClientInfo().connection_id = connection_id;\n+    connection_context->setMySQLProtocolContext(&connection_context_mysql);\n \n     in = std::make_shared<ReadBufferFromPocoSocket>(socket());\n     out = std::make_shared<WriteBufferFromPocoSocket>(socket());\n-    packet_endpoint = std::make_shared<PacketEndpoint>(*in, *out, connection_context->mysql.sequence_id);\n+    packet_endpoint = connection_context_mysql.makeEndpoint(*in, *out);\n \n     try\n     {\n@@ -110,11 +111,11 @@ void MySQLHandler::run()\n \n         HandshakeResponse handshake_response;\n         finishHandshake(handshake_response);\n-        connection_context->mysql.client_capabilities = handshake_response.capability_flags;\n+        connection_context_mysql.client_capabilities = handshake_response.capability_flags;\n         if (handshake_response.max_packet_size)\n-            connection_context->mysql.max_packet_size = handshake_response.max_packet_size;\n-        if (!connection_context->mysql.max_packet_size)\n-            connection_context->mysql.max_packet_size = MAX_PACKET_LENGTH;\n+            connection_context_mysql.max_packet_size = handshake_response.max_packet_size;\n+        if (!connection_context_mysql.max_packet_size)\n+            connection_context_mysql.max_packet_size = MAX_PACKET_LENGTH;\n \n         LOG_TRACE(log,\n             \"Capabilities: {}, max_packet_size: {}, character_set: {}, user: {}, auth_response length: {}, database: {}, auth_plugin_name: {}\",\n@@ -395,14 +396,14 @@ void MySQLHandlerSSL::finishHandshakeSSL(\n     ReadBufferFromMemory payload(buf, pos);\n     payload.ignore(PACKET_HEADER_SIZE);\n     ssl_request.readPayloadWithUnpacked(payload);\n-    connection_context->mysql.client_capabilities = ssl_request.capability_flags;\n-    connection_context->mysql.max_packet_size = ssl_request.max_packet_size ? ssl_request.max_packet_size : MAX_PACKET_LENGTH;\n+    connection_context_mysql.client_capabilities = ssl_request.capability_flags;\n+    connection_context_mysql.max_packet_size = ssl_request.max_packet_size ? ssl_request.max_packet_size : MAX_PACKET_LENGTH;\n     secure_connection = true;\n     ss = std::make_shared<SecureStreamSocket>(SecureStreamSocket::attach(socket(), SSLManager::instance().defaultServerContext()));\n     in = std::make_shared<ReadBufferFromPocoSocket>(*ss);\n     out = std::make_shared<WriteBufferFromPocoSocket>(*ss);\n-    connection_context->mysql.sequence_id = 2;\n-    packet_endpoint = std::make_shared<PacketEndpoint>(*in, *out, connection_context->mysql.sequence_id);\n+    connection_context_mysql.sequence_id = 2;\n+    packet_endpoint = connection_context_mysql.makeEndpoint(*in, *out);\n     packet_endpoint->receivePacket(packet); /// Reading HandshakeResponse from secure socket.\n }\n \ndiff --git a/src/Server/MySQLHandler.h b/src/Server/MySQLHandler.h\nindex e681ad2e6f6d..2ea5695a0a6d 100644\n--- a/src/Server/MySQLHandler.h\n+++ b/src/Server/MySQLHandler.h\n@@ -56,9 +56,10 @@ class MySQLHandler : public Poco::Net::TCPServerConnection\n protected:\n     Poco::Logger * log;\n \n+    MySQLWireContext connection_context_mysql;\n     ContextMutablePtr connection_context;\n \n-    std::shared_ptr<MySQLProtocol::PacketEndpoint> packet_endpoint;\n+    MySQLProtocol::PacketEndpointPtr packet_endpoint;\n \n private:\n     UInt64 connection_id = 0;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01176_mysql_client_interactive.expect b/tests/queries/0_stateless/01176_mysql_client_interactive.expect\nindex b2dc88a77952..2337b7d01fe8 100755\n--- a/tests/queries/0_stateless/01176_mysql_client_interactive.expect\n+++ b/tests/queries/0_stateless/01176_mysql_client_interactive.expect\n@@ -22,5 +22,27 @@ expect \"| dummy |\"\n expect \"|     0 |\"\n expect \"1 row in set\"\n \n+# exception before start\n+send -- \"select * from table_that_does_not_exist;\\r\"\n+expect \"ERROR 60 (00000): Code: 60\"\n+\n+# exception after start\n+send -- \"select throwIf(number) from numbers(2) settings max_block_size=1;\\r\"\n+expect \"ERROR 395 (00000): Code: 395\"\n+\n+# other formats\n+send -- \"select * from system.one format TSV;\\r\"\n+expect \"ERROR 1 (00000): Code: 1\"\n+\n+send -- \"select count(number), sum(number) from numbers(10);\\r\"\n+expect \"+---------------+-------------+\"\n+expect \"| count(number) | sum(number) |\"\n+expect \"+---------------+-------------+\"\n+expect \"|            10 |          45 |\"\n+expect \"+---------------+-------------+\"\n+expect \"1 row in set\"\n+expect \"Read 10 rows, 80.00 B\"\n+expect \"mysql> \"\n+\n send -- \"quit;\\r\"\n expect eof\n",
  "problem_statement": "mysql protocol does not support error during query execution\n**Describe the bug**\r\n sql cannot read error msg by mysql client if table is on cluster\r\n\r\n**Does it reproduce on recent release?**\r\nserver: clickhouse 21.2.4.6\r\nclient:  mysql client 8.0.20\u3001msyql client 5.7.26 access through mysql_port\r\n\r\n**How to reproduce**\r\n- create table on cluster\r\n```\r\nCREATE TABLE `test`.`t7_all` ON CLUSTER cluster_1 (`id` Int64, `createtime` Date)  ENGINE = ReplicatedMergeTree('/clickhouse/cluster1/{layer}-{shard}/t7', '{replica}')  PARTITION BY createtime ORDER BY id SETTINGS index_granularity=8192;\r\n```\r\n- create table names  `test`.`t7_all`  again\r\n```\r\nCREATE TABLE `test`.`t7_all` ON CLUSTER cluster_1 (`id` Int64, `createtime` Date)  ENGINE = ReplicatedMergeTree('/clickhouse/cluster1/{layer}-{shard}/t7', '{replica}')  PARTITION BY createtime ORDER BY id SETTINGS index_granularity=8192;\r\n```\r\n\r\n**Expected behavior**\r\nmysql client get error message same with clickhouse client: Table test.t7_all already exists\r\n\r\n**Error message and/or stacktrace**\r\nmysql client cannot read err message and report:\r\n```\r\nLost connection to MySQL server during query\r\n```\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\n",
  "hints_text": "It's because ON CLUSTER queries return table with query execution status. Seems like mysql client does not expect that DDL query may return some data.\n> It's because ON CLUSTER queries return table with query execution status. Seems like mysql client does not expect that DDL query may return some data.\r\n\r\nWill you support this in the future?\nThe reason is that ClickHouse sends `ERR_Packet` with incorrect sequence number, so MySQL client does not recognize it as a part of `COM_QUERY_Response` and resets connection. It happens if exception is thrown during query execution:\r\n```\r\nmysql> select throwIf(number) from numbers(2) settings max_block_size=1;\r\nERROR 2013 (HY000): Lost connection to MySQL server during query\r\n```\r\nI will try to fix it",
  "created_at": "2021-07-07T17:04:45Z",
  "modified_files": [
    "src/Core/MySQL/MySQLClient.cpp",
    "src/Core/MySQL/MySQLClient.h",
    "src/Core/MySQL/PacketEndpoint.cpp",
    "src/Core/MySQL/PacketEndpoint.h",
    "src/Formats/FormatFactory.cpp",
    "src/Interpreters/Context.cpp",
    "src/Interpreters/Context.h",
    "src/Processors/Formats/Impl/MySQLOutputFormat.cpp",
    "src/Processors/Formats/Impl/MySQLOutputFormat.h",
    "src/Server/MySQLHandler.cpp",
    "src/Server/MySQLHandler.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01176_mysql_client_interactive.expect"
  ]
}