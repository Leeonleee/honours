diff --git a/src/Columns/ColumnVector.cpp b/src/Columns/ColumnVector.cpp
index f298f7c1e22e..8a689efde7e2 100644
--- a/src/Columns/ColumnVector.cpp
+++ b/src/Columns/ColumnVector.cpp
@@ -281,7 +281,7 @@ void ColumnVector<T>::getPermutation(IColumn::PermutationSortDirection direction
 
                 RadixSort<RadixSortTraits<T>>::executeLSD(pairs.data(), data_size, reverse, res.data());
 
-                /// Radix sort treats all NaNs to be greater than all numbers.
+                /// Radix sort treats all positive NaNs to be greater than all numbers.
                 /// If the user needs the opposite, we must move them accordingly.
                 if (is_floating_point<T> && nan_direction_hint < 0)
                 {
diff --git a/src/Common/RadixSort.h b/src/Common/RadixSort.h
index 9fd17084e474..e3e0bca82fe8 100644
--- a/src/Common/RadixSort.h
+++ b/src/Common/RadixSort.h
@@ -91,7 +91,7 @@ struct RadixSortFloatTraits
     using CountType = uint32_t;
 
     /// The type to which the key is transformed to do bit operations. This UInt is the same size as the key.
-    using KeyBits = std::conditional_t<sizeof(Key) == 8, uint64_t, uint32_t>;
+    using KeyBits = std::conditional_t<sizeof(Key) == 8, uint64_t, std::conditional_t<sizeof(Key) == 4, uint32_t, uint16_t>>;
 
     static constexpr size_t PART_SIZE_BITS = 8;    /// With what pieces of the key, in bits, to do one pass - reshuffle of the array.
 
diff --git a/src/Core/CompareHelper.h b/src/Core/CompareHelper.h
index 2e7aaf1f6054..f4d752d2bef7 100644
--- a/src/Core/CompareHelper.h
+++ b/src/Core/CompareHelper.h
@@ -2,8 +2,8 @@
 
 #include <base/defines.h>
 #include <base/types.h>
+#include <Common/NaNUtils.h>
 
-#include <cmath>
 
 namespace DB
 {
@@ -13,7 +13,7 @@ namespace DB
   * Floating-point numbers are compared this way that NaNs always end up at the end
   *  (if you don't do this, the sort would not work at all).
   */
-template <class T, class U = T>
+template <typename T, typename U = T>
 struct CompareHelper
 {
     static constexpr bool less(T a, U b, int /*nan_direction_hint*/) { return a < b; }
@@ -29,13 +29,13 @@ struct CompareHelper
     static constexpr int compare(T a, U b, int /*nan_direction_hint*/) { return a > b ? 1 : (a < b ? -1 : 0); }
 };
 
-template <class T>
+template <typename T>
 struct FloatCompareHelper
 {
     static constexpr bool less(T a, T b, int nan_direction_hint)
     {
-        const bool isnan_a = std::isnan(a);
-        const bool isnan_b = std::isnan(b);
+        const bool isnan_a = isNaN(a);
+        const bool isnan_b = isNaN(b);
 
         if (isnan_a && isnan_b)
             return false;
@@ -49,8 +49,8 @@ struct FloatCompareHelper
 
     static constexpr bool greater(T a, T b, int nan_direction_hint)
     {
-        const bool isnan_a = std::isnan(a);
-        const bool isnan_b = std::isnan(b);
+        const bool isnan_a = isNaN(a);
+        const bool isnan_b = isNaN(b);
 
         if (isnan_a && isnan_b)
             return false;
@@ -66,8 +66,8 @@ struct FloatCompareHelper
 
     static constexpr int compare(T a, T b, int nan_direction_hint)
     {
-        const bool isnan_a = std::isnan(a);
-        const bool isnan_b = std::isnan(b);
+        const bool isnan_a = isNaN(a);
+        const bool isnan_b = isNaN(b);
 
         if (unlikely(isnan_a || isnan_b))
         {
@@ -81,10 +81,16 @@ struct FloatCompareHelper
     }
 };
 
+template <typename U>
+struct CompareHelper<BFloat16, U> : public FloatCompareHelper<BFloat16>
+{
+};
+
 template <typename U>
 struct CompareHelper<Float32, U> : public FloatCompareHelper<Float32>
 {
 };
+
 template <typename U>
 struct CompareHelper<Float64, U> : public FloatCompareHelper<Float64>
 {
