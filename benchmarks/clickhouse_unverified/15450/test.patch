diff --git a/tests/integration/test_ttl_replicated/test.py b/tests/integration/test_ttl_replicated/test.py
index 9418aeaaf011..389e249790f5 100644
--- a/tests/integration/test_ttl_replicated/test.py
+++ b/tests/integration/test_ttl_replicated/test.py
@@ -9,6 +9,11 @@
 node1 = cluster.add_instance('node1', with_zookeeper=True)
 node2 = cluster.add_instance('node2', with_zookeeper=True)
 
+node3 = cluster.add_instance('node3', with_zookeeper=True)
+node4 = cluster.add_instance('node4', with_zookeeper=True, image='yandex/clickhouse-server', tag='20.12.4.5', stay_alive=True, with_installed_binary=True)
+
+node5 = cluster.add_instance('node5', with_zookeeper=True, image='yandex/clickhouse-server', tag='20.12.4.5', stay_alive=True, with_installed_binary=True)
+node6 = cluster.add_instance('node6', with_zookeeper=True, image='yandex/clickhouse-server', tag='20.12.4.5', stay_alive=True, with_installed_binary=True)
 
 @pytest.fixture(scope="module")
 def started_cluster():
@@ -329,3 +334,73 @@ def test_ttl_empty_parts(started_cluster):
     error_msg = '<Error> default.test_ttl_empty_parts (ReplicatedMergeTreeCleanupThread)'
     assert not node1.contains_in_log(error_msg)
     assert not node2.contains_in_log(error_msg)
+
+@pytest.mark.parametrize(
+    ('node_left', 'node_right', 'num_run'),
+    [(node1, node2, 0), (node3, node4, 1), (node5, node6, 2)]
+)
+def test_ttl_compatibility(started_cluster, node_left, node_right, num_run):
+    drop_table([node_left, node_right], "test_ttl_delete")
+    drop_table([node_left, node_right], "test_ttl_group_by")
+    drop_table([node_left, node_right], "test_ttl_where")
+
+    for node in [node_left, node_right]:
+        node.query(
+            '''
+                CREATE TABLE test_ttl_delete(date DateTime, id UInt32)
+                ENGINE = ReplicatedMergeTree('/clickhouse/tables/test/test_ttl_delete_{suff}', '{replica}')
+                ORDER BY id PARTITION BY toDayOfMonth(date)
+                TTL date + INTERVAL 3 SECOND
+            '''.format(suff=num_run, replica=node.name))
+
+        node.query(
+            '''
+                CREATE TABLE test_ttl_group_by(date DateTime, id UInt32, val UInt64)
+                ENGINE = ReplicatedMergeTree('/clickhouse/tables/test/test_ttl_group_by_{suff}', '{replica}')
+                ORDER BY id PARTITION BY toDayOfMonth(date)
+                TTL date + INTERVAL 3 SECOND GROUP BY id SET val = sum(val)
+            '''.format(suff=num_run, replica=node.name))
+
+        node.query(
+            '''
+                CREATE TABLE test_ttl_where(date DateTime, id UInt32)
+                ENGINE = ReplicatedMergeTree('/clickhouse/tables/test/test_ttl_where_{suff}', '{replica}')
+                ORDER BY id PARTITION BY toDayOfMonth(date)
+                TTL date + INTERVAL 3 SECOND DELETE WHERE id % 2 = 1
+            '''.format(suff=num_run, replica=node.name))
+
+    node_left.query("INSERT INTO test_ttl_delete VALUES (now(), 1)")
+    node_left.query("INSERT INTO test_ttl_delete VALUES (toDateTime('2100-10-11 10:00:00'), 2)")
+    node_right.query("INSERT INTO test_ttl_delete VALUES (now(), 3)")
+    node_right.query("INSERT INTO test_ttl_delete VALUES (toDateTime('2100-10-11 10:00:00'), 4)")
+
+    node_left.query("INSERT INTO test_ttl_group_by VALUES (now(), 0, 1)")
+    node_left.query("INSERT INTO test_ttl_group_by VALUES (now(), 0, 2)")
+    node_right.query("INSERT INTO test_ttl_group_by VALUES (now(), 0, 3)")
+    node_right.query("INSERT INTO test_ttl_group_by VALUES (now(), 0, 4)")
+
+    node_left.query("INSERT INTO test_ttl_where VALUES (now(), 1)")
+    node_left.query("INSERT INTO test_ttl_where VALUES (now(), 2)")
+    node_right.query("INSERT INTO test_ttl_where VALUES (now(), 3)")
+    node_right.query("INSERT INTO test_ttl_where VALUES (now(), 4)")
+
+    if node_left.with_installed_binary:
+        node_left.restart_with_latest_version()
+
+    if node_right.with_installed_binary:
+        node_right.restart_with_latest_version()
+    
+    time.sleep(5) # Wait for TTL
+
+    node_right.query("OPTIMIZE TABLE test_ttl_delete FINAL")
+    node_right.query("OPTIMIZE TABLE test_ttl_group_by FINAL")
+    node_right.query("OPTIMIZE TABLE test_ttl_where FINAL")
+
+    assert node_left.query("SELECT id FROM test_ttl_delete ORDER BY id") == "2
4
"
+    assert node_right.query("SELECT id FROM test_ttl_delete ORDER BY id") == "2
4
"
+
+    assert node_left.query("SELECT val FROM test_ttl_group_by ORDER BY id") == "10
"
+    assert node_right.query("SELECT val FROM test_ttl_group_by ORDER BY id") == "10
"
+
+    assert node_left.query("SELECT id FROM test_ttl_where ORDER BY id") == "2
4
"
+    assert node_right.query("SELECT id FROM test_ttl_where ORDER BY id") == "2
4
"
diff --git a/tests/queries/0_stateless/01280_ttl_where_group_by.reference b/tests/queries/0_stateless/01280_ttl_where_group_by.reference
index ad20d38f2e64..7fe00709dee0 100644
--- a/tests/queries/0_stateless/01280_ttl_where_group_by.reference
+++ b/tests/queries/0_stateless/01280_ttl_where_group_by.reference
@@ -1,20 +1,26 @@
+ttl_01280_1
 1	1	0	4
 1	2	3	7
 1	3	0	5
 2	1	0	1
 2	1	20	1
+ttl_01280_2
 1	1	[0,2,3]	4
 1	1	[5,4,1]	13
 1	3	[1,0,1,0]	17
 2	1	[3,1,0,3]	8
 3	1	[2,4,5]	8
+ttl_01280_3
 1	1	0	4
-1	3	10	6
+1	1	10	6
 2	1	0	3
-3	5	8	2
+3	1	8	2
+ttl_01280_4
 1	1	0	4
-3	3	13	9
+10	2	13	9
+ttl_01280_5
 1	2	7	5
 2	3	6	5
-1	2	3	5
-2	3	3	5
+ttl_01280_6
+1	5	3	5
+2	10	3	5
diff --git a/tests/queries/0_stateless/01280_ttl_where_group_by.sh b/tests/queries/0_stateless/01280_ttl_where_group_by.sh
index 5ca79951a464..9f30c7c58722 100755
--- a/tests/queries/0_stateless/01280_ttl_where_group_by.sh
+++ b/tests/queries/0_stateless/01280_ttl_where_group_by.sh
@@ -14,6 +14,7 @@ function optimize()
     done
 }
 
+echo "ttl_01280_1"
 $CLICKHOUSE_CLIENT -n --query "
 create table ttl_01280_1 (a Int, b Int, x Int, y Int, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second delete where x % 10 == 0 and y > 5;
 insert into ttl_01280_1 values (1, 1, 0, 4, now() + 10);
@@ -30,6 +31,7 @@ $CLICKHOUSE_CLIENT --query "select a, b, x, y from ttl_01280_1 ORDER BY a, b, x,
 
 $CLICKHOUSE_CLIENT --query "drop table if exists ttl_01280_2"
 
+echo "ttl_01280_2"
 $CLICKHOUSE_CLIENT -n --query "
 create table ttl_01280_2 (a Int, b Int, x Array(Int32), y Double, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by a, b set x = minForEach(x), y = sum(y), d = max(d);
 insert into ttl_01280_2 values (1, 1, array(0, 2, 3), 4, now() + 10);
@@ -48,8 +50,9 @@ $CLICKHOUSE_CLIENT --query "select a, b, x, y from ttl_01280_2 ORDER BY a, b, x,
 
 $CLICKHOUSE_CLIENT --query "drop table if exists ttl_01280_3"
 
+echo "ttl_01280_3"
 $CLICKHOUSE_CLIENT -n --query "
-create table ttl_01280_3 (a Int, b Int, x Int64, y Int, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by a set x = argMax(x, d), y = argMax(y, d), d = max(d);
+create table ttl_01280_3 (a Int, b Int, x Int64, y Int, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by a set b = min(b), x = argMax(x, d), y = argMax(y, d), d = max(d);
 insert into ttl_01280_3 values (1, 1, 0, 4, now() + 10);
 insert into ttl_01280_3 values (1, 1, 10, 6, now() + 1);
 insert into ttl_01280_3 values (1, 2, 3, 7, now());
@@ -66,6 +69,7 @@ $CLICKHOUSE_CLIENT --query "select a, b, x, y from ttl_01280_3 ORDER BY a, b, x,
 
 $CLICKHOUSE_CLIENT --query "drop table if exists ttl_01280_4"
 
+echo "ttl_01280_4"
 $CLICKHOUSE_CLIENT -n --query "
 create table ttl_01280_4 (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (toDate(d), -(a + b)) ttl d + interval 1 second group by toDate(d) set x = sum(x), y = max(y);
 insert into ttl_01280_4 values (1, 1, 0, 4, now() + 10);
@@ -80,7 +84,8 @@ $CLICKHOUSE_CLIENT --query "select a, b, x, y from ttl_01280_4 ORDER BY a, b, x,
 
 $CLICKHOUSE_CLIENT --query "drop table if exists ttl_01280_5"
 
-$CLICKHOUSE_CLIENT -n --query "create table ttl_01280_5 (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (toDate(d), a, -b) ttl d + interval 1 second group by toDate(d), a set x = sum(x);
+echo "ttl_01280_5"
+$CLICKHOUSE_CLIENT -n --query "create table ttl_01280_5 (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (toDate(d), a, -b) ttl d + interval 1 second group by toDate(d), a set x = sum(x), b = argMax(b, -b);
 insert into ttl_01280_5 values (1, 2, 3, 5, now());
 insert into ttl_01280_5 values (2, 10, 1, 5, now());
 insert into ttl_01280_5 values (2, 3, 5, 5, now());
@@ -92,6 +97,7 @@ $CLICKHOUSE_CLIENT --query "select a, b, x, y from ttl_01280_5 ORDER BY a, b, x,
 
 $CLICKHOUSE_CLIENT --query "drop table if exists ttl_01280_6"
 
+echo "ttl_01280_6"
 $CLICKHOUSE_CLIENT -n --query "
 create table ttl_01280_6 (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (toDate(d), a, -b) ttl d + interval 1 second group by toDate(d), a;
 insert into ttl_01280_6 values (1, 2, 3, 5, now());
diff --git a/tests/queries/0_stateless/01280_ttl_where_group_by_negative.sql b/tests/queries/0_stateless/01280_ttl_where_group_by_negative.sql
index f2c26a3d4955..b273e065bcce 100644
--- a/tests/queries/0_stateless/01280_ttl_where_group_by_negative.sql
+++ b/tests/queries/0_stateless/01280_ttl_where_group_by_negative.sql
@@ -1,7 +1,4 @@
 create table ttl_01280_error (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by x set y = max(y); -- { serverError 450}
 create table ttl_01280_error (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by b set y = max(y); -- { serverError 450}
 create table ttl_01280_error (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by a, b, x set y = max(y); -- { serverError 450}
-create table ttl_01280_error (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by a set b = min(b), y = max(y); -- { serverError 450}
 create table ttl_01280_error (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (a, b) ttl d + interval 1 second group by a, b set y = max(y), y = max(y); -- { serverError 450}
-create table ttl_01280_error (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (toDate(d), a) ttl d + interval 1 second group by toDate(d), a set d = min(d), b = max(b); -- { serverError 450}
-create table ttl_01280_error (a Int, b Int, x Int64, y Int64, d DateTime) engine = MergeTree order by (d, -(a + b)) ttl d + interval 1 second group by d, -(a + b) set a = sum(a), b = min(b); -- { serverError 450}
diff --git a/tests/queries/0_stateless/01506_ttl_same_with_order_by.reference b/tests/queries/0_stateless/01506_ttl_same_with_order_by.reference
new file mode 100644
index 000000000000..f8f36434a82d
--- /dev/null
+++ b/tests/queries/0_stateless/01506_ttl_same_with_order_by.reference
@@ -0,0 +1,4 @@
+2020-01-01 00:00:00	3
+2020-01-01 00:00:00	2020-01-01 00:00:00	111
+1
+0
diff --git a/tests/queries/0_stateless/01506_ttl_same_with_order_by.sql b/tests/queries/0_stateless/01506_ttl_same_with_order_by.sql
new file mode 100644
index 000000000000..7a0fb86330b5
--- /dev/null
+++ b/tests/queries/0_stateless/01506_ttl_same_with_order_by.sql
@@ -0,0 +1,78 @@
+DROP TABLE IF EXISTS derived_metrics_local;
+
+CREATE TABLE derived_metrics_local
+(
+  timestamp DateTime,
+  bytes UInt64
+)
+ENGINE=SummingMergeTree()
+PARTITION BY toYYYYMMDD(timestamp)
+ORDER BY (toStartOfHour(timestamp), timestamp)
+TTL toStartOfHour(timestamp) + INTERVAL 1 HOUR GROUP BY toStartOfHour(timestamp)
+SET bytes=max(bytes);
+
+INSERT INTO derived_metrics_local values('2020-01-01 00:00:00', 1);
+INSERT INTO derived_metrics_local values('2020-01-01 00:01:00', 3);
+INSERT INTO derived_metrics_local values('2020-01-01 00:02:00', 2);
+
+OPTIMIZE TABLE derived_metrics_local FINAL;
+SELECT * FROM derived_metrics_local;
+
+DROP TABLE derived_metrics_local;
+
+CREATE TABLE derived_metrics_local 
+(
+  timestamp DateTime,
+  timestamp_h DateTime materialized toStartOfHour(timestamp),
+  bytes UInt64
+)
+ENGINE=SummingMergeTree()
+PARTITION BY toYYYYMMDD(timestamp)
+ORDER BY (timestamp_h, timestamp)
+TTL toStartOfHour(timestamp) + INTERVAL 1 HOUR GROUP BY timestamp_h
+SET bytes=max(bytes), timestamp = toStartOfHour(any(timestamp));
+
+INSERT INTO derived_metrics_local values('2020-01-01 00:01:00', 111);
+INSERT INTO derived_metrics_local values('2020-01-01 00:19:22', 22);
+INSERT INTO derived_metrics_local values('2020-01-01 00:59:02', 1);
+
+OPTIMIZE TABLE derived_metrics_local FINAL;
+SELECT timestamp, timestamp_h, bytes FROM derived_metrics_local;
+
+DROP TABLE IF EXISTS derived_metrics_local;
+
+CREATE TABLE derived_metrics_local
+(
+  timestamp DateTime,
+  bytes UInt64 TTL toStartOfHour(timestamp) + INTERVAL 1 HOUR
+)
+ENGINE=MergeTree()
+ORDER BY (toStartOfHour(timestamp), timestamp)
+SETTINGS min_bytes_for_wide_part = 0;
+
+INSERT INTO derived_metrics_local values('2020-01-01 00:01:00', 111) ('2020-01-01 00:19:22', 22) ('2100-01-01 00:19:22', 1);
+
+OPTIMIZE TABLE derived_metrics_local FINAL;
+SELECT sum(bytes) FROM derived_metrics_local;
+
+DROP TABLE IF EXISTS derived_metrics_local;
+
+CREATE TABLE derived_metrics_local
+(
+  timestamp DateTime,
+  bytes UInt64
+)
+ENGINE=MergeTree()
+PARTITION BY toYYYYMMDD(timestamp)
+ORDER BY (toStartOfHour(timestamp), timestamp)
+TTL toStartOfHour(timestamp) + INTERVAL 1 HOUR
+SETTINGS min_bytes_for_wide_part = 0;
+
+INSERT INTO derived_metrics_local values('2020-01-01 00:01:00', 111);
+INSERT INTO derived_metrics_local values('2020-01-01 00:19:22', 22);
+INSERT INTO derived_metrics_local values('2020-01-01 00:59:02', 1);
+
+OPTIMIZE TABLE derived_metrics_local FINAL;
+SELECT count() FROM derived_metrics_local;
+
+DROP TABLE IF EXISTS derived_metrics_local;
diff --git a/tests/queries/0_stateless/01622_multiple_ttls.reference b/tests/queries/0_stateless/01622_multiple_ttls.reference
new file mode 100644
index 000000000000..d9ebb694584a
--- /dev/null
+++ b/tests/queries/0_stateless/01622_multiple_ttls.reference
@@ -0,0 +1,22 @@
+TTL WHERE
+1970-10-10	2
+1970-10-10	5
+1970-10-10	8
+2000-10-10	1
+2000-10-10	2
+2000-10-10	4
+2000-10-10	5
+2000-10-10	7
+2000-10-10	8
+TTL GROUP BY
+1970-10-01	0	4950
+2000-10-01	0	450
+2000-10-01	1	460
+2000-10-01	2	470
+2000-10-01	3	480
+2000-10-01	4	490
+2000-10-01	5	500
+2000-10-01	6	510
+2000-10-01	7	520
+2000-10-01	8	530
+2000-10-01	9	540
diff --git a/tests/queries/0_stateless/01622_multiple_ttls.sql b/tests/queries/0_stateless/01622_multiple_ttls.sql
new file mode 100644
index 000000000000..aa2eeb5759b3
--- /dev/null
+++ b/tests/queries/0_stateless/01622_multiple_ttls.sql
@@ -0,0 +1,44 @@
+SELECT 'TTL WHERE';
+DROP TABLE IF EXISTS ttl_where;
+
+CREATE TABLE ttl_where
+(
+    `d` Date,
+    `i` UInt32
+)
+ENGINE = MergeTree
+ORDER BY tuple()
+TTL d + toIntervalYear(10) DELETE WHERE i % 3 = 0,
+    d + toIntervalYear(40) DELETE WHERE i % 3 = 1;
+
+-- This test will fail at 2040-10-10
+
+INSERT INTO ttl_where SELECT toDate('2000-10-10'), number FROM numbers(10);
+INSERT INTO ttl_where SELECT toDate('1970-10-10'), number FROM numbers(10);
+OPTIMIZE TABLE ttl_where FINAL;
+
+SELECT * FROM ttl_where ORDER BY d, i;
+
+DROP TABLE ttl_where;
+
+SELECT 'TTL GROUP BY';
+DROP TABLE IF EXISTS ttl_group_by;
+
+CREATE TABLE ttl_group_by
+(
+    `d` Date,
+    `i` UInt32,
+    `v` UInt64
+)
+ENGINE = MergeTree
+ORDER BY (toStartOfMonth(d), i % 10)
+TTL d + toIntervalYear(10) GROUP BY toStartOfMonth(d), i % 10 SET d = any(toStartOfMonth(d)), i = any(i % 10), v = sum(v),
+    d + toIntervalYear(40) GROUP BY toStartOfMonth(d) SET d = any(toStartOfMonth(d)), v = sum(v);
+
+INSERT INTO ttl_group_by SELECT toDate('2000-10-10'), number, number FROM numbers(100);
+INSERT INTO ttl_group_by SELECT toDate('1970-10-10'), number, number FROM numbers(100);
+OPTIMIZE TABLE ttl_group_by FINAL;
+
+SELECT * FROM ttl_group_by ORDER BY d, i;
+
+DROP TABLE ttl_group_by;
