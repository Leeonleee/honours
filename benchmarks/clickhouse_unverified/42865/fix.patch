diff --git a/src/Analyzer/Passes/QueryAnalysisPass.cpp b/src/Analyzer/Passes/QueryAnalysisPass.cpp
index 9db2d66d99d7..4f24051df793 100644
--- a/src/Analyzer/Passes/QueryAnalysisPass.cpp
+++ b/src/Analyzer/Passes/QueryAnalysisPass.cpp
@@ -5527,9 +5527,15 @@ void QueryAnalyzer::resolveQuery(const QueryTreeNodePtr & query_node, Identifier
       * 3. Check that there are no columns that are not specified in GROUP BY keys.
       * 4. Validate GROUP BY modifiers.
       */
-    assertNoAggregateFunctionNodes(query_node_typed.getJoinTree(), "in JOIN TREE");
-    assertNoGroupingFunction(query_node_typed.getJoinTree(), "in JOIN TREE");
-    assertNoWindowFunctionNodes(query_node_typed.getJoinTree(), "in JOIN TREE");
+    auto join_tree_node_type = query_node_typed.getJoinTree()->getNodeType();
+    bool join_tree_is_subquery = join_tree_node_type == QueryTreeNodeType::QUERY || join_tree_node_type == QueryTreeNodeType::UNION;
+
+    if (!join_tree_is_subquery)
+    {
+        assertNoAggregateFunctionNodes(query_node_typed.getJoinTree(), "in JOIN TREE");
+        assertNoGroupingFunction(query_node_typed.getJoinTree(), "in JOIN TREE");
+        assertNoWindowFunctionNodes(query_node_typed.getJoinTree(), "in JOIN TREE");
+    }
 
     if (query_node_typed.hasWhere())
     {
diff --git a/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp b/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp
index 674e02b16ec9..4091d37ec114 100644
--- a/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp
+++ b/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp
@@ -781,6 +781,11 @@ void MergeTreeDataSelectExecutor::filterPartsByPartition(
     ReadFromMergeTree::IndexStats & index_stats)
 {
     const Settings & settings = context->getSettingsRef();
+
+    /// TODO: Analyzer syntax analyzer result
+    if (settings.allow_experimental_analyzer)
+        return;
+
     std::optional<PartitionPruner> partition_pruner;
     std::optional<KeyCondition> minmax_idx_condition;
     DataTypes minmax_columns_types;
