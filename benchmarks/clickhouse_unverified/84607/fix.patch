diff --git a/docs/en/interfaces/formats.md b/docs/en/interfaces/formats.md
index 13d187a9d80b..aba5a770d7a3 100644
--- a/docs/en/interfaces/formats.md
+++ b/docs/en/interfaces/formats.md
@@ -81,7 +81,7 @@ The supported formats are:
 | [JSONCompactEachRow](#jsoncompacteachrow)                                                 | ✔   | ✔     |
 | [JSONCompactEachRowWithNames](#jsoncompacteachrowwithnames)                               | ✔   | ✔     |
 | [JSONCompactEachRowWithNamesAndTypes](#jsoncompacteachrowwithnamesandtypes)               | ✔   | ✔     |
-| [JSONCompactEachRowWithProgress](#jsoncompacteachrow)                                     | ✗    | ✔     |
+| [JSONCompactEachRowWithProgress](#jsoncompacteachrow)                                     | ✗   | ✔     |
 | [JSONCompactStringsEachRow](#jsoncompactstringseachrow)                                   | ✔   | ✔     |
 | [JSONCompactStringsEachRowWithNames](#jsoncompactstringseachrowwithnames)                 | ✔   | ✔     |
 | [JSONCompactStringsEachRowWithNamesAndTypes](#jsoncompactstringseachrowwithnamesandtypes) | ✔   | ✔     |
@@ -104,7 +104,7 @@ The supported formats are:
 | [Prometheus](#prometheus)                                                                 | ✗   | ✔     |
 | [Protobuf](#protobuf)                                                                     | ✔   | ✔     |
 | [ProtobufSingle](#protobufsingle)                                                         | ✔   | ✔     |
-| [ProtobufList](#protobuflist)                                                                                     | ✔   | ✔     |
+| [ProtobufList](#protobuflist)                                                             | ✔   | ✔     |
 | [Avro](#data-format-avro)                                                                 | ✔   | ✔     |
 | [AvroConfluent](#data-format-avro-confluent)                                              | ✔   | ✗     |
 | [Parquet](#data-format-parquet)                                                           | ✔   | ✔     |
@@ -120,6 +120,7 @@ The supported formats are:
 | [RowBinaryWithDefaults](#rowbinarywithdefaults)                                           | ✔   | ✗     |
 | [Native](#native)                                                                         | ✔   | ✔     |
 | [Null](#null)                                                                             | ✗   | ✔     |
+| [Hash](#hash)                                                                             | ✗   | ✔     |
 | [XML](#xml)                                                                               | ✗   | ✔     |
 | [CapnProto](#capnproto)                                                                   | ✔   | ✔     |
 | [LineAsString](#lineasstring)                                                             | ✔   | ✔     |
@@ -301,6 +302,10 @@ See [Native](/interfaces/formats/Native)
 
 See [Null](/interfaces/formats/Null)
 
+### Hash {#hash}
+
+See [Hash](/interfaces/formats/Hash)
+
 ### Pretty {#pretty}
 
 See [Pretty](/interfaces/formats/Pretty)
diff --git a/docs/en/interfaces/formats/Hash.md b/docs/en/interfaces/formats/Hash.md
new file mode 100644
index 000000000000..32b11d0f259e
--- /dev/null
+++ b/docs/en/interfaces/formats/Hash.md
@@ -0,0 +1,64 @@
+---
+alias: []
+description: 'Documentation for the Hash format'
+input_format: false
+keywords: ['hash', 'format']
+output_format: true
+slug: /interfaces/formats/Hash
+title: 'Hash'
+---
+
+| Input | Output | Alias |
+|-------|--------|-------|
+| ✗     | ✔      |       |
+
+## Description {#description}
+
+The `Hash` output format calculates a single hash value for all columns and rows of the result.
+This is useful for calculating a "fingerprint" of the result, for example in situations where data transfer is the bottleneck.
+
+## Example usage {#example-usage}
+
+### Reading data {#reading-data}
+
+Consider a table `football` with the following data:
+
+```text
+    ┌───────date─┬─season─┬─home_team─────────────┬─away_team───────────┬─home_team_goals─┬─away_team_goals─┐
+ 1. │ 2022-04-30 │   2021 │ Sutton United         │ Bradford City       │               1 │               4 │
+ 2. │ 2022-04-30 │   2021 │ Swindon Town          │ Barrow              │               2 │               1 │
+ 3. │ 2022-04-30 │   2021 │ Tranmere Rovers       │ Oldham Athletic     │               2 │               0 │
+ 4. │ 2022-05-02 │   2021 │ Port Vale             │ Newport County      │               1 │               2 │
+ 5. │ 2022-05-02 │   2021 │ Salford City          │ Mansfield Town      │               2 │               2 │
+ 6. │ 2022-05-07 │   2021 │ Barrow                │ Northampton Town    │               1 │               3 │
+ 7. │ 2022-05-07 │   2021 │ Bradford City         │ Carlisle United     │               2 │               0 │
+ 8. │ 2022-05-07 │   2021 │ Bristol Rovers        │ Scunthorpe United   │               7 │               0 │
+ 9. │ 2022-05-07 │   2021 │ Exeter City           │ Port Vale           │               0 │               1 │
+10. │ 2022-05-07 │   2021 │ Harrogate Town A.F.C. │ Sutton United       │               0 │               2 │
+11. │ 2022-05-07 │   2021 │ Hartlepool United     │ Colchester United   │               0 │               2 │
+12. │ 2022-05-07 │   2021 │ Leyton Orient         │ Tranmere Rovers     │               0 │               1 │
+13. │ 2022-05-07 │   2021 │ Mansfield Town        │ Forest Green Rovers │               2 │               2 │
+14. │ 2022-05-07 │   2021 │ Newport County        │ Rochdale            │               0 │               2 │
+15. │ 2022-05-07 │   2021 │ Oldham Athletic       │ Crawley Town        │               3 │               3 │
+16. │ 2022-05-07 │   2021 │ Stevenage Borough     │ Salford City        │               4 │               2 │
+17. │ 2022-05-07 │   2021 │ Walsall               │ Swindon Town        │               0 │               3 │
+    └────────────┴────────┴───────────────────────┴─────────────────────┴─────────────────┴─────────────────┘
+```
+
+Read data using the `Hash` format:
+
+```sql
+SELECT *
+FROM football
+FORMAT Hash
+```
+
+The query will process the data, but will not output anything.
+
+```response
+df2ec2f0669b000edff6adee264e7d68
+
+1 rows in set. Elapsed: 0.154 sec.
+```
+
+## Format settings {#format-settings}
diff --git a/src/Formats/registerFormats.cpp b/src/Formats/registerFormats.cpp
index 768ba4a6edbb..20f4cb6523df 100644
--- a/src/Formats/registerFormats.cpp
+++ b/src/Formats/registerFormats.cpp
@@ -94,6 +94,7 @@ void registerOutputFormatMarkdown(FormatFactory & factory);
 void registerOutputFormatPostgreSQLWire(FormatFactory & factory);
 void registerOutputFormatPrometheus(FormatFactory & factory);
 void registerOutputFormatSQLInsert(FormatFactory & factory);
+void registerOutputFormatHash(FormatFactory & factory);
 
 /// Input only formats.
 
@@ -240,6 +241,7 @@ void registerFormats()
     registerOutputFormatCapnProto(factory);
     registerOutputFormatPrometheus(factory);
     registerOutputFormatSQLInsert(factory);
+    registerOutputFormatHash(factory);
 
     registerInputFormatRegexp(factory);
     registerInputFormatJSONAsString(factory);
diff --git a/src/Processors/Formats/Impl/HashOutputFormat.cpp b/src/Processors/Formats/Impl/HashOutputFormat.cpp
new file mode 100644
index 000000000000..ae5c88051f45
--- /dev/null
+++ b/src/Processors/Formats/Impl/HashOutputFormat.cpp
@@ -0,0 +1,50 @@
+#include <Processors/Formats/Impl/HashOutputFormat.h>
+
+#include <Columns/IColumn.h>
+#include <Core/Block.h>
+#include <Formats/FormatFactory.h>
+#include <Formats/FormatSettings.h>
+#include <IO/WriteBuffer.h>
+#include <Processors/Port.h>
+
+
+namespace DB
+{
+
+HashOutputFormat::HashOutputFormat(WriteBuffer & out_, SharedHeader header_)
+    : IOutputFormat(header_, out_)
+{
+}
+
+String HashOutputFormat::getName() const
+{
+    return "HashOutputFormat";
+}
+
+void HashOutputFormat::consume(Chunk chunk)
+{
+    for (const auto & column : chunk.getColumns())
+    {
+        for (size_t i = 0; i < column->size(); ++i)
+            column->updateHashWithValue(i, hash);
+    }
+}
+
+void HashOutputFormat::finalizeImpl()
+{
+    std::string hash_string = getSipHash128AsHexString(hash);
+    out.write(hash_string.data(), hash_string.size());
+    out.write("
", 1);
+    out.next();
+}
+
+void registerOutputFormatHash(FormatFactory & factory)
+{
+    factory.registerOutputFormat("Hash",
+        [](WriteBuffer & buf, const Block & header, const FormatSettings &)
+        {
+            return std::make_shared<HashOutputFormat>(buf, std::make_shared<const Block>(header));
+        });
+}
+
+}
diff --git a/src/Processors/Formats/Impl/HashOutputFormat.h b/src/Processors/Formats/Impl/HashOutputFormat.h
new file mode 100644
index 000000000000..ac0e81069ca6
--- /dev/null
+++ b/src/Processors/Formats/Impl/HashOutputFormat.h
@@ -0,0 +1,27 @@
+#pragma once
+
+#include <Common/SipHash.h>
+#include <Processors/Formats/IOutputFormat.h>
+#include <Processors/Chunk.h>
+#include <Core/Block_fwd.h>
+
+namespace DB
+{
+
+class WriteBuffer;
+
+/// Computes a single hash value from all columns and rows of the input.
+class HashOutputFormat final  : public IOutputFormat
+{
+public:
+    HashOutputFormat(WriteBuffer & out_, SharedHeader header_);
+    String getName() const override;
+
+private:
+    void consume(Chunk chunk) override;
+    void finalizeImpl() override;
+
+    SipHash hash;
+};
+
+}
