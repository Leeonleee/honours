{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 6374,
  "instance_id": "ClickHouse__ClickHouse-6374",
  "issue_numbers": [
    "6248"
  ],
  "base_commit": "048fe08bde14d09d946faad7a265eb838eda27f3",
  "patch": "diff --git a/dbms/src/Functions/FunctionsConversion.h b/dbms/src/Functions/FunctionsConversion.h\nindex 7d1d277752f2..ce89b1d1b74e 100644\n--- a/dbms/src/Functions/FunctionsConversion.h\n+++ b/dbms/src/Functions/FunctionsConversion.h\n@@ -1183,7 +1183,7 @@ struct UnknownMonotonicity\n };\n \n template <typename T>\n-struct ToIntMonotonicity\n+struct ToNumberMonotonicity\n {\n     static bool has() { return true; }\n \n@@ -1358,21 +1358,21 @@ struct NameToFloat32 { static constexpr auto name = \"toFloat32\"; };\n struct NameToFloat64 { static constexpr auto name = \"toFloat64\"; };\n struct NameToUUID { static constexpr auto name = \"toUUID\"; };\n \n-using FunctionToUInt8 = FunctionConvert<DataTypeUInt8, NameToUInt8, ToIntMonotonicity<UInt8>>;\n-using FunctionToUInt16 = FunctionConvert<DataTypeUInt16, NameToUInt16, ToIntMonotonicity<UInt16>>;\n-using FunctionToUInt32 = FunctionConvert<DataTypeUInt32, NameToUInt32, ToIntMonotonicity<UInt32>>;\n-using FunctionToUInt64 = FunctionConvert<DataTypeUInt64, NameToUInt64, ToIntMonotonicity<UInt64>>;\n-using FunctionToInt8 = FunctionConvert<DataTypeInt8, NameToInt8, ToIntMonotonicity<Int8>>;\n-using FunctionToInt16 = FunctionConvert<DataTypeInt16, NameToInt16, ToIntMonotonicity<Int16>>;\n-using FunctionToInt32 = FunctionConvert<DataTypeInt32, NameToInt32, ToIntMonotonicity<Int32>>;\n-using FunctionToInt64 = FunctionConvert<DataTypeInt64, NameToInt64, ToIntMonotonicity<Int64>>;\n-using FunctionToFloat32 = FunctionConvert<DataTypeFloat32, NameToFloat32, PositiveMonotonicity>;\n-using FunctionToFloat64 = FunctionConvert<DataTypeFloat64, NameToFloat64, PositiveMonotonicity>;\n-using FunctionToDate = FunctionConvert<DataTypeDate, NameToDate, ToIntMonotonicity<UInt16>>;\n-using FunctionToDateTime = FunctionConvert<DataTypeDateTime, NameToDateTime, ToIntMonotonicity<UInt32>>;\n-using FunctionToUUID = FunctionConvert<DataTypeUUID, NameToUUID, ToIntMonotonicity<UInt128>>;\n+using FunctionToUInt8 = FunctionConvert<DataTypeUInt8, NameToUInt8, ToNumberMonotonicity<UInt8>>;\n+using FunctionToUInt16 = FunctionConvert<DataTypeUInt16, NameToUInt16, ToNumberMonotonicity<UInt16>>;\n+using FunctionToUInt32 = FunctionConvert<DataTypeUInt32, NameToUInt32, ToNumberMonotonicity<UInt32>>;\n+using FunctionToUInt64 = FunctionConvert<DataTypeUInt64, NameToUInt64, ToNumberMonotonicity<UInt64>>;\n+using FunctionToInt8 = FunctionConvert<DataTypeInt8, NameToInt8, ToNumberMonotonicity<Int8>>;\n+using FunctionToInt16 = FunctionConvert<DataTypeInt16, NameToInt16, ToNumberMonotonicity<Int16>>;\n+using FunctionToInt32 = FunctionConvert<DataTypeInt32, NameToInt32, ToNumberMonotonicity<Int32>>;\n+using FunctionToInt64 = FunctionConvert<DataTypeInt64, NameToInt64, ToNumberMonotonicity<Int64>>;\n+using FunctionToFloat32 = FunctionConvert<DataTypeFloat32, NameToFloat32, ToNumberMonotonicity<Float32>>;\n+using FunctionToFloat64 = FunctionConvert<DataTypeFloat64, NameToFloat64, ToNumberMonotonicity<Float64>>;\n+using FunctionToDate = FunctionConvert<DataTypeDate, NameToDate, ToNumberMonotonicity<UInt16>>;\n+using FunctionToDateTime = FunctionConvert<DataTypeDateTime, NameToDateTime, ToNumberMonotonicity<UInt32>>;\n+using FunctionToUUID = FunctionConvert<DataTypeUUID, NameToUUID, ToNumberMonotonicity<UInt128>>;\n using FunctionToString = FunctionConvert<DataTypeString, NameToString, ToStringMonotonicity>;\n-using FunctionToUnixTimestamp = FunctionConvert<DataTypeUInt32, NameToUnixTimestamp, ToIntMonotonicity<UInt32>>;\n+using FunctionToUnixTimestamp = FunctionConvert<DataTypeUInt32, NameToUnixTimestamp, ToNumberMonotonicity<UInt32>>;\n using FunctionToDecimal32 = FunctionConvert<DataTypeDecimal<Decimal32>, NameToDecimal32, UnknownMonotonicity>;\n using FunctionToDecimal64 = FunctionConvert<DataTypeDecimal<Decimal64>, NameToDecimal64, UnknownMonotonicity>;\n using FunctionToDecimal128 = FunctionConvert<DataTypeDecimal<Decimal128>, NameToDecimal128, UnknownMonotonicity>;\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00979_toFloat_monotonicity.reference b/dbms/tests/queries/0_stateless/00979_toFloat_monotonicity.reference\nnew file mode 100644\nindex 000000000000..7d9895ef9f33\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00979_toFloat_monotonicity.reference\n@@ -0,0 +1,6 @@\n+7777\n+7777\n+7777\n+7777\n+7777.000\n+7777.000\ndiff --git a/dbms/tests/queries/0_stateless/00979_toFloat_monotonicity.sql b/dbms/tests/queries/0_stateless/00979_toFloat_monotonicity.sql\nnew file mode 100644\nindex 000000000000..9b3bdf91573f\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/00979_toFloat_monotonicity.sql\n@@ -0,0 +1,23 @@\n+DROP TABLE IF EXISTS test1;\n+DROP TABLE IF EXISTS test2;\n+DROP TABLE IF EXISTS test3;\n+\n+CREATE TABLE test1 (n UInt64) ENGINE = MergeTree ORDER BY n SETTINGS index_granularity = 1;\n+CREATE TABLE test2 (s String) ENGINE = MergeTree ORDER BY s SETTINGS index_granularity = 1;\n+CREATE TABLE test3 (d Decimal(4, 3)) ENGINE = MergeTree ORDER BY d SETTINGS index_granularity = 1;\n+\n+INSERT INTO test1 SELECT * FROM numbers(10000);\n+SELECT n FROM test1 WHERE toFloat64(n) = 7777.0 SETTINGS max_rows_to_read = 2;\n+SELECT n FROM test1 WHERE toFloat32(n) = 7777.0 SETTINGS max_rows_to_read = 2;\n+\n+INSERT INTO test2 SELECT toString(number) FROM numbers(10000);\n+SELECT s FROM test2 WHERE toFloat64(s) = 7777.0;\n+SELECT s FROM test2 WHERE toFloat32(s) = 7777.0;\n+\n+INSERT INTO test3 SELECT toDecimal64(number, 3) FROM numbers(10000);\n+SELECT d FROM test3 WHERE toFloat64(d) = 7777.0 SETTINGS max_rows_to_read = 2;\n+SELECT d FROM test3 WHERE toFloat32(d) = 7777.0 SETTINGS max_rows_to_read = 2;\n+\n+DROP TABLE test1;\n+DROP TABLE test2;\n+DROP TABLE test3;\n",
  "problem_statement": "Confused by toFloat64() comparison\nThe id column in myTable is stored as string. However, it is a valid number. In the query below, one row is returned and the compare_indicator is 1.\r\n``` \r\nselect id, toFloat64(id) = 439385272.0 as compare_indicator\r\nfrom myTable\r\nwhere id = '439385272' \r\n```\r\nIn the query below, nothing is returned. \r\n```\r\n select id, toFloat64(id) = 439385272.0 as compare_indicator\r\n from myTable\r\n where toFloat64(id) = 439385272.0 \r\n```\r\nEven given a value range, the query below returns nothing.\r\n```\r\n select id, toFloat64(id) = 439385272.0 as compare_indicator\r\n from myTable\r\n where toFloat64(id) between 439385262.0 and 439385282.0\r\n```\r\nAm I missing something? Or is it a possible bug? \n",
  "hints_text": "It looks like a bug.\r\n\r\nWhat CH version do you use?\r\nCan you show DDL (show create table myTable)?\nAnd can you check a result of\r\n\r\n select id, toFloat64(id) = 439385272.0 as compare_indicator\r\n from myTable\r\n where identity(id) = '439385272' \nThanks for the help,\r\n\r\nComparisons to string work so I re-interpreted your question as: \r\n\r\nDoes this work?\r\n\r\n```\r\nselect id, toFloat64(id) = 439385272.0 as compare_indicator\r\n from myTable\r\n where identity(toFloat64(id)) = 439385272.0 \r\n```\r\n\r\nAnd the answer is yes it does! Does this help you see why the case without the `identity()` does not work? What does the `identity()` function do (I could not find it in the docs)?\r\n\r\nUnfortunately, I can't share the actual DDL, but an edited version is: \r\n\r\n```\r\nCREATE TABLE myTable (`id` String)\r\nENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 8192\r\n```\r\n\r\nVersion is:\r\n```\r\nClickHouse client version 19.8.3.8 (official build).\r\nConnecting to clickhouse:9000 as user default.\r\nConnected to ClickHouse server version 19.8.3 revision 54420.\r\n```\r\n\n>Comparisons to string work so I re-interpreted your question as:\r\n\r\nPlease don't guess and check exactly my query!!!\r\n\r\nselect id, toFloat64(id) = 439385272.0 as compare_indicator\r\nfrom myTable\r\nwhere identity(id) = '439385272'\nYes. The query you suggested works. Referring back to my first code example (shown below), even without the identity function, the query works when it is comparing to a string.\r\n```\r\nselect id, toFloat64(id) = 439385272.0 as compare_indicator\r\nfrom myTable\r\nwhere id = '439385272'\r\n-- query returns one matching row\r\n```\r\nMy questions are:\r\n1) Why ``` toFloat64()``` function won't work for float number comparison. \r\n```\r\nselect id, toFloat64(id) = 439385272.0 as compare_indicator\r\n from myTable\r\n where toFloat64(id) = 439385272.0 \r\n-- returns nothing\r\n```\r\n\r\n2) Why ```identity(toFloat64())``` works instead? What does the ```identity()``` function do? \r\n```\r\nselect id, toFloat64(id) = 439385272.0 as compare_indicator\r\n from myTable\r\n where identity(toFloat64(id)) = 439385272.0 \r\n-- returns one matching row\r\n```\r\n\r\n\n@dimarub2000 Please check if the monotonic functions processing for index works correctly for this case.\nI failed to reproduce it with select number from numbers only with rand and partially\r\n\r\n```\r\nCREATE TABLE myTable (`id` String)\r\nENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 8192;\r\ninsert into myTable select toString(rand()) from numbers(10000000);\r\ninsert into myTable select 439385272;\r\n\r\n1.\r\nselect id, toFloat64(id) = 439385272.0 as compare_indicator from myTable\r\nwhere id = '439385272'\r\n\u250c\u2500id\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500compare_indicator\u2500\u2510\r\n\u2502 439385272 \u2502                 1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n1 rows in set. Elapsed: 0.002 sec. Processed 40.96 thousand rows, 740.53 KB (22.86 million rows/s., 413.24 MB/s.)\r\n\r\nKey condition: (column 0 in ['439385272', '439385272'])\r\nSelected 6 parts by date, 6 parts by key, 6 marks to read from 6 ranges\r\n\r\n\r\n2.\r\nselect id, toFloat64(id) = 439385272.0 as compare_indicator from myTable\r\nwhere toFloat64(id) = 439385270.0 \r\nOk.\r\n0 rows in set. Elapsed: 0.002 sec. Processed 16.38 thousand rows, 309.44 KB (7.93 million rows/s., 149.78 MB/s.)\r\n\r\nKey condition: (toFloat64(column 0) in [439385270., 439385270.])\r\nSelected 6 parts by date, 1 parts by key, 2 marks to read from 2 ranges\r\n\r\n\r\n3.\r\nselect id, toFloat64(id) = 439385272.0 as compare_indicator from myTable\r\nwhere identity(toFloat64(id)) = 439385272.0 \r\n\u250c\u2500id\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500compare_indicator\u2500\u2510\r\n\u2502 439385272 \u2502                 1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n1 rows in set. Elapsed: 0.077 sec. Processed 10.00 million rows, 187.41 MB (129.68 million rows/s., 2.43 GB/s.)\r\n\r\n\r\n4.\r\nselect id, toFloat64(id) = 439385272.0 as compare_indicator from myTable\r\nwhere toFloat64(id) between 439385271.999 and 439385272.001\r\n1 rows in set. Elapsed: 0.003 sec. Processed 16.39 thousand rows, 309.46 KB (6.15 million rows/s., 116.14 MB/s.)\r\n\r\nKey condition: (toFloat64(column 0) in [439385271.999, +inf)), (toFloat64(column 0) in (-inf, 439385272.001]),\r\nSelected 6 parts by date, 2 parts by key, 3 marks to read from 3 ranges\r\n\r\n```\r\n\r\ncase 2 & 3 / Processed 16.38 thousand rows -- it looks suspicious because case 1: Processed 40.96 thousand rows.\nhhmm. Wow. \r\nOPTIMIZE TABLE myTable FINAL; did the trick\r\n```\r\n\r\nselect id, toFloat64(id) = 439385272.0 as compare_indicator from myTable \r\nwhere toFloat64(id) between 439385271.999 and 439385272.001\r\n0 rows in set. Elapsed: 0.002 sec.\r\n\r\nKey condition: (toFloat64(column 0) in [439385271.999, +inf)), (toFloat64(column 0) in (-inf, 439385272.001]), and\r\nSelected 1 parts by date, 0 parts by key, 0 marks to read from 0 ranges\r\n\r\n\r\n\r\nselect id, toFloat64(id) = 439385272.0 as compare_indicator from myTable \r\nwhere toFloat64(id) = 439385270.0\r\n0 rows in set. Elapsed: 0.002 sec.\r\n\r\nKey condition: (toFloat64(column 0) in [439385270., 439385270.])\r\nSelected 1 parts by date, 0 parts by key, 0 marks to read from 0 ranges\r\n\r\n\r\n\r\nselect id, toFloat64(id) = 439385272.0 as compare_indicator from myTable where id = '439385272'\r\n\u250c\u2500id\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500compare_indicator\u2500\u2510\r\n\u2502 439385272 \u2502                 1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n1 rows in set. Elapsed: 0.002 sec. Processed 8.19 thousand rows, 146.59 KB (4.43 million rows/s., 79.20 MB/s.)\r\n\r\nKey condition: (column 0 in ['439385272', '439385272'])\r\nSelected 1 parts by date, 1 parts by key, 1 marks to read from 1 ranges\r\n\r\n```\r\n\r\n19.13.1.1010 (official build).\nminimal STR:\r\n```\r\n\r\nCREATE TABLE myTable (`id` String)\r\nENGINE = MergeTree ORDER BY id SETTINGS index_granularity = 8192;\r\ninsert into myTable select toString(number) from numbers(5000);\r\ninsert into myTable select '439385272';\r\n\r\nselect id, toFloat64(id) = 439385272.0 as compare_indicator from myTable\r\nwhere toFloat64(id) between 439385271.999 and 439385272.001\r\n\u250c\u2500id\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500compare_indicator\u2500\u2510\r\n\u2502 439385272 \u2502                 1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n1 rows in set. Elapsed: 0.002 sec.\r\n\r\noptimize table myTable final;\r\n\r\nselect id, toFloat64(id) = 439385272.0 as compare_indicator from myTable \r\nwhere toFloat64(id) between 439385271.999 and 439385272.001\r\n0 rows in set. Elapsed: 0.002 sec.\r\n```\r\n",
  "created_at": "2019-08-07T09:25:08Z",
  "modified_files": [
    "dbms/src/Functions/FunctionsConversion.h"
  ],
  "modified_test_files": [
    "b/dbms/tests/queries/0_stateless/00979_toFloat_monotonicity.reference",
    "b/dbms/tests/queries/0_stateless/00979_toFloat_monotonicity.sql"
  ]
}