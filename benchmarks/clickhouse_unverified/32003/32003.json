{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 32003,
  "instance_id": "ClickHouse__ClickHouse-32003",
  "issue_numbers": [
    "30874"
  ],
  "base_commit": "c194c8694093ab96a8fcd009b107929e7793ab8d",
  "patch": "diff --git a/docs/en/sql-reference/statements/alter/column.md b/docs/en/sql-reference/statements/alter/column.md\nindex 95c4cb6898c4..2e562e204672 100644\n--- a/docs/en/sql-reference/statements/alter/column.md\n+++ b/docs/en/sql-reference/statements/alter/column.md\n@@ -10,7 +10,7 @@ A set of queries that allow changing the table structure.\n Syntax:\n \n ``` sql\n-ALTER TABLE [db].name [ON CLUSTER cluster] ADD|DROP|RENAME|CLEAR|COMMENT|MODIFY|MATERIALIZE COLUMN ...\n+ALTER TABLE [db].name [ON CLUSTER cluster] ADD|DROP|RENAME|CLEAR|COMMENT|{MODIFY|ALTER}|MATERIALIZE COLUMN ...\n ```\n \n In the query, specify a list of one or more comma-separated actions.\n@@ -138,6 +138,7 @@ ALTER TABLE visits COMMENT COLUMN browser 'The table shows the browser used for\n \n ``` sql\n MODIFY COLUMN [IF EXISTS] name [type] [default_expr] [codec] [TTL] [AFTER name_after | FIRST]\n+ALTER COLUMN [IF EXISTS] name TYPE [type] [default_expr] [codec] [TTL] [AFTER name_after | FIRST]\n ```\n \n This query changes the `name` column properties:\ndiff --git a/docs/ru/sql-reference/statements/alter/column.md b/docs/ru/sql-reference/statements/alter/column.md\nindex 8378478d801e..4de2d067ccea 100644\n--- a/docs/ru/sql-reference/statements/alter/column.md\n+++ b/docs/ru/sql-reference/statements/alter/column.md\n@@ -10,7 +10,7 @@ toc_title: \"\u041c\u0430\u043d\u0438\u043f\u0443\u043b\u044f\u0446\u0438\u0438 \u0441\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c\u0438\"\n \u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441:\n \n ``` sql\n-ALTER TABLE [db].name [ON CLUSTER cluster] ADD|DROP|RENAME|CLEAR|COMMENT|MODIFY|MATERIALIZE COLUMN ...\n+ALTER TABLE [db].name [ON CLUSTER cluster] ADD|DROP|RENAME|CLEAR|COMMENT|{MODIFY|ALTER}|MATERIALIZE COLUMN ...\n ```\n \n \u0412 \u0437\u0430\u043f\u0440\u043e\u0441\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439 \u043d\u0430\u0434 \u043e\u0434\u043d\u043e\u0439 \u0442\u0430\u0431\u043b\u0438\u0446\u0435\u0439 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e.\n@@ -138,6 +138,7 @@ ALTER TABLE visits COMMENT COLUMN browser '\u0421\u0442\u043e\u043b\u0431\u0435\u0446 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442,\n \n ``` sql\n MODIFY COLUMN [IF EXISTS] name [type] [default_expr] [codec] [TTL] [AFTER name_after | FIRST]\n+ALTER COLUMN [IF EXISTS] name TYPE [type] [default_expr] [codec] [TTL] [AFTER name_after | FIRST]\n ```\n \n \u0417\u0430\u043f\u0440\u043e\u0441 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 `name`:\ndiff --git a/src/Parsers/ParserAlterQuery.cpp b/src/Parsers/ParserAlterQuery.cpp\nindex 66645ccaf0e9..ce45d40b641f 100644\n--- a/src/Parsers/ParserAlterQuery.cpp\n+++ b/src/Parsers/ParserAlterQuery.cpp\n@@ -26,6 +26,7 @@ bool ParserAlterCommand::parseImpl(Pos & pos, ASTPtr & node, Expected & expected\n     ParserKeyword s_drop_column(\"DROP COLUMN\");\n     ParserKeyword s_clear_column(\"CLEAR COLUMN\");\n     ParserKeyword s_modify_column(\"MODIFY COLUMN\");\n+    ParserKeyword s_alter_column(\"ALTER COLUMN\");\n     ParserKeyword s_rename_column(\"RENAME COLUMN\");\n     ParserKeyword s_comment_column(\"COMMENT COLUMN\");\n     ParserKeyword s_materialize_column(\"MATERIALIZE COLUMN\");\n@@ -619,11 +620,14 @@ bool ParserAlterCommand::parseImpl(Pos & pos, ASTPtr & node, Expected & expected\n                     return false;\n                 }\n             }\n-            else if (s_modify_column.ignore(pos, expected))\n+            else if (bool is_modify = s_modify_column.ignore(pos, expected); is_modify || s_alter_column.ignore(pos, expected))\n             {\n                 if (s_if_exists.ignore(pos, expected))\n                     command->if_exists = true;\n \n+                if (!is_modify)\n+                    parser_modify_col_decl.enableCheckTypeKeyword();\n+\n                 if (!parser_modify_col_decl.parse(pos, command->col_decl, expected))\n                     return false;\n \ndiff --git a/src/Parsers/ParserCreateQuery.h b/src/Parsers/ParserCreateQuery.h\nindex 537eb0f7d74f..7b4978d74141 100644\n--- a/src/Parsers/ParserCreateQuery.h\n+++ b/src/Parsers/ParserCreateQuery.h\n@@ -96,6 +96,8 @@ class IParserColumnDeclaration : public IParserBase\n     {\n     }\n \n+    void enableCheckTypeKeyword() { check_type_keyword = true; }\n+\n protected:\n     using ASTDeclarePtr = std::shared_ptr<ASTColumnDeclaration>;\n \n@@ -106,6 +108,8 @@ class IParserColumnDeclaration : public IParserBase\n     bool require_type = true;\n     bool allow_null_modifiers = false;\n     bool check_keywords_after_name = false;\n+    /// just for ALTER TABLE ALTER COLUMN use\n+    bool check_type_keyword = false;\n };\n \n using ParserColumnDeclaration = IParserColumnDeclaration<ParserIdentifier>;\n@@ -125,6 +129,7 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n     ParserKeyword s_codec{\"CODEC\"};\n     ParserKeyword s_ttl{\"TTL\"};\n     ParserKeyword s_remove{\"REMOVE\"};\n+    ParserKeyword s_type{\"TYPE\"};\n     ParserTernaryOperatorExpression expr_parser;\n     ParserStringLiteral string_literal_parser;\n     ParserCodec codec_parser;\n@@ -171,6 +176,8 @@ bool IParserColumnDeclaration<NameParser>::parseImpl(Pos & pos, ASTPtr & node, E\n             || (!s_comment.checkWithoutMoving(pos, expected)\n                 && !s_codec.checkWithoutMoving(pos, expected))))\n     {\n+        if (check_type_keyword && !s_type.ignore(pos, expected))\n+            return false;\n         if (!type_parser.parse(pos, type, expected))\n             return false;\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02126_alter_table_alter_column.reference b/tests/queries/0_stateless/02126_alter_table_alter_column.reference\nnew file mode 100644\nindex 000000000000..6d1fffb6a80c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02126_alter_table_alter_column.reference\n@@ -0,0 +1,3 @@\n+CREATE TABLE default.alter_column_02126\\n(\\n    `a` Int32,\\n    `x` Int32,\\n    `y` Int32\\n)\\nENGINE = MergeTree\\nORDER BY a\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.alter_column_02126\\n(\\n    `a` Int32,\\n    `x` Float32,\\n    `y` Int32\\n)\\nENGINE = MergeTree\\nORDER BY a\\nSETTINGS index_granularity = 8192\n+CREATE TABLE default.alter_column_02126\\n(\\n    `a` Int32,\\n    `x` Float64,\\n    `y` Float32\\n)\\nENGINE = MergeTree\\nORDER BY a\\nSETTINGS index_granularity = 8192\ndiff --git a/tests/queries/0_stateless/02126_alter_table_alter_column.sql b/tests/queries/0_stateless/02126_alter_table_alter_column.sql\nnew file mode 100644\nindex 000000000000..149c7fa68525\n--- /dev/null\n+++ b/tests/queries/0_stateless/02126_alter_table_alter_column.sql\n@@ -0,0 +1,9 @@\n+DROP TABLE IF EXISTS alter_column_02126;\n+CREATE TABLE alter_column_02126 (a Int, x Int, y Int) ENGINE = MergeTree ORDER BY a;\n+SHOW CREATE TABLE alter_column_02126;\n+ALTER TABLE alter_column_02126 ALTER COLUMN x TYPE Float32;\n+SHOW CREATE TABLE alter_column_02126;\n+ALTER TABLE alter_column_02126 ALTER COLUMN x TYPE Float64, MODIFY COLUMN y Float32;\n+SHOW CREATE TABLE alter_column_02126;\n+ALTER TABLE alter_column_02126 MODIFY COLUMN y TYPE Float32; -- { clientError 62 }\n+ALTER TABLE alter_column_02126 ALTER COLUMN y Float32; -- { clientError 62 }\n",
  "problem_statement": "Support PostgreSQL style ALTER MODIFY COLUMN\n**Use case**\r\n\r\nPostgreSQL is using `ALTER TABLE t ALTER COLUMN c TYPE type` instead of `ALTER TABLE t MODIFY COLUMN c type`.\r\nThere is a risk that some people already get used to PostgreSQL syntax.\r\n\r\nLet's implement it in ClickHouse.\r\n\r\n```\r\ntutorial=# ALTER TABLE hits_100m_obfuscated MODIFY COLUMN UserAgentMinor TEXT\r\ntutorial-# ;\r\nERROR:  syntax error at or near \"MODIFY\"\r\nLINE 1: ALTER TABLE hits_100m_obfuscated MODIFY COLUMN UserAgentMino...\r\n                                         ^\r\ntutorial=# ALTER TABLE hits_100m_obfuscated ALTER COLUMN UserAgentMinor TYPE TEXT\r\n;\r\nALTER TABLE\r\ntutorial=#\r\n```\r\n\r\n**Proposed implementation**\r\n\r\nImplement it in parser level.\n",
  "hints_text": "some questions:\r\n\r\n1. Does it work just a alias to currently `ALTER TABLE MODIFY COLUMN`? \r\n```SQL\r\n# Current style\r\nMODIFY COLUMN [IF EXISTS] name [type] [default_expr] [codec] [TTL] [AFTER name_after | FIRST]\r\n# the PostgreSQL like style\r\nALTER COLUMN [IF EXISTS] name TYPE [type] [default_expr] [codec] [TTL] [AFTER name_after | FIRST]\r\n```\r\n2. If just implement it in the parser level, it will be formatted and printed as ClickHouse style, when it is executed in `clickhouse-client`, will it be ok?\r\n \r\n![2021-11-30-001106_1357x373_scrot](https://user-images.githubusercontent.com/3500109/143903103-23f0e2ec-def4-4fae-af00-57a768b09596.png)\r\n\r\n\r\n3. And it seems that we need a new parser to parse the `TYPE` between `name` and `declaration`, because currently `name` and `declaration` are parsed together.Or maybe adding a parameter to `IParserColumnDeclaration` is just ok ...\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/blob/93ed4948b43e1caeac14424409f437019621fc8d/src/Parsers/ParserAlterQuery.cpp#L116\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/blob/93ed4948b43e1caeac14424409f437019621fc8d/src/Parsers/ParserAlterQuery.cpp#L622-L629\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/blob/93ed4948b43e1caeac14424409f437019621fc8d/src/Parsers/ParserCreateQuery.h#L134-L136",
  "created_at": "2021-11-30T13:18:31Z",
  "modified_files": [
    "docs/en/sql-reference/statements/alter/column.md",
    "docs/ru/sql-reference/statements/alter/column.md",
    "src/Parsers/ParserAlterQuery.cpp",
    "src/Parsers/ParserCreateQuery.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02126_alter_table_alter_column.reference",
    "b/tests/queries/0_stateless/02126_alter_table_alter_column.sql"
  ]
}