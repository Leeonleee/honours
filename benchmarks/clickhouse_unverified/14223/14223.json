{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 14223,
  "instance_id": "ClickHouse__ClickHouse-14223",
  "issue_numbers": [
    "13958"
  ],
  "base_commit": "5ecb1717a3b4dea91b4974c612eea8958d3511fe",
  "patch": "diff --git a/src/Columns/ColumnLowCardinality.cpp b/src/Columns/ColumnLowCardinality.cpp\nindex 5c174d57b32b..df714763225f 100644\n--- a/src/Columns/ColumnLowCardinality.cpp\n+++ b/src/Columns/ColumnLowCardinality.cpp\n@@ -352,7 +352,7 @@ void ColumnLowCardinality::updatePermutation(bool reverse, size_t limit, int nan\n         auto new_first = first;\n         for (auto j = first + 1; j < last; ++j)\n         {\n-            if (compareAt(new_first, j, *this, nan_direction_hint) != 0)\n+            if (compareAt(res[new_first], res[j], *this, nan_direction_hint) != 0)\n             {\n                 if (j - new_first > 1)\n                     new_ranges.emplace_back(new_first, j);\n@@ -376,7 +376,7 @@ void ColumnLowCardinality::updatePermutation(bool reverse, size_t limit, int nan\n         auto new_first = first;\n         for (auto j = first + 1; j < limit; ++j)\n         {\n-            if (getDictionary().compareAt(getIndexes().getUInt(new_first), getIndexes().getUInt(j), getDictionary(), nan_direction_hint) != 0)\n+            if (getDictionary().compareAt(getIndexes().getUInt(res[new_first]), getIndexes().getUInt(res[j]), getDictionary(), nan_direction_hint) != 0)\n             {\n                 if (j - new_first > 1)\n                     new_ranges.emplace_back(new_first, j);\n@@ -387,7 +387,7 @@ void ColumnLowCardinality::updatePermutation(bool reverse, size_t limit, int nan\n         auto new_last = limit;\n         for (auto j = limit; j < last; ++j)\n         {\n-            if (getDictionary().compareAt(getIndexes().getUInt(new_first), getIndexes().getUInt(j), getDictionary(), nan_direction_hint) == 0)\n+            if (getDictionary().compareAt(getIndexes().getUInt(res[new_first]), getIndexes().getUInt(res[j]), getDictionary(), nan_direction_hint) == 0)\n             {\n                 std::swap(res[new_last], res[j]);\n                 ++new_last;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01456_low_cardinality_sorting_bugfix.reference b/tests/queries/0_stateless/01456_low_cardinality_sorting_bugfix.reference\nnew file mode 100644\nindex 000000000000..cd7dfe762380\n--- /dev/null\n+++ b/tests/queries/0_stateless/01456_low_cardinality_sorting_bugfix.reference\n@@ -0,0 +1,31 @@\n+green\t2020-08-21 18:46:08\n+green\t2020-08-21 18:46:07\n+green\t2020-08-21 18:46:06\n+red\t2020-08-21 18:46:08\n+red\t2020-08-21 18:46:07\n+red\t2020-08-21 18:46:06\n+\n+\n+green\t2020-08-21 18:46:08.000\n+green\t2020-08-21 18:46:07.000\n+green\t2020-08-21 18:46:06.000\n+red\t2020-08-21 18:46:08.000\n+red\t2020-08-21 18:46:07.000\n+red\t2020-08-21 18:46:06.000\n+\n+------cast to String----\n+\n+green\t2020-08-21 18:46:08\n+green\t2020-08-21 18:46:07\n+green\t2020-08-21 18:46:06\n+red\t2020-08-21 18:46:08\n+red\t2020-08-21 18:46:07\n+red\t2020-08-21 18:46:06\n+\n+\n+green\t2020-08-21 18:46:08.000\n+green\t2020-08-21 18:46:07.000\n+green\t2020-08-21 18:46:06.000\n+red\t2020-08-21 18:46:08.000\n+red\t2020-08-21 18:46:07.000\n+red\t2020-08-21 18:46:06.000\ndiff --git a/tests/queries/0_stateless/01456_low_cardinality_sorting_bugfix.sql b/tests/queries/0_stateless/01456_low_cardinality_sorting_bugfix.sql\nnew file mode 100644\nindex 000000000000..507a798e7b68\n--- /dev/null\n+++ b/tests/queries/0_stateless/01456_low_cardinality_sorting_bugfix.sql\n@@ -0,0 +1,41 @@\n+drop  table if exists order_test1;\n+\n+create table order_test1\n+(\n+    timestamp DateTime64(3),\n+    color     LowCardinality(String)\n+) engine = MergeTree() ORDER BY tuple();\n+\n+insert into order_test1 values ('2020-08-21 18:46:08.000','red')('2020-08-21 18:46:08.000','green');\n+insert into order_test1 values ('2020-08-21 18:46:07.000','red')('2020-08-21 18:46:07.000','green');\n+insert into order_test1 values ('2020-08-21 18:46:06.000','red')('2020-08-21 18:46:06.000','green');\n+\n+SELECT color, toDateTime(timestamp) AS second\n+FROM order_test1\n+GROUP BY color, second\n+ORDER BY color ASC, second DESC;\n+\n+select '';\n+select '';\n+\n+SELECT  color, timestamp\n+FROM order_test1\n+GROUP BY color, timestamp\n+ORDER BY color ASC, timestamp DESC;\n+\n+select '';\n+select '------cast to String----';\n+select '';\n+\n+SELECT cast(color,'String') color, toDateTime(timestamp) AS second\n+FROM order_test1\n+GROUP BY color, second\n+ORDER BY color ASC, second DESC;\n+\n+select '';\n+select '';\n+\n+SELECT cast(color,'String') color, timestamp\n+FROM order_test1\n+GROUP BY color, timestamp\n+ORDER BY color ASC, timestamp DESC;\n",
  "problem_statement": "Multiple ORDER BY expressions not returning correct order\n**Describe the bug**\r\nWhen using ORDER BY with multiple expressions on a MergeTree table, the ordering is not correct.\r\n\r\n\r\n**How to reproduce**\r\n` yandex/clickhouse-server:20.5.2.7`\r\n\r\nCreate the table:\r\n```sql\r\ncreate table order_test\r\n(\r\n    timestamp DateTime64(3),\r\n    color     LowCardinality(Nullable(String))\r\n) engine = MergeTree()\r\n      PARTITION BY toYYYYMM(timestamp)\r\n      ORDER BY timestamp\r\n      SETTINGS index_granularity = 8192;\r\n```\r\n\r\nFill the table (run a few time times to get a range of timestamps):\r\n```sql\r\ninsert into order_test\r\nselect now64(),\r\n       arrayElement(['red', 'green', 'blue', null], modulo(number, 4) + 1) as color\r\nfrom (select number from system.numbers limit 1000000);\r\n```\r\n\r\nQuery:\r\n```sql\r\nSELECT count(),\r\n       color,\r\n       toStartOfSecond(timestamp) AS `second`\r\nFROM order_test AS i\r\nGROUP BY color, `second`\r\nORDER BY color, `second` desc\r\nLIMIT 500;\r\n```\r\n\r\n\r\nSee out of order results:\r\n```\r\n500000,blue,2020-08-21 18:30:06.000\r\n500000,blue,2020-08-21 18:30:09.000\r\n250000,blue,2020-08-21 18:30:03.000\r\n250000,blue,2020-08-21 18:30:08.000\r\n250000,blue,2020-08-21 18:30:07.000\r\n```\r\n\r\n**Expected behavior**\r\nSee results in order by descending second:\r\n```\r\n500000,blue,2020-08-21 18:30:09.000\r\n250000,blue,2020-08-21 18:30:08.000\r\n250000,blue,2020-08-21 18:30:07.000\r\n500000,blue,2020-08-21 18:30:06.000\r\n250000,blue,2020-08-21 18:30:03.000\r\n```\r\n\r\nNotes:\r\n\r\nIt appears when I take out `LowCardinality` from the color column, the order works as expected. \r\n\r\n\r\n\n",
  "hints_text": "Yes, it seems related to LowCardinality\r\n\r\n20.8.1\r\n\r\n```\r\nSELECT\r\n    count(),\r\n    color,\r\n    toStartOfSecond(timestamp) AS second\r\nFROM order_test AS i\r\nGROUP BY\r\n    color,\r\n    second\r\nORDER BY\r\n    color ASC,\r\n    second DESC\r\nLIMIT 500\r\n\r\n\u250c\u2500count()\u2500\u252c\u2500color\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500second\u2500\u2510\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:11.000 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:13.000 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:12.000 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:07.000 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:06.000 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:45:10.000 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:11.000 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:08.000 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:07.000 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:13.000 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:45:10.000 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:12.000 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:08.000 \u2502\r\n```\r\n\r\n```\r\nSELECT\r\n    count(),\r\n    cast(assumeNotNull(color), 'String') AS c,\r\n    toStartOfSecond(timestamp) AS second\r\nFROM order_test AS i\r\nGROUP BY\r\n    c,\r\n    second\r\nORDER BY\r\n    c ASC,\r\n    second DESC\r\nLIMIT 500\r\n\r\n\u250c\u2500count()\u2500\u252c\u2500c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500second\u2500\u2510\r\n\u2502  250000 \u2502       \u2502 2020-08-21 18:46:13.000 \u2502\r\n\u2502  250000 \u2502       \u2502 2020-08-21 18:46:12.000 \u2502\r\n\u2502  250000 \u2502       \u2502 2020-08-21 18:46:11.000 \u2502\r\n\u2502  250000 \u2502       \u2502 2020-08-21 18:46:08.000 \u2502\r\n\u2502  250000 \u2502       \u2502 2020-08-21 18:46:07.000 \u2502\r\n\u2502  250000 \u2502       \u2502 2020-08-21 18:46:06.000 \u2502\r\n\u2502  250000 \u2502       \u2502 2020-08-21 18:45:10.000 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:13.000 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:12.000 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:11.000 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:08.000 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:07.000 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:06.000 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:45:10.000 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:13.000 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:12.000 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:11.000 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:08.000 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:07.000 \u2502\r\n```\r\n\r\n20.4.9 is not affected\r\n\r\n```\r\nSELECT\r\n    count(),\r\n    color,\r\n    toDateTime(timestamp) AS second\r\nFROM order_test AS i\r\nGROUP BY\r\n    color,\r\n    second\r\nORDER BY\r\n    color ASC,\r\n    second DESC\r\nLIMIT 500\r\n\r\n\u250c\u2500count()\u2500\u252c\u2500color\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500second\u2500\u2510\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:13 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:12 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:11 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:08 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:07 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:46:06 \u2502\r\n\u2502  250000 \u2502 blue  \u2502 2020-08-21 18:45:10 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:13 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:12 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:11 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:08 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:07 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:46:06 \u2502\r\n\u2502  250000 \u2502 green \u2502 2020-08-21 18:45:10 \u2502\r\n\u2502  250000 \u2502 red   \u2502 2020-08-21 18:46:13 \u2502\r\n\u2502  250000 \u2502 red   \u2502 2020-08-21 18:46:12 \u2502\r\n\u2502  250000 \u2502 red   \u2502 2020-08-21 18:46:11 \u2502\r\n\u2502  250000 \u2502 red   \u2502 2020-08-21 18:46:08 \u2502\r\n\u2502  250000 \u2502 red   \u2502 2020-08-21 18:46:07 \u2502\r\n\u2502  250000 \u2502 red   \u2502 2020-08-21 18:46:06 \u2502\r\n\u2502  250000 \u2502 red   \u2502 2020-08-21 18:45:10 \u2502\r\n\u2502  250000 \u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 2020-08-21 18:46:13 \u2502\r\n\u2502  250000 \u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 2020-08-21 18:46:12 \u2502\r\n\u2502  250000 \u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 2020-08-21 18:46:11 \u2502\r\n\u2502  250000 \u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 2020-08-21 18:46:08 \u2502\r\n\u2502  250000 \u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 2020-08-21 18:46:07 \u2502\r\n\u2502  250000 \u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 2020-08-21 18:46:06 \u2502\r\n\u2502  250000 \u2502 \u1d3a\u1d41\u1d38\u1d38  \u2502 2020-08-21 18:45:10 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\n\r\nminimal example\r\n```\r\n$ cat order_test1.sql\r\ndrop  table if exists order_test1;\r\n\r\ncreate table order_test1\r\n(\r\n    timestamp DateTime64(3),\r\n    color     LowCardinality(String)\r\n) engine = MergeTree() ORDER BY tuple();\r\n\r\ninsert into order_test1 values ('2020-08-21 18:46:08.000','red')('2020-08-21 18:46:08.000','green');\r\ninsert into order_test1 values ('2020-08-21 18:46:07.000','red')('2020-08-21 18:46:07.000','green');\r\ninsert into order_test1 values ('2020-08-21 18:46:06.000','red')('2020-08-21 18:46:06.000','green');\r\n\r\nSELECT\r\n    color, toDateTime(timestamp) AS second\r\nFROM order_test1\r\nGROUP BY color, second\r\nORDER BY color ASC, second DESC;\r\n\r\nselect '';\r\nselect '';\r\n\r\nSELECT  color, timestamp\r\nFROM order_test1\r\nGROUP BY color, timestamp\r\nORDER BY color ASC, timestamp DESC;\r\n\r\nselect '';\r\nselect '------cast to String----';\r\nselect '';\r\nSELECT cast(color,'String') color, toDateTime(timestamp) AS second\r\nFROM order_test1\r\nGROUP BY color, second\r\nORDER BY color ASC, second DESC;\r\n\r\nselect '';\r\nselect '';\r\n\r\nSELECT cast(color,'String') color, timestamp\r\nFROM order_test1\r\nGROUP BY color, timestamp\r\nORDER BY color ASC, timestamp DESC;\r\n\r\n$ cat order_test1.sql|clickhouse-client -mn\r\ngreen\t2020-08-21 18:46:07\r\ngreen\t2020-08-21 18:46:06\r\ngreen\t2020-08-21 18:46:08\r\nred\t2020-08-21 18:46:07\r\nred\t2020-08-21 18:46:08\r\nred\t2020-08-21 18:46:06\r\n\r\n\r\ngreen\t2020-08-21 18:46:08.000\r\ngreen\t2020-08-21 18:46:07.000\r\nred\t2020-08-21 18:46:08.000\r\ngreen\t2020-08-21 18:46:06.000\r\nred\t2020-08-21 18:46:07.000\r\nred\t2020-08-21 18:46:06.000\r\n\r\n------cast to String----\r\n\r\ngreen\t2020-08-21 18:46:08\r\ngreen\t2020-08-21 18:46:07\r\ngreen\t2020-08-21 18:46:06\r\nred\t2020-08-21 18:46:08\r\nred\t2020-08-21 18:46:07\r\nred\t2020-08-21 18:46:06\r\n\r\n\r\ngreen\t2020-08-21 18:46:08.000\r\ngreen\t2020-08-21 18:46:07.000\r\ngreen\t2020-08-21 18:46:06.000\r\nred\t2020-08-21 18:46:08.000\r\nred\t2020-08-21 18:46:07.000\r\nred\t2020-08-21 18:46:06.000\r\n```",
  "created_at": "2020-08-28T15:17:35Z",
  "modified_files": [
    "src/Columns/ColumnLowCardinality.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01456_low_cardinality_sorting_bugfix.reference",
    "b/tests/queries/0_stateless/01456_low_cardinality_sorting_bugfix.sql"
  ]
}