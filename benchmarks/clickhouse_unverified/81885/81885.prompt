You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Kusto format null pointer dereference on export
### Describe the bug

There are still issues with kusto format.

### How to reproduce

Run Fiddle: https://fiddle.clickhouse.com/daf5c0f9-7adb-4b69-8684-6fe0873d60a9

### Error message and/or stacktrace

Stack trace:

```
#0  DB::SerializationWrapper::serializeBinary (this=<optimized out>, column=..., row_num=0, ostr=..., settings=...) at src/DataTypes/Serializations/SerializationWrapper.cpp:83
#1  0x000055556b657424 in DB::SerializationInterval::serializeBinary (this=0x0, column=..., row=0, ostr=..., settings=...)
    at src/DataTypes/Serializations/SerializationInterval.cpp:120
#2  0x000055556e5b9ddc in DB::IRowOutputFormat::write (this=0x7ffd02b19018, columns=..., row_num=0) at src/Processors/Formats/IRowOutputFormat.cpp:78
#3  0x000055556e5b9b0c in DB::IRowOutputFormat::consume (this=0x7ffd02b19018, chunk=...) at src/Processors/Formats/IRowOutputFormat.cpp:31
#4  0x000055556e720764 in DB::ParallelFormattingOutputFormat::formatterThreadFunction (this=0x7ffd02fc7018, current_unit_number=<optimized out>, first_row_num=<optimized out>, thread_group=...)
    at src/Processors/Formats/Impl/ParallelFormattingOutputFormat.cpp:228
#5  0x0000555567465213 in std::__1::__function::__policy_func<void ()>::operator()[abi:se190107]() const (this=0x7ffcfa7f19d0)
    at contrib/llvm-project/libcxx/include/__functional/function.h:716
#6  std::__1::function<void()>::operator() (this=0x7ffcfa7f19d0) at contrib/llvm-project/libcxx/include/__functional/function.h:989
#7  ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::worker (this=0x7ffd1aabffe0) at src/Common/ThreadPool.cpp:799
#8  0x000055556746b33e in std::__1::__invoke[abi:se190107]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*&, , void>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*&) (__f=<optimized out>, __a0=<optimized out>)
    at contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117
#9  std::__1::__apply_tuple_impl[abi:se190107]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*>&, 0ul>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*>&, std::__1::__tuple_indices<0ul>) (
    __f=<optimized out>, __t=...) at contrib/llvm-project/libcxx/include/tuple:1354
#10 std::__1::apply[abi:se190107]<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*>&>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*&)(), std::__1::tuple<ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*>&) (__f=<optimized out>, __t=...)
    at contrib/llvm-project/libcxx/include/tuple:1358
#11 ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*>(void (ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true> >::ThreadFromThreadPool*&&)::{lambda()#1}::operator()() (this=0x7ffd1aab2d40)
    at src/Common/ThreadPool.h:312
#12 0x0000555567462826 in std::__1::__function::__policy_func<void ()>::operator()[abi:se190107]() const (this=0x7ffcfa7f2000)
    at contrib/llvm-project/libcxx/include/__functional/function.h:716
#13 std::__1::function<void()>::operator() (this=0x7ffcfa7f2000) at contrib/llvm-project/libcxx/include/__functional/function.h:989
#14 ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::worker (this=0x7ffd1aa9d900) at src/Common/ThreadPool.cpp:809
#15 0x0000555567468e00 in std::__1::__invoke[abi:se190107]<void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*, , void>(void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*&&) (__f=<optimized out>, __a0=<optimized out>)
    at contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117
#16 std::__1::__thread_execute[abi:se190107]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*, 2ul>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*>&, std::__1::__tuple_indices<2ul>) (__t=...) at contrib/llvm-project/libcxx/include/__thread/thread.h:192
#17 std::__1::__thread_proxy[abi:se190107]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::__1::thread>::ThreadFromThreadPool*> >(void*) (__vp=<optimized out>) at contrib/llvm-project/libcxx/include/__thread/thread.h:201
#18 0x00007ffff7ca2ef1 in start_thread (arg=<optimized out>) at ./nptl/pthread_create.c:448
#19 0x00007ffff7d3445c in __GI___clone3 () at ../sysdeps/unix/sysv/linux/x86_64/clone3.S:78
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
