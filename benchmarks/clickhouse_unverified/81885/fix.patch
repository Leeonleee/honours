diff --git a/src/DataTypes/Serializations/SerializationBool.h b/src/DataTypes/Serializations/SerializationBool.h
index deab26304e4b..a0bd1e6cc3f6 100644
--- a/src/DataTypes/Serializations/SerializationBool.h
+++ b/src/DataTypes/Serializations/SerializationBool.h
@@ -33,9 +33,9 @@ class SerializationBool final : public SerializationWrapper
     void deserializeTextRaw(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;
     bool tryDeserializeTextRaw(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;
 
-    void serializeTextQuoted(const IColumn & column, size_t row_num, WriteBuffer & ostr, const FormatSettings &) const  override;
-    void deserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const  override;
-    bool tryDeserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const  override;
+    void serializeTextQuoted(const IColumn & column, size_t row_num, WriteBuffer & ostr, const FormatSettings &) const override;
+    void deserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const override;
+    bool tryDeserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const override;
 
     void deserializeWholeText(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;
     bool tryDeserializeWholeText(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;
diff --git a/src/DataTypes/Serializations/SerializationCustomSimpleText.h b/src/DataTypes/Serializations/SerializationCustomSimpleText.h
index f7aea8697ff6..c95c00f899a4 100644
--- a/src/DataTypes/Serializations/SerializationCustomSimpleText.h
+++ b/src/DataTypes/Serializations/SerializationCustomSimpleText.h
@@ -11,10 +11,12 @@ struct FormatSettings;
 class IColumn;
 
 /** Simple ISerialization that uses serializeText/deserializeText
- * for all serialization and deserialization. */
+  * for all serialization and deserialization.
+  */
 class SerializationCustomSimpleText : public SerializationWrapper
 {
 public:
+    SerializationCustomSimpleText() = delete;
     explicit SerializationCustomSimpleText(const SerializationPtr & nested_);
 
     // Methods that subclasses must override in order to get full serialization/deserialization support.
@@ -32,14 +34,14 @@ class SerializationCustomSimpleText : public SerializationWrapper
     /** Text serialization with escaping but without quoting.
       */
     void serializeTextEscaped(const IColumn & column, size_t row_num, WriteBuffer & ostr, const FormatSettings &) const override;
-    void deserializeTextEscaped(IColumn & column, ReadBuffer & istr, const FormatSettings &) const  override;
-    bool tryDeserializeTextEscaped(IColumn & column, ReadBuffer & istr, const FormatSettings &) const  override;
+    void deserializeTextEscaped(IColumn & column, ReadBuffer & istr, const FormatSettings &) const override;
+    bool tryDeserializeTextEscaped(IColumn & column, ReadBuffer & istr, const FormatSettings &) const override;
 
     /** Text serialization as a literal that may be inserted into a query.
       */
-    void serializeTextQuoted(const IColumn & column, size_t row_num, WriteBuffer & ostr, const FormatSettings &) const  override;
-    void deserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const  override;
-    bool tryDeserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const  override;
+    void serializeTextQuoted(const IColumn & column, size_t row_num, WriteBuffer & ostr, const FormatSettings &) const override;
+    void deserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const override;
+    bool tryDeserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings &) const override;
 
     /** Text serialization for the CSV format.
       */
diff --git a/src/DataTypes/Serializations/SerializationInterval.cpp b/src/DataTypes/Serializations/SerializationInterval.cpp
index 6c723d375c85..048dfce7b00d 100644
--- a/src/DataTypes/Serializations/SerializationInterval.cpp
+++ b/src/DataTypes/Serializations/SerializationInterval.cpp
@@ -1,4 +1,4 @@
-#include "SerializationInterval.h"
+#include <DataTypes/Serializations/SerializationInterval.h>
 
 #include <Columns/ColumnsNumber.h>
 #include <IO/WriteBuffer.h>
@@ -8,208 +8,97 @@
 
 namespace DB
 {
+
 using ColumnInterval = DataTypeInterval::ColumnType;
 
 namespace ErrorCodes
 {
     extern const int ILLEGAL_COLUMN;
-    extern const int NOT_IMPLEMENTED;
     extern const int BAD_ARGUMENTS;
 }
 
-SerializationInterval::SerializationInterval(IntervalKind interval_kind_) : interval_kind(std::move(interval_kind_))
-{
-}
-
-void SerializationInterval::deserializeBinary(Field & field, ReadBuffer & istr, const FormatSettings & settings) const
-{
-    dispatch(
-        static_cast<void (ISerialization::*)(Field &, ReadBuffer &, const FormatSettings &) const>(&ISerialization::deserializeBinary),
-        settings.interval.output_format,
-        field,
-        istr,
-        settings);
-}
-
-void SerializationInterval::deserializeBinary(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const
-{
-    dispatch(
-        static_cast<void (ISerialization::*)(IColumn &, ReadBuffer &, const FormatSettings &) const>(&ISerialization::deserializeBinary),
-        settings.interval.output_format,
-        column,
-        istr,
-        settings);
-}
-
-void SerializationInterval::deserializeBinaryBulk(IColumn & column, ReadBuffer & istr, size_t rows_offset, size_t limit, double avg_value_size_hint) const
+namespace
 {
-    dispatch(
-        &ISerialization::deserializeBinaryBulk, FormatSettings::IntervalOutputFormat::Numeric, column, istr, rows_offset, limit, avg_value_size_hint);
-}
-
-void SerializationInterval::deserializeBinaryBulkStatePrefix(
-    DeserializeBinaryBulkSettings & settings, DeserializeBinaryBulkStatePtr & state, SubstreamsDeserializeStatesCache * cache) const
-{
-    dispatch(&ISerialization::deserializeBinaryBulkStatePrefix, FormatSettings::IntervalOutputFormat::Numeric, settings, state, cache);
-}
-
 
-void SerializationInterval::deserializeBinaryBulkWithMultipleStreams(
-    ColumnPtr & column,
-    size_t rows_offset,
-    size_t limit,
-    DeserializeBinaryBulkSettings & settings,
-    DeserializeBinaryBulkStatePtr & state,
-    SubstreamsCache * cache) const
+/// Trash for Kusto dialect:
+void serializeTextKusto(IntervalKind interval_kind, const IColumn & column, const size_t row, WriteBuffer & ostr, const FormatSettings &)
 {
-    dispatch(
-        &ISerialization::deserializeBinaryBulkWithMultipleStreams,
-        FormatSettings::IntervalOutputFormat::Numeric,
-        column,
-        rows_offset,
-        limit,
-        settings,
-        state,
-        cache);
-}
-
-
-void SerializationInterval::deserializeTextCSV(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const
-{
-    dispatch(&ISerialization::deserializeTextCSV, settings.interval.output_format, column, istr, settings);
-}
-
-void SerializationInterval::deserializeTextEscaped(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const
-{
-    dispatch(&ISerialization::deserializeTextEscaped, settings.interval.output_format, column, istr, settings);
-}
-
-void SerializationInterval::deserializeTextJSON(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const
-{
-    dispatch(&ISerialization::deserializeTextJSON, settings.interval.output_format, column, istr, settings);
-}
-
-void SerializationInterval::deserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const
-{
-    dispatch(&ISerialization::deserializeTextQuoted, settings.interval.output_format, column, istr, settings);
-}
-
-void SerializationInterval::deserializeTextRaw(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const
-{
-    dispatch(&ISerialization::deserializeTextRaw, settings.interval.output_format, column, istr, settings);
-}
-
-
-void SerializationInterval::deserializeWholeText(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const
-{
-    dispatch(&ISerialization::deserializeWholeText, settings.interval.output_format, column, istr, settings);
-}
-
-void SerializationInterval::serializeBinary(const Field & field, WriteBuffer & ostr, const FormatSettings & settings) const
-{
-    dispatch(
-        static_cast<void (ISerialization::*)(const Field &, WriteBuffer &, const FormatSettings &) const>(&ISerialization::serializeBinary),
-        settings.interval.output_format,
-        field,
-        ostr,
-        settings);
-}
-
-void SerializationInterval::serializeBinary(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const
-{
-    dispatch(
-        static_cast<void (ISerialization::*)(const IColumn &, size_t, WriteBuffer &, const FormatSettings &) const>(
-            &ISerialization::serializeBinary),
-        settings.interval.output_format,
-        column,
-        row,
-        ostr,
-        settings);
-}
+    const auto * interval_column = checkAndGetColumn<ColumnInterval>(&column);
+    if (!interval_column)
+        throw Exception(ErrorCodes::ILLEGAL_COLUMN, "Expected column of underlying type of Interval");
 
-void SerializationInterval::serializeBinaryBulk(const IColumn & column, WriteBuffer & ostr, size_t offset, size_t limit) const
-{
-    dispatch(&ISerialization::serializeBinaryBulk, FormatSettings::IntervalOutputFormat::Numeric, column, ostr, offset, limit);
+    Int64 value = interval_column->getData()[row];
+    Int64 ticks = 0;
+    if (common::mulOverflow(interval_kind.toAvgNanoseconds(), value, ticks))
+        throw Exception(ErrorCodes::BAD_ARGUMENTS, "Formatting an interval in Kusto dialect will overflow");
+    ticks = ticks / 100;
+    std::string interval_as_string = formatKQLTimespan(ticks);
+    ostr.write(interval_as_string.c_str(), interval_as_string.length());
 }
 
-void SerializationInterval::serializeBinaryBulkStatePrefix(
-    const IColumn & column, SerializeBinaryBulkSettings & settings, SerializeBinaryBulkStatePtr & state) const
-{
-    dispatch(&ISerialization::serializeBinaryBulkStatePrefix, FormatSettings::IntervalOutputFormat::Numeric, column, settings, state);
 }
 
-void SerializationInterval::serializeBinaryBulkStateSuffix(
-    SerializeBinaryBulkSettings & settings, SerializeBinaryBulkStatePtr & state) const
+SerializationInterval::SerializationInterval(IntervalKind interval_kind_) : interval_kind(std::move(interval_kind_))
 {
-    dispatch(&ISerialization::serializeBinaryBulkStateSuffix, FormatSettings::IntervalOutputFormat::Numeric, settings, state);
 }
 
-void SerializationInterval::serializeBinaryBulkWithMultipleStreams(
-    const IColumn & column, size_t offset, size_t limit, SerializeBinaryBulkSettings & settings, SerializeBinaryBulkStatePtr & state) const
-{
-    dispatch(
-        &ISerialization::serializeBinaryBulkWithMultipleStreams,
-        FormatSettings::IntervalOutputFormat::Numeric,
-        column,
-        offset,
-        limit,
-        settings,
-        state);
-}
 
 void SerializationInterval::serializeText(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const
 {
-    dispatch(&ISerialization::serializeText, settings.interval.output_format, column, row, ostr, settings);
-}
-
-void SerializationInterval::serializeTextCSV(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const
-{
-    dispatch(&ISerialization::serializeTextCSV, settings.interval.output_format, column, row, ostr, settings);
-}
-
-void SerializationInterval::serializeTextEscaped(
-    const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const
-{
-    dispatch(&ISerialization::serializeTextEscaped, settings.interval.output_format, column, row, ostr, settings);
+    switch (settings.interval_output_format)
+    {
+        case FormatSettings::IntervalOutputFormat::Numeric:
+            Base::serializeText(column, row, ostr, settings);
+            return;
+        case FormatSettings::IntervalOutputFormat::Kusto:
+            serializeTextKusto(interval_kind, column, row, ostr, settings);
+            return;
+    }
 }
 
 void SerializationInterval::serializeTextJSON(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const
 {
-    dispatch(&ISerialization::serializeTextJSON, settings.interval.output_format, column, row, ostr, settings);
+    switch (settings.interval_output_format)
+    {
+        case FormatSettings::IntervalOutputFormat::Numeric:
+            Base::serializeTextJSON(column, row, ostr, settings);
+            return;
+        case FormatSettings::IntervalOutputFormat::Kusto:
+            ostr.write('"');
+            serializeTextKusto(interval_kind, column, row, ostr, settings);
+            ostr.write('"');
+            return;
+    }
 }
 
-void SerializationInterval::serializeTextQuoted(
-    const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const
-{
-    dispatch(&ISerialization::serializeTextQuoted, settings.interval.output_format, column, row, ostr, settings);
-}
-
-void SerializationInterval::serializeTextRaw(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const
-{
-    dispatch(&ISerialization::serializeTextRaw, settings.interval.output_format, column, row, ostr, settings);
-}
-
-/// Everything below is trash for the Kusto dialect:
-
-void SerializationKustoInterval::serializeText(
-    const IColumn & column, const size_t row, WriteBuffer & ostr, const FormatSettings &) const
-{
-    const auto * interval_column = checkAndGetColumn<ColumnInterval>(&column);
-    if (!interval_column)
-        throw Exception(ErrorCodes::ILLEGAL_COLUMN, "Expected column of underlying type of Interval");
-
-    Int64 value = interval_column->getData()[row];
-    Int64 ticks = 0;
-    if (common::mulOverflow(kind.toAvgNanoseconds(), value, ticks))
-        throw Exception(ErrorCodes::BAD_ARGUMENTS, "Formatting an interval in Kusto dialect will overflow");
-    ticks = ticks / 100;
-    std::string interval_as_string = formatKQLTimespan(ticks);
-    ostr.write(interval_as_string.c_str(), interval_as_string.length());
-}
-
-void SerializationKustoInterval::deserializeText(IColumn &, ReadBuffer &, const FormatSettings &, const bool) const
+void SerializationInterval::serializeTextCSV(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const
 {
-    throw Exception(ErrorCodes::NOT_IMPLEMENTED, "Deserialization in the Kusto dialect is not implemented");
+    switch (settings.interval_output_format)
+    {
+        case FormatSettings::IntervalOutputFormat::Numeric:
+            Base::serializeTextCSV(column, row, ostr, settings);
+            return;
+        case FormatSettings::IntervalOutputFormat::Kusto:
+            ostr.write('"');
+            serializeTextKusto(interval_kind, column, row, ostr, settings);
+            ostr.write('"');
+            return;
+    }
+}
+
+void SerializationInterval::serializeTextQuoted(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const
+{
+    switch (settings.interval_output_format)
+    {
+        case FormatSettings::IntervalOutputFormat::Numeric:
+            Base::serializeTextQuoted(column, row, ostr, settings);
+            return;
+        case FormatSettings::IntervalOutputFormat::Kusto:
+            ostr.write('\'');
+            serializeTextKusto(interval_kind, column, row, ostr, settings);
+            ostr.write('\'');
+            return;
+    }
 }
 
 }
diff --git a/src/DataTypes/Serializations/SerializationInterval.h b/src/DataTypes/Serializations/SerializationInterval.h
index 07223162e90b..3a6ee571164e 100644
--- a/src/DataTypes/Serializations/SerializationInterval.h
+++ b/src/DataTypes/Serializations/SerializationInterval.h
@@ -1,94 +1,26 @@
 #pragma once
 
-#include "ISerialization.h"
-#include "SerializationCustomSimpleText.h"
+#include <DataTypes/Serializations/ISerialization.h>
 
 #include <DataTypes/DataTypeInterval.h>
 #include <Formats/FormatSettings.h>
 #include <Common/IntervalKind.h>
 
-namespace DB
-{
-namespace ErrorCodes
-{
-    extern const int NOT_IMPLEMENTED;
-}
 
-class SerializationKustoInterval : public SerializationCustomSimpleText
+namespace DB
 {
-public:
-    explicit SerializationKustoInterval(IntervalKind kind_) : SerializationCustomSimpleText(nullptr), kind(kind_) { }
-
-    void serializeText(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;
-    void deserializeText(IColumn & column, ReadBuffer & istr, const FormatSettings & settings, bool whole) const override;
-
-private:
-    IntervalKind kind;
-};
 
-class SerializationInterval : public ISerialization
+class SerializationInterval : public SerializationNumber<typename DataTypeInterval::FieldType>
 {
 public:
     explicit SerializationInterval(IntervalKind kind_);
-
-    void deserializeBinary(Field & field, ReadBuffer & istr, const FormatSettings & settings) const override;
-    void deserializeBinary(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;
-    void deserializeBinaryBulk(IColumn & column, ReadBuffer & istr, size_t rows_offset, size_t limit, double avg_value_size_hint) const override;
-    void deserializeBinaryBulkStatePrefix(
-        DeserializeBinaryBulkSettings & settings,
-        DeserializeBinaryBulkStatePtr & state,
-        SubstreamsDeserializeStatesCache * cache) const override;
-    void deserializeBinaryBulkWithMultipleStreams(
-        ColumnPtr & column,
-        size_t rows_offset,
-        size_t limit,
-        DeserializeBinaryBulkSettings & settings,
-        DeserializeBinaryBulkStatePtr & state,
-        SubstreamsCache * cache) const override;
-    void deserializeTextCSV(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;
-    void deserializeTextEscaped(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;
-    void deserializeTextJSON(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;
-    void deserializeTextQuoted(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;
-    void deserializeTextRaw(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;
-    void deserializeWholeText(IColumn & column, ReadBuffer & istr, const FormatSettings & settings) const override;
-
-    void serializeBinary(const Field & field, WriteBuffer & ostr, const FormatSettings & settings) const override;
-    void serializeBinary(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;
-    void serializeBinaryBulk(const IColumn & column, WriteBuffer & ostr, size_t offset, size_t limit) const override;
-    void serializeBinaryBulkStatePrefix(
-        const IColumn & column, SerializeBinaryBulkSettings & settings, SerializeBinaryBulkStatePtr & state) const override;
-    void serializeBinaryBulkStateSuffix(SerializeBinaryBulkSettings & settings, SerializeBinaryBulkStatePtr & state) const override;
-    void serializeBinaryBulkWithMultipleStreams(
-        const IColumn & column,
-        size_t offset,
-        size_t limit,
-        SerializeBinaryBulkSettings & settings,
-        SerializeBinaryBulkStatePtr & state) const override;
     void serializeText(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;
-    void serializeTextCSV(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;
-    void serializeTextEscaped(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;
     void serializeTextJSON(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;
+    void serializeTextCSV(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;
     void serializeTextQuoted(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;
-    void serializeTextRaw(const IColumn & column, size_t row, WriteBuffer & ostr, const FormatSettings & settings) const override;
-
 private:
-    template <typename... Args, std::invocable<const ISerialization *, Args...> Method>
-    void dispatch(const Method method, const FormatSettings::IntervalOutputFormat format, Args &&... args) const
-    {
-        const ISerialization * serialization = nullptr;
-        if (format == FormatSettings::IntervalOutputFormat::Kusto)
-            serialization = &serialization_kusto;
-        else if (format == FormatSettings::IntervalOutputFormat::Numeric)
-            serialization = &serialization_numeric;
-
-        if (!serialization)
-            throw Exception(ErrorCodes::NOT_IMPLEMENTED, "Option {} is not implemented", magic_enum::enum_name(format));
-
-        (serialization->*method)(std::forward<Args>(args)...);
-    }
-
+    using Base = SerializationNumber<typename DataTypeInterval::FieldType>;
     IntervalKind interval_kind;
-    SerializationKustoInterval serialization_kusto{interval_kind};
-    SerializationNumber<typename DataTypeInterval::FieldType> serialization_numeric;
 };
+
 }
diff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp
index d587a5b6d6b1..41d944819fc2 100644
--- a/src/Formats/FormatFactory.cpp
+++ b/src/Formats/FormatFactory.cpp
@@ -143,7 +143,7 @@ FormatSettings getFormatSettings(const ContextPtr & context, const Settings & se
     format_settings.date_time_input_format = settings[Setting::date_time_input_format];
     format_settings.date_time_output_format = settings[Setting::date_time_output_format];
     format_settings.date_time_64_output_format_cut_trailing_zeros_align_to_groups_of_thousands = settings[Setting::date_time_64_output_format_cut_trailing_zeros_align_to_groups_of_thousands];
-    format_settings.interval.output_format = settings[Setting::interval_output_format];
+    format_settings.interval_output_format = settings[Setting::interval_output_format];
     format_settings.input_format_ipv4_default_on_conversion_error = settings[Setting::input_format_ipv4_default_on_conversion_error];
     format_settings.input_format_ipv6_default_on_conversion_error = settings[Setting::input_format_ipv6_default_on_conversion_error];
     format_settings.bool_true_representation = settings[Setting::bool_true_representation];
diff --git a/src/Formats/FormatSettings.h b/src/Formats/FormatSettings.h
index 8679d16d025d..060f0c768fd2 100644
--- a/src/Formats/FormatSettings.h
+++ b/src/Formats/FormatSettings.h
@@ -84,10 +84,7 @@ struct FormatSettings
         Numeric
     };
 
-    struct
-    {
-        IntervalOutputFormat output_format = IntervalOutputFormat::Numeric;
-    } interval{};
+    IntervalOutputFormat interval_output_format = IntervalOutputFormat::Numeric;
 
     enum class DateTimeOverflowBehavior : uint8_t
     {
diff --git a/src/Storages/MergeTree/MergeTreeData.h b/src/Storages/MergeTree/MergeTreeData.h
index b02a58a166a7..89d3507266e0 100644
--- a/src/Storages/MergeTree/MergeTreeData.h
+++ b/src/Storages/MergeTree/MergeTreeData.h
@@ -816,7 +816,7 @@ class MergeTreeData : public IStorage, public WithMutableContext
     /// Check if the ALTER can be performed:
     /// - all needed columns are present.
     /// - all type conversions can be done.
-    /// - columns corresponding to primary key, indices, sign, sampling expression and date are not affected.
+    /// - columns corresponding to primary key, indices, sign, sampling expression, summed columns, and date are not affected.
     /// If something is wrong, throws an exception.
     void checkAlterIsPossible(const AlterCommands & commands, ContextPtr context) const override;
 
