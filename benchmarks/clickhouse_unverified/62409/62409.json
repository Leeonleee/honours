{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 62409,
  "instance_id": "ClickHouse__ClickHouse-62409",
  "issue_numbers": [
    "62286"
  ],
  "base_commit": "c369d2171df2b4a27dd2adcfddd976129edc108f",
  "patch": "diff --git a/src/Analyzer/Utils.cpp b/src/Analyzer/Utils.cpp\nindex 8ccf95deadc7..2882c4e0c020 100644\n--- a/src/Analyzer/Utils.cpp\n+++ b/src/Analyzer/Utils.cpp\n@@ -760,4 +760,26 @@ QueryTreeNodePtr createCastFunction(QueryTreeNodePtr node, DataTypePtr result_ty\n     return function_node;\n }\n \n+QueryTreeNodePtr buildSubqueryToReadColumnsFromTableExpression(QueryTreeNodePtr table_node, const ContextPtr & context)\n+{\n+    const auto & storage_snapshot = table_node->as<TableNode>()->getStorageSnapshot();\n+    auto columns_to_select = storage_snapshot->getColumns(GetColumnsOptions(GetColumnsOptions::Ordinary));\n+    size_t columns_to_select_size = columns_to_select.size();\n+    auto column_nodes_to_select = std::make_shared<ListNode>();\n+    column_nodes_to_select->getNodes().reserve(columns_to_select_size);\n+    NamesAndTypes projection_columns;\n+    projection_columns.reserve(columns_to_select_size);\n+    for (auto & column : columns_to_select)\n+    {\n+        column_nodes_to_select->getNodes().emplace_back(std::make_shared<ColumnNode>(column, table_node));\n+        projection_columns.emplace_back(column.name, column.type);\n+    }\n+    auto subquery_for_table = std::make_shared<QueryNode>(Context::createCopy(context));\n+    subquery_for_table->setIsSubquery(true);\n+    subquery_for_table->getProjectionNode() = std::move(column_nodes_to_select);\n+    subquery_for_table->getJoinTree() = std::move(table_node);\n+    subquery_for_table->resolveProjectionColumns(std::move(projection_columns));\n+    return subquery_for_table;\n+}\n+\n }\ndiff --git a/src/Analyzer/Utils.h b/src/Analyzer/Utils.h\nindex 8e32ef0464c1..1b4a7d5ef3c9 100644\n--- a/src/Analyzer/Utils.h\n+++ b/src/Analyzer/Utils.h\n@@ -105,4 +105,7 @@ NameSet collectIdentifiersFullNames(const QueryTreeNodePtr & node);\n /// Wrap node into `_CAST` function\n QueryTreeNodePtr createCastFunction(QueryTreeNodePtr node, DataTypePtr result_type, ContextPtr context);\n \n+/// Build subquery which we execute for `IN table` function.\n+QueryTreeNodePtr buildSubqueryToReadColumnsFromTableExpression(QueryTreeNodePtr table_node, const ContextPtr & context);\n+\n }\ndiff --git a/src/Planner/CollectSets.cpp b/src/Planner/CollectSets.cpp\nindex e150b8a5956b..f00b1e6ab164 100644\n--- a/src/Planner/CollectSets.cpp\n+++ b/src/Planner/CollectSets.cpp\n@@ -89,27 +89,8 @@ class CollectSetsVisitor : public ConstInDepthQueryTreeVisitor<CollectSetsVisito\n                 return;\n \n             auto subquery_to_execute = in_second_argument;\n-            if (auto * table_node = in_second_argument->as<TableNode>())\n-            {\n-                auto storage_snapshot = table_node->getStorageSnapshot();\n-                auto columns_to_select = storage_snapshot->getColumns(GetColumnsOptions(GetColumnsOptions::Ordinary));\n-                size_t columns_to_select_size = columns_to_select.size();\n-                auto column_nodes_to_select = std::make_shared<ListNode>();\n-                column_nodes_to_select->getNodes().reserve(columns_to_select_size);\n-                NamesAndTypes projection_columns;\n-                projection_columns.reserve(columns_to_select_size);\n-                for (auto & column : columns_to_select)\n-                {\n-                    column_nodes_to_select->getNodes().emplace_back(std::make_shared<ColumnNode>(column, subquery_to_execute));\n-                    projection_columns.emplace_back(column.name, column.type);\n-                }\n-                auto subquery_for_table = std::make_shared<QueryNode>(Context::createCopy(planner_context.getQueryContext()));\n-                subquery_for_table->setIsSubquery(true);\n-                subquery_for_table->getProjectionNode() = std::move(column_nodes_to_select);\n-                subquery_for_table->getJoinTree() = std::move(subquery_to_execute);\n-                subquery_for_table->resolveProjectionColumns(std::move(projection_columns));\n-                subquery_to_execute = std::move(subquery_for_table);\n-            }\n+            if (in_second_argument->as<TableNode>())\n+                subquery_to_execute = buildSubqueryToReadColumnsFromTableExpression(std::move(subquery_to_execute), planner_context.getQueryContext());\n \n             sets.addFromSubquery(set_key, std::move(subquery_to_execute), settings);\n         }\ndiff --git a/src/Storages/buildQueryTreeForShard.cpp b/src/Storages/buildQueryTreeForShard.cpp\nindex 5284f52a7e42..5bbdbe487b00 100644\n--- a/src/Storages/buildQueryTreeForShard.cpp\n+++ b/src/Storages/buildQueryTreeForShard.cpp\n@@ -361,10 +361,14 @@ QueryTreeNodePtr buildQueryTreeForShard(const PlannerContextPtr & planner_contex\n         {\n             auto & in_function_subquery_node = in_function_node->getArguments().getNodes().at(1);\n             auto in_function_node_type = in_function_subquery_node->getNodeType();\n-            if (in_function_node_type != QueryTreeNodeType::QUERY && in_function_node_type != QueryTreeNodeType::UNION)\n+            if (in_function_node_type != QueryTreeNodeType::QUERY && in_function_node_type != QueryTreeNodeType::UNION && in_function_node_type != QueryTreeNodeType::TABLE)\n                 continue;\n \n-            auto temporary_table_expression_node = executeSubqueryNode(in_function_subquery_node,\n+            auto subquery_to_execute = in_function_subquery_node;\n+            if (subquery_to_execute->as<TableNode>())\n+                subquery_to_execute = buildSubqueryToReadColumnsFromTableExpression(std::move(subquery_to_execute), planner_context->getQueryContext());\n+\n+            auto temporary_table_expression_node = executeSubqueryNode(subquery_to_execute,\n                 planner_context->getMutableQueryContext(),\n                 global_in_or_join_node.subquery_depth);\n \n",
  "test_patch": "diff --git a/tests/integration/test_cluster_all_replicas/test.py b/tests/integration/test_cluster_all_replicas/test.py\nindex eb406de6a8d0..d8bad180e1b4 100644\n--- a/tests/integration/test_cluster_all_replicas/test.py\n+++ b/tests/integration/test_cluster_all_replicas/test.py\n@@ -42,6 +42,17 @@ def test_cluster(start_cluster):\n     )\n \n \n+def test_global_in(start_cluster):\n+    node1.query(\"DROP TABLE IF EXISTS u;\")\n+    node1.query(\"CREATE TABLE u(uid Int16) ENGINE=Memory as select 0\")\n+\n+    assert set(\n+        node1.query(\n+            \"\"\"SELECT hostName(), * FROM clusterAllReplicas(\"one_shard_two_nodes\", system.one) where dummy GLOBAL IN u\"\"\"\n+        ).splitlines()\n+    ) == {\"node1\\t0\", \"node2\\t0\"}\n+\n+\n @pytest.mark.parametrize(\n     \"cluster\",\n     [\n",
  "problem_statement": "new analyzer: global in TABLE does not work in distributed queries\nI cannot reproduce it with fiddle https://fiddle.clickhouse.com/5de17519-8a1b-4cfc-8e5d-2e76cd7b94cf\r\n\r\nIt's reproducible only with 2 real shards:\r\n\r\n```sql\r\ndrop table if exists u;\r\ndrop table if exists ff1 on cluster cluster2shards;\r\ndrop table if exists d on cluster cluster2shards;\r\n\r\nCREATE TABLE ff1 on cluster cluster2shards (uid Int16) ENGINE = MergeTree order by tuple() as select 1;\r\n\r\ncreate table d on cluster cluster2shards as ff1 Engine=Distributed(cluster2shards, 'default', 'ff1');\r\n\r\nCREATE TABLE u(uid Int16) ENGINE=Memory as select 1;\r\n\r\nselect * from d where uid GLOBAL IN (select * from u);\r\n   \u250c\u2500uid\u2500\u2510\r\n1. \u2502   1 \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2518\r\n   \u250c\u2500uid\u2500\u2510\r\n2. \u2502   1 \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nselect * from d where uid GLOBAL IN u settings allow_experimental_analyzer=0;\r\n   \u250c\u2500uid\u2500\u2510\r\n1. \u2502   1 \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2518\r\n   \u250c\u2500uid\u2500\u2510\r\n2. \u2502   1 \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nselect * from d where uid GLOBAL IN u settings allow_experimental_analyzer=1;\r\n   \u250c\u2500uid\u2500\u2510\r\n1. \u2502   1 \u2502\r\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u2199 Progress: 0.00 rows, 0.00 B (0.00 rows/s., 0.00 B/s.)\r\n1 row in set. Elapsed: 0.005 sec.\r\n\r\nReceived exception from server (version 24.3.2):\r\nCode: 47. DB::Exception: Received from localhost:9000. DB::Exception: Received from host2:9000. DB::Exception: \r\nUnknown expression or table expression identifier 'default.u' in scope SELECT __table1.uid AS uid \r\nFROM default.ff1 AS __table1 WHERE __table1.uid GLOBAL IN (default.u AS __table2). (UNKNOWN_IDENTIFIER)\r\n```\n",
  "hints_text": "",
  "created_at": "2024-04-08T14:53:58Z",
  "modified_files": [
    "src/Analyzer/Utils.cpp",
    "src/Analyzer/Utils.h",
    "src/Planner/CollectSets.cpp",
    "src/Storages/buildQueryTreeForShard.cpp"
  ],
  "modified_test_files": [
    "tests/integration/test_cluster_all_replicas/test.py"
  ]
}