diff --git a/tests/queries/0_stateless/02475_precise_decimal_arithmetics.reference b/tests/queries/0_stateless/02475_precise_decimal_arithmetics.reference
new file mode 100644
index 000000000000..6ffc86026401
--- /dev/null
+++ b/tests/queries/0_stateless/02475_precise_decimal_arithmetics.reference
@@ -0,0 +1,23 @@
+0
+0
+0
+9999999999999999550522436926092261716351992671467843175339166479588690755584
+9999999999999999451597035424131548206707486713696660676795842648250000000000
+11.126038
+10.8
+-11.126038
+-10.8
+10.8
+1376.638914
+1403.6
+-1376.638914
+-1403.6
+1403.6
+332833500
+999
+1000
+1000
+1000
+0.1
+0.1
+0.1
diff --git a/tests/queries/0_stateless/02475_precise_decimal_arithmetics.sql b/tests/queries/0_stateless/02475_precise_decimal_arithmetics.sql
new file mode 100644
index 000000000000..3bd7906c7d86
--- /dev/null
+++ b/tests/queries/0_stateless/02475_precise_decimal_arithmetics.sql
@@ -0,0 +1,45 @@
+-- Tags: no-fasttest
+
+-- check cases when one of operands is zero
+SELECT divideDecimal(toDecimal32(0, 2), toDecimal128(11.123456, 6));
+SELECT divideDecimal(toDecimal64(123.123, 3), toDecimal64(0, 1)); -- { serverError 153 }
+SELECT multiplyDecimal(toDecimal32(0, 2), toDecimal128(11.123456, 6));
+SELECT multiplyDecimal(toDecimal32(123.123, 3), toDecimal128(0, 1));
+
+-- don't look at strange query result -- it happens due to bad float precision: toUInt256(1e38) == 99999999999999997752612184630461283328
+SELECT multiplyDecimal(toDecimal256(1e38, 0), toDecimal256(1e38, 0));
+SELECT divideDecimal(toDecimal256(1e66, 0), toDecimal256(1e-10, 10), 0);
+
+-- fits Decimal256, but scale is too big to fit
+SELECT multiplyDecimal(toDecimal256(1e38, 0), toDecimal256(1e38, 0), 2); -- { serverError 407 }
+SELECT divideDecimal(toDecimal256(1e72, 0), toDecimal256(1e-5, 5), 2); -- { serverError 407 }
+
+-- does not fit Decimal256
+SELECT multiplyDecimal(toDecimal256('1e38', 0), toDecimal256('1e38', 0)); -- { serverError 407 }
+SELECT multiplyDecimal(toDecimal256(1e39, 0), toDecimal256(1e39, 0), 0); -- { serverError 407 }
+SELECT divideDecimal(toDecimal256(1e39, 0), toDecimal256(1e-38, 39)); -- { serverError 407 }
+
+-- test different signs
+SELECT divideDecimal(toDecimal128(123.76, 2), toDecimal128(11.123456, 6));
+SELECT divideDecimal(toDecimal32(123.123, 3), toDecimal128(11.4, 1), 2);
+SELECT divideDecimal(toDecimal128(-123.76, 2), toDecimal128(11.123456, 6));
+SELECT divideDecimal(toDecimal32(123.123, 3), toDecimal128(-11.4, 1), 2);
+SELECT divideDecimal(toDecimal32(-123.123, 3), toDecimal128(-11.4, 1), 2);
+
+SELECT multiplyDecimal(toDecimal64(123.76, 2), toDecimal128(11.123456, 6));
+SELECT multiplyDecimal(toDecimal32(123.123, 3), toDecimal128(11.4, 1), 2);
+SELECT multiplyDecimal(toDecimal64(-123.76, 2), toDecimal128(11.123456, 6));
+SELECT multiplyDecimal(toDecimal32(123.123, 3), toDecimal128(-11.4, 1), 2);
+SELECT multiplyDecimal(toDecimal32(-123.123, 3), toDecimal128(-11.4, 1), 2);
+
+-- check against non-const columns
+SELECT sum(multiplyDecimal(toDecimal64(number, 1), toDecimal64(number, 5))) FROM numbers(1000);
+SELECT sum(divideDecimal(toDecimal64(number, 1), toDecimal64(number, 5))) FROM (select * from numbers(1000) OFFSET 1);
+
+-- check against Nullable type
+SELECT multiplyDecimal(toNullable(toDecimal64(10, 1)), toDecimal64(100, 5));
+SELECT multiplyDecimal(toDecimal64(10, 1), toNullable(toDecimal64(100, 5)));
+SELECT multiplyDecimal(toNullable(toDecimal64(10, 1)), toNullable(toDecimal64(100, 5)));
+SELECT divideDecimal(toNullable(toDecimal64(10, 1)), toDecimal64(100, 5));
+SELECT divideDecimal(toDecimal64(10, 1), toNullable(toDecimal64(100, 5)));
+SELECT divideDecimal(toNullable(toDecimal64(10, 1)), toNullable(toDecimal64(100, 5)));
