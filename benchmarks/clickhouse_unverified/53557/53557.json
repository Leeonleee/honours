{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 53557,
  "instance_id": "ClickHouse__ClickHouse-53557",
  "issue_numbers": [
    "52755",
    "52895"
  ],
  "base_commit": "e67c002cb026a6f9f8f4ff04833282693efcbe65",
  "patch": "diff --git a/docs/en/sql-reference/functions/array-functions.md b/docs/en/sql-reference/functions/array-functions.md\nindex f66994ed5a63..dae8ff6d3964 100644\n--- a/docs/en/sql-reference/functions/array-functions.md\n+++ b/docs/en/sql-reference/functions/array-functions.md\n@@ -1794,6 +1794,330 @@ Return value type is always [Float64](../../sql-reference/data-types/float.md).\n \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n+## arrayRotateLeft\n+\n+Rotates an [array](../../sql-reference/data-types/array.md) to the left by the specified number of elements.\n+If the number of elements is negative, the array is rotated to the right.\n+\n+**Syntax**\n+\n+``` sql\n+arrayRotateLeft(arr, n)\n+```\n+\n+**Arguments**\n+\n+- `arr` \u2014 [Array](../../sql-reference/data-types/array.md).\n+- `n` \u2014 Number of elements to rotate.\n+\n+**Returned value**\n+\n+- An array rotated to the left by the specified number of elements.\n+\n+Type: [Array](../../sql-reference/data-types/array.md).\n+\n+**Examples**\n+\n+Query:\n+\n+``` sql\n+SELECT arrayRotateLeft([1,2,3,4,5,6], 2) as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [3,4,5,6,1,2] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Query:\n+\n+``` sql\n+SELECT arrayRotateLeft([1,2,3,4,5,6], -2) as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [5,6,1,2,3,4] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Query:\n+\n+``` sql\n+SELECT arrayRotateLeft(['a','b','c','d','e'], 3) as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 ['d','e','a','b','c'] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+## arrayRotateRight\n+\n+Rotates an [array](../../sql-reference/data-types/array.md) to the right by the specified number of elements.\n+If the number of elements is negative, the array is rotated to the left.\n+\n+**Syntax**\n+\n+``` sql\n+arrayRotateRight(arr, n)\n+```\n+\n+**Arguments**\n+\n+- `arr` \u2014 [Array](../../sql-reference/data-types/array.md).\n+- `n` \u2014 Number of elements to rotate.\n+\n+**Returned value**\n+\n+- An array rotated to the right by the specified number of elements.\n+\n+Type: [Array](../../sql-reference/data-types/array.md).\n+\n+**Examples**\n+\n+Query:\n+\n+``` sql\n+SELECT arrayRotateRight([1,2,3,4,5,6], 2) as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [5,6,1,2,3,4] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Query:\n+\n+``` sql\n+SELECT arrayRotateRight([1,2,3,4,5,6], -2) as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [3,4,5,6,1,2] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Query:\n+\n+``` sql\n+SELECT arrayRotateRight(['a','b','c','d','e'], 3) as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 ['c','d','e','a','b'] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+## arrayShiftLeft\n+\n+Shifts an [array](../../sql-reference/data-types/array.md) to the left by the specified number of elements.\n+New elements are filled with the provided argument or the default value of the array element type.\n+If the number of elements is negative, the array is shifted to the right.\n+\n+**Syntax**\n+\n+``` sql\n+arrayShiftLeft(arr, n[, default])\n+```\n+\n+**Arguments**\n+\n+- `arr` \u2014 [Array](../../sql-reference/data-types/array.md).\n+- `n` \u2014 Number of elements to shift.\n+- `default` \u2014 Optional. Default value for new elements.\n+\n+**Returned value**\n+\n+- An array shifted to the left by the specified number of elements.\n+\n+Type: [Array](../../sql-reference/data-types/array.md).\n+\n+**Examples**\n+\n+Query:\n+\n+``` sql\n+SELECT arrayShiftLeft([1,2,3,4,5,6], 2) as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [3,4,5,6,0,0] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Query:\n+\n+``` sql\n+SELECT arrayShiftLeft([1,2,3,4,5,6], -2) as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [0,0,1,2,3,4] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Query:\n+\n+``` sql\n+SELECT arrayShiftLeft([1,2,3,4,5,6], 2, 42) as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [3,4,5,6,42,42] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Query:\n+\n+``` sql\n+SELECT arrayShiftLeft(['a','b','c','d','e','f'], 3, 'foo') as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 ['d','e','f','foo','foo','foo'] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Query:\n+\n+``` sql\n+SELECT arrayShiftLeft([1,2,3,4,5,6] :: Array(UInt16), 2, 4242) as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [3,4,5,6,4242,4242] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+## arrayShiftRight\n+\n+Shifts an [array](../../sql-reference/data-types/array.md) to the right by the specified number of elements.\n+New elements are filled with the provided argument or the default value of the array element type.\n+If the number of elements is negative, the array is shifted to the left.\n+\n+**Syntax**\n+\n+``` sql\n+arrayShiftRight(arr, n[, default])\n+```\n+\n+**Arguments**\n+\n+- `arr` \u2014 [Array](../../sql-reference/data-types/array.md).\n+- `n` \u2014 Number of elements to shift.\n+- `default` \u2014 Optional. Default value for new elements.\n+\n+**Returned value**\n+\n+- An array shifted to the right by the specified number of elements.\n+\n+Type: [Array](../../sql-reference/data-types/array.md).\n+\n+**Examples**\n+\n+Query:\n+\n+``` sql\n+SELECT arrayShiftRight([1,2,3,4,5,6], 2) as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [0,0,1,2,3,4] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Query:\n+\n+``` sql\n+SELECT arrayShiftRight([1,2,3,4,5,6], -2) as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [3,4,5,6,0,0] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Query:\n+\n+``` sql\n+SELECT arrayShiftRight([1,2,3,4,5,6], 2, 42) as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [42,42,1,2,3,4] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Query:\n+\n+``` sql\n+SELECT arrayShiftRight(['a','b','c','d','e','f'], 3, 'foo') as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 ['foo','foo','foo','a','b','c'] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+Query:\n+\n+``` sql\n+SELECT arrayShiftRight([1,2,3,4,5,6] :: Array(UInt16), 2, 4242) as res;\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [4242,4242,1,2,3,4] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n ## Distance functions\n \n All supported functions are described in [distance functions documentation](../../sql-reference/functions/distance-functions.md).\ndiff --git a/docs/ru/sql-reference/functions/array-functions.md b/docs/ru/sql-reference/functions/array-functions.md\nindex 439eddfd7523..8195fd80f873 100644\n--- a/docs/ru/sql-reference/functions/array-functions.md\n+++ b/docs/ru/sql-reference/functions/array-functions.md\n@@ -1703,3 +1703,327 @@ SELECT arrayProduct([toDecimal64(1,8), toDecimal64(2,8), toDecimal64(3,8)]) as r\n \u2502 6   \u2502 Float64                                                                                  \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n+\n+## arrayRotateLeft\n+\n+\u041f\u043e\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u0442 [\u043c\u0430\u0441\u0441\u0438\u0432](../../sql-reference/data-types/array.md) \u0432\u043b\u0435\u0432\u043e \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n+\u0415\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0442\u043e \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u043f\u0440\u0430\u0432\u043e.\n+\n+**\u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441**\n+\n+``` sql\n+arrayRotateLeft(arr, n)\n+```\n+\n+**\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b**\n+\n+- `arr` \u2014 [\u041c\u0430\u0441\u0441\u0438\u0432](../../sql-reference/data-types/array.md).\n+- `n` \u2014 \u0427\u0438\u0441\u043b\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432.\n+\n+**\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435**\n+\n+- \u041c\u0430\u0441\u0441\u0438\u0432, \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0439 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u043b\u0435\u0432\u043e.\n+\n+\u0422\u0438\u043f: [\u041c\u0430\u0441\u0441\u0438\u0432](../../sql-reference/data-types/array.md).\n+\n+**\u041f\u0440\u0438\u043c\u0435\u0440\u044b**\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayRotateLeft([1,2,3,4,5,6], 2) as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [3,4,5,6,1,2] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayRotateLeft([1,2,3,4,5,6], -2) as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [5,6,1,2,3,4] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayRotateLeft(['a','b','c','d','e'], 3) as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 ['d','e','a','b','c'] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+## arrayRotateRight\n+\n+\u041f\u043e\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u0442 [\u043c\u0430\u0441\u0441\u0438\u0432](../../sql-reference/data-types/array.md) \u0432\u043f\u0440\u0430\u0432\u043e \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n+\u0415\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0442\u043e \u043c\u0430\u0441\u0441\u0438\u0432 \u043f\u043e\u0432\u043e\u0440\u0430\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0432\u043b\u0435\u0432\u043e.\n+\n+**\u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441**\n+\n+``` sql\n+arrayRotateRight(arr, n)\n+```\n+\n+**\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b**\n+\n+- `arr` \u2014 [\u041c\u0430\u0441\u0441\u0438\u0432](../../sql-reference/data-types/array.md).\n+- `n` \u2014 \u0427\u0438\u0441\u043b\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432.\n+\n+**\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435**\n+\n+- \u041c\u0430\u0441\u0441\u0438\u0432, \u043f\u043e\u0432\u0435\u0440\u043d\u0443\u0442\u044b\u0439 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u043f\u0440\u0430\u0432\u043e.\n+\n+\u0422\u0438\u043f: [\u041c\u0430\u0441\u0441\u0438\u0432](../../sql-reference/data-types/array.md).\n+\n+**\u041f\u0440\u0438\u043c\u0435\u0440\u044b**\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayRotateRight([1,2,3,4,5,6], 2) as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [5,6,1,2,3,4] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayRotateRight([1,2,3,4,5,6], -2) as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [3,4,5,6,1,2] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayRotateRight(['a','b','c','d','e'], 3) as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 ['c','d','e','a','b'] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+## arrayShiftLeft\n+\n+\u0421\u0434\u0432\u0438\u0433\u0430\u0435\u0442 [\u043c\u0430\u0441\u0441\u0438\u0432](../../sql-reference/data-types/array.md) \u0432\u043b\u0435\u0432\u043e \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n+\u041d\u043e\u0432\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0438\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u0442\u0438\u043f\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n+\u0415\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0442\u043e \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0434\u0432\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u0432\u043f\u0440\u0430\u0432\u043e.\n+\n+**\u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441**\n+\n+``` sql\n+arrayShiftLeft(arr, n[, default])\n+```\n+\n+**\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b**\n+\n+- `arr` \u2014 [\u041c\u0430\u0441\u0441\u0438\u0432](../../sql-reference/data-types/array.md).\n+- `n` \u2014 \u0427\u0438\u0441\u043b\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0432\u0438\u043d\u0443\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432.\n+- `default` \u2014 \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n+\n+**\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435**\n+\n+- \u041c\u0430\u0441\u0441\u0438\u0432, \u0441\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u043b\u0435\u0432\u043e.\n+\n+\u0422\u0438\u043f: [\u041c\u0430\u0441\u0441\u0438\u0432](../../sql-reference/data-types/array.md).\n+\n+**\u041f\u0440\u0438\u043c\u0435\u0440\u044b**\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayShiftLeft([1,2,3,4,5,6], 2) as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [3,4,5,6,0,0] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayShiftLeft([1,2,3,4,5,6], -2) as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [0,0,1,2,3,4] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayShiftLeft([1,2,3,4,5,6], 2, 42) as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [3,4,5,6,42,42] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayShiftLeft(['a','b','c','d','e','f'], 3, 'foo') as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 ['d','e','f','foo','foo','foo'] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayShiftLeft([1,2,3,4,5,6] :: Array(UInt16), 2, 4242) as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [3,4,5,6,4242,4242] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+## arrayShiftRight\n+\n+\u0421\u0434\u0432\u0438\u0433\u0430\u0435\u0442 [\u043c\u0430\u0441\u0441\u0438\u0432](../../sql-reference/data-types/array.md) \u0432\u043f\u0440\u0430\u0432\u043e \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n+\u041d\u043e\u0432\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u043c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0438\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u0442\u0438\u043f\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n+\u0415\u0441\u043b\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0442\u043e \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0434\u0432\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u0432\u043b\u0435\u0432\u043e.\n+\n+**\u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441**\n+\n+``` sql\n+arrayShiftRight(arr, n[, default])\n+```\n+\n+**\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b**\n+\n+- `arr` \u2014 [\u041c\u0430\u0441\u0441\u0438\u0432](../../sql-reference/data-types/array.md).\n+- `n` \u2014 \u0427\u0438\u0441\u043b\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0432\u0438\u043d\u0443\u0442\u044c \u043c\u0430\u0441\u0441\u0438\u0432.\n+- `default` \u2014 \u041e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0434\u043b\u044f \u043d\u043e\u0432\u044b\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432.\n+\n+**\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435**\n+\n+- \u041c\u0430\u0441\u0441\u0438\u0432, \u0441\u0434\u0432\u0438\u043d\u0443\u0442\u044b\u0439 \u043d\u0430 \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u043f\u0440\u0430\u0432\u043e.\n+\n+\u0422\u0438\u043f: [\u041c\u0430\u0441\u0441\u0438\u0432](../../sql-reference/data-types/array.md).\n+\n+**\u041f\u0440\u0438\u043c\u0435\u0440\u044b**\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayShiftRight([1,2,3,4,5,6], 2) as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [0,0,1,2,3,4] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayShiftRight([1,2,3,4,5,6], -2) as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [3,4,5,6,0,0] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayShiftRight([1,2,3,4,5,6], 2, 42) as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [42,42,1,2,3,4] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayShiftRight(['a','b','c','d','e','f'], 3, 'foo') as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 ['foo','foo','foo','a','b','c'] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+``` sql\n+SELECT arrayShiftRight([1,2,3,4,5,6] :: Array(UInt16), 2, 4242) as res;\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+``` text\n+\u250c\u2500res\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [4242,4242,1,2,3,4] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\ndiff --git a/src/Functions/array/arrayShiftRotate.cpp b/src/Functions/array/arrayShiftRotate.cpp\nnew file mode 100644\nindex 000000000000..cea2917af373\n--- /dev/null\n+++ b/src/Functions/array/arrayShiftRotate.cpp\n@@ -0,0 +1,399 @@\n+#include <limits>\n+#include <Columns/ColumnArray.h>\n+#include <DataTypes/DataTypeArray.h>\n+#include <DataTypes/getLeastSupertype.h>\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/FunctionHelpers.h>\n+#include <Functions/IFunction.h>\n+#include <Interpreters/castColumn.h>\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+    extern const int ILLEGAL_COLUMN;\n+    extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n+    extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n+    extern const int VALUE_IS_OUT_OF_RANGE_OF_DATA_TYPE;\n+}\n+\n+enum class ShiftRotateStrategy : uint8_t\n+{\n+    Shift,\n+    Rotate\n+};\n+\n+enum class ShiftRotateDirection : uint8_t\n+{\n+    Left,\n+    Right\n+};\n+\n+template <typename Impl, typename Name>\n+class FunctionArrayShiftRotate : public IFunction\n+{\n+public:\n+    static constexpr auto name = Name::name;\n+    static constexpr ShiftRotateStrategy strategy = Impl::strategy;\n+\n+    static FunctionPtr create(ContextPtr) { return std::make_shared<FunctionArrayShiftRotate>(); }\n+\n+    String getName() const override { return name; }\n+\n+    bool isVariadic() const override { return strategy == ShiftRotateStrategy::Shift; }\n+    size_t getNumberOfArguments() const override { return strategy == ShiftRotateStrategy::Rotate ? 2 : 0; }\n+    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return true; }\n+\n+    DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override\n+    {\n+        if constexpr (strategy == ShiftRotateStrategy::Shift)\n+        {\n+            if (arguments.size() < 2)\n+                throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Function {} requires at least two arguments.\", getName());\n+\n+            if (arguments.size() > 3)\n+                throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Function {} requires at most three arguments.\", getName());\n+        }\n+\n+        const DataTypePtr & first_arg = arguments[0];\n+        if (!isArray(first_arg))\n+            throw Exception(\n+                ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                \"Illegal type {} of argument of function {}, expected Array\",\n+                arguments[0]->getName(),\n+                getName());\n+\n+        if (!isNativeInteger(arguments[1]))\n+            throw Exception(\n+                ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                \"Illegal type {} of argument of function {}, expected Native Integer\",\n+                arguments[1]->getName(),\n+                getName());\n+\n+        const DataTypePtr & elem_type = static_cast<const DataTypeArray &>(*first_arg).getNestedType();\n+        if (arguments.size() == 3)\n+        {\n+            auto ret = tryGetLeastSupertype(DataTypes{elem_type, arguments[2]});\n+            // Note that this will fail if the default value does not fit into the array element type (e.g. UInt64 and Array(UInt8)).\n+            // In this case array should be converted to Array(UInt64) explicitly.\n+            if (!ret || !ret->equals(*elem_type))\n+                throw Exception(\n+                    ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                    \"Illegal type {} of argument of function {}, expected {}\",\n+                    arguments[2]->getName(),\n+                    getName(),\n+                    elem_type->getName());\n+        }\n+\n+        return std::make_shared<DataTypeArray>(elem_type);\n+    }\n+\n+    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type, size_t input_rows_count) const override\n+    {\n+        ColumnPtr column_array_ptr = arguments[0].column;\n+        const auto * column_array = checkAndGetColumn<ColumnArray>(column_array_ptr.get());\n+\n+        if (!column_array)\n+        {\n+            const auto * column_const_array = checkAndGetColumnConst<ColumnArray>(column_array_ptr.get());\n+            if (!column_const_array)\n+                throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Expected Array column, found {}\", column_array_ptr->getName());\n+\n+            column_array_ptr = column_const_array->convertToFullColumn();\n+            column_array = assert_cast<const ColumnArray *>(column_array_ptr.get());\n+        }\n+\n+        ColumnPtr shift_num_column = arguments[1].column;\n+\n+        if constexpr (strategy == ShiftRotateStrategy::Shift)\n+        {\n+            ColumnPtr default_column;\n+            const auto elem_type = static_cast<const DataTypeArray &>(*result_type).getNestedType();\n+\n+            if (arguments.size() == 3)\n+                default_column = castColumn(arguments[2], elem_type);\n+            else\n+                default_column = elem_type->createColumnConstWithDefaultValue(input_rows_count);\n+\n+            default_column = default_column->convertToFullColumnIfConst();\n+\n+            return Impl::execute(*column_array, shift_num_column, default_column, input_rows_count);\n+        }\n+        else\n+        {\n+            return Impl::execute(*column_array, shift_num_column, input_rows_count);\n+        }\n+    }\n+};\n+\n+template <ShiftRotateDirection direction>\n+struct ArrayRotateImpl\n+{\n+    static constexpr ShiftRotateStrategy strategy = ShiftRotateStrategy::Rotate;\n+    static ColumnPtr execute(const ColumnArray & array, ColumnPtr shift_num_column, size_t input_rows_count)\n+    {\n+        size_t batch_size = array.getData().size();\n+\n+        IColumn::Permutation permutation(batch_size);\n+        const IColumn::Offsets & offsets = array.getOffsets();\n+\n+        IColumn::Offset current_offset = 0;\n+        for (size_t i = 0; i < input_rows_count; ++i)\n+        {\n+            const size_t offset = offsets[i];\n+            const size_t nested_size = offset - current_offset;\n+            Int64 shift_num_value = shift_num_column->getInt(i);\n+\n+            // Rotating left to -N is the same as rotating right to N.\n+            ShiftRotateDirection actual_direction = direction;\n+            if (shift_num_value < 0)\n+            {\n+                if (shift_num_value == std::numeric_limits<Int64>::min())\n+                    throw Exception(ErrorCodes::VALUE_IS_OUT_OF_RANGE_OF_DATA_TYPE, \"Shift number {} is out of range\", shift_num_value);\n+                actual_direction = (direction == ShiftRotateDirection::Left) ? ShiftRotateDirection::Right : ShiftRotateDirection::Left;\n+                shift_num_value = -shift_num_value;\n+            }\n+\n+            size_t shift_num = static_cast<size_t>(shift_num_value);\n+            if (nested_size > 0 && shift_num >= nested_size)\n+                shift_num %= nested_size;\n+\n+            // Rotating left to N is the same as shifting right to (size - N).\n+            if (actual_direction == ShiftRotateDirection::Right)\n+                shift_num = nested_size - shift_num;\n+\n+            for (size_t j = 0; j < nested_size; ++j)\n+                permutation[current_offset + j] = current_offset + (j + shift_num) % nested_size;\n+\n+            current_offset = offset;\n+        }\n+\n+        return ColumnArray::create(array.getData().permute(permutation, 0), array.getOffsetsPtr());\n+    }\n+};\n+\n+template <ShiftRotateDirection direction>\n+struct ArrayShiftImpl\n+{\n+    static constexpr ShiftRotateStrategy strategy = ShiftRotateStrategy::Shift;\n+\n+    static ColumnPtr\n+    execute(const ColumnArray & array, ColumnPtr shift_column, ColumnPtr default_column, size_t input_column_rows)\n+    {\n+        const IColumn::Offsets & offsets = array.getOffsets();\n+        const IColumn & array_data = array.getData();\n+        const size_t data_size = array_data.size();\n+\n+        auto result_column = array.getData().cloneEmpty();\n+        result_column->reserve(data_size);\n+\n+        IColumn::Offset current_offset = 0;\n+        for (size_t i = 0; i < input_column_rows; ++i)\n+        {\n+            const size_t offset = offsets[i];\n+            const size_t nested_size = offset - current_offset;\n+            Int64 shift_num_value = shift_column->getInt(i);\n+\n+            // Shifting left to -N is the same as shifting right to N.\n+            ShiftRotateDirection actual_direction = direction;\n+            if (shift_num_value < 0)\n+            {\n+                if (shift_num_value == std::numeric_limits<Int64>::min())\n+                    throw Exception(ErrorCodes::VALUE_IS_OUT_OF_RANGE_OF_DATA_TYPE, \"Shift number {} is out of range\", shift_num_value);\n+                actual_direction = (direction == ShiftRotateDirection::Left) ? ShiftRotateDirection::Right : ShiftRotateDirection::Left;\n+                shift_num_value = -shift_num_value;\n+            }\n+\n+            const size_t number_of_default_values = std::min(static_cast<size_t>(shift_num_value), nested_size);\n+            const size_t num_of_original_values = nested_size - number_of_default_values;\n+\n+            if (actual_direction == ShiftRotateDirection::Right)\n+            {\n+                result_column->insertManyFrom(*default_column, i, number_of_default_values);\n+                result_column->insertRangeFrom(array_data, current_offset, num_of_original_values);\n+            }\n+            else\n+            {\n+                result_column->insertRangeFrom(array_data, current_offset + number_of_default_values, num_of_original_values);\n+                result_column->insertManyFrom(*default_column, i, number_of_default_values);\n+            }\n+\n+            current_offset = offset;\n+        }\n+\n+        return ColumnArray::create(std::move(result_column), array.getOffsetsPtr());\n+    }\n+};\n+\n+struct NameArrayShiftLeft\n+{\n+    static constexpr auto name = \"arrayShiftLeft\";\n+};\n+\n+struct NameArrayShiftRight\n+{\n+    static constexpr auto name = \"arrayShiftRight\";\n+};\n+\n+struct NameArrayRotateLeft\n+{\n+    static constexpr auto name = \"arrayRotateLeft\";\n+};\n+\n+struct NameArrayRotateRight\n+{\n+    static constexpr auto name = \"arrayRotateRight\";\n+};\n+\n+using ArrayShiftLeftImpl = ArrayShiftImpl<ShiftRotateDirection::Left>;\n+using FunctionArrayShiftLeft = FunctionArrayShiftRotate<ArrayShiftLeftImpl, NameArrayShiftLeft>;\n+\n+using ArrayShiftRightImpl = ArrayShiftImpl<ShiftRotateDirection::Right>;\n+using FunctionArrayShiftRight = FunctionArrayShiftRotate<ArrayShiftRightImpl, NameArrayShiftRight>;\n+\n+using ArrayRotateLeftImpl = ArrayRotateImpl<ShiftRotateDirection::Left>;\n+using FunctionArrayRotateLeft = FunctionArrayShiftRotate<ArrayRotateLeftImpl, NameArrayRotateLeft>;\n+\n+using ArrayRotateRightImpl = ArrayRotateImpl<ShiftRotateDirection::Right>;\n+using FunctionArrayRotateRight = FunctionArrayShiftRotate<ArrayRotateRightImpl, NameArrayRotateRight>;\n+\n+\n+REGISTER_FUNCTION(ArrayShiftOrRotate)\n+{\n+    factory.registerFunction<FunctionArrayRotateLeft>(\n+        FunctionDocumentation{\n+        .description = R\"(\n+Returns an array of the same size as the original array with elements rotated\n+to the left by the specified number of positions.\n+[example:simple_int]\n+[example:overflow_int]\n+[example:simple_string]\n+[example:simple_array]\n+[example:simple_nested_array]\n+\n+Negative rotate values are treated as rotating to the right by the absolute\n+value of the rotation.\n+[example:negative_rotation_int]\n+)\",\n+        .examples{\n+            {\"simple_int\", \"SELECT arrayRotateLeft([1, 2, 3, 4, 5], 3)\", \"[4, 5, 1, 2, 3]\"},\n+            {\"simple_string\", \"SELECT arrayRotateLeft(['a', 'b', 'c', 'd', 'e'], 3)\", \"['d', 'e', 'a', 'b', 'c']\"},\n+            {\"simple_array\", \"SELECT arrayRotateLeft([[1, 2], [3, 4], [5, 6]], 2)\", \"[[5, 6], [1, 2], [3, 4]]\"},\n+            {\"simple_nested_array\",\n+             \"SELECT arrayRotateLeft([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1)\",\n+             \"[[[5, 6], [7, 8]], [[1, 2], [3, 4]]]\"},\n+            {\"negative_rotation_int\", \"SELECT arrayRotateLeft([1, 2, 3, 4, 5], -3)\", \"[3, 4, 5, 1, 2]\"},\n+            {\"overflow_int\", \"SELECT arrayRotateLeft([1, 2, 3, 4, 5], 8)\", \"[4, 5, 1, 2, 3]\"},\n+\n+        },\n+        .categories = {\"Array\"},\n+    });\n+    factory.registerFunction<FunctionArrayRotateRight>(\n+        FunctionDocumentation{\n+        .description = R\"(\n+Returns an array of the same size as the original array with elements rotated\n+to the right by the specified number of positions.\n+[example:simple_int]\n+[example:overflow_int]\n+[example:simple_string]\n+[example:simple_array]\n+[example:simple_nested_array]\n+\n+Negative rotate values are treated as rotating to the left by the absolute\n+value of the rotation.\n+[example:negative_rotation_int]\n+)\",\n+        .examples{\n+            {\"simple_int\", \"SELECT arrayRotateRight([1, 2, 3, 4, 5], 3)\", \"[3, 4, 5, 1, 2]\"},\n+            {\"simple_string\", \"SELECT arrayRotateRight(['a', 'b', 'c', 'd', 'e'], 3)\", \"['c', 'd', 'e', 'a', 'b']\"},\n+            {\"simple_array\", \"SELECT arrayRotateRight([[1, 2], [3, 4], [5, 6]], 2)\", \"[[3, 4], [5, 6], [1, 2]]\"},\n+            {\"simple_nested_array\",\n+             \"SELECT arrayRotateRight([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1)\",\n+             \"[[[7, 8], [1, 2]], [[3, 4], [5, 6]]]\"},\n+            {\"negative_rotation_int\", \"SELECT arrayRotateRight([1, 2, 3, 4, 5], -3)\", \"[4, 5, 1, 2, 3]\"},\n+            {\"overflow_int\", \"SELECT arrayRotateRight([1, 2, 3, 4, 5], 8)\", \"[4, 5, 1, 2, 3]\"},\n+        },\n+        .categories = {\"Array\"},\n+    });\n+    factory.registerFunction<FunctionArrayShiftLeft>(\n+        FunctionDocumentation{\n+        .description = R\"(\n+Returns an array of the same size as the original array with elements shifted\n+to the left by the specified number of positions. New elements are filled with\n+provided default values or default values of the corresponding type.\n+[example:simple_int]\n+[example:overflow_int]\n+[example:simple_string]\n+[example:simple_array]\n+[example:simple_nested_array]\n+\n+Negative shift values are treated as shifting to the right by the absolute\n+value of the shift.\n+[example:negative_shift_int]\n+\n+The default value must be of the same type as the array elements.\n+[example:simple_int_with_default]\n+[example:simple_string_with_default]\n+[example:simple_array_with_default]\n+[example:casted_array_with_default]\n+)\",\n+        .examples{\n+            {\"simple_int\", \"SELECT arrayShiftLeft([1, 2, 3, 4, 5], 3)\", \"[4, 5, 0, 0, 0]\"},\n+            {\"negative_shift_int\", \"SELECT arrayShiftLeft([1, 2, 3, 4, 5], -3)\", \"[0, 0, 0, 1, 2]\"},\n+            {\"overflow_int\", \"SELECT arrayShiftLeft([1, 2, 3, 4, 5], 8)\", \"[0, 0, 0, 0, 0]\"},\n+            {\"simple_string\", \"SELECT arrayShiftLeft(['a', 'b', 'c', 'd', 'e'], 3)\", \"['d', 'e', '', '', '']\"},\n+            {\"simple_array\", \"SELECT arrayShiftLeft([[1, 2], [3, 4], [5, 6]], 2)\", \"[[5, 6], [], []]\"},\n+            {\"simple_nested_array\", \"SELECT arrayShiftLeft([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1)\", \"[[[5, 6], [7, 8]], []]\"},\n+            {\"simple_int_with_default\", \"SELECT arrayShiftLeft([1, 2, 3, 4, 5], 3, 7)\", \"[4, 5, 7, 7, 7]\"},\n+            {\"simple_string_with_default\", \"SELECT arrayShiftLeft(['a', 'b', 'c', 'd', 'e'], 3, 'foo')\", \"['d', 'e', 'foo', 'foo', 'foo']\"},\n+            {\"simple_array_with_default\", \"SELECT arrayShiftLeft([[1, 2], [3, 4], [5, 6]], 2, [7, 8])\", \"[[5, 6], [7, 8], [7, 8]]\"},\n+            {\"casted_array_with_default\",\n+             \"SELECT arrayShiftLeft(CAST('[1, 2, 3, 4, 5, 6]', 'Array(UInt16)'), 1, 1000)\",\n+             \"[2, 3, 4, 5, 6, 1000]\"},\n+        },\n+        .categories = {\"Array\"},\n+    });\n+    factory.registerFunction<FunctionArrayShiftRight>(\n+        FunctionDocumentation{\n+        .description = R\"(\n+Returns an array of the same size as the original array with elements shifted\n+to the right by the specified number of positions. New elements are filled with\n+provided default values or default values of the corresponding type.\n+[example:simple_int]\n+[example:overflow_int]\n+[example:simple_string]\n+[example:simple_array]\n+[example:simple_nested_array]\n+\n+Negative shift values are treated as shifting to the left by the absolute\n+value of the shift.\n+[example:negative_shift_int]\n+\n+The default value must be of the same type as the array elements.\n+[example:simple_int_with_default]\n+[example:simple_string_with_default]\n+[example:simple_array_with_default]\n+[example:casted_array_with_default]\n+)\",\n+        .examples{\n+            {\"simple_int\", \"SELECT arrayShiftRight([1, 2, 3, 4, 5], 3)\", \"[0, 0, 0, 1, 2]\"},\n+            {\"negative_shift_int\", \"SELECT arrayShiftRight([1, 2, 3, 4, 5], -3)\", \"[4, 5, 0, 0, 0]\"},\n+            {\"overflow_int\", \"SELECT arrayShiftRight([1, 2, 3, 4, 5], 8)\", \"[0, 0, 0, 0, 0]\"},\n+            {\"simple_string\", \"SELECT arrayShiftRight(['a', 'b', 'c', 'd', 'e'], 3)\", \"['', '', '', 'a', 'b']\"},\n+            {\"simple_array\", \"SELECT arrayShiftRight([[1, 2], [3, 4], [5, 6]], 2)\", \"[[], [], [1, 2]]\"},\n+            {\"simple_nested_array\", \"SELECT arrayShiftRight([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1)\", \"[[], [[1, 2], [3, 4]]]\"},\n+            {\"simple_int_with_default\", \"SELECT arrayShiftRight([1, 2, 3, 4, 5], 3, 7)\", \"[7, 7, 7, 1, 2]\"},\n+            {\"simple_string_with_default\",\n+             \"SELECT arrayShiftRight(['a', 'b', 'c', 'd', 'e'], 3, 'foo')\",\n+             \"['foo', 'foo', 'foo', 'a', 'b']\"},\n+            {\"simple_array_with_default\", \"SELECT arrayShiftRight([[1, 2], [3, 4], [5, 6]], 2, [7, 8])\", \"[[7, 8], [7, 8], [1, 2]]\"},\n+            {\"casted_array_with_default\",\n+             \"SELECT arrayShiftRight(CAST('[1, 2, 3, 4, 5, 6]', 'Array(UInt16)'), 1, 1000)\",\n+             \"[1000, 1, 2, 3, 4, 5]\"},\n+        },\n+        .categories = {\"Array\"},\n+    });\n+}\n+\n+}\ndiff --git a/utils/check-style/aspell-ignore/en/aspell-dict.txt b/utils/check-style/aspell-ignore/en/aspell-dict.txt\nindex 2e231120e418..5b33c7619b1d 100644\n--- a/utils/check-style/aspell-ignore/en/aspell-dict.txt\n+++ b/utils/check-style/aspell-ignore/en/aspell-dict.txt\n@@ -1063,6 +1063,10 @@ arrayReverse\n arrayReverseFill\n arrayReverseSort\n arrayReverseSplit\n+arrayRotateLeft\n+arrayRotateRight\n+arrayShiftLeft\n+arrayShiftRight\n arraySlice\n arraySort\n arraySplit\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02845_arrayShiftRotate.reference b/tests/queries/0_stateless/02845_arrayShiftRotate.reference\nnew file mode 100644\nindex 000000000000..9a8670f387ce\n--- /dev/null\n+++ b/tests/queries/0_stateless/02845_arrayShiftRotate.reference\n@@ -0,0 +1,115 @@\n+== arrayRotateLeft\n+[3,4,5,1,2]\n+[4,5,1,2,3]\n+[4,5,1,2,3]\n+['l','l','o','H','e']\n+[[[5,6],[7,8]],[[1,2],[3,4]]]\n+\n+== arrayRotateRight\n+[4,5,1,2,3]\n+[3,4,5,1,2]\n+[3,4,5,1,2]\n+['l','o','H','e','l']\n+[[[5,6],[7,8]],[[1,2],[3,4]]]\n+\n+== arrayShiftLeft\n+[4,5,0,0,0]\n+[0,0,0,1,2]\n+[0,0,0,0,0]\n+['d','e','','','']\n+[[5,6],[],[]]\n+[[[5,6],[7,8]],[]]\n+[4,5,7,7,7]\n+['d','e','foo','foo','foo']\n+[[5,6],[7,8],[7,8]]\n+[2,3,4,5,6,1000]\n+\n+== arrayShiftRight\n+[0,0,0,1,2]\n+[4,5,0,0,0]\n+[0,0,0,0,0]\n+['','','','a','b']\n+[[],[],[1,2]]\n+[[],[[1,2],[3,4]]]\n+[7,7,7,1,2]\n+['foo','foo','foo','a','b']\n+[[7,8],[7,8],[1,2]]\n+[1000,1,2,3,4,5]\n+\n+== table\n+== table with constants\n+-- arrayRotateLeft\n+[3,4,5,6,1,2]\n+[3,4,5,6,1,2]\n+[3,4,1,2]\n+[15,16,23,42,4,8]\n+[18,28,18,28,45,90,45,2,7]\n+[159,26,5,3,14]\n+-- arrayRotateRight\n+[5,6,1,2,3,4]\n+[5,6,1,2,3,4]\n+[3,4,1,2]\n+[23,42,4,8,15,16]\n+[90,45,2,7,18,28,18,28,45]\n+[26,5,3,14,159]\n+-- arrayShiftLeft\n+[4,5,6,0,0,0]\n+[4,5,6,0,0,0]\n+[4,0,0,0]\n+[16,23,42,0,0,0]\n+[28,18,28,45,90,45,0,0,0]\n+[26,5,0,0,0]\n+-- arrayShiftRight\n+[0,0,0,1,2,3]\n+[0,0,0,1,2,3]\n+[0,0,0,1]\n+[0,0,0,4,8,15]\n+[0,0,0,2,7,18,28,18,28]\n+[0,0,0,3,14]\n+== table with constants and defaults\n+-- arrayShiftLeft\n+[4,5,6,7,7,7]\n+[4,5,6,7,7,7]\n+[4,7,7,7]\n+[16,23,42,7,7,7]\n+[28,18,28,45,90,45,7,7,7]\n+[26,5,7,7,7]\n+-- arrayShiftRight\n+[7,7,7,1,2,3]\n+[7,7,7,1,2,3]\n+[7,7,7,1]\n+[7,7,7,4,8,15]\n+[7,7,7,2,7,18,28,18,28]\n+[7,7,7,3,14]\n+== table values\n+-- arrayRotateLeft\n+[3,4,5,6,1,2]\n+[4,5,6,1,2,3]\n+[4,1,2,3]\n+[42,4,8,15,16,23]\n+[90,45,2,7,18,28,18,28,45]\n+[14,159,26,5,3]\n+-- arrayRotateRight\n+[5,6,1,2,3,4]\n+[4,5,6,1,2,3]\n+[2,3,4,1]\n+[8,15,16,23,42,4]\n+[18,28,18,28,45,90,45,2,7]\n+[5,3,14,159,26]\n+-- arrayShiftLeft\n+[3,4,5,6,1,1]\n+[4,5,6,2,2,2]\n+[4,3,3,3]\n+[42,4,4,4,4,4]\n+[90,45,5,5,5,5,5,5,5]\n+[6,6,6,6,6]\n+-- arrayShiftRight\n+[1,1,1,2,3,4]\n+[2,2,2,1,2,3]\n+[3,3,3,1]\n+[4,4,4,4,4,4]\n+[5,5,5,5,5,5,5,2,7]\n+[6,6,6,6,6]\n+== problematic cast cases\n+[5]\n+[[]]\ndiff --git a/tests/queries/0_stateless/02845_arrayShiftRotate.sql b/tests/queries/0_stateless/02845_arrayShiftRotate.sql\nnew file mode 100644\nindex 000000000000..bdb409c3fe5c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02845_arrayShiftRotate.sql\n@@ -0,0 +1,78 @@\n+select '== arrayRotateLeft';\n+select arrayRotateLeft([1,2,3,4,5], 2);\n+select arrayRotateLeft([1,2,3,4,5], -2);\n+select arrayRotateLeft([1,2,3,4,5], 8);\n+select arrayRotateLeft(['H', 'e', 'l', 'l', 'o'], 2);\n+select arrayRotateLeft([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1);\n+select '';\n+\n+select '== arrayRotateRight';\n+select arrayRotateRight([1,2,3,4,5], 2);\n+select arrayRotateRight([1,2,3,4,5], -2);\n+select arrayRotateRight([1,2,3,4,5], 8);\n+select arrayRotateRight(['H', 'e', 'l', 'l', 'o'], 2);\n+select arrayRotateRight([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1);\n+select '';\n+\n+select '== arrayShiftLeft';\n+select arrayShiftLeft([1, 2, 3, 4, 5], 3);\n+select arrayShiftLeft([1, 2, 3, 4, 5], -3);\n+select arrayShiftLeft([1, 2, 3, 4, 5], 8);\n+select arrayShiftLeft(['a', 'b', 'c', 'd', 'e'], 3);\n+select arrayShiftLeft([[1, 2], [3, 4], [5, 6]], 2);\n+select arrayShiftLeft([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1);\n+select arrayShiftLeft([1, 2, 3, 4, 5], 3, 7);\n+select arrayShiftLeft(['a', 'b', 'c', 'd', 'e'], 3, 'foo');\n+select arrayShiftLeft([[1, 2], [3, 4], [5, 6]], 2, [7, 8]);\n+select arrayShiftLeft(CAST('[1, 2, 3, 4, 5, 6]', 'Array(UInt16)'), 1, 1000);\n+select '';\n+\n+select '== arrayShiftRight';\n+select arrayShiftRight([1, 2, 3, 4, 5], 3);\n+select arrayShiftRight([1, 2, 3, 4, 5], -3);\n+select arrayShiftRight([1, 2, 3, 4, 5], 8);\n+select arrayShiftRight(['a', 'b', 'c', 'd', 'e'], 3);\n+select arrayShiftRight([[1, 2], [3, 4], [5, 6]], 2);\n+select arrayShiftRight([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1);\n+select arrayShiftRight([1, 2, 3, 4, 5], 3, 7);\n+select arrayShiftRight(['a', 'b', 'c', 'd', 'e'], 3, 'foo');\n+select arrayShiftRight([[1, 2], [3, 4], [5, 6]], 2, [7, 8]);\n+select arrayShiftRight(CAST('[1, 2, 3, 4, 5, 6]', 'Array(UInt16)'), 1, 1000);\n+select '';\n+\n+select '== table';\n+drop table if exists t02845;\n+create table t02845 (a Array(UInt8), s Int16, d UInt8) engine = MergeTree order by d;\n+insert into t02845 values ([1,2,3,4,5,6], 2, 1),([1,2,3,4,5,6], 3, 2),([1,2,3,4], 3, 3),([4,8,15,16,23,42], 5, 4),([2, 7, 18, 28, 18, 28, 45, 90, 45], 7, 5),([3, 14, 159, 26, 5], 11, 6);\n+\n+select '== table with constants';\n+select '-- arrayRotateLeft';\n+select arrayRotateLeft(a, 2) from t02845;\n+select '-- arrayRotateRight';\n+select arrayRotateRight(a, 2) from t02845;\n+select '-- arrayShiftLeft';\n+select arrayShiftLeft(a, 3) from t02845;\n+select '-- arrayShiftRight';\n+select arrayShiftRight(a, 3) from t02845;\n+\n+select '== table with constants and defaults';\n+select '-- arrayShiftLeft';\n+select arrayShiftLeft(a, 3, 7) from t02845;\n+select '-- arrayShiftRight';\n+select arrayShiftRight(a, 3, 7) from t02845;\n+\n+select '== table values';\n+select '-- arrayRotateLeft';\n+select arrayRotateLeft(a, s) from t02845;\n+select '-- arrayRotateRight';\n+select arrayRotateRight(a, s) from t02845;\n+select '-- arrayShiftLeft';\n+select arrayShiftLeft(a, s, d) from t02845;\n+select '-- arrayShiftRight';\n+select arrayShiftRight(a, s, d) from t02845;\n+\n+select '== problematic cast cases';\n+select arrayShiftLeft([30000], 3, 5);\n+select arrayShiftLeft([[1]], 3, []);\n+select arrayShiftLeft(['foo'], 3, 3); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n+select arrayShiftLeft([1], 3, 'foo'); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }\n",
  "problem_statement": "arrayRotateLeft, arrayRotateRight\n**Use case**\r\n\r\nWith some adjustments, it can be helpful for the canonization of \"rings\"\r\n(Ring is a data type representing a polygon without holes).\r\n\r\n**Describe the solution you'd like**\r\n\r\n```\r\narrayRotateLeft(arr, N)\r\narrayRotateRight(arr, N)\r\n\r\n-- Examples:\r\narrayRotateLeft([1, 2, 3, 4, 5], 3) = [4, 5, 1, 2, 3]\r\narrayRotateRight([1, 2, 3, 4, 5], 3) = [3, 4, 5, 1, 2]\r\n```\r\n\narrayShiftLeft, arrayShiftRight\n**Use case**\r\n\r\nShift array values, quite commonly used with combination of arrayMap\r\n\r\n**Describe the solution you'd like**\r\n\r\n```\r\narrayShiftLeft(arr, N)\r\narrayShiftLeft(arr, N, 3)\r\narrayShiftRight(arr, N)\r\narrayShiftRight(arr, N, 5)\r\n-- Examples:\r\narrayShiftLeft([1, 2, 3, 4, 5], 1) = [0, 1, 2, 3, 4]\r\narrayShiftRight([1, 2, 3, 4, 5], 1, 3) = [2, 3, 4, 5, 3]\r\n```\r\n\r\n**Describe alternatives you've considered**\r\n\r\n```\r\narrayPopBack(arrayPushFront(x, 1))`\r\n```\r\n\r\nBut it makes 2 copies of array\r\n\n",
  "hints_text": "I'd like to have a try. Could you please assign to me :)\nProbably shifting(also quite common case) of arrays can be implemented at the same time as rotation https://github.com/ClickHouse/ClickHouse/issues/52895\n@FFFFFFFHHHHHHH are you still working on that? \n> @FFFFFFFHHHHHHH are you still working on that?\r\n\r\nYes, but you could create pr if you finish this function quickly with `arrayShiftLeft/Right`.\nThe examples are non-obvious.\r\n\r\n> `arrayShiftLeft([1, 2, 3, 4, 5], 1) = [0, 1, 2, 3, 4]`\r\n\r\nDid you mean `arrayShiftRight`, `[0, 1, 2, 3, 4, 5]`?\r\n\r\nThe logic looks strange... We need to find good semantics and analogies for this.\n> Did you mean arrayShiftRight\r\n\r\nYes, \r\n\r\n> , [0, 1, 2, 3, 4, 5]?\r\n\r\nNo, array size stays the same, ie last element is removed from it\r\n\r\nMy idea for signature was something like\r\n\r\n`arrayShiftLeft/Right(array, N, [default_value = 0])`\r\n\r\nWhere N is by how many elements we want to shift array\r\nAnd `default_value` is optional argument for value which will take place of shifted values\r\n\r\nPython example https://stackoverflow.com/a/30534478 (have the same signature)\r\n.\nOk.\nIs that a little ambiguous with `arrayRotateLeft/Right`?\r\n`arrayRotateLeft` means moving the original array to left.\r\n`arrayShiftLeft` means moving the original array to right.\r\n\n> Is that a little ambiguous with arrayRotateLeft/Right?\r\n\r\nNo, it's not.\r\nIn case of arrayShift, we don't have ring, so values from end will not appear at beginning\r\n\r\nhttps://clickhouse.com/docs/en/sql-reference/functions/bit-functions#bitshiftlefta-b\r\nhttps://clickhouse.com/docs/en/sql-reference/functions/bit-functions#bitrotatelefta-b\n> > Is that a little ambiguous with arrayRotateLeft/Right?\r\n> \r\n> No, it's not. In case of arrayShift, we don't have ring, so values from end will not appear at beginning\r\n> \r\n> https://clickhouse.com/docs/en/sql-reference/functions/bit-functions#bitshiftlefta-b https://clickhouse.com/docs/en/sql-reference/functions/bit-functions#bitrotatelefta-b\r\n\r\nI mean if there's any ambiguity in the direction.\r\n\r\nMaybe \r\n```sql\r\narrayShiftLeft([1, 2, 3, 4, 5], 1) = [2, 3, 4, 5, 0]\r\narrayShiftRight([1, 2, 3, 4, 5], 1, 3) = [3, 1, 2, 3, 4]\r\n```\nIf it is so non-obvious, maybe we can avoid implementing this feature :smile: \r\n\r\n@UnamedRus or clarify the use-case.\nUse case\r\n\r\n```\r\narrayPopBack(arrayPushFront(cum_shard_weights, 0))\r\n```\r\n\r\n```\r\nWITH\r\n    CAST(xxHash64(name), 'Int64') AS key,\r\n    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] AS shard_num,\r\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1] AS shard_weights,\r\n    arrayCumSum(shard_weights) AS cum_shard_weights,\r\n    arraySum(shard_weights) AS total_weight\r\nSELECT\r\n    name,\r\n    key,\r\n    key % total_weight AS modulo,\r\n    arrayFirst((x, y, z) -> ((modulo < y) AND (modulo >= z)), shard_num, cum_shard_weights, arrayPopBack(arrayPushFront(cum_shard_weights, 0))) AS _result_shart_num\r\nFROM\r\n(\r\n    SELECT arrayJoin(['lilei6_6938', 'lilei0_87531', 'lilei9_46548']) AS name\r\n)\r\n\r\n\r\n\r\n\u250c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500key\u2500\u252c\u2500modulo\u2500\u252c\u2500_result_shart_num\u2500\u2510\r\n\u2502 lilei6_6938  \u2502 -4777066231024988473 \u2502      3 \u2502                 4 \u2502\r\n\u2502 lilei0_87531 \u2502  5478184676739000754 \u2502      4 \u2502                 5 \u2502\r\n\u2502 lilei9_46548 \u2502 -2574499495101583472 \u2502      4 \u2502                 5 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/issues/51841#issuecomment-1625092934\n@alexey-milovidov so this is okay to implement? I could take it (as well as `arrayRotateLeft/Right`\nYes! Thank you!\nThe size of the array remains the same; the elements are shifted accordingly; the elements shifted past the boundaries of the array disappear; the new places are filled with the data type's default value or the value specified in the extra function argument.\n```\r\narrayShiftRight(['H', 'e', 'l', 'l', 'o'], 1) = ['', 'H', 'e', 'l', 'l']\r\n```",
  "created_at": "2023-08-18T15:46:57Z",
  "modified_files": [
    "docs/en/sql-reference/functions/array-functions.md",
    "docs/ru/sql-reference/functions/array-functions.md",
    "b/src/Functions/array/arrayShiftRotate.cpp",
    "utils/check-style/aspell-ignore/en/aspell-dict.txt"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02845_arrayShiftRotate.reference",
    "b/tests/queries/0_stateless/02845_arrayShiftRotate.sql"
  ]
}