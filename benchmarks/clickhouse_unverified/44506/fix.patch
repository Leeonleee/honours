diff --git a/src/Functions/in.cpp b/src/Functions/in.cpp
index 5773e823a800..1de8371cf906 100644
--- a/src/Functions/in.cpp
+++ b/src/Functions/in.cpp
@@ -17,6 +17,7 @@ namespace DB
 namespace ErrorCodes
 {
     extern const int ILLEGAL_COLUMN;
+    extern const int LOGICAL_ERROR;
 }
 
 namespace
@@ -94,6 +95,8 @@ class FunctionIn : public IFunction
     {
         if constexpr (ignore_set)
             return ColumnUInt8::create(input_rows_count, 0u);
+        if (input_rows_count == 0)
+            return ColumnUInt8::create();
 
         /// Second argument must be ColumnSet.
         ColumnPtr column_set_ptr = arguments[1].column;
@@ -135,12 +138,16 @@ class FunctionIn : public IFunction
 
         /// Replace single LowCardinality column to it's dictionary if possible.
         ColumnPtr lc_indexes = nullptr;
+        bool is_const = false;
         if (columns_of_key_columns.size() == 1)
         {
             auto & arg = columns_of_key_columns.at(0);
             const auto * col = arg.column.get();
             if (const auto * const_col = typeid_cast<const ColumnConst *>(col))
+            {
                 col = &const_col->getDataColumn();
+                is_const = true;
+            }
 
             if (const auto * lc = typeid_cast<const ColumnLowCardinality *>(col))
             {
@@ -153,7 +160,13 @@ class FunctionIn : public IFunction
         auto res = set->execute(columns_of_key_columns, negative);
 
         if (lc_indexes)
-            return res->index(*lc_indexes, 0);
+            res = res->index(*lc_indexes, 0);
+
+        if (is_const)
+            res = ColumnUInt8::create(input_rows_count, res->getUInt(0));
+
+        if (res->size() != input_rows_count)
+            throw Exception(ErrorCodes::LOGICAL_ERROR, "Output size is different from input size, expect {}, get {}", input_rows_count, res->size());
 
         return res;
     }
