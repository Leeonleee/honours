diff --git a/src/Functions/FunctionsCodingULID.cpp b/src/Functions/FunctionsCodingULID.cpp
index 3201578791ac..992f9cbf2d7a 100644
--- a/src/Functions/FunctionsCodingULID.cpp
+++ b/src/Functions/FunctionsCodingULID.cpp
@@ -68,8 +68,7 @@ class FunctionULIDStringToDateTime : public IFunction
         String timezone;
         if (arguments.size() == 2)
         {
-            if (arguments[1].column)
-                timezone = extractTimeZoneNameFromColumn(*arguments[1].column);
+            timezone = extractTimeZoneNameFromColumn(arguments[1].column.get(), arguments[1].name);
 
             if (timezone.empty())
                 throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,
diff --git a/src/Functions/castOrDefault.cpp b/src/Functions/castOrDefault.cpp
index f71675dcbad4..3ae4674b1687 100644
--- a/src/Functions/castOrDefault.cpp
+++ b/src/Functions/castOrDefault.cpp
@@ -245,7 +245,8 @@ class FunctionCastOrDefaultTyped final : public IFunction
         {
             if (additional_argument_index < arguments.size())
             {
-                time_zone = extractTimeZoneNameFromColumn(*arguments[additional_argument_index].column);
+                time_zone = extractTimeZoneNameFromColumn(arguments[additional_argument_index].column.get(),
+                                                          arguments[additional_argument_index].name);
                 ++additional_argument_index;
             }
         }
diff --git a/src/Functions/extractTimeZoneFromFunctionArguments.cpp b/src/Functions/extractTimeZoneFromFunctionArguments.cpp
index 5a20ca7e9626..7ed240fdbcfd 100644
--- a/src/Functions/extractTimeZoneFromFunctionArguments.cpp
+++ b/src/Functions/extractTimeZoneFromFunctionArguments.cpp
@@ -17,14 +17,14 @@ namespace ErrorCodes
 }
 
 
-std::string extractTimeZoneNameFromColumn(const IColumn & column)
+std::string extractTimeZoneNameFromColumn(const IColumn * column, const String & column_name)
 {
-    const ColumnConst * time_zone_column = checkAndGetColumnConst<ColumnString>(&column);
+    const ColumnConst * time_zone_column = checkAndGetColumnConst<ColumnString>(column);
 
     if (!time_zone_column)
         throw Exception(ErrorCodes::ILLEGAL_COLUMN,
-                        "Illegal column {} of time zone argument of function, must be constant string",
-                        column.getName());
+                        "Illegal column {} of time zone argument of function, must be a constant string",
+                        column_name);
 
     return time_zone_column->getValue<String>();
 }
@@ -33,9 +33,9 @@ std::string extractTimeZoneNameFromColumn(const IColumn & column)
 std::string extractTimeZoneNameFromFunctionArguments(const ColumnsWithTypeAndName & arguments, size_t time_zone_arg_num, size_t datetime_arg_num)
 {
     /// Explicit time zone may be passed in last argument.
-    if (arguments.size() == time_zone_arg_num + 1 && arguments[time_zone_arg_num].column)
+    if (arguments.size() == time_zone_arg_num + 1)
     {
-        return extractTimeZoneNameFromColumn(*arguments[time_zone_arg_num].column);
+        return extractTimeZoneNameFromColumn(arguments[time_zone_arg_num].column.get(), arguments[time_zone_arg_num].name);
     }
     else
     {
@@ -57,7 +57,7 @@ const DateLUTImpl & extractTimeZoneFromFunctionArguments(const ColumnsWithTypeAn
 {
     if (arguments.size() == time_zone_arg_num + 1)
     {
-        std::string time_zone = extractTimeZoneNameFromColumn(*arguments[time_zone_arg_num].column);
+        std::string time_zone = extractTimeZoneNameFromColumn(arguments[time_zone_arg_num].column.get(), arguments[time_zone_arg_num].name);
         if (time_zone.empty())
             throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, "Provided time zone must be non-empty and be a valid time zone");
         return DateLUT::instance(time_zone);
diff --git a/src/Functions/extractTimeZoneFromFunctionArguments.h b/src/Functions/extractTimeZoneFromFunctionArguments.h
index 751d7a463f14..858be40def7e 100644
--- a/src/Functions/extractTimeZoneFromFunctionArguments.h
+++ b/src/Functions/extractTimeZoneFromFunctionArguments.h
@@ -12,7 +12,7 @@ namespace DB
 
 class Block;
 
-std::string extractTimeZoneNameFromColumn(const IColumn & column);
+std::string extractTimeZoneNameFromColumn(const IColumn * column, const String & column_name);
 
 /// Determine working timezone either from optional argument with time zone name or from time zone in DateTime type of argument.
 /// Returns empty string if default time zone should be used.
diff --git a/src/Functions/toTimezone.cpp b/src/Functions/toTimezone.cpp
index ddac22d3173b..0a54e5a86b7c 100644
--- a/src/Functions/toTimezone.cpp
+++ b/src/Functions/toTimezone.cpp
@@ -8,7 +8,6 @@
 #include <IO/WriteHelpers.h>
 #include <Common/assert_cast.h>
 
-
 namespace DB
 {
 namespace ErrorCodes
@@ -100,6 +99,7 @@ class ToTimeZoneOverloadResolver : public IFunctionOverloadResolver
                 "Should be DateTime or DateTime64", arguments[0].type->getName(), getName());
 
         String time_zone_name = extractTimeZoneNameFromFunctionArguments(arguments, 1, 0);
+
         if (which_type.isDateTime())
             return std::make_shared<DataTypeDateTime>(time_zone_name);
 
