diff --git a/src/Core/FormatFactorySettings.h b/src/Core/FormatFactorySettings.h
index e4a5308002cb..9b5ebd9a2176 100644
--- a/src/Core/FormatFactorySettings.h
+++ b/src/Core/FormatFactorySettings.h
@@ -891,9 +891,18 @@ Rows limit for Pretty formats.
 )", 0) \
     DECLARE(UInt64, output_format_pretty_max_column_pad_width, 250, R"(
 Maximum width to pad all values in a column in Pretty formats.
+)", 0) \
+    DECLARE(UInt64, output_format_pretty_max_column_name_width_cut_to, 24, R"(
+If the column name is too long, cut it to this length.
+The column will be cut if it is longer than `output_format_pretty_max_column_name_width_cut_to` plus `output_format_pretty_max_column_name_width_min_chars_to_cut`.
+)", 0) \
+    DECLARE(UInt64, output_format_pretty_max_column_name_width_min_chars_to_cut, 4, R"(
+Minimum characters to cut if the column name is too long.
+The column will be cut if it is longer than `output_format_pretty_max_column_name_width_cut_to` plus `output_format_pretty_max_column_name_width_min_chars_to_cut`.
 )", 0) \
     DECLARE(UInt64, output_format_pretty_max_value_width, 10000, R"(
 Maximum width of value to display in Pretty formats. If greater - it will be cut.
+The value 0 means - never cut.
 )", 0) \
     DECLARE(UInt64, output_format_pretty_max_value_width_apply_for_single_value, false, R"(
 Only cut values (see the `output_format_pretty_max_value_width` setting) when it is not a single value in a block. Otherwise output it entirely, which is useful for the `SHOW CREATE TABLE` query.
diff --git a/src/Core/SettingsChangesHistory.cpp b/src/Core/SettingsChangesHistory.cpp
index 54ddc7abdf2d..56ad2c3e9a9d 100644
--- a/src/Core/SettingsChangesHistory.cpp
+++ b/src/Core/SettingsChangesHistory.cpp
@@ -78,6 +78,8 @@ const VersionToSettingsChangesMap & getSettingsChangesHistory()
             {"output_format_orc_writer_time_zone_name", "GMT", "GMT", "The time zone name for ORC writer, the default ORC writer's time zone is GMT."},
             {"output_format_pretty_highlight_trailing_spaces", false, true, "A new setting."},
             {"allow_experimental_bfloat16_type", false, true, "Add new BFloat16 type"},
+            {"output_format_pretty_max_column_name_width_cut_to", 0, 24, "A new setting"},
+            {"output_format_pretty_max_column_name_width_min_chars_to_cut", 0, 4, "A new setting"},
         });
         addSettingsChanges(settings_changes_history, "24.12",
         {
diff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp
index f77c5d1ab1ca..c8030ee312e7 100644
--- a/src/Formats/FormatFactory.cpp
+++ b/src/Formats/FormatFactory.cpp
@@ -212,6 +212,8 @@ FormatSettings getFormatSettings(const ContextPtr & context, const Settings & se
     format_settings.pretty.color = settings[Setting::output_format_pretty_color].valueOr(2);
     format_settings.pretty.max_column_pad_width = settings[Setting::output_format_pretty_max_column_pad_width];
     format_settings.pretty.max_rows = settings[Setting::output_format_pretty_max_rows];
+    format_settings.pretty.max_column_name_width_cut_to = settings[Setting::output_format_pretty_max_column_name_width_cut_to];
+    format_settings.pretty.max_column_name_width_min_chars_to_cut = settings[Setting::output_format_pretty_max_column_name_width_min_chars_to_cut];
     format_settings.pretty.max_value_width = settings[Setting::output_format_pretty_max_value_width];
     format_settings.pretty.max_value_width_apply_for_single_value = settings[Setting::output_format_pretty_max_value_width_apply_for_single_value];
     format_settings.pretty.highlight_digit_groups = settings[Setting::output_format_pretty_highlight_digit_groups];
diff --git a/src/Formats/FormatSettings.h b/src/Formats/FormatSettings.h
index d33acb53d51a..95f23c3f94fa 100644
--- a/src/Formats/FormatSettings.h
+++ b/src/Formats/FormatSettings.h
@@ -301,6 +301,8 @@ struct FormatSettings
     {
         UInt64 max_rows = 10000;
         UInt64 max_column_pad_width = 250;
+        UInt64 max_column_name_width_cut_to = 24;
+        UInt64 max_column_name_width_min_chars_to_cut = 4;
         UInt64 max_value_width = 10000;
         UInt64 max_value_width_apply_for_single_value = false;
         bool highlight_digit_groups = true;
diff --git a/src/Formats/PrettyFormatHelpers.cpp b/src/Formats/PrettyFormatHelpers.cpp
index e5855255b382..7548b846827a 100644
--- a/src/Formats/PrettyFormatHelpers.cpp
+++ b/src/Formats/PrettyFormatHelpers.cpp
@@ -3,6 +3,7 @@
 #include <IO/WriteHelpers.h>
 #include <Processors/Chunk.h>
 #include <Common/formatReadable.h>
+#include <Common/UTF8Helpers.h>
 #include <base/find_symbols.h>
 
 
@@ -124,4 +125,27 @@ String highlightTrailingSpaces(String source)
     return source.substr(0, highlight_start_pos) + RED_COLOR + UNDERSCORE + source.substr(highlight_start_pos, std::string::npos) + RESET_COLOR;
 }
 
+
+std::pair<String, size_t> truncateName(String name, size_t cut_to, size_t hysteresis, bool ascii)
+{
+    size_t length = UTF8::computeWidth(reinterpret_cast<const UInt8 *>(name.data()), name.size());
+
+    if (!cut_to || length <= cut_to + hysteresis)
+        return {name, length};
+
+    /// We cut characters in the middle and insert filler there.
+    const char * filler = ascii ? "~" : "â‹¯";
+
+    size_t prefix_chars = cut_to / 2;
+    size_t suffix_chars = (cut_to - 1) / 2;
+    size_t suffix_chars_begin = length - suffix_chars;
+
+    size_t prefix_bytes = UTF8::computeBytesBeforeWidth(reinterpret_cast<const UInt8 *>(name.data()), name.size(), 0, prefix_chars);
+    size_t suffix_bytes_begin = UTF8::computeBytesBeforeWidth(reinterpret_cast<const UInt8 *>(name.data()), name.size(), 0, suffix_chars_begin);
+
+    name = name.substr(0, prefix_bytes) + filler + name.substr(suffix_bytes_begin, std::string::npos);
+
+    return {name, cut_to};
+}
+
 }
diff --git a/src/Formats/PrettyFormatHelpers.h b/src/Formats/PrettyFormatHelpers.h
index 41a695848ef6..6279d131191d 100644
--- a/src/Formats/PrettyFormatHelpers.h
+++ b/src/Formats/PrettyFormatHelpers.h
@@ -21,4 +21,8 @@ String highlightDigitGroups(String source);
 /// Highlights and underscores trailing spaces using ANSI escape sequences.
 String highlightTrailingSpaces(String source);
 
+/// If the visible width of the name is longer than `cut_to` + `hysteresis`, truncate it to `cut_to`
+/// by cutting it in the middle and replacing with a single filler character (ascii or unicode).
+std::pair<String, size_t> truncateName(String name, size_t cut_to, size_t hysteresis, bool ascii);
+
 }
diff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
index 6b41a03ebba2..64bfbf90ada3 100644
--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
@@ -36,7 +36,7 @@ PrettyBlockOutputFormat::PrettyBlockOutputFormat(
 /// Note that number of code points is just a rough approximation of visible string width.
 void PrettyBlockOutputFormat::calculateWidths(
     const Block & header, const Chunk & chunk,
-    WidthsPerColumn & widths, Widths & max_padded_widths, Widths & name_widths)
+    WidthsPerColumn & widths, Widths & max_padded_widths, Widths & name_widths, Strings & names)
 {
     size_t num_rows = std::min(chunk.getNumRows(), format_settings.pretty.max_rows);
 
@@ -49,8 +49,9 @@ void PrettyBlockOutputFormat::calculateWidths(
     widths.resize(num_columns);
     max_padded_widths.resize_fill(num_columns);
     name_widths.resize(num_columns);
+    names.resize(num_columns);
 
-    /// Calculate widths of all values.
+    /// Calculate the widths of all values.
     String serialized_value;
     size_t prefix = 2; // Tab character adjustment
     for (size_t i = 0; i < num_columns; ++i)
@@ -85,11 +86,17 @@ void PrettyBlockOutputFormat::calculateWidths(
                 std::min<UInt64>({format_settings.pretty.max_column_pad_width, format_settings.pretty.max_value_width, widths[i][j]}));
         }
 
-        /// And also calculate widths for names of columns.
+        /// Also, calculate the widths for the names of columns.
         {
-            // name string doesn't contain Tab, no need to pass `prefix`
-            name_widths[i] = std::min<UInt64>(format_settings.pretty.max_column_pad_width,
-                UTF8::computeWidth(reinterpret_cast<const UInt8 *>(elem.name.data()), elem.name.size()));
+            auto [name, width] = truncateName(elem.name,
+                format_settings.pretty.max_column_name_width_cut_to
+                    ? std::max<UInt64>(max_padded_widths[i], format_settings.pretty.max_column_name_width_cut_to)
+                    : 0,
+                format_settings.pretty.max_column_name_width_min_chars_to_cut,
+                format_settings.pretty.charset != FormatSettings::Pretty::Charset::UTF8);
+
+            names[i] = std::move(name);
+            name_widths[i] = std::min<UInt64>(format_settings.pretty.max_column_pad_width, width);
             max_padded_widths[i] = std::max<UInt64>(max_padded_widths[i], name_widths[i]);
         }
         prefix += max_padded_widths[i] + 3;
@@ -189,7 +196,8 @@ void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind
     WidthsPerColumn widths;
     Widths max_widths;
     Widths name_widths;
-    calculateWidths(header, chunk, widths, max_widths, name_widths);
+    Strings names;
+    calculateWidths(header, chunk, widths, max_widths, name_widths, names);
 
     const GridSymbols & grid_symbols
         = format_settings.pretty.charset == FormatSettings::Pretty::Charset::UTF8 ? utf8_grid_symbols : ascii_grid_symbols;
@@ -282,11 +290,11 @@ void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind
                 for (size_t k = 0; k < max_widths[i] - name_widths[i]; ++k)
                     writeChar(' ', out);
 
-                writeString(col.name, out);
+                writeString(names[i], out);
             }
             else
             {
-                writeString(col.name, out);
+                writeString(names[i], out);
 
                 for (size_t k = 0; k < max_widths[i] - name_widths[i]; ++k)
                     writeChar(' ', out);
diff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
index 81bd0e6632d4..41a1959906e7 100644
--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
@@ -43,7 +43,7 @@ class PrettyBlockOutputFormat : public IOutputFormat
 
     void calculateWidths(
         const Block & header, const Chunk & chunk,
-        WidthsPerColumn & widths, Widths & max_padded_widths, Widths & name_widths);
+        WidthsPerColumn & widths, Widths & max_padded_widths, Widths & name_widths, Strings & names);
 
     void writeValueWithPadding(
         const IColumn & column, const ISerialization & serialization, size_t row_num,
diff --git a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp
index 1e4f784bc71b..9ac9afc5c32a 100644
--- a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.cpp
@@ -59,6 +59,7 @@ void PrettyCompactBlockOutputFormat::writeHeader(
     const Block & block,
     const Widths & max_widths,
     const Widths & name_widths,
+    const Strings & names,
     const bool write_footer)
 {
     if (format_settings.pretty.output_format_pretty_row_numbers)
@@ -98,7 +99,7 @@ void PrettyCompactBlockOutputFormat::writeHeader(
 
             if (color)
                 writeCString("\033[1m", out);
-            writeString(col.name, out);
+            writeString(names[i], out);
             if (color)
                 writeCString("\033[0m", out);
         }
@@ -106,7 +107,7 @@ void PrettyCompactBlockOutputFormat::writeHeader(
         {
             if (color)
                 writeCString("\033[1m", out);
-            writeString(col.name, out);
+            writeString(names[i], out);
             if (color)
                 writeCString("\033[0m", out);
 
@@ -205,16 +206,17 @@ void PrettyCompactBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind po
     WidthsPerColumn widths;
     Widths max_widths;
     Widths name_widths;
-    calculateWidths(header, chunk, widths, max_widths, name_widths);
+    Strings names;
+    calculateWidths(header, chunk, widths, max_widths, name_widths, names);
 
-    writeHeader(header, max_widths, name_widths, false);
+    writeHeader(header, max_widths, name_widths, names, false);
 
     for (size_t i = 0; i < num_rows && total_rows + i < max_rows; ++i)
         writeRow(i, header, chunk, widths, max_widths);
 
     if ((num_rows >= format_settings.pretty.output_format_pretty_display_footer_column_names_min_rows) && format_settings.pretty.output_format_pretty_display_footer_column_names)
     {
-        writeHeader(header, max_widths, name_widths, true);
+        writeHeader(header, max_widths, name_widths, names, true);
     }
     else
     {
diff --git a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h
index b0b7c2ad8f46..9c696facde3d 100644
--- a/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h
+++ b/src/Processors/Formats/Impl/PrettyCompactBlockOutputFormat.h
@@ -17,7 +17,7 @@ class PrettyCompactBlockOutputFormat : public PrettyBlockOutputFormat
     String getName() const override { return "PrettyCompactBlockOutputFormat"; }
 
 private:
-    void writeHeader(const Block & block, const Widths & max_widths, const Widths & name_widths, bool write_footer);
+    void writeHeader(const Block & block, const Widths & max_widths, const Widths & name_widths, const Strings & names, bool write_footer);
     void writeBottom(const Widths & max_widths);
     void writeRow(
         size_t row_num,
diff --git a/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp
index 5b481099e419..0fbbd1e09290 100644
--- a/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/PrettySpaceBlockOutputFormat.cpp
@@ -32,7 +32,8 @@ void PrettySpaceBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port
     WidthsPerColumn widths;
     Widths max_widths;
     Widths name_widths;
-    calculateWidths(header, chunk, widths, max_widths, name_widths);
+    Strings names;
+    calculateWidths(header, chunk, widths, max_widths, name_widths, names);
 
     if (format_settings.pretty.output_format_pretty_row_numbers)
         writeString(String(row_number_width, ' '), out);
@@ -55,7 +56,7 @@ void PrettySpaceBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port
 
                 if (color)
                     writeCString("\033[1m", out);
-                writeString(col.name, out);
+                writeString(names[i], out);
                 if (color)
                     writeCString("\033[0m", out);
             }
@@ -63,7 +64,7 @@ void PrettySpaceBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port
             {
                 if (color)
                     writeCString("\033[1m", out);
-                writeString(col.name, out);
+                writeString(names[i], out);
                 if (color)
                     writeCString("\033[0m", out);
 
diff --git a/src/Processors/Formats/Impl/VerticalRowOutputFormat.cpp b/src/Processors/Formats/Impl/VerticalRowOutputFormat.cpp
index 3cc3d2be2ad0..20de3f7be0ed 100644
--- a/src/Processors/Formats/Impl/VerticalRowOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/VerticalRowOutputFormat.cpp
@@ -26,22 +26,22 @@ VerticalRowOutputFormat::VerticalRowOutputFormat(
     Widths name_widths(columns);
     size_t max_name_width = 0;
 
+    names_and_paddings.resize(columns);
+    is_number.resize(columns);
+
     for (size_t i = 0; i < columns; ++i)
     {
         /// Note that number of code points is just a rough approximation of visible string width.
         const String & name = sample.getByPosition(i).name;
 
-        name_widths[i] = UTF8::computeWidth(reinterpret_cast<const UInt8 *>(name.data()), name.size());
-        max_name_width = std::max(name_widths[i], max_name_width);
-    }
+        auto [name_cut, width] = truncateName(name,
+          format_settings.pretty.max_column_name_width_cut_to,
+          format_settings.pretty.max_column_name_width_min_chars_to_cut,
+          format_settings.pretty.charset != FormatSettings::Pretty::Charset::UTF8);
 
-    names_and_paddings.resize(columns);
-    is_number.resize(columns);
-    for (size_t i = 0; i < columns; ++i)
-    {
-        WriteBufferFromString buf(names_and_paddings[i]);
-        writeString(sample.getByPosition(i).name, buf);
-        writeCString(": ", buf);
+        name_widths[i] = width;
+        max_name_width = std::max(width, max_name_width);
+        names_and_paddings[i] = name_cut + ": ";
     }
 
     for (size_t i = 0; i < columns; ++i)
diff --git a/src/Processors/IProcessor.h b/src/Processors/IProcessor.h
index af34f9b34099..491f327f0e79 100644
--- a/src/Processors/IProcessor.h
+++ b/src/Processors/IProcessor.h
@@ -69,7 +69,6 @@ using Processors = std::vector<ProcessorPtr>;
   *
   * Simple transformation. Has single input and single output port. Pulls data, transforms it and pushes to output port.
   * Example: expression calculator.
-  * TODO Better to make each function a separate processor. It's better for pipeline analysis. Also keep in mind 'sleep' and 'rand' functions.
   *
   * Squashing or filtering transformation. Pulls data, possibly accumulates it, and sometimes pushes it to output port.
   * Examples: DISTINCT, WHERE, squashing of blocks for INSERT SELECT.
@@ -151,7 +150,7 @@ class IProcessor
         /// You may call 'work' method and processor will do some work synchronously.
         Ready,
 
-        /// You may call 'schedule' method and processor will return descriptor.
+        /// You may call 'schedule' method and processor will return a descriptor.
         /// You need to poll this descriptor and call work() afterwards.
         Async,
 
