{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 60494,
  "instance_id": "ClickHouse__ClickHouse-60494",
  "issue_numbers": [
    "60152"
  ],
  "base_commit": "89fff6852a08c7e322da9965f3ac56b0d77ef289",
  "patch": "diff --git a/docs/en/sql-reference/functions/bit-functions.md b/docs/en/sql-reference/functions/bit-functions.md\nindex 3c07fe8bcbe4..0951c783aae7 100644\n--- a/docs/en/sql-reference/functions/bit-functions.md\n+++ b/docs/en/sql-reference/functions/bit-functions.md\n@@ -167,6 +167,10 @@ Result:\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n+## byteSlice(s, offset, length)\n+\n+See function [substring](string-functions.md#substring).\n+\n ## bitTest\n \n Takes any integer and converts it into [binary form](https://en.wikipedia.org/wiki/Binary_number), returns the value of a bit at specified position. The countdown starts from 0 from the right to the left.\ndiff --git a/docs/en/sql-reference/functions/string-functions.md b/docs/en/sql-reference/functions/string-functions.md\nindex 9ae403be5241..3b49e4954edd 100644\n--- a/docs/en/sql-reference/functions/string-functions.md\n+++ b/docs/en/sql-reference/functions/string-functions.md\n@@ -558,6 +558,7 @@ substring(s, offset[, length])\n Alias:\n - `substr`\n - `mid`\n+- `byteSlice`\n \n **Arguments**\n \ndiff --git a/src/Functions/substring.cpp b/src/Functions/substring.cpp\nindex e3dfdf3de5eb..e809914f5f02 100644\n--- a/src/Functions/substring.cpp\n+++ b/src/Functions/substring.cpp\n@@ -189,6 +189,7 @@ REGISTER_FUNCTION(Substring)\n     factory.registerFunction<FunctionSubstring<false>>({}, FunctionFactory::CaseInsensitive);\n     factory.registerAlias(\"substr\", \"substring\", FunctionFactory::CaseInsensitive); // MySQL alias\n     factory.registerAlias(\"mid\", \"substring\", FunctionFactory::CaseInsensitive); /// MySQL alias\n+    factory.registerAlias(\"byteSlice\", \"substring\", FunctionFactory::CaseInsensitive); /// resembles PostgreSQL's get_byte function, similar to ClickHouse's bitSlice\n \n     factory.registerFunction<FunctionSubstring<true>>({}, FunctionFactory::CaseSensitive);\n }\ndiff --git a/utils/check-style/aspell-ignore/en/aspell-dict.txt b/utils/check-style/aspell-ignore/en/aspell-dict.txt\nindex 3221a64beafd..6db3ac23b052 100644\n--- a/utils/check-style/aspell-ignore/en/aspell-dict.txt\n+++ b/utils/check-style/aspell-ignore/en/aspell-dict.txt\n@@ -773,7 +773,6 @@ ReferenceKeyed\n Refreshable\n RegexpTree\n RemoteRead\n-SharedMergeTree\n ReplacingMergeTree\n ReplicasMaxAbsoluteDelay\n ReplicasMaxInsertsInQueue\n@@ -842,6 +841,8 @@ Sematext\n SendExternalTables\n SendScalars\n ShareAlike\n+SharedMergeTree\n+Shortkeys\n Shortkeys\n SimHash\n Simhash\n@@ -1239,6 +1240,7 @@ buildable\n builtins\n byteHammingDistance\n byteSize\n+byteSlice\n byteSwap\n bytebase\n bytesToCutForIPv\n@@ -1617,7 +1619,6 @@ greaterorequals\n greenspace\n groupArray\n groupArrayInsertAt\n-grouparrayintersect\n groupArrayIntersect\n groupArrayLast\n groupArrayMovingAvg\n@@ -1634,6 +1635,7 @@ groupBitmapXor\n groupUniqArray\n grouparray\n grouparrayinsertat\n+grouparrayintersect\n grouparraylast\n grouparraymovingavg\n grouparraymovingsum\n@@ -1699,6 +1701,7 @@ hyperscan\n hypot\n hyvor\n iTerm\n+iTerm\n icosahedron\n icudata\n idempotency\n@@ -1746,7 +1749,6 @@ isValidJSON\n isValidUTF\n isZeroOrNull\n iteratively\n-iTerm\n jaccard\n jaccardIndex\n jaroSimilarity\n@@ -2320,7 +2322,6 @@ shardNum\n sharded\n sharding\n shortcircuit\n-Shortkeys\n shortkeys\n shoutout\n simdjson\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01033_function_substring.reference b/tests/queries/0_stateless/01033_function_substring.reference\nindex b0fac36e24ad..362a14f80f38 100644\n--- a/tests/queries/0_stateless/01033_function_substring.reference\n+++ b/tests/queries/0_stateless/01033_function_substring.reference\n@@ -170,4 +170,6 @@ g\n \n \n \n-UBSAN bug\n+-- UBSAN bug\n+-- Alias\n+el\ndiff --git a/tests/queries/0_stateless/01033_function_substring.sql b/tests/queries/0_stateless/01033_function_substring.sql\nindex 82c6b5859e28..9955700f302f 100644\n--- a/tests/queries/0_stateless/01033_function_substring.sql\n+++ b/tests/queries/0_stateless/01033_function_substring.sql\n@@ -132,7 +132,7 @@ SELECT substring(s, l, r) FROM t;\n \n DROP table if exists t;\n \n-SELECT 'UBSAN bug';\n+SELECT '-- UBSAN bug';\n \n /** NOTE: The behaviour of substring and substringUTF8 is inconsistent when negative offset is greater than string size:\n   * substring:\n@@ -144,3 +144,6 @@ SELECT 'UBSAN bug';\n   * This may be subject for change.\n   */\n SELECT substringUTF8('hello, \u00d0\u00bf\u00d1\ufffd\u00d0\u00b8\u00d0\u00b2\u00d0\u00b5\u00d1\ufffd', -9223372036854775808, number) FROM numbers(16) FORMAT Null;\n+\n+SELECT '-- Alias';\n+SELECT byteSlice('hello', 2, 2);\n",
  "problem_statement": "Implement PostgreSQL `get_byte` function\n**Use case**\r\n\r\ntrying to make UDF of UUIDv1 parser, there's some [solution](https://stackoverflow.com/questions/24178485/cast-or-extract-timestamp-from-v1-uuid-in-postgresql) that uses postgre's [get_byte](https://www.postgresql.org/docs/9.0/functions-binarystring.html), and I believe it would be quite useful\r\n\r\n**Describe the solution you'd like**\r\n\r\nimplement `get_byte(string, position)` just like Postgres'\r\n\r\n**Describe alternatives you've considered**\r\n\r\nwriting the UDF in golang or something\n",
  "hints_text": "(Likely) related to #60148\nWhile at it, we should also implement `get_bit`, plus the respective `set_*` functions.\nHi, I want to try this task.\n@rogeryk That's nice, I have assigned you to this issue.\nThe calculation of index in Posgres is a bit strange\r\n> get_bit and set_bit number bits from the right within each byte; for example bit 0 is the least significant bit of the first byte, and bit 15 is the most significant bit of the second byte.\r\n\r\nIn Clickhouse, the indexe of bitTest and bitSlice are calculated from the left. \r\nShould we all follow the clickhous approach?\nI was not aware of functions `bitTest` and `bitSlice`. Actually, passing `length = 8` to `bitSlice` will achieve the desired result. We can ignore for this issue that `bitTest` exists. `bitSlice` counts starting from the most significant bit, i.e. left-to-right.\r\n\r\n\r\nWhat we should do is add `byteSlice` as a convenience function: it will be similar to `bitSlice` but return N bytes, counting from the M-th most significant bit left-to-right. That way, we'll stay consistent with the existing functions in ClickHouse.\n@kokizzu `bitSlice` should have met your requirements, I did a test below.\r\n```sql\r\nselect '448f2c3c-d602-11ee-a506-0242ac120002' as uuid,\r\n       UUIDStringToNum(uuid, 1)               as bytes,\r\n       reinterpretAsInt64(reverse(bitSlice(bytes, 1, 32))) +\r\n       reinterpretAsInt64(reverse(bitSlice(bytes, 33, 16))) * pow(2, 32) +\r\n       bitAnd(reinterpretAsInt64(reverse(bitSlice(bytes, 49, 16))), 0xfff) * pow(2, 48) as ut,\r\n       toDateTime((ut - 122192928000000000)/10000000)\r\n```\r\n```txt\r\n448f2c3c-d602-11ee-a506-0242ac120002,\"D\ufffd,<\ufffd\u0002\u0011\ufffd\u0006\u0002B\ufffd\u0012\u0000\u0002\",139283943723576384,2024-02-28 06:26:12\r\n\r\n```\n@rschu1ze `byteSlice`  doesn\u2019t seem to be needed either. Clickhouse already have `substring`. Or just add an alias",
  "created_at": "2024-02-28T13:34:55Z",
  "modified_files": [
    "docs/en/sql-reference/functions/bit-functions.md",
    "docs/en/sql-reference/functions/string-functions.md",
    "src/Functions/substring.cpp",
    "utils/check-style/aspell-ignore/en/aspell-dict.txt"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01033_function_substring.reference",
    "tests/queries/0_stateless/01033_function_substring.sql"
  ]
}