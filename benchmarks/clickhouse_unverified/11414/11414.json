{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11414,
  "instance_id": "ClickHouse__ClickHouse-11414",
  "issue_numbers": [
    "11380"
  ],
  "base_commit": "5d3383edbe89967114256083582c400eea5221fe",
  "patch": "diff --git a/src/Interpreters/ActionsVisitor.cpp b/src/Interpreters/ActionsVisitor.cpp\nindex b5d9f30573e5..512319375d50 100644\n--- a/src/Interpreters/ActionsVisitor.cpp\n+++ b/src/Interpreters/ActionsVisitor.cpp\n@@ -512,7 +512,8 @@ void ActionsMatcher::visit(const ASTFunction & node, const ASTPtr & ast, Data &\n                 if (data.only_consts)\n                     arguments_present = false;\n                 else\n-                    throw Exception(\"Unknown identifier: \" + child_column_name, ErrorCodes::UNKNOWN_IDENTIFIER);\n+                    throw Exception(\"Unknown identifier: \" + child_column_name + \" there are columns: \" + data.getSampleBlock().dumpNames(),\n+                                    ErrorCodes::UNKNOWN_IDENTIFIER);\n             }\n         }\n     }\ndiff --git a/src/Interpreters/HashJoin.cpp b/src/Interpreters/HashJoin.cpp\nindex 9e2ad6647657..d18649c4c175 100644\n--- a/src/Interpreters/HashJoin.cpp\n+++ b/src/Interpreters/HashJoin.cpp\n@@ -107,7 +107,7 @@ static ColumnWithTypeAndName correctNullability(ColumnWithTypeAndName && column,\n {\n     if (nullable)\n     {\n-        JoinCommon::convertColumnToNullable(column);\n+        JoinCommon::convertColumnToNullable(column, true);\n         if (column.type->isNullable() && !negative_null_map.empty())\n         {\n             MutableColumnPtr mutable_column = IColumn::mutate(std::move(column.column));\ndiff --git a/src/Interpreters/join_common.cpp b/src/Interpreters/join_common.cpp\nindex e3ca9258892e..6dd3a202d4d8 100644\n--- a/src/Interpreters/join_common.cpp\n+++ b/src/Interpreters/join_common.cpp\n@@ -16,8 +16,14 @@ namespace ErrorCodes\n namespace JoinCommon\n {\n \n-void convertColumnToNullable(ColumnWithTypeAndName & column)\n+void convertColumnToNullable(ColumnWithTypeAndName & column, bool low_card_nullability)\n {\n+    if (low_card_nullability && column.type->lowCardinality())\n+    {\n+        column.column = recursiveRemoveLowCardinality(column.column);\n+        column.type = recursiveRemoveLowCardinality(column.type);\n+    }\n+\n     if (column.type->isNullable() || !column.type->canBeInsideNullable())\n         return;\n \ndiff --git a/src/Interpreters/join_common.h b/src/Interpreters/join_common.h\nindex b69a0a4a993d..47fa082e7009 100644\n--- a/src/Interpreters/join_common.h\n+++ b/src/Interpreters/join_common.h\n@@ -13,7 +13,7 @@ using ColumnRawPtrs = std::vector<const IColumn *>;\n namespace JoinCommon\n {\n \n-void convertColumnToNullable(ColumnWithTypeAndName & column);\n+void convertColumnToNullable(ColumnWithTypeAndName & column, bool low_card_nullability = false);\n void convertColumnsToNullable(Block & block, size_t starting_pos = 0);\n void removeColumnNullability(ColumnWithTypeAndName & column);\n Columns materializeColumns(const Block & block, const Names & names);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.reference b/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.reference\nnew file mode 100644\nindex 000000000000..d1b29b46df69\n--- /dev/null\n+++ b/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.reference\n@@ -0,0 +1,29 @@\n+1\tl\t\\N\tNullable(String)\n+2\t\t\\N\tNullable(String)\n+1\tl\t\\N\tNullable(String)\n+2\t\t\\N\tNullable(String)\n+-\n+1\tl\t\\N\tNullable(String)\n+0\t\t\\N\tNullable(String)\n+0\t\t\\N\tNullable(String)\n+1\tl\t\\N\tNullable(String)\n+-\n+1\tl\t\\N\tNullable(String)\n+0\t\t\\N\tNullable(String)\n+0\t\t\\N\tNullable(String)\n+1\tl\t\\N\tNullable(String)\n+-\n+1\tl\t\\N\tNullable(String)\n+2\t\t\\N\tNullable(String)\n+1\tl\t\\N\tNullable(String)\n+2\t\t\\N\tNullable(String)\n+-\n+1\tl\t\\N\tNullable(String)\n+\\N\t\t\\N\tNullable(String)\n+1\tl\t\\N\tNullable(String)\n+\\N\t\t\\N\tNullable(String)\n+-\n+1\tl\t\\N\tNullable(String)\n+\\N\t\t\\N\tNullable(String)\n+1\tl\t\\N\tNullable(String)\n+\\N\t\t\\N\tNullable(String)\ndiff --git a/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.sql b/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.sql\nnew file mode 100644\nindex 000000000000..edaf2870e898\n--- /dev/null\n+++ b/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.sql\n@@ -0,0 +1,50 @@\n+DROP TABLE IF EXISTS t;\n+DROP TABLE IF EXISTS nr;\n+\n+CREATE TABLE t (`x` UInt32, `lc` LowCardinality(String)) ENGINE = Memory;\n+CREATE TABLE nr (`x` Nullable(UInt32), `lc` Nullable(String)) ENGINE = Memory;\n+\n+INSERT INTO t VALUES (1, 'l');\n+INSERT INTO nr VALUES (2, NULL);\n+\n+SET join_use_nulls = 0;\n+\n+SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l LEFT JOIN nr AS r USING (x) ORDER BY x;\n+SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l RIGHT JOIN nr AS r USING (x) ORDER BY x;\n+SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l FULL JOIN nr AS r USING (x) ORDER BY x;\n+\n+SELECT '-';\n+\n+SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l LEFT JOIN nr AS r USING (lc) ORDER BY x;\n+SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x;\n+SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l FULL JOIN nr AS r USING (lc) ORDER BY x;\n+\n+SELECT '-';\n+\n+SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l LEFT JOIN nr AS r USING (lc) ORDER BY x;\n+SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x;\n+SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l FULL JOIN nr AS r USING (lc) ORDER BY x;\n+\n+SELECT '-';\n+\n+SET join_use_nulls = 1;\n+\n+SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l LEFT JOIN nr AS r USING (x) ORDER BY x;\n+SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l RIGHT JOIN nr AS r USING (x) ORDER BY x;\n+SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l FULL JOIN nr AS r USING (x) ORDER BY x;\n+\n+SELECT '-';\n+\n+SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l LEFT JOIN nr AS r USING (lc) ORDER BY x;\n+SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x;\n+SELECT x, lc, r.lc, toTypeName(r.lc) FROM t AS l FULL JOIN nr AS r USING (lc) ORDER BY x;\n+\n+SELECT '-';\n+\n+SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l LEFT JOIN nr AS r USING (lc) ORDER BY x;\n+SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l RIGHT JOIN nr AS r USING (lc) ORDER BY x;\n+SELECT x, lc, materialize(r.lc) y, toTypeName(y) FROM t AS l FULL JOIN nr AS r USING (lc) ORDER BY x;\n+\n+\n+DROP TABLE t;\n+DROP TABLE nr;\n",
  "problem_statement": "Bad cast from type DB::ColumnString to DB::ColumnNullable\n```\r\nCREATE TABLE l_lc\r\n(\r\n    `x` UInt32, \r\n    `lc` LowCardinality(String)\r\n)\r\nENGINE = Memory;\r\n\r\nCREATE TABLE nr\r\n(\r\n    `x` Nullable(UInt32), \r\n    `lc` Nullable(String)\r\n)\r\nENGINE = Memory;\r\n\r\nINSERT INTO nr VALUES (0, 'str');\r\n\r\nSELECT l.lc, materialize(r.lc), r.lc, r.lc, toTypeName(l.lc) FROM l_lc AS l FULL OUTER JOIN nr AS r USING (lc);\r\n```\r\n\r\n@4ertus2 fyi, this is modeled after 01049_join_low_card_bug.\n",
  "hints_text": "",
  "created_at": "2020-06-03T18:48:41Z",
  "modified_files": [
    "src/Interpreters/ActionsVisitor.cpp",
    "src/Interpreters/HashJoin.cpp",
    "src/Interpreters/join_common.cpp",
    "src/Interpreters/join_common.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.reference",
    "b/tests/queries/0_stateless/01142_join_lc_and_nullable_in_key.sql"
  ]
}