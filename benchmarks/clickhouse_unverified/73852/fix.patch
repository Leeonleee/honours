diff --git a/src/Core/FormatFactorySettings.h b/src/Core/FormatFactorySettings.h
index 661518007b1d..c432f46bb349 100644
--- a/src/Core/FormatFactorySettings.h
+++ b/src/Core/FormatFactorySettings.h
@@ -911,6 +911,13 @@ The value 0 means - never cut.
 )", 0) \
     DECLARE(UInt64, output_format_pretty_max_value_width_apply_for_single_value, false, R"(
 Only cut values (see the `output_format_pretty_max_value_width` setting) when it is not a single value in a block. Otherwise output it entirely, which is useful for the `SHOW CREATE TABLE` query.
+)", 0) \
+DECLARE(UInt64, output_format_pretty_squash_consecutive_ms, 50, R"(
+Wait for the next block for up to specified number of milliseconds and squash it to the previous before writing.
+This avoids frequent output of too small blocks, but still allows to display data in a streaming fashion.
+)", 0) \
+DECLARE(UInt64, output_format_pretty_squash_max_wait_ms, 1000, R"(
+Output the pending block in pretty formats if more than the specified number of milliseconds has passed since the previous output.
 )", 0) \
     DECLARE(UInt64Auto, output_format_pretty_color, "auto", R"(
 Use ANSI escape sequences in Pretty formats. 0 - disabled, 1 - enabled, 'auto' - enabled if a terminal.
diff --git a/src/Core/SettingsChangesHistory.cpp b/src/Core/SettingsChangesHistory.cpp
index 773538bf7d94..a4d23332ef75 100644
--- a/src/Core/SettingsChangesHistory.cpp
+++ b/src/Core/SettingsChangesHistory.cpp
@@ -82,6 +82,8 @@ const VersionToSettingsChangesMap & getSettingsChangesHistory()
             {"output_format_orc_writer_time_zone_name", "GMT", "GMT", "The time zone name for ORC writer, the default ORC writer's time zone is GMT."},
             {"output_format_pretty_highlight_trailing_spaces", false, true, "A new setting."},
             {"allow_experimental_bfloat16_type", false, true, "Add new BFloat16 type"},
+            {"output_format_pretty_squash_consecutive_ms", 0, 50, "Add new setting"},
+            {"output_format_pretty_squash_max_wait_ms", 0, 1000, "Add new setting"},
             {"output_format_pretty_max_column_name_width_cut_to", 0, 24, "A new setting"},
             {"output_format_pretty_max_column_name_width_min_chars_to_cut", 0, 4, "A new setting"},
             {"max_autoincrement_series", 1000, 1000, "A new setting"},
diff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp
index 32c22861854c..b94b4e3db1d7 100644
--- a/src/Formats/FormatFactory.cpp
+++ b/src/Formats/FormatFactory.cpp
@@ -218,11 +218,13 @@ FormatSettings getFormatSettings(const ContextPtr & context, const Settings & se
     format_settings.pretty.max_value_width = settings[Setting::output_format_pretty_max_value_width];
     format_settings.pretty.max_value_width_apply_for_single_value = settings[Setting::output_format_pretty_max_value_width_apply_for_single_value];
     format_settings.pretty.highlight_digit_groups = settings[Setting::output_format_pretty_highlight_digit_groups];
+    format_settings.pretty.row_numbers = settings[Setting::output_format_pretty_row_numbers];
+    format_settings.pretty.single_large_number_tip_threshold = settings[Setting::output_format_pretty_single_large_number_tip_threshold];
+    format_settings.pretty.display_footer_column_names = settings[Setting::output_format_pretty_display_footer_column_names];
+    format_settings.pretty.display_footer_column_names_min_rows = settings[Setting::output_format_pretty_display_footer_column_names_min_rows];
+    format_settings.pretty.squash_consecutive_ms = settings[Setting::output_format_pretty_squash_consecutive_ms];
+    format_settings.pretty.squash_max_wait_ms = settings[Setting::output_format_pretty_squash_max_wait_ms];
     format_settings.pretty.highlight_trailing_spaces = settings[Setting::output_format_pretty_highlight_trailing_spaces];
-    format_settings.pretty.output_format_pretty_row_numbers = settings[Setting::output_format_pretty_row_numbers];
-    format_settings.pretty.output_format_pretty_single_large_number_tip_threshold = settings[Setting::output_format_pretty_single_large_number_tip_threshold];
-    format_settings.pretty.output_format_pretty_display_footer_column_names = settings[Setting::output_format_pretty_display_footer_column_names];
-    format_settings.pretty.output_format_pretty_display_footer_column_names_min_rows = settings[Setting::output_format_pretty_display_footer_column_names_min_rows];
     format_settings.protobuf.input_flatten_google_wrappers = settings[Setting::input_format_protobuf_flatten_google_wrappers];
     format_settings.protobuf.output_nullables_with_google_wrappers = settings[Setting::output_format_protobuf_nullables_with_google_wrappers];
     format_settings.protobuf.skip_fields_with_unsupported_types_in_schema_inference = settings[Setting::input_format_protobuf_skip_fields_with_unsupported_types_in_schema_inference];
diff --git a/src/Formats/FormatSettings.h b/src/Formats/FormatSettings.h
index 884f4157f79c..50d933cd9268 100644
--- a/src/Formats/FormatSettings.h
+++ b/src/Formats/FormatSettings.h
@@ -313,10 +313,13 @@ struct FormatSettings
         /// Set to 2 for auto
         UInt64 color = 2;
 
-        bool output_format_pretty_row_numbers = false;
-        UInt64 output_format_pretty_single_large_number_tip_threshold = 1'000'000;
-        UInt64 output_format_pretty_display_footer_column_names = 1;
-        UInt64 output_format_pretty_display_footer_column_names_min_rows = 50;
+        bool row_numbers = false;
+        UInt64 single_large_number_tip_threshold = 1'000'000;
+        UInt64 display_footer_column_names = 1;
+        UInt64 display_footer_column_names_min_rows = 50;
+
+        UInt64 squash_consecutive_ms = 50;
+        UInt64 squash_max_wait_ms = 1000;
 
         enum class Charset : uint8_t
         {
diff --git a/src/Formats/PrettyFormatHelpers.cpp b/src/Formats/PrettyFormatHelpers.cpp
index 7548b846827a..b85ada9f96d1 100644
--- a/src/Formats/PrettyFormatHelpers.cpp
+++ b/src/Formats/PrettyFormatHelpers.cpp
@@ -28,7 +28,7 @@ void writeReadableNumberTip(WriteBuffer & out, const IColumn & column, size_t ro
         return;
 
     auto value = column.getFloat64(row);
-    auto threshold = settings.pretty.output_format_pretty_single_large_number_tip_threshold;
+    auto threshold = settings.pretty.single_large_number_tip_threshold;
 
     if (threshold && isFinite(value) && abs(value) > threshold)
     {
diff --git a/src/Processors/Formats/IOutputFormat.h b/src/Processors/Formats/IOutputFormat.h
index 300267caf47c..c34ddb893e30 100644
--- a/src/Processors/Formats/IOutputFormat.h
+++ b/src/Processors/Formats/IOutputFormat.h
@@ -209,6 +209,9 @@ class IOutputFormat : public IProcessor
     Statistics statistics;
     std::atomic_bool has_progress_update_to_write = false;
 
+    /// To serialize the calls to writeProgress (which could be called from another thread) and other writing methods.
+    std::mutex writing_mutex;
+
 private:
     size_t rows_read_before = 0;
     bool are_totals_written = false;
@@ -216,9 +219,6 @@ class IOutputFormat : public IProcessor
     /// Counters for consumed chunks. Are used for QueryLog.
     size_t result_rows = 0;
     size_t result_bytes = 0;
-
-    /// To serialize the calls to writeProgress (which could be called from another thread) and other writing methods.
-    std::mutex writing_mutex;
 };
 
 }
diff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
index caa784a8b37e..c8633b4610dd 100644
--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp
@@ -124,14 +124,31 @@ void PrettyBlockOutputFormat::write(Chunk chunk, PortKind port_kind)
         total_rows += chunk.getNumRows();
         return;
     }
-    if (mono_block)
+    if (mono_block || format_settings.pretty.squash_consecutive_ms)
     {
         if (port_kind == PortKind::Main)
         {
+            if (format_settings.pretty.squash_consecutive_ms && !mono_block && !thread)
+            {
+                thread.emplace([this, thread_group = CurrentThread::getGroup()]
+                {
+                    SCOPE_EXIT_SAFE(
+                        if (thread_group)
+                            CurrentThread::detachFromGroupIfNotDetached();
+                    );
+                    if (thread_group)
+                        CurrentThread::attachToGroupIfDetached(thread_group);
+
+                    setThreadName("PrettyWriter");
+                    writingThread();
+                });
+            }
+
             if (mono_chunk)
                 mono_chunk.append(chunk);
             else
                 mono_chunk = std::move(chunk);
+            mono_chunk_condvar.notify_one();
             return;
         }
 
@@ -142,6 +159,21 @@ void PrettyBlockOutputFormat::write(Chunk chunk, PortKind port_kind)
     writeChunk(chunk, port_kind);
 }
 
+void PrettyBlockOutputFormat::writingThread()
+{
+    std::unique_lock lock(writing_mutex);
+    Stopwatch watch(CLOCK_MONOTONIC_COARSE);
+    while (!finish)
+    {
+        if (std::cv_status::timeout == mono_chunk_condvar.wait_for(lock, std::chrono::milliseconds(format_settings.pretty.squash_consecutive_ms))
+            || watch.elapsedMilliseconds() > format_settings.pretty.squash_max_wait_ms)
+        {
+            writeMonoChunkIfNeeded();
+            watch.restart();
+        }
+    }
+}
+
 void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind)
 {
     auto num_rows = chunk.getNumRows();
@@ -162,7 +194,7 @@ void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind
     /// Create separators
 
     String left_blank;
-    if (format_settings.pretty.output_format_pretty_row_numbers)
+    if (format_settings.pretty.row_numbers)
         left_blank.assign(row_number_width, ' ');
 
     String header_begin;    /// ┏━━┳━━━┓
@@ -202,7 +234,6 @@ void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind
 
     std::string_view vertical_bold_bar   = unicode ? "┃" : "|";
     std::string_view vertical_bar        = unicode ? "│" : "|";
-    std::string_view horizontal_bold_bar = unicode ? "━" : "-";
     std::string_view horizontal_bar      = unicode ? "─" : "-";
 
     if (style == Style::Full)
@@ -390,7 +421,7 @@ void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind
             if (i != 0)
                 writeString(rows_separator, out);
 
-            if (format_settings.pretty.output_format_pretty_row_numbers)
+            if (format_settings.pretty.row_numbers)
             {
                 /// Write row number;
                 auto row_num_string = std::to_string(i + 1 + total_rows) + ". ";
@@ -436,7 +467,7 @@ void PrettyBlockOutputFormat::writeChunk(const Chunk & chunk, PortKind port_kind
     }
 
     /// output column names in the footer
-    if ((num_rows >= format_settings.pretty.output_format_pretty_display_footer_column_names_min_rows) && format_settings.pretty.output_format_pretty_display_footer_column_names)
+    if ((num_rows >= format_settings.pretty.display_footer_column_names_min_rows) && format_settings.pretty.display_footer_column_names)
     {
         writeString(footer_begin, out);
         write_names(false);
@@ -543,10 +574,33 @@ void PrettyBlockOutputFormat::writeMonoChunkIfNeeded()
     }
 }
 
+void PrettyBlockOutputFormat::stopThread()
+{
+    if (thread)
+    {
+        finish = true;
+        mono_chunk_condvar.notify_one();
+    }
+}
+
+PrettyBlockOutputFormat::~PrettyBlockOutputFormat()
+{
+    if (thread)
+    {
+        stopThread();
+        thread->join();
+    }
+}
+
 void PrettyBlockOutputFormat::writeSuffix()
 {
+    stopThread();
     writeMonoChunkIfNeeded();
+    writeSuffixImpl();
+}
 
+void PrettyBlockOutputFormat::writeSuffixImpl()
+{
     if (total_rows >= format_settings.pretty.max_rows)
     {
         if (style == Style::Space)
diff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
index 7773708e258b..671c09abefc8 100644
--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.h
@@ -26,7 +26,10 @@ class PrettyBlockOutputFormat : public IOutputFormat
 
     /// no_escapes - do not use ANSI escape sequences - to display in the browser, not in the console.
     PrettyBlockOutputFormat(WriteBuffer & out_, const Block & header_, const FormatSettings & format_settings_, Style style_, bool mono_block_, bool color_);
+    ~PrettyBlockOutputFormat() override;
+
     String getName() const override { return "PrettyBlockOutputFormat"; }
+
 protected:
     void consume(Chunk) override;
     void consumeTotals(Chunk) override;
@@ -46,6 +49,7 @@ class PrettyBlockOutputFormat : public IOutputFormat
     virtual void writeChunk(const Chunk & chunk, PortKind port_kind);
     void writeMonoChunkIfNeeded();
     void writeSuffix() override;
+    virtual void writeSuffixImpl();
 
     void onRowsReadBeforeUpdate() override { total_rows = getRowsReadBefore(); }
 
@@ -73,6 +77,12 @@ class PrettyBlockOutputFormat : public IOutputFormat
     bool color;
     /// For mono_block == true only
     Chunk mono_chunk;
+    /// Implements squashing of chunks by time
+    std::condition_variable mono_chunk_condvar;
+    std::optional<ThreadFromGlobalPool> thread;
+    std::atomic_bool finish{false};
+    void writingThread();
+    void stopThread();
 };
 
 }
