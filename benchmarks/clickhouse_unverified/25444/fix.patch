diff --git a/src/Databases/DatabaseAtomic.cpp b/src/Databases/DatabaseAtomic.cpp
index 6b8c470861db..7a529187c84d 100644
--- a/src/Databases/DatabaseAtomic.cpp
+++ b/src/Databases/DatabaseAtomic.cpp
@@ -210,7 +210,7 @@ void DatabaseAtomic::renameTable(ContextPtr local_context, const String & table_
     std::unique_lock<std::mutex> other_db_lock;
     if (inside_database)
         db_lock = std::unique_lock{mutex};
-    else  if (this < &other_db)
+    else if (this < &other_db)
     {
         db_lock = std::unique_lock{mutex};
         other_db_lock = std::unique_lock{other_db.mutex};
diff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp
index 28d88bdd8df9..38e5b266e131 100644
--- a/src/Interpreters/InterpreterCreateQuery.cpp
+++ b/src/Interpreters/InterpreterCreateQuery.cpp
@@ -1101,6 +1101,7 @@ BlockIO InterpreterCreateQuery::doCreateOrReplaceTable(ASTCreateQuery & create,
         [[maybe_unused]] bool done = doCreateTable(create, properties);
         assert(done);
         ast_drop->table = create.table;
+        ast_drop->is_dictionary = create.is_dictionary;
         ast_drop->database = create.database;
         ast_drop->kind = ASTDropQuery::Drop;
         created = true;
@@ -1113,14 +1114,18 @@ BlockIO InterpreterCreateQuery::doCreateOrReplaceTable(ASTCreateQuery & create,
             ASTRenameQuery::Table{create.database, create.table},
             ASTRenameQuery::Table{create.database, table_to_replace_name}
         };
+
         ast_rename->elements.push_back(std::move(elem));
         ast_rename->exchange = true;
+        ast_rename->dictionary = create.is_dictionary;
+
         InterpreterRenameQuery(ast_rename, getContext()).execute();
         replaced = true;
 
         InterpreterDropQuery(ast_drop, getContext()).execute();
 
         create.table = table_to_replace_name;
+
         return fillTableIfNeeded(create);
     }
     catch (...)
diff --git a/src/Parsers/ASTCreateQuery.cpp b/src/Parsers/ASTCreateQuery.cpp
index d6d424beb3a7..be973a988bdf 100644
--- a/src/Parsers/ASTCreateQuery.cpp
+++ b/src/Parsers/ASTCreateQuery.cpp
@@ -305,8 +305,16 @@ void ASTCreateQuery::formatQueryImpl(const FormatSettings & settings, FormatStat
     }
     else
     {
+        String action = "CREATE";
+        if (attach)
+            action = "ATTACH";
+        else if (replace_table && create_or_replace)
+            action = "CREATE OR REPLACE";
+        else if (replace_table)
+            action = "REPLACE";
+
         /// Always DICTIONARY
-        settings.ostr << (settings.hilite ? hilite_keyword : "") << (attach ? "ATTACH " : "CREATE ") << "DICTIONARY "
+        settings.ostr << (settings.hilite ? hilite_keyword : "") << action << " DICTIONARY "
                       << (if_not_exists ? "IF NOT EXISTS " : "") << (settings.hilite ? hilite_none : "")
                       << (!database.empty() ? backQuoteIfNeed(database) + "." : "") << backQuoteIfNeed(table);
         if (uuid != UUIDHelpers::Nil)
diff --git a/src/Parsers/ASTRenameQuery.h b/src/Parsers/ASTRenameQuery.h
index 8d300f430b31..611f81dc9e9a 100644
--- a/src/Parsers/ASTRenameQuery.h
+++ b/src/Parsers/ASTRenameQuery.h
@@ -75,12 +75,15 @@ class ASTRenameQuery : public ASTQueryWithOutput, public ASTQueryWithOnCluster
         }
 
         settings.ostr << (settings.hilite ? hilite_keyword : "");
-        if (exchange)
+        if (exchange && dictionary)
+            settings.ostr << "EXCHANGE DICTIONARIES ";
+        else if (exchange)
             settings.ostr << "EXCHANGE TABLES ";
         else if (dictionary)
             settings.ostr << "RENAME DICTIONARY ";
         else
             settings.ostr << "RENAME TABLE ";
+
         settings.ostr << (settings.hilite ? hilite_none : "");
 
         for (auto it = elements.cbegin(); it != elements.cend(); ++it)
diff --git a/src/Parsers/ParserCreateQuery.cpp b/src/Parsers/ParserCreateQuery.cpp
index 23a53ed3244c..d4525883e363 100644
--- a/src/Parsers/ParserCreateQuery.cpp
+++ b/src/Parsers/ParserCreateQuery.cpp
@@ -971,6 +971,8 @@ bool ParserCreateDictionaryQuery::parseImpl(IParser::Pos & pos, ASTPtr & node, E
 {
     ParserKeyword s_create("CREATE");
     ParserKeyword s_attach("ATTACH");
+    ParserKeyword s_replace("REPLACE");
+    ParserKeyword s_or_replace("OR REPLACE");
     ParserKeyword s_dictionary("DICTIONARY");
     ParserKeyword s_if_not_exists("IF NOT EXISTS");
     ParserKeyword s_on("ON");
@@ -982,6 +984,8 @@ bool ParserCreateDictionaryQuery::parseImpl(IParser::Pos & pos, ASTPtr & node, E
     ParserDictionary dictionary_p;
 
     bool if_not_exists = false;
+    bool replace = false;
+    bool or_replace = false;
 
     ASTPtr name;
     ASTPtr attributes;
@@ -989,13 +993,21 @@ bool ParserCreateDictionaryQuery::parseImpl(IParser::Pos & pos, ASTPtr & node, E
     String cluster_str;
 
     bool attach = false;
-    if (!s_create.ignore(pos, expected))
+
+    if (s_create.ignore(pos, expected))
     {
-        if (s_attach.ignore(pos, expected))
-            attach = true;
-        else
-            return false;
+        if (s_or_replace.ignore(pos, expected))
+        {
+            replace = true;
+            or_replace = true;
+        }
     }
+    else if (s_attach.ignore(pos, expected))
+        attach = true;
+    else if (s_replace.ignore(pos, expected))
+        replace = true;
+    else
+        return false;
 
     if (!s_dictionary.ignore(pos, expected))
         return false;
@@ -1031,6 +1043,8 @@ bool ParserCreateDictionaryQuery::parseImpl(IParser::Pos & pos, ASTPtr & node, E
     node = query;
     query->is_dictionary = true;
     query->attach = attach;
+    query->create_or_replace = or_replace;
+    query->replace_table = replace;
 
     auto dict_id = name->as<ASTTableIdentifier>()->getTableId();
     query->database = dict_id.database_name;
diff --git a/src/Storages/StorageDictionary.cpp b/src/Storages/StorageDictionary.cpp
index 5aeaff590e17..4c31f62b21f0 100644
--- a/src/Storages/StorageDictionary.cpp
+++ b/src/Storages/StorageDictionary.cpp
@@ -215,23 +215,26 @@ LoadablesConfigurationPtr StorageDictionary::getConfiguration() const
 
 void StorageDictionary::renameInMemory(const StorageID & new_table_id)
 {
+    auto old_table_id = getStorageID();
+    IStorage::renameInMemory(new_table_id);
+
     if (configuration)
     {
         configuration->setString("dictionary.database", new_table_id.database_name);
         configuration->setString("dictionary.name", new_table_id.table_name);
 
         const auto & external_dictionaries_loader = getContext()->getExternalDictionariesLoader();
-        external_dictionaries_loader.reloadConfig(getStorageID().getInternalDictionaryName());
+        auto result = external_dictionaries_loader.getLoadResult(old_table_id.getInternalDictionaryName());
 
-        auto result = external_dictionaries_loader.getLoadResult(getStorageID().getInternalDictionaryName());
-        if (!result.object)
-            return;
+        if (result.object)
+        {
+            const auto dictionary = std::static_pointer_cast<const IDictionary>(result.object);
+            dictionary->updateDictionaryName(new_table_id);
+        }
 
-        const auto dictionary = std::static_pointer_cast<const IDictionary>(result.object);
-        dictionary->updateDictionaryName(new_table_id);
+        external_dictionaries_loader.reloadConfig(old_table_id.getInternalDictionaryName());
+        dictionary_name = new_table_id.getFullNameNotQuoted();
     }
-
-    IStorage::renameInMemory(new_table_id);
 }
 
 void registerStorageDictionary(StorageFactory & factory)
diff --git a/src/Storages/StorageDictionary.h b/src/Storages/StorageDictionary.h
index e2ba2964b1d9..d074dec2c34b 100644
--- a/src/Storages/StorageDictionary.h
+++ b/src/Storages/StorageDictionary.h
@@ -45,7 +45,7 @@ class StorageDictionary final : public shared_ptr_helper<StorageDictionary>, pub
     Poco::Timestamp getUpdateTime() const;
     LoadablesConfigurationPtr getConfiguration() const;
 
-    const String & getDictionaryName() const { return dictionary_name; }
+    String getDictionaryName() const { return dictionary_name; }
 
     /// Specifies where the table is located relative to the dictionary.
     enum class Location
@@ -66,7 +66,7 @@ class StorageDictionary final : public shared_ptr_helper<StorageDictionary>, pub
     };
 
 private:
-    const String dictionary_name;
+    String dictionary_name;
     const Location location;
 
     mutable std::mutex dictionary_config_mutex;
