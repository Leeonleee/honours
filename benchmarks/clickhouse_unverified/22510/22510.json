{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 22510,
  "instance_id": "ClickHouse__ClickHouse-22510",
  "issue_numbers": [
    "22388",
    "22386"
  ],
  "base_commit": "e7df8893df59e8488b1c5b5ae3830d5a947401fd",
  "patch": "diff --git a/src/Interpreters/MergeJoin.cpp b/src/Interpreters/MergeJoin.cpp\nindex ddeaf0532259..a9f50cdda0e8 100644\n--- a/src/Interpreters/MergeJoin.cpp\n+++ b/src/Interpreters/MergeJoin.cpp\n@@ -76,6 +76,7 @@ int nullableCompareAt(const IColumn & left_column, const IColumn & right_column,\n     return left_column.compareAt(lhs_pos, rhs_pos, right_column, null_direction_hint);\n }\n \n+/// Get first and last row from sorted block\n Block extractMinMax(const Block & block, const Block & keys)\n {\n     if (block.rows() == 0)\n@@ -86,7 +87,7 @@ Block extractMinMax(const Block & block, const Block & keys)\n \n     for (size_t i = 0; i < columns.size(); ++i)\n     {\n-        const auto & src_column = block.getByName(keys.getByPosition(i).name);\n+        const auto & src_column = block.getByName(min_max.getByPosition(i).name);\n \n         columns[i]->insertFrom(*src_column.column, 0);\n         columns[i]->insertFrom(*src_column.column, block.rows() - 1);\n@@ -465,6 +466,7 @@ MergeJoin::MergeJoin(std::shared_ptr<TableJoin> table_join_, const Block & right\n \n     table_join->splitAdditionalColumns(right_sample_block, right_table_keys, right_columns_to_add);\n     JoinCommon::removeLowCardinalityInplace(right_table_keys);\n+    JoinCommon::removeLowCardinalityInplace(right_sample_block, table_join->keyNamesRight());\n \n     const NameSet required_right_keys = table_join->requiredRightKeys();\n     for (const auto & column : right_table_keys)\n@@ -485,6 +487,7 @@ MergeJoin::MergeJoin(std::shared_ptr<TableJoin> table_join_, const Block & right\n             left_blocks_buffer = std::make_shared<SortedBlocksBuffer>(left_sort_description, max_bytes);\n }\n \n+/// Has to be called even if totals are empty\n void MergeJoin::setTotals(const Block & totals_block)\n {\n     totals = totals_block;\ndiff --git a/src/Interpreters/MergeJoin.h b/src/Interpreters/MergeJoin.h\nindex a13d03049079..d145a69ce9dc 100644\n--- a/src/Interpreters/MergeJoin.h\n+++ b/src/Interpreters/MergeJoin.h\n@@ -76,12 +76,15 @@ class MergeJoin : public IJoin\n     Block right_table_keys;\n     Block right_columns_to_add;\n     SortedBlocksWriter::Blocks right_blocks;\n+\n+    /// Each block stores first and last row from corresponding sorted block on disk\n     Blocks min_max_right_blocks;\n     std::shared_ptr<SortedBlocksBuffer> left_blocks_buffer;\n     std::shared_ptr<RowBitmaps> used_rows_bitmap;\n     mutable std::unique_ptr<Cache> cached_right_blocks;\n     std::vector<std::shared_ptr<Block>> loaded_right_blocks;\n     std::unique_ptr<SortedBlocksWriter> disk_writer;\n+    /// Set of files with sorted blocks\n     SortedBlocksWriter::SortedFiles flushed_right_blocks;\n     Block totals;\n     std::atomic<bool> is_in_memory{true};\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01785_pmj_lc_bug.reference b/tests/queries/0_stateless/01785_pmj_lc_bug.reference\nnew file mode 100644\nindex 000000000000..98fb6a686563\n--- /dev/null\n+++ b/tests/queries/0_stateless/01785_pmj_lc_bug.reference\n@@ -0,0 +1,4 @@\n+1\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/01785_pmj_lc_bug.sql b/tests/queries/0_stateless/01785_pmj_lc_bug.sql\nnew file mode 100644\nindex 000000000000..722faa9b40d6\n--- /dev/null\n+++ b/tests/queries/0_stateless/01785_pmj_lc_bug.sql\n@@ -0,0 +1,14 @@\n+SET join_algorithm = 'partial_merge';\n+SET max_bytes_in_join = '100';\n+\n+CREATE TABLE foo_lc (n LowCardinality(String)) ENGINE = Memory;\n+CREATE TABLE foo (n String) ENGINE = Memory;\n+\n+INSERT INTO foo SELECT toString(number) AS n FROM system.numbers LIMIT 1025;\n+INSERT INTO foo_lc SELECT toString(number) AS n FROM system.numbers LIMIT 1025;\n+\n+SELECT 1025 == count(n) FROM foo_lc AS t1 ANY LEFT JOIN foo_lc AS t2 ON t1.n == t2.n;\n+SELECT 1025 == count(n) FROM foo AS t1 ANY LEFT JOIN foo_lc AS t2 ON t1.n == t2.n;\n+SELECT 1025 == count(n) FROM foo_lc AS t1 ANY LEFT JOIN foo AS t2 ON t1.n == t2.n;\n+\n+SELECT 1025 == count(n) FROM foo_lc AS t1 ALL LEFT JOIN foo_lc AS t2 ON t1.n == t2.n;\n",
  "problem_statement": "ASan report in MergeJoin.\n**Describe the bug**\r\nhttps://clickhouse-test-reports.s3.yandex.net/22328/43d9972f18d43c6736c08e67c01deb64b733109a/fuzzer_asan/server.log\r\n\r\n**How to reproduce**\r\n`SELECT * FROM (SELECT number AS l FROM system.numbers LIMIT 3) ANY LEFT JOIN (SELECT toLowCardinality(number) AS r FROM system.numbers LIMIT 1025) ON (l + 1025) = (r * 1)`\r\n\r\n```\r\nChanged settings: min_insert_block_size_rows = '0', min_insert_block_size_bytes = '0', max_threads = '16', totals_mode = 'after_having_auto', log_queries = '1', join_use_nulls = '0', joined_subquery_requires_alias = '0', max_rows_to_group_by = '100000', group_by_overflow_mode = 'any', max_bytes_in_join = '100', \r\n\r\njoin_algorithm = 'auto', \r\n\r\nmax_partitions_per_insert_block = '100', mutations_sync = '1', aggregate_functions_null_for_empty = '1'\r\n```\r\n\r\nMaybe the reason is the same as #22386.\r\n\r\nPS. We should not encourage people to use merge join algorithm until the issue will be fixed.\nMergeJoin: bad cast (UBSan).\n**Describe the bug**\r\nhttps://clickhouse-test-reports.s3.yandex.net/22289/c71da4a5c8e655f4bdfaa33b92ab022b97dfdf1a/fuzzer_ubsan/server.log\r\n\r\n`SELECT * FROM (SELECT number AS l FROM system.numbers LIMIT 3) AS s1 ANY LEFT JOIN (SELECT toLowCardinality(number) AS r FROM system.numbers LIMIT 1024) AS s2 ON (l + 1) = (r * 1)`\r\n\r\n```\r\n../src/Common/assert_cast.h:50:12: runtime error: downcast of address 0x7f986c30b6c0 which does not point to an object of type 'const DB::ColumnVector<DB::UInt64>'\r\n0x7f986c30b6c0: note: object is of type 'DB::ColumnLowCardinality'\r\n 00 00 00 00  88 20 96 09 00 00 00 00  01 00 00 00 98 7f 00 00  60 8a aa ae 9a 7f 00 00  00 28 72 2c\r\n              ^~~~~~~~~~~~~~~~~~~~~~~\r\n              vptr for 'DB::ColumnLowCardinality'\r\n\r\n    #0 0x1af6b158 in DB::ColumnVector<unsigned long> const& assert_cast<DB::ColumnVector<unsigned long> const&, DB::IColumn const&>(DB::IColumn const&) obj-x86_64-linux-gnu/../src/Common/assert_cast.h:50:12\r\n    #1 0x1af6b158 in DB::ColumnVector<unsigned long>::insertFrom(DB::IColumn const&, unsigned long) obj-x86_64-linux-gnu/../src/Columns/ColumnVector.h:130:24\r\n    #2 0x1abcde40 in DB::(anonymous namespace)::extractMinMax(DB::Block const&, DB::Block const&) obj-x86_64-linux-gnu/../src/Interpreters/MergeJoin.cpp:91:21\r\n    #3 0x1abd172e in DB::MergeJoin::mergeFlushedRightBlocks()::$_0::operator()(DB::Block const&) const obj-x86_64-linux-gnu/../src/Interpreters/MergeJoin.cpp:548:47\r\n    #4 0x1abd172e in decltype(std::__1::forward<DB::MergeJoin::mergeFlushedRightBlocks()::$_0&>(fp)(std::__1::forward<DB::Block const&>(fp0))) std::__1::__invoke<DB::MergeJoin::mergeFlushedRightBlocks()::$_0&, DB::Block const&>(DB::MergeJoin::mergeFlushedRightBlocks()::$_0&, DB::Block const&) obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3676:1\r\n    #5 0x1ac8bd8f in std::__1::function<void (DB::Block const&)>::operator()(DB::Block const&) const obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2560:12\r\n    #6 0x1ac8bd8f in DB::(anonymous namespace)::flushToManyFiles(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Block const&, DB::IBlockInputStream&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::function<void (DB::Block const&)>) obj-x86_64-linux-gnu/../src/Interpreters/SortedBlocksWriter.cpp:42:9\r\n    #7 0x1ac8bb3f in DB::SortedBlocksWriter::finishMerge(std::__1::function<void (DB::Block const&)>) obj-x86_64-linux-gnu/../src/Interpreters/SortedBlocksWriter.cpp:197:12\r\n    #8 0x1abcd751 in DB::MergeJoin::mergeFlushedRightBlocks() obj-x86_64-linux-gnu/../src/Interpreters/MergeJoin.cpp:552:41\r\n    #9 0x1abcc5f5 in DB::MergeJoin::setTotals(DB::Block const&) obj-x86_64-linux-gnu/../src/Interpreters/MergeJoin.cpp:491:5\r\n    #10 0x1bb7026a in DB::CreatingSetsTransform::finishSubquery() obj-x86_64-linux-gnu/../src/Processors/Transforms/CreatingSetsTransform.cpp:89:18\r\n    #11 0x1bb719cf in DB::CreatingSetsTransform::generate() obj-x86_64-linux-gnu/../src/Processors/Transforms/CreatingSetsTransform.cpp:145:5\r\n    #12 0x1b8e2e65 in DB::IAccumulatingTransform::work() obj-x86_64-linux-gnu/../src/Processors/IAccumulatingTransform.cpp:102:32\r\n```\r\n\r\n```\r\nChanged settings: \r\nmax_joined_block_size_rows = '2000', \r\nmax_threads = '16', \r\ndistributed_directory_monitor_sleep_time_ms = '10', \r\ndistributed_directory_monitor_max_sleep_time_ms = '100', \r\ndistributed_directory_monitor_batch_inserts = '1', \r\nallow_suspicious_low_cardinality_types = '1', \r\noptimize_skip_unused_shards = '1', \r\nlog_queries = '1', \r\nlog_queries_min_type = 'EXCEPTION_WHILE_PROCESSING', \r\njoin_use_nulls = '0', \r\njoin_default_strictness = 'ALL',                     <---\r\nmax_rows_to_read = '100000', \r\nmax_rows_in_join = '1000', \r\njoin_algorithm = 'partial_merge',                    <---\r\nmax_memory_usage = '50000000', \r\nsend_logs_level = 'fatal', \r\nprefer_localhost_replica = '1', \r\noptimize_move_functions_out_of_any = '0', \r\noptimize_on_insert = '0', \r\noptimize_aggregators_of_group_by_keys = '0', \r\noutput_format_pretty_max_column_pad_width = '250'\r\n```\r\n\r\nSimilar to #21619 but different.\n",
  "hints_text": "\n",
  "created_at": "2021-04-02T15:21:24Z",
  "modified_files": [
    "src/Interpreters/MergeJoin.cpp",
    "src/Interpreters/MergeJoin.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01785_pmj_lc_bug.reference",
    "b/tests/queries/0_stateless/01785_pmj_lc_bug.sql"
  ]
}