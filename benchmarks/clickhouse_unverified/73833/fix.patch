diff --git a/base/base/CMakeLists.txt b/base/base/CMakeLists.txt
index 3d236f52c365..a0cd41a086aa 100644
--- a/base/base/CMakeLists.txt
+++ b/base/base/CMakeLists.txt
@@ -35,6 +35,7 @@ set (SRCS
     safeExit.cpp
     throwError.cpp
     Numa.cpp
+    ask.cpp
     GitHash.generated.cpp
 )
 
diff --git a/base/base/ask.cpp b/base/base/ask.cpp
new file mode 100644
index 000000000000..ddedf19c8371
--- /dev/null
+++ b/base/base/ask.cpp
@@ -0,0 +1,21 @@
+#include <base/ask.h>
+
+#include <iostream>
+
+
+bool ask(std::string question)
+{
+    while (true)
+    {
+        std::string answer;
+        std::cout << question;
+        std::getline(std::cin, answer);
+        if (!std::cin.good())
+            return false;
+
+        if (answer.empty() || answer == "n" || answer == "N")
+            return false;
+        if (answer == "y" || answer == "Y")
+            return true;
+    }
+}
diff --git a/base/base/ask.h b/base/base/ask.h
new file mode 100644
index 000000000000..71ece296c60d
--- /dev/null
+++ b/base/base/ask.h
@@ -0,0 +1,4 @@
+#include <string>
+
+/// Ask a question in the terminal and expect either 'y' or 'n' as an answer.
+[[nodiscard]] bool ask(std::string question);
diff --git a/programs/install/Install.cpp b/programs/install/Install.cpp
index 281d0e45aa98..885c788e0d35 100644
--- a/programs/install/Install.cpp
+++ b/programs/install/Install.cpp
@@ -2,6 +2,7 @@
 #include <filesystem>
 #include <boost/program_options.hpp>
 #include <Common/filesystemHelpers.h>
+#include <base/ask.h>
 
 #include <sys/stat.h>
 #include <pwd.h>
@@ -118,23 +119,6 @@ static auto executeScript(const std::string & command, bool throw_on_error = fal
     return sh->tryWait();
 }
 
-static bool ask(std::string question)
-{
-    while (true)
-    {
-        std::string answer;
-        std::cout << question;
-        std::getline(std::cin, answer);
-        if (!std::cin.good())
-            return false;
-
-        if (answer.empty() || answer == "n" || answer == "N")
-            return false;
-        if (answer == "y" || answer == "Y")
-            return true;
-    }
-}
-
 static bool filesEqual(std::string path1, std::string path2)
 {
     MMapReadBufferFromFile in1(path1, 0);
diff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp
index 89a0e87cb15c..3564a6812c32 100644
--- a/src/Client/ClientBase.cpp
+++ b/src/Client/ClientBase.cpp
@@ -6,7 +6,6 @@
 #include <Client/TestHint.h>
 #include <Client/TestTags.h>
 
-#include <base/safeExit.h>
 #include <Core/Block.h>
 #include <Core/Protocol.h>
 #include <Common/DateLUT.h>
@@ -32,7 +31,6 @@
 #include <Parsers/ASTCreateQuery.h>
 #include <Parsers/ASTCreateFunctionQuery.h>
 #include <Parsers/Access/ASTCreateUserQuery.h>
-#include <Parsers/Access/ASTAuthenticationData.h>
 #include <Parsers/ASTDropQuery.h>
 #include <Parsers/ASTExplainQuery.h>
 #include <Parsers/ASTSelectQuery.h>
@@ -81,6 +79,7 @@
 
 #include <Common/config_version.h>
 #include <base/find_symbols.h>
+#include <base/ask.h>
 #include "config.h"
 #include <IO/ReadHelpers.h>
 #include <Processors/Formats/Impl/ValuesBlockInputFormat.h>
@@ -272,7 +271,7 @@ static void incrementProfileEventsBlock(Block & dst, const Block & src)
 }
 
 /// To cancel the query on local format error.
-class LocalFormatError : public DB::Exception
+class LocalFormatError : public Exception
 {
 public:
     using Exception::Exception;
@@ -579,10 +578,9 @@ try
             out_buf = std_out.get();
         }
 
-        String current_format = default_output_format;
-
         select_into_file = false;
         select_into_file_and_stdout = false;
+        String current_format = default_output_format;
         /// The query can specify output format or output file.
         if (const auto * query_with_output = dynamic_cast<const ASTQueryWithOutput *>(parsed_query.get()))
         {
@@ -674,6 +672,23 @@ try
                 current_format, out_file_buf ? *out_file_buf : *out_buf, block);
 
         output_format->setAutoFlush();
+
+        if ((!select_into_file || select_into_file_and_stdout)
+            && stdout_is_a_tty
+            && stdin_is_a_tty
+            && !FormatFactory::instance().checkIfOutputFormatIsTTYFriendly(current_format))
+        {
+            stopKeystrokeInterceptorIfExists();
+            SCOPE_EXIT({ startKeystrokeInterceptorIfExists(); });
+
+            if (!ask(fmt::format(R"(The requested output format `{}` is binary and could produce side-effects when output directly into the terminal.
+If you want to output it into a file, use the "INTO OUTFILE" modifier in the query or redirect the output of the shell command.
+Do you want to output it anyway? [y/N] )", current_format)))
+            {
+                output_format = std::make_shared<NullOutputFormat>(block);
+            }
+            *std_out << '
';
+        }
     }
 }
 catch (...)
@@ -1963,15 +1978,7 @@ void ClientBase::cancelQuery()
 {
     connection->sendCancel();
 
-    if (keystroke_interceptor)
-        try
-        {
-            keystroke_interceptor->stopIntercept();
-        }
-        catch (const DB::Exception &)
-        {
-            error_stream << getCurrentExceptionMessage(false);
-        }
+    stopKeystrokeInterceptorIfExists();
 
     if (need_render_progress && tty_buf)
     {
@@ -2664,7 +2671,7 @@ void ClientBase::startKeystrokeInterceptorIfExists()
         {
             keystroke_interceptor->startIntercept();
         }
-        catch (const DB::Exception &)
+        catch (const Exception &)
         {
             error_stream << getCurrentExceptionMessage(false);
             keystroke_interceptor.reset();
diff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp
index 68999700bf8f..a1ccfe18631a 100644
--- a/src/Formats/FormatFactory.cpp
+++ b/src/Formats/FormatFactory.cpp
@@ -839,6 +839,14 @@ void FormatFactory::markOutputFormatPrefersLargeBlocks(const String & name)
     target = true;
 }
 
+void FormatFactory::markOutputFormatNotTTYFriendly(const String & name)
+{
+    auto & target = getOrCreateCreators(name).is_tty_friendly;
+    if (!target)
+        throw Exception(ErrorCodes::LOGICAL_ERROR, "FormatFactory: Format {} is already marked as non-TTY-friendly", name);
+    target = false;
+}
+
 bool FormatFactory::checkIfFormatSupportsSubsetOfColumns(const String & name, const ContextPtr & context, const std::optional<FormatSettings> & format_settings_) const
 {
     const auto & target = getCreators(name);
@@ -900,6 +908,12 @@ bool FormatFactory::checkIfOutputFormatPrefersLargeBlocks(const String & name) c
     return target.prefers_large_blocks;
 }
 
+bool FormatFactory::checkIfOutputFormatIsTTYFriendly(const String & name) const
+{
+    const auto & target = getCreators(name);
+    return target.is_tty_friendly;
+}
+
 bool FormatFactory::checkParallelizeOutputAfterReading(const String & name, const ContextPtr & context) const
 {
     auto format_name = boost::to_lower_copy(name);
diff --git a/src/Formats/FormatFactory.h b/src/Formats/FormatFactory.h
index ad0dd30a60c5..c961d9dab22e 100644
--- a/src/Formats/FormatFactory.h
+++ b/src/Formats/FormatFactory.h
@@ -141,6 +141,7 @@ class FormatFactory final : private boost::noncopyable
         ExternalSchemaReaderCreator external_schema_reader_creator;
         bool supports_parallel_formatting{false};
         bool prefers_large_blocks{false};
+        bool is_tty_friendly{true}; /// If false, client will ask before output in the terminal.
         NonTrivialPrefixAndSuffixChecker non_trivial_prefix_and_suffix_checker;
         AppendSupportChecker append_support_checker;
         AdditionalInfoForSchemaCacheGetter additional_info_for_schema_cache_getter;
@@ -237,6 +238,7 @@ class FormatFactory final : private boost::noncopyable
 
     void markOutputFormatSupportsParallelFormatting(const String & name);
     void markOutputFormatPrefersLargeBlocks(const String & name);
+    void markOutputFormatNotTTYFriendly(const String & name);
 
     void markFormatSupportsSubsetOfColumns(const String & name);
     void registerSubsetOfColumnsSupportChecker(const String & name, SubsetOfColumnsSupportChecker subset_of_columns_support_checker);
@@ -246,6 +248,7 @@ class FormatFactory final : private boost::noncopyable
     bool checkIfFormatHasExternalSchemaReader(const String & name) const;
     bool checkIfFormatHasAnySchemaReader(const String & name) const;
     bool checkIfOutputFormatPrefersLargeBlocks(const String & name) const;
+    bool checkIfOutputFormatIsTTYFriendly(const String & name) const;
 
     bool checkParallelizeOutputAfterReading(const String & name, const ContextPtr & context) const;
 
diff --git a/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp b/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp
index 42ff26b0f9dc..ce913ece99bc 100644
--- a/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/ArrowBlockOutputFormat.cpp
@@ -131,6 +131,7 @@ void registerOutputFormatArrow(FormatFactory & factory)
             return std::make_shared<ArrowBlockOutputFormat>(buf, sample, false, format_settings);
         });
     factory.markFormatHasNoAppendSupport("Arrow");
+    factory.markOutputFormatNotTTYFriendly("Arrow");
 
     factory.registerOutputFormat(
         "ArrowStream",
@@ -142,6 +143,7 @@ void registerOutputFormatArrow(FormatFactory & factory)
         });
     factory.markFormatHasNoAppendSupport("ArrowStream");
     factory.markOutputFormatPrefersLargeBlocks("ArrowStream");
+    factory.markOutputFormatNotTTYFriendly("ArrowStream");
 }
 
 }
diff --git a/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp b/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp
index e505d545f17d..486c18540097 100644
--- a/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/AvroRowOutputFormat.cpp
@@ -634,6 +634,7 @@ void registerOutputFormatAvro(FormatFactory & factory)
         return std::make_shared<AvroRowOutputFormat>(buf, sample, settings);
     });
     factory.markFormatHasNoAppendSupport("Avro");
+    factory.markOutputFormatNotTTYFriendly("Avro");
 }
 
 }
diff --git a/src/Processors/Formats/Impl/BSONEachRowRowOutputFormat.cpp b/src/Processors/Formats/Impl/BSONEachRowRowOutputFormat.cpp
index 4fb200255324..afdfeb644245 100644
--- a/src/Processors/Formats/Impl/BSONEachRowRowOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/BSONEachRowRowOutputFormat.cpp
@@ -543,6 +543,7 @@ void registerOutputFormatBSONEachRow(FormatFactory & factory)
         [](WriteBuffer & buf, const Block & sample, const FormatSettings & _format_settings)
         { return std::make_shared<BSONEachRowRowOutputFormat>(buf, sample, _format_settings); });
     factory.markOutputFormatSupportsParallelFormatting("BSONEachRow");
+    factory.markOutputFormatNotTTYFriendly("BSONEachRow");
 }
 
 }
diff --git a/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp b/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp
index d4c2348d0804..06953d405ad8 100644
--- a/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/BinaryRowOutputFormat.cpp
@@ -70,6 +70,10 @@ void registerOutputFormatRowBinary(FormatFactory & factory)
     };
 
     registerWithNamesAndTypes("RowBinary", register_func);
+
+    factory.markOutputFormatNotTTYFriendly("RowBinary");
+    factory.markOutputFormatNotTTYFriendly("RowBinaryWithNames");
+    factory.markOutputFormatNotTTYFriendly("RowBinaryWithNamesAndTypes");
 }
 
 }
diff --git a/src/Processors/Formats/Impl/CapnProtoRowOutputFormat.cpp b/src/Processors/Formats/Impl/CapnProtoRowOutputFormat.cpp
index 1784763022cd..f56ddd00e197 100644
--- a/src/Processors/Formats/Impl/CapnProtoRowOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/CapnProtoRowOutputFormat.cpp
@@ -59,6 +59,7 @@ void registerOutputFormatCapnProto(FormatFactory & factory)
                 CapnProtoSchemaInfo(format_settings, "CapnProto", sample, format_settings.capn_proto.use_autogenerated_schema),
                 format_settings);
     });
+    factory.markOutputFormatNotTTYFriendly("CapnProto");
 }
 
 }
diff --git a/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp b/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp
index 12bbd35b77b7..ea8940f67fec 100644
--- a/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/MsgPackRowOutputFormat.cpp
@@ -305,6 +305,7 @@ void registerOutputFormatMsgPack(FormatFactory & factory)
         return std::make_shared<MsgPackRowOutputFormat>(buf, sample, settings);
     });
     factory.markOutputFormatSupportsParallelFormatting("MsgPack");
+    factory.markOutputFormatNotTTYFriendly("MsgPack");
 }
 
 }
diff --git a/src/Processors/Formats/Impl/MySQLOutputFormat.cpp b/src/Processors/Formats/Impl/MySQLOutputFormat.cpp
index 08a6d19a7825..946dd93277dd 100644
--- a/src/Processors/Formats/Impl/MySQLOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/MySQLOutputFormat.cpp
@@ -143,6 +143,7 @@ void registerOutputFormatMySQLWire(FormatFactory & factory)
         [](WriteBuffer & buf,
            const Block & sample,
            const FormatSettings & settings) { return std::make_shared<MySQLOutputFormat>(buf, sample, settings); });
+    factory.markOutputFormatNotTTYFriendly("MySQLWire");
 }
 
 }
diff --git a/src/Processors/Formats/Impl/NativeFormat.cpp b/src/Processors/Formats/Impl/NativeFormat.cpp
index 022cb38596b6..f473a0554ab3 100644
--- a/src/Processors/Formats/Impl/NativeFormat.cpp
+++ b/src/Processors/Formats/Impl/NativeFormat.cpp
@@ -142,6 +142,7 @@ void registerOutputFormatNative(FormatFactory & factory)
     {
         return std::make_shared<NativeOutputFormat>(buf, sample, settings, settings.client_protocol_version);
     });
+    factory.markOutputFormatNotTTYFriendly("Native");
 }
 
 
diff --git a/src/Processors/Formats/Impl/NpyOutputFormat.cpp b/src/Processors/Formats/Impl/NpyOutputFormat.cpp
index e02787b4f704..766ba6a5a7f8 100644
--- a/src/Processors/Formats/Impl/NpyOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/NpyOutputFormat.cpp
@@ -264,6 +264,7 @@ void registerOutputFormatNpy(FormatFactory & factory)
         return std::make_shared<NpyOutputFormat>(buf, sample);
     });
     factory.markFormatHasNoAppendSupport("Npy");
+    factory.markOutputFormatNotTTYFriendly("Npy");
 }
 
 }
diff --git a/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp b/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp
index 7c0428834e0d..8c5746c83a2f 100644
--- a/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/ODBCDriver2BlockOutputFormat.cpp
@@ -101,6 +101,7 @@ void registerOutputFormatODBCDriver2(FormatFactory & factory)
         {
             return std::make_shared<ODBCDriver2BlockOutputFormat>(buf, sample, format_settings);
         });
+    factory.markOutputFormatNotTTYFriendly("ODBCDriver2");
 }
 
 }
diff --git a/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp b/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp
index 1a9791a7b4e8..4d629199d228 100644
--- a/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/ORCBlockOutputFormat.cpp
@@ -586,6 +586,7 @@ void registerOutputFormatORC(FormatFactory & factory)
     });
     factory.markFormatHasNoAppendSupport("ORC");
     factory.markOutputFormatPrefersLargeBlocks("ORC");
+    factory.markOutputFormatNotTTYFriendly("ORC");
 }
 
 }
diff --git a/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp b/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp
index 7140c0eda2a5..ee44b09e91f8 100644
--- a/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/ParquetBlockOutputFormat.cpp
@@ -599,6 +599,7 @@ void registerOutputFormatParquet(FormatFactory & factory)
             return std::make_shared<ParquetBlockOutputFormat>(buf, sample, format_settings);
         });
     factory.markFormatHasNoAppendSupport("Parquet");
+    factory.markOutputFormatNotTTYFriendly("Parquet");
 }
 
 }
diff --git a/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp b/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp
index 4ac874b883d1..1cc11f551a20 100644
--- a/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/PostgreSQLOutputFormat.cpp
@@ -68,5 +68,7 @@ void registerOutputFormatPostgreSQLWire(FormatFactory & factory)
         [](WriteBuffer & buf,
            const Block & sample,
            const FormatSettings & settings) { return std::make_shared<PostgreSQLOutputFormat>(buf, sample, settings); });
+    factory.markOutputFormatNotTTYFriendly("PostgreSQLWire");
 }
+
 }
diff --git a/src/Processors/Formats/Impl/ProtobufListOutputFormat.cpp b/src/Processors/Formats/Impl/ProtobufListOutputFormat.cpp
index 8a7d52b9c285..fcc993df8e1c 100644
--- a/src/Processors/Formats/Impl/ProtobufListOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/ProtobufListOutputFormat.cpp
@@ -60,6 +60,7 @@ void registerOutputFormatProtobufList(FormatFactory & factory)
                 settings.protobuf.output_nullables_with_google_wrappers,
                 settings.protobuf.google_protos_path);
         });
+    factory.markOutputFormatNotTTYFriendly("ProtobufList");
 }
 
 }
diff --git a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp
index 4a83aa2f9215..af65d8f999d0 100644
--- a/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp
+++ b/src/Processors/Formats/Impl/ProtobufRowOutputFormat.cpp
@@ -54,8 +54,9 @@ void registerOutputFormatProtobuf(FormatFactory & factory)
 {
     for (bool with_length_delimiter : {false, true})
     {
+        const char * name = with_length_delimiter ? "Protobuf" : "ProtobufSingle";
         factory.registerOutputFormat(
-            with_length_delimiter ? "Protobuf" : "ProtobufSingle",
+            name,
             [with_length_delimiter](WriteBuffer & buf,
                const Block & header,
                const FormatSettings & settings)
@@ -64,6 +65,7 @@ void registerOutputFormatProtobuf(FormatFactory & factory)
                     buf, header, ProtobufSchemaInfo(settings, "Protobuf", header, settings.protobuf.use_autogenerated_schema),
                     settings, with_length_delimiter);
             });
+        factory.markOutputFormatNotTTYFriendly(name);
     }
 }
 
diff --git a/src/Storages/System/StorageSystemFormats.cpp b/src/Storages/System/StorageSystemFormats.cpp
index 3c6a19c4f95b..d3fbb4c54ed9 100644
--- a/src/Storages/System/StorageSystemFormats.cpp
+++ b/src/Storages/System/StorageSystemFormats.cpp
@@ -15,6 +15,7 @@ ColumnsDescription StorageSystemFormats::getColumnsDescription()
         {"is_output", std::make_shared<DataTypeUInt8>(), "Flag that indicates whether the format is suitable for data output."},
         {"supports_parallel_parsing", std::make_shared<DataTypeUInt8>(), "Flag that indicates whether the format supports parallel parsing."},
         {"supports_parallel_formatting", std::make_shared<DataTypeUInt8>(), "Flag that indicates whether the format supports parallel formatting."},
+        {"is_tty_friendly", std::make_shared<DataTypeUInt8>(), "Flag that indicates whether the format usually displays fine in the terminal. For other formats, CLI will ask before output."},
     };
 }
 
@@ -25,16 +26,16 @@ void StorageSystemFormats::fillData(MutableColumns & res_columns, ContextPtr, co
     {
         const auto & [name, creators] = pair;
         String format_name = creators.name;
-        UInt64 has_input_format(creators.input_creator != nullptr || creators.random_access_input_creator != nullptr);
-        UInt64 has_output_format(creators.output_creator != nullptr);
-        UInt64 supports_parallel_parsing(creators.file_segmentation_engine_creator != nullptr || creators.random_access_input_creator != nullptr);
-        UInt64 supports_parallel_formatting(creators.supports_parallel_formatting);
+        bool has_input_format(creators.input_creator != nullptr || creators.random_access_input_creator != nullptr);
+        bool has_output_format(creators.output_creator != nullptr);
+        bool supports_parallel_parsing(creators.file_segmentation_engine_creator != nullptr || creators.random_access_input_creator != nullptr);
 
         res_columns[0]->insert(format_name);
         res_columns[1]->insert(has_input_format);
         res_columns[2]->insert(has_output_format);
         res_columns[3]->insert(supports_parallel_parsing);
-        res_columns[4]->insert(supports_parallel_formatting);
+        res_columns[4]->insert(creators.supports_parallel_formatting);
+        res_columns[5]->insert(creators.is_tty_friendly);
     }
 }
 
diff --git a/utils/check-style/check-style b/utils/check-style/check-style
index 901330e0015d..d53c06c5e52d 100755
--- a/utils/check-style/check-style
+++ b/utils/check-style/check-style
@@ -315,6 +315,7 @@ std_cerr_cout_excludes=(
     /tests/
     _fuzzer
     # OK
+    base/base/ask.cpp
     src/Common/ProgressIndication.cpp
     src/Common/ProgressTable.cpp
     # only under #ifdef DBMS_HASH_MAP_DEBUG_RESIZES, that is used only in tests
