diff --git a/src/Processors/Formats/Impl/AvroRowInputFormat.cpp b/src/Processors/Formats/Impl/AvroRowInputFormat.cpp
index a8d71790f415..95ee42b4d098 100644
--- a/src/Processors/Formats/Impl/AvroRowInputFormat.cpp
+++ b/src/Processors/Formats/Impl/AvroRowInputFormat.cpp
@@ -554,7 +554,7 @@ AvroDeserializer::Action AvroDeserializer::createAction(const Block & header, co
     }
 }
 
-AvroDeserializer::AvroDeserializer(const Block & header, avro::ValidSchema schema, const FormatSettings & format_settings)
+AvroDeserializer::AvroDeserializer(const Block & header, avro::ValidSchema schema, bool allow_missing_fields)
 {
     const auto & schema_root = schema.root();
     if (schema_root->type() != avro::AVRO_RECORD)
@@ -565,7 +565,7 @@ AvroDeserializer::AvroDeserializer(const Block & header, avro::ValidSchema schem
     column_found.resize(header.columns());
     row_action = createAction(header, schema_root);
     // fail on missing fields when allow_missing_fields = false
-    if (!format_settings.avro.allow_missing_fields)
+    if (!allow_missing_fields)
     {
         for (size_t i = 0; i < header.columns(); ++i)
         {
@@ -592,19 +592,24 @@ void AvroDeserializer::deserializeRow(MutableColumns & columns, avro::Decoder &
 
 
 AvroRowInputFormat::AvroRowInputFormat(const Block & header_, ReadBuffer & in_, Params params_, const FormatSettings & format_settings_)
-    : IRowInputFormat(header_, in_, params_)
-    , file_reader(std::make_unique<InputStreamReadBufferAdapter>(in_))
-    , deserializer(output.getHeader(), file_reader.dataSchema(), format_settings_)
+    : IRowInputFormat(header_, in_, params_),
+      allow_missing_fields(format_settings_.avro.allow_missing_fields)
+{
+}
+
+void AvroRowInputFormat::readPrefix()
 {
-    file_reader.init();
+    file_reader_ptr = std::make_unique<avro::DataFileReaderBase>(std::make_unique<InputStreamReadBufferAdapter>(in));
+    deserializer_ptr = std::make_unique<AvroDeserializer>(output.getHeader(), file_reader_ptr->dataSchema(), allow_missing_fields);
+    file_reader_ptr->init();
 }
 
 bool AvroRowInputFormat::readRow(MutableColumns & columns, RowReadExtension &ext)
 {
-    if (file_reader.hasMore())
+    if (file_reader_ptr->hasMore())
     {
-        file_reader.decr();
-        deserializer.deserializeRow(columns, file_reader.decoder(), ext);
+        file_reader_ptr->decr();
+        deserializer_ptr->deserializeRow(columns, file_reader_ptr->decoder(), ext);
         return true;
     }
     return false;
@@ -781,7 +786,7 @@ const AvroDeserializer & AvroConfluentRowInputFormat::getOrCreateDeserializer(Sc
     if (it == deserializer_cache.end())
     {
         auto schema = schema_registry->getSchema(schema_id);
-        AvroDeserializer deserializer(output.getHeader(), schema, format_settings);
+        AvroDeserializer deserializer(output.getHeader(), schema, format_settings.avro.allow_missing_fields);
         it = deserializer_cache.emplace(schema_id, deserializer).first;
     }
     return it->second;
diff --git a/src/Processors/Formats/Impl/AvroRowInputFormat.h b/src/Processors/Formats/Impl/AvroRowInputFormat.h
index e3de3bf59a7b..5617b4a7661e 100644
--- a/src/Processors/Formats/Impl/AvroRowInputFormat.h
+++ b/src/Processors/Formats/Impl/AvroRowInputFormat.h
@@ -25,7 +25,7 @@ namespace DB
 class AvroDeserializer
 {
 public:
-    AvroDeserializer(const Block & header, avro::ValidSchema schema, const FormatSettings & format_settings);
+    AvroDeserializer(const Block & header, avro::ValidSchema schema, bool allow_missing_fields);
     void deserializeRow(MutableColumns & columns, avro::Decoder & decoder, RowReadExtension & ext) const;
 
 private:
@@ -107,12 +107,15 @@ class AvroRowInputFormat : public IRowInputFormat
 {
 public:
     AvroRowInputFormat(const Block & header_, ReadBuffer & in_, Params params_, const FormatSettings & format_settings_);
-    virtual bool readRow(MutableColumns & columns, RowReadExtension & ext) override;
+    bool readRow(MutableColumns & columns, RowReadExtension & ext) override;
+    void readPrefix() override;
+
     String getName() const override { return "AvroRowInputFormat"; }
 
 private:
-    avro::DataFileReaderBase file_reader;
-    AvroDeserializer deserializer;
+    std::unique_ptr<avro::DataFileReaderBase> file_reader_ptr;
+    std::unique_ptr<AvroDeserializer> deserializer_ptr;
+    bool allow_missing_fields;
 };
 
 /// Confluent framing + Avro binary datum encoding. Mainly used for Kafka.
