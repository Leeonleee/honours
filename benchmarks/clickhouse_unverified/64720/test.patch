diff --git a/tests/queries/0_stateless/02346_fulltext_index_match_predicate.reference b/tests/queries/0_stateless/02346_fulltext_index_match_predicate.reference
index 84fc422379c0..e890eac17948 100644
--- a/tests/queries/0_stateless/02346_fulltext_index_match_predicate.reference
+++ b/tests/queries/0_stateless/02346_fulltext_index_match_predicate.reference
@@ -1,19 +1,19 @@
-1	Hello ClickHouse
-2	Hello World
+1	Well, Hello ClickHouse !
+2	Well, Hello World !
             Granules: 6/6
             Granules: 2/6
             Granules: 6/6
             Granules: 2/6
 ---
-1	Hello ClickHouse
-2	Hello World
-6	World Champion
+1	Well, Hello ClickHouse !
+2	Well, Hello World !
+6	True World Champion
             Granules: 6/6
             Granules: 3/6
             Granules: 6/6
             Granules: 3/6
 ---
-5	OLAP Database
+5	Its An OLAP Database
             Granules: 6/6
             Granules: 1/6
             Granules: 6/6
diff --git a/tests/queries/0_stateless/02346_fulltext_index_match_predicate.sql b/tests/queries/0_stateless/02346_fulltext_index_match_predicate.sql
index 2233c8a1f31f..3c558f07be20 100644
--- a/tests/queries/0_stateless/02346_fulltext_index_match_predicate.sql
+++ b/tests/queries/0_stateless/02346_fulltext_index_match_predicate.sql
@@ -14,19 +14,19 @@ ENGINE = MergeTree
 ORDER BY id
 SETTINGS index_granularity = 1;
 
-INSERT INTO tab VALUES (1, 'Hello ClickHouse'), (2, 'Hello World'), (3, 'Good Weather'), (4, 'Say Hello'), (5, 'OLAP Database'), (6, 'World Champion');
+INSERT INTO tab VALUES (1, 'Well, Hello ClickHouse !'), (2, 'Well, Hello World !'), (3, 'Good Weather !'), (4, 'Say Hello !'), (5, 'Its An OLAP Database'), (6, 'True World Champion');
 
-SELECT * FROM tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id;
+SELECT * FROM tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id;
 
 -- Read 2/6 granules
--- Required string: 'Hello '
--- Alternatives: 'Hello ClickHouse', 'Hello World'
+-- Required string: ' Hello '
+-- Alternatives: ' Hello ClickHouse ', ' Hello World '
 
 SELECT *
 FROM
 (
     EXPLAIN PLAN indexes=1
-    SELECT * FROM tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id
+    SELECT * FROM tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id
 )
 WHERE
     explain LIKE '%Granules: %'
@@ -37,7 +37,7 @@ SELECT *
 FROM
 (
     EXPLAIN PLAN indexes=1
-    SELECT * FROM tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id
+    SELECT * FROM tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id
 )
 WHERE
     explain LIKE '%Granules: %'
@@ -46,17 +46,17 @@ SETTINGS
 
 SELECT '---';
 
-SELECT * FROM tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id;
+SELECT * FROM tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id;
 
 -- Read 3/6 granules
 -- Required string: -
--- Alternatives: 'ClickHouse', 'World'
+-- Alternatives: ' ClickHouse ', ' World '
 
 SELECT *
 FROM
 (
     EXPLAIN PLAN indexes = 1
-    SELECT * FROM tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id
+    SELECT * FROM tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id
 )
 WHERE
     explain LIKE '%Granules: %'
@@ -67,7 +67,7 @@ SELECT *
 FROM
 (
     EXPLAIN PLAN indexes = 1
-    SELECT * FROM tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id
+    SELECT * FROM tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id
 )
 WHERE
     explain LIKE '%Granules: %'
@@ -76,17 +76,17 @@ SETTINGS
 
 SELECT '---';
 
-SELECT * FROM tab WHERE match(str, 'OLAP.*') ORDER BY id;
+SELECT * FROM tab WHERE match(str, ' OLAP .*') ORDER BY id;
 
 -- Read 1/6 granules
--- Required string: 'OLAP'
+-- Required string: ' OLAP '
 -- Alternatives: -
 
 SELECT *
 FROM
 (
     EXPLAIN PLAN indexes = 1
-    SELECT * FROM tab WHERE match(str, 'OLAP (.*?)*') ORDER BY id
+    SELECT * FROM tab WHERE match(str, ' OLAP (.*?)*') ORDER BY id
 )
 WHERE
     explain LIKE '%Granules: %'
@@ -97,7 +97,7 @@ SELECT *
 FROM
 (
     EXPLAIN PLAN indexes = 1
-    SELECT * FROM tab WHERE match(str, 'OLAP (.*?)*') ORDER BY id
+    SELECT * FROM tab WHERE match(str, ' OLAP (.*?)*') ORDER BY id
 )
 WHERE
     explain LIKE '%Granules: %'
diff --git a/tests/queries/0_stateless/02346_fulltext_index_search.reference b/tests/queries/0_stateless/02346_fulltext_index_search.reference
index d742bbc77ecf..d7c89d434e7c 100644
--- a/tests/queries/0_stateless/02346_fulltext_index_search.reference
+++ b/tests/queries/0_stateless/02346_fulltext_index_search.reference
@@ -13,19 +13,19 @@ af	full_text
 1
 Test full_text()
 af	full_text
-101	Alick a01
-106	Alick a06
-111	Alick b01
-116	Alick b06
-101	Alick a01
-106	Alick a06
+101	x Alick a01 y
+106	x Alick a06 y
+111	x Alick b01 y
+116	x Alick b06 y
+101	x Alick a01 y
+106	x Alick a06 y
 1
-101	Alick a01
-111	Alick b01
+101	x Alick a01 y
+111	x Alick b01 y
 1
 Test on array columns
 af	full_text
-3	['Click a03','Click b03']
+3	['x Click a03 y','x Click b03 y']
 1
 Test on map columns
 af	full_text
diff --git a/tests/queries/0_stateless/02346_fulltext_index_search.sql b/tests/queries/0_stateless/02346_fulltext_index_search.sql
index 62cd60738426..8506c512409d 100644
--- a/tests/queries/0_stateless/02346_fulltext_index_search.sql
+++ b/tests/queries/0_stateless/02346_fulltext_index_search.sql
@@ -67,7 +67,7 @@ CREATE TABLE tab_x(k UInt64, s String, INDEX af(s) TYPE full_text())
     ENGINE = MergeTree() ORDER BY k
     SETTINGS index_granularity = 2, index_granularity_bytes = '10Mi';
 
-INSERT INTO tab_x VALUES (101, 'Alick a01'), (102, 'Blick a02'), (103, 'Click a03'), (104, 'Dlick a04'), (105, 'Elick a05'), (106, 'Alick a06'), (107, 'Blick a07'), (108, 'Click a08'), (109, 'Dlick a09'), (110, 'Elick a10'), (111, 'Alick b01'), (112, 'Blick b02'), (113, 'Click b03'), (114, 'Dlick b04'), (115, 'Elick b05'), (116, 'Alick b06'), (117, 'Blick b07'), (118, 'Click b08'), (119, 'Dlick b09'), (120, 'Elick b10');
+INSERT INTO tab_x VALUES (101, 'x Alick a01 y'), (102, 'x Blick a02 y'), (103, 'x Click a03 y'), (104, 'x Dlick a04 y'), (105, 'x Elick a05 y'), (106, 'x Alick a06 y'), (107, 'x Blick a07 y'), (108, 'x Click a08 y'), (109, 'x Dlick a09 y'), (110, 'x Elick a10 y'), (111, 'x Alick b01 y'), (112, 'x Blick b02 y'), (113, 'x Click b03 y'), (114, 'x Dlick b04 y'), (115, 'x Elick b05 y'), (116, 'x Alick b06 y'), (117, 'x Blick b07 y'), (118, 'x Click b08 y'), (119, 'x Dlick b09 y'), (120, 'x Elick b10 y');
 
 -- check full_text index was created
 SELECT name, type FROM system.data_skipping_indices WHERE table == 'tab_x' AND database = currentDatabase() LIMIT 1;
@@ -86,27 +86,27 @@ SELECT read_rows==8 from system.query_log
     LIMIT 1;
 
 -- search full_text index with IN operator
-SELECT * FROM tab_x WHERE s IN ('Alick a01', 'Alick a06') ORDER BY k;
+SELECT * FROM tab_x WHERE s IN ('x Alick a01 y', 'x Alick a06 y') ORDER BY k;
 
 -- check the query only read 2 granules (4 rows total; each granule has 2 rows)
 SYSTEM FLUSH LOGS;
 SELECT read_rows==4 from system.query_log
     WHERE query_kind ='Select'
         AND current_database = currentDatabase()
-        AND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE s IN (\'Alick a01\', \'Alick a06\') ORDER BY k;')
+        AND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE s IN (\'x Alick a01 y\', \'x Alick a06 y\') ORDER BY k;')
         AND type='QueryFinish'
         AND result_rows==2
     LIMIT 1;
 
 -- search full_text index with multiSearch
-SELECT * FROM tab_x WHERE multiSearchAny(s, ['a01', 'b01']) ORDER BY k;
+SELECT * FROM tab_x WHERE multiSearchAny(s, [' a01 ', ' b01 ']) ORDER BY k;
 
 -- check the query only read 2 granules (4 rows total; each granule has 2 rows)
 SYSTEM FLUSH LOGS;
 SELECT read_rows==4 from system.query_log
     WHERE query_kind ='Select'
         AND current_database = currentDatabase()
-        AND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE multiSearchAny(s, [\'a01\', \'b01\']) ORDER BY k;')
+        AND endsWith(trimRight(query), 'SELECT * FROM tab_x WHERE multiSearchAny(s, [\' a01 \', \' b01 \']) ORDER BY k;')
         AND type='QueryFinish'
         AND result_rows==2
     LIMIT 1;
@@ -126,14 +126,14 @@ INSERT INTO tab SELECT rowNumberInBlock(), groupArray(s) FROM tab_x GROUP BY k%1
 SELECT name, type FROM system.data_skipping_indices WHERE table == 'tab' AND database = currentDatabase() LIMIT 1;
 
 -- search full_text index with has
-SELECT * FROM tab WHERE has(s, 'Click a03') ORDER BY k;
+SELECT * FROM tab WHERE has(s, 'x Click a03 y') ORDER BY k;
 
 -- check the query must read all 10 granules (20 rows total; each granule has 2 rows)
 SYSTEM FLUSH LOGS;
 SELECT read_rows==2 from system.query_log
     WHERE query_kind ='Select'
         AND current_database = currentDatabase()
-        AND endsWith(trimRight(query), 'SELECT * FROM tab WHERE has(s, \'Click a03\') ORDER BY k;')
+        AND endsWith(trimRight(query), 'SELECT * FROM tab WHERE has(s, \'x Click a03 y\') ORDER BY k;')
         AND type='QueryFinish'
         AND result_rows==1
     LIMIT 1;
diff --git a/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.reference b/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.reference
index 0e1954cde627..5b7ad7ddce08 100644
--- a/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.reference
+++ b/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.reference
@@ -1,5 +1,5 @@
-1	Hello ClickHouse
-2	Hello World
+1	Well, Hello ClickHouse !
+2	Well, Hello World !
 1	Hello ClickHouse
 2	Hello World
             Granules: 6/6
@@ -11,9 +11,9 @@
             Granules: 6/6
             Granules: 2/6
 ---
-1	Hello ClickHouse
-2	Hello World
-6	World Champion
+1	Well, Hello ClickHouse !
+2	Well, Hello World !
+6	True World Champion
 1	Hello ClickHouse
 2	Hello World
 6	World Champion
@@ -26,7 +26,7 @@
             Granules: 6/6
             Granules: 3/6
 ---
-5	OLAP Database
+5	Its An OLAP Database
 5	OLAP Database
             Granules: 6/6
             Granules: 1/6
diff --git a/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql b/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql
index 49d39c601ef6..42175cbb2c6d 100644
--- a/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql
+++ b/tests/queries/0_stateless/02943_tokenbf_and_ngrambf_indexes_support_match_function.sql
@@ -21,21 +21,22 @@ ENGINE = MergeTree
 ORDER BY id
 SETTINGS index_granularity = 1;
 
-INSERT INTO tokenbf_tab VALUES (1, 'Hello ClickHouse'), (2, 'Hello World'), (3, 'Good Weather'), (4, 'Say Hello'), (5, 'OLAP Database'), (6, 'World Champion');
+INSERT INTO tokenbf_tab VALUES (1, 'Well, Hello ClickHouse !'), (2, 'Well, Hello World !'), (3, 'Good Weather !'), (4, 'Say Hello !'), (5, 'Its An OLAP Database'), (6, 'True World Champion');
 INSERT INTO ngrambf_tab VALUES (1, 'Hello ClickHouse'), (2, 'Hello World'), (3, 'Good Weather'), (4, 'Say Hello'), (5, 'OLAP Database'), (6, 'World Champion');
 
-SELECT * FROM tokenbf_tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id;
+SELECT * FROM tokenbf_tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id;
 SELECT * FROM ngrambf_tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id;
 
 -- Read 2/6 granules
 -- Required string: 'Hello '
 -- Alternatives: 'Hello ClickHouse', 'Hello World'
+-- Surrounded by spaces for tokenbf
 
 SELECT *
 FROM
 (
     EXPLAIN PLAN indexes=1
-    SELECT * FROM tokenbf_tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id
+    SELECT * FROM tokenbf_tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id
 )
 WHERE
     explain LIKE '%Granules: %'
@@ -46,7 +47,7 @@ SELECT *
 FROM
 (
     EXPLAIN PLAN indexes=1
-    SELECT * FROM tokenbf_tab WHERE match(str, 'Hello (ClickHouse|World)') ORDER BY id
+    SELECT * FROM tokenbf_tab WHERE match(str, ' Hello (ClickHouse|World) ') ORDER BY id
 )
 WHERE
     explain LIKE '%Granules: %'
@@ -78,18 +79,19 @@ SETTINGS
 
 SELECT '---';
 
-SELECT * FROM tokenbf_tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id;
+SELECT * FROM tokenbf_tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id;
 SELECT * FROM ngrambf_tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id;
 
 -- Read 3/6 granules
 -- Required string: -
 -- Alternatives: 'ClickHouse', 'World'
+-- Surrounded by spaces for tokenbf
 
 SELECT *
 FROM
 (
     EXPLAIN PLAN indexes = 1
-    SELECT * FROM tokenbf_tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id
+    SELECT * FROM tokenbf_tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id
 )
 WHERE
     explain LIKE '%Granules: %'
@@ -100,7 +102,7 @@ SELECT *
 FROM
 (
     EXPLAIN PLAN indexes = 1
-    SELECT * FROM tokenbf_tab WHERE match(str, '.*(ClickHouse|World)') ORDER BY id
+    SELECT * FROM tokenbf_tab WHERE match(str, '.* (ClickHouse|World) ') ORDER BY id
 )
 WHERE
     explain LIKE '%Granules: %'
@@ -131,18 +133,19 @@ SETTINGS
 
 SELECT '---';
 
-SELECT * FROM tokenbf_tab WHERE match(str, 'OLAP.*') ORDER BY id;
+SELECT * FROM tokenbf_tab WHERE match(str, ' OLAP .*') ORDER BY id;
 SELECT * FROM ngrambf_tab WHERE match(str, 'OLAP.*') ORDER BY id;
 
 -- Read 1/6 granules
 -- Required string: 'OLAP'
 -- Alternatives: -
+-- Surrounded by spaces for tokenbf
 
 SELECT *
 FROM
 (
     EXPLAIN PLAN indexes = 1
-    SELECT * FROM tokenbf_tab WHERE match(str, 'OLAP (.*?)*') ORDER BY id
+    SELECT * FROM tokenbf_tab WHERE match(str, ' OLAP (.*?)*') ORDER BY id
 )
 WHERE
     explain LIKE '%Granules: %'
@@ -152,7 +155,7 @@ SELECT *
 FROM
 (
     EXPLAIN PLAN indexes = 1
-    SELECT * FROM tokenbf_tab WHERE match(str, 'OLAP (.*?)*') ORDER BY id
+    SELECT * FROM tokenbf_tab WHERE match(str, ' OLAP (.*?)*') ORDER BY id
 )
 WHERE
     explain LIKE '%Granules: %'
diff --git a/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.reference b/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.reference
new file mode 100644
index 000000000000..4fb6812cb4f6
--- /dev/null
+++ b/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.reference
@@ -0,0 +1,83 @@
+-------- Bloom filter --------
+
+-- No skip for prefix
+Parts: 1/1
+Parts: 1/1
+1	Service is not ready
+
+-- Skip for prefix with complete token
+Parts: 1/1
+Parts: 0/1
+
+-- No skip for suffix
+Parts: 1/1
+Parts: 1/1
+1	Service is not ready
+
+-- Skip for suffix with complete token
+Parts: 1/1
+Parts: 0/1
+
+-- No skip for substring
+Parts: 1/1
+Parts: 1/1
+1	Service is not ready
+
+-- Skip for substring with complete token
+Parts: 1/1
+Parts: 0/1
+
+-- No skip for multiple substrings
+Parts: 1/1
+Parts: 1/1
+1	Service is not ready
+
+-- Skip for multiple substrings with complete tokens
+Parts: 1/1
+Parts: 0/1
+
+-- No skip for multiple non-existsing substrings, only one with complete token
+Parts: 1/1
+Parts: 1/1
+
+-------- GIN filter --------
+
+-- No skip for prefix
+Parts: 1/1
+Parts: 1/1
+1	Service is not ready
+
+-- Skip for prefix with complete token
+Parts: 1/1
+Parts: 0/1
+
+-- No skip for suffix
+Parts: 1/1
+Parts: 1/1
+1	Service is not ready
+
+-- Skip for suffix with complete token
+Parts: 1/1
+Parts: 0/1
+
+-- No skip for substring
+Parts: 1/1
+Parts: 1/1
+1	Service is not ready
+
+-- Skip for substring with complete token
+Parts: 1/1
+Parts: 0/1
+
+-- No skip for multiple substrings
+Parts: 1/1
+Parts: 1/1
+1	Service is not ready
+
+-- Skip for multiple substrings with complete tokens
+Parts: 1/1
+Parts: 0/1
+
+-- No skip for multiple non-existsing substrings, only one with complete token
+Parts: 1/1
+Parts: 1/1
diff --git a/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql b/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql
new file mode 100644
index 000000000000..a0cb8a35169f
--- /dev/null
+++ b/tests/queries/0_stateless/03165_string_functions_with_token_text_indexes.sql
@@ -0,0 +1,227 @@
+SELECT '-------- Bloom filter --------';
+SELECT '';
+DROP TABLE IF EXISTS 03165_token_bf;
+
+CREATE TABLE 03165_token_bf
+(
+    id Int64,
+    message String,
+    INDEX idx_message message TYPE tokenbf_v1(32768, 3, 2) GRANULARITY 1
+)
+ENGINE = MergeTree
+ORDER BY id;
+
+INSERT INTO 03165_token_bf VALUES(1, 'Service is not ready');
+
+SELECT '-- No skip for prefix';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE startsWith(message, 'Serv')
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_bf WHERE startsWith(message, 'Serv');
+
+SELECT '';
+SELECT '-- Skip for prefix with complete token';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE startsWith(message, 'Serv i')
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_bf WHERE startsWith(message, 'Serv i');
+
+SELECT '';
+SELECT '-- No skip for suffix';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE endsWith(message, 'eady')
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_bf WHERE endsWith(message, 'eady');
+
+SELECT '';
+SELECT '-- Skip for suffix with complete token';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE endsWith(message, ' eady')
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_bf WHERE endsWith(message, ' eady');
+
+SELECT '';
+SELECT '-- No skip for substring';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE match(message, 'no')
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_bf WHERE match(message, 'no');
+
+SELECT '';
+SELECT '-- Skip for substring with complete token';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE match(message, ' xyz ')
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_bf WHERE match(message, ' xyz ');
+
+SELECT '';
+SELECT '-- No skip for multiple substrings';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE multiSearchAny(message, ['ce', 'no'])
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_bf WHERE multiSearchAny(message, ['ce', 'no']);
+
+SELECT '';
+SELECT '-- Skip for multiple substrings with complete tokens';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE multiSearchAny(message, [' wx ', ' yz '])
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_bf WHERE multiSearchAny(message, [' wx ', ' yz ']);
+
+SELECT '';
+SELECT '-- No skip for multiple non-existsing substrings, only one with complete token';
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_bf WHERE multiSearchAny(message, [' wx ', 'yz'])
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_bf WHERE multiSearchAny(message, [' wx ', 'yz']);
+
+DROP TABLE IF EXISTS 03165_token_bf;
+
+SELECT '';
+SELECT '-------- GIN filter --------';
+SELECT '';
+
+SET allow_experimental_inverted_index=1;
+DROP TABLE IF EXISTS 03165_token_ft;
+CREATE TABLE 03165_token_ft
+(
+    id Int64,
+    message String,
+    INDEX idx_message message TYPE full_text() GRANULARITY 1
+)
+ENGINE = MergeTree
+ORDER BY id;
+
+INSERT INTO 03165_token_ft VALUES(1, 'Service is not ready');
+
+SELECT '-- No skip for prefix';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE startsWith(message, 'Serv')
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_ft WHERE startsWith(message, 'Serv');
+
+SELECT '';
+SELECT '-- Skip for prefix with complete token';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE startsWith(message, 'Serv i')
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_ft WHERE startsWith(message, 'Serv i');
+
+SELECT '';
+SELECT '-- No skip for suffix';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE endsWith(message, 'eady')
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_ft WHERE endsWith(message, 'eady');
+
+SELECT '';
+SELECT '-- Skip for suffix with complete token';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE endsWith(message, ' eady')
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_ft WHERE endsWith(message, ' eady');
+
+SELECT '';
+SELECT '-- No skip for substring';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE match(message, 'no')
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_ft WHERE match(message, 'no');
+
+SELECT '';
+SELECT '-- Skip for substring with complete token';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE match(message, ' xyz ')
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_ft WHERE match(message, ' xyz ');
+
+SELECT '';
+SELECT '-- No skip for multiple substrings';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE multiSearchAny(message, ['ce', 'no'])
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_ft WHERE multiSearchAny(message, ['ce', 'no']);
+
+SELECT '';
+SELECT '-- Skip for multiple substrings with complete tokens';
+
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE multiSearchAny(message, [' wx ', ' yz '])
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_ft WHERE multiSearchAny(message, [' wx ', ' yz ']);
+
+SELECT '';
+SELECT '-- No skip for multiple non-existsing substrings, only one with complete token';
+SELECT trim(explain)
+FROM (
+    EXPLAIN indexes = 1 SELECT * FROM 03165_token_ft WHERE multiSearchAny(message, [' wx ', 'yz'])
+)
+WHERE explain LIKE '%Parts:%';
+
+SELECT * FROM 03165_token_ft WHERE multiSearchAny(message, [' wx ', 'yz']);
