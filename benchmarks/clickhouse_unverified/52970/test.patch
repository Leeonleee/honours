diff --git a/tests/integration/test_backup_restore_storage_policy/__init__.py b/tests/integration/test_backup_restore_storage_policy/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/integration/test_backup_restore_storage_policy/configs/storage_config.xml b/tests/integration/test_backup_restore_storage_policy/configs/storage_config.xml
new file mode 100644
index 000000000000..de9f68cbe870
--- /dev/null
+++ b/tests/integration/test_backup_restore_storage_policy/configs/storage_config.xml
@@ -0,0 +1,33 @@
+<clickhouse>
+    <storage_configuration>
+        <disks>
+            <one>
+                <type>local</type>
+                <path>/var/lib/disks/one/</path>
+            </one>
+            <two>
+                <type>local</type>
+                <path>/var/lib/disks/two/</path>
+            </two>
+        </disks>
+        <policies>
+            <policy1>
+                <volumes>
+                    <single>
+                        <disk>one</disk>
+                    </single>
+                </volumes>
+            </policy1>
+            <policy2>
+                <volumes>
+                    <single>
+                        <disk>two</disk>
+                    </single>
+                </volumes>
+            </policy2>
+        </policies>
+    </storage_configuration>
+    <backups>
+        <allowed_path>/backups</allowed_path>
+    </backups>
+</clickhouse>
diff --git a/tests/integration/test_backup_restore_storage_policy/test.py b/tests/integration/test_backup_restore_storage_policy/test.py
new file mode 100644
index 000000000000..4e9d309a2205
--- /dev/null
+++ b/tests/integration/test_backup_restore_storage_policy/test.py
@@ -0,0 +1,76 @@
+import pytest
+from helpers.cluster import ClickHouseCluster
+
+
+backup_id_counter = 0
+
+cluster = ClickHouseCluster(__file__)
+
+instance = cluster.add_instance(
+    "instance",
+    main_configs=["configs/storage_config.xml"],
+)
+
+
+@pytest.fixture(scope="module", autouse=True)
+def start_cluster():
+    try:
+        cluster.start()
+        yield cluster
+    finally:
+        cluster.shutdown()
+
+
+@pytest.fixture(autouse=True)
+def cleanup_after_test():
+    try:
+        yield
+    finally:
+        instance.query("DROP DATABASE IF EXISTS test")
+
+
+def new_backup_name():
+    global backup_id_counter
+    backup_id_counter += 1
+    return f"File('/backups/{backup_id_counter}/')"
+
+
+def create_table_backup(backup_name, storage_policy=None):
+    instance.query("CREATE DATABASE test")
+    create_query = "CREATE TABLE test.table(x UInt32) ENGINE=MergeTree ORDER BY x"
+    if storage_policy is not None:
+        create_query += f" SETTINGS storage_policy = '{storage_policy}'"
+    instance.query(create_query)
+    instance.query(f"INSERT INTO test.table SELECT number FROM numbers(10)")
+    instance.query(f"BACKUP TABLE test.table TO {backup_name}")
+    instance.query("DROP TABLE test.table SYNC")
+
+
+def restore_table(backup_name, storage_policy=None):
+    restore_query = f"RESTORE TABLE test.table FROM {backup_name}"
+    if storage_policy is not None:
+        restore_query += f" SETTINGS storage_policy = '{storage_policy}'"
+    instance.query(restore_query)
+
+
+@pytest.mark.parametrize(
+    "origin_policy, restore_policy, expected_policy",
+    [
+        (None, "", "default"),
+        (None, None, "default"),
+        (None, "policy1", "policy1"),
+        ("policy1", "policy1", "policy1"),
+        ("policy1", "policy2", "policy2"),
+        ("policy1", "", "default"),
+        ("policy1", None, "policy1"),
+    ],
+)
+def test_storage_policies(origin_policy, restore_policy, expected_policy):
+    backup_name = new_backup_name()
+    create_table_backup(backup_name, origin_policy)
+    restore_table(backup_name, restore_policy)
+
+    assert (
+        instance.query("SELECT storage_policy FROM system.tables WHERE name='table'")
+        == f"{expected_policy}
"
+    )
