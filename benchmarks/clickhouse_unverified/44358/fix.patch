diff --git a/src/AggregateFunctions/AggregateFunctionSumMap.h b/src/AggregateFunctions/AggregateFunctionSumMap.h
index ee6b15257414..4a1088a87bd9 100644
--- a/src/AggregateFunctions/AggregateFunctionSumMap.h
+++ b/src/AggregateFunctions/AggregateFunctionSumMap.h
@@ -468,6 +468,7 @@ class AggregateFunctionSumMap final :
     bool keepKey(const T &) const { return true; }
 };
 
+
 template <typename T, bool overflow, bool tuple_argument>
 class AggregateFunctionSumMapFiltered final :
     public AggregateFunctionMapBase<T,
@@ -502,6 +503,8 @@ class AggregateFunctionSumMapFiltered final :
                 "Aggregate function {} requires an Array as a parameter",
                 getNameImpl());
 
+        this->parameters = params_;
+
         keys_to_keep.reserve(keys_to_keep_values.size());
 
         for (const Field & f : keys_to_keep_values)
@@ -509,7 +512,16 @@ class AggregateFunctionSumMapFiltered final :
     }
 
     static String getNameImpl()
-    { return overflow ? "sumMapFilteredWithOverflow" : "sumMapFiltered"; }
+    {
+        if constexpr (overflow)
+        {
+            return "sumMapFilteredWithOverflow";
+        }
+        else
+        {
+            return "sumMapFiltered";
+        }
+    }
 
     bool keepKey(const T & key) const { return keys_to_keep.count(key); }
 };
diff --git a/src/DataTypes/DataTypeAggregateFunction.cpp b/src/DataTypes/DataTypeAggregateFunction.cpp
index 7056fcff42f0..ab6d024f5d8d 100644
--- a/src/DataTypes/DataTypeAggregateFunction.cpp
+++ b/src/DataTypes/DataTypeAggregateFunction.cpp
@@ -67,7 +67,7 @@ String DataTypeAggregateFunction::getNameImpl(bool with_version) const
     if (!parameters.empty())
     {
         stream << '(';
-        for (size_t i = 0; i < parameters.size(); ++i)
+        for (size_t i = 0, size = parameters.size(); i < size; ++i)
         {
             if (i)
                 stream << ", ";
diff --git a/src/Parsers/ParserDataType.cpp b/src/Parsers/ParserDataType.cpp
index a1a24c40ac28..3e2a6facac6c 100644
--- a/src/Parsers/ParserDataType.cpp
+++ b/src/Parsers/ParserDataType.cpp
@@ -27,7 +27,7 @@ class ParserDataTypeArgument : public IParserBase
     {
         ParserNestedTable nested_parser;
         ParserDataType data_type_parser;
-        ParserLiteral literal_parser;
+        ParserAllCollectionsOfLiterals literal_parser(false);
 
         const char * operators[] = {"=", "equals", nullptr};
         ParserLeftAssociativeBinaryOperatorList enum_parser(operators, std::make_unique<ParserLiteral>());
@@ -145,4 +145,3 @@ bool ParserDataType::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)
 }
 
 }
-
