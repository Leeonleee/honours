{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 44358,
  "instance_id": "ClickHouse__ClickHouse-44358",
  "issue_numbers": [
    "30975"
  ],
  "base_commit": "2892d447d4acfc9878108c17f775db8b62aa48c4",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionSumMap.h b/src/AggregateFunctions/AggregateFunctionSumMap.h\nindex ee6b15257414..4a1088a87bd9 100644\n--- a/src/AggregateFunctions/AggregateFunctionSumMap.h\n+++ b/src/AggregateFunctions/AggregateFunctionSumMap.h\n@@ -468,6 +468,7 @@ class AggregateFunctionSumMap final :\n     bool keepKey(const T &) const { return true; }\n };\n \n+\n template <typename T, bool overflow, bool tuple_argument>\n class AggregateFunctionSumMapFiltered final :\n     public AggregateFunctionMapBase<T,\n@@ -502,6 +503,8 @@ class AggregateFunctionSumMapFiltered final :\n                 \"Aggregate function {} requires an Array as a parameter\",\n                 getNameImpl());\n \n+        this->parameters = params_;\n+\n         keys_to_keep.reserve(keys_to_keep_values.size());\n \n         for (const Field & f : keys_to_keep_values)\n@@ -509,7 +512,16 @@ class AggregateFunctionSumMapFiltered final :\n     }\n \n     static String getNameImpl()\n-    { return overflow ? \"sumMapFilteredWithOverflow\" : \"sumMapFiltered\"; }\n+    {\n+        if constexpr (overflow)\n+        {\n+            return \"sumMapFilteredWithOverflow\";\n+        }\n+        else\n+        {\n+            return \"sumMapFiltered\";\n+        }\n+    }\n \n     bool keepKey(const T & key) const { return keys_to_keep.count(key); }\n };\ndiff --git a/src/DataTypes/DataTypeAggregateFunction.cpp b/src/DataTypes/DataTypeAggregateFunction.cpp\nindex 7056fcff42f0..ab6d024f5d8d 100644\n--- a/src/DataTypes/DataTypeAggregateFunction.cpp\n+++ b/src/DataTypes/DataTypeAggregateFunction.cpp\n@@ -67,7 +67,7 @@ String DataTypeAggregateFunction::getNameImpl(bool with_version) const\n     if (!parameters.empty())\n     {\n         stream << '(';\n-        for (size_t i = 0; i < parameters.size(); ++i)\n+        for (size_t i = 0, size = parameters.size(); i < size; ++i)\n         {\n             if (i)\n                 stream << \", \";\ndiff --git a/src/Parsers/ParserDataType.cpp b/src/Parsers/ParserDataType.cpp\nindex a1a24c40ac28..3e2a6facac6c 100644\n--- a/src/Parsers/ParserDataType.cpp\n+++ b/src/Parsers/ParserDataType.cpp\n@@ -27,7 +27,7 @@ class ParserDataTypeArgument : public IParserBase\n     {\n         ParserNestedTable nested_parser;\n         ParserDataType data_type_parser;\n-        ParserLiteral literal_parser;\n+        ParserAllCollectionsOfLiterals literal_parser(false);\n \n         const char * operators[] = {\"=\", \"equals\", nullptr};\n         ParserLeftAssociativeBinaryOperatorList enum_parser(operators, std::make_unique<ParserLiteral>());\n@@ -145,4 +145,3 @@ bool ParserDataType::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n }\n \n }\n-\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02511_complex_literals_as_aggregate_function_parameters.reference b/tests/queries/0_stateless/02511_complex_literals_as_aggregate_function_parameters.reference\nnew file mode 100644\nindex 000000000000..ab6afce21efa\n--- /dev/null\n+++ b/tests/queries/0_stateless/02511_complex_literals_as_aggregate_function_parameters.reference\n@@ -0,0 +1,4 @@\n+AggregateFunction(1, sumMapFiltered([1, 2]), Array(UInt8), Array(UInt8))\n+02010A00000000000000020A00000000000000\n+02010A00000000000000020A00000000000000\n+([1,2],[20,20])\ndiff --git a/tests/queries/0_stateless/02511_complex_literals_as_aggregate_function_parameters.sql b/tests/queries/0_stateless/02511_complex_literals_as_aggregate_function_parameters.sql\nnew file mode 100644\nindex 000000000000..92b5f0143ed0\n--- /dev/null\n+++ b/tests/queries/0_stateless/02511_complex_literals_as_aggregate_function_parameters.sql\n@@ -0,0 +1,4 @@\n+SELECT toTypeName(sumMapFilteredState([1, 2])([1, 2, 3], [10, 10, 10]));\n+SELECT hex(sumMapFilteredState([1, 2])([1, 2, 3], [10, 10, 10]));\n+SELECT hex(unhex('02010A00000000000000020A00000000000000')::AggregateFunction(1, sumMapFiltered([1, 2]), Array(UInt8), Array(UInt8)));\n+SELECT sumMapFilteredMerge([1, 2])(*) FROM remote('127.0.0.{1,2}', view(SELECT sumMapFilteredState([1, 2])([1, 2, 3], [10, 10, 10])));\n",
  "problem_statement": "Exception thrown when using sumMapFiltered on a distributed table\n**Describe what's wrong**\r\n\r\nAn exception is thrown when trying to use the `sumMapFiltered` function on a distributed table. \r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes. The tests below ran on ClickHouse 21.9.3\r\n\r\n\r\n**How to reproduce**\r\n\r\nCreate the test tables and insert a couple rows of data:\r\n```sql\r\nCREATE TABLE local ON CLUSTER 'cluster_name' (\r\n  time     DateTime,\r\n  data     Nested(\r\n    key      Int16,\r\n    value    Int64\r\n  )\r\n) ENGINE = MergeTree()\r\n  PARTITION BY toYYYYMM(time)\r\n  ORDER BY time\r\n\r\nCREATE TABLE distributed ON CLUSTER 'cluster_name' (\r\n  time     DateTime,\r\n  data     Nested(\r\n    key      Int16,\r\n    value    Int64\r\n  )\r\n) ENGINE = Distributed('cluster_name', 'cluster_name', 'local') \r\n\r\nINSERT INTO local VALUES\r\n  (1635794296, [1, 2, 3], [10, 10, 10]),\r\n  (1635794296, [1, 2, 3], [10, 10, 10]),\r\n  (1635794296, [1, 2, 3], [10, 10, 10])\r\n```\r\n\r\nThen run this query against the distributed table:\r\n\r\n```sql\r\nSELECT sumMapFiltered([toInt16(1),toInt16(2)])(data.key, data.value) FROM distributed\r\n```\r\n\r\n**Expected behavior**\r\n\r\nI would expect the query to return the correct aggregation value, but an error is thrown instead\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\nReceived exception from server (version 21.9.3):\r\nCode: 62. DB::Exception: Received from localhost:9000. DB::Exception: Syntax error (data type): failed at position 34 ('['): [1, 2]), Array(Int16), Array(Int64)). Expected one of: number, nested table, literal, NULL, identifier, data type argument, string literal, name and type pair list, list of elements, data type, list, delimited by binary operators, name and type pair: while receiving packet from [redacted]:9000: While executing Remote. (SYNTAX_ERROR)\r\n```\r\n\r\n**Additional context**\r\n\r\nThe exact same query works as expected when executed against the local table.\r\n\n",
  "hints_text": "We have the exact same behavior using the version 21.3.13.9 \nLet's invite the author, @LeoErcolanelli \nHey, I have taken a look at this problem, here are my thoughts, might be useful for someone who is going to pick up this issue:\r\n\r\n**SUMMARY**: it seems like a problem with remote execution in general, rather than with `sumMapFiltered`.\r\n\r\n**DETAILS**:\r\n* `sumMapFiltered` seems to be implemented correctly\r\n* as written in the issue, the function works well locally, but fails with distributed tables with remote shards\r\n* `SYNTAX ERROR` is thrown when the query is parsed before sending to a remote shard\r\n* the parser cannot process the array literal in the aggregating function parameter for the remote shard (even though array literals are accepted when invoking the query locally)\r\n* the error is thrown in `parseQueryAndMovePosition` in src/Parsers/parseQuery.cpp, the parser issue is actually detected in `tryParseQuery` in line 293\r\n* what is parsed for the remote shard is the initial query already processed in some way, for `sumMapFiltered([toInt16(1),toInt16(2)])(data.key, data.value)` from the issue what is processed for the remote shard is `([1, 2]), Array(Int16), Array(Int64))` - the columns listed in the second parentheses transformed into these column types, the literal from the first parentheses remained roughly the same (ignore `toInt16`, for some reason `sumMapFiltered` doesn't like unsigned ints, error is thrown with `safeGet` in `AggregateFunctionSumMapFiltered` constructor)\r\n* I think `sumMapFiltered` is the only aggregating function which takes an array as an argument, so this problem doesn't occur with other functions\r\n* I used https://github.com/tetafro/clickhouse-cluster configuration for a local cluster. I tried creating a \"remote\" shard with localhost ip, but I think it didn't act as a truly remote shard, the query would pass like for a local table\r\n* as in the summary, the problem seems to stem from some problem with general remote execution, which might be as simple to solve as adding an attempt at using another parser variant somewhre in the query parsing, or could be more involved - hard to say without ClickHouse expertise\nIt's a strange choice to pass an array as a parameter to `sumMapFiltered` while we have a similar function - `quantiles`, taking multiple parameters instead of an array.",
  "created_at": "2022-12-19T06:28:29Z",
  "modified_files": [
    "src/AggregateFunctions/AggregateFunctionSumMap.h",
    "src/DataTypes/DataTypeAggregateFunction.cpp",
    "src/Parsers/ParserDataType.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02511_complex_literals_as_aggregate_function_parameters.reference",
    "b/tests/queries/0_stateless/02511_complex_literals_as_aggregate_function_parameters.sql"
  ]
}