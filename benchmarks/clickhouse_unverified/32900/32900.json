{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 32900,
  "instance_id": "ClickHouse__ClickHouse-32900",
  "issue_numbers": [
    "15182"
  ],
  "base_commit": "9d9c227bd300f1bb46440b38aa01465548d1f8c3",
  "patch": "diff --git a/base/mysqlxx/Row.cpp b/base/mysqlxx/Row.cpp\nindex aecec46e5194..861a04f8ecec 100644\n--- a/base/mysqlxx/Row.cpp\n+++ b/base/mysqlxx/Row.cpp\n@@ -21,4 +21,12 @@ Value Row::operator[] (const char * name) const\n     throw Exception(std::string(\"Unknown column \") + name);\n }\n \n+enum enum_field_types Row::getFieldType(size_t i)\n+{\n+    if (i >= res->getNumFields())\n+        throw Exception(std::string(\"Array Index Overflow\"));\n+    MYSQL_FIELDS fields = res->getFields();\n+    return fields[i].type;\n+}\n+\n }\ndiff --git a/base/mysqlxx/Row.h b/base/mysqlxx/Row.h\nindex d668fdbd29ac..b11d7d628ef8 100644\n--- a/base/mysqlxx/Row.h\n+++ b/base/mysqlxx/Row.h\n@@ -79,6 +79,8 @@ class Row\n       */\n     operator private_bool_type() const { return row == nullptr ? nullptr : &Row::row; }\n \n+    enum enum_field_types getFieldType(size_t i);\n+\n private:\n     MYSQL_ROW row{};\n     ResultBase * res{};\ndiff --git a/base/mysqlxx/Types.h b/base/mysqlxx/Types.h\nindex b5ed70916faf..5fd9aa8bbc88 100644\n--- a/base/mysqlxx/Types.h\n+++ b/base/mysqlxx/Types.h\n@@ -16,6 +16,8 @@ using MYSQL_ROW = char**;\n struct st_mysql_field;\n using MYSQL_FIELD = st_mysql_field;\n \n+enum struct enum_field_types;\n+\n #endif\n \n namespace mysqlxx\ndiff --git a/docs/en/engines/database-engines/materialized-mysql.md b/docs/en/engines/database-engines/materialized-mysql.md\nindex 944264b68a35..b8b49634735e 100644\n--- a/docs/en/engines/database-engines/materialized-mysql.md\n+++ b/docs/en/engines/database-engines/materialized-mysql.md\n@@ -83,6 +83,7 @@ When working with the `MaterializedMySQL` database engine, [ReplacingMergeTree](\n | VARCHAR, VAR_STRING     | [String](../../sql-reference/data-types/string.md)           |\n | BLOB                    | [String](../../sql-reference/data-types/string.md)           |\n | BINARY                  | [FixedString](../../sql-reference/data-types/fixedstring.md) |\n+| BIT                     | [UInt64](../../sql-reference/data-types/int-uint.md)         |\n \n [Nullable](../../sql-reference/data-types/nullable.md) is supported.\n \ndiff --git a/src/Core/MySQL/MySQLReplication.cpp b/src/Core/MySQL/MySQLReplication.cpp\nindex f734154f4ba2..d6094b0b212e 100644\n--- a/src/Core/MySQL/MySQLReplication.cpp\n+++ b/src/Core/MySQL/MySQLReplication.cpp\n@@ -230,6 +230,7 @@ namespace MySQLReplication\n                     pos += 2;\n                     break;\n                 }\n+                case MYSQL_TYPE_BIT:\n                 case MYSQL_TYPE_VARCHAR:\n                 case MYSQL_TYPE_VAR_STRING: {\n                     /// Little-Endian\n@@ -584,6 +585,15 @@ namespace MySQLReplication\n                         }\n                         break;\n                     }\n+                    case MYSQL_TYPE_BIT:\n+                    {\n+                        UInt32 bits = ((meta >> 8) * 8) + (meta & 0xff);\n+                        UInt32 size = (bits + 7) / 8;\n+                        UInt64 val = 0UL;\n+                        readBigEndianStrict(payload, reinterpret_cast<char *>(&val), size);\n+                        row.push_back(val);\n+                        break;\n+                    }\n                     case MYSQL_TYPE_VARCHAR:\n                     case MYSQL_TYPE_VAR_STRING:\n                     {\ndiff --git a/src/DataTypes/DataTypesNumber.cpp b/src/DataTypes/DataTypesNumber.cpp\nindex fef4c34d8b05..0c9a410077fc 100644\n--- a/src/DataTypes/DataTypesNumber.cpp\n+++ b/src/DataTypes/DataTypesNumber.cpp\n@@ -86,6 +86,7 @@ void registerDataTypeNumbers(DataTypeFactory & factory)\n     factory.registerAlias(\"INT UNSIGNED\", \"UInt32\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"INTEGER UNSIGNED\", \"UInt32\", DataTypeFactory::CaseInsensitive);\n     factory.registerAlias(\"BIGINT UNSIGNED\", \"UInt64\", DataTypeFactory::CaseInsensitive);\n+    factory.registerAlias(\"BIT\", \"UInt64\", DataTypeFactory::CaseInsensitive);\n }\n \n }\ndiff --git a/src/DataTypes/convertMySQLDataType.cpp b/src/DataTypes/convertMySQLDataType.cpp\nindex 1b5e20bddce3..ee897de95979 100644\n--- a/src/DataTypes/convertMySQLDataType.cpp\n+++ b/src/DataTypes/convertMySQLDataType.cpp\n@@ -91,6 +91,10 @@ DataTypePtr convertMySQLDataType(MultiEnum<MySQLDataTypesSupport> type_support,\n             res = std::make_shared<DataTypeDateTime64>(scale);\n         }\n     }\n+    else if (type_name == \"bit\")\n+    {\n+        res = std::make_shared<DataTypeUInt64>();\n+    }\n     else if (type_support.isSet(MySQLDataTypesSupport::DECIMAL) && (type_name == \"numeric\" || type_name == \"decimal\"))\n     {\n         if (precision <= DecimalUtils::max_precision<Decimal32>)\ndiff --git a/src/Processors/Sources/MySQLSource.cpp b/src/Processors/Sources/MySQLSource.cpp\nindex 8e9cdcfda48a..b0cb62340e90 100644\n--- a/src/Processors/Sources/MySQLSource.cpp\n+++ b/src/Processors/Sources/MySQLSource.cpp\n@@ -2,6 +2,7 @@\n \n #if USE_MYSQL\n #include <vector>\n+#include <Core/MySQL/MySQLReplication.h>\n #include <Columns/ColumnNullable.h>\n #include <Columns/ColumnString.h>\n #include <Columns/ColumnsNumber.h>\n@@ -126,7 +127,7 @@ namespace\n {\n     using ValueType = ExternalResultDescription::ValueType;\n \n-    void insertValue(const IDataType & data_type, IColumn & column, const ValueType type, const mysqlxx::Value & value, size_t & read_bytes_size)\n+    void insertValue(const IDataType & data_type, IColumn & column, const ValueType type, const mysqlxx::Value & value, size_t & read_bytes_size, enum enum_field_types mysql_type)\n     {\n         switch (type)\n         {\n@@ -143,9 +144,24 @@ namespace\n                 read_bytes_size += 4;\n                 break;\n             case ValueType::vtUInt64:\n-                assert_cast<ColumnUInt64 &>(column).insertValue(value.getUInt());\n-                read_bytes_size += 8;\n+            {\n+                //we don't have enum enum_field_types definition in mysqlxx/Types.h, so we use literal values directly here.\n+                if (static_cast<int>(mysql_type) == 16)\n+                {\n+                    size_t n = value.size();\n+                    UInt64 val = 0UL;\n+                    ReadBufferFromMemory payload(const_cast<char *>(value.data()), n);\n+                    MySQLReplication::readBigEndianStrict(payload, reinterpret_cast<char *>(&val), n);\n+                    assert_cast<ColumnUInt64 &>(column).insertValue(val);\n+                    read_bytes_size += n;\n+                }\n+                else\n+                {\n+                    assert_cast<ColumnUInt64 &>(column).insertValue(value.getUInt());\n+                    read_bytes_size += 8;\n+                }\n                 break;\n+            }\n             case ValueType::vtInt8:\n                 assert_cast<ColumnInt8 &>(column).insertValue(value.getInt());\n                 read_bytes_size += 1;\n@@ -258,12 +274,12 @@ Chunk MySQLSource::generate()\n                 {\n                     ColumnNullable & column_nullable = assert_cast<ColumnNullable &>(*columns[index]);\n                     const auto & data_type = assert_cast<const DataTypeNullable &>(*sample.type);\n-                    insertValue(*data_type.getNestedType(), column_nullable.getNestedColumn(), description.types[index].first, value, read_bytes_size);\n+                    insertValue(*data_type.getNestedType(), column_nullable.getNestedColumn(), description.types[index].first, value, read_bytes_size, row.getFieldType(position_mapping[index]));\n                     column_nullable.getNullMapData().emplace_back(false);\n                 }\n                 else\n                 {\n-                    insertValue(*sample.type, *columns[index], description.types[index].first, value, read_bytes_size);\n+                    insertValue(*sample.type, *columns[index], description.types[index].first, value, read_bytes_size, row.getFieldType(position_mapping[index]));\n                 }\n             }\n             else\n",
  "test_patch": "diff --git a/src/Interpreters/MySQL/tests/gtest_create_rewritten.cpp b/src/Interpreters/MySQL/tests/gtest_create_rewritten.cpp\nindex 5e18b0de2e08..02af07bc00c1 100644\n--- a/src/Interpreters/MySQL/tests/gtest_create_rewritten.cpp\n+++ b/src/Interpreters/MySQL/tests/gtest_create_rewritten.cpp\n@@ -40,7 +40,7 @@ TEST(MySQLCreateRewritten, ColumnsDataType)\n         {\"TINYINT\", \"Int8\"}, {\"SMALLINT\", \"Int16\"}, {\"MEDIUMINT\", \"Int32\"}, {\"INT\", \"Int32\"},\n         {\"INTEGER\", \"Int32\"}, {\"BIGINT\", \"Int64\"}, {\"FLOAT\", \"Float32\"}, {\"DOUBLE\", \"Float64\"},\n         {\"VARCHAR(10)\", \"String\"}, {\"CHAR(10)\", \"String\"}, {\"Date\", \"Date\"}, {\"DateTime\", \"DateTime\"},\n-        {\"TIMESTAMP\", \"DateTime\"}, {\"BOOLEAN\", \"Bool\"}\n+        {\"TIMESTAMP\", \"DateTime\"}, {\"BOOLEAN\", \"Bool\"}, {\"BIT\", \"UInt64\"}\n     };\n \n     for (const auto & [test_type, mapped_type] : test_types)\ndiff --git a/tests/integration/test_materialized_mysql_database/materialize_with_ddl.py b/tests/integration/test_materialized_mysql_database/materialize_with_ddl.py\nindex 43fab165c53a..007d672aaea4 100644\n--- a/tests/integration/test_materialized_mysql_database/materialize_with_ddl.py\n+++ b/tests/integration/test_materialized_mysql_database/materialize_with_ddl.py\n@@ -624,7 +624,7 @@ def err_sync_user_privs_with_materialized_mysql_database(clickhouse_node, mysql_\n             service_name))\n     assert \"priv_err_db\" in clickhouse_node.query(\"SHOW DATABASES\")\n     assert \"test_table_1\" not in clickhouse_node.query(\"SHOW TABLES FROM priv_err_db\")\n-    clickhouse_node.query(\"DETACH DATABASE priv_err_db\")\n+    clickhouse_node.query_with_retry(\"DETACH DATABASE priv_err_db\")\n \n     mysql_node.query(\"REVOKE SELECT ON priv_err_db.* FROM 'test'@'%'\")\n     time.sleep(3)\n@@ -743,7 +743,7 @@ def mysql_kill_sync_thread_restore_test(clickhouse_node, mysql_node, service_nam\n             time.sleep(sleep_time)\n             clickhouse_node.query(\"SELECT * FROM test_database.test_table\")\n \n-    clickhouse_node.query(\"DETACH DATABASE test_database\")\n+    clickhouse_node.query_with_retry(\"DETACH DATABASE test_database\")\n     clickhouse_node.query(\"ATTACH DATABASE test_database\")\n     check_query(clickhouse_node, \"SELECT * FROM test_database.test_table ORDER BY id FORMAT TSV\", '1\\n2\\n')\n \n@@ -784,7 +784,7 @@ def insert(num):\n \n         mysql_node.alloc_connection()\n \n-        clickhouse_node.query(\"DETACH DATABASE kill_mysql_while_insert\")\n+        clickhouse_node.query_with_retry(\"DETACH DATABASE kill_mysql_while_insert\")\n         clickhouse_node.query(\"ATTACH DATABASE kill_mysql_while_insert\")\n \n         result = mysql_node.query_and_get_data(\"SELECT COUNT(1) FROM kill_mysql_while_insert.test\")\n@@ -1072,3 +1072,68 @@ def table_overrides(clickhouse_node, mysql_node, service_name):\n     check_query(clickhouse_node, \"SELECT type FROM system.columns WHERE database = 'table_overrides' AND table = 't1' AND name = 'sensor_id'\", \"UInt64\\n\")\n     clickhouse_node.query(\"DROP DATABASE IF EXISTS table_overrides\")\n     mysql_node.query(\"DROP DATABASE IF EXISTS table_overrides\")\n+\n+def materialized_database_support_all_kinds_of_mysql_datatype(clickhouse_node, mysql_node, service_name):\n+    mysql_node.query(\"DROP DATABASE IF EXISTS test_database_datatype\")\n+    clickhouse_node.query(\"DROP DATABASE IF EXISTS test_database_datatype\")\n+    mysql_node.query(\"CREATE DATABASE test_database_datatype DEFAULT CHARACTER SET 'utf8'\")\n+    mysql_node.query(\"\"\" \n+       CREATE TABLE test_database_datatype.t1 (\n+            `v1` int(10) unsigned  AUTO_INCREMENT,\n+            `v2` TINYINT,\n+            `v3` SMALLINT,\n+            `v4` BIGINT,\n+            `v5` int,\n+            `v6` TINYINT unsigned,\n+            `v7` SMALLINT unsigned,\n+            `v8` BIGINT unsigned,\n+            `v9` FLOAT,\n+            `v10` FLOAT unsigned,\n+            `v11` DOUBLE,\n+            `v12` DOUBLE unsigned,\n+            `v13` DECIMAL(5,4),\n+            `v14` date,\n+            `v15` TEXT,\n+            `v16` varchar(100) ,\n+            `v17` BLOB,\n+            `v18` datetime DEFAULT CURRENT_TIMESTAMP,\n+            `v19` datetime(6) DEFAULT CURRENT_TIMESTAMP(6),\n+            `v20` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n+            `v21` TIMESTAMP(6) DEFAULT CURRENT_TIMESTAMP(6),\n+            /* todo support */\n+            # `v22` YEAR,\n+            # `v23` TIME,\n+            # `v24` TIME(3),\n+            # `v25` GEOMETRY,\n+            `v26` bit(4),\n+            # `v27` JSON DEFAULT NULL,\n+            # `v28` set('a', 'c', 'f', 'd', 'e', 'b'),\n+            `v29` mediumint(4) unsigned NOT NULL DEFAULT '0',\n+            `v30` varbinary(255) DEFAULT NULL COMMENT 'varbinary support',\n+            `v31`  binary(200) DEFAULT NULL,\n+            `v32`  ENUM('RED','GREEN','BLUE'), \n+            PRIMARY KEY (`v1`)\n+        ) ENGINE=InnoDB;\n+        \"\"\")\n+\n+    mysql_node.query(\"\"\"\n+        INSERT INTO test_database_datatype.t1 (v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v26, v29, v30, v31, v32) values \n+        (1, 11, 9223372036854775807, -1,  1, 11, 18446744073709551615, -1.1,  1.1, -1.111, 1.111, 1.1111, '2021-10-06', 'text', 'varchar', 'BLOB', '2021-10-06 18:32:57',  '2021-10-06 18:32:57.482786', '2021-10-06 18:32:57', '2021-10-06 18:32:57.482786', b'1010', 11, 'varbinary', 'binary', 'RED');\n+        \"\"\")\n+    clickhouse_node.query(\n+        \"CREATE DATABASE test_database_datatype ENGINE = MaterializeMySQL('{}:3306', 'test_database_datatype', 'root', 'clickhouse')\".format(\n+            service_name))\n+\n+    check_query(clickhouse_node, \"SELECT name FROM system.tables WHERE database = 'test_database_datatype'\", \"t1\\n\")\n+    # full synchronization check\n+    check_query(clickhouse_node, \"SELECT v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v26, v29, v30, v32 FROM test_database_datatype.t1 FORMAT TSV\",\n+                \"1\\t1\\t11\\t9223372036854775807\\t-1\\t1\\t11\\t18446744073709551615\\t-1.1\\t1.1\\t-1.111\\t1.111\\t1.1111\\t2021-10-06\\ttext\\tvarchar\\tBLOB\\t2021-10-06 18:32:57\\t2021-10-06 18:32:57.482786\\t2021-10-06 18:32:57\\t2021-10-06 18:32:57.482786\\t10\\t11\\tvarbinary\\tRED\\n\")\n+\n+    mysql_node.query(\"\"\"\n+            INSERT INTO test_database_datatype.t1 (v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v26, v29, v30, v31, v32) values \n+            (2, 22, 9223372036854775807, -2,  2, 22, 18446744073709551615, -2.2,  2.2, -2.22, 2.222, 2.2222, '2021-10-07', 'text', 'varchar', 'BLOB',  '2021-10-07 18:32:57',  '2021-10-07 18:32:57.482786', '2021-10-07 18:32:57', '2021-10-07 18:32:57.482786', b'1011', 22, 'varbinary', 'binary', 'GREEN' );\n+            \"\"\")\n+    # increment synchronization check\n+    check_query(clickhouse_node, \"SELECT v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, v26, v29, v30, v32 FROM   test_database_datatype.t1 ORDER BY v1 FORMAT TSV\",\n+                \"1\\t1\\t11\\t9223372036854775807\\t-1\\t1\\t11\\t18446744073709551615\\t-1.1\\t1.1\\t-1.111\\t1.111\\t1.1111\\t2021-10-06\\ttext\\tvarchar\\tBLOB\\t2021-10-06 18:32:57\\t2021-10-06 18:32:57.482786\\t2021-10-06 18:32:57\\t2021-10-06 18:32:57.482786\\t10\\t11\\tvarbinary\\tRED\\n\" +\n+                \"2\\t2\\t22\\t9223372036854775807\\t-2\\t2\\t22\\t18446744073709551615\\t-2.2\\t2.2\\t-2.22\\t2.222\\t2.2222\\t2021-10-07\\ttext\\tvarchar\\tBLOB\\t2021-10-07 18:32:57\\t2021-10-07 18:32:57.482786\\t2021-10-07 18:32:57\\t2021-10-07 18:32:57.482786\\t11\\t22\\tvarbinary\\tGREEN\\n\")\ndiff --git a/tests/integration/test_materialized_mysql_database/test.py b/tests/integration/test_materialized_mysql_database/test.py\nindex 5142a613799f..501c0cd78fa7 100644\n--- a/tests/integration/test_materialized_mysql_database/test.py\n+++ b/tests/integration/test_materialized_mysql_database/test.py\n@@ -253,3 +253,7 @@ def test_table_table(started_cluster, started_mysql_8_0, started_mysql_5_7, clic\n def test_table_overrides(started_cluster, started_mysql_8_0, started_mysql_5_7, clickhouse_node):\n     materialize_with_ddl.table_overrides(clickhouse_node, started_mysql_5_7, \"mysql57\")\n     materialize_with_ddl.table_overrides(clickhouse_node, started_mysql_8_0, \"mysql80\")\n+\n+def test_materialized_database_support_all_kinds_of_mysql_datatype(started_cluster, started_mysql_8_0, started_mysql_5_7, clickhouse_node):\n+    materialize_with_ddl.materialized_database_support_all_kinds_of_mysql_datatype(clickhouse_node, started_mysql_8_0, \"mysql80\")\n+    materialize_with_ddl.materialized_database_support_all_kinds_of_mysql_datatype(clickhouse_node, started_mysql_5_7, \"mysql57\")\n",
  "problem_statement": "MaterializeMySQL: support BIT data type\n2020.09.23 16:13:20.829140 [ 24677 ] {} <Error> MaterializeMySQLSyncThread: Code: 1002, e.displayText() = DB::Exception: ParseMetaData: Unhandled data type:16, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x114ffed0 in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x8367afd in /usr/bin/clickhouse\r\n2. ? @ 0xe2b4199 in /usr/bin/clickhouse\r\n3. DB::MySQLReplication::TableMapEvent::parseImpl(DB::ReadBuffer&) @ 0xe2ae6b5 in /usr/bin/clickhouse\r\n4. DB::MySQLReplication::MySQLFlavor::readPayloadImpl(DB::ReadBuffer&) @ 0xe2b2931 in /usr/bin/clickhouse\r\n5. DB::MySQLProtocol::IMySQLReadPacket::readPayload(DB::ReadBuffer&, unsigned char&) @ 0xe2bdc81 in /usr/bin/clickhouse\r\n6. DB::MySQLProtocol::PacketEndpoint::tryReceivePacket(DB::MySQLProtocol::IMySQLReadPacket&, unsigned long) @ 0xe2cc057 in /usr/bin/clickhouse\r\n7. DB::MySQLClient::readOneBinlogEvent(unsigned long) @ 0xe2c9a81 in /usr/bin/clickhouse\r\n8. DB::MaterializeMySQLSyncThread::synchronization(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xe2a3b11 in /usr/bin/clickhouse\r\n9. ? @ 0xe2a3f36 in /usr/bin/clickhouse\r\n10. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x8395fcf in /usr/bin/clickhouse\r\n11. ? @ 0x83948f3 in /usr/bin/clickhouse\r\n12. start_thread @ 0x7ea5 in /usr/lib64/libpthread-2.17.so\r\n13. __clone @ 0xfe8dd in /usr/lib64/libc-2.17.so\r\n (version 20.10.1.4709 (official build))\r\n\n",
  "hints_text": "16 is for `MYSQL_TYPE_BIT`, currently it's not supported in ClickHouse\nis there any update on the issue?\nis there any solution resolve these issue? I encountered the same problem.\n@alexey-milovidov I have this very same issue but I do not have any BIT field at all. Table with 7 Colums, 5 BIGINT and 2 Varchar(45). The tables are compressed (level 6) in mysql but since i have added this table, clickhouse won't replicate data anymore after the initial copy. So i can get the current stand but thats it.\r\n\r\n2021.08.27 18:34:46.714353 [ 1108 ] {} <Error> MaterializeMySQLSyncThread: Code: 1002, e.displayText() = DB::Exception: ParseMetaData: Unhandled data type:16, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x87f714a in /usr/bin/clickhouse\r\n1. DB::MySQLReplication::TableMapEvent::parseMeta(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) @ 0xf15364b in /usr/bin/clickhouse\r\n2. ? @ 0xf152fb3 in /usr/bin/clickhouse\r\n3. DB::MySQLReplication::MySQLFlavor::readPayloadImpl(DB::ReadBuffer&) @ 0xf15a806 in /usr/bin/clickhouse\r\n4. DB::MySQLProtocol::IMySQLReadPacket::readPayload(DB::ReadBuffer&, unsigned char&) @ 0xf13f957 in /usr/bin/clickhouse\r\n5. DB::MySQLProtocol::PacketEndpoint::tryReceivePacket(DB::MySQLProtocol::IMySQLReadPacket&, unsigned long) @ 0xf1403c3 in /usr/bin/clickhouse\r\n6. DB::MaterializeMySQLSyncThread::synchronization() @ 0xf10d0bd in /usr/bin/clickhouse\r\n7. ? @ 0xf12c412 in /usr/bin/clickhouse\r\n8. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x88372bf in /usr/bin/clickhouse\r\n9. ? @ 0x883ade3 in /usr/bin/clickhouse\r\n10. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n11. clone @ 0x12171f in /lib/x86_64-linux-gnu/libc-2.27.so\r\n (version 21.4.6.55 (official build))\r\n\r\n\r\nEdit: does it matter if in mysql the insert is happening as part of a abigger explicit transaction?\nMaterializeMySQL feature is not ready for production. It is also not being developed.\nIts not a productive environment. If its not further developed, it might be better to put it as DEPRECATED. Many seem to like this feature in particular and would not bother about it if its deprecated. Experimental implies that its upcoming rather then stopped. Maybe this would help",
  "created_at": "2021-12-17T06:53:10Z",
  "modified_files": [
    "base/mysqlxx/Row.cpp",
    "base/mysqlxx/Row.h",
    "base/mysqlxx/Types.h",
    "docs/en/engines/database-engines/materialized-mysql.md",
    "src/Core/MySQL/MySQLReplication.cpp",
    "src/DataTypes/DataTypesNumber.cpp",
    "src/DataTypes/convertMySQLDataType.cpp",
    "src/Processors/Sources/MySQLSource.cpp"
  ],
  "modified_test_files": [
    "src/Interpreters/MySQL/tests/gtest_create_rewritten.cpp",
    "tests/integration/test_materialized_mysql_database/materialize_with_ddl.py",
    "tests/integration/test_materialized_mysql_database/test.py"
  ]
}