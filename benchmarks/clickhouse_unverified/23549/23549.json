{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23549,
  "instance_id": "ClickHouse__ClickHouse-23549",
  "issue_numbers": [
    "17718"
  ],
  "base_commit": "88334e77cdf866d1d9a05f53e154e6dd167c3876",
  "patch": "diff --git a/src/Interpreters/join_common.cpp b/src/Interpreters/join_common.cpp\nindex 9a9253cee758..eddc16bfb2f0 100644\n--- a/src/Interpreters/join_common.cpp\n+++ b/src/Interpreters/join_common.cpp\n@@ -284,6 +284,11 @@ void joinTotals(const Block & totals, const Block & columns_to_add, const TableJ\n         for (size_t i = 0; i < columns_to_add.columns(); ++i)\n         {\n             const auto & col = columns_to_add.getByPosition(i);\n+            if (block.has(col.name))\n+            {\n+                /// For StorageJoin we discarded table qualifiers, so some names may clash\n+                continue;\n+            }\n             block.insert({\n                 col.type->createColumnConstWithDefaultValue(1)->convertToFullColumnIfConst(),\n                 col.type,\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00119_storage_join.reference b/tests/queries/0_stateless/00119_storage_join.reference\nindex 2689dadfb424..9b1dfe11616e 100644\n--- a/tests/queries/0_stateless/00119_storage_join.reference\n+++ b/tests/queries/0_stateless/00119_storage_join.reference\n@@ -38,3 +38,7 @@ ghi\t[]\n 1\t[]\t2\t\t3\t7\t4\n 1\t[]\t2\t\t3\t8\t4\n 1\t[]\t2\t\t3\t9\t4\n+0\ta\t[]\n+1\ta\t[0]\n+\n+0\ta\t[]\ndiff --git a/tests/queries/0_stateless/00119_storage_join.sql b/tests/queries/0_stateless/00119_storage_join.sql\nindex 735ef2da16a1..e1cc7a67588f 100644\n--- a/tests/queries/0_stateless/00119_storage_join.sql\n+++ b/tests/queries/0_stateless/00119_storage_join.sql\n@@ -11,4 +11,8 @@ SELECT s, x FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT\n SELECT x, s, k FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN join USING k;\n SELECT 1, x, 2, s, 3, k, 4 FROM (SELECT number AS k FROM system.numbers LIMIT 10) js1 ANY LEFT JOIN join USING k;\n \n+SELECT t1.k, t1.s, t2.x\n+FROM ( SELECT number AS k, 'a' AS s FROM numbers(2) GROUP BY number WITH TOTALS ) AS t1\n+ANY LEFT JOIN join AS t2 USING(k);\n+\n DROP TABLE join;\n",
  "problem_statement": "Error in query with join and 'with totals' clause\n**Describe the bug**\r\nException happens when running query which joins subquery with `group by with totals` clause and table with Join engine.\r\n\r\n**How to reproduce**\r\nClickhouse version 20.7.4.11\r\n\r\n```\r\nCREATE TABLE table1 (\r\n  show_date DateTime,\r\n  pu_num String,\r\n  pu_id UInt64,\r\n  amnt UInt32\r\n) ENGINE = MergeTree(\r\n) PARTITION BY toYYYYMM(show_date)\r\nORDER BY (show_date);\r\n\r\ninsert into table1 values('2020-01-01 12:00:00', '1234454', 54234, 5);\r\ninsert into table1 values('2020-01-02 13:00:00', '1234454', 54234, 7);\r\ninsert into table1 values('2020-01-11 15:00:00', '123123', 32434, 4);\r\n\r\nCREATE TABLE table2 (\r\n  pu_id UInt64,\r\n  pu_num String,\r\n  name_rus String)\r\n ENGINE = Join(ANY, LEFT, pu_id) SETTINGS join_use_nulls = 1;\r\n\r\ninsert into table2 values(32434, '123123', '\u0418\u043c\u044f_1');\r\ninsert into table2 values(54234, '1234454', '\u0418\u043c\u044f_2');\r\n\r\nselect dd.pu_id, dd.pu_num, dd.s_amnt, k.name_rus\r\nfrom (\r\n    select a.pu_id, a.pu_num, sum(a.amnt) as s_amnt\r\n    from table1 a\r\n    group by a.pu_id, a.pu_num with totals\r\n) dd\r\nANY LEFT JOIN table2 k USING(pu_id) SETTINGS join_use_nulls = 1;\r\n```\r\n\r\n**Error message and/or stacktrace**\r\n```\r\n2020.12.02 09:04:41.208576 [ 49155 ] {a90f1fff-f15e-4edb-8e94-d11ea6107029} <Error> DynamicQueryHandler: Code: 49, e.displayText() = DB::Exception: Invalid number of columns in chunk pushed to OutputPort. Expected 4, found 5\r\nHeader: pu_id UInt64 UInt64(size = 0), pu_num String String(size = 0), s_amnt UInt64 UInt64(size = 0), name_rus Nullable(String) Nullable(size = 0, String(size = 0), UInt8(size = 0))\r\nChunk:  UInt64(size = 1) String(size = 1) UInt64(size = 1) Nullable(size = 1, String(size = 1), UInt8(size = 1)) Nullable(size = 1, String(size = 1), UInt8(size = 1))\r\n, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x12723a80 in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0xa3f52bd in /usr/bin/clickhouse\r\n2. ? @ 0xfee4cf3 in /usr/bin/clickhouse\r\n3. DB::PipelineExecutor::prepareProcessor(unsigned long, unsigned long, std::__1::queue<DB::ExecutingGraph::Node*, std::__1::deque<DB::ExecutingGraph::Node*, std::__1::allocator<DB::ExecutingGraph::Node*> > >&, std::__1::unique_lock<std::__1::mutex>) @ 0xff19e08 in /usr/bin/clickhouse\r\n4. ? @ 0xff1bbdb in /usr/bin/clickhouse\r\n5. ? @ 0xff1c356 in /usr/bin/clickhouse\r\n6. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0xa422ad7 in /usr/bin/clickhouse\r\n7. ? @ 0xa421023 in /usr/bin/clickhouse\r\n8. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n9. __clone @ 0x121a3f in /lib/x86_64-linux-gnu/libc-2.27.so\r\n (version 20.7.4.11 (official build))\r\n```\r\n\r\n\r\n**Additional context**\r\nIf column `pu_num` or clause `with totals` are removed from query, it executes without error.\r\n\n",
  "hints_text": "This error is reproducible on 20.8.8.2, 20.9.7.11 and 20.10.6.27.\nAlso reproducible on 20.11.6.6, 20.12.6.29, 21.1.4.46 and 21.2.3.15.",
  "created_at": "2021-04-23T12:39:18Z",
  "modified_files": [
    "src/Interpreters/join_common.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00119_storage_join.reference",
    "tests/queries/0_stateless/00119_storage_join.sql"
  ]
}