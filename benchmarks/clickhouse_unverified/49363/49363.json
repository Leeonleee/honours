{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 49363,
  "instance_id": "ClickHouse__ClickHouse-49363",
  "issue_numbers": [
    "47332"
  ],
  "base_commit": "0f6a81843fa2b5b86b8a7ac238d18b9fcdf5c657",
  "patch": "diff --git a/src/Storages/AlterCommands.cpp b/src/Storages/AlterCommands.cpp\nindex aff17465466b..ae1f9172459d 100644\n--- a/src/Storages/AlterCommands.cpp\n+++ b/src/Storages/AlterCommands.cpp\n@@ -1090,7 +1090,11 @@ void AlterCommands::validate(const StoragePtr & table, ContextPtr context) const\n                                                              \"in a single ALTER query\", backQuote(column_name));\n \n             if (command.codec)\n+            {\n+                if (all_columns.hasAlias(column_name))\n+                    throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Cannot specify codec for column type ALIAS\");\n                 CompressionCodecFactory::instance().validateCodecAndGetPreprocessedAST(command.codec, command.data_type, !context->getSettingsRef().allow_suspicious_codecs, context->getSettingsRef().allow_experimental_codecs);\n+            }\n             auto column_default = all_columns.getDefault(column_name);\n             if (column_default)\n             {\ndiff --git a/src/Storages/ColumnsDescription.cpp b/src/Storages/ColumnsDescription.cpp\nindex fa39e304925d..21b140bd73af 100644\n--- a/src/Storages/ColumnsDescription.cpp\n+++ b/src/Storages/ColumnsDescription.cpp\n@@ -659,6 +659,12 @@ bool ColumnsDescription::hasPhysical(const String & column_name) const\n         it->default_desc.kind != ColumnDefaultKind::Alias && it->default_desc.kind != ColumnDefaultKind::Ephemeral;\n }\n \n+bool ColumnsDescription::hasAlias(const String & column_name) const\n+{\n+    auto it = columns.get<1>().find(column_name);\n+    return it != columns.get<1>().end() && it->default_desc.kind == ColumnDefaultKind::Alias;\n+}\n+\n bool ColumnsDescription::hasColumnOrSubcolumn(GetColumnsOptions::Kind kind, const String & column_name) const\n {\n     auto it = columns.get<1>().find(column_name);\ndiff --git a/src/Storages/ColumnsDescription.h b/src/Storages/ColumnsDescription.h\nindex 5551fdea2e34..e5ec867cd648 100644\n--- a/src/Storages/ColumnsDescription.h\n+++ b/src/Storages/ColumnsDescription.h\n@@ -177,6 +177,7 @@ class ColumnsDescription : public IHints<1, ColumnsDescription>\n     Names getNamesOfPhysical() const;\n \n     bool hasPhysical(const String & column_name) const;\n+    bool hasAlias(const String & column_name) const;\n     bool hasColumnOrSubcolumn(GetColumnsOptions::Kind kind, const String & column_name) const;\n     bool hasColumnOrNested(GetColumnsOptions::Kind kind, const String & column_name) const;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02725_alias_columns_should_not_allow_compression_codec.reference b/tests/queries/0_stateless/02725_alias_columns_should_not_allow_compression_codec.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02725_alias_columns_should_not_allow_compression_codec.sql b/tests/queries/0_stateless/02725_alias_columns_should_not_allow_compression_codec.sql\nnew file mode 100644\nindex 000000000000..083a3aefdaff\n--- /dev/null\n+++ b/tests/queries/0_stateless/02725_alias_columns_should_not_allow_compression_codec.sql\n@@ -0,0 +1,7 @@\n+drop table if exists alias_column_should_not_allow_compression;\n+create table if not exists alias_column_should_not_allow_compression ( user_id UUID, user_id_hashed ALIAS (cityHash64(user_id))) engine=MergeTree() order by tuple();\n+create table if not exists alias_column_should_not_allow_compression_fail ( user_id UUID, user_id_hashed ALIAS (cityHash64(user_id)) codec(LZ4HC(1))) engine=MergeTree() order by tuple(); -- { serverError BAD_ARGUMENTS }\n+alter table alias_column_should_not_allow_compression modify column user_id codec(LZ4HC(1));\n+alter table alias_column_should_not_allow_compression modify column user_id_hashed codec(LZ4HC(1)); -- { serverError BAD_ARGUMENTS }\n+alter table alias_column_should_not_allow_compression add column user_id_hashed_1 UInt64 ALIAS (cityHash64(user_id)) codec(LZ4HC(1)); -- { serverError BAD_ARGUMENTS }\n+drop table if exists alias_column_should_not_allow_compression;\n",
  "problem_statement": "Alias columns should not allow codec\n**Column ALIAS should not allow codec**\r\nAlias column (as a non-materialized one) should probably not allow adding codec\r\n\r\n**How to reproduce**\r\n* server version: ClickHouse server version 22.12.3 revision 54461.\r\n* client: ClickHouse client version 22.12.3.5 (official build).\r\n* Non-default settings: seems none relevant\r\n* Sample data - unnecessary\r\n* Queries to run:\r\n```\r\ncreate database if not exists tmp;\r\n\r\ncreate table if not exists tmp.alias_column_should_not_allow_compression ( user_id UUID, user_id_hashed ALIAS (cityHash64(user_id)))\r\nengine MergeTree\r\npartition by tuple()\r\norder by tuple()\r\n;\r\n\r\n/* -- generate alters\r\nselect --name, type,\r\n    'alter table '|| database || '.' || table || ' modify column `' || name || '` ' || type || ' codec(LZ4HC(1));'\r\nfrom system.columns where database = 'tmp' and table = 'alias_column_should_not_allow_compression' and compression_codec = ''\r\n;\r\n*/\r\n\r\nalter table tmp.alias_column_should_not_allow_compression modify column `user_id_hashed` UInt64 codec(LZ4HC(1));\r\n-- performed ok, though I understand that it makes no sense for alias - missed in bulk operation and no possibility to override on table's MergeTree settings level for default\r\n\r\ndetach table tmp.alias_column_should_not_allow_compression;\r\n\r\nattach table tmp.alias_column_should_not_allow_compression;\r\n-- throws error (same for server restart - loops daemon startup)\r\n-- Received exception from server (version 22.12.3):\r\n-- Code: 36. DB::Exception: Received from localhost:9000. DB::Exception: Cannot specify codec for column type ALIAS. (BAD_ARGUMENTS)\r\n```\r\n\r\n\r\n**Expected behavior**\r\nI suppose best here - is to throw on alter attempt (but disregard of codec on attach/operation of alias column is an option as well)\r\n\r\n---\r\n\r\n**Additional context**\r\n```-- also related minor issues:\r\n-- 1 - how to drop table in such situation? or remove replica?\r\ndrop table tmp.alias_column_should_not_allow_compression;\r\n-- returns \r\n-- Received exception from server (version 22.12.3):\r\n-- Code: 60. DB::Exception: Received from localhost:9000. DB::Exception: Table tmp.alias_column_should_not_allow_compression doesn't exist. (UNKNOWN_TABLE)\r\ncreate or replace table tmp.alias_column_should_not_allow_compression ( user_id UUID, user_id_hashed ALIAS (cityHash64(user_id)))\r\nengine MergeTree\r\npartition by tuple()\r\norder by tuple()\r\n;\r\n-- returns:\r\n-- Received exception from server (version 22.12.3):\r\n-- Code: 57. DB::Exception: Received from localhost:9000. DB::Exception: Table `tmp`.`alias_column_should_not_allow_compression` already exists (detached). (TABLE_ALREADY_EXISTS)\r\nreplace table tmp.alias_column_should_not_allow_compression ( user_id UUID, user_id_hashed ALIAS (cityHash64(user_id)))\r\nengine MergeTree\r\npartition by tuple()\r\norder by tuple()\r\n;\r\n-- returns:\r\n-- Received exception from server (version 22.12.3):\r\n-- Code: 60. DB::Exception: Received from localhost:9000. DB::Exception: Table `tmp`.`alias_column_should_not_allow_compression` doesn't exist. (UNKNOWN_TABLE)\r\n\r\n-- *if there is a way do it by SQL - please let me know (we resolved only via manipulations with ZK and afterwadrs restore of replica)\r\n\r\n\r\n-- 2 - exception readability\r\ncreate table if not exists tmp.alias_column_should_not_allow_compression_2 ( user_id UUID, user_id_hashed ALIAS (cityHash64(user_id)))\r\nengine MergeTree\r\npartition by tuple()\r\norder by tuple()\r\n;\r\n\r\nalter table tmp.alias_column_should_not_allow_compression_2 modify column if exists `user_id_hashed` remove CODEC;\r\n-- if column has no codec - throws: ...doesn't have TTL ... - may be would be better readable if parametrized like ...doesn't have {item_property_to_remove}...\r\n-- Received exception from server (version 22.12.3):\r\n-- Code: 36. DB::Exception: Received from localhost:9000. DB::Exception: Column `user_id_hashed` doesn't have TTL, cannot remove it. (BAD_ARGUMENTS)\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2023-05-01T16:29:05Z",
  "modified_files": [
    "src/Storages/AlterCommands.cpp",
    "src/Storages/ColumnsDescription.cpp",
    "src/Storages/ColumnsDescription.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02725_alias_columns_should_not_allow_compression_codec.sql"
  ]
}