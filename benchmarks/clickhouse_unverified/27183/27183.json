{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 27183,
  "instance_id": "ClickHouse__ClickHouse-27183",
  "issue_numbers": [
    "27114"
  ],
  "base_commit": "f58727b50f426549bce0ce92ff0fa830476a1f70",
  "patch": "diff --git a/src/Storages/MergeTree/DataPartsExchange.cpp b/src/Storages/MergeTree/DataPartsExchange.cpp\nindex e30da82416d0..6ff9c16dad50 100644\n--- a/src/Storages/MergeTree/DataPartsExchange.cpp\n+++ b/src/Storages/MergeTree/DataPartsExchange.cpp\n@@ -712,7 +712,7 @@ MergeTreeData::MutableDataPartPtr Fetcher::downloadPartToDisk(\n     MergeTreeData::DataPart::Checksums & checksums,\n     ThrottlerPtr throttler)\n {\n-    static const String TMP_PREFIX = \"tmp_fetch_\";\n+    static const String TMP_PREFIX = \"tmp-fetch_\";\n     String tmp_prefix = tmp_prefix_.empty() ? TMP_PREFIX : tmp_prefix_;\n \n     /// We will remove directory if it's already exists. Make precautions.\n@@ -784,7 +784,7 @@ MergeTreeData::MutableDataPartPtr Fetcher::downloadPartToDiskRemoteMeta(\n     LOG_DEBUG(log, \"Downloading Part {} unique id {} metadata onto disk {}.\",\n         part_name, part_id, disk->getName());\n \n-    static const String TMP_PREFIX = \"tmp_fetch_\";\n+    static const String TMP_PREFIX = \"tmp-fetch_\";\n     String tmp_prefix = tmp_prefix_.empty() ? TMP_PREFIX : tmp_prefix_;\n \n     String part_relative_path = String(to_detached ? \"detached/\" : \"\") + tmp_prefix + part_name;\ndiff --git a/src/Storages/MergeTree/IMergeTreeDataPart.cpp b/src/Storages/MergeTree/IMergeTreeDataPart.cpp\nindex ea965f10b237..db271cc280b0 100644\n--- a/src/Storages/MergeTree/IMergeTreeDataPart.cpp\n+++ b/src/Storages/MergeTree/IMergeTreeDataPart.cpp\n@@ -1322,6 +1322,9 @@ String IMergeTreeDataPart::getRelativePathForDetachedPart(const String & prefix)\n {\n     /// Do not allow underscores in the prefix because they are used as separators.\n     assert(prefix.find_first_of('_') == String::npos);\n+    assert(prefix.empty() || std::find(DetachedPartInfo::DETACH_REASONS.begin(),\n+                                       DetachedPartInfo::DETACH_REASONS.end(),\n+                                       prefix) != DetachedPartInfo::DETACH_REASONS.end());\n     return \"detached/\" + getRelativePathForPrefix(prefix);\n }\n \ndiff --git a/src/Storages/MergeTree/MergeTreePartInfo.cpp b/src/Storages/MergeTree/MergeTreePartInfo.cpp\nindex 24c188439352..ccb26a0999e5 100644\n--- a/src/Storages/MergeTree/MergeTreePartInfo.cpp\n+++ b/src/Storages/MergeTree/MergeTreePartInfo.cpp\n@@ -247,13 +247,39 @@ String MergeTreePartInfo::getPartNameV0(DayNum left_date, DayNum right_date) con\n     return wb.str();\n }\n \n+\n+const std::vector<String> DetachedPartInfo::DETACH_REASONS =\n+    {\n+        \"broken\",\n+        \"unexpected\",\n+        \"noquorum\",\n+        \"ignored\",\n+        \"broken-on-start\",\n+        \"clone\",\n+        \"attaching\",\n+        \"deleting\",\n+        \"tmp-fetch\",\n+    };\n+\n bool DetachedPartInfo::tryParseDetachedPartName(const String & dir_name, DetachedPartInfo & part_info,\n                                                 MergeTreeDataFormatVersion format_version)\n {\n     part_info.dir_name = dir_name;\n \n-    /// First, try to parse as <part_name>.\n-    // TODO what if tryParsePartName will parse prefix as partition_id? It can happen if dir_name doesn't contain mutation number at the end\n+    /// First, try to find known prefix and parse dir_name as <prefix>_<partname>.\n+    /// Arbitrary strings are not allowed for partition_id, so known_prefix cannot be confused with partition_id.\n+    for (const auto & known_prefix : DETACH_REASONS)\n+    {\n+        if (dir_name.starts_with(known_prefix) && known_prefix.size() < dir_name.size() && dir_name[known_prefix.size()] == '_')\n+        {\n+            part_info.prefix = known_prefix;\n+            String part_name = dir_name.substr(known_prefix.size() + 1);\n+            bool parsed = MergeTreePartInfo::tryParsePartName(part_name, &part_info, format_version);\n+            return part_info.valid_name = parsed;\n+        }\n+    }\n+\n+    /// Next, try to parse dir_name as <part_name>.\n     if (MergeTreePartInfo::tryParsePartName(dir_name, &part_info, format_version))\n         return part_info.valid_name = true;\n \n@@ -263,7 +289,6 @@ bool DetachedPartInfo::tryParseDetachedPartName(const String & dir_name, Detache\n     if (first_separator == String::npos)\n         return part_info.valid_name = false;\n \n-    // TODO what if <prefix> contains '_'?\n     const auto part_name = dir_name.substr(first_separator + 1,\n                                            dir_name.size() - first_separator - 1);\n     if (!MergeTreePartInfo::tryParsePartName(part_name, &part_info, format_version))\ndiff --git a/src/Storages/MergeTree/MergeTreePartInfo.h b/src/Storages/MergeTree/MergeTreePartInfo.h\nindex 063f234e50f8..87f96ed50383 100644\n--- a/src/Storages/MergeTree/MergeTreePartInfo.h\n+++ b/src/Storages/MergeTree/MergeTreePartInfo.h\n@@ -2,6 +2,7 @@\n \n #include <limits>\n #include <tuple>\n+#include <vector>\n #include <common/types.h>\n #include <common/DayNum.h>\n #include <Storages/MergeTree/MergeTreeDataFormatVersion.h>\n@@ -115,6 +116,10 @@ struct DetachedPartInfo : public MergeTreePartInfo\n     /// If false, MergeTreePartInfo is in invalid state (directory name was not successfully parsed).\n     bool valid_name;\n \n+    static const std::vector<String> DETACH_REASONS;\n+\n+    /// NOTE: It may parse part info incorrectly.\n+    /// For example, if prefix contain '_' or if DETACH_REASONS doesn't contain prefix.\n     static bool tryParseDetachedPartName(const String & dir_name, DetachedPartInfo & part_info, MergeTreeDataFormatVersion format_version);\n };\n \n",
  "test_patch": "diff --git a/tests/integration/test_partition/test.py b/tests/integration/test_partition/test.py\nindex baac5367c00e..b43c85a4d48b 100644\n--- a/tests/integration/test_partition/test.py\n+++ b/tests/integration/test_partition/test.py\n@@ -236,3 +236,82 @@ def test_drop_detached_parts(drop_detached_parts_table):\n     q(\"ALTER TABLE test.drop_detached DROP DETACHED PARTITION 1\", settings=s)\n     detached = q(\"SElECT name FROM system.detached_parts WHERE table='drop_detached' AND database='test' ORDER BY name\")\n     assert TSV(detached) == TSV('0_3_3_0\\nattaching_0_6_6_0\\ndeleting_0_7_7_0')\n+\n+def test_system_detached_parts(drop_detached_parts_table):\n+    q(\"create table sdp_0 (n int, x int) engine=MergeTree order by n\")\n+    q(\"create table sdp_1 (n int, x int) engine=MergeTree order by n partition by x\")\n+    q(\"create table sdp_2 (n int, x String) engine=MergeTree order by n partition by x\")\n+    q(\"create table sdp_3 (n int, x Enum('broken' = 0, 'all' = 1)) engine=MergeTree order by n partition by x\")\n+\n+    for i in range(0, 4):\n+        q(\"system stop merges sdp_{}\".format(i))\n+        q(\"insert into sdp_{} values (0, 0)\".format(i))\n+        q(\"insert into sdp_{} values (1, 1)\".format(i))\n+        for p in q(\"select distinct partition_id from system.parts where table='sdp_{}'\".format(i))[:-1].split('\\n'):\n+            q(\"alter table sdp_{} detach partition id '{}'\".format(i, p))\n+\n+    path_to_detached = path_to_data + 'data/default/sdp_{}/detached/{}'\n+    for i in range(0, 4):\n+        instance.exec_in_container(['mkdir', path_to_detached.format(i, 'attaching_0_6_6_0')])\n+        instance.exec_in_container(['mkdir', path_to_detached.format(i, 'deleting_0_7_7_0')])\n+        instance.exec_in_container(['mkdir', path_to_detached.format(i, 'any_other_name')])\n+        instance.exec_in_container(['mkdir', path_to_detached.format(i, 'prefix_1_2_2_0_0')])\n+\n+        instance.exec_in_container(['mkdir', path_to_detached.format(i, 'ignored_202107_714380_714380_0')])\n+        instance.exec_in_container(['mkdir', path_to_detached.format(i, 'broken_202107_714380_714380_123')])\n+        instance.exec_in_container(['mkdir', path_to_detached.format(i, 'clone_all_714380_714380_42')])\n+        instance.exec_in_container(['mkdir', path_to_detached.format(i, 'clone_all_714380_714380_42_123')])\n+        instance.exec_in_container(['mkdir', path_to_detached.format(i, 'broken-on-start_6711e2b2592d86d18fc0f260cf33ef2b_714380_714380_42_123')])\n+\n+    res = q(\"select * from system.detached_parts where table like 'sdp_%' order by table, name\")\n+    assert res == \\\n+        \"default\\tsdp_0\\tall\\tall_1_1_0\\tdefault\\t\\t1\\t1\\t0\\n\" \\\n+        \"default\\tsdp_0\\tall\\tall_2_2_0\\tdefault\\t\\t2\\t2\\t0\\n\" \\\n+        \"default\\tsdp_0\\t\\\\N\\tany_other_name\\tdefault\\t\\\\N\\t\\\\N\\t\\\\N\\t\\\\N\\n\" \\\n+        \"default\\tsdp_0\\t0\\tattaching_0_6_6_0\\tdefault\\tattaching\\t6\\t6\\t0\\n\" \\\n+        \"default\\tsdp_0\\t6711e2b2592d86d18fc0f260cf33ef2b\\tbroken-on-start_6711e2b2592d86d18fc0f260cf33ef2b_714380_714380_42_123\\tdefault\\tbroken-on-start\\t714380\\t714380\\t42\\n\" \\\n+        \"default\\tsdp_0\\t202107\\tbroken_202107_714380_714380_123\\tdefault\\tbroken\\t714380\\t714380\\t123\\n\" \\\n+        \"default\\tsdp_0\\tall\\tclone_all_714380_714380_42\\tdefault\\tclone\\t714380\\t714380\\t42\\n\" \\\n+        \"default\\tsdp_0\\tall\\tclone_all_714380_714380_42_123\\tdefault\\tclone\\t714380\\t714380\\t42\\n\" \\\n+        \"default\\tsdp_0\\t0\\tdeleting_0_7_7_0\\tdefault\\tdeleting\\t7\\t7\\t0\\n\" \\\n+        \"default\\tsdp_0\\t202107\\tignored_202107_714380_714380_0\\tdefault\\tignored\\t714380\\t714380\\t0\\n\" \\\n+        \"default\\tsdp_0\\t1\\tprefix_1_2_2_0_0\\tdefault\\tprefix\\t2\\t2\\t0\\n\" \\\n+        \"default\\tsdp_1\\t0\\t0_1_1_0\\tdefault\\t\\t1\\t1\\t0\\n\" \\\n+        \"default\\tsdp_1\\t1\\t1_2_2_0\\tdefault\\t\\t2\\t2\\t0\\n\" \\\n+        \"default\\tsdp_1\\t\\\\N\\tany_other_name\\tdefault\\t\\\\N\\t\\\\N\\t\\\\N\\t\\\\N\\n\" \\\n+        \"default\\tsdp_1\\t0\\tattaching_0_6_6_0\\tdefault\\tattaching\\t6\\t6\\t0\\n\" \\\n+        \"default\\tsdp_1\\t6711e2b2592d86d18fc0f260cf33ef2b\\tbroken-on-start_6711e2b2592d86d18fc0f260cf33ef2b_714380_714380_42_123\\tdefault\\tbroken-on-start\\t714380\\t714380\\t42\\n\" \\\n+        \"default\\tsdp_1\\t202107\\tbroken_202107_714380_714380_123\\tdefault\\tbroken\\t714380\\t714380\\t123\\n\" \\\n+        \"default\\tsdp_1\\tall\\tclone_all_714380_714380_42\\tdefault\\tclone\\t714380\\t714380\\t42\\n\" \\\n+        \"default\\tsdp_1\\tall\\tclone_all_714380_714380_42_123\\tdefault\\tclone\\t714380\\t714380\\t42\\n\" \\\n+        \"default\\tsdp_1\\t0\\tdeleting_0_7_7_0\\tdefault\\tdeleting\\t7\\t7\\t0\\n\" \\\n+        \"default\\tsdp_1\\t202107\\tignored_202107_714380_714380_0\\tdefault\\tignored\\t714380\\t714380\\t0\\n\" \\\n+        \"default\\tsdp_1\\t1\\tprefix_1_2_2_0_0\\tdefault\\tprefix\\t2\\t2\\t0\\n\" \\\n+        \"default\\tsdp_2\\t58ed7160db50ea45e1c6aa694c8cbfd1\\t58ed7160db50ea45e1c6aa694c8cbfd1_1_1_0\\tdefault\\t\\t1\\t1\\t0\\n\" \\\n+        \"default\\tsdp_2\\t6711e2b2592d86d18fc0f260cf33ef2b\\t6711e2b2592d86d18fc0f260cf33ef2b_2_2_0\\tdefault\\t\\t2\\t2\\t0\\n\" \\\n+        \"default\\tsdp_2\\t\\\\N\\tany_other_name\\tdefault\\t\\\\N\\t\\\\N\\t\\\\N\\t\\\\N\\n\" \\\n+        \"default\\tsdp_2\\t0\\tattaching_0_6_6_0\\tdefault\\tattaching\\t6\\t6\\t0\\n\" \\\n+        \"default\\tsdp_2\\t6711e2b2592d86d18fc0f260cf33ef2b\\tbroken-on-start_6711e2b2592d86d18fc0f260cf33ef2b_714380_714380_42_123\\tdefault\\tbroken-on-start\\t714380\\t714380\\t42\\n\" \\\n+        \"default\\tsdp_2\\t202107\\tbroken_202107_714380_714380_123\\tdefault\\tbroken\\t714380\\t714380\\t123\\n\" \\\n+        \"default\\tsdp_2\\tall\\tclone_all_714380_714380_42\\tdefault\\tclone\\t714380\\t714380\\t42\\n\" \\\n+        \"default\\tsdp_2\\tall\\tclone_all_714380_714380_42_123\\tdefault\\tclone\\t714380\\t714380\\t42\\n\" \\\n+        \"default\\tsdp_2\\t0\\tdeleting_0_7_7_0\\tdefault\\tdeleting\\t7\\t7\\t0\\n\" \\\n+        \"default\\tsdp_2\\t202107\\tignored_202107_714380_714380_0\\tdefault\\tignored\\t714380\\t714380\\t0\\n\" \\\n+        \"default\\tsdp_2\\t1\\tprefix_1_2_2_0_0\\tdefault\\tprefix\\t2\\t2\\t0\\n\" \\\n+        \"default\\tsdp_3\\t0\\t0_1_1_0\\tdefault\\t\\t1\\t1\\t0\\n\" \\\n+        \"default\\tsdp_3\\t1\\t1_2_2_0\\tdefault\\t\\t2\\t2\\t0\\n\" \\\n+        \"default\\tsdp_3\\t\\\\N\\tany_other_name\\tdefault\\t\\\\N\\t\\\\N\\t\\\\N\\t\\\\N\\n\" \\\n+        \"default\\tsdp_3\\t0\\tattaching_0_6_6_0\\tdefault\\tattaching\\t6\\t6\\t0\\n\" \\\n+        \"default\\tsdp_3\\t6711e2b2592d86d18fc0f260cf33ef2b\\tbroken-on-start_6711e2b2592d86d18fc0f260cf33ef2b_714380_714380_42_123\\tdefault\\tbroken-on-start\\t714380\\t714380\\t42\\n\" \\\n+        \"default\\tsdp_3\\t202107\\tbroken_202107_714380_714380_123\\tdefault\\tbroken\\t714380\\t714380\\t123\\n\" \\\n+        \"default\\tsdp_3\\tall\\tclone_all_714380_714380_42\\tdefault\\tclone\\t714380\\t714380\\t42\\n\" \\\n+        \"default\\tsdp_3\\tall\\tclone_all_714380_714380_42_123\\tdefault\\tclone\\t714380\\t714380\\t42\\n\" \\\n+        \"default\\tsdp_3\\t0\\tdeleting_0_7_7_0\\tdefault\\tdeleting\\t7\\t7\\t0\\n\" \\\n+        \"default\\tsdp_3\\t202107\\tignored_202107_714380_714380_0\\tdefault\\tignored\\t714380\\t714380\\t0\\n\" \\\n+        \"default\\tsdp_3\\t1\\tprefix_1_2_2_0_0\\tdefault\\tprefix\\t2\\t2\\t0\\n\"\n+\n+    for i in range(0, 4):\n+        for p in q(\"select distinct partition_id from system.detached_parts where table='sdp_{}' and partition_id is not null\".format(i))[:-1].split('\\n'):\n+            q(\"alter table sdp_{} attach partition id '{}'\".format(i, p))\n+\n+    assert q(\"select n, x, count() from merge('default', 'sdp_') group by n, x\") == \"0\\t0\\t4\\n1\\t1\\t4\\n\"\n",
  "problem_statement": "system.detached_parts is filled incorrectly\nThe only columns that show what they are supposed to are `database`, `table`, `name` and `disk`.\r\nThe other columns borrow values from a neighbour.\r\n```\r\n\u250c\u2500table\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500partition_id\u2500\u252c\u2500name\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500disk\u2500\u2500\u2500\u2500\u252c\u2500reason\u2500\u252c\u2500min_block_number\u2500\u252c\u2500max_block_number\u2500\u252c\u2500\u2500\u2500level\u2500\u2510\r\n\u2502 actions_log  \u2502 ignored      \u2502 ignored_202107_714380_714380_0      \u2502 default \u2502        \u2502           202107 \u2502           714380 \u2502  714380 \u2502\r\n\u2502 actions_log  \u2502 ignored      \u2502 ignored_202107_713838_713838_0      \u2502 default \u2502        \u2502           202107 \u2502           713838 \u2502  713838 \u2502\r\n\u2502 actions_log  \u2502 ignored      \u2502 ignored_202107_713875_713875_0      \u2502 default \u2502        \u2502           202107 \u2502           713875 \u2502  713875 \u2502\r\n\u2502 actions_log  \u2502 ignored      \u2502 ignored_202107_725839_725839_0      \u2502 default \u2502        \u2502           202107 \u2502           725839 \u2502  725839 \u2502\r\n\u2502 actions_log  \u2502 ignored      \u2502 ignored_202107_713927_713927_0      \u2502 default \u2502        \u2502           202107 \u2502           713927 \u2502  713927 \u2502\r\n\u2502 actions_log  \u2502 ignored      \u2502 ignored_202107_714009_714009_0      \u2502 default \u2502        \u2502           202107 \u2502           714009 \u2502  714009 \u2502\r\n```\n",
  "hints_text": "What does it mean \"borrow values from a neighbour\"?",
  "created_at": "2021-08-04T14:45:54Z",
  "modified_files": [
    "src/Storages/MergeTree/DataPartsExchange.cpp",
    "src/Storages/MergeTree/IMergeTreeDataPart.cpp",
    "src/Storages/MergeTree/MergeTreePartInfo.cpp",
    "src/Storages/MergeTree/MergeTreePartInfo.h"
  ],
  "modified_test_files": [
    "tests/integration/test_partition/test.py"
  ]
}