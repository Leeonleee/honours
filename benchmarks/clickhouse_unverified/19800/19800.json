{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 19800,
  "instance_id": "ClickHouse__ClickHouse-19800",
  "issue_numbers": [
    "19795"
  ],
  "base_commit": "d9e4ea8e5815a646037ea959149c97ec146849b5",
  "patch": "diff --git a/base/mysqlxx/Connection.cpp b/base/mysqlxx/Connection.cpp\nindex 557570085621..8a15115cb06f 100644\n--- a/base/mysqlxx/Connection.cpp\n+++ b/base/mysqlxx/Connection.cpp\n@@ -116,8 +116,8 @@ void Connection::connect(const char* db,\n     if (!mysql_real_connect(driver.get(), server, user, password, db, port, ifNotEmpty(socket), driver->client_flag))\n         throw ConnectionFailed(errorMessage(driver.get()), mysql_errno(driver.get()));\n \n-    /// Sets UTF-8 as default encoding.\n-    if (mysql_set_character_set(driver.get(), \"UTF8\"))\n+    /// Sets UTF-8 as default encoding. See https://mariadb.com/kb/en/mysql_set_character_set/\n+    if (mysql_set_character_set(driver.get(), \"utf8mb4\"))\n         throw ConnectionFailed(errorMessage(driver.get()), mysql_errno(driver.get()));\n \n     is_connected = true;\n",
  "test_patch": "diff --git a/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py b/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py\nindex 8bb1fdb84e06..11600359b660 100644\n--- a/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py\n+++ b/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py\n@@ -79,9 +79,9 @@ def dml_with_materialize_mysql_database(clickhouse_node, mysql_node, service_nam\n \n     check_query(clickhouse_node, \"\"\"\n         SELECT key, unsigned_tiny_int, tiny_int, unsigned_small_int,\n-         small_int, unsigned_medium_int, medium_int, unsigned_int, _int, unsigned_integer, _integer, \n+         small_int, unsigned_medium_int, medium_int, unsigned_int, _int, unsigned_integer, _integer,\n          unsigned_bigint, _bigint, unsigned_float, _float, unsigned_double, _double, _varchar, _char, binary_col,\n-         _date, _datetime, /* exclude it, because ON UPDATE CURRENT_TIMESTAMP _timestamp, */ \n+         _date, _datetime, /* exclude it, because ON UPDATE CURRENT_TIMESTAMP _timestamp, */\n          _bool FROM test_database.test_table_1 ORDER BY key FORMAT TSV\n         \"\"\",\n         \"1\\t2\\t-1\\t2\\t-2\\t3\\t-3\\t4\\t-4\\t5\\t-5\\t6\\t-6\\t3.2\\t-3.2\\t3.4\\t-3.4\\tvarchar\\tchar\\tbinary\\\\0\\\\0\\t2020-01-01\\t\"\n@@ -720,7 +720,7 @@ def insert(num):\n \n     t = threading.Thread(target=insert, args=(1000,))\n     t.start()\n-    \n+\n     # TODO: add clickhouse_node.restart_clickhouse(20, kill=False) test\n     clickhouse_node.restart_clickhouse(20, kill=True)\n     t.join()\n@@ -732,3 +732,14 @@ def insert(num):\n \n     mysql_node.query(\"DROP DATABASE kill_clickhouse_while_insert\")\n     clickhouse_node.query(\"DROP DATABASE kill_clickhouse_while_insert\")\n+\n+\n+def utf8mb4_test(clickhouse_node, mysql_node, service_name):\n+    mysql_node.query(\"DROP DATABASE IF EXISTS utf8mb4_test\")\n+    clickhouse_node.query(\"DROP DATABASE IF EXISTS utf8mb4_test\")\n+    mysql_node.query(\"CREATE DATABASE utf8mb4_test\")\n+    mysql_node.query(\"CREATE TABLE utf8mb4_test.test (id INT(11) NOT NULL PRIMARY KEY, name VARCHAR(255)) ENGINE=InnoDB DEFAULT CHARACTER SET utf8mb4\")\n+    mysql_node.query(\"INSERT INTO utf8mb4_test.test VALUES(1, '\ud83e\udd84'),(2, '\\u2601')\")\n+    clickhouse_node.query(\"CREATE DATABASE utf8mb4_test ENGINE = MaterializeMySQL('{}:3306', 'utf8mb4_test', 'root', 'clickhouse')\".format(service_name))\n+    check_query(clickhouse_node, \"SELECT id, name FROM utf8mb4_test.test ORDER BY id\", \"1\\t\\U0001F984\\n2\\t\\u2601\\n\")\n+\ndiff --git a/tests/integration/test_materialize_mysql_database/test.py b/tests/integration/test_materialize_mysql_database/test.py\nindex dbd6e8949879..22322671f132 100644\n--- a/tests/integration/test_materialize_mysql_database/test.py\n+++ b/tests/integration/test_materialize_mysql_database/test.py\n@@ -228,3 +228,8 @@ def test_clickhouse_killed_while_insert_5_7(started_cluster, started_mysql_5_7,\n @pytest.mark.parametrize(('clickhouse_node'), [node_db_ordinary, node_db_atomic])\n def test_clickhouse_killed_while_insert_8_0(started_cluster, started_mysql_8_0, clickhouse_node):\n     materialize_with_ddl.clickhouse_killed_while_insert(clickhouse_node, started_mysql_8_0, \"mysql8_0\")\n+\n+@pytest.mark.parametrize(('clickhouse_node'), [node_db_ordinary, node_db_ordinary])\n+def test_utf8mb4(started_cluster, started_mysql_8_0, started_mysql_5_7, clickhouse_node):\n+    materialize_with_ddl.utf8mb4_test(clickhouse_node, started_mysql_5_7, \"mysql1\")\n+    materialize_with_ddl.utf8mb4_test(clickhouse_node, started_mysql_8_0, \"mysql8_0\")\n",
  "problem_statement": "exchange data(contains emoji) between ClickHouse and MySQL has exception\nI follow official guide  use mysql database engine to  exchange data between ClickHouse and MySQL\r\n`insert into mysql_database.testUser\r\n select * from clickHouse_database.testUser`\r\n\r\nBut it throw a exception : Poco::Exception. Code: 1000, e.code() = 1366, e.displayText() = mysqlxx::BadQuery: Incorrect string value: '\\xF0\\x9F\\xA6\\x84\\xE2\\x98...' for column 'person_name' at row 1 (*****:3306) (version 20.8.4.11)\r\n\r\nThe column value in clickhouse is\uff1a\u5c0f\u91ce\u9a6c-\ud83e\udd84\u2601\ufe0f ,while remote  mysql CHARSET is utf8mb4; It seems that the exception  because of the emoji value. How can I fix this problem?\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2021-01-29T07:58:16Z",
  "modified_files": [
    "base/mysqlxx/Connection.cpp"
  ],
  "modified_test_files": [
    "tests/integration/test_materialize_mysql_database/materialize_with_ddl.py",
    "tests/integration/test_materialize_mysql_database/test.py"
  ]
}