{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 20479,
  "instance_id": "ClickHouse__ClickHouse-20479",
  "issue_numbers": [
    "20460"
  ],
  "base_commit": "f6dc005ce2bb8db8326c4d2f23008f06bc00f72b",
  "patch": "diff --git a/src/Functions/transform.cpp b/src/Functions/transform.cpp\nindex ab589be9c072..07fbd5a7b96a 100644\n--- a/src/Functions/transform.cpp\n+++ b/src/Functions/transform.cpp\n@@ -1,4 +1,6 @@\n #include <mutex>\n+#include <ext/bit_cast.h>\n+\n #include <Common/FieldVisitors.h>\n #include <DataTypes/DataTypeArray.h>\n #include <Columns/ColumnString.h>\n@@ -13,6 +15,7 @@\n #include <Functions/FunctionHelpers.h>\n #include <Functions/FunctionFactory.h>\n #include <DataTypes/getLeastSupertype.h>\n+#include <Interpreters/convertFieldToType.h>\n \n \n namespace DB\n@@ -491,7 +494,7 @@ class FunctionTransform : public IFunction\n         dst.resize(size);\n         for (size_t i = 0; i < size; ++i)\n         {\n-            auto it = table.find(src[i]);\n+            const auto * it = table.find(ext::bit_cast<UInt64>(src[i]));\n             if (it)\n                 memcpy(&dst[i], &it->getMapped(), sizeof(dst[i]));    /// little endian.\n             else\n@@ -507,7 +510,7 @@ class FunctionTransform : public IFunction\n         dst.resize(size);\n         for (size_t i = 0; i < size; ++i)\n         {\n-            auto it = table.find(src[i]);\n+            const auto * it = table.find(ext::bit_cast<UInt64>(src[i]));\n             if (it)\n                 memcpy(&dst[i], &it->getMapped(), sizeof(dst[i]));    /// little endian.\n             else\n@@ -523,7 +526,7 @@ class FunctionTransform : public IFunction\n         dst.resize(size);\n         for (size_t i = 0; i < size; ++i)\n         {\n-            auto it = table.find(src[i]);\n+            const auto * it = table.find(ext::bit_cast<UInt64>(src[i]));\n             if (it)\n                 memcpy(&dst[i], &it->getMapped(), sizeof(dst[i]));\n             else\n@@ -541,7 +544,7 @@ class FunctionTransform : public IFunction\n         ColumnString::Offset current_dst_offset = 0;\n         for (size_t i = 0; i < size; ++i)\n         {\n-            auto it = table.find(src[i]);\n+            const auto * it = table.find(ext::bit_cast<UInt64>(src[i]));\n             StringRef ref = it ? it->getMapped() : dst_default;\n             dst_data.resize(current_dst_offset + ref.size);\n             memcpy(&dst_data[current_dst_offset], ref.data, ref.size);\n@@ -562,7 +565,8 @@ class FunctionTransform : public IFunction\n         ColumnString::Offset current_dst_default_offset = 0;\n         for (size_t i = 0; i < size; ++i)\n         {\n-            auto it = table.find(src[i]);\n+            Field key = src[i];\n+            const auto * it = table.find(key.reinterpret<UInt64>());\n             StringRef ref;\n \n             if (it)\n@@ -778,50 +782,66 @@ class FunctionTransform : public IFunction\n \n         /// Note: Doesn't check the duplicates in the `from` array.\n \n-        if (from[0].getType() != Field::Types::String && to[0].getType() != Field::Types::String)\n+        const IDataType & from_type = *arguments[0].type;\n+\n+        if (from[0].getType() != Field::Types::String)\n         {\n-            cache.table_num_to_num = std::make_unique<Cache::NumToNum>();\n-            auto & table = *cache.table_num_to_num;\n-            for (size_t i = 0; i < size; ++i)\n+            if (to[0].getType() != Field::Types::String)\n             {\n-                // Field may be of Float type, but for the purpose of bitwise\n-                // equality we can treat them as UInt64, hence the reinterpret().\n-                table[from[i].reinterpret<UInt64>()] = (*used_to)[i].reinterpret<UInt64>();\n+                cache.table_num_to_num = std::make_unique<Cache::NumToNum>();\n+                auto & table = *cache.table_num_to_num;\n+                for (size_t i = 0; i < size; ++i)\n+                {\n+                    Field key = convertFieldToType(from[i], from_type);\n+                    if (key.isNull())\n+                        continue;\n+\n+                    // Field may be of Float type, but for the purpose of bitwise\n+                    // equality we can treat them as UInt64, hence the reinterpret().\n+                    table[key.reinterpret<UInt64>()] = (*used_to)[i].reinterpret<UInt64>();\n+                }\n             }\n-        }\n-        else if (from[0].getType() != Field::Types::String && to[0].getType() == Field::Types::String)\n-        {\n-            cache.table_num_to_string = std::make_unique<Cache::NumToString>();\n-            auto & table = *cache.table_num_to_string;\n-            for (size_t i = 0; i < size; ++i)\n+            else\n             {\n-                const String & str_to = to[i].get<const String &>();\n-                StringRef ref{cache.string_pool.insert(str_to.data(), str_to.size() + 1), str_to.size() + 1};\n-                table[from[i].reinterpret<UInt64>()] = ref;\n+                cache.table_num_to_string = std::make_unique<Cache::NumToString>();\n+                auto & table = *cache.table_num_to_string;\n+                for (size_t i = 0; i < size; ++i)\n+                {\n+                    Field key = convertFieldToType(from[i], from_type);\n+                    if (key.isNull())\n+                        continue;\n+\n+                    const String & str_to = to[i].get<const String &>();\n+                    StringRef ref{cache.string_pool.insert(str_to.data(), str_to.size() + 1), str_to.size() + 1};\n+                    table[key.reinterpret<UInt64>()] = ref;\n+                }\n             }\n         }\n-        else if (from[0].getType() == Field::Types::String && to[0].getType() != Field::Types::String)\n+        else\n         {\n-            cache.table_string_to_num = std::make_unique<Cache::StringToNum>();\n-            auto & table = *cache.table_string_to_num;\n-            for (size_t i = 0; i < size; ++i)\n+            if (to[0].getType() != Field::Types::String)\n             {\n-                const String & str_from = from[i].get<const String &>();\n-                StringRef ref{cache.string_pool.insert(str_from.data(), str_from.size() + 1), str_from.size() + 1};\n-                table[ref] = (*used_to)[i].reinterpret<UInt64>();\n+                cache.table_string_to_num = std::make_unique<Cache::StringToNum>();\n+                auto & table = *cache.table_string_to_num;\n+                for (size_t i = 0; i < size; ++i)\n+                {\n+                    const String & str_from = from[i].get<const String &>();\n+                    StringRef ref{cache.string_pool.insert(str_from.data(), str_from.size() + 1), str_from.size() + 1};\n+                    table[ref] = (*used_to)[i].reinterpret<UInt64>();\n+                }\n             }\n-        }\n-        else if (from[0].getType() == Field::Types::String && to[0].getType() == Field::Types::String)\n-        {\n-            cache.table_string_to_string = std::make_unique<Cache::StringToString>();\n-            auto & table = *cache.table_string_to_string;\n-            for (size_t i = 0; i < size; ++i)\n+            else\n             {\n-                const String & str_from = from[i].get<const String &>();\n-                const String & str_to = to[i].get<const String &>();\n-                StringRef ref_from{cache.string_pool.insert(str_from.data(), str_from.size() + 1), str_from.size() + 1};\n-                StringRef ref_to{cache.string_pool.insert(str_to.data(), str_to.size() + 1), str_to.size() + 1};\n-                table[ref_from] = ref_to;\n+                cache.table_string_to_string = std::make_unique<Cache::StringToString>();\n+                auto & table = *cache.table_string_to_string;\n+                for (size_t i = 0; i < size; ++i)\n+                {\n+                    const String & str_from = from[i].get<const String &>();\n+                    const String & str_to = to[i].get<const String &>();\n+                    StringRef ref_from{cache.string_pool.insert(str_from.data(), str_from.size() + 1), str_from.size() + 1};\n+                    StringRef ref_to{cache.string_pool.insert(str_to.data(), str_to.size() + 1), str_to.size() + 1};\n+                    table[ref_from] = ref_to;\n+                }\n             }\n         }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01704_transform_with_float_key.reference b/tests/queries/0_stateless/01704_transform_with_float_key.reference\nnew file mode 100644\nindex 000000000000..761e15c903cf\n--- /dev/null\n+++ b/tests/queries/0_stateless/01704_transform_with_float_key.reference\n@@ -0,0 +1,30 @@\n+-\n+Hello\n+-\n+World\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+Hello\n+-\n+World\n+-\n+-\n+-\n+-\n+-\n+-\n+-\n+Hello\n+-\n+World\n+-\n+-\n+-\n+-\n+-\ndiff --git a/tests/queries/0_stateless/01704_transform_with_float_key.sql b/tests/queries/0_stateless/01704_transform_with_float_key.sql\nnew file mode 100644\nindex 000000000000..690c73ee28a2\n--- /dev/null\n+++ b/tests/queries/0_stateless/01704_transform_with_float_key.sql\n@@ -0,0 +1,3 @@\n+SELECT transform(number / 2, [0.5, 1.5], ['Hello', 'World'], '-') FROM numbers(10);\n+SELECT transform(number / 2, [1.0, 2.0], ['Hello', 'World'], '-') FROM numbers(10);\n+SELECT transform(number / 2, [1, 2], ['Hello', 'World'], '-') FROM numbers(10);\n",
  "problem_statement": "Function 'transform' does not work properly for floating point keys.\nhttps://clickhouse-test-reports.s3.yandex.net/19673/e7de5f34b1b3ae5d6d4e5d96ba0cd7c45acfb329/fuzzer_ubsan/server.log\r\n\r\n**Describe the bug**\r\n```\r\nmilovidov-desktop :) SELECT transform(number / 2, [0.5, 1.5], ['Hello', 'World'], '-') FROM numbers(10)\r\n\r\nSELECT transform(number / 2, [0.5, 1.5], ['Hello', 'World'], '-')\r\nFROM numbers(10)\r\n\r\nQuery id: f8c2646e-e234-41ae-85ef-7a452d4a2545\r\n\r\n\u250c\u2500transform(divide(number, 2), [0.5, 1.5], ['Hello', 'World'], '-')\u2500\u2510\r\n\u2502 -                                                                 \u2502\r\n\u2502 -                                                                 \u2502\r\n\u2502 -                                                                 \u2502\r\n\u2502 -                                                                 \u2502\r\n\u2502 -                                                                 \u2502\r\n\u2502 -                                                                 \u2502\r\n\u2502 -                                                                 \u2502\r\n\u2502 -                                                                 \u2502\r\n\u2502 -                                                                 \u2502\r\n\u2502 -                                                                 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n10 rows in set. Elapsed: 0.003 sec. \r\n\r\nmilovidov-desktop :) SELECT transform(number / 2, [1, 2], ['Hello', 'World'], '-') FROM numbers(10)\r\n\r\nSELECT transform(number / 2, [1, 2], ['Hello', 'World'], '-')\r\nFROM numbers(10)\r\n\r\nQuery id: 18b64dcf-983e-4653-a62b-5501e18314fd\r\n\r\n\u250c\u2500transform(divide(number, 2), [1, 2], ['Hello', 'World'], '-')\u2500\u2510\r\n\u2502 -                                                             \u2502\r\n\u2502 -                                                             \u2502\r\n\u2502 Hello                                                         \u2502\r\n\u2502 Hello                                                         \u2502\r\n\u2502 World                                                         \u2502\r\n\u2502 World                                                         \u2502\r\n\u2502 -                                                             \u2502\r\n\u2502 -                                                             \u2502\r\n\u2502 -                                                             \u2502\r\n\u2502 -                                                             \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n",
  "hints_text": "",
  "created_at": "2021-02-14T16:13:31Z",
  "modified_files": [
    "src/Functions/transform.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01704_transform_with_float_key.reference",
    "b/tests/queries/0_stateless/01704_transform_with_float_key.sql"
  ]
}