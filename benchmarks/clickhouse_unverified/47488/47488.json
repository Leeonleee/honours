{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 47488,
  "instance_id": "ClickHouse__ClickHouse-47488",
  "issue_numbers": [
    "46519"
  ],
  "base_commit": "389bc8687538a3b235812cbba0aa5e60d0347783",
  "patch": "diff --git a/src/Interpreters/ReplaceQueryParameterVisitor.cpp b/src/Interpreters/ReplaceQueryParameterVisitor.cpp\nindex f271de26ca48..893c93f09506 100644\n--- a/src/Interpreters/ReplaceQueryParameterVisitor.cpp\n+++ b/src/Interpreters/ReplaceQueryParameterVisitor.cpp\n@@ -50,7 +50,16 @@ void ReplaceQueryParameterVisitor::visit(ASTPtr & ast)\n void ReplaceQueryParameterVisitor::visitChildren(ASTPtr & ast)\n {\n     for (auto & child : ast->children)\n+    {\n+        void * old_ptr = child.get();\n         visit(child);\n+        void * new_ptr = child.get();\n+\n+        /// Some AST classes have naked pointers to children elements as members.\n+        /// We have to replace them if the child was replaced.\n+        if (new_ptr != old_ptr)\n+            ast->updatePointerToChild(old_ptr, new_ptr);\n+    }\n }\n \n const String & ReplaceQueryParameterVisitor::getParamValue(const String & name)\n@@ -89,6 +98,7 @@ void ReplaceQueryParameterVisitor::visitQueryParameter(ASTPtr & ast)\n         literal = value;\n     else\n         literal = temp_column[0];\n+\n     ast = addTypeConversionToAST(std::make_shared<ASTLiteral>(literal), type_name);\n \n     /// Keep the original alias.\ndiff --git a/src/Parsers/ASTAlterQuery.h b/src/Parsers/ASTAlterQuery.h\nindex 2a48f5bbd9ea..1400113fa9cb 100644\n--- a/src/Parsers/ASTAlterQuery.h\n+++ b/src/Parsers/ASTAlterQuery.h\n@@ -256,6 +256,11 @@ class ASTAlterQuery : public ASTQueryWithTableAndOutput, public ASTQueryWithOnCl\n     void formatQueryImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override;\n \n     bool isOneCommandTypeOnly(const ASTAlterCommand::Type & type) const;\n+\n+    void forEachPointerToChild(std::function<void(void**)> f) override\n+    {\n+        f(reinterpret_cast<void **>(&command_list));\n+    }\n };\n \n }\ndiff --git a/src/Parsers/ASTBackupQuery.h b/src/Parsers/ASTBackupQuery.h\nindex a3e3a144c726..0201c2b14f98 100644\n--- a/src/Parsers/ASTBackupQuery.h\n+++ b/src/Parsers/ASTBackupQuery.h\n@@ -94,5 +94,12 @@ class ASTBackupQuery : public IAST, public ASTQueryWithOnCluster\n     void formatImpl(const FormatSettings & format, FormatState &, FormatStateStacked) const override;\n     ASTPtr getRewrittenASTWithoutOnCluster(const WithoutOnClusterASTRewriteParams &) const override;\n     QueryKind getQueryKind() const override;\n+\n+    void forEachPointerToChild(std::function<void(void**)> f) override\n+    {\n+        f(reinterpret_cast<void **>(&backup_name));\n+        f(reinterpret_cast<void **>(&base_backup_name));\n+    }\n };\n+\n }\ndiff --git a/src/Parsers/ASTConstraintDeclaration.h b/src/Parsers/ASTConstraintDeclaration.h\nindex 437aab1a82da..f48d7ef77fe6 100644\n--- a/src/Parsers/ASTConstraintDeclaration.h\n+++ b/src/Parsers/ASTConstraintDeclaration.h\n@@ -25,5 +25,11 @@ class ASTConstraintDeclaration : public IAST\n     ASTPtr clone() const override;\n \n     void formatImpl(const FormatSettings & s, FormatState & state, FormatStateStacked frame) const override;\n+\n+    void forEachPointerToChild(std::function<void(void**)> f) override\n+    {\n+        f(reinterpret_cast<void **>(&expr));\n+    }\n };\n+\n }\ndiff --git a/src/Parsers/ASTCreateQuery.cpp b/src/Parsers/ASTCreateQuery.cpp\nindex 955ce62b0f73..e28e863c21ff 100644\n--- a/src/Parsers/ASTCreateQuery.cpp\n+++ b/src/Parsers/ASTCreateQuery.cpp\n@@ -91,6 +91,11 @@ class ASTColumnsElement : public IAST\n     ASTPtr clone() const override;\n \n     void formatImpl(const FormatSettings & s, FormatState & state, FormatStateStacked frame) const override;\n+\n+    void forEachPointerToChild(std::function<void(void**)> f) override\n+    {\n+        f(reinterpret_cast<void **>(&elem));\n+    }\n };\n \n ASTPtr ASTColumnsElement::clone() const\ndiff --git a/src/Parsers/ASTCreateQuery.h b/src/Parsers/ASTCreateQuery.h\nindex 90a15e093690..230996f610e2 100644\n--- a/src/Parsers/ASTCreateQuery.h\n+++ b/src/Parsers/ASTCreateQuery.h\n@@ -32,6 +32,17 @@ class ASTStorage : public IAST\n     void formatImpl(const FormatSettings & s, FormatState & state, FormatStateStacked frame) const override;\n \n     bool isExtendedStorageDefinition() const;\n+\n+    void forEachPointerToChild(std::function<void(void**)> f) override\n+    {\n+        f(reinterpret_cast<void **>(&engine));\n+        f(reinterpret_cast<void **>(&partition_by));\n+        f(reinterpret_cast<void **>(&primary_key));\n+        f(reinterpret_cast<void **>(&order_by));\n+        f(reinterpret_cast<void **>(&sample_by));\n+        f(reinterpret_cast<void **>(&ttl_table));\n+        f(reinterpret_cast<void **>(&settings));\n+    }\n };\n \n \n@@ -57,6 +68,16 @@ class ASTColumns : public IAST\n         return (!columns || columns->children.empty()) && (!indices || indices->children.empty()) && (!constraints || constraints->children.empty())\n             && (!projections || projections->children.empty());\n     }\n+\n+    void forEachPointerToChild(std::function<void(void**)> f) override\n+    {\n+        f(reinterpret_cast<void **>(&columns));\n+        f(reinterpret_cast<void **>(&indices));\n+        f(reinterpret_cast<void **>(&primary_key));\n+        f(reinterpret_cast<void **>(&constraints));\n+        f(reinterpret_cast<void **>(&projections));\n+        f(reinterpret_cast<void **>(&primary_key));\n+    }\n };\n \n \n@@ -126,6 +147,19 @@ class ASTCreateQuery : public ASTQueryWithTableAndOutput, public ASTQueryWithOnC\n \n protected:\n     void formatQueryImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override;\n+\n+    void forEachPointerToChild(std::function<void(void**)> f) override\n+    {\n+        f(reinterpret_cast<void **>(&columns_list));\n+        f(reinterpret_cast<void **>(&inner_storage));\n+        f(reinterpret_cast<void **>(&storage));\n+        f(reinterpret_cast<void **>(&as_table_function));\n+        f(reinterpret_cast<void **>(&select));\n+        f(reinterpret_cast<void **>(&comment));\n+        f(reinterpret_cast<void **>(&table_overrides));\n+        f(reinterpret_cast<void **>(&dictionary_attributes_list));\n+        f(reinterpret_cast<void **>(&dictionary));\n+    }\n };\n \n }\ndiff --git a/src/Parsers/ASTDictionary.h b/src/Parsers/ASTDictionary.h\nindex 3611621b8ad2..8c332247d527 100644\n--- a/src/Parsers/ASTDictionary.h\n+++ b/src/Parsers/ASTDictionary.h\n@@ -47,6 +47,11 @@ class ASTDictionaryLayout : public IAST\n     ASTPtr clone() const override;\n \n     void formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override;\n+\n+    void forEachPointerToChild(std::function<void(void**)> f) override\n+    {\n+        f(reinterpret_cast<void **>(&parameters));\n+    }\n };\n \n \ndiff --git a/src/Parsers/ASTExternalDDLQuery.h b/src/Parsers/ASTExternalDDLQuery.h\nindex 7913d44b9705..96600b07f29a 100644\n--- a/src/Parsers/ASTExternalDDLQuery.h\n+++ b/src/Parsers/ASTExternalDDLQuery.h\n@@ -41,6 +41,11 @@ class ASTExternalDDLQuery : public IAST\n     }\n \n     QueryKind getQueryKind() const override { return QueryKind::ExternalDDL; }\n+\n+    void forEachPointerToChild(std::function<void(void**)> f) override\n+    {\n+        f(reinterpret_cast<void **>(&from));\n+    }\n };\n \n }\ndiff --git a/src/Parsers/ASTFunctionWithKeyValueArguments.h b/src/Parsers/ASTFunctionWithKeyValueArguments.h\nindex 67d591dfcdc3..75a8ae0415ea 100644\n--- a/src/Parsers/ASTFunctionWithKeyValueArguments.h\n+++ b/src/Parsers/ASTFunctionWithKeyValueArguments.h\n@@ -33,6 +33,11 @@ class ASTPair : public IAST\n     bool hasSecretParts() const override;\n \n     void updateTreeHashImpl(SipHash & hash_state) const override;\n+\n+    void forEachPointerToChild(std::function<void(void**)> f) override\n+    {\n+        f(reinterpret_cast<void **>(&second));\n+    }\n };\n \n \ndiff --git a/src/Parsers/ASTIndexDeclaration.h b/src/Parsers/ASTIndexDeclaration.h\nindex e22c1da44896..bd52a611f3fd 100644\n--- a/src/Parsers/ASTIndexDeclaration.h\n+++ b/src/Parsers/ASTIndexDeclaration.h\n@@ -23,6 +23,12 @@ class ASTIndexDeclaration : public IAST\n \n     ASTPtr clone() const override;\n     void formatImpl(const FormatSettings & s, FormatState & state, FormatStateStacked frame) const override;\n+\n+    void forEachPointerToChild(std::function<void(void**)> f) override\n+    {\n+        f(reinterpret_cast<void **>(&expr));\n+        f(reinterpret_cast<void **>(&type));\n+    }\n };\n \n }\ndiff --git a/src/Parsers/ASTProjectionDeclaration.h b/src/Parsers/ASTProjectionDeclaration.h\nindex 53c681c3ec15..df7a7c832a67 100644\n--- a/src/Parsers/ASTProjectionDeclaration.h\n+++ b/src/Parsers/ASTProjectionDeclaration.h\n@@ -18,6 +18,11 @@ class ASTProjectionDeclaration : public IAST\n \n     ASTPtr clone() const override;\n     void formatImpl(const FormatSettings & s, FormatState & state, FormatStateStacked frame) const override;\n+\n+    void forEachPointerToChild(std::function<void(void**)> f) override\n+    {\n+        f(reinterpret_cast<void **>(&query));\n+    }\n };\n \n }\ndiff --git a/src/Parsers/ASTTableOverrides.h b/src/Parsers/ASTTableOverrides.h\nindex c47260789d80..1df267acaa94 100644\n--- a/src/Parsers/ASTTableOverrides.h\n+++ b/src/Parsers/ASTTableOverrides.h\n@@ -27,6 +27,12 @@ class ASTTableOverride : public IAST\n     String getID(char) const override { return \"TableOverride \" + table_name; }\n     ASTPtr clone() const override;\n     void formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const override;\n+\n+    void forEachPointerToChild(std::function<void(void**)> f) override\n+    {\n+        f(reinterpret_cast<void **>(&columns));\n+        f(reinterpret_cast<void **>(&storage));\n+    }\n };\n \n /// List of table overrides, for example:\ndiff --git a/src/Parsers/IAST.h b/src/Parsers/IAST.h\nindex 627b1174b339..5928506aa5b7 100644\n--- a/src/Parsers/IAST.h\n+++ b/src/Parsers/IAST.h\n@@ -175,6 +175,16 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS\n         field = nullptr;\n     }\n \n+    /// After changing one of `children` elements, update the corresponding member pointer if needed.\n+    void updatePointerToChild(void * old_ptr, void * new_ptr)\n+    {\n+        forEachPointerToChild([old_ptr, new_ptr](void ** ptr) mutable\n+        {\n+            if (*ptr == old_ptr)\n+                *ptr = new_ptr;\n+        });\n+    }\n+\n     /// Convert to a string.\n \n     /// Format settings.\n@@ -295,6 +305,10 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS\n protected:\n     bool childrenHaveSecretParts() const;\n \n+    /// Some AST classes have naked pointers to children elements as members.\n+    /// This method allows to iterate over them.\n+    virtual void forEachPointerToChild(std::function<void(void**)>) {}\n+\n private:\n     size_t checkDepthImpl(size_t max_depth) const;\n \ndiff --git a/src/Parsers/MySQL/ASTAlterCommand.h b/src/Parsers/MySQL/ASTAlterCommand.h\nindex f097ed712191..87b665ec6a50 100644\n--- a/src/Parsers/MySQL/ASTAlterCommand.h\n+++ b/src/Parsers/MySQL/ASTAlterCommand.h\n@@ -80,6 +80,15 @@ class ASTAlterCommand : public IAST\n     {\n         throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Method formatImpl is not supported by MySQLParser::ASTAlterCommand.\");\n     }\n+\n+    void forEachPointerToChild(std::function<void(void**)> f) override\n+    {\n+        f(reinterpret_cast<void **>(&index_decl));\n+        f(reinterpret_cast<void **>(&default_expression));\n+        f(reinterpret_cast<void **>(&additional_columns));\n+        f(reinterpret_cast<void **>(&order_by_columns));\n+        f(reinterpret_cast<void **>(&properties));\n+    }\n };\n \n class ParserAlterCommand : public IParserBase\ndiff --git a/src/Parsers/MySQL/ASTCreateDefines.h b/src/Parsers/MySQL/ASTCreateDefines.h\nindex 3d2a79568ab6..7c23d1cb87fa 100644\n--- a/src/Parsers/MySQL/ASTCreateDefines.h\n+++ b/src/Parsers/MySQL/ASTCreateDefines.h\n@@ -31,6 +31,13 @@ class ASTCreateDefines : public IAST\n     {\n         throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Method formatImpl is not supported by MySQLParser::ASTCreateDefines.\");\n     }\n+\n+    void forEachPointerToChild(std::function<void(void**)> f) override\n+    {\n+        f(reinterpret_cast<void **>(&columns));\n+        f(reinterpret_cast<void **>(&indices));\n+        f(reinterpret_cast<void **>(&constraints));\n+    }\n };\n \n class ParserCreateDefines : public IParserBase\n@@ -44,4 +51,3 @@ class ParserCreateDefines : public IParserBase\n }\n \n }\n-\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02679_query_parameters_dangling_pointer.reference b/tests/queries/0_stateless/02679_query_parameters_dangling_pointer.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02679_query_parameters_dangling_pointer.sql b/tests/queries/0_stateless/02679_query_parameters_dangling_pointer.sql\nnew file mode 100644\nindex 000000000000..7705b860e8ee\n--- /dev/null\n+++ b/tests/queries/0_stateless/02679_query_parameters_dangling_pointer.sql\n@@ -0,0 +1,4 @@\n+-- There is no use-after-free in the following query:\n+\n+SET param_o = 'a';\n+CREATE TABLE test.xxx (a Int64) ENGINE=MergeTree ORDER BY ({o:String}); -- { serverError 44 }\n",
  "problem_statement": "clickhouse crash when using parametrized syntax within CREATE TABLE\n**Describe what's wrong**\r\n\r\nFollowing use-case is definitely not supported, but problem is that single user shut down whole server.\r\n\r\n```sql\r\nSET param_o = 'a';\r\nCREATE TABLE test.xxx (a Int64) ENGINE=MergeTree ORDER BY ({o:String});\r\n```\r\n\r\n> A clear and concise description of what works not as it is supposed to.\r\n\r\nClickhouse crash with following:\r\n\r\n```\r\nQuery id: 30c06d2d-9026-48cc-98e2-5083389791da\r\n\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.245166 [ 2664001 ] <Fatal> BaseDaemon: ########################################\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.245469 [ 2664001 ] <Fatal> BaseDaemon: (version 23.1.3.5 (official build), build id: B9F28B1E976685BCAD291257215FC33DE8767678) (from thread 2662520) (query_id: 30c06d2d-9026-48cc-98e2-5083389791da) (query: ) Received signal Aborted (6)\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.245516 [ 2664001 ] <Fatal> BaseDaemon: \r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.245561 [ 2664001 ] <Fatal> BaseDaemon: Stack trace: 0x7f9fd22b300b 0x7f9fd2292859 0x1a354444 0x1a3725ad 0x11e95caa 0x14ccca9a 0x14cd0ec7 0x14cf4265 0x14d89b7f 0x13809640 0x13808f2d 0x14676f79 0x1468b8d9 0x1753e2f4 0x1753fc9b 0x176cf0a7 0x176ccadd 0x7f9fd246a609 0x7f9fd238f133\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.245654 [ 2664001 ] <Fatal> BaseDaemon: 2. raise in ?\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.245695 [ 2664001 ] <Fatal> BaseDaemon: 3. abort in ?\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.245758 [ 2664001 ] <Fatal> BaseDaemon: 4. ? in /usr/bin/clickhouse\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.245802 [ 2664001 ] <Fatal> BaseDaemon: 5. ? in /usr/bin/clickhouse\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.245835 [ 2664001 ] <Fatal> BaseDaemon: 6. ? in /usr/bin/clickhouse\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.245899 [ 2664001 ] <Fatal> BaseDaemon: 7. DB::ASTStorage::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const in /usr/bin/clickhouse\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.245985 [ 2664001 ] <Fatal> BaseDaemon: 8. DB::ASTCreateQuery::formatQueryImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const in /usr/bin/clickhouse\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.246037 [ 2664001 ] <Fatal> BaseDaemon: 9. DB::ASTQueryWithOutput::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const in /usr/bin/clickhouse\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.246097 [ 2664001 ] <Fatal> BaseDaemon: 10. DB::serializeAST(DB::IAST const&, bool) in /usr/bin/clickhouse\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.246145 [ 2664001 ] <Fatal> BaseDaemon: 11. ? in /usr/bin/clickhouse\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.246205 [ 2664001 ] <Fatal> BaseDaemon: 12. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) in /usr/bin/clickhouse\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.246316 [ 2664001 ] <Fatal> BaseDaemon: 13. DB::TCPHandler::runImpl() in /usr/bin/clickhouse\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.246355 [ 2664001 ] <Fatal> BaseDaemon: 14. DB::TCPHandler::run() in /usr/bin/clickhouse\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.246395 [ 2664001 ] <Fatal> BaseDaemon: 15. Poco::Net::TCPServerConnection::start() in /usr/bin/clickhouse\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.246438 [ 2664001 ] <Fatal> BaseDaemon: 16. Poco::Net::TCPServerDispatcher::run() in /usr/bin/clickhouse\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.246486 [ 2664001 ] <Fatal> BaseDaemon: 17. Poco::PooledThread::run() in /usr/bin/clickhouse\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.246534 [ 2664001 ] <Fatal> BaseDaemon: 18. Poco::ThreadImpl::runnableEntry(void*) in /usr/bin/clickhouse\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.246562 [ 2664001 ] <Fatal> BaseDaemon: 19. ? in ?\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.246596 [ 2664001 ] <Fatal> BaseDaemon: 20. __clone in ?\r\n[clickhouse.sre-dataops.oa1.os.scif.cz] 2023.02.17 10:54:35.508734 [ 2664001 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 2FDCD92A466BC738A5B7760B94AC828F)\r\n```\r\n\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes, version 23.1.3.5 (official build), build id: B9F28B1E976685BCAD291257215FC33DE8767678)\r\n\r\n**Enable crash reporting**\r\n\r\n> If possible, change \"enabled\" to true in \"send_crash_reports\" section in `config.xml`:\r\n\r\n```\r\n<send_crash_reports>\r\n        <!-- Changing <enabled> to true allows sending crash reports to -->\r\n        <!-- the ClickHouse core developers team via Sentry https://sentry.io -->\r\n        <enabled>false</enabled>\r\n```\r\n\r\n**How to reproduce**\r\n\r\n* Which ClickHouse server version to use\r\n* Which interface to use, if matters\r\n* Non-default settings, if any\r\n* `CREATE TABLE` statements for all tables involved\r\n* Sample data for all these tables, use [clickhouse-obfuscator](https://github.com/ClickHouse/ClickHouse/blob/master/programs/obfuscator/Obfuscator.cpp#L42-L80) if necessary\r\n* Queries to run that lead to unexpected result\r\n\r\n**Expected behavior**\r\n\r\n> A clear and concise description of what you expected to happen.\r\n\r\nServer do not crash (and return error(?)).\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\n2023.02.17 10:54:35.245166 [ 2664001 ] {} <Fatal> BaseDaemon: ########################################\r\n2023.02.17 10:54:35.245469 [ 2664001 ] {} <Fatal> BaseDaemon: (version 23.1.3.5 (official build), build id: B9F28B1E976685BCAD291257215FC33DE8767678) (from thread 2662520) (query_id: 30c06d2d-9026-48cc-98e2-5083389791da) (query: ) Received signal Aborted (6)\r\n2023.02.17 10:54:35.245516 [ 2664001 ] {} <Fatal> BaseDaemon: \r\n2023.02.17 10:54:35.245561 [ 2664001 ] {} <Fatal> BaseDaemon: Stack trace: 0x7f9fd22b300b 0x7f9fd2292859 0x1a354444 0x1a3725ad 0x11e95caa 0x14ccca9a 0x14cd0ec7 0x14cf4265 0x14d89b7f 0x13809640 0x13808f2d 0x14676f79 0x1468b8d9 0x1753e2f4 0x1753fc9b 0x176cf0a7 0x176ccadd 0x7f9fd246a609 0x7f9fd238f133\r\n2023.02.17 10:54:35.245654 [ 2664001 ] {} <Fatal> BaseDaemon: 2. raise in ?\r\n2023.02.17 10:54:35.245695 [ 2664001 ] {} <Fatal> BaseDaemon: 3. abort in ?\r\n2023.02.17 10:54:35.245758 [ 2664001 ] {} <Fatal> BaseDaemon: 4. ? in /usr/bin/clickhouse\r\n2023.02.17 10:54:35.245802 [ 2664001 ] {} <Fatal> BaseDaemon: 5. ? in /usr/bin/clickhouse\r\n2023.02.17 10:54:35.245835 [ 2664001 ] {} <Fatal> BaseDaemon: 6. ? in /usr/bin/clickhouse\r\n2023.02.17 10:54:35.245899 [ 2664001 ] {} <Fatal> BaseDaemon: 7. DB::ASTStorage::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const in /usr/bin/clickhouse\r\n2023.02.17 10:54:35.245985 [ 2664001 ] {} <Fatal> BaseDaemon: 8. DB::ASTCreateQuery::formatQueryImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const in /usr/bin/clickhouse\r\n2023.02.17 10:54:35.246037 [ 2664001 ] {} <Fatal> BaseDaemon: 9. DB::ASTQueryWithOutput::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const in /usr/bin/clickhouse\r\n2023.02.17 10:54:35.246097 [ 2664001 ] {} <Fatal> BaseDaemon: 10. DB::serializeAST(DB::IAST const&, bool) in /usr/bin/clickhouse\r\n2023.02.17 10:54:35.246145 [ 2664001 ] {} <Fatal> BaseDaemon: 11. ? in /usr/bin/clickhouse\r\n2023.02.17 10:54:35.246205 [ 2664001 ] {} <Fatal> BaseDaemon: 12. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) in /usr/bin/clickhouse\r\n2023.02.17 10:54:35.246316 [ 2664001 ] {} <Fatal> BaseDaemon: 13. DB::TCPHandler::runImpl() in /usr/bin/clickhouse\r\n2023.02.17 10:54:35.246355 [ 2664001 ] {} <Fatal> BaseDaemon: 14. DB::TCPHandler::run() in /usr/bin/clickhouse\r\n2023.02.17 10:54:35.246395 [ 2664001 ] {} <Fatal> BaseDaemon: 15. Poco::Net::TCPServerConnection::start() in /usr/bin/clickhouse\r\n2023.02.17 10:54:35.246438 [ 2664001 ] {} <Fatal> BaseDaemon: 16. Poco::Net::TCPServerDispatcher::run() in /usr/bin/clickhouse\r\n2023.02.17 10:54:35.246486 [ 2664001 ] {} <Fatal> BaseDaemon: 17. Poco::PooledThread::run() in /usr/bin/clickhouse\r\n2023.02.17 10:54:35.246534 [ 2664001 ] {} <Fatal> BaseDaemon: 18. Poco::ThreadImpl::runnableEntry(void*) in /usr/bin/clickhouse\r\n2023.02.17 10:54:35.246562 [ 2664001 ] {} <Fatal> BaseDaemon: 19. ? in ?\r\n2023.02.17 10:54:35.246596 [ 2664001 ] {} <Fatal> BaseDaemon: 20. __clone in ?\r\n2023.02.17 10:54:35.508734 [ 2664001 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 2FDCD92A466BC738A5B7760B94AC828F)\r\n2023.02.17 10:54:59.988102 [ 2662387 ] {} <Fatal> Application: Child process was terminated by signal 6.\r\n```\r\n\n",
  "hints_text": "It reproduces with readonly access. So will set `major` label.\r\n\r\n```\r\nclickhouse-client --query \"CREATE TABLE test.xxx (a Int64) ENGINE=MergeTree ORDER BY ({o:String});\" --user readonly --param_o a\r\n```\r\n\r\n```\r\n2023.02.17 19:11:24.075184 [ 3899458 ] <Fatal> BaseDaemon: ########################################\r\n2023.02.17 19:11:24.075248 [ 3899458 ] <Fatal> BaseDaemon: (version 23.2.1.1, build id: 33D55E43F9DCA05C8F319D9F20B501C47A8E7F8A) (from thread 3870562) (query_id: fd0406a8-9cb5-4d36-84d8-280e6f78a442) (query: ) Received signal Aborted (6)\r\n2023.02.17 19:11:24.075290 [ 3899458 ] <Fatal> BaseDaemon: \r\n2023.02.17 19:11:24.075326 [ 3899458 ] <Fatal> BaseDaemon: Stack trace: 0x7f1f66e1403b 0x7f1f66df3859 0x1b43f946 0x1b45804f 0x148754ef 0x16f4cdba 0x16f5080a 0x16f73745 0x16ff935f 0x15e061e6 0x15e05bf6 0x16a1a04b 0x16a29179 0x18f7c727 0x18f7cc0d 0x190ed727 0x190eb303 0x7f1f66fcb609 0x7f1f66ef0163\r\n2023.02.17 19:11:24.075366 [ 3899458 ] <Fatal> BaseDaemon: 3. gsignal @ 0x7f1f66e1403b in ?\r\n2023.02.17 19:11:24.075398 [ 3899458 ] <Fatal> BaseDaemon: 4. abort @ 0x7f1f66df3859 in ?\r\n2023.02.17 19:11:24.842238 [ 3899458 ] <Fatal> BaseDaemon: 5. ? @ 0x1b43f946 in /usr/local/bin/clickhouse\r\n2023.02.17 19:11:24.843310 [ 3899458 ] <Fatal> BaseDaemon: 6. ./build_clang/./contrib/llvm-project/libcxxabi/src/cxa_virtual.cpp:16: ? @ 0x1b45804f in /usr/local/bin/clickhouse\r\n2023.02.17 19:11:25.588102 [ 3899458 ] <Fatal> BaseDaemon: 7. DB::IAST::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const @ 0x148754ef in /usr/local/bin/clickhouse\r\n2023.02.17 19:11:25.594923 [ 3899458 ] <Fatal> BaseDaemon: 8. ./build_clang/./src/Parsers/ASTCreateQuery.cpp:60: DB::ASTStorage::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const @ 0x16f4cdba in /usr/local/bin/clickhouse\r\n2023.02.17 19:11:25.604015 [ 3899458 ] <Fatal> BaseDaemon: 9. ./build_clang/./src/Parsers/ASTCreateQuery.cpp:407: DB::ASTCreateQuery::formatQueryImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const @ 0x16f5080a in /usr/local/bin/clickhouse\r\n2023.02.17 19:11:25.607275 [ 3899458 ] <Fatal> BaseDaemon: 10. ./build_clang/./src/Parsers/ASTQueryWithOutput.cpp:30: DB::ASTQueryWithOutput::formatImpl(DB::IAST::FormatSettings const&, DB::IAST::FormatState&, DB::IAST::FormatStateStacked) const @ 0x16f73745 in /usr/local/bin/clickhouse\r\n2023.02.17 19:11:25.610602 [ 3899458 ] <Fatal> BaseDaemon: 11.1. inlined from ./build_clang/./contrib/llvm-project/libcxx/include/__tree:1088: std::__1::__tree<std::__1::tuple<DB::IAST const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<unsigned long, unsigned long>>, std::__1::less<std::__1::tuple<DB::IAST const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<unsigned long, unsigned long>>>, std::__1::allocator<std::__1::tuple<DB::IAST const*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>, std::__1::pair<unsigned long, unsigned long>>>>::__root[abi:v15000]() const\r\n2023.02.17 19:11:25.610651 [ 3899458 ] <Fatal> BaseDaemon: 11.2. inlined from ./build_clang/./contrib/llvm-project/libcxx/include/__tree:1788: ~__tree\r\n2023.02.17 19:11:25.610682 [ 3899458 ] <Fatal> BaseDaemon: 11.3. inlined from ./build_clang/./contrib/llvm-project/libcxx/include/set:676: ~set\r\n2023.02.17 19:11:25.610714 [ 3899458 ] <Fatal> BaseDaemon: 11.4. inlined from ./build_clang/./src/Parsers/IAST.h:210: ~FormatState\r\n2023.02.17 19:11:25.610739 [ 3899458 ] <Fatal> BaseDaemon: 11.5. inlined from ./build_clang/./src/Parsers/IAST.h:236: DB::IAST::format(DB::IAST::FormatSettings const&) const\r\n2023.02.17 19:11:25.610775 [ 3899458 ] <Fatal> BaseDaemon: 11.6. inlined from ./build_clang/./src/Parsers/formatAST.cpp:12: DB::formatAST(DB::IAST const&, DB::WriteBuffer&, bool, bool)\r\n2023.02.17 19:11:25.610804 [ 3899458 ] <Fatal> BaseDaemon: 11. ./build_clang/./src/Parsers/formatAST.cpp:18: DB::serializeAST(DB::IAST const&, bool) @ 0x16ff935f in /usr/local/bin/clickhouse\r\n2023.02.17 19:11:25.664700 [ 3899458 ] <Fatal> BaseDaemon: 12.1. inlined from ./build_clang/./contrib/llvm-project/libcxx/include/string:1499: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__is_long[abi:v15000]() const\r\n2023.02.17 19:11:25.664741 [ 3899458 ] <Fatal> BaseDaemon: 12.2. inlined from ./build_clang/./contrib/llvm-project/libcxx/include/string:2536: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__move_assign[abi:v15000](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&, std::__1::integral_constant<bool, true>)\r\n2023.02.17 19:11:25.664759 [ 3899458 ] <Fatal> BaseDaemon: 12.3. inlined from ./build_clang/./contrib/llvm-project/libcxx/include/string:2562: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::operator=[abi:v15000](std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&)\r\n2023.02.17 19:11:25.664776 [ 3899458 ] <Fatal> BaseDaemon: 12. ./build_clang/./src/Interpreters/executeQuery.cpp:412: DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x15e061e6 in /usr/local/bin/clickhouse\r\n2023.02.17 19:11:25.721238 [ 3899458 ] <Fatal> BaseDaemon: 13. ./build_clang/./src/Interpreters/executeQuery.cpp:1182: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x15e05bf6 in /usr/local/bin/clickhouse\r\n2023.02.17 19:11:25.761689 [ 3899458 ] <Fatal> BaseDaemon: 14. ./build_clang/./src/Server/TCPHandler.cpp:0: DB::TCPHandler::runImpl() @ 0x16a1a04b in /usr/local/bin/clickhouse\r\n2023.02.17 19:11:25.826143 [ 3899458 ] <Fatal> BaseDaemon: 15. ./build_clang/./src/Server/TCPHandler.cpp:1993: DB::TCPHandler::run() @ 0x16a29179 in /usr/local/bin/clickhouse\r\n2023.02.17 19:11:25.828040 [ 3899458 ] <Fatal> BaseDaemon: 16. ./build_clang/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x18f7c727 in /usr/local/bin/clickhouse\r\n2023.02.17 19:11:25.831161 [ 3899458 ] <Fatal> BaseDaemon: 17.1. inlined from ./build_clang/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: std::__1::default_delete<Poco::Net::TCPServerConnection>::operator()[abi:v15000](Poco::Net::TCPServerConnection*) const\r\n2023.02.17 19:11:25.831185 [ 3899458 ] <Fatal> BaseDaemon: 17.2. inlined from ./build_clang/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:305: std::__1::unique_ptr<Poco::Net::TCPServerConnection, std::__1::default_delete<Poco::Net::TCPServerConnection>>::reset[abi:v15000](Poco::Net::TCPServerConnection*)\r\n2023.02.17 19:11:25.831203 [ 3899458 ] <Fatal> BaseDaemon: 17.3. inlined from ./build_clang/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:259: ~unique_ptr\r\n2023.02.17 19:11:25.831211 [ 3899458 ] <Fatal> BaseDaemon: 17. ./build_clang/./base/poco/Net/src/TCPServerDispatcher.cpp:116: Poco::Net::TCPServerDispatcher::run() @ 0x18f7cc0d in /usr/local/bin/clickhouse\r\n2023.02.17 19:11:25.834948 [ 3899458 ] <Fatal> BaseDaemon: 18. ./build_clang/./base/poco/Foundation/src/ThreadPool.cpp:213: Poco::PooledThread::run() @ 0x190ed727 in /usr/local/bin/clickhouse\r\n2023.02.17 19:11:25.838052 [ 3899458 ] <Fatal> BaseDaemon: 19.1. inlined from ./build_clang/./base/poco/Foundation/include/Poco/SharedPtr.h:156: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::assign(Poco::Runnable*)\r\n2023.02.17 19:11:25.838076 [ 3899458 ] <Fatal> BaseDaemon: 19.2. inlined from ./build_clang/./base/poco/Foundation/include/Poco/SharedPtr.h:208: Poco::SharedPtr<Poco::Runnable, Poco::ReferenceCounter, Poco::ReleasePolicy<Poco::Runnable>>::operator=(Poco::Runnable*)\r\n2023.02.17 19:11:25.838092 [ 3899458 ] <Fatal> BaseDaemon: 19. ./build_clang/./base/poco/Foundation/src/Thread_POSIX.cpp:360: Poco::ThreadImpl::runnableEntry(void*) @ 0x190eb303 in /usr/local/bin/clickhouse\r\n2023.02.17 19:11:25.838124 [ 3899458 ] <Fatal> BaseDaemon: 20. ? @ 0x7f1f66fcb609 in ?\r\n2023.02.17 19:11:25.838155 [ 3899458 ] <Fatal> BaseDaemon: 21. clone @ 0x7f1f66ef0163 in ?\r\n2023.02.17 19:11:25.838188 [ 3899458 ] <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\nCode: 32. DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000: (in query: CREATE TABLE test.xxx (a Int64) ENGINE=MergeTree ORDER BY ({o:String});). (ATTEMPT_TO_READ_AFTER_EOF)\r\n```",
  "created_at": "2023-03-11T19:19:12Z",
  "modified_files": [
    "src/Interpreters/ReplaceQueryParameterVisitor.cpp",
    "src/Parsers/ASTAlterQuery.h",
    "src/Parsers/ASTBackupQuery.h",
    "src/Parsers/ASTConstraintDeclaration.h",
    "src/Parsers/ASTCreateQuery.cpp",
    "src/Parsers/ASTCreateQuery.h",
    "src/Parsers/ASTDictionary.h",
    "src/Parsers/ASTExternalDDLQuery.h",
    "src/Parsers/ASTFunctionWithKeyValueArguments.h",
    "src/Parsers/ASTIndexDeclaration.h",
    "src/Parsers/ASTProjectionDeclaration.h",
    "src/Parsers/ASTTableOverrides.h",
    "src/Parsers/IAST.h",
    "src/Parsers/MySQL/ASTAlterCommand.h",
    "src/Parsers/MySQL/ASTCreateDefines.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02679_query_parameters_dangling_pointer.sql"
  ]
}