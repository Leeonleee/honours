diff --git a/src/Databases/DatabaseAtomic.cpp b/src/Databases/DatabaseAtomic.cpp
index d9a3cf0ed935..06d11443dcce 100644
--- a/src/Databases/DatabaseAtomic.cpp
+++ b/src/Databases/DatabaseAtomic.cpp
@@ -120,7 +120,7 @@ void DatabaseAtomic::drop(ContextPtr)
     auto db_disk = getDisk();
     try
     {
-        if (db_disk->isSymlinkSupported())
+        if (db_disk->isSymlinkSupported() && !db_disk->isReadOnly())
         {
             db_disk->removeFileIfExists(path_to_metadata_symlink);
             db_disk->removeRecursive(path_to_table_symlinks);
@@ -130,7 +130,8 @@ void DatabaseAtomic::drop(ContextPtr)
     {
         LOG_WARNING(log, getCurrentExceptionMessageAndPattern(/* with_stacktrace */ true));
     }
-    db_disk->removeRecursive(getMetadataPath());
+    if (!db_disk->isReadOnly())
+        db_disk->removeRecursive(getMetadataPath());
 }
 
 void DatabaseAtomic::attachTable(ContextPtr /* context_ */, const String & name, const StoragePtr & table, const String & relative_table_path)
diff --git a/src/Databases/DatabaseOrdinary.cpp b/src/Databases/DatabaseOrdinary.cpp
index a4a7db931e40..5d4de78b79ca 100644
--- a/src/Databases/DatabaseOrdinary.cpp
+++ b/src/Databases/DatabaseOrdinary.cpp
@@ -277,7 +277,8 @@ void DatabaseOrdinary::loadTablesMetadata(ContextPtr local_context, ParsedTables
                 if (create_query->uuid != UUIDHelpers::Nil)
                 {
                     /// A bit tricky way to distinguish ATTACH DATABASE and server startup (actually it's "force_attach" flag).
-                    if (is_startup)
+                    /// When attaching a database with a read-only disk, the UUIDs do not exist, we add them manually.
+                    if (is_startup || (db_disk->isReadOnly() && !DatabaseCatalog::instance().hasUUIDMapping(create_query->uuid)))
                     {
                         /// Server is starting up. Lock UUID used by permanently detached table.
                         DatabaseCatalog::instance().addUUIDMapping(create_query->uuid);
diff --git a/src/Interpreters/InterpreterDropQuery.cpp b/src/Interpreters/InterpreterDropQuery.cpp
index a7950b7106d1..026c19ded3fa 100644
--- a/src/Interpreters/InterpreterDropQuery.cpp
+++ b/src/Interpreters/InterpreterDropQuery.cpp
@@ -447,6 +447,8 @@ BlockIO InterpreterDropQuery::executeToDatabaseImpl(const ASTDropQuery & query,
         // For truncate operation on database, drop the tables
         if (truncate)
             query_for_table.kind = query.has_tables ? ASTDropQuery::Kind::Truncate : ASTDropQuery::Kind::Drop;
+        if (database->getDisk()->isReadOnly())
+            query_for_table.kind = ASTDropQuery::Detach;
         query_for_table.if_exists = true;
         query_for_table.if_empty = false;
         query_for_table.setDatabase(database_name);
