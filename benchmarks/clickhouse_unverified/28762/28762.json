{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 28762,
  "instance_id": "ClickHouse__ClickHouse-28762",
  "issue_numbers": [
    "18765"
  ],
  "base_commit": "697eb7a6c02b7fe07556db6bf2510a30febf1dd8",
  "patch": "diff --git a/src/Storages/MergeTree/IMergeTreeReader.cpp b/src/Storages/MergeTree/IMergeTreeReader.cpp\nindex d659259e1a9d..d0d845ed6a31 100644\n--- a/src/Storages/MergeTree/IMergeTreeReader.cpp\n+++ b/src/Storages/MergeTree/IMergeTreeReader.cpp\n@@ -135,10 +135,11 @@ void IMergeTreeReader::fillMissingColumns(Columns & res_columns, bool & should_e\n \n                 String offsets_name = Nested::extractTableName(name);\n                 auto offset_it = offset_columns.find(offsets_name);\n-                if (offset_it != offset_columns.end())\n+                const auto * array_type = typeid_cast<const DataTypeArray *>(type.get());\n+                if (offset_it != offset_columns.end() && array_type)\n                 {\n+                    const auto & nested_type = array_type->getNestedType();\n                     ColumnPtr offsets_column = offset_it->second;\n-                    DataTypePtr nested_type = typeid_cast<const DataTypeArray &>(*type).getNestedType();\n                     size_t nested_rows = typeid_cast<const ColumnUInt64 &>(*offsets_column).getData().back();\n \n                     ColumnPtr nested_column =\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02017_columns_with_dot_2.reference b/tests/queries/0_stateless/02017_columns_with_dot_2.reference\nnew file mode 100644\nindex 000000000000..8d43601632c4\n--- /dev/null\n+++ b/tests/queries/0_stateless/02017_columns_with_dot_2.reference\n@@ -0,0 +1,2 @@\n+123\tasd\t[1,2]\n+123\tasd\t[1,2]\t0\ndiff --git a/tests/queries/0_stateless/02017_columns_with_dot_2.sql b/tests/queries/0_stateless/02017_columns_with_dot_2.sql\nnew file mode 100644\nindex 000000000000..eefe52b74f34\n--- /dev/null\n+++ b/tests/queries/0_stateless/02017_columns_with_dot_2.sql\n@@ -0,0 +1,18 @@\n+DROP TABLE IF EXISTS test_nested;\n+\n+CREATE TABLE test_nested\n+(\n+    `id` String,\n+    `with_dot.str` String,\n+    `with_dot.array` Array(Int32)\n+)\n+ENGINE = MergeTree()\n+ORDER BY id;\n+\n+INSERT INTO test_nested VALUES('123', 'asd', [1,2]);\n+SELECT * FROM test_nested;\n+\n+ALTER TABLE test_nested ADD COLUMN `with_dot.bool` UInt8;\n+SELECT * FROM test_nested;\n+\n+DROP TABLE test_nested;\n",
  "problem_statement": "Clickhouse Nested issue\nAfter you create table with fields with dots and after alter table clickhouse throw exception about bad cast\r\nversion 20.12.3\r\n\r\nHow to reproduce\r\n\r\n```\r\nCREATE TABLE test_nested\r\n(\r\n    `id` String,\r\n    `with_dot.str` String,\r\n    `with_dot.array` Array(Int32)\r\n)\r\nENGINE = MergeTree()\r\nORDER BY id\r\n\r\n\r\nInsert Into test_nested (id,`with_dot.str`, `with_dot.array`) VALUES('123','asd',[1,2])\r\n\r\nselect * FROM test_nested\r\n\r\n\r\nSELECT *\r\nFROM test_nested\r\n\r\nQuery id: 42f26a6e-7573-4169-a4a1-9fe7022ba656\r\n\r\n\u250c\u2500id\u2500\u2500\u252c\u2500with_dot.str\u2500\u252c\u2500with_dot.array\u2500\u2510\r\n\u2502 123 \u2502 asd          \u2502 [1,2]          \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nalter table test_nested ADD COLUMN `with_dot.bool` UInt8\r\n\r\n\r\nSELECT *\r\nFROM test_nested\r\n\r\nQuery id: 3ea8ae6b-1e0a-4ae5-b4d0-dcdcb6b7b8f8\r\n\r\n\r\nReceived exception from server (version 20.12.3):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Bad cast from type DB::DataTypeNumber<char8_t> to DB::DataTypeArray: (while reading from part /var/lib/clickhouse/store...\r\n```\r\n\r\nI think that happend because clickhouse after altert think that field `with_dot.bool` is nested and trying to cast to array, but i'm not creating nested field, i'm only use field name with `.`\r\n\n",
  "hints_text": "Dot in column names has a special/reserved meaning. CH expects that columns with dot is Arrays.\r\nDo not use dot.\r\n\n> Dot in column names has a special/reserved meaning. CH expects that columns with dot is Arrays.\r\n> Do not use dot.\r\n\r\nBut why that works without alter?\nand i think you need specify that rule here https://clickhouse.tech/docs/en/sql-reference/syntax/#syntax-identifiers\nand if field names with dot not contains array all works fine even after alter\nStill relevant in 20.8 (master).\n\u0412\u0441\u0435 \u0435\u0449\u0435 \u043d\u0435 \u0438\u0441\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e",
  "created_at": "2021-09-08T18:44:28Z",
  "modified_files": [
    "src/Storages/MergeTree/IMergeTreeReader.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02017_columns_with_dot_2.reference",
    "b/tests/queries/0_stateless/02017_columns_with_dot_2.sql"
  ]
}