{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 19390,
  "instance_id": "ClickHouse__ClickHouse-19390",
  "issue_numbers": [
    "19389"
  ],
  "base_commit": "b0fca03d79fed83f4d3bee2344641b06531baef6",
  "patch": "diff --git a/cmake/autogenerated_versions.txt b/cmake/autogenerated_versions.txt\nindex 1c2e4c1f55eb..5d643cc4beec 100644\n--- a/cmake/autogenerated_versions.txt\n+++ b/cmake/autogenerated_versions.txt\n@@ -1,5 +1,5 @@\n # This strings autochanged from release_lib.sh:\n-SET(VERSION_REVISION 54446)\n+SET(VERSION_REVISION 54447)\n SET(VERSION_MAJOR 21)\n SET(VERSION_MINOR 2)\n SET(VERSION_PATCH 1)\ndiff --git a/src/Core/Defines.h b/src/Core/Defines.h\nindex f1cd1a8a7080..fdf250a6dd18 100644\n--- a/src/Core/Defines.h\n+++ b/src/Core/Defines.h\n@@ -74,9 +74,10 @@\n #define DBMS_MIN_REVISION_WITH_INTERSERVER_SECRET 54441\n \n #define DBMS_MIN_REVISION_WITH_X_FORWARDED_FOR_IN_CLIENT_INFO 54443\n+#define DBMS_MIN_REVISION_WITH_REFERER_IN_CLIENT_INFO 54447\n \n /// Version of ClickHouse TCP protocol. Increment it manually when you change the protocol.\n-#define DBMS_TCP_PROTOCOL_VERSION 54443\n+#define DBMS_TCP_PROTOCOL_VERSION 54447\n \n /// The boundary on which the blocks for asynchronous file operations should be aligned.\n #define DEFAULT_AIO_FILE_BLOCK_SIZE 4096\ndiff --git a/src/Interpreters/ClientInfo.cpp b/src/Interpreters/ClientInfo.cpp\nindex 30aa8a0c6920..5449f397f49d 100644\n--- a/src/Interpreters/ClientInfo.cpp\n+++ b/src/Interpreters/ClientInfo.cpp\n@@ -52,6 +52,9 @@ void ClientInfo::write(WriteBuffer & out, const UInt64 server_protocol_revision)\n \n         if (server_protocol_revision >= DBMS_MIN_REVISION_WITH_X_FORWARDED_FOR_IN_CLIENT_INFO)\n             writeBinary(forwarded_for, out);\n+\n+        if (server_protocol_revision >= DBMS_MIN_REVISION_WITH_REFERER_IN_CLIENT_INFO)\n+            writeBinary(http_referer, out);\n     }\n \n     if (server_protocol_revision >= DBMS_MIN_REVISION_WITH_QUOTA_KEY_IN_CLIENT_INFO)\n@@ -126,6 +129,9 @@ void ClientInfo::read(ReadBuffer & in, const UInt64 client_protocol_revision)\n \n         if (client_protocol_revision >= DBMS_MIN_REVISION_WITH_X_FORWARDED_FOR_IN_CLIENT_INFO)\n             readBinary(forwarded_for, in);\n+\n+        if (client_protocol_revision >= DBMS_MIN_REVISION_WITH_REFERER_IN_CLIENT_INFO)\n+            readBinary(http_referer, in);\n     }\n \n     if (client_protocol_revision >= DBMS_MIN_REVISION_WITH_QUOTA_KEY_IN_CLIENT_INFO)\ndiff --git a/src/Interpreters/ClientInfo.h b/src/Interpreters/ClientInfo.h\nindex e188420d6075..d2b7beb7d8cc 100644\n--- a/src/Interpreters/ClientInfo.h\n+++ b/src/Interpreters/ClientInfo.h\n@@ -82,6 +82,7 @@ class ClientInfo\n     /// For http\n     HTTPMethod http_method = HTTPMethod::UNKNOWN;\n     String http_user_agent;\n+    String http_referer;\n \n     /// Comma separated list of forwarded IP addresses (from X-Forwarded-For for HTTP interface).\n     /// It's expected that proxy appends the forwarded address to the end of the list.\ndiff --git a/src/Interpreters/QueryLog.cpp b/src/Interpreters/QueryLog.cpp\nindex 78c4072cd4c5..3142e9af76dd 100644\n--- a/src/Interpreters/QueryLog.cpp\n+++ b/src/Interpreters/QueryLog.cpp\n@@ -86,6 +86,7 @@ Block QueryLogElement::createBlock()\n         {std::make_shared<DataTypeUInt32>(),                                  \"client_version_patch\"},\n         {std::make_shared<DataTypeUInt8>(),                                   \"http_method\"},\n         {std::make_shared<DataTypeString>(),                                  \"http_user_agent\"},\n+        {std::make_shared<DataTypeString>(),                                  \"http_referer\"},\n         {std::make_shared<DataTypeString>(),                                  \"forwarded_for\"},\n         {std::make_shared<DataTypeString>(),                                  \"quota_key\"},\n \n@@ -214,6 +215,7 @@ void QueryLogElement::appendClientInfo(const ClientInfo & client_info, MutableCo\n \n     columns[i++]->insert(UInt64(client_info.http_method));\n     columns[i++]->insert(client_info.http_user_agent);\n+    columns[i++]->insert(client_info.http_referer);\n     columns[i++]->insert(client_info.forwarded_for);\n \n     columns[i++]->insert(client_info.quota_key);\ndiff --git a/src/Interpreters/QueryThreadLog.cpp b/src/Interpreters/QueryThreadLog.cpp\nindex 5d325c055494..f1cce1a3da97 100644\n--- a/src/Interpreters/QueryThreadLog.cpp\n+++ b/src/Interpreters/QueryThreadLog.cpp\n@@ -61,6 +61,7 @@ Block QueryThreadLogElement::createBlock()\n         {std::make_shared<DataTypeUInt32>(),        \"client_version_patch\"},\n         {std::make_shared<DataTypeUInt8>(),         \"http_method\"},\n         {std::make_shared<DataTypeString>(),        \"http_user_agent\"},\n+        {std::make_shared<DataTypeString>(),        \"http_referer\"},\n         {std::make_shared<DataTypeString>(),        \"forwarded_for\"},\n         {std::make_shared<DataTypeString>(),        \"quota_key\"},\n \ndiff --git a/src/Server/HTTPHandler.cpp b/src/Server/HTTPHandler.cpp\nindex 472850950d49..5006a817b5bc 100644\n--- a/src/Server/HTTPHandler.cpp\n+++ b/src/Server/HTTPHandler.cpp\n@@ -295,6 +295,7 @@ void HTTPHandler::processQuery(\n \n     client_info.http_method = http_method;\n     client_info.http_user_agent = request.get(\"User-Agent\", \"\");\n+    client_info.http_referer = request.get(\"Referer\", \"\");\n     client_info.forwarded_for = request.get(\"X-Forwarded-For\", \"\");\n \n     /// This will also set client_info.current_user and current_address\ndiff --git a/src/Storages/System/StorageSystemProcesses.cpp b/src/Storages/System/StorageSystemProcesses.cpp\nindex 178eedd9ad71..b397d9417868 100644\n--- a/src/Storages/System/StorageSystemProcesses.cpp\n+++ b/src/Storages/System/StorageSystemProcesses.cpp\n@@ -43,6 +43,7 @@ NamesAndTypesList StorageSystemProcesses::getNamesAndTypes()\n \n         {\"http_method\", std::make_shared<DataTypeUInt8>()},\n         {\"http_user_agent\", std::make_shared<DataTypeString>()},\n+        {\"http_referer\", std::make_shared<DataTypeString>()},\n         {\"forwarded_for\", std::make_shared<DataTypeString>()},\n \n         {\"quota_key\", std::make_shared<DataTypeString>()},\n@@ -99,6 +100,7 @@ void StorageSystemProcesses::fillData(MutableColumns & res_columns, const Contex\n \n         res_columns[i++]->insert(UInt64(process.client_info.http_method));\n         res_columns[i++]->insert(process.client_info.http_user_agent);\n+        res_columns[i++]->insert(process.client_info.http_referer);\n         res_columns[i++]->insert(process.client_info.forwarded_for);\n \n         res_columns[i++]->insert(process.client_info.quota_key);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01661_referer.reference b/tests/queries/0_stateless/01661_referer.reference\nnew file mode 100644\nindex 000000000000..49d29c80f172\n--- /dev/null\n+++ b/tests/queries/0_stateless/01661_referer.reference\n@@ -0,0 +1,2 @@\n+1\n+https://yandex.ru/\ndiff --git a/tests/queries/0_stateless/01661_referer.sh b/tests/queries/0_stateless/01661_referer.sh\nnew file mode 100755\nindex 000000000000..159f5e9036f3\n--- /dev/null\n+++ b/tests/queries/0_stateless/01661_referer.sh\n@@ -0,0 +1,9 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+${CLICKHOUSE_CURL} -sS \"${CLICKHOUSE_URL}\" -d 'SELECT 1' --referer 'https://yandex.ru/'\n+${CLICKHOUSE_CLIENT} --query \"SYSTEM FLUSH LOGS\"\n+${CLICKHOUSE_CLIENT} --query \"SELECT http_referer FROM system.query_log WHERE http_referer LIKE '%yandex%' LIMIT 1\"\n",
  "problem_statement": "ClientInfo and query_log does not have http_referer field\n**Use case**\r\nClickHouse as a web server becomes a viable scenario.\r\n(At least in backoffice).\r\n\r\n**Describe the solution you'd like**\r\nAdd this field.\r\n\r\n**Additional context**\r\nIt's in question how to name it. The original HTTP specs has the famous typo in it and name it `referer`. While JavaScript has this typo fixed and name it `referrer`.\r\n\n",
  "hints_text": "",
  "created_at": "2021-01-21T23:16:42Z",
  "modified_files": [
    "cmake/autogenerated_versions.txt",
    "src/Core/Defines.h",
    "src/Interpreters/ClientInfo.cpp",
    "src/Interpreters/ClientInfo.h",
    "src/Interpreters/QueryLog.cpp",
    "src/Interpreters/QueryThreadLog.cpp",
    "src/Server/HTTPHandler.cpp",
    "src/Storages/System/StorageSystemProcesses.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01661_referer.reference",
    "b/tests/queries/0_stateless/01661_referer.sh"
  ]
}