{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 53506,
  "instance_id": "ClickHouse__ClickHouse-53506",
  "issue_numbers": [
    "53179"
  ],
  "base_commit": "a47ae631bd2e093137c2aba4444d622fc939501a",
  "patch": "diff --git a/src/Functions/URL/domain.h b/src/Functions/URL/domain.h\nindex 91f83a457be6..f38f106e9a24 100644\n--- a/src/Functions/URL/domain.h\n+++ b/src/Functions/URL/domain.h\n@@ -44,6 +44,7 @@ inline std::string_view getURLHostRFC(const char * data, size_t size)\n                 case '.':\n                 case '-':\n                 case '+':\n+                case '[':\n                     break;\n                 case ' ': /// restricted symbols\n                 case '\\t':\n@@ -56,7 +57,6 @@ inline std::string_view getURLHostRFC(const char * data, size_t size)\n                 case '\\\\':\n                 case '^':\n                 case '~':\n-                case '[':\n                 case ']':\n                 case ';':\n                 case '=':\n@@ -73,6 +73,13 @@ exloop: if ((scheme_end - pos) > 2 && *pos == ':' && *(pos + 1) == '/' && *(pos\n             pos = data;\n     }\n \n+    bool has_open_bracket = false;\n+    bool has_end_bracket = false;\n+    if (*pos == '[') /// IPv6 [2001:db8::1]:80\n+    {\n+        has_open_bracket = true;\n+        ++pos;\n+    }\n     Pos dot_pos = nullptr;\n     Pos colon_pos = nullptr;\n     bool has_sub_delims = false;\n@@ -84,10 +91,14 @@ exloop: if ((scheme_end - pos) > 2 && *pos == ':' && *(pos + 1) == '/' && *(pos\n         switch (*pos)\n         {\n         case '.':\n+            if (has_open_bracket)\n+                return std::string_view{};\n             if (has_at_symbol || colon_pos == nullptr)\n                 dot_pos = pos;\n             break;\n         case ':':\n+            if (has_open_bracket)\n+                continue;\n             if (has_at_symbol || colon_pos) goto done;\n             colon_pos = pos;\n             break;\n@@ -116,6 +127,13 @@ exloop: if ((scheme_end - pos) > 2 && *pos == ':' && *(pos + 1) == '/' && *(pos\n             /// registered).\n             has_sub_delims = true;\n             continue;\n+        case ']':\n+            if (has_open_bracket)\n+            {\n+                has_end_bracket = true;\n+                goto done;\n+            }\n+            [[fallthrough]];\n         case ' ': /// restricted symbols in whole URL\n         case '\\t':\n         case '<':\n@@ -126,7 +144,6 @@ exloop: if ((scheme_end - pos) > 2 && *pos == ':' && *(pos + 1) == '/' && *(pos\n         case '\\\\':\n         case '^':\n         case '[':\n-        case ']':\n             if (colon_pos == nullptr)\n                 return std::string_view{};\n             else\n@@ -138,7 +155,11 @@ exloop: if ((scheme_end - pos) > 2 && *pos == ':' && *(pos + 1) == '/' && *(pos\n     if (has_sub_delims)\n         return std::string_view{};\n     if (!has_at_symbol)\n+    {\n+        if (has_open_bracket && has_end_bracket)\n+            return std::string_view(start_of_host, pos - start_of_host);\n         pos = colon_pos ? colon_pos : pos;\n+    }\n     return checkAndReturnHost(pos, dot_pos, start_of_host);\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02845_domain_rfc_support_ipv6.reference b/tests/queries/0_stateless/02845_domain_rfc_support_ipv6.reference\nnew file mode 100644\nindex 000000000000..26ba1a3422b9\n--- /dev/null\n+++ b/tests/queries/0_stateless/02845_domain_rfc_support_ipv6.reference\n@@ -0,0 +1,32 @@\n+\"2001:db8::1\"\n+\"2001:db8::1\"\n+\"::200\"\n+\"2001:db8::1\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\n+\"\"\ndiff --git a/tests/queries/0_stateless/02845_domain_rfc_support_ipv6.sql b/tests/queries/0_stateless/02845_domain_rfc_support_ipv6.sql\nnew file mode 100644\nindex 000000000000..e590064af443\n--- /dev/null\n+++ b/tests/queries/0_stateless/02845_domain_rfc_support_ipv6.sql\n@@ -0,0 +1,33 @@\n+SELECT domainRFC('http://[2001:db8::1]:80') FORMAT CSV;\n+SELECT domainRFC('[2001:db8::1]:80') FORMAT CSV;\n+SELECT domainRFC('[::200]:80') FORMAT CSV;\n+SELECT domainRFC('[2001:db8::1]') FORMAT CSV;\n+-- Does not conform to the IPv6 format.\n+SELECT domainRFC('[2001db81]:80') FORMAT CSV;\n+SELECT domainRFC('[20[01:db8::1]:80') FORMAT CSV;\n+SELECT domainRFC('[20[01:db]8::1]:80') FORMAT CSV;\n+SELECT domainRFC('[2001:db8::1') FORMAT CSV;\n+SELECT domainRFC('2001:db8::1]:80') FORMAT CSV;\n+SELECT domainRFC('[2001db81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db.81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db/81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db?81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db#81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db@81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db;81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db=81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db&81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db~81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db%81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db<81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db>81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db{81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db}81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db|81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db\\81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db^81]:80') FORMAT CSV;\n+SELECT domainRFC('[2001::db 81]:80') FORMAT CSV;\n+SELECT domainRFC('[[]:80') FORMAT CSV;\n+SELECT domainRFC('[]]:80') FORMAT CSV;\n+SELECT domainRFC('[]:80') FORMAT CSV;\n+SELECT domainRFC('[ ]:80') FORMAT CSV;\n",
  "problem_statement": "domain() returns empty string for IPv6 and port combination\n**How to reproduce**\r\n```\r\nSELECT domain('[2001:db8::1]:80')\r\nFORMAT CSV\r\n\r\n                                                                                                                                                                                                                          \r\n\"\"\r\n```\r\n\r\n**Expected behavior**\r\n```\r\nSELECT domain('[2001:db8::1]:80')\r\nFORMAT CSV\r\n\r\n                                                                                                                                                                                                                          \r\n\"2001:db8::1\"\r\n```\r\n\r\nThis should be similar to IPv4  addresses with port numbers. This works as expected on the current version.\r\n```\r\nSELECT domain('1.1.1.1:80')\r\nFORMAT CSV\r\n\r\n                                                                                                                                                                                                                          \r\n\"1.1.1.1\"\r\n```\r\n\r\nThe behavior should not be different as long as `[]` is used according to [rfc5952 section-6](https://datatracker.ietf.org/doc/html/rfc5952#section-6).\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2023-08-17T08:20:23Z",
  "modified_files": [
    "src/Functions/URL/domain.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02845_domain_rfc_support_ipv6.reference",
    "b/tests/queries/0_stateless/02845_domain_rfc_support_ipv6.sql"
  ]
}