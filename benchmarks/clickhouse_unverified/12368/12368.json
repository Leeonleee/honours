{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12368,
  "instance_id": "ClickHouse__ClickHouse-12368",
  "issue_numbers": [
    "10437"
  ],
  "base_commit": "c410ae3ebf69b56d7d5e8e7b5b34bbad476b0390",
  "patch": "diff --git a/src/Functions/array/arrayFill.cpp b/src/Functions/array/arrayFill.cpp\nindex 4cc2caaaafaa..5a478aaa2b05 100644\n--- a/src/Functions/array/arrayFill.cpp\n+++ b/src/Functions/array/arrayFill.cpp\n@@ -45,11 +45,11 @@ struct ArrayFillImpl\n \n             for (auto in_offset : in_offsets)\n             {\n-                array_end = in_offset - 1;\n+                array_end = in_offset;\n \n-                for (; end <= array_end; ++end)\n+                for (; end < array_end; ++end)\n                 {\n-                    if (end == array_end || fill[end + 1] != fill[begin])\n+                    if (end + 1 == array_end || fill[end + 1] != fill[begin])\n                     {\n                         if (fill[begin])\n                             out_data.insertRangeFrom(in_data, begin, end + 1 - begin);\n@@ -57,8 +57,8 @@ struct ArrayFillImpl\n                         {\n                             if constexpr (reverse)\n                             {\n-                                if (end == array_end)\n-                                    out_data.insertManyFrom(in_data, array_end, end + 1 - begin);\n+                                if (end + 1 == array_end)\n+                                    out_data.insertManyFrom(in_data, end, end + 1 - begin);\n                                 else\n                                     out_data.insertManyFrom(in_data, end + 1, end + 1 - begin);\n                             }\n@@ -75,7 +75,7 @@ struct ArrayFillImpl\n                     }\n                 }\n \n-                array_begin = array_end + 1;\n+                array_begin = array_end;\n             }\n         }\n         else\n@@ -88,8 +88,7 @@ struct ArrayFillImpl\n             if (column_fill_const->getValue<UInt8>())\n                 return ColumnArray::create(\n                     array.getDataPtr(),\n-                    array.getOffsetsPtr()\n-                );\n+                    array.getOffsetsPtr());\n \n             size_t array_begin = 0;\n             size_t array_end = 0;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01376_array_fill_empty.reference b/tests/queries/0_stateless/01376_array_fill_empty.reference\nnew file mode 100644\nindex 000000000000..70e8ac460741\n--- /dev/null\n+++ b/tests/queries/0_stateless/01376_array_fill_empty.reference\n@@ -0,0 +1,4 @@\n+[]\n+[]\n+[]\n+[]\ndiff --git a/tests/queries/0_stateless/01376_array_fill_empty.sql b/tests/queries/0_stateless/01376_array_fill_empty.sql\nnew file mode 100644\nindex 000000000000..38eea8a51c10\n--- /dev/null\n+++ b/tests/queries/0_stateless/01376_array_fill_empty.sql\n@@ -0,0 +1,4 @@\n+SELECT arrayFill(x -> (x < 10), []);\n+SELECT arrayFill(x -> (x < 10), emptyArrayUInt8());\n+SELECT arrayFill(x -> 1, []);\n+SELECT arrayFill(x -> 0, []);\n",
  "problem_statement": "Mat view subquery + buffer table results in DB::Exception: There is no query\n```\r\nCREATE TABLE t1 (\r\n  i UInt32,\r\n  time DateTime\r\n) ENGINE = MergeTree()\r\nPARTITION BY time\r\nORDER BY time\r\n\r\nCREATE TABLE t2 (\r\n  i UInt32,\r\n  time DateTime\r\n) ENGINE = MergeTree()\r\nPARTITION BY time\r\nORDER BY time\r\n\r\nCREATE MATERIALIZED VIEW mv1\r\nTO t2\r\nAS SELECT * FROM (SELECT * FROM t1)\r\n\r\nCREATE TABLE b1 AS t1\r\nENGINE = Buffer(default, t1, 1, 0, 0, 1, 1, 1, 1)\r\n\r\nvmihailenco :) INSERT INTO b1 VALUES (1, now());\r\n\r\nINSERT INTO b1 VALUES\r\n\r\nReceived exception from server (version 20.3.7):\r\nCode: 393. DB::Exception: Received from localhost:9000. DB::Exception: There is no query.\r\n```\n",
  "hints_text": "I'm having same issue,\r\nI have \r\n1. table A engine ReplaceMergeTree()\r\n2. MV B on table A\r\n3. Buffer table on table A\r\n\r\nData is not written to the destination A table from the buffer.\r\nEven DROPing the Buffer that should trigger flush the data fails\r\n\r\n```\r\n2020.05.02 21:31:28.038219 [ 526 ] {06a0c14c-6c81-4204-9ab7-968755e881ce} <Error> virtual void DB::StorageBuffer::shutdown(): Code: 393, e.displayText() = DB::Exception: There is no query, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0xbecd55c in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x5009d49 in /usr/bin/clickhouse\r\n2. ? @ 0x4bfb800 in /usr/bin/clickhouse\r\n3. DB::Context::getSampleBlockCache() const @ 0x8cdcb99 in /usr/bin/clickhouse\r\n4. DB::InterpreterSelectWithUnionQuery::getSampleBlock(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&) @ 0x8da5c02 in /usr/bin/clickhouse\r\n5. ? @ 0x8f365b9 in /usr/bin/clickhouse\r\n6. DB::getDatabaseAndTablesWithColumnNames(std::__1::vector<DB::ASTTableExpression const*, std::__1::allocator<DB::ASTTableExpression const*> > const&, DB::Context const&, bool) @ 0x8f394f8 in /usr/bin/clickhouse\r\n7. DB::SyntaxAnalyzer::analyze(std::__1::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::IStorage>, DB::NamesAndTypesList const&) const @ 0x8ef3983 in /usr/bin/clickhouse\r\n8. ? @ 0x8d6d616 in /usr/bin/clickhouse\r\n9. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6e8c8 in /usr/bin/clickhouse\r\n10. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n11. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8da5236 in /usr/bin/clickhouse\r\n12. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f2af in /usr/bin/clickhouse\r\n13. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n14. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8da5236 in /usr/bin/clickhouse\r\n15. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f2af in /usr/bin/clickhouse\r\n16. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x8d6f9f5 in /usr/bin/clickhouse\r\n17. DB::PushingToViewsBlockOutputStream::PushingToViewsBlockOutputStream(std::__1::shared_ptr<DB::IStorage> const&, DB::Context const&, std::__1::shared_ptr<DB::IAST> const&, bool) @ 0x96f8baa in /usr/bin/clickhouse\r\n18. DB::InterpreterInsertQuery::execute() @ 0x8d4f07f in /usr/bin/clickhouse\r\n19. DB::StorageBuffer::writeBlockToDestination(DB::Block const&, std::__1::shared_ptr<DB::IStorage>) @ 0x99469fe in /usr/bin/clickhouse\r\n20. DB::StorageBuffer::flushBuffer(DB::StorageBuffer::Buffer&, bool, bool) @ 0x994796f in /usr/bin/clickhouse\r\n21. DB::StorageBuffer::optimize(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::IAST> const&, bool, bool, DB::Context const&) @ 0x9947baf in /usr/bin/clickhouse\r\n22. DB::StorageBuffer::shutdown() @ 0x9944103 in /usr/bin/clickhouse\r\n23. DB::InterpreterDropQuery::executeToTable(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ASTDropQuery::Kind, bool, bool, bool) @ 0x8d47dd0 in /usr/bin/clickhouse\r\n24. DB::InterpreterDropQuery::execute() @ 0x8d49e3e in /usr/bin/clickhouse\r\n25. ? @ 0x8f2f50a in /usr/bin/clickhouse\r\n26. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0x8f32b06 in /usr/bin/clickhouse\r\n27. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x5084816 in /usr/bin/clickhouse\r\n28. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) @ 0x5087f03 in /usr/bin/clickhouse\r\n29. Poco::Net::HTTPServerConnection::run() @ 0x9e0480c in /usr/bin/clickhouse\r\n30. Poco::Net::TCPServerConnection::start() @ 0x9e01297 in /usr/bin/clickhouse\r\n31. Poco::Net::TCPServerDispatcher::run() @ 0x9e0168d in /usr/bin/clickhouse\r\n (version 20.2.1.2442 (official build))\r\n```",
  "created_at": "2020-07-09T18:55:46Z",
  "modified_files": [
    "src/Functions/array/arrayFill.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01376_array_fill_empty.reference",
    "b/tests/queries/0_stateless/01376_array_fill_empty.sql"
  ]
}