diff --git a/src/Storages/System/IStorageSystemOneBlock.h b/src/Storages/System/IStorageSystemOneBlock.h
index 36e92d5a1f42..fdc966130ad2 100644
--- a/src/Storages/System/IStorageSystemOneBlock.h
+++ b/src/Storages/System/IStorageSystemOneBlock.h
@@ -12,7 +12,16 @@ namespace DB
 class Context;
 
 
-/** Base class for system tables whose all columns have String type.
+/** IStorageSystemOneBlock is base class for system tables whose all columns can be synchronously fetched.
+  *
+  * Client class need to provide static method static NamesAndTypesList getNamesAndTypes() that will return list of column names and
+  * their types. IStorageSystemOneBlock during read will create result columns in same order as result of getNamesAndTypes
+  * and pass it with fillData method.
+  *
+  * Client also must override fillData and fill result columns.
+  *
+  * If subclass want to support virtual columns, it should override getVirtuals method of IStorage interface.
+  * IStorageSystemOneBlock will add virtuals columns at the end of result columns of fillData method.
   */
 template <typename Self>
 class IStorageSystemOneBlock : public IStorage
@@ -41,9 +50,10 @@ class IStorageSystemOneBlock : public IStorage
         size_t /*max_block_size*/,
         unsigned /*num_streams*/) override
     {
-        metadata_snapshot->check(column_names, getVirtuals(), getStorageID());
+        auto virtuals_names_and_types = getVirtuals();
+        metadata_snapshot->check(column_names, virtuals_names_and_types, getStorageID());
 
-        Block sample_block = metadata_snapshot->getSampleBlock();
+        Block sample_block = metadata_snapshot->getSampleBlockWithVirtuals(virtuals_names_and_types);
         MutableColumns res_columns = sample_block.cloneEmptyColumns();
         fillData(res_columns, context, query_info);
 
diff --git a/src/Storages/System/StorageSystemDictionaries.cpp b/src/Storages/System/StorageSystemDictionaries.cpp
index a362e6a44e36..c76dba9df583 100644
--- a/src/Storages/System/StorageSystemDictionaries.cpp
+++ b/src/Storages/System/StorageSystemDictionaries.cpp
@@ -50,6 +50,13 @@ NamesAndTypesList StorageSystemDictionaries::getNamesAndTypes()
     };
 }
 
+NamesAndTypesList StorageSystemDictionaries::getVirtuals() const
+{
+    return {
+        {"key", std::make_shared<DataTypeString>()}
+    };
+}
+
 void StorageSystemDictionaries::fillData(MutableColumns & res_columns, ContextPtr context, const SelectQueryInfo & /*query_info*/) const
 {
     const auto access = context->getAccess();
@@ -128,6 +135,9 @@ void StorageSystemDictionaries::fillData(MutableColumns & res_columns, ContextPt
         else
             res_columns[i++]->insertDefault();
 
+        /// Start fill virtual columns
+
+        res_columns[i++]->insert(dictionary_structure.getKeyDescription());
     }
 }
 
diff --git a/src/Storages/System/StorageSystemDictionaries.h b/src/Storages/System/StorageSystemDictionaries.h
index 63b33adaaffd..aa65a9461278 100644
--- a/src/Storages/System/StorageSystemDictionaries.h
+++ b/src/Storages/System/StorageSystemDictionaries.h
@@ -18,6 +18,8 @@ class StorageSystemDictionaries final : public ext::shared_ptr_helper<StorageSys
 
     static NamesAndTypesList getNamesAndTypes();
 
+    NamesAndTypesList getVirtuals() const override;
+
 protected:
     using IStorageSystemOneBlock::IStorageSystemOneBlock;
 
