{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23375,
  "instance_id": "ClickHouse__ClickHouse-23375",
  "issue_numbers": [
    "22379"
  ],
  "base_commit": "70c89eeff6d626293fe285503064f7045be32cb2",
  "patch": "diff --git a/src/Interpreters/ExpressionAnalyzer.cpp b/src/Interpreters/ExpressionAnalyzer.cpp\nindex 0a281436183e..1fa0f4eab7c6 100644\n--- a/src/Interpreters/ExpressionAnalyzer.cpp\n+++ b/src/Interpreters/ExpressionAnalyzer.cpp\n@@ -1510,7 +1510,8 @@ ExpressionAnalysisResult::ExpressionAnalysisResult(\n \n         optimize_read_in_order =\n             settings.optimize_read_in_order\n-            && storage && query.orderBy()\n+            && storage\n+            && query.orderBy()\n             && !query_analyzer.hasAggregation()\n             && !query_analyzer.hasWindow()\n             && !query.final()\ndiff --git a/src/Storages/ReadInOrderOptimizer.cpp b/src/Storages/ReadInOrderOptimizer.cpp\nindex 5f2b5f4db962..3bb7034b5884 100644\n--- a/src/Storages/ReadInOrderOptimizer.cpp\n+++ b/src/Storages/ReadInOrderOptimizer.cpp\n@@ -44,7 +44,7 @@ InputOrderInfoPtr ReadInOrderOptimizer::getInputOrder(const StorageMetadataPtr &\n     int read_direction = required_sort_description.at(0).direction;\n \n     size_t prefix_size = std::min(required_sort_description.size(), sorting_key_columns.size());\n-    auto aliase_columns = metadata_snapshot->getColumns().getAliases();\n+    auto aliased_columns = metadata_snapshot->getColumns().getAliases();\n \n     for (size_t i = 0; i < prefix_size; ++i)\n     {\n@@ -55,13 +55,18 @@ InputOrderInfoPtr ReadInOrderOptimizer::getInputOrder(const StorageMetadataPtr &\n         ///  or in some simple cases when order key element is wrapped into monotonic function.\n         auto apply_order_judge = [&] (const ExpressionActions::Actions & actions, const String & sort_column)\n         {\n+            /// If required order depend on collation, it cannot be matched with primary key order.\n+            /// Because primary keys cannot have collations.\n+            if (required_sort_description[i].collator)\n+                return false;\n+\n             int current_direction = required_sort_description[i].direction;\n-            /// For the path:  order by (sort_column, ...)\n+            /// For the path: order by (sort_column, ...)\n             if (sort_column == sorting_key_columns[i] && current_direction == read_direction)\n             {\n                 return true;\n             }\n-            /// For the path:  order by (function(sort_column), ...)\n+            /// For the path: order by (function(sort_column), ...)\n             /// Allow only one simple monotonic functions with one argument\n             /// Why not allow multi monotonic functions?\n             else\n@@ -125,7 +130,7 @@ InputOrderInfoPtr ReadInOrderOptimizer::getInputOrder(const StorageMetadataPtr &\n         /// currently we only support alias column without any function wrapper\n         /// ie: `order by aliased_column` can have this optimization, but `order by function(aliased_column)` can not.\n         /// This suits most cases.\n-        if (context->getSettingsRef().optimize_respect_aliases && aliase_columns.contains(required_sort_description[i].column_name))\n+        if (context->getSettingsRef().optimize_respect_aliases && aliased_columns.contains(required_sort_description[i].column_name))\n         {\n             auto column_expr = metadata_snapshot->getColumns().get(required_sort_description[i].column_name).default_desc.expression->clone();\n             replaceAliasColumnsInQuery(column_expr, metadata_snapshot->getColumns(), forbidden_columns, context);\n",
  "test_patch": "diff --git a/docker/test/fasttest/run.sh b/docker/test/fasttest/run.sh\nindex 8d292e34eb3e..a7cc398e5c90 100755\n--- a/docker/test/fasttest/run.sh\n+++ b/docker/test/fasttest/run.sh\n@@ -308,10 +308,8 @@ function run_tests\n         01354_order_by_tuple_collate_const\n         01355_ilike\n         01411_bayesian_ab_testing\n-        01532_collate_in_low_cardinality\n-        01533_collate_in_nullable\n-        01542_collate_in_array\n-        01543_collate_in_tuple\n+        collate\n+        collation\n         _orc_\n         arrow\n         avro\ndiff --git a/tests/queries/0_stateless/01833_test_collation_alvarotuso.reference b/tests/queries/0_stateless/01833_test_collation_alvarotuso.reference\nnew file mode 100644\nindex 000000000000..c55134e07d3e\n--- /dev/null\n+++ b/tests/queries/0_stateless/01833_test_collation_alvarotuso.reference\n@@ -0,0 +1,6 @@\n+a\ta\n+A\tA\n+b\tb\n+B\tB\n+c\tc\n+C\tC\ndiff --git a/tests/queries/0_stateless/01833_test_collation_alvarotuso.sql b/tests/queries/0_stateless/01833_test_collation_alvarotuso.sql\nnew file mode 100644\nindex 000000000000..654227317112\n--- /dev/null\n+++ b/tests/queries/0_stateless/01833_test_collation_alvarotuso.sql\n@@ -0,0 +1,21 @@\n+DROP TABLE IF EXISTS test_collation;\n+\n+CREATE TABLE test_collation\n+(\n+    `v` String,\n+    `v2` String\n+)\n+ENGINE = MergeTree\n+ORDER BY v\n+SETTINGS index_granularity = 8192;\n+\n+insert into test_collation values ('A', 'A');\n+insert into test_collation values ('B', 'B');\n+insert into test_collation values ('C', 'C');\n+insert into test_collation values ('a', 'a');\n+insert into test_collation values ('b', 'b');\n+insert into test_collation values ('c', 'c');\n+\n+SELECT * FROM test_collation ORDER BY v ASC COLLATE 'en';\n+\n+DROP TABLE test_collation;\ndiff --git a/tests/queries/0_stateless/arcadia_skip_list.txt b/tests/queries/0_stateless/arcadia_skip_list.txt\nindex f435c00a9898..f7068c16edd0 100644\n--- a/tests/queries/0_stateless/arcadia_skip_list.txt\n+++ b/tests/queries/0_stateless/arcadia_skip_list.txt\n@@ -231,3 +231,4 @@\n 01801_distinct_group_by_shard\n 01804_dictionary_decimal256_type\n 01801_s3_distributed\n+01833_test_collation_alvarotuso\n",
  "problem_statement": "ORDER BY column_name COLLATE does not work for primary keys\n(you don't have to strictly follow this form)\r\n\r\n**Describe the bug**\r\nWhen using `ORDER BY column_name COLLATE 'en'`, `COLLATE` is ignored if `column_name` is the primary key\r\n \r\n**How to reproduce**\r\n* version 21.1.2\r\n* `CREATE TABLE` statements for all tables involved:\r\n```\r\nCREATE TABLE test.test_collation\r\n(\r\n    `v` String,\r\n    `v2` String\r\n)\r\nENGINE = MergeTree\r\nORDER BY v\r\nSETTINGS index_granularity = 8192\r\n```\r\n* Sample data:\r\n```\r\ninsert into test.test_collation values ('A', 'A')\r\ninsert into test.test_collation values ('B', 'B')\r\ninsert into test.test_collation values ('C', 'C')\r\ninsert into test.test_collation values ('a', 'a')\r\ninsert into test.test_collation values ('b', 'b')\r\ninsert into test.test_collation values ('c', 'c')\r\n```\r\n* Queries to run that lead to unexpected result\r\nPrimary key\r\n```\r\nSELECT *\r\nFROM test.test_collation\r\nORDER BY v ASC COLLATE 'en'\r\n\r\nQuery id: fa84ae7a-abe7-4886-99cd-eba7ad5d5fc4\r\n\r\n\u250c\u2500v\u2500\u252c\u2500v2\u2500\u2510\r\n\u2502 A \u2502 A  \u2502\r\n\u2502 B \u2502 B  \u2502\r\n\u2502 C \u2502 C  \u2502\r\n\u2502 a \u2502 a  \u2502\r\n\u2502 b \u2502 b  \u2502\r\n\u2502 c \u2502 c  \u2502\r\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\r\n```\r\nSeparate column\r\n```\r\nSELECT *\r\nFROM test.test_collation\r\nORDER BY v2 ASC COLLATE 'en'\r\n\r\nQuery id: 04401f85-3cb2-442c-8c89-e3328d1615cd\r\n\r\n\u250c\u2500v\u2500\u252c\u2500v2\u2500\u2510\r\n\u2502 a \u2502 a  \u2502\r\n\u2502 A \u2502 A  \u2502\r\n\u2502 b \u2502 b  \u2502\r\n\u2502 B \u2502 B  \u2502\r\n\u2502 c \u2502 c  \u2502\r\n\u2502 C \u2502 C  \u2502\r\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n**Expected behavior**\r\nBoth of these queries to return the rows in the same order\r\n\n",
  "hints_text": "optimize_read_in_order? \n@filimonov that seems to fix it:\r\n```\r\nSELECT *\r\nFROM test.test_collation\r\nORDER BY v ASC COLLATE 'en'\r\nSETTINGS optimize_read_in_order = 0\r\n\r\nQuery id: 7291aa7d-9365-4069-b847-b8fe9223f501\r\n\r\n\u250c\u2500v\u2500\u252c\u2500v2\u2500\u2510\r\n\u2502 a \u2502 a  \u2502\r\n\u2502 A \u2502 A  \u2502\r\n\u2502 b \u2502 b  \u2502\r\n\u2502 B \u2502 B  \u2502\r\n\u2502 c \u2502 c  \u2502\r\n\u2502 C \u2502 C  \u2502\r\n\u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\r\n\r\n6 rows in set. Elapsed: 0.003 sec. \r\n```\r\nWould it make sense to add that to the `COLLATE` docs? \r\nThis does make sense FWIW: https://clickhouse.tech/docs/en/operations/settings/settings/#optimize_read_in_order",
  "created_at": "2021-04-20T18:23:31Z",
  "modified_files": [
    "src/Interpreters/ExpressionAnalyzer.cpp",
    "src/Storages/ReadInOrderOptimizer.cpp"
  ],
  "modified_test_files": [
    "docker/test/fasttest/run.sh",
    "b/tests/queries/0_stateless/01833_test_collation_alvarotuso.reference",
    "b/tests/queries/0_stateless/01833_test_collation_alvarotuso.sql",
    "tests/queries/0_stateless/arcadia_skip_list.txt"
  ]
}