diff --git a/tests/queries/0_stateless/01655_plan_optimizations.reference b/tests/queries/0_stateless/01655_plan_optimizations.reference
index f870a52284c7..48d99647b434 100644
--- a/tests/queries/0_stateless/01655_plan_optimizations.reference
+++ b/tests/queries/0_stateless/01655_plan_optimizations.reference
@@ -53,7 +53,7 @@ Filter column: notEquals(y, 0)
 9	10
 > one condition of filter should be pushed down after aggregating, other condition is casted
 Filter column
-FUNCTION _CAST(minus(s, 4) :: 1, UInt8 :: 3) -> and(notEquals(y, 0), minus(s, 4))
+FUNCTION and(minus(s, 4) :: 1, 1 :: 3) -> and(notEquals(y, 0), minus(s, 4)) UInt8 : 2
 Aggregating
 Filter column: notEquals(y, 0)
 0	1
diff --git a/tests/queries/0_stateless/01655_plan_optimizations.sh b/tests/queries/0_stateless/01655_plan_optimizations.sh
index aaecdc390cb1..ec856c9bf270 100755
--- a/tests/queries/0_stateless/01655_plan_optimizations.sh
+++ b/tests/queries/0_stateless/01655_plan_optimizations.sh
@@ -56,7 +56,7 @@ $CLICKHOUSE_CLIENT -q "
         select sum(x) as s, y from (select number as x, number + 1 as y from numbers(10)) group by y
     ) where y != 0 and s - 4
     settings enable_optimize_predicate_expression=0" |
-    grep -o "Aggregating\|Filter column\|Filter column: notEquals(y, 0)\|FUNCTION _CAST(minus(s, 4) :: 1, UInt8 :: 3) -> and(notEquals(y, 0), minus(s, 4))"
+    grep -o "Aggregating\|Filter column\|Filter column: notEquals(y, 0)\|FUNCTION and(minus(s, 4) :: 1, 1 :: 3) -> and(notEquals(y, 0), minus(s, 4)) UInt8 : 2"
 $CLICKHOUSE_CLIENT -q "
     select s, y from (
         select sum(x) as s, y from (select number as x, number + 1 as y from numbers(10)) group by y
diff --git a/tests/queries/0_stateless/02568_and_consistency.reference b/tests/queries/0_stateless/02568_and_consistency.reference
new file mode 100644
index 000000000000..07a8041d0ee2
--- /dev/null
+++ b/tests/queries/0_stateless/02568_and_consistency.reference
@@ -0,0 +1,5 @@
+=
+1554690688
+=
+1554690688
+=
diff --git a/tests/queries/0_stateless/02568_and_consistency.sql b/tests/queries/0_stateless/02568_and_consistency.sql
new file mode 100644
index 000000000000..4e76da784278
--- /dev/null
+++ b/tests/queries/0_stateless/02568_and_consistency.sql
@@ -0,0 +1,42 @@
+DROP TABLE IF EXISTS t1;
+CREATE TABLE t1 (c0 Int32, PRIMARY KEY (c0)) ENGINE=MergeTree;
+INSERT INTO t1 VALUES (1554690688);
+
+select '=';
+
+SELECT MIN(t1.c0)
+FROM t1
+GROUP BY
+    (-sign(cos(t1.c0))) * (-max2(t1.c0, t1.c0 / t1.c0)),
+    t1.c0 * t1.c0,
+    sign(-exp(-t1.c0))
+HAVING -(-(MIN(t1.c0) + MIN(t1.c0))) AND (pow('{b' > '-657301241', log(-1004522121)) IS NOT NULL)
+UNION ALL
+SELECT MIN(t1.c0)
+FROM t1
+GROUP BY
+    (-sign(cos(t1.c0))) * (-max2(t1.c0, t1.c0 / t1.c0)),
+    t1.c0 * t1.c0,
+    sign(-exp(-t1.c0))
+HAVING NOT (-(-(MIN(t1.c0) + MIN(t1.c0))) AND (pow('{b' > '-657301241', log(-1004522121)) IS NOT NULL))
+UNION ALL
+SELECT MIN(t1.c0)
+FROM t1
+GROUP BY
+    (-sign(cos(t1.c0))) * (-max2(t1.c0, t1.c0 / t1.c0)),
+    t1.c0 * t1.c0,
+    sign(-exp(-t1.c0))
+HAVING (-(-(MIN(t1.c0) + MIN(t1.c0))) AND (pow('{b' > '-657301241', log(-1004522121)) IS NOT NULL)) IS NULL
+SETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0;
+
+select '=';
+
+SELECT MIN(t1.c0)
+FROM t1
+GROUP BY t1.c0
+HAVING and(MIN(t1.c0) + MIN(t1.c0), 1)
+SETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0;
+
+select '=';
+
+DROP TABLE IF EXISTS t1;
