diff --git a/tests/queries/0_stateless/02494_query_cache_eligible_queries.sql b/tests/queries/0_stateless/02494_query_cache_eligible_queries.sql
index 5c45ee8aedd4..f7ddb8f8bda3 100644
--- a/tests/queries/0_stateless/02494_query_cache_eligible_queries.sql
+++ b/tests/queries/0_stateless/02494_query_cache_eligible_queries.sql
@@ -7,6 +7,7 @@ DROP TABLE IF EXISTS eligible_test2;
 
 -- enable query cache session-wide but also force it individually in each of below statements
 SET use_query_cache = true;
+SET query_cache_system_table_handling = 'save';
 
 -- check that SELECT statements create entries in the query cache ...
 SELECT 1 SETTINGS use_query_cache = true;
diff --git a/tests/queries/0_stateless/02494_query_cache_explain.sql b/tests/queries/0_stateless/02494_query_cache_explain.sql
index d12938181c2e..bf376b47fdb0 100644
--- a/tests/queries/0_stateless/02494_query_cache_explain.sql
+++ b/tests/queries/0_stateless/02494_query_cache_explain.sql
@@ -2,6 +2,7 @@
 -- Tag no-parallel: Messes with internal cache
 
 SET allow_experimental_analyzer = 1;
+SET query_cache_system_table_handling = 'save';
 
 SYSTEM DROP QUERY CACHE;
 
diff --git a/tests/queries/0_stateless/02494_query_cache_sparse_columns.sql b/tests/queries/0_stateless/02494_query_cache_sparse_columns.sql
index 4344d139d60b..6266996ac2eb 100644
--- a/tests/queries/0_stateless/02494_query_cache_sparse_columns.sql
+++ b/tests/queries/0_stateless/02494_query_cache_sparse_columns.sql
@@ -12,11 +12,10 @@ SYSTEM STOP MERGES t_cache_sparse;
 INSERT INTO t_cache_sparse SELECT number, number FROM numbers(10000);
 INSERT INTO t_cache_sparse SELECT number, 0 FROM numbers(10000);
 
-SET use_query_cache = 1;
 SET max_threads = 1;
 
-SELECT v FROM t_cache_sparse FORMAT Null;
-SELECT v FROM t_cache_sparse FORMAT Null;
+SELECT v FROM t_cache_sparse SETTINGS use_query_cache = 1, max_threads = 1 FORMAT Null;
+SELECT v FROM t_cache_sparse SETTINGS use_query_cache = 1, max_threads = 1 FORMAT Null;
 SELECT count() FROM system.query_cache WHERE query LIKE 'SELECT v FROM t_cache_sparse%';
 
 DROP TABLE t_cache_sparse;
diff --git a/tests/queries/0_stateless/02494_query_cache_system_tables.reference b/tests/queries/0_stateless/02494_query_cache_system_tables.reference
new file mode 100644
index 000000000000..e41e365766e5
--- /dev/null
+++ b/tests/queries/0_stateless/02494_query_cache_system_tables.reference
@@ -0,0 +1,13 @@
+The Default for query_cache_system_table_handling is = throw
+0
+Check behavior of query_cache_system_table_handling = throw
+0
+Check behavior of query_cache_system_table_handling = save
+0
+1
+Check behavior of query_cache_system_table_handling = ignore
+0
+0
+Other tests
+0
+0
diff --git a/tests/queries/0_stateless/02494_query_cache_system_tables.sql b/tests/queries/0_stateless/02494_query_cache_system_tables.sql
new file mode 100644
index 000000000000..7c9f01c4e91f
--- /dev/null
+++ b/tests/queries/0_stateless/02494_query_cache_system_tables.sql
@@ -0,0 +1,64 @@
+-- Tags: no-parallel
+-- Tag no-parallel: Messes with internal cache
+
+SYSTEM DROP QUERY CACHE;
+
+SELECT 'The Default for query_cache_system_table_handling is = throw';
+-- Test that the query cache rejects queries that involve system tables.
+SELECT * FROM system.one SETTINGS use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_SYSTEM_TABLE }
+SELECT count(*) FROM system.query_cache;
+
+SYSTEM DROP QUERY CACHE;
+
+SELECT 'Check behavior of query_cache_system_table_handling = throw';
+-- Test that the query cache rejects queries that involve system tables.
+SELECT * FROM system.one SETTINGS use_query_cache = 1, query_cache_system_table_handling = 'throw'; -- { serverError QUERY_CACHE_USED_WITH_SYSTEM_TABLE }
+SELECT count(*) FROM system.query_cache;
+
+SYSTEM DROP QUERY CACHE;
+
+SELECT 'Check behavior of query_cache_system_table_handling = save';
+-- Test that the query cache saves the result of queries that involve system tables.
+SELECT * FROM system.one SETTINGS use_query_cache = 1, query_cache_system_table_handling = 'save';
+SELECT count(*) FROM system.query_cache;
+
+SYSTEM DROP QUERY CACHE;
+
+SELECT 'Check behavior of query_cache_system_table_handling = ignore';
+-- Test that the query cache ignores the result of queries that involve system tables.
+SELECT * FROM system.one SETTINGS use_query_cache = 1, query_cache_system_table_handling = 'ignore';
+SELECT count(*) FROM system.query_cache;
+
+SYSTEM DROP QUERY CACHE;
+
+SELECT 'Other tests';
+
+-- Edge case which doesn't work well due to conceptual reasons (QueryCache is AST-based), test it anyways to have it documented.
+USE system;
+SELECT * FROM one SETTINGS use_query_cache = 1; -- doesn't throw but should
+
+-- This query uses system.zero internally. Since the query cache works at AST level it does not "see' system.zero and must not complain.
+SELECT * SETTINGS use_query_cache = 1;
+
+-- information_schema is also treated as a system table
+SELECT * FROM information_schema.tables SETTINGS use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_SYSTEM_TABLE }
+SELECT * FROM INFORMATION_SCHEMA.TABLES SETTINGS use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_SYSTEM_TABLE }
+
+-- System tables can be "hidden" inside e.g. table functions
+SELECT * FROM clusterAllReplicas('test_shard_localhost', system.one) SETTINGS use_query_cache = 1; -- {serverError QUERY_CACHE_USED_WITH_SYSTEM_TABLE }
+SELECT * FROM clusterAllReplicas('test_shard_localhost', 'system.one') SETTINGS use_query_cache = 1; -- {serverError QUERY_CACHE_USED_WITH_SYSTEM_TABLE }
+
+-- Criminal edge case that a user creates a table named "system". The query cache must not reject queries against it.
+DROP TABLE IF EXISTS system;
+CREATE TABLE system (c UInt64) ENGINE = Memory;
+SElECT * FROM system SETTINGS use_query_cache = 1;
+DROP TABLE system;
+
+-- But queries against system.system are rejected.
+DROP TABLE IF EXISTS system.system;
+CREATE TABLE system.system (c UInt64) ENGINE = Memory;
+SElECT * FROM system.system SETTINGS use_query_cache = 1; -- { serverError QUERY_CACHE_USED_WITH_SYSTEM_TABLE }
+DROP TABLE system.system;
+
+-- Cleanup
+SYSTEM DROP QUERY CACHE;
