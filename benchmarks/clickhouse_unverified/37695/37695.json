{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 37695,
  "instance_id": "ClickHouse__ClickHouse-37695",
  "issue_numbers": [
    "37586",
    "29892"
  ],
  "base_commit": "b41fe00f31c81e777cf67f726b955d817b1dcb85",
  "patch": "diff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex c241955b268f..0fad546d0ecb 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -458,6 +458,7 @@ static constexpr UInt64 operator\"\"_GiB(unsigned long long value)\n     M(Bool, optimize_duplicate_order_by_and_distinct, true, \"Remove duplicate ORDER BY and DISTINCT if it's possible\", 0) \\\n     M(Bool, optimize_redundant_functions_in_order_by, true, \"Remove functions from ORDER BY if its argument is also in ORDER BY\", 0) \\\n     M(Bool, optimize_if_chain_to_multiif, false, \"Replace if(cond1, then1, if(cond2, ...)) chains to multiIf. Currently it's not beneficial for numeric types.\", 0) \\\n+    M(Bool, optimize_multiif_to_if, true, \"Replace 'multiIf' with only one condition to 'if'.\", 0) \\\n     M(Bool, optimize_if_transform_strings_to_enum, false, \"Replaces string-type arguments in If and Transform to enum. Disabled by default cause it could make inconsistent change in distributed query that would lead to its fail.\", 0) \\\n     M(Bool, optimize_monotonous_functions_in_order_by, true, \"Replace monotonous function with its argument in ORDER BY\", 0) \\\n     M(Bool, optimize_functions_to_subcolumns, false, \"Transform functions to subcolumns, if possible, to reduce amount of read data. E.g. 'length(arr)' -> 'arr.size0', 'col IS NULL' -> 'col.null' \", 0) \\\ndiff --git a/src/Interpreters/OptimizeIfChains.h b/src/Interpreters/OptimizeIfChains.h\nindex 5dbdb9bee500..79a4f497ff85 100644\n--- a/src/Interpreters/OptimizeIfChains.h\n+++ b/src/Interpreters/OptimizeIfChains.h\n@@ -1,6 +1,8 @@\n #pragma once\n \n #include <Parsers/IAST.h>\n+#include <Parsers/ASTFunction.h>\n+#include <Interpreters/InDepthNodeVisitor.h>\n \n namespace DB\n {\n@@ -16,4 +18,22 @@ class OptimizeIfChainsVisitor\n     ASTs ifChain(const ASTPtr & child);\n };\n \n+/// Replaces multiIf with one condition to if,\n+/// because it's more efficient.\n+class OptimizeMultiIfToIfData\n+{\n+public:\n+    using TypeToVisit = ASTFunction;\n+\n+    void visit(ASTFunction & function, ASTPtr &)\n+    {\n+        /// 3 args: condition, then branch, else branch.\n+        if (function.name == \"multiIf\" && (function.arguments && function.arguments->children.size() == 3))\n+            function.name = \"if\";\n+    }\n+};\n+\n+using OptimizeMultiIfToIfMatcher = OneTypeMatcher<OptimizeMultiIfToIfData>;\n+using OptimizeMultiIfToIfVisitor = InDepthNodeVisitor<OptimizeMultiIfToIfMatcher, true>;\n+\n }\ndiff --git a/src/Interpreters/TreeOptimizer.cpp b/src/Interpreters/TreeOptimizer.cpp\nindex 42628fbb9059..cf79cd158e8a 100644\n--- a/src/Interpreters/TreeOptimizer.cpp\n+++ b/src/Interpreters/TreeOptimizer.cpp\n@@ -674,6 +674,12 @@ void optimizeSumIfFunctions(ASTPtr & query)\n     RewriteSumIfFunctionVisitor(data).visit(query);\n }\n \n+void optimizeMultiIfToIf(ASTPtr & query)\n+{\n+    OptimizeMultiIfToIfVisitor::Data data;\n+    OptimizeMultiIfToIfVisitor(data).visit(query);\n+}\n+\n void optimizeInjectiveFunctionsInsideUniq(ASTPtr & query, ContextPtr context)\n {\n     RemoveInjectiveFunctionsVisitor::Data data(context);\n@@ -820,6 +826,9 @@ void TreeOptimizer::apply(ASTPtr & query, TreeRewriterResult & result,\n     if (settings.optimize_rewrite_sum_if_to_count_if)\n         optimizeSumIfFunctions(query);\n \n+    if (settings.optimize_multiif_to_if)\n+        optimizeMultiIfToIf(query);\n+\n     /// Remove injective functions inside uniq\n     if (settings.optimize_injective_functions_inside_uniq)\n         optimizeInjectiveFunctionsInsideUniq(query, context);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01355_if_fixed_string.sql b/tests/queries/0_stateless/01355_if_fixed_string.sql\nindex a0afcc5f1972..0d45b797a2bd 100644\n--- a/tests/queries/0_stateless/01355_if_fixed_string.sql\n+++ b/tests/queries/0_stateless/01355_if_fixed_string.sql\n@@ -1,3 +1,5 @@\n+SET optimize_multiif_to_if = 0;\n+\n SELECT if(number % 2, toFixedString(toString(number), 2), toFixedString(toString(-number), 5)) AS x, toTypeName(x) FROM system.numbers LIMIT 10;\n SELECT if(number % 2, toFixedString(toString(number), 2), toFixedString(toString(-number), 2)) AS x, toTypeName(x) FROM system.numbers LIMIT 10;\n \ndiff --git a/tests/queries/0_stateless/02315_replace_multiif_to_if.reference b/tests/queries/0_stateless/02315_replace_multiif_to_if.reference\nnew file mode 100644\nindex 000000000000..fcc004e14a71\n--- /dev/null\n+++ b/tests/queries/0_stateless/02315_replace_multiif_to_if.reference\n@@ -0,0 +1,4 @@\n+SELECT if(number = 0, NULL, toNullable(number))\n+FROM numbers(10000)\n+SELECT if(number = 0, NULL, toNullable(number))\n+FROM numbers(10000)\ndiff --git a/tests/queries/0_stateless/02315_replace_multiif_to_if.sql b/tests/queries/0_stateless/02315_replace_multiif_to_if.sql\nnew file mode 100644\nindex 000000000000..59433828bbc1\n--- /dev/null\n+++ b/tests/queries/0_stateless/02315_replace_multiif_to_if.sql\n@@ -0,0 +1,2 @@\n+EXPLAIN SYNTAX SELECT multiIf(number = 0, NULL, toNullable(number)) FROM numbers(10000);\n+EXPLAIN SYNTAX SELECT CASE WHEN number = 0 THEN NULL ELSE toNullable(number) END FROM numbers(10000);\n",
  "problem_statement": "Replace `multiIf` to `if` in case of single branch.\n**Describe the situation**\r\n\r\n```\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT yr,\r\n       mo,\r\n       SUM(coffee_hourly_avg) AS coffee_monthly_sum,\r\n       AVG(coffee_hourly_avg) AS coffee_monthly_avg,\r\n       SUM(printer_hourly_avg) AS printer_monthly_sum,\r\n       AVG(printer_hourly_avg) AS printer_monthly_avg,\r\n       SUM(projector_hourly_avg) AS projector_monthly_sum,\r\n       AVG(projector_hourly_avg) AS projector_monthly_avg,\r\n       SUM(vending_hourly_avg) AS vending_monthly_sum,\r\n       AVG(vending_hourly_avg) AS vending_monthly_avg\r\nFROM (\r\n  SELECT dt,\r\n         yr,\r\n         mo,\r\n         hr,\r\n         AVG(coffee) AS coffee_hourly_avg,\r\n         AVG(printer) AS printer_hourly_avg,\r\n         AVG(projector) AS projector_hourly_avg,\r\n         AVG(vending) AS vending_hourly_avg\r\n  FROM (\r\n    SELECT CAST(log_time AS DATE) AS dt,\r\n           EXTRACT(YEAR FROM log_time) AS yr,\r\n           EXTRACT(MONTH FROM log_time) AS mo,\r\n           EXTRACT(HOUR FROM log_time) AS hr,\r\n           CASE WHEN device_name LIKE 'coffee%' THEN event_value END AS coffee,\r\n           CASE WHEN device_name LIKE 'printer%' THEN event_value END AS printer,\r\n           CASE WHEN device_name LIKE 'projector%' THEN event_value END AS projector,\r\n           CASE WHEN device_name LIKE 'vending%' THEN event_value END AS vending\r\n    FROM logs3\r\n    WHERE device_type = 'meter'\r\n  ) AS r\r\n  GROUP BY dt,\r\n           yr,\r\n           mo,\r\n           hr\r\n) AS s\r\nGROUP BY yr,\r\n         mo\r\nORDER BY yr,\r\n         mo;\"\r\n```\r\n\r\n435 ms.\r\n\r\n```\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT yr,\r\n       mo,\r\n       SUM(coffee_hourly_avg) AS coffee_monthly_sum,\r\n       AVG(coffee_hourly_avg) AS coffee_monthly_avg,\r\n       SUM(printer_hourly_avg) AS printer_monthly_sum,\r\n       AVG(printer_hourly_avg) AS printer_monthly_avg,\r\n       SUM(projector_hourly_avg) AS projector_monthly_sum,\r\n       AVG(projector_hourly_avg) AS projector_monthly_avg,\r\n       SUM(vending_hourly_avg) AS vending_monthly_sum,\r\n       AVG(vending_hourly_avg) AS vending_monthly_avg\r\nFROM (\r\n  SELECT dt,\r\n         yr,\r\n         mo,\r\n         hr,\r\n         AVG(coffee) AS coffee_hourly_avg,\r\n         AVG(printer) AS printer_hourly_avg,\r\n         AVG(projector) AS projector_hourly_avg,\r\n         AVG(vending) AS vending_hourly_avg\r\n  FROM (\r\n    SELECT CAST(log_time AS DATE) AS dt,\r\n           EXTRACT(YEAR FROM log_time) AS yr,\r\n           EXTRACT(MONTH FROM log_time) AS mo,\r\n           EXTRACT(HOUR FROM log_time) AS hr,\r\n           device_name LIKE 'coffee%' ? event_value : NULL AS coffee,\r\n           device_name LIKE 'printer%' ? event_value : NULL AS printer,\r\n           device_name LIKE 'projector%' ? event_value : NULL AS projector,\r\n           device_name LIKE 'vending%' ? event_value : NULL AS vending\r\n    FROM logs3\r\n    WHERE device_type = 'meter'\r\n  ) AS r\r\n  GROUP BY dt,\r\n           yr,\r\n           mo,\r\n           hr\r\n) AS s\r\nGROUP BY yr,\r\n         mo\r\nORDER BY yr,\r\n         mo;\r\n\"\r\n```\r\n\r\n303 ms.\r\n\r\n1.44 times faster.\r\n\r\n**How to reproduce**\r\n\r\n```\r\nwget https://clickhouse-datasets.s3.yandex.net/mgbench{1..3}.csv.xz\r\ncurl https://clickhouse.com/ | sh\r\nsudo ./clickhouse install\r\nsudo clickhouse start\r\n\r\nclickhouse-client -n --query \"\r\n\r\nCREATE DATABASE mgbench;\r\n\r\nCREATE TABLE mgbench.logs1 (\r\n  log_time      DateTime,\r\n  machine_name  LowCardinality(String),\r\n  machine_group LowCardinality(String),\r\n  cpu_idle      Nullable(Float32),\r\n  cpu_nice      Nullable(Float32),\r\n  cpu_system    Nullable(Float32),\r\n  cpu_user      Nullable(Float32),\r\n  cpu_wio       Nullable(Float32),\r\n  disk_free     Nullable(Float32),\r\n  disk_total    Nullable(Float32),\r\n  part_max_used Nullable(Float32),\r\n  load_fifteen  Nullable(Float32),\r\n  load_five     Nullable(Float32),\r\n  load_one      Nullable(Float32),\r\n  mem_buffers   Nullable(Float32),\r\n  mem_cached    Nullable(Float32),\r\n  mem_free      Nullable(Float32),\r\n  mem_shared    Nullable(Float32),\r\n  swap_free     Nullable(Float32),\r\n  bytes_in      Nullable(Float32),\r\n  bytes_out     Nullable(Float32)\r\n)\r\nENGINE = Memory;\r\n\r\n\r\nCREATE TABLE mgbench.logs2 (\r\n  log_time    DateTime,\r\n  client_ip   IPv4,\r\n  request     String,\r\n  status_code UInt16,\r\n  object_size UInt64\r\n)\r\nENGINE = Memory;\r\n\r\n\r\nCREATE TABLE mgbench.logs3 (\r\n  log_time     DateTime64,\r\n  device_id    FixedString(15),\r\n  device_name  LowCardinality(String),\r\n  device_type  LowCardinality(String),\r\n  device_floor UInt8,\r\n  event_type   LowCardinality(String),\r\n  event_unit   FixedString(1),\r\n  event_value  Nullable(Float32)\r\n)\r\nENGINE = Memory;\r\n\"\r\n\r\nxz -d mgbench*.csv.xz\r\n\r\ntime clickhouse-client --query \"INSERT INTO mgbench.logs1 FORMAT CSVWithNames\" < mgbench1.csv\r\ntime clickhouse-client --query \"INSERT INTO mgbench.logs2 FORMAT CSVWithNames\" < mgbench2.csv\r\ntime clickhouse-client --query \"INSERT INTO mgbench.logs3 FORMAT CSVWithNames\" < mgbench3.csv\r\n\r\n\r\necho \"Q1.1: What is the CPU/network utilization for each web server since midnight?\"\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT machine_name,\r\n       MIN(cpu) AS cpu_min,\r\n       MAX(cpu) AS cpu_max,\r\n       AVG(cpu) AS cpu_avg,\r\n       MIN(net_in) AS net_in_min,\r\n       MAX(net_in) AS net_in_max,\r\n       AVG(net_in) AS net_in_avg,\r\n       MIN(net_out) AS net_out_min,\r\n       MAX(net_out) AS net_out_max,\r\n       AVG(net_out) AS net_out_avg\r\nFROM (\r\n  SELECT machine_name,\r\n         COALESCE(cpu_user, 0.0) AS cpu,\r\n         COALESCE(bytes_in, 0.0) AS net_in,\r\n         COALESCE(bytes_out, 0.0) AS net_out\r\n  FROM logs1\r\n  WHERE machine_name IN ('anansi','aragog','urd')\r\n    AND log_time >= TIMESTAMP '2017-01-11 00:00:00'\r\n) AS r\r\nGROUP BY machine_name;\"\r\n\r\n\r\necho \"Q1.2: Which computer lab machines have been offline in the past day?\"\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT machine_name,\r\n       log_time\r\nFROM logs1\r\nWHERE (machine_name LIKE 'cslab%' OR\r\n       machine_name LIKE 'mslab%')\r\n  AND load_one IS NULL\r\n  AND log_time >= TIMESTAMP '2017-01-10 00:00:00'\r\nORDER BY machine_name,\r\n         log_time;\"\r\n\r\n\r\necho \"Q1.3: What are the hourly average metrics during the past 10 days for a specific workstation?\"\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT dt,\r\n       hr,\r\n       AVG(load_fifteen) AS load_fifteen_avg,\r\n       AVG(load_five) AS load_five_avg,\r\n       AVG(load_one) AS load_one_avg,\r\n       AVG(mem_free) AS mem_free_avg,\r\n       AVG(swap_free) AS swap_free_avg\r\nFROM (\r\n  SELECT CAST(log_time AS DATE) AS dt,\r\n         EXTRACT(HOUR FROM log_time) AS hr,\r\n         load_fifteen,\r\n         load_five,\r\n         load_one,\r\n         mem_free,\r\n         swap_free\r\n  FROM logs1\r\n  WHERE machine_name = 'babbage'\r\n    AND load_fifteen IS NOT NULL\r\n    AND load_five IS NOT NULL\r\n    AND load_one IS NOT NULL\r\n    AND mem_free IS NOT NULL\r\n    AND swap_free IS NOT NULL\r\n    AND log_time >= TIMESTAMP '2017-01-01 00:00:00'\r\n) AS r\r\nGROUP BY dt,\r\n         hr\r\nORDER BY dt,\r\n         hr;\"\r\n\r\n\r\necho \"Q1.4: Over a 1-month period, how often was each server blocked on disk I/O?\"\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT machine_name,\r\n       COUNT(*) AS spikes\r\nFROM logs1\r\nWHERE machine_group = 'Servers'\r\n  AND cpu_wio > 0.99\r\n  AND log_time >= TIMESTAMP '2016-12-01 00:00:00'\r\n  AND log_time < TIMESTAMP '2017-01-01 00:00:00'\r\nGROUP BY machine_name\r\nORDER BY spikes DESC\r\nLIMIT 10;\"\r\n\r\n\r\necho \"Q1.5: Which externally reachable VMs have run low on memory?\"\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT machine_name,\r\n       dt,\r\n       MIN(mem_free) AS mem_free_min\r\nFROM (\r\n  SELECT machine_name,\r\n         CAST(log_time AS DATE) AS dt,\r\n         mem_free\r\n  FROM logs1\r\n  WHERE machine_group = 'DMZ'\r\n    AND mem_free IS NOT NULL\r\n) AS r\r\nGROUP BY machine_name,\r\n         dt\r\nHAVING MIN(mem_free) < 10000\r\nORDER BY machine_name,\r\n         dt;\"\r\n\r\n\r\necho \"Q1.6: What is the total hourly network traffic across all file servers?\"\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT dt,\r\n       hr,\r\n       SUM(net_in) AS net_in_sum,\r\n       SUM(net_out) AS net_out_sum,\r\n       SUM(net_in) + SUM(net_out) AS both_sum\r\nFROM (\r\n  SELECT CAST(log_time AS DATE) AS dt,\r\n         EXTRACT(HOUR FROM log_time) AS hr,\r\n         COALESCE(bytes_in, 0.0) / 1000000000.0 AS net_in,\r\n         COALESCE(bytes_out, 0.0) / 1000000000.0 AS net_out\r\n  FROM logs1\r\n  WHERE machine_name IN ('allsorts','andes','bigred','blackjack','bonbon',\r\n      'cadbury','chiclets','cotton','crows','dove','fireball','hearts','huey',\r\n      'lindt','milkduds','milkyway','mnm','necco','nerds','orbit','peeps',\r\n      'poprocks','razzles','runts','smarties','smuggler','spree','stride',\r\n      'tootsie','trident','wrigley','york')\r\n) AS r\r\nGROUP BY dt,\r\n         hr\r\nORDER BY both_sum DESC\r\nLIMIT 10;\"\r\n\r\n\r\necho \"Q2.1: Which requests have caused server errors within the past 2 weeks?\"\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT *\r\nFROM logs2\r\nWHERE status_code >= 500\r\n  AND log_time >= TIMESTAMP '2012-12-18 00:00:00'\r\nORDER BY log_time;\"\r\n\r\n\r\necho \"Q2.2: During a specific 2-week period, was the user password file leaked?\"\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT *\r\nFROM logs2\r\nWHERE status_code >= 200\r\n  AND status_code < 300\r\n  AND request LIKE '%/etc/passwd%'\r\n  AND log_time >= TIMESTAMP '2012-05-06 00:00:00'\r\n  AND log_time < TIMESTAMP '2012-05-20 00:00:00';\"\r\n\r\n\r\necho \"Q2.3: What was the average path depth for top-level requests in the past month?\"\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT top_level,\r\n       AVG(LENGTH(request) - LENGTH(REPLACE(request, '/', ''))) AS depth_avg\r\nFROM (\r\n  SELECT SUBSTRING(request FROM 1 FOR len) AS top_level,\r\n         request\r\n  FROM (\r\n    SELECT POSITION(SUBSTRING(request FROM 2), '/') AS len,\r\n           request\r\n    FROM logs2\r\n    WHERE status_code >= 200\r\n      AND status_code < 300\r\n      AND log_time >= TIMESTAMP '2012-12-01 00:00:00'\r\n  ) AS r\r\n  WHERE len > 0\r\n) AS s\r\nWHERE top_level IN ('/about','/courses','/degrees','/events',\r\n                    '/grad','/industry','/news','/people',\r\n                    '/publications','/research','/teaching','/ugrad')\r\nGROUP BY top_level\r\nORDER BY top_level;\"\r\n\r\n\r\necho \"Q2.4: During the last 3 months, which clients have made an excessive number of requests?\"\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT client_ip,\r\n       COUNT(*) AS num_requests\r\nFROM logs2\r\nWHERE log_time >= TIMESTAMP '2012-10-01 00:00:00'\r\nGROUP BY client_ip\r\nHAVING COUNT(*) >= 100000\r\nORDER BY num_requests DESC;\"\r\n\r\n\r\necho \"Q2.5: What are the daily unique visitors?\"\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT dt,\r\n       COUNT(DISTINCT client_ip)\r\nFROM (\r\n  SELECT CAST(log_time AS DATE) AS dt,\r\n         client_ip\r\n  FROM logs2\r\n) AS r\r\nGROUP BY dt\r\nORDER BY dt;\"\r\n\r\n\r\necho \"Q2.6: What are the average and maximum data transfer rates (Gbps)?\"\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT AVG(transfer) / 125000000.0 AS transfer_avg,\r\n       MAX(transfer) / 125000000.0 AS transfer_max\r\nFROM (\r\n  SELECT log_time,\r\n         SUM(object_size) AS transfer\r\n  FROM logs2\r\n  GROUP BY log_time\r\n) AS r;\"\r\n\r\n\r\necho \"Q3.1: Did the indoor temperature reach freezing over the weekend?\"\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT *\r\nFROM logs3\r\nWHERE event_type = 'temperature'\r\n  AND event_value <= 32.0\r\n  AND log_time >= '2019-11-29 17:00:00.000';\"\r\n\r\n\r\necho \"Q3.4: Over the past 6 months, how frequently was each door opened?\"\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nSELECT device_name,\r\n       device_floor,\r\n       COUNT(*) AS ct\r\nFROM logs3\r\nWHERE event_type = 'door_open'\r\n  AND log_time >= '2019-06-01 00:00:00.000'\r\nGROUP BY device_name,\r\n         device_floor\r\nORDER BY ct DESC;\"\r\n\r\n\r\necho \"Q3.5: Where in the building do large temperature variations occur in winter and summer?\"\r\nclickhouse-benchmark --max_threads 32 --iterations 10 --database mgbench --enable_global_with_statement 1 --query \"\r\nWITH temperature AS (\r\n  SELECT dt,\r\n         device_name,\r\n         device_type,\r\n         device_floor\r\n  FROM (\r\n    SELECT dt,\r\n           hr,\r\n           device_name,\r\n           device_type,\r\n           device_floor,\r\n           AVG(event_value) AS temperature_hourly_avg\r\n    FROM (\r\n      SELECT CAST(log_time AS DATE) AS dt,\r\n             EXTRACT(HOUR FROM log_time) AS hr,\r\n             device_name,\r\n             device_type,\r\n             device_floor,\r\n             event_value\r\n      FROM logs3\r\n      WHERE event_type = 'temperature'\r\n    ) AS r\r\n    GROUP BY dt,\r\n             hr,\r\n             device_name,\r\n             device_type,\r\n             device_floor\r\n  ) AS s\r\n  GROUP BY dt,\r\n           device_name,\r\n           device_type,\r\n           device_floor\r\n  HAVING MAX(temperature_hourly_avg) - MIN(temperature_hourly_avg) >= 25.0\r\n)\r\nSELECT DISTINCT device_name,\r\n       device_type,\r\n       device_floor,\r\n       'WINTER'\r\nFROM temperature\r\nWHERE dt >= DATE '2018-12-01'\r\n  AND dt < DATE '2019-03-01'\r\nUNION DISTINCT\r\nSELECT DISTINCT device_name,\r\n       device_type,\r\n       device_floor,\r\n       'SUMMER'\r\nFROM temperature\r\nWHERE dt >= DATE '2019-06-01'\r\n  AND dt < DATE '2019-09-01';\"\r\n```\nmultiIf vs If performance difference with 1 condition\n**Describe the situation**\r\nmultiIf works 10 times slower than If with single condition.\r\n\r\n**How to reproduce**\r\nClickHouse version 21.10\r\n\r\n```\r\n\r\nSELECT count()\r\nFROM numbers_mt(1000000000)\r\nWHERE NOT ignore(multiIf(number = 0, NULL, toNullable(number)))\r\n\r\n\u250c\u2500\u2500\u2500\u2500count()\u2500\u2510\r\n\u2502 1000000000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 10.267 sec. Processed 1.00 billion rows, 8.00 GB (97.41 million rows/s., 779.25 MB/s.)\r\n\r\nSELECT count()\r\nFROM numbers_mt(1000000000)\r\nWHERE NOT ignore(If(number = 0, NULL, toNullable(number)))\r\n\r\n\u250c\u2500\u2500\u2500\u2500count()\u2500\u2510\r\n\u2502 1000000000 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 1.010 sec. Processed 1.00 billion rows, 8.00 GB (990.63 million rows/s., 7.93 GB/s.)\r\n```\r\n\r\n**Expected performance**\r\nThe same performance for multiIf and if.\r\n\n",
  "hints_text": "Related https://github.com/ClickHouse/ClickHouse/issues/29892\nI have same problem! and when I switch if to  \" case when \" function \uff0cit work slower",
  "created_at": "2022-05-31T14:29:53Z",
  "modified_files": [
    "src/Core/Settings.h",
    "src/Interpreters/OptimizeIfChains.h",
    "src/Interpreters/TreeOptimizer.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01355_if_fixed_string.sql",
    "b/tests/queries/0_stateless/02315_replace_multiif_to_if.reference",
    "b/tests/queries/0_stateless/02315_replace_multiif_to_if.sql"
  ]
}