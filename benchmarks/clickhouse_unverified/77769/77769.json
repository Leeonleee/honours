{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 77769,
  "instance_id": "ClickHouse__ClickHouse-77769",
  "issue_numbers": [
    "59988"
  ],
  "base_commit": "3f04ac63dc47d77dbf58f2e16e2291b35217c5a7",
  "patch": "diff --git a/docs/en/operations/query-cache.md b/docs/en/operations/query-cache.md\nindex bfa24f71319f..168c53b1b032 100644\n--- a/docs/en/operations/query-cache.md\n+++ b/docs/en/operations/query-cache.md\n@@ -181,7 +181,8 @@ result blocks. While this behavior is a good default, it can be suppressed using\n \n Also, results of queries with non-deterministic functions are not cached by default. Such functions include\n - functions for accessing dictionaries: [`dictGet()`](/sql-reference/functions/ext-dict-functions#dictget-dictgetordefault-dictgetornull) etc.\n-- [user-defined functions](../sql-reference/statements/create/function.md),\n+- [user-defined functions](../sql-reference/statements/create/function.md) without tag `<deterministic>true</deterministic>` in their XML\n+  definition,\n - functions which return the current date or time: [`now()`](../sql-reference/functions/date-time-functions.md#now),\n   [`today()`](../sql-reference/functions/date-time-functions.md#today),\n   [`yesterday()`](../sql-reference/functions/date-time-functions.md#yesterday) etc.,\ndiff --git a/docs/en/sql-reference/functions/udf.md b/docs/en/sql-reference/functions/udf.md\nindex 27dae1adbf92..35a579d59a2b 100644\n--- a/docs/en/sql-reference/functions/udf.md\n+++ b/docs/en/sql-reference/functions/udf.md\n@@ -39,6 +39,7 @@ A function configuration contains the following settings:\n - `send_chunk_header` - controls whether to send row count before sending a chunk of data to process. Optional. Default value is `false`.\n - `execute_direct` - If `execute_direct` = `1`, then `command` will be searched inside user_scripts folder specified by [user_scripts_path](../../operations/server-configuration-parameters/settings.md#user_scripts_path). Additional script arguments can be specified using whitespace separator. Example: `script_name arg1 arg2`. If `execute_direct` = `0`, `command` is passed as argument for `bin/sh -c`. Default value is `1`. Optional parameter.\n - `lifetime` - the reload interval of a function in seconds. If it is set to `0` then the function is not reloaded. Default value is `0`. Optional parameter.\n+- `deterministic` - if the function is deterministic (returns the same result for the same input). Default value is `false`. Optional parameter.\n \n The command must read arguments from `STDIN` and must output the result to `STDOUT`. The command must process arguments iteratively. That is after processing a chunk of arguments it must wait for the next chunk.\n \n@@ -65,6 +66,7 @@ File `test_function.xml` (`/etc/clickhouse-server/test_function.xml` with defaul\n         <format>TabSeparated</format>\n         <command>cd /; clickhouse-local --input-format TabSeparated --output-format TabSeparated --structure 'x UInt64, y UInt64' --query \"SELECT x + y FROM table\"</command>\n         <execute_direct>0</execute_direct>\n+        <deterministic>true</deterministic>\n     </function>\n </functions>\n ```\ndiff --git a/src/Functions/UserDefined/ExternalUserDefinedExecutableFunctionsLoader.cpp b/src/Functions/UserDefined/ExternalUserDefinedExecutableFunctionsLoader.cpp\nindex fcb6c2e0dcc3..a28e927cde63 100644\n--- a/src/Functions/UserDefined/ExternalUserDefinedExecutableFunctionsLoader.cpp\n+++ b/src/Functions/UserDefined/ExternalUserDefinedExecutableFunctionsLoader.cpp\n@@ -173,6 +173,8 @@ ExternalLoader::LoadableMutablePtr ExternalUserDefinedExecutableFunctionsLoader:\n     if (config.has(key_in_config + \".return_name\"))\n         result_name = config.getString(key_in_config + \".return_name\");\n \n+    bool is_deterministic = config.getBool(key_in_config + \".deterministic\", false);\n+\n     bool send_chunk_header = config.getBool(key_in_config + \".send_chunk_header\", false);\n     size_t command_termination_timeout_seconds = config.getUInt64(key_in_config + \".command_termination_timeout\", 10);\n     size_t command_read_timeout_milliseconds = config.getUInt64(key_in_config + \".command_read_timeout\", 10000);\n@@ -239,6 +241,7 @@ ExternalLoader::LoadableMutablePtr ExternalUserDefinedExecutableFunctionsLoader:\n         .parameters = std::move(parameters),\n         .result_type = std::move(result_type),\n         .result_name = std::move(result_name),\n+        .is_deterministic = is_deterministic\n     };\n \n     ShellCommandSourceCoordinator::Configuration shell_command_coordinator_configration\ndiff --git a/src/Functions/UserDefined/UserDefinedExecutableFunction.h b/src/Functions/UserDefined/UserDefinedExecutableFunction.h\nindex d48be215c7dc..f4eac0f32419 100644\n--- a/src/Functions/UserDefined/UserDefinedExecutableFunction.h\n+++ b/src/Functions/UserDefined/UserDefinedExecutableFunction.h\n@@ -31,6 +31,7 @@ struct UserDefinedExecutableFunctionConfiguration\n     std::vector<UserDefinedExecutableFunctionParameter> parameters;\n     DataTypePtr result_type;\n     String result_name;\n+    bool is_deterministic;\n };\n \n class UserDefinedExecutableFunction final : public IExternalLoadable\ndiff --git a/src/Functions/UserDefined/UserDefinedExecutableFunctionFactory.cpp b/src/Functions/UserDefined/UserDefinedExecutableFunctionFactory.cpp\nindex 53dc0702b833..f125c709ab1d 100644\n--- a/src/Functions/UserDefined/UserDefinedExecutableFunctionFactory.cpp\n+++ b/src/Functions/UserDefined/UserDefinedExecutableFunctionFactory.cpp\n@@ -105,7 +105,7 @@ class UserDefinedFunction final : public IFunction\n \n     bool useDefaultImplementationForConstants() const override { return true; }\n     bool useDefaultImplementationForNulls() const override { return false; }\n-    bool isDeterministic() const override { return false; }\n+    bool isDeterministic() const override { return executable_function->getConfiguration().is_deterministic; }\n     bool isDeterministicInScopeOfQuery() const override { return false; }\n \n     DataTypePtr getReturnTypeImpl(const DataTypes &) const override\n",
  "test_patch": "diff --git a/tests/integration/test_executable_user_defined_function/functions/test_function_config.xml b/tests/integration/test_executable_user_defined_function/functions/test_function_config.xml\nindex 99efd99ab311..620c756ccf7d 100644\n--- a/tests/integration/test_executable_user_defined_function/functions/test_function_config.xml\n+++ b/tests/integration/test_executable_user_defined_function/functions/test_function_config.xml\n@@ -394,4 +394,30 @@\n         <!-- default -->\n         <!-- <check_exit_code>1</check_exit_code> -->\n     </function>\n+\n+    <!-- The next two UDFs have an explicit 'deterministic' tag defined -->\n+    <function>\n+        <type>executable</type>\n+        <name>test_function_bash_deterministic</name>\n+        <return_type>String</return_type>\n+        <argument>\n+            <type>UInt64</type>\n+        </argument>\n+        <format>TabSeparated</format>\n+        <command>input.sh</command>\n+        <deterministic>true</deterministic>\n+    </function>\n+\n+    <function>\n+        <type>executable</type>\n+        <name>test_function_bash_nondeterministic</name>\n+        <return_type>String</return_type>\n+        <argument>\n+            <type>UInt64</type>\n+        </argument>\n+        <format>TabSeparated</format>\n+        <command>input.sh</command>\n+        <deterministic>false</deterministic>\n+    </function>\n+\n </functions>\ndiff --git a/tests/integration/test_executable_user_defined_function/test.py b/tests/integration/test_executable_user_defined_function/test.py\nindex 8b79223a4d27..d092fc9b4f97 100644\n--- a/tests/integration/test_executable_user_defined_function/test.py\n+++ b/tests/integration/test_executable_user_defined_function/test.py\n@@ -340,23 +340,49 @@ def test_executable_function_always_error_python(started_cluster):\n         assert \"DB::Exception: Child process was exited with return code 1\" in str(ex)\n \n def test_executable_function_query_cache(started_cluster):\n-    '''Test for issue #77553: Externally-defined UDFs may be non-deterministic. The query cache should treat them as such, i.e. reject them.'''\n+    '''Test for issues #77553 and #59988: Users should be able to specify if externally-defined are non-deterministic, and the query cache should treat them correspondingly.'''\n     '''Also see tests/0_stateless/test_query_cache_udf_sql.sql'''\n     skip_test_msan(node)\n \n     node.query(\"SYSTEM DROP QUERY CACHE\");\n \n+    # we are each testing an UDF without explicit <deterministic> tag (to check the default behavior) and two queries with <deterministic> true respectively false </deterministic>.\n+\n     # query_cache_nondeterministic_function_handling = throw\n+\n     assert node.query_and_get_error(\"SELECT test_function_bash(1) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'throw'\")\n     assert node.query(\"SELECT count(*) FROM system.query_cache\") == \"0\\n\"\n+\n+    assert node.query(\"SELECT test_function_bash_deterministic(1) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'throw'\") == \"Key 1\\n\"\n+    assert node.query(\"SELECT count(*) FROM system.query_cache\") == \"1\\n\"\n+\n+    assert node.query_and_get_error(\"SELECT test_function_bash_nondeterministic(1) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'throw'\")\n+    assert node.query(\"SELECT count(*) FROM system.query_cache\") == \"1\\n\"\n+\n     node.query(\"SYSTEM DROP QUERY CACHE\");\n \n     # query_cache_nondeterministic_function_handling = save\n+\n     assert node.query(\"SELECT test_function_bash(1) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'save'\") == \"Key 1\\n\"\n     assert node.query(\"SELECT count(*) FROM system.query_cache\") == \"1\\n\"\n+\n+    assert node.query(\"SELECT test_function_bash_deterministic(1) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'save'\") == \"Key 1\\n\"\n+    assert node.query(\"SELECT count(*) FROM system.query_cache\") == \"2\\n\"\n+\n+    assert node.query(\"SELECT test_function_bash_nondeterministic(1) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'save'\") == \"Key 1\\n\"\n+    assert node.query(\"SELECT count(*) FROM system.query_cache\") == \"3\\n\"\n+\n     node.query(\"SYSTEM DROP QUERY CACHE\");\n \n     # query_cache_nondeterministic_function_handling = ignore\n+\n     assert node.query(\"SELECT test_function_bash(1) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'ignore'\") == \"Key 1\\n\"\n     assert node.query(\"SELECT count(*) FROM system.query_cache\") == \"0\\n\"\n+\n+    assert node.query(\"SELECT test_function_bash_deterministic(1) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'ignore'\") == \"Key 1\\n\"\n+    assert node.query(\"SELECT count(*) FROM system.query_cache\") == \"1\\n\"\n+\n+    assert node.query(\"SELECT test_function_bash_nondeterministic(1) SETTINGS use_query_cache = true, query_cache_nondeterministic_function_handling = 'ignore'\") == \"Key 1\\n\"\n+    assert node.query(\"SELECT count(*) FROM system.query_cache\") == \"1\\n\"\n+\n     node.query(\"SYSTEM DROP QUERY CACHE\");\ndiff --git a/tests/queries/0_stateless/02494_query_cache_udf_sql.sql b/tests/queries/0_stateless/02494_query_cache_udf_sql.sql\nindex 0a87453400fe..18870f0e89a2 100644\n--- a/tests/queries/0_stateless/02494_query_cache_udf_sql.sql\n+++ b/tests/queries/0_stateless/02494_query_cache_udf_sql.sql\n@@ -2,7 +2,7 @@\n -- Tag no-parallel: Messes with internal cache\n \n -- Test for issue #77553: SQL-defined UDFs may be non-deterministic. The query cache should treat them as such, i.e. reject them.\n--- Also see 02494_query_cache_udf_executable.sh\n+-- Also see test_executable_function_query_cache in tests/integration/test_executable_user_defined_function\n \n SYSTEM DROP QUERY CACHE;\n DROP FUNCTION IF EXISTS udf;\n",
  "problem_statement": "Add support for deterministic UDF\n**Use case**\r\n\r\nBe able to rely on Query cache when using deterministic UDF.\r\n\r\nAs explained by the [QueryCache documentation](https://clickhouse.com/docs/en/operations/query-cache#configuration-settings-and-usage), an UDF is considered not deterministic and as such the Query Cache feature is disabled.\r\n\r\nThere is a settings `query_cache_nondeterministic_function_handling` to cache it nonetheless but in this case it will also cache non-deterministic result which I do not want.\r\n\r\n**Describe the solution you'd like**\r\n\r\nIn the UDF declaration we should be able to specify if the output function is deterministic or not:\r\n\r\n```xml\r\n<functions>\r\n  <function>\r\n     <deterministic>true</deterministic>\r\n  <function>\r\n</functions\r\n```\r\n\r\nIf yes, then ClickHouse should not opt-out from the Query cache by default.\r\n\n",
  "hints_text": "",
  "created_at": "2025-03-17T22:40:08Z",
  "modified_files": [
    "docs/en/operations/query-cache.md",
    "docs/en/sql-reference/functions/udf.md",
    "src/Functions/UserDefined/ExternalUserDefinedExecutableFunctionsLoader.cpp",
    "src/Functions/UserDefined/UserDefinedExecutableFunction.h",
    "src/Functions/UserDefined/UserDefinedExecutableFunctionFactory.cpp"
  ],
  "modified_test_files": [
    "tests/integration/test_executable_user_defined_function/functions/test_function_config.xml",
    "tests/integration/test_executable_user_defined_function/test.py",
    "tests/queries/0_stateless/02494_query_cache_udf_sql.sql"
  ]
}