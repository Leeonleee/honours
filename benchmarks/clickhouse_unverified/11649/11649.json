{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11649,
  "instance_id": "ClickHouse__ClickHouse-11649",
  "issue_numbers": [
    "11101",
    "11506"
  ],
  "base_commit": "f53da4d36b8c3a214567c935caed478edce08363",
  "patch": "diff --git a/src/Common/OptimizedRegularExpression.cpp b/src/Common/OptimizedRegularExpression.cpp\nindex 8c4aa00f171e..1464923e6abf 100644\n--- a/src/Common/OptimizedRegularExpression.cpp\n+++ b/src/Common/OptimizedRegularExpression.cpp\n@@ -38,6 +38,7 @@ void OptimizedRegularExpressionImpl<thread_safe>::analyze(\n     required_substring_is_prefix = false;\n     required_substring.clear();\n     bool has_alternative_on_depth_0 = false;\n+    bool has_case_insensitive_flag = false;\n \n     /// Substring with a position.\n     using Substring = std::pair<std::string, size_t>;\n@@ -65,7 +66,17 @@ void OptimizedRegularExpressionImpl<thread_safe>::analyze(\n \n                 switch (*pos)\n                 {\n-                    case '|': case '(': case ')': case '^': case '$': case '.': case '[': case '?': case '*': case '+': case '{':\n+                    case '|':\n+                    case '(':\n+                    case ')':\n+                    case '^':\n+                    case '$':\n+                    case '.':\n+                    case '[':\n+                    case '?':\n+                    case '*':\n+                    case '+':\n+                    case '{':\n                         if (depth == 0 && !in_curly_braces && !in_square_braces)\n                         {\n                             if (last_substring->first.empty())\n@@ -110,6 +121,28 @@ void OptimizedRegularExpressionImpl<thread_safe>::analyze(\n                         trivial_substrings.resize(trivial_substrings.size() + 1);\n                         last_substring = &trivial_substrings.back();\n                     }\n+\n+                    /// Check for case-insensitive flag.\n+                    if (pos + 1 < end && pos[1] == '?')\n+                    {\n+                        for (size_t offset = 2; pos + offset < end; ++offset)\n+                        {\n+                            if (pos[offset] == '-'  /// it means flag negation\n+                                /// various possible flags, actually only imsU are supported by re2\n+                                || (pos[offset] >= 'a' && pos[offset] <= 'z')\n+                                || (pos[offset] >= 'A' && pos[offset] <= 'Z'))\n+                            {\n+                                if (pos[offset] == 'i')\n+                                {\n+                                    /// Actually it can be negated case-insensitive flag. But we don't care.\n+                                    has_case_insensitive_flag = true;\n+                                    break;\n+                                }\n+                            }\n+                            else\n+                                break;\n+                        }\n+                    }\n                 }\n                 ++pos;\n                 break;\n@@ -209,7 +242,7 @@ void OptimizedRegularExpressionImpl<thread_safe>::analyze(\n \n     if (!is_trivial)\n     {\n-        if (!has_alternative_on_depth_0)\n+        if (!has_alternative_on_depth_0 && !has_case_insensitive_flag)\n         {\n             /// We choose the non-alternative substring of the maximum length for first search.\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01312_case_insensitive_regexp.reference b/tests/queries/0_stateless/01312_case_insensitive_regexp.reference\nnew file mode 100644\nindex 000000000000..c18b4e9b0829\n--- /dev/null\n+++ b/tests/queries/0_stateless/01312_case_insensitive_regexp.reference\n@@ -0,0 +1,8 @@\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/01312_case_insensitive_regexp.sql b/tests/queries/0_stateless/01312_case_insensitive_regexp.sql\nnew file mode 100644\nindex 000000000000..ca13989599d9\n--- /dev/null\n+++ b/tests/queries/0_stateless/01312_case_insensitive_regexp.sql\n@@ -0,0 +1,8 @@\n+SELECT match('Too late', 'Too late');\n+select match('Too late', '(?i)Too late');\n+select match('Too late', '(?i)too late');\n+select match('Too late', '(?i:too late)');\n+select match('Too late', '(?i)to{2} late');\n+select match('Too late', '(?i)to(?)o late');\n+select match('Too late', '(?i)to+ late');\n+select match('Too late', '(?i)to(?:o|o) late');\n",
  "problem_statement": "re2 match issue \n```\r\nSELECT match('Too late', 'Too late')\r\n1\r\nselect match('Too late','(?i)Too late');\r\n1\r\nselect match('Too late','(?i)too late');\r\n0 -- ??? \r\n\r\n-- that helps\r\nselect match('Too late','(?i:too late)');\r\n1 \r\n\r\n--looks like it somehow relates to double o\r\nselect match('Too late','(?i)to{2} late');\r\n1\r\nselect match('Too late','(?i)to(?)o late');\r\n1\r\nselect match('Too late','(?i)to+ late');\r\n1\r\nselect match('Too late','(?i)to(?:o|o) late');\r\n1\r\n```\nCase-insensitive regexp match & ilike\nwith re2 you can use `(?-i)` flag inside regexp, but OptimizedRegularExpression [can break that](https://github.com/ClickHouse/ClickHouse/issues/11101)\r\n\r\nWith `like` you can do `lower(str) like '%foo%'`, but a single function call would be cheaper than 2. `ilike` as in postgres sounds like a nice shortcut for that. \r\n\r\nRelated:\r\n- https://www.postgresql.org/docs/8.3/functions-matching.html\r\n- https://stackoverflow.com/questions/58728436/how-to-search-the-string-in-query-with-case-insensitive-on-clickhouse-database\r\n- https://code-flow.club/264848/how-to-make-case-insensitive-search-in-clickhouse\r\n- https://quabr.com/55535770/problems-using-clickhouse\n",
  "hints_text": "Yes, case insensitive regexps are simply not supported due to the use of OptimizedRegularExpression.\n@alexey-milovidov why doesn't it just bypass that? I think it should NOT do any magic with regexps if they seems complex, and contain some special regex syntax.\n@filimonov It will lose performance benefits.\r\n\nI saw that in re2 library, developers are trying to implement something similar in more accurate way.\r\nIt was named \"filtered_re2\" (that was in \"not recommended\" stage for a long time). And I noticed that in recent versions of re2 it becomes better.\r\nMaybe it can possibly replace OptimizedRegularExpression.\n",
  "created_at": "2020-06-14T00:45:06Z",
  "modified_files": [
    "src/Common/OptimizedRegularExpression.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01312_case_insensitive_regexp.reference",
    "b/tests/queries/0_stateless/01312_case_insensitive_regexp.sql"
  ]
}