{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 49717,
  "instance_id": "ClickHouse__ClickHouse-49717",
  "issue_numbers": [
    "47159"
  ],
  "base_commit": "8adc878049b1182a9b8c7778a8f1055a545b5139",
  "patch": "diff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex f60632fae919..b8f16f47acb9 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -642,7 +642,7 @@ class IColumn;\n     M(UInt64, function_range_max_elements_in_block, 500000000, \"Maximum number of values generated by function 'range' per block of data (sum of array sizes for every row in a block, see also 'max_block_size' and 'min_insert_block_size_rows'). It is a safety threshold.\", 0) \\\n     M(ShortCircuitFunctionEvaluation, short_circuit_function_evaluation, ShortCircuitFunctionEvaluation::ENABLE, \"Setting for short-circuit function evaluation configuration. Possible values: 'enable' - use short-circuit function evaluation for functions that are suitable for it, 'disable' - disable short-circuit function evaluation, 'force_enable' - use short-circuit function evaluation for all functions.\", 0) \\\n     \\\n-    M(LocalFSReadMethod, storage_file_read_method, LocalFSReadMethod::mmap, \"Method of reading data from storage file, one of: read, pread, mmap.\", 0) \\\n+    M(LocalFSReadMethod, storage_file_read_method, LocalFSReadMethod::mmap, \"Method of reading data from storage file, one of: read, pread, mmap. The mmap method does not apply to clickhouse-server (it's intended for clickhouse-local).\", 0) \\\n     M(String, local_filesystem_read_method, \"pread_threadpool\", \"Method of reading data from local filesystem, one of: read, pread, mmap, io_uring, pread_threadpool. The 'io_uring' method is experimental and does not work for Log, TinyLog, StripeLog, File, Set and Join, and other tables with append-able files in presence of concurrent reads and writes.\", 0) \\\n     M(String, remote_filesystem_read_method, \"threadpool\", \"Method of reading data from remote filesystem, one of: read, threadpool.\", 0) \\\n     M(Bool, local_filesystem_read_prefetch, false, \"Should use prefetching when reading data from local filesystem.\", 0) \\\ndiff --git a/src/Storages/StorageFile.cpp b/src/Storages/StorageFile.cpp\nindex 26d4aee8cfe5..425fe6bee31d 100644\n--- a/src/Storages/StorageFile.cpp\n+++ b/src/Storages/StorageFile.cpp\n@@ -201,7 +201,19 @@ std::unique_ptr<ReadBuffer> selectReadBuffer(\n {\n     auto read_method = context->getSettingsRef().storage_file_read_method;\n \n-    if (S_ISREG(file_stat.st_mode) && read_method == LocalFSReadMethod::mmap)\n+    /** But using mmap on server-side is unsafe for the following reasons:\n+      * - concurrent modifications of a file will result in SIGBUS;\n+      * - IO error from the device will result in SIGBUS;\n+      * - recovery from this signal is not feasible even with the usage of siglongjmp,\n+      *   as it might require stack unwinding from arbitrary place;\n+      * - arbitrary slowdown due to page fault in arbitrary place in the code is difficult to debug.\n+      *\n+      * But we keep this mode for clickhouse-local as it is not so bad for a command line tool.\n+      */\n+\n+    if (S_ISREG(file_stat.st_mode)\n+        && context->getApplicationType() != Context::ApplicationType::SERVER\n+        && read_method == LocalFSReadMethod::mmap)\n     {\n         try\n         {\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02497_storage_file_reader_selection.reference b/tests/queries/0_stateless/02497_storage_file_reader_selection.reference\nindex 8da37e4219c9..680eb502aaab 100644\n--- a/tests/queries/0_stateless/02497_storage_file_reader_selection.reference\n+++ b/tests/queries/0_stateless/02497_storage_file_reader_selection.reference\n@@ -1,10 +1,4 @@\n-key\n-foo\n-bar\n 1\n 0\n-key\n-foo\n-bar\n 0\n 1\ndiff --git a/tests/queries/0_stateless/02497_storage_file_reader_selection.sh b/tests/queries/0_stateless/02497_storage_file_reader_selection.sh\nindex 4d9336bc1a0c..20bde68718de 100755\n--- a/tests/queries/0_stateless/02497_storage_file_reader_selection.sh\n+++ b/tests/queries/0_stateless/02497_storage_file_reader_selection.sh\n@@ -4,24 +4,13 @@ CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n # shellcheck source=../shell_config.sh\n . \"$CURDIR\"/../shell_config.sh\n \n-USER_FILES_PATH=$(clickhouse-client --query \"select _path,_file from file('nonexist.txt', 'CSV', 'val1 char')\" 2>&1 | grep Exception | awk '{gsub(\"/nonexist.txt\",\"\",$9); print $9}')\n-\n-DATA_FILE=$USER_FILES_PATH/test_02497_storage_file_reader.data\n+DATA_FILE=test_02497_$CLICKHOUSE_TEST_UNIQUE_NAME.tsv\n echo -e 'key\\nfoo\\nbar' > $DATA_FILE\n \n-QUERY_ID=$RANDOM\n-$CLICKHOUSE_CLIENT -q \"SELECT * FROM file('test_02497_storage_file_reader.data', 'TSV', 's String')\" \\\n-  --query_id $QUERY_ID\n-\n-$CLICKHOUSE_CLIENT -q \"SYSTEM FLUSH LOGS\"\n-$CLICKHOUSE_CLIENT -q \"SELECT sum(ProfileEvents['CreatedReadBufferMMap']) FROM system.query_log WHERE query_id='$QUERY_ID'\"\n-$CLICKHOUSE_CLIENT -q \"SELECT sum(ProfileEvents['CreatedReadBufferOrdinary']) FROM system.query_log WHERE query_id='$QUERY_ID'\"\n+$CLICKHOUSE_LOCAL --storage_file_read_method=mmap --print-profile-events -q \"SELECT * FROM file($DATA_FILE) FORMAT Null\" 2>&1 | grep -F -c \"CreatedReadBufferMMap\"\n+$CLICKHOUSE_LOCAL --storage_file_read_method=mmap --print-profile-events -q \"SELECT * FROM file($DATA_FILE) FORMAT Null\" 2>&1 | grep -F -c \"CreatedReadBufferOrdinary\"\n \n-QUERY_ID=$RANDOM\n-$CLICKHOUSE_CLIENT -q \"SELECT * FROM file('test_02497_storage_file_reader.data', 'TSV', 's String')\" \\\n-  --query_id $QUERY_ID \\\n-  --storage_file_read_method=pread\n+$CLICKHOUSE_LOCAL --storage_file_read_method=pread --print-profile-events -q \"SELECT * FROM file($DATA_FILE) FORMAT Null\" 2>&1 | grep -F -c \"CreatedReadBufferMMap\"\n+$CLICKHOUSE_LOCAL --storage_file_read_method=pread --print-profile-events -q \"SELECT * FROM file($DATA_FILE) FORMAT Null\" 2>&1 | grep -F -c \"CreatedReadBufferOrdinary\"\n \n-$CLICKHOUSE_CLIENT -q \"SYSTEM FLUSH LOGS\"\n-$CLICKHOUSE_CLIENT -q \"SELECT sum(ProfileEvents['CreatedReadBufferMMap']) FROM system.query_log WHERE query_id='$QUERY_ID'\"\n-$CLICKHOUSE_CLIENT -q \"SELECT sum(ProfileEvents['CreatedReadBufferOrdinary']) FROM system.query_log WHERE query_id='$QUERY_ID'\"\n+rm $DATA_FILE\n",
  "problem_statement": "SIGBUS in `segmentatorThreadFunction`/`fileSegmentationEngine*`\nhttps://s3.amazonaws.com/clickhouse-test-reports/46681/ad4a44df52b6b04ac5977d12aa35b099a792133c/upgrade_check__asan_.html \r\n\r\n```\r\n2023-03-02 07:45:26 Thread 1305 \"Segmentator\" received signal SIGBUS, Bus error.\r\n2023-03-02 07:45:26 [Switching to Thread 0x7f933171b700 (LWP 139986)]\r\n2023-03-02 07:45:26 detail::find_first_symbols_sse2<true, (detail::ReturnMode)0, (char)13, (char)10> (begin=<optimized out>, end=0x7f9a24a18095 \"8)\\003\\002\") at ../base/base/find_symbols.h:85\r\n2023-03-02 07:45:26 #0  detail::find_first_symbols_sse2<true, (detail::ReturnMode)0, (char)13, (char)10> (begin=<optimized out>, end=0x7f9a24a18095 \"8)\\003\\002\") at ../base/base/find_symbols.h:85\r\n2023-03-02 07:45:26         bit_mask = <optimized out>\r\n2023-03-02 07:45:26         pos = 0x7f9a24a18000 \"\\002\\anested1\\anested20Array(Tuple(Array(UInt64), Map(String, UInt64)))TTuple(Tuple(Array(Array(UInt64)), Map(UInt64, Array(Tuple(UInt64, String)))), UInt8)\\003\\002\"\r\n2023-03-02 07:45:26         bit_mask = <optimized out>\r\n2023-03-02 07:45:26         bytes = <optimized out>\r\n2023-03-02 07:45:26         eq = <optimized out>\r\n2023-03-02 07:45:26 #1  detail::find_first_symbols_dispatch<true, (detail::ReturnMode)0, (char)13, (char)10> (begin=<optimized out>, end=0x7f9a24a18095 \"8)\\003\\002\") at ../base/base/find_symbols.h:194\r\n2023-03-02 07:45:26 No locals.\r\n2023-03-02 07:45:26 #2  find_first_symbols<(char)13, (char)10> (begin=<optimized out>, end=0x7f9a24a18095 \"8)\\003\\002\") at ../base/base/find_symbols.h:211\r\n2023-03-02 07:45:26 No locals.\r\n2023-03-02 07:45:26 #3  DB::fileSegmentationEngineTabSeparatedImpl (in=..., memory=..., is_raw=<optimized out>, min_bytes=19425859, min_rows=3, max_rows=19348) at ../src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp:377\r\n2023-03-02 07:45:26         need_more_data = true\r\n2023-03-02 07:45:26         pos = <optimized out>\r\n2023-03-02 07:45:26         number_of_rows = <optimized out>\r\n2023-03-02 07:45:26 #4  0x0000000014865978 in std::__1::__function::__policy_func<std::__1::pair<bool, unsigned long> (DB::ReadBuffer&, DB::Memory<Allocator<false, false> >&, unsigned long, unsigned long)>::operator()[abi:v15000](DB::ReadBuffer&, DB::Memory<Allocator<false, false> >&, unsigned long&&, unsigned long&&) const (this=0x7f97b21eacb0, __args=<optimized out>, __args=<optimized out>, __args=<optimized out>, __args=<optimized out>) at ../contrib/llvm-project/libcxx/include/__functional/function.h:848\r\n2023-03-02 07:45:26 No locals.\r\n2023-03-02 07:45:26 #5  std::__1::function<std::__1::pair<bool, unsigned long> (DB::ReadBuffer&, DB::Memory<Allocator<false, false> >&, unsigned long, unsigned long)>::operator()(DB::ReadBuffer&, DB::Memory<Allocator<false, false> >&, unsigned long, unsigned long) const (this=0x7f97b21eacb0, __arg=19348, __arg=19348, __arg=19348, __arg=19348) at ../contrib/llvm-project/libcxx/include/__functional/function.h:1187\r\n2023-03-02 07:45:26 No locals.\r\n2023-03-02 07:45:26 #6  DB::ParallelParsingInputFormat::segmentatorThreadFunction (this=0x7f97b21eab18, thread_group=...) at ../src/Processors/Formats/Impl/ParallelParsingInputFormat.cpp:41\r\n2023-03-02 07:45:26         segmentator_unit_number = <optimized out>\r\n2023-03-02 07:45:26         unit = <optimized out>\r\n2023-03-02 07:45:26         have_more_data = <optimized out>\r\n2023-03-02 07:45:26         currently_read_rows = <optimized out>\r\n2023-03-02 07:45:26         scope_exit16 = {static is_nullable = <optimized out>, function = {thread_group = @0x7f9331712748}}\r\n2023-03-02 07:45:26 #7  0x0000000014869ad6 in std::__1::__invoke[abi:v15000]<void (DB::ParallelParsingInputFormat::*&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*&, std::__1::shared_ptr<DB::ThreadGroupStatus>&, void> (__f=<optimized out>, __a0=<optimized out>, __args=...) at ../contrib/llvm-project/libcxx/include/__functional/invoke.h:359\r\n2023-03-02 07:45:26 No locals.\r\n2023-03-02 07:45:26 #8  std::__1::__apply_tuple_impl[abi:v15000]<void (DB::ParallelParsingInputFormat::*&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), std::__1::tuple<DB::ParallelParsingInputFormat*, std::__1::shared_ptr<DB::ThreadGroupStatus> >&, 0ul, 1ul>(void (DB::ParallelParsingInputFormat::*&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), std::__1::tuple<DB::ParallelParsingInputFormat*, std::__1::shared_ptr<DB::ThreadGroupStatus> >&, std::__1::__tuple_indices<0ul, 1ul>) (__f=<optimized out>, __t=...) at ../contrib/llvm-project/libcxx/include/tuple:1789\r\n2023-03-02 07:45:26 No locals.\r\n2023-03-02 07:45:26 #9  std::__1::apply[abi:v15000]<void (DB::ParallelParsingInputFormat::*&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), std::__1::tuple<DB::ParallelParsingInputFormat*, std::__1::shared_ptr<DB::ThreadGroupStatus> >&>(void (DB::ParallelParsingInputFormat::*&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), std::__1::tuple<DB::ParallelParsingInputFormat*, std::__1::shared_ptr<DB::ThreadGroupStatus> >&) (__f=<optimized out>, __t=...) at ../contrib/llvm-project/libcxx/include/tuple:1798\r\n2023-03-02 07:45:26 No locals.\r\n2023-03-02 07:45:26 #10 ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<void (DB::ParallelParsingInputFormat::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*, std::__1::shared_ptr<DB::ThreadGroupStatus> >(void (DB::ParallelParsingInputFormat::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&)::{lambda()#1}::operator()() (this=0x7f9983847c00) at ../src/Common/ThreadPool.h:210\r\n2023-03-02 07:45:26         thread_status = <incomplete type>\r\n2023-03-02 07:45:26         scope_exit198 = {static is_nullable = false, function = {<No data fields>}}\r\n2023-03-02 07:45:26         function = <optimized out>\r\n2023-03-02 07:45:26         arguments = {__base_ = {<std::__1::__tuple_leaf<0ul, DB::ParallelParsingInputFormat*, false>> = {__value_ = <optimized out>}, <std::__1::__tuple_leaf<1ul, std::__1::shared_ptr<DB::ThreadGroupStatus>, false>> = {__value_ = {__ptr_ = 0x7f996558a618, __cntrl_ = 0x7f996558a600}}, <No data fields>}}\r\n2023-03-02 07:45:26 #11 std::__1::__invoke[abi:v15000]<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<void (DB::ParallelParsingInputFormat::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*, std::__1::shared_ptr<DB::ThreadGroupStatus> >(void (DB::ParallelParsingInputFormat::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&)::{lambda()#1}&> (__f=...) at ../contrib/llvm-project/libcxx/include/__functional/invoke.h:394\r\n2023-03-02 07:45:26 No locals.\r\n2023-03-02 07:45:26 #12 std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<void (DB::ParallelParsingInputFormat::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*, std::__1::shared_ptr<DB::ThreadGroupStatus> >(void (DB::ParallelParsingInputFormat::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&)::{lambda()#1}&>(ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<void (DB::ParallelParsingInputFormat::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*, std::__1::shared_ptr<DB::ThreadGroupStatus> >(void (DB::ParallelParsingInputFormat::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&)::{lambda()#1}&) (__args=...) at ../contrib/llvm-project/libcxx/include/__functional/invoke.h:479\r\n2023-03-02 07:45:26 No locals.\r\n2023-03-02 07:45:26 #13 std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<void (DB::ParallelParsingInputFormat::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*, std::__1::shared_ptr<DB::ThreadGroupStatus> >(void (DB::ParallelParsingInputFormat::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&)::{lambda()#1}, void ()>::operator()[abi:v15000]() (this=0x7f9983847c00) at ../contrib/llvm-project/libcxx/include/__functional/function.h:235\r\n2023-03-02 07:45:26 No locals.\r\n2023-03-02 07:45:26 #14 std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<void (DB::ParallelParsingInputFormat::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*, std::__1::shared_ptr<DB::ThreadGroupStatus> >(void (DB::ParallelParsingInputFormat::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&)::{lambda()#1}, void ()> >(std::__1::__function::__policy_storage const*) (__buf=<optimized out>) at ../contrib/llvm-project/libcxx/include/__functional/function.h:716\r\n2023-03-02 07:45:26         __f = 0x7f9983847c00\r\n2023-03-02 07:45:26 #15 0x000000000e194dea in std::__1::__function::__policy_func<void ()>::operator()[abi:v15000]() const (this=0x7f9331712a60) at ../contrib/llvm-project/libcxx/include/__functional/function.h:848\r\n2023-03-02 07:45:26 No locals.\r\n2023-03-02 07:45:26 #16 std::__1::function<void ()>::operator()() const (this=0x7f9331712a60) at ../contrib/llvm-project/libcxx/include/__functional/function.h:1187\r\n2023-03-02 07:45:26 No locals.\r\n2023-03-02 07:45:26 #17 ThreadPoolImpl<std::__1::thread>::worker (this=0x7f9a2399d2c0, thread_it=...) at ../src/Common/ThreadPool.cpp:315\r\n2023-03-02 07:45:26         metric_active_threads = {what = <optimized out>, amount = 1}\r\n2023-03-02 07:45:26         thread_trace_context = {root_span = {trace_id = {t = {items = {0, 0}}}, span_id = 0, parent_span_id = 0, operation_name = {static __endian_factor = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__data_ = 0x0, __size_ = 0, __cap_ = 0, __is_long_ = 0}, __s = {__data_ = '\\000' <repeats 22 times>, __padding_ = 0x7f9331712b47 \"\", __size_ = 0 '\\000', __is_long_ = 0 '\\000'}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<std::__1::__non_trivial_if<true, std::__1::allocator<char> >> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, start_time_us = 0, finish_time_us = 0, attributes = {<std::__1::vector<DB::Field, AllocatorWithMemoryTracking<DB::Field> >> = {__begin_ = 0x0, __end_ = 0x0, __end_cap_ = {<std::__1::__compressed_pair_elem<DB::Field*, 0, false>> = {__value_ = 0x0}, <std::__1::__compressed_pair_elem<AllocatorWithMemoryTracking<DB::Field>, 1, true>> = {<AllocatorWithMemoryTracking<DB::Field>> = {<No data fields>}, <No data fields>}, <No data fields>}}, <No data fields>}}, is_context_owner = true}\r\n2023-03-02 07:45:26         job = {<std::__1::__function::__maybe_derive_from_unary_function<void ()>> = {<No data fields>}, <std::__1::__function::__maybe_derive_from_binary_function<void ()>> = {<No data fields>}, __f_ = {__buf_ = {__small = \"\\000|\\204\\203\\231\\177\\000\\000\\000\\336\\226\\r\\231\\177\\000\", __large = 0x7f9983847c00}, __invoker_ = {__call_ = 0x14869a60 <std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<void (DB::ParallelParsingInputFormat::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*, std::__1::shared_ptr<DB::ThreadGroupStatus> >(void (DB::ParallelParsingInputFormat::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&)::{lambda()#1}, void ()> >(std::__1::__function::__policy_storage const*)>}, __policy_ = 0x4dcebe8 <std::__1::__function::__policy::__choose_policy[abi:v15000]<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<true>::ThreadFromGlobalPoolImpl<void (DB::ParallelParsingInputFormat::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*, std::__1::shared_ptr<DB::ThreadGroupStatus> >(void (DB::ParallelParsingInputFormat::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&)::{lambda()#1}, void ()> >(std::__1::integral_constant<bool, false>)::__policy_>}}\r\n2023-03-02 07:45:26         parent_thead_trace_context = {<DB::OpenTelemetry::TracingContext> = {trace_id = {t = {items = {0, 0}}}, span_id = 0, tracestate = {static __endian_factor = 1, __r_ = {<std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>> = {__value_ = {{__l = {__data_ = 0x0, __size_ = 0, __cap_ = 0, __is_long_ = 0}, __s = {__data_ = '\\000' <repeats 22 times>, __padding_ = 0x7f9331712aef \"\", __size_ = 0 '\\000', __is_long_ = 0 '\\000'}, __r = {__words = {0, 0, 0}}}}}, <std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>> = {<std::__1::allocator<char>> = {<std::__1::__non_trivial_if<true, std::__1::allocator<char> >> = {<No data fields>}, <No data fields>}, <No data fields>}, <No data fields>}, static npos = 18446744073709551615}, trace_flags = 0 '\\000'}, span_log = {__ptr_ = 0x0, __cntrl_ = 0x0}}\r\n2023-03-02 07:45:26         need_shutdown = true\r\n2023-03-02 07:45:26         metric_all_threads = {what = <optimized out>, amount = 1}\r\n2023-03-02 07:45:26 #18 0x000000000e19a4a1 in ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::{lambda()#2}::operator()() const (this=0x7f98661b71c8) at ../src/Common/ThreadPool.cpp:145\r\n2023-03-02 07:45:26 No locals.\r\n2023-03-02 07:45:26 #19 std::__1::__invoke[abi:v15000]<ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::{lambda()#2}> (__f=...) at ../contrib/llvm-project/libcxx/include/__functional/invoke.h:394\r\n2023-03-02 07:45:26 No locals.\r\n2023-03-02 07:45:26 #20 std::__1::__thread_execute[abi:v15000]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::{lambda()#2}>(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::{lambda()#2}>&, std::__1::__tuple_indices<>) (__t=...) at ../contrib/llvm-project/libcxx/include/thread:284\r\n2023-03-02 07:45:26 No locals.\r\n2023-03-02 07:45:26 #21 std::__1::__thread_proxy[abi:v15000]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::{lambda()#2}> >(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::{lambda()#2}>) (__vp=0x7f98661b71c0) at ../contrib/llvm-project/libcxx/include/thread:295\r\n2023-03-02 07:45:26         __p = {__ptr_ = {<std::__1::__compressed_pair_elem<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, (lambda at ../src/Common/ThreadPool.cpp:145:42)> *, 0, false>> = {__value_ = 0x7f98661b71c0}, <std::__1::__compressed_pair_elem<std::__1::default_delete<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, (lambda at ../src/Common/ThreadPool.cpp:145:42)> >, 1, true>> = {<std::__1::default_delete<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, (lambda at ../src/Common/ThreadPool.cpp:145:42)> >> = {<No data fields>}, <No data fields>}, <No data fields>}}\r\n2023-03-02 07:45:26 #22 0x00007f9a249ea609 in start_thread () from /lib/x86_64-linux-gnu/libpthread.so.0\r\n2023-03-02 07:45:26 No symbol table info available.\r\n2023-03-02 07:45:26 #23 0x00007f9a2490f133 in clone () from /lib/x86_64-linux-gnu/libc.so.6\r\n2023-03-02 07:45:26 No symbol table info available.\r\n```\r\n\r\nMore reports: [link](https://play.clickhouse.com/play?user=play#d2l0aCAKJyUlJyBhcyBuYW1lX3BhdHRlcm4sCiclZmlsZVNlZ21lbnRhdGlvbkVuZ2luZSUnIGFzIGNvbnRleHRfcGF0dGVybiwKJzIwMjItMDktMDEnIGFzIHN0YXJ0X2RhdGUsCig0NTQ2MSkgYXMgbm9pc3lfcHJzLAooJ1N0YXRlbGVzcyB0ZXN0cyAoYXNhbiknLCAnU3RhdGVsZXNzIHRlc3RzIChhZGRyZXNzKScsICdTdGF0ZWxlc3MgdGVzdHMgKGFkZHJlc3MsIGFjdGlvbnMpJykgYXMgYmFja3BvcnRfYW5kX3JlbGVhc2Vfc3BlY2lmaWNfY2hlY2tzCnNlbGVjdCAKdG9TdGFydE9mRGF5KGNoZWNrX3N0YXJ0X3RpbWUpIGFzIGQsCmNvdW50KCksICBncm91cFVuaXFBcnJheShwdWxsX3JlcXVlc3RfbnVtYmVyKSwgYW55KHJlcG9ydF91cmwpCmZyb20gY2hlY2tzIHdoZXJlIHN0YXJ0X2RhdGUgPD0gY2hlY2tfc3RhcnRfdGltZSBhbmQgcHVsbF9yZXF1ZXN0X251bWJlciBub3QgaW4gCihzZWxlY3QgcHVsbF9yZXF1ZXN0X251bWJlciBhcyBwcm4gZnJvbSBjaGVja3Mgd2hlcmUgcHJuIT0wIGFuZCBzdGFydF9kYXRlIDw9IGNoZWNrX3N0YXJ0X3RpbWUgYW5kIGNoZWNrX25hbWUgaW4gYmFja3BvcnRfYW5kX3JlbGVhc2Vfc3BlY2lmaWNfY2hlY2tzKSAKYW5kIHRlc3RfbmFtZSBsaWtlIG5hbWVfcGF0dGVybiBhbmQgdGVzdF9jb250ZXh0X3JhdyBpbGlrZSBjb250ZXh0X3BhdHRlcm4KYW5kIHB1bGxfcmVxdWVzdF9udW1iZXIgbm90IGluIG5vaXN5X3BycwphbmQgdGVzdF9zdGF0dXMgaW4gKCdGQUlMJywgJ0ZMQUtZJywgJ2ZhaWx1cmUnKSBncm91cCBieSBkIG9yZGVyIGJ5IGQgZGVzYw==)\r\n\r\ncc: @nikitamikhaylov \n",
  "hints_text": "https://s3.amazonaws.com/clickhouse-test-reports/48792/70c1000c227072722dd14f731d9f1549edb7a1c9/upgrade_check__msan_.html\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/f7470e1453e7343cd633a5d21d499c566187fb32/stress_test__tsan_.html\n@tavplubix this happens in one of the following events:\r\n- file was modified during reading;\r\n- IO error while reading.\r\n\r\nThis behavior is ok for clickhouse-local, or when a user explicitly requests the usage of mmap.\r\nLet's correct the tests to make sure that the file is not modified in parallel.\nUnassigning @nikitamikhaylov, because nothing was done.\n@alexey-milovidov, yes, most likely it's not a bug, but clickhouse-server crashes in stress tests because of this. We should either fix tests or disable mmap for reading from user_files in clickhouse-server",
  "created_at": "2023-05-10T01:18:53Z",
  "modified_files": [
    "src/Core/Settings.h",
    "src/Storages/StorageFile.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02497_storage_file_reader_selection.reference",
    "tests/queries/0_stateless/02497_storage_file_reader_selection.sh"
  ]
}