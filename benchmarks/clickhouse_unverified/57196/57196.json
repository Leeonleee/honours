{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 57196,
  "instance_id": "ClickHouse__ClickHouse-57196",
  "issue_numbers": [
    "57194"
  ],
  "base_commit": "8aaf9a4cb4c523c3cd02bea9103b7484dbf3f6ac",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/optimizeUseNormalProjection.cpp b/src/Processors/QueryPlan/Optimizations/optimizeUseNormalProjection.cpp\nindex 6880d21facb4..e4b3e4f84aba 100644\n--- a/src/Processors/QueryPlan/Optimizations/optimizeUseNormalProjection.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/optimizeUseNormalProjection.cpp\n@@ -268,7 +268,7 @@ bool optimizeUseNormalProjections(Stack & stack, QueryPlan::Nodes & nodes)\n     }\n     else\n     {\n-        const auto & main_stream = iter->node->children.front()->step->getOutputStream();\n+        const auto & main_stream = iter->node->children[iter->next_child - 1]->step->getOutputStream();\n         const auto * proj_stream = &next_node->step->getOutputStream();\n \n         if (auto materializing = makeMaterializingDAG(proj_stream->header, main_stream.header))\n@@ -284,7 +284,7 @@ bool optimizeUseNormalProjections(Stack & stack, QueryPlan::Nodes & nodes)\n         auto & union_node = nodes.emplace_back();\n         DataStreams input_streams = {main_stream, *proj_stream};\n         union_node.step = std::make_unique<UnionStep>(std::move(input_streams));\n-        union_node.children = {iter->node->children.front(), next_node};\n+        union_node.children = {iter->node->children[iter->next_child - 1], next_node};\n         iter->node->children[iter->next_child - 1] = &union_node;\n     }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01710_normal_projection_join_plan_fix.reference b/tests/queries/0_stateless/01710_normal_projection_join_plan_fix.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01710_normal_projection_join_plan_fix.sql b/tests/queries/0_stateless/01710_normal_projection_join_plan_fix.sql\nnew file mode 100644\nindex 000000000000..40847a301c2d\n--- /dev/null\n+++ b/tests/queries/0_stateless/01710_normal_projection_join_plan_fix.sql\n@@ -0,0 +1,13 @@\n+DROP TABLE IF EXISTS t1;\n+DROP TABLE IF EXISTS t2;\n+\n+CREATE TABLE t1 (id UInt32, s String) Engine = MergeTree ORDER BY id;\n+CREATE TABLE t2 (id1 UInt32, id2 UInt32) Engine = MergeTree ORDER BY id1 SETTINGS index_granularity = 1;\n+INSERT INTO t2 SELECT number, number from numbers(100);\n+ALTER TABLE t2 ADD PROJECTION proj (SELECT id2 ORDER BY id2);\n+INSERT INTO t2 SELECT number, number from numbers(100);\n+\n+SELECT s FROM t1 as lhs LEFT JOIN (SELECT * FROM t2 WHERE id2 = 2) as rhs ON lhs.id = rhs.id2;\n+\n+DROP TABLE t1;\n+DROP TABLE t2;\n",
  "problem_statement": "`Block structure mismatch in UnionStep stream: different number of columns` when projections are used with JOIN\nHow to reproduce\r\n\r\n```sql\r\nCREATE TABLE t1 (id UInt32, s String) Engine = MergeTree ORDER BY id;\r\n\r\nCREATE TABLE t2 (id1 UInt32, id2 UInt32) Engine = MergeTree ORDER BY id1;\r\nINSERT INTO t2 SELECT * from generateRandom() LIMIT 100;\r\nALTER TABLE t2 ADD PROJECTION proj (SELECT id2 ORDER BY id2);\r\nINSERT INTO t2 SELECT * from generateRandom() LIMIT 100;\r\n\r\nSELECT s FROM t1 as lhs LEFT JOIN (SELECT * FROM t2 WHERER id2 = 1) as rhs ON lhs.id = rhs.id2;\r\n\r\nReceived exception from server (version 23.11.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Block structure mismatch in UnionStep stream: different number of columns:\r\nid2 UInt32 UInt32(size = 0)\r\nid UInt32 UInt32(size = 0), s String String(size = 0). (LOGICAL_ERROR)\r\n```\r\n\r\ncc @amosbird anything familiar?\r\n\n",
  "hints_text": "It's not reproduceable in current master. Do you have some special settings enabled?\nSorry, it's not reproduceable by my example, noticed right now I made a change that skipped this check:\r\n```\r\n if (candidate.sum_marks >= ordinary_reading_marks)\r\n    continue;\r\n```\r\nDo you have an idea how to modify my test case to pass this check without any modification to the code?\r\n\r\nRegardless of that, we noticed this issue happening on our release builds so it's a real problem.\n> Do you have an idea how to modify my test case to pass this check without any modification to the code?\r\n\r\n```\r\nSELECT s\r\nFROM t1 AS lhs\r\nLEFT JOIN\r\n(\r\n    SELECT *\r\n    FROM t2\r\n    WHERE id2 = 1\r\n) AS rhs ON lhs.id = rhs.id2\r\n```\r\nThis one can reproduce. I will investigate.",
  "created_at": "2023-11-24T13:48:47Z",
  "modified_files": [
    "src/Processors/QueryPlan/Optimizations/optimizeUseNormalProjection.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01710_normal_projection_join_plan_fix.sql"
  ]
}