{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 32066,
  "instance_id": "ClickHouse__ClickHouse-32066",
  "issue_numbers": [
    "31680"
  ],
  "base_commit": "4d96d6ab77ded1e6bda31f67cb73b4d3c7e0b655",
  "patch": "diff --git a/src/Storages/JoinSettings.cpp b/src/Storages/JoinSettings.cpp\ndeleted file mode 100644\nindex 8a2699746da1..000000000000\n--- a/src/Storages/JoinSettings.cpp\n+++ /dev/null\n@@ -1,41 +0,0 @@\n-#include <Storages/JoinSettings.h>\n-#include <Parsers/ASTCreateQuery.h>\n-#include <Parsers/ASTSetQuery.h>\n-#include <Parsers/ASTFunction.h>\n-#include <Common/Exception.h>\n-\n-\n-namespace DB\n-{\n-\n-namespace ErrorCodes\n-{\n-    extern const int UNKNOWN_SETTING;\n-}\n-\n-IMPLEMENT_SETTINGS_TRAITS(joinSettingsTraits, LIST_OF_JOIN_SETTINGS)\n-\n-void JoinSettings::loadFromQuery(ASTStorage & storage_def)\n-{\n-    if (storage_def.settings)\n-    {\n-        try\n-        {\n-            applyChanges(storage_def.settings->changes);\n-        }\n-        catch (Exception & e)\n-        {\n-            if (e.code() == ErrorCodes::UNKNOWN_SETTING)\n-                e.addMessage(\"for storage \" + storage_def.engine->name);\n-            throw;\n-        }\n-    }\n-    else\n-    {\n-        auto settings_ast = std::make_shared<ASTSetQuery>();\n-        settings_ast->is_standalone = false;\n-        storage_def.set(storage_def.settings, settings_ast);\n-    }\n-}\n-\n-}\ndiff --git a/src/Storages/JoinSettings.h b/src/Storages/JoinSettings.h\ndeleted file mode 100644\nindex 13be557a439e..000000000000\n--- a/src/Storages/JoinSettings.h\n+++ /dev/null\n@@ -1,30 +0,0 @@\n-#pragma once\n-\n-#include <Core/BaseSettings.h>\n-#include <Core/Settings.h>\n-\n-\n-namespace DB\n-{\n-class ASTStorage;\n-\n-\n-#define JOIN_RELATED_SETTINGS(M) \\\n-    M(Bool, persistent, true, \"Disable setting to avoid the overhead of writing to disk for StorageJoin\", 0)\n-\n-#define LIST_OF_JOIN_SETTINGS(M) \\\n-    JOIN_RELATED_SETTINGS(M) \\\n-    FORMAT_FACTORY_SETTINGS(M)\n-\n-DECLARE_SETTINGS_TRAITS(joinSettingsTraits, LIST_OF_JOIN_SETTINGS)\n-\n-\n-/** Settings for the Join engine.\n-  * Could be loaded from a CREATE TABLE query (SETTINGS clause).\n-  */\n-struct JoinSettings : public BaseSettings<joinSettingsTraits>\n-{\n-    void loadFromQuery(ASTStorage & storage_def);\n-};\n-\n-}\ndiff --git a/src/Storages/StorageJoin.cpp b/src/Storages/StorageJoin.cpp\nindex 6c903b22846b..3a9b42f7371f 100644\n--- a/src/Storages/StorageJoin.cpp\n+++ b/src/Storages/StorageJoin.cpp\n@@ -261,9 +261,7 @@ void registerStorageJoin(StorageFactory & factory)\n                     disk_name = setting.value.get<String>();\n                 else if (setting.name == \"persistent\")\n                 {\n-                    auto join_settings = std::make_unique<JoinSettings>();\n-                    join_settings->loadFromQuery(*args.storage_def);\n-                    persistent = join_settings->persistent;\n+                    persistent = setting.value.get<bool>();\n                 }\n                 else\n                     throw Exception(\"Unknown setting \" + setting.name + \" for storage \" + args.engine_name, ErrorCodes::BAD_ARGUMENTS);\ndiff --git a/src/Storages/StorageJoin.h b/src/Storages/StorageJoin.h\nindex 1b9d34c46fa4..ee685830a6cb 100644\n--- a/src/Storages/StorageJoin.h\n+++ b/src/Storages/StorageJoin.h\n@@ -5,7 +5,6 @@\n #include <Common/RWLock.h>\n #include <Storages/StorageSet.h>\n #include <Storages/TableLockHolder.h>\n-#include <Storages/JoinSettings.h>\n #include <Parsers/ASTTablesInSelectQuery.h>\n \n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02127_storage_join_settings_with_persistency.reference b/tests/queries/0_stateless/02127_storage_join_settings_with_persistency.reference\nnew file mode 100644\nindex 000000000000..16f7a2012764\n--- /dev/null\n+++ b/tests/queries/0_stateless/02127_storage_join_settings_with_persistency.reference\n@@ -0,0 +1,2 @@\n+CREATE TABLE default.`02127_join_settings_with_persistency_1`\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = Join(ANY, LEFT, k)\\nSETTINGS persistent = 1, join_any_take_last_row = 0\n+CREATE TABLE default.`02127_join_settings_with_persistency_0`\\n(\\n    `k` UInt64,\\n    `s` String\\n)\\nENGINE = Join(ANY, LEFT, k)\\nSETTINGS persistent = 0, join_any_take_last_row = 0\ndiff --git a/tests/queries/0_stateless/02127_storage_join_settings_with_persistency.sql b/tests/queries/0_stateless/02127_storage_join_settings_with_persistency.sql\nnew file mode 100644\nindex 000000000000..1dc1529ebad6\n--- /dev/null\n+++ b/tests/queries/0_stateless/02127_storage_join_settings_with_persistency.sql\n@@ -0,0 +1,6 @@\n+DROP TABLE IF EXISTS 02127_join_settings_with_persistency_1;\n+CREATE TABLE 02127_join_settings_with_persistency_1 (k UInt64, s String) ENGINE = Join(ANY, LEFT, k) SETTINGS persistent=1, join_any_take_last_row=0;\n+SHOW CREATE TABLE 02127_join_settings_with_persistency_1;\n+DROP TABLE IF EXISTS 02127_join_settings_with_persistency_0;\n+CREATE TABLE 02127_join_settings_with_persistency_0 (k UInt64, s String) ENGINE = Join(ANY, LEFT, k) SETTINGS persistent=0, join_any_take_last_row=0;\n+SHOW CREATE TABLE 02127_join_settings_with_persistency_0;\n",
  "problem_statement": "Persistent setting of Join table\n\u0412 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0434\u043b\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0442\u0438\u043f\u0430 Join \u0435\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0447\u0435\u043d\u044c \u043d\u0430\u0441\u0442\u0440\u043e\u0435\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438, \u0432 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438 join_any_take_last_row \u0438 persistent, \u043f\u0440\u0438 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u044b.\r\n\r\n\u041e\u0448\u0438\u0431\u043a\u0430 Code: 115. DB::Exception: Unknown setting join_any_take_last_row: for storage Join. (UNKNOWN_SETTING) (version 21.11.4.14 (official build))\r\n>create table internal.lookup (key UInt64, value UInt64) engine = Join(any, left, key)\r\nsettings join_any_take_last_row = 1, persistent = 0;\r\n\r\n\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0438 \u0438\u0445 \u043e\u0447\u0435\u0440\u0435\u0434\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u0438\u0433\u0440\u0430\u0435\u0442 \u0440\u043e\u043b\u0438.\r\n\r\n\u041e\u0434\u043d\u0430\u043a\u043e \u0435\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u043b\u044e\u0431\u043e\u0439 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0434\u0432\u0443\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440, \u0442\u043e \u0432\u0441\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442.\r\n\r\n\u041a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430\u043c\u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0448\u044c persistent\r\n>create table internal.lookup (key UInt64, value UInt64) engine = Join(any, left, key)\r\nsettings\r\njoin_use_nulls = 0,\r\nmax_rows_in_join = 0,\r\nmax_bytes_in_join = 0,\r\njoin_overflow_mode = 'throw',\r\njoin_any_take_last_row = 0;\r\n\r\n\u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 persistent \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442 \u0440\u0443\u0433\u0430\u0442\u044c\u0441\u044f \u043d\u0430 Unknown setting \u043b\u044e\u0431\u043e\u0433\u043e \u0438\u0437 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432.\n",
  "hints_text": "Related to #14776",
  "created_at": "2021-12-01T15:12:38Z",
  "modified_files": [
    "src/Storages/JoinSettings.cpp",
    "src/Storages/JoinSettings.h",
    "src/Storages/StorageJoin.cpp",
    "src/Storages/StorageJoin.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02127_storage_join_settings_with_persistency.reference",
    "b/tests/queries/0_stateless/02127_storage_join_settings_with_persistency.sql"
  ]
}