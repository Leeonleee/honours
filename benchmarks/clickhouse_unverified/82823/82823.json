{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 82823,
  "instance_id": "ClickHouse__ClickHouse-82823",
  "issue_numbers": [
    "82660"
  ],
  "base_commit": "53edaed76ea4674d6c2b9b152a537dcb673ef4e5",
  "patch": "diff --git a/src/Core/DecimalFunctions.h b/src/Core/DecimalFunctions.h\nindex 89fbe94bf487..36f1d79f8880 100644\n--- a/src/Core/DecimalFunctions.h\n+++ b/src/Core/DecimalFunctions.h\n@@ -17,7 +17,6 @@ class DataTypeNumber;\n \n namespace ErrorCodes\n {\n-    extern const int NOT_IMPLEMENTED;\n     extern const int DECIMAL_OVERFLOW;\n     extern const int ARGUMENT_OUT_OF_BOUND;\n }\n@@ -312,16 +311,11 @@ ReturnType convertToImpl(const DecimalType & decimal, UInt32 scale, To & result)\n     using DecimalNativeType = typename DecimalType::NativeType;\n     static constexpr bool throw_exception = std::is_void_v<ReturnType>;\n \n-    if constexpr (std::is_same_v<To, BFloat16>)\n+    if constexpr (is_floating_point<To>)\n     {\n-        if constexpr (throw_exception)\n-            throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Conversion from Decimal to BFloat16 is not implemented\");\n-        else\n-            return ReturnType(false);\n-    }\n-    else if constexpr (is_floating_point<To>)\n-    {\n-        result = static_cast<To>(decimal.value) / static_cast<To>(scaleMultiplier<DecimalNativeType>(scale));\n+        /// Float64 is enough to accommodate the digits of the biggest decimal (with possible precision loss),\n+        /// while Float32 is not enough, and it can overflow to infinity.\n+        result = static_cast<To>(static_cast<Float64>(decimal.value) / static_cast<Float64>(scaleMultiplier<DecimalNativeType>(scale)));\n     }\n     else if constexpr (is_integer<To> && (sizeof(To) >= sizeof(DecimalNativeType)))\n     {\ndiff --git a/src/Formats/NumpyDataTypes.h b/src/Formats/NumpyDataTypes.h\nindex fbb0a11c5593..25fd74fd22b8 100644\n--- a/src/Formats/NumpyDataTypes.h\n+++ b/src/Formats/NumpyDataTypes.h\n@@ -1,9 +1,14 @@\n #pragma once\n+\n #include <cstddef>\n #include <Storages/NamedCollectionsHelpers.h>\n #include <IO/WriteBufferFromString.h>\n #include <IO/WriteHelpers.h>\n \n+\n+namespace DB\n+{\n+\n namespace ErrorCodes\n {\n     extern const int BAD_ARGUMENTS;\n@@ -44,9 +49,9 @@ class NumpyDataType\n     Endianness getEndianness() const { return endianness; }\n \n     virtual NumpyDataTypeIndex getTypeIndex() const = 0;\n-    virtual size_t getSize() const { throw DB::Exception(DB::ErrorCodes::NOT_IMPLEMENTED, \"Function getSize is not implemented\"); }\n-    virtual void setSize(size_t) { throw DB::Exception(DB::ErrorCodes::NOT_IMPLEMENTED, \"Function setSize is not implemented\"); }\n-    virtual String str() const { throw DB::Exception(DB::ErrorCodes::NOT_IMPLEMENTED, \"Function str is not implemented\"); }\n+    virtual size_t getSize() const { throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Function getSize is not implemented\"); }\n+    virtual void setSize(size_t) { throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Function setSize is not implemented\"); }\n+    virtual String str() const { throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Function str is not implemented\"); }\n \n protected:\n     Endianness endianness;\n@@ -64,7 +69,7 @@ class NumpyDataTypeInt : public NumpyDataType\n             case 4: type_index = is_signed ? NumpyDataTypeIndex::Int32 : NumpyDataTypeIndex::UInt32; break;\n             case 8: type_index = is_signed ? NumpyDataTypeIndex::Int64 : NumpyDataTypeIndex::UInt64; break;\n             default:\n-                throw DB::Exception(DB::ErrorCodes::BAD_ARGUMENTS, \"Incorrect int type with size {}\", size);\n+                throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Incorrect int type with size {}\", size);\n         }\n     }\n \n@@ -75,7 +80,7 @@ class NumpyDataTypeInt : public NumpyDataType\n     bool isSigned() const { return is_signed; }\n     String str() const override\n     {\n-        DB::WriteBufferFromOwnString buf;\n+        WriteBufferFromOwnString buf;\n         writeChar(static_cast<char>(endianness), buf);\n         writeChar(is_signed ? 'i' : 'u', buf);\n         writeIntText(size, buf);\n@@ -98,7 +103,7 @@ class NumpyDataTypeFloat : public NumpyDataType\n             case 4: type_index = NumpyDataTypeIndex::Float32; break;\n             case 8: type_index = NumpyDataTypeIndex::Float64; break;\n             default:\n-                throw DB::Exception(DB::ErrorCodes::BAD_ARGUMENTS, \"Numpy float type with size {} is not supported\", size);\n+                throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Numpy float type with size {} is not supported\", size);\n         }\n     }\n \n@@ -108,7 +113,7 @@ class NumpyDataTypeFloat : public NumpyDataType\n     }\n     String str() const override\n     {\n-        DB::WriteBufferFromOwnString buf;\n+        WriteBufferFromOwnString buf;\n         writeChar(static_cast<char>(endianness), buf);\n         writeChar('f', buf);\n         writeIntText(size, buf);\n@@ -131,7 +136,7 @@ class NumpyDataTypeString : public NumpyDataType\n     void setSize(size_t size_) override { size = size_; }\n     String str() const override\n     {\n-        DB::WriteBufferFromOwnString buf;\n+        WriteBufferFromOwnString buf;\n         writeChar(static_cast<char>(endianness), buf);\n         writeChar('S', buf);\n         writeIntText(size, buf);\n@@ -154,3 +159,5 @@ class NumpyDataTypeUnicode : public NumpyDataType\n private:\n     size_t size;\n };\n+\n+}\ndiff --git a/src/Storages/VirtualColumnUtils.cpp b/src/Storages/VirtualColumnUtils.cpp\nindex 4e8575d4142f..367457b6694c 100644\n--- a/src/Storages/VirtualColumnUtils.cpp\n+++ b/src/Storages/VirtualColumnUtils.cpp\n@@ -2,7 +2,6 @@\n #include <stack>\n \n #include <Storages/VirtualColumnUtils.h>\n-#include \"Formats/NumpyDataTypes.h\"\n \n #include <Core/NamesAndTypes.h>\n #include <Core/TypeId.h>\n",
  "test_patch": "diff --git a/src/IO/tests/gtest_archive_reader_and_writer.cpp b/src/IO/tests/gtest_archive_reader_and_writer.cpp\nindex e2d7d68b283c..0d9c6c39246e 100644\n--- a/src/IO/tests/gtest_archive_reader_and_writer.cpp\n+++ b/src/IO/tests/gtest_archive_reader_and_writer.cpp\n@@ -22,8 +22,9 @@\n \n namespace DB::ErrorCodes\n {\n-extern const int CANNOT_UNPACK_ARCHIVE;\n-extern const int LOGICAL_ERROR;\n+    extern const int CANNOT_UNPACK_ARCHIVE;\n+    extern const int LOGICAL_ERROR;\n+    extern const int NOT_IMPLEMENTED;\n }\n \n namespace fs = std::filesystem;\ndiff --git a/tests/queries/0_stateless/03551_cast_decimal_to_float.reference b/tests/queries/0_stateless/03551_cast_decimal_to_float.reference\nnew file mode 100644\nindex 000000000000..07d39ab342a9\n--- /dev/null\n+++ b/tests/queries/0_stateless/03551_cast_decimal_to_float.reference\n@@ -0,0 +1,3 @@\n+9\n+9\n+9\ndiff --git a/tests/queries/0_stateless/03551_cast_decimal_to_float.sql b/tests/queries/0_stateless/03551_cast_decimal_to_float.sql\nnew file mode 100644\nindex 000000000000..05b61e207d03\n--- /dev/null\n+++ b/tests/queries/0_stateless/03551_cast_decimal_to_float.sql\n@@ -0,0 +1,3 @@\n+SELECT 9::Decimal(76, 38)::Float64;\n+SELECT 9::Decimal(76, 38)::Float32;\n+SELECT 9::Decimal(76, 38)::BFloat16;\n",
  "problem_statement": "cast decimal to float32 leads to an unexpected result\n### Company or project name\n\nhttps://www.innervate.com/\n\n### Describe the unexpected behaviour\n\n9 -> cast to float32 -> inf\n9 -> cast to float64 -> cast to float32 -> 9\n\n```sql\nSELECT\n    CAST(9, 'Decimal(76, 38)') AS x,\n    CAST(x, 'Float32') AS fl32,\n    CAST(CAST(x, 'Float64'), 'Float32') AS fl64_fl32\n\nQuery id: 17ba9d92-ef62-4b58-9128-17395271ec33\n\nConnecting to localhost:9000 as user default.\nConnected to ClickHouse server version 25.5.1.\n\n   \u250c\u2500x\u2500\u252c\u2500fl32\u2500\u252c\u2500fl64_fl32\u2500\u2510\n1. \u2502 9 \u2502  inf \u2502         9 \u2502\n   \u2514\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n\n\n\n### Which ClickHouse versions are affected?\n\nall\n\n### How to reproduce\n\nhttps://fiddle.clickhouse.com/bfd57a09-1f06-406a-a4f0-9f25d26002b1\n\n### Expected behavior\n\n_No response_\n\n### Error message and/or stacktrace\n\n_No response_\n\n### Additional context\n\n_No response_\n",
  "hints_text": "",
  "created_at": "2025-06-29T05:57:08Z",
  "modified_files": [
    "src/Core/DecimalFunctions.h",
    "src/Formats/NumpyDataTypes.h",
    "src/Storages/VirtualColumnUtils.cpp"
  ],
  "modified_test_files": [
    "src/IO/tests/gtest_archive_reader_and_writer.cpp",
    "b/tests/queries/0_stateless/03551_cast_decimal_to_float.reference",
    "b/tests/queries/0_stateless/03551_cast_decimal_to_float.sql"
  ]
}