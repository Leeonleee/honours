You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Correlated subquery SEGV with Distributed table
### Describe the bug

Some validation is missing. Not sure if related to https://github.com/ClickHouse/ClickHouse/issues/82092

### How to reproduce

Run Fiddle: https://fiddle.clickhouse.com/cdc7591f-004a-463a-a33c-f18ff1f53f97

### Error message and/or stacktrace

Stack trace:

```
#0  std::__1::vector<std::__1::weak_ptr<DB::IQueryTreeNode>, std::__1::allocator<std::__1::weak_ptr<DB::IQueryTreeNode> > >::size[abi:se190107]() const (this=0x20)
    at  contrib/llvm-project/libcxx/include/vector:635
#1  std::__1::vector<std::__1::weak_ptr<DB::IQueryTreeNode>, std::__1::allocator<std::__1::weak_ptr<DB::IQueryTreeNode> > >::operator[][abi:se190107](unsigned long) const (this=0x20, __n=0)
    at  contrib/llvm-project/libcxx/include/vector:1443
#2  DB::ColumnNode::getSourceWeakPointer (this=0x0) at  src/Analyzer/ColumnNode.h:145
#3  DB::ColumnNode::getColumnSource (this=0x0) at  src/Analyzer/ColumnNode.cpp:40
#4  0x000055556cc5567e in DB::GlobalPlannerContext::collectTableExpressionDataForCorrelatedColumns (this=<optimized out>, table_expression_node=..., planner_context=...)
    at  src/Planner/PlannerContext.cpp:63
#5  0x000055556cf58ce7 in DB::(anonymous namespace)::buildPlannerForCorrelatedSubquery (planner_context=..., correlated_subquery=..., select_query_options=...)
    at  src/Planner/PlannerCorrelatedSubqueries.cpp:445
#6  0x000055556cf577c8 in DB::buildQueryPlanForCorrelatedSubquery (planner_context=..., query_plan=..., correlated_subquery=..., select_query_options=...)
    at  src/Planner/PlannerCorrelatedSubqueries.cpp:534
#7  0x000055556cf6db8a in DB::(anonymous namespace)::addExpressionStep (planner_context=..., query_plan=..., expression_actions=..., correlated_subtrees=..., select_query_options=..., step_description=..., useful_sets=...)
    at  src/Planner/Planner.cpp:416
#8  0x000055556cf67eee in DB::Planner::buildPlanForQueryNode (this=0x7ffea1ded518) at  src/Planner/Planner.cpp:1812
#9  0x000055556cf62433 in DB::Planner::buildQueryPlanIfNeeded (this=0x7ffea1ded518) at  src/Planner/Planner.cpp:1371
#10 0x000055556cf6105e in DB::(anonymous namespace)::collectFiltersForAnalysis (query_tree=..., table_nodes=..., query_context=...) at  src/Planner/Planner.cpp:253
#11 DB::(anonymous namespace)::collectFiltersForAnalysis (query_tree_node=..., select_query_options=...) at  src/Planner/Planner.cpp:304
#12 DB::Planner::Planner (this=0x7ffdfeb95170, query_tree_=..., select_query_options_=...) at  src/Planner/Planner.cpp:1335
#13 0x000055556d6bb8a6 in DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer (this=0x7ffdfeb95100, query_=..., context_=..., select_query_options_=..., column_names=...)
    at  src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:183
#14 0x000055556d6be2d0 in std::__1::make_unique[abi:se190107]<DB::InterpreterSelectQueryAnalyzer, std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&>(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&) (__args=..., __args=..., __args=...) at  contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:634
#15 0x000055556d6543e4 in std::__1::__function::__policy_func<std::__1::unique_ptr<DB::IInterpreter, std::__1::default_delete<DB::IInterpreter> > (DB::InterpreterFactory::Arguments const&)>::operator()[abi:se190107](DB::InterpreterFactory::Arguments const&) const (this=0x7ffea1ded880, __args=...) at  contrib/llvm-project/libcxx/include/__functional/function.h:716
#16 std::__1::function<std::__1::unique_ptr<DB::IInterpreter, std::__1::default_delete<DB::IInterpreter> >(DB::InterpreterFactory::Arguments const&)>::operator() (this=0x7ffea1ded880, __arg=...)
    at  contrib/llvm-project/libcxx/include/__functional/function.h:989
#17 DB::InterpreterFactory::get (this=0x5555794cdea8 <DB::InterpreterFactory::instance()::interpreter_fact>, query=..., context=..., options=...)
    at  src/Interpreters/InterpreterFactory.cpp:393
#18 0x000055556d996dcb in DB::executeQueryImpl (begin=<optimized out>, end=<optimized out>, context=..., flags=..., stage=DB::QueryProcessingStage::Complete, istr=0x0, out_ast=...)
    at  src/Interpreters/executeQuery.cpp:1455
#19 0x000055556d991871 in DB::executeQuery (query=..., context=..., flags=..., stage=DB::QueryProcessingStage::Complete) at  src/Interpreters/executeQuery.cpp:1715
#20 0x000055556f74a4f2 in DB::TCPHandler::runImpl (this=0x7ffea109d000) at  src/Server/TCPHandler.cpp:721
#21 0x000055556f763c24 in DB::TCPHandler::run (this=0x0) at  src/Server/TCPHandler.cpp:2727
#22 0x0000555573bdf167 in Poco::Net::TCPServerConnection::start (this=0x0) at  base/poco/Net/src/TCPServerConnection.cpp:40
#23 0x0000555573bdf665 in Poco::Net::TCPServerDispatcher::run (this=0x7ffe12c8b900) at  base/poco/Net/src/TCPServerDispatcher.cpp:115
#24 0x0000555573b87c9f in Poco::PooledThread::run (this=0x7ffff5b65180) at  base/poco/Foundation/src/ThreadPool.cpp:205
#25 0x0000555573b85851 in Poco::ThreadImpl::runnableEntry (pThread=<optimized out>) at  base/poco/Foundation/src/Thread_POSIX.cpp:335
#26 0x00007ffff7ca2ef1 in start_thread (arg=<optimized out>) at ./nptl/pthread_create.c:448
#27 0x00007ffff7d3445c in __GI___clone3 () at ../sysdeps/unix/sysv/linux/x86_64/clone3.S:78
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
