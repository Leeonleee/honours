diff --git a/tests/queries/0_stateless/01710_aggregate_projection_with_normalized_states.reference b/tests/queries/0_stateless/01710_aggregate_projection_with_normalized_states.reference
new file mode 100644
index 000000000000..25aa9dc5dec2
--- /dev/null
+++ b/tests/queries/0_stateless/01710_aggregate_projection_with_normalized_states.reference
@@ -0,0 +1,2 @@
+3
+950	990	500	2000
diff --git a/tests/queries/0_stateless/01710_aggregate_projection_with_normalized_states.sql b/tests/queries/0_stateless/01710_aggregate_projection_with_normalized_states.sql
new file mode 100644
index 000000000000..e023c0991b3c
--- /dev/null
+++ b/tests/queries/0_stateless/01710_aggregate_projection_with_normalized_states.sql
@@ -0,0 +1,31 @@
+DROP TABLE IF EXISTS r;
+
+select finalizeAggregation(cast(quantileState(0)(arrayJoin([1,2,3])) as AggregateFunction(quantile(1), UInt8)));
+
+CREATE TABLE r (
+     x String,
+     a LowCardinality(String),
+     q AggregateFunction(quantilesTiming(0.5, 0.95, 0.99), Int64),
+     s Int64,
+     PROJECTION p
+         (SELECT a, quantilesTimingMerge(0.5, 0.95, 0.99)(q), sum(s) GROUP BY a)
+) Engine=SummingMergeTree order by (x, a);
+
+insert into r
+select number%100 x,
+       'x' a,
+       quantilesTimingState(0.5, 0.95, 0.99)(number::Int64) q,
+       sum(1) s
+from numbers(1000)
+group by x,a;
+
+SELECT
+       ifNotFinite(quantilesTimingMerge(0.95)(q)[1],0) as d1,
+       ifNotFinite(quantilesTimingMerge(0.99)(q)[1],0) as d2,
+       ifNotFinite(quantilesTimingMerge(0.50)(q)[1],0) as d3,
+       sum(s)
+FROM cluster('test_cluster_two_shards', currentDatabase(), r)
+WHERE a = 'x'
+settings prefer_localhost_replica=0;
+
+DROP TABLE r;
