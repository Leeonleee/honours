{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 58597,
  "instance_id": "ClickHouse__ClickHouse-58597",
  "issue_numbers": [
    "58590"
  ],
  "base_commit": "6aee18ced8f2428c2d48dd0be78dd29be68cd97d",
  "patch": "diff --git a/src/Functions/makeDate.cpp b/src/Functions/makeDate.cpp\nindex 1381e9f28288..987cf4eb1a92 100644\n--- a/src/Functions/makeDate.cpp\n+++ b/src/Functions/makeDate.cpp\n@@ -434,7 +434,7 @@ class FunctionMakeDateTime64 : public FunctionMakeDateTimeBase\n         };\n \n         FunctionArgumentDescriptors optional_args{\n-            {optional_argument_names[0], &isNumber<IDataType>, isColumnConst, \"const Number\"},\n+            {optional_argument_names[0], &isNumber<IDataType>, nullptr, \"const Number\"},\n             {optional_argument_names[1], &isNumber<IDataType>, isColumnConst, \"const Number\"},\n             {optional_argument_names[2], &isString<IDataType>, isColumnConst, \"const String\"}\n         };\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02245_make_datetime64.reference b/tests/queries/0_stateless/02245_make_datetime64.reference\nindex 0ac672ae54dc..1c7d31788e39 100644\n--- a/tests/queries/0_stateless/02245_make_datetime64.reference\n+++ b/tests/queries/0_stateless/02245_make_datetime64.reference\n@@ -67,3 +67,4 @@ DateTime64(7, \\'UTC\\')\n 1900-01-01 00:00:00.000\n 1900-01-01 00:00:00.000\n 1900-01-01 00:00:00.000\n+2024-01-08 11:12:13.014\ndiff --git a/tests/queries/0_stateless/02245_make_datetime64.sql b/tests/queries/0_stateless/02245_make_datetime64.sql\nindex 62784cb9b750..71629ad8dff6 100644\n--- a/tests/queries/0_stateless/02245_make_datetime64.sql\n+++ b/tests/queries/0_stateless/02245_make_datetime64.sql\n@@ -82,6 +82,9 @@ select makeDateTime64(1991, 8, 24, 65537, 4, 0);\n select makeDateTime64(1991, 8, 24, 21, 65537, 0);\n select makeDateTime64(1991, 8, 24, 21, 4, 65537);\n \n+-- bug 58590\n+select makeDateTime64(2024, 1, 8, 11, 12, 13, materialize(14));\n+\n select makeDateTime64(year, 1, 1, 1, 0, 0, 0, precision, timezone) from (\n     select 1984 as year, 5 as precision, 'UTC' as timezone\n     union all\n",
  "problem_statement": "makeDateTime64 only accepts constant fraction\n**Describe what's wrong**\r\n\r\nThe function `makeDateTime64` only accepts constant fractions-of-a-second\r\n\r\nhttps://fiddle.clickhouse.com/8656706e-975f-49bd-b653-17cbb4e4360b\r\n```\r\nSELECT makeDateTime64(1970, 1, 1, 12, 0, 0, rand(), 9, 'UTC');\r\n\r\nReceived exception from server (version 23.12.2):\r\nCode: 44. DB::Exception: Received from localhost:9000. DB::Exception: Illegal type of argument #7 'fraction' of function makeDateTime64, expected const Number, got UInt32: While processing makeDateTime64(1970, 1, 1, 12, 0, 0, rand(), 9, 'UTC'). (ILLEGAL_COLUMN)\r\n(query: SELECT makeDateTime64(1970, 1, 1, 12, 0, 0, rand(), 9, 'UTC'))\r\n```\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nReproduces on >= 23.9\r\nOn 23.8, evaluates to the max value\r\n\r\nhttps://fiddle.clickhouse.com/323b5b56-5956-4eef-b718-47d920b4b82e\r\n```\r\nSELECT makeDateTime64(1970, 1, 1, 12, 0, 0, rand(), 9, 'UTC');\r\n\r\n1970-01-01 12:00:00.999999999\r\n```\r\n\r\n**Expected behavior**\r\n\r\nThis function should accept non-constant data (e.g. identifier for a column)\r\n\n",
  "hints_text": "",
  "created_at": "2024-01-08T12:02:13Z",
  "modified_files": [
    "src/Functions/makeDate.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02245_make_datetime64.reference",
    "tests/queries/0_stateless/02245_make_datetime64.sql"
  ]
}