diff --git a/src/Planner/CollectTableExpressionData.cpp b/src/Planner/CollectTableExpressionData.cpp
index cef0222bffba..58c8541e30e7 100644
--- a/src/Planner/CollectTableExpressionData.cpp
+++ b/src/Planner/CollectTableExpressionData.cpp
@@ -10,6 +10,7 @@
 #include <Analyzer/TableFunctionNode.h>
 #include <Analyzer/JoinNode.h>
 #include <Analyzer/ListNode.h>
+#include <Analyzer/FunctionNode.h>
 
 #include <Planner/PlannerContext.h>
 #include <Planner/PlannerActionsVisitor.h>
@@ -26,16 +27,24 @@ namespace ErrorCodes
 namespace
 {
 
-class CollectSourceColumnsVisitor : public InDepthQueryTreeVisitor<CollectSourceColumnsVisitor>
+class CollectSourceColumnsVisitor : public InDepthQueryTreeVisitorWithContext<CollectSourceColumnsVisitor>
 {
 public:
     explicit CollectSourceColumnsVisitor(PlannerContextPtr & planner_context_, bool keep_alias_columns_ = true)
-        : planner_context(planner_context_)
+        : InDepthQueryTreeVisitorWithContext(planner_context_->getQueryContext())
+        , planner_context(planner_context_)
         , keep_alias_columns(keep_alias_columns_)
-    {}
+    {
+    }
 
-    void visitImpl(QueryTreeNodePtr & node)
+    void enterImpl(QueryTreeNodePtr & node)
     {
+        if (isIndexHintFunction(node))
+        {
+            is_inside_index_hint_function = true;
+            return;
+        }
+
         auto * column_node = node->as<ColumnNode>();
         if (!column_node)
             return;
@@ -43,6 +52,12 @@ class CollectSourceColumnsVisitor : public InDepthQueryTreeVisitor<CollectSource
         if (column_node->getColumnName() == "__grouping_set")
             return;
 
+        /// A special case for the "indexHint" function. We don't need its arguments for execution if column's source table is MergeTree.
+        /// Instead, we prepare an ActionsDAG for its arguments and store it inside a function (see ActionsDAG::buildFilterActionsDAG).
+        /// So this optimization allows not to read arguments of "indexHint" (if not needed in other contexts) but only to use index analysis for them.
+        if (is_inside_index_hint_function && isColumnSourceMergeTree(*column_node))
+            return;
+
         auto column_source_node = column_node->getColumnSource();
         auto column_source_node_type = column_source_node->getNodeType();
 
@@ -128,6 +143,15 @@ class CollectSourceColumnsVisitor : public InDepthQueryTreeVisitor<CollectSource
         table_expression_data.addColumn(column_node->getColumn(), column_identifier, select_added_columns);
     }
 
+    void leaveImpl(QueryTreeNodePtr & node)
+    {
+        if (isIndexHintFunction(node))
+        {
+            is_inside_index_hint_function = false;
+            return;
+        }
+    }
+
     static bool isAliasColumn(const QueryTreeNodePtr & node)
     {
         const auto * column_node = node->as<ColumnNode>();
@@ -149,6 +173,17 @@ class CollectSourceColumnsVisitor : public InDepthQueryTreeVisitor<CollectSource
                  isAliasColumn(parent_node));
     }
 
+    static bool isIndexHintFunction(const QueryTreeNodePtr & node)
+    {
+        return node->as<FunctionNode>() && node->as<FunctionNode>()->getFunctionName() == "indexHint";
+    }
+
+    static bool isColumnSourceMergeTree(const ColumnNode & node)
+    {
+        const auto * source_table = node.getColumnSource()->as<TableNode>();
+        return source_table && source_table->getStorage()->isMergeTree();
+    }
+
     void setKeepAliasColumns(bool keep_alias_columns_)
     {
         keep_alias_columns = keep_alias_columns_;
@@ -169,6 +204,9 @@ class CollectSourceColumnsVisitor : public InDepthQueryTreeVisitor<CollectSource
     /// Column `b` is selected explicitly by user, but not `a` (that is also read though).
     /// Distinguishing such columns is important for checking access rights for ALIAS columns.
     bool select_added_columns = true;
+
+    /// True if we are traversing arguments of function "indexHint".
+    bool is_inside_index_hint_function = false;
 };
 
 class CollectPrewhereTableExpressionVisitor : public ConstInDepthQueryTreeVisitor<CollectPrewhereTableExpressionVisitor>
