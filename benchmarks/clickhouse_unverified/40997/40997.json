{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 40997,
  "instance_id": "ClickHouse__ClickHouse-40997",
  "issue_numbers": [
    "40629"
  ],
  "base_commit": "b7bdd38e410826953353e6cfa1687d91215a9bd3",
  "patch": "diff --git a/src/Processors/QueryPlan/AggregatingStep.cpp b/src/Processors/QueryPlan/AggregatingStep.cpp\nindex 5a5326091e68..03f346d8f721 100644\n--- a/src/Processors/QueryPlan/AggregatingStep.cpp\n+++ b/src/Processors/QueryPlan/AggregatingStep.cpp\n@@ -251,14 +251,17 @@ void AggregatingStep::transformPipeline(QueryPipelineBuilder & pipeline, const B\n                 outputs.push_back(grouping_node);\n \n                 const auto & missing_columns = grouping_sets_params[set_counter].missing_keys;\n+                const auto & used_keys = grouping_sets_params[set_counter].used_keys;\n \n                 auto to_nullable_function = FunctionFactory::instance().get(\"toNullable\", nullptr);\n                 for (size_t i = 0; i < output_header.columns(); ++i)\n                 {\n                     auto & col = output_header.getByPosition(i);\n-                    const auto it = std::find_if(\n+                    const auto missing_it = std::find_if(\n                         missing_columns.begin(), missing_columns.end(), [&](const auto & missing_col) { return missing_col == col.name; });\n-                    if (it != missing_columns.end())\n+                    const auto used_it = std::find_if(\n+                        used_keys.begin(), used_keys.end(), [&](const auto & used_col) { return used_col == col.name; });\n+                    if (missing_it != missing_columns.end())\n                     {\n                         auto column_with_default = col.column->cloneEmpty();\n                         col.type->insertDefaultInto(*column_with_default);\n@@ -270,7 +273,7 @@ void AggregatingStep::transformPipeline(QueryPipelineBuilder & pipeline, const B\n                     else\n                     {\n                         const auto * column_node = dag->getOutputs()[header.getPositionByName(col.name)];\n-                        if (group_by_use_nulls && column_node->result_type->canBeInsideNullable())\n+                        if (used_it != used_keys.end() && group_by_use_nulls && column_node->result_type->canBeInsideNullable())\n                             outputs.push_back(&dag->addFunction(to_nullable_function, { column_node }, col.name));\n                         else\n                             outputs.push_back(column_node);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02343_group_by_use_nulls.reference b/tests/queries/0_stateless/02343_group_by_use_nulls.reference\nindex 24b7bb5277cb..c694b7abfa16 100644\n--- a/tests/queries/0_stateless/02343_group_by_use_nulls.reference\n+++ b/tests/queries/0_stateless/02343_group_by_use_nulls.reference\n@@ -213,3 +213,27 @@ SETTINGS group_by_use_nulls=1;\n \\N\t\\N\t45\n \n 0\t0\t45\n+SELECT\n+    number,\n+    number % 2,\n+    sum(number) AS val\n+FROM numbers(10)\n+GROUP BY\n+    GROUPING SETS (\n+        (number),\n+        (number % 2)\n+    )\n+ORDER BY 1, tuple(val)\n+SETTINGS group_by_use_nulls = 1, max_bytes_before_external_sort=10;\n+0\t\\N\t0\n+1\t\\N\t1\n+2\t\\N\t2\n+3\t\\N\t3\n+4\t\\N\t4\n+5\t\\N\t5\n+6\t\\N\t6\n+7\t\\N\t7\n+8\t\\N\t8\n+9\t\\N\t9\n+\\N\t0\t20\n+\\N\t1\t25\ndiff --git a/tests/queries/0_stateless/02343_group_by_use_nulls.sql b/tests/queries/0_stateless/02343_group_by_use_nulls.sql\nindex a14db8240139..a979a78be0d2 100644\n--- a/tests/queries/0_stateless/02343_group_by_use_nulls.sql\n+++ b/tests/queries/0_stateless/02343_group_by_use_nulls.sql\n@@ -60,3 +60,16 @@ FROM numbers(10)\n GROUP BY CUBE(number, number % 2) WITH TOTALS\n ORDER BY (number, number % 2, val)\n SETTINGS group_by_use_nulls=1;\n+\n+SELECT\n+    number,\n+    number % 2,\n+    sum(number) AS val\n+FROM numbers(10)\n+GROUP BY\n+    GROUPING SETS (\n+        (number),\n+        (number % 2)\n+    )\n+ORDER BY 1, tuple(val)\n+SETTINGS group_by_use_nulls = 1, max_bytes_before_external_sort=10;\n",
  "problem_statement": "Bad cast from type DB::ColumnNullable to DB::ColumnVector<unsigned long>\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/66e677b307558eec0fa18444dca828983c5d3093/fuzzer_astfuzzerubsan//report.html\r\n\r\n```\r\n2022.08.25 13:46:47.095221 [ 212 ] {477e3605-187f-4cad-9574-998bde09e74f} <Debug> executeQuery: (from [::ffff:127.0.0.1]:37656) SELECT 0, sum(number) AS val FROM numbers(1048576) GROUP BY GROUPING SETS (('1025'), (number)) ORDER BY '0.2147483646' ASC, (number, number % 2, val) DESC SETTINGS group_by_use_nulls = 1 (stage: Complete)\r\n2022.08.25 13:46:47.095336 [ 212 ] {477e3605-187f-4cad-9574-998bde09e74f} <Trace> ContextAccess (default): Access granted: CREATE TEMPORARY TABLE ON *.*\r\n2022.08.25 13:46:47.095758 [ 212 ] {477e3605-187f-4cad-9574-998bde09e74f} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2022.08.25 13:46:47.098240 [ 449 ] {477e3605-187f-4cad-9574-998bde09e74f} <Trace> AggregatingTransform: Aggregating\r\n2022.08.25 13:46:47.098243 [ 448 ] {477e3605-187f-4cad-9574-998bde09e74f} <Trace> AggregatingTransform: Aggregating\r\n2022.08.25 13:46:47.098269 [ 449 ] {477e3605-187f-4cad-9574-998bde09e74f} <Trace> Aggregator: Aggregation method: without_key\r\n2022.08.25 13:46:47.098288 [ 448 ] {477e3605-187f-4cad-9574-998bde09e74f} <Trace> Aggregator: Aggregation method: key64\r\n2022.08.25 13:46:47.098957 [ 449 ] {477e3605-187f-4cad-9574-998bde09e74f} <Debug> AggregatingTransform: Aggregated. 1048576 to 1 rows (from 8.00 MiB) in 0.003004867 sec. (348959205.183 rows/sec., 2.60 GiB/sec.)\r\n2022.08.25 13:46:47.098979 [ 449 ] {477e3605-187f-4cad-9574-998bde09e74f} <Trace> Aggregator: Merging aggregated data\r\n2022.08.25 13:46:47.098995 [ 449 ] {477e3605-187f-4cad-9574-998bde09e74f} <Trace> Aggregator: Statistics updated for key=7339891029760931553: new sum_of_sizes=1, median_size=1\r\n2022.08.25 13:46:47.238693 [ 448 ] {477e3605-187f-4cad-9574-998bde09e74f} <Debug> AggregatingTransform: Aggregated. 1048576 to 1048576 rows (from 8.00 MiB) in 0.142719459 sec. (7347113.052 rows/sec., 56.05 MiB/sec.)\r\n2022.08.25 13:46:47.238730 [ 448 ] {477e3605-187f-4cad-9574-998bde09e74f} <Trace> Aggregator: Merging aggregated data\r\n2022.08.25 13:46:47.238749 [ 448 ] {477e3605-187f-4cad-9574-998bde09e74f} <Trace> Aggregator: Statistics updated for key=7339891029760931553: new sum_of_sizes=1048576, median_size=1048576\r\n2022.08.25 13:46:47.607124 [ 448 ] {477e3605-187f-4cad-9574-998bde09e74f} <Debug> DiskLocal: Reserving 36.00 MiB on disk `_tmp_default`, having unreserved 83.77 GiB.\r\n2022.08.25 13:46:47.607259 [ 448 ] {477e3605-187f-4cad-9574-998bde09e74f} <Information> MergeSortingTransform: Sorting and writing part of data into temporary file ./tmp/tmp126mkaaaa\r\n2022.08.25 13:46:47.607367 [ 448 ] {477e3605-187f-4cad-9574-998bde09e74f} <Information> MergeSortingTransform: There are 1 temporary sorted parts to merge.\r\n2022.08.25 13:46:47.643680 [ 449 ] {477e3605-187f-4cad-9574-998bde09e74f} <Fatal> : Logical error: 'Bad cast from type DB::ColumnNullable to DB::ColumnVector<unsigned long>'.\r\n2022.08.25 13:48:59.940799 [ 212 ] {477e3605-187f-4cad-9574-998bde09e74f} <Information> TCPHandler: Query was cancelled.\r\n2022.08.25 13:48:59.941136 [ 450 ] {} <Fatal> BaseDaemon: (version 22.9.1.1 (official build), build id: C0F734BC13E32605) (from thread 449) (query_id: 477e3605-187f-4cad-9574-998bde09e74f) (query: SELECT 0, sum(number) AS val FROM numbers(1048576) GROUP BY GROUPING SETS (('1025'), (number)) ORDER BY '0.2147483646' ASC, (number, number % 2, val) DESC SETTINGS group_by_use_nulls = 1) Received signal Aborted (6)\r\n\r\n\r\n2022.08.25 13:46:47.643680 [ 449 ] {477e3605-187f-4cad-9574-998bde09e74f} <Fatal> : Logical error: 'Bad cast from type DB::ColumnNullable to DB::ColumnVector<unsigned long>'.\r\n2022.08.25 13:48:59.940978 [ 450 ] {} <Fatal> BaseDaemon: ########################################\r\n2022.08.25 13:48:59.941136 [ 450 ] {} <Fatal> BaseDaemon: (version 22.9.1.1 (official build), build id: C0F734BC13E32605) (from thread 449) (query_id: 477e3605-187f-4cad-9574-998bde09e74f) (query: SELECT 0, sum(number) AS val FROM numbers(1048576) GROUP BY GROUPING SETS (('1025'), (number)) ORDER BY '0.2147483646' ASC, (number, number % 2, val) DESC SETTINGS group_by_use_nulls = 1) Received signal Aborted (6)\r\n2022.08.25 13:48:59.941289 [ 450 ] {} <Fatal> BaseDaemon: \r\n2022.08.25 13:48:59.941472 [ 450 ] {} <Fatal> BaseDaemon: Stack trace: 0x7f133f91100b 0x7f133f8f0859 0x1027d5e3 0x1027d88f 0x18c7e484 0x24b072d8 0x24ae8454 0x24b460e8 0x26fc4986 0x26fc41f3 0x273fef0f 0x26fd6ae5 0x270054a5 0x27004fcb 0x26ff505b 0x26ff6660 0x26ff6546 0x10348272 0x1034aec3 0x7f133fac8609 0x7f133f9ed133\r\n2022.08.25 13:48:59.941691 [ 450 ] {} <Fatal> BaseDaemon: 3. raise in ?\r\n2022.08.25 13:48:59.941932 [ 450 ] {} <Fatal> BaseDaemon: 4. abort in ?\r\n2022.08.25 13:48:59.969995 [ 450 ] {} <Fatal> BaseDaemon: 5. ./build_docker/../src/Common/Exception.cpp:47: DB::abortOnFailedAssertion(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) in /workspace/clickhouse\r\n2022.08.25 13:48:59.993479 [ 450 ] {} <Fatal> BaseDaemon: 6. ./build_docker/../src/Common/Exception.cpp:70: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) in /workspace/clickhouse\r\n2022.08.25 13:49:00.968140 [ 450 ] {} <Fatal> BaseDaemon: 7. DB::ColumnVector<unsigned long> const& typeid_cast<DB::ColumnVector<unsigned long> const&, DB::IColumn const>(DB::IColumn const&) in /workspace/clickhouse\r\n2022.08.25 13:49:00.981626 [ 450 ] {} <Fatal> BaseDaemon: 8. ./build_docker/../src/DataTypes/Serializations/SerializationNumber.cpp:137: DB::SerializationNumber<unsigned long>::serializeBinaryBulk(DB::IColumn const&, DB::WriteBuffer&, unsigned long, unsigned long) const in /workspace/clickhouse\r\n2022.08.25 13:49:00.987036 [ 450 ] {} <Fatal> BaseDaemon: 9.1. inlined from ./build_docker/../contrib/libcxx/include/vector:1594: std::__1::vector<DB::ISerialization::Substream, std::__1::allocator<DB::ISerialization::Substream> >::pop_back()\r\n2022.08.25 13:49:00.987062 [ 450 ] {} <Fatal> BaseDaemon: 9. ../src/DataTypes/Serializations/SerializationNamed.cpp:55: DB::SerializationNamed::serializeBinaryBulkWithMultipleStreams(DB::IColumn const&, unsigned long, unsigned long, DB::ISerialization::SerializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::SerializeBinaryBulkState>&) const in /workspace/clickhouse\r\n2022.08.25 13:49:00.997745 [ 450 ] {} <Fatal> BaseDaemon: 10. ./build_docker/../src/DataTypes/Serializations/SerializationTuple.cpp:0: DB::SerializationTuple::serializeBinaryBulkWithMultipleStreams(DB::IColumn const&, unsigned long, unsigned long, DB::ISerialization::SerializeBinaryBulkSettings&, std::__1::shared_ptr<DB::ISerialization::SerializeBinaryBulkState>&) const in /workspace/clickhouse\r\n2022.08.25 13:49:01.008365 [ 450 ] {} <Fatal> BaseDaemon: 11. ./build_docker/../src/Formats/NativeWriter.cpp:64: DB::writeData(DB::ISerialization const&, COW<DB::IColumn>::immutable_ptr<DB::IColumn> const&, DB::WriteBuffer&, unsigned long, unsigned long) in /workspace/clickhouse\r\n2022.08.25 13:49:01.017867 [ 450 ] {} <Fatal> BaseDaemon: 12. ./build_docker/../src/Formats/NativeWriter.cpp:166: DB::NativeWriter::write(DB::Block const&) in /workspace/clickhouse\r\n2022.08.25 13:49:01.050545 [ 450 ] {} <Fatal> BaseDaemon: 13. ./build_docker/../src/Processors/Transforms/MergeSortingTransform.cpp:0: DB::BufferingToFileTransform::consume(DB::Chunk) in /workspace/clickhouse\r\n2022.08.25 13:49:01.062069 [ 450 ] {} <Fatal> BaseDaemon: 14.1. inlined from ./build_docker/../src/Processors/Chunk.h:32: ~Chunk\r\n2022.08.25 13:49:01.062096 [ 450 ] {} <Fatal> BaseDaemon: 14. ../src/Processors/IAccumulatingTransform.cpp:97: DB::IAccumulatingTransform::work() in /workspace/clickhouse\r\n2022.08.25 13:49:01.069074 [ 450 ] {} <Fatal> BaseDaemon: 15. ./build_docker/../src/Processors/Executors/ExecutionThreadContext.cpp:50: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*) in /workspace/clickhouse\r\n2022.08.25 13:49:01.075486 [ 450 ] {} <Fatal> BaseDaemon: 16. ./build_docker/../src/Processors/Executors/ExecutionThreadContext.cpp:93: DB::ExecutionThreadContext::executeTask() in /workspace/clickhouse\r\n2022.08.25 13:49:01.090797 [ 450 ] {} <Fatal> BaseDaemon: 17. ./build_docker/../src/Processors/Executors/PipelineExecutor.cpp:228: DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) in /workspace/clickhouse\r\n2022.08.25 13:49:01.107881 [ 450 ] {} <Fatal> BaseDaemon: 18. ./build_docker/../contrib/libcxx/include/type_traits:3648: decltype(static_cast<DB::PipelineExecutor::spawnThreads()::$_0&>(fp)()) std::__1::__invoke_constexpr<DB::PipelineExecutor::spawnThreads()::$_0&>(DB::PipelineExecutor::spawnThreads()::$_0&) in /workspace/clickhouse\r\n2022.08.25 13:49:01.124948 [ 450 ] {} <Fatal> BaseDaemon: 19.1. inlined from ./build_docker/../contrib/libcxx/include/tuple:0: operator()\r\n2022.08.25 13:49:01.124973 [ 450 ] {} <Fatal> BaseDaemon: 19. ../contrib/libcxx/include/type_traits:3640: decltype(static_cast<DB::PipelineExecutor::spawnThreads()::$_0>(fp)()) std::__1::__invoke<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'()&>(DB::PipelineExecutor::spawnThreads()::$_0&&) in /workspace/clickhouse\r\n2022.08.25 13:49:01.134093 [ 450 ] {} <Fatal> BaseDaemon: 20.1. inlined from ./build_docker/../contrib/libcxx/include/__functional/function.h:1157: std::__1::function<void ()>::operator=(std::nullptr_t)\r\n2022.08.25 13:49:01.134114 [ 450 ] {} <Fatal> BaseDaemon: 20. ../src/Common/ThreadPool.cpp:284: ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) in /workspace/clickhouse\r\n2022.08.25 13:49:01.144858 [ 450 ] {} <Fatal> BaseDaemon: 21. ./build_docker/../src/Common/ThreadPool.cpp:0: void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()> >(void*) in /workspace/clickhouse\r\n2022.08.25 13:49:01.144881 [ 450 ] {} <Fatal> BaseDaemon: 22. ? in ?\r\n2022.08.25 13:49:01.144930 [ 450 ] {} <Fatal> BaseDaemon: 23. __clone in ?\r\n2022.08.25 13:49:01.457050 [ 450 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: DBD24847576AE046A0B2EF4B7FE55D76)\r\n\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2022-09-05T11:08:22Z",
  "modified_files": [
    "src/Processors/QueryPlan/AggregatingStep.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02343_group_by_use_nulls.reference",
    "tests/queries/0_stateless/02343_group_by_use_nulls.sql"
  ]
}