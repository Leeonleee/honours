diff --git a/src/DataTypes/EnumValues.cpp b/src/DataTypes/EnumValues.cpp
index d4ca7e4dfddb..39c24bf1122f 100644
--- a/src/DataTypes/EnumValues.cpp
+++ b/src/DataTypes/EnumValues.cpp
@@ -66,11 +66,22 @@ T EnumValues<T>::getValue(StringRef field_name, bool try_treat_as_id) const
             if (tmp_buf.eof() && value_to_name_map.find(x) != value_to_name_map.end())
                 return x;
         }
-        throw Exception{"Unknown element '" + field_name.toString() + "' for enum", ErrorCodes::BAD_ARGUMENTS};
+        auto hints = this->getHints(field_name.toString());
+        auto hints_string = !hints.empty() ? ", may be you meant: " + toString(hints) : "";
+        throw Exception{"Unknown element '" + field_name.toString() + "' for enum" + hints_string, ErrorCodes::BAD_ARGUMENTS};
     }
     return it->getMapped();
 }
 
+template <typename T>
+Names EnumValues<T>::getAllRegisteredNames() const
+{
+    Names result;
+    for (const auto & value : values)
+        result.emplace_back(value.first);
+    return result;
+}
+
 template class EnumValues<Int8>;
 template class EnumValues<Int16>;
 
diff --git a/src/DataTypes/EnumValues.h b/src/DataTypes/EnumValues.h
index 45ac30f9cd74..d03a8867e420 100644
--- a/src/DataTypes/EnumValues.h
+++ b/src/DataTypes/EnumValues.h
@@ -1,7 +1,8 @@
 #pragma once
 
-#include <Common/HashTable/HashMap.h>
 #include <unordered_map>
+#include <Common/HashTable/HashMap.h>
+#include <Common/NamePrompter.h>
 
 namespace DB
 {
@@ -12,7 +13,7 @@ namespace ErrorCodes
 }
 
 template <typename T>
-class EnumValues
+class EnumValues : public IHints<1, EnumValues<T>>
 {
 public:
     using Value = std::pair<std::string, T>;
@@ -65,6 +66,8 @@ class EnumValues
 
         return std::all_of(rhs_values.begin(), rhs_values.end(), check);
     }
+
+    Names getAllRegisteredNames() const override;
 };
 
 }
