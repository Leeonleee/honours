{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 75377,
  "instance_id": "ClickHouse__ClickHouse-75377",
  "issue_numbers": [
    "38716"
  ],
  "base_commit": "00be0ea71e8fb14e7cb2ffb780672756db69c5be",
  "patch": "diff --git a/src/Interpreters/InterpreterSystemQuery.cpp b/src/Interpreters/InterpreterSystemQuery.cpp\nindex 67d242f90c3f..2260bd380b02 100644\n--- a/src/Interpreters/InterpreterSystemQuery.cpp\n+++ b/src/Interpreters/InterpreterSystemQuery.cpp\n@@ -113,6 +113,7 @@ namespace ServerSetting\n \n namespace ErrorCodes\n {\n+    extern const int ACCESS_DENIED;\n     extern const int LOGICAL_ERROR;\n     extern const int BAD_ARGUMENTS;\n     extern const int CANNOT_KILL;\n@@ -1024,16 +1025,32 @@ void InterpreterSystemQuery::dropReplica(ASTSystemQuery & query)\n         auto access = getContext()->getAccess();\n         bool access_is_granted_globally = access->isGranted(AccessType::SYSTEM_DROP_REPLICA);\n \n+        /// Instead of silently failing, check the permissions to delete all databases in advance.\n+        /// Throw an exception to user if the user doesn't have enough privileges to drop the replica.\n+        /// Include the databases that the user needs privileges for in the exception\n+        std::vector<String> required_access;\n+        for (auto & elem : databases)\n+        {\n+            if (!access_is_granted_globally && !access->isGranted(AccessType::SYSTEM_DROP_REPLICA, elem.first))\n+            {\n+                required_access.emplace_back(elem.first);\n+                LOG_INFO(log, \"? Access {} denied, skipping database {}\", \"SYSTEM DROP REPLICA\", elem.first);\n+            }\n+        }\n+\n+        if (!required_access.empty())\n+            throw Exception(\n+                ErrorCodes::ACCESS_DENIED,\n+                \"Access denied for {}. Not enough permissions to drop these databases: {}\",\n+                \"SYSTEM DROP REPLICA\",\n+                fmt::join(required_access, \", \"));\n+\n+        /// If we are here, then the user has the necassary access to drop the replica, continue with the operation.\n         for (auto & elem : databases)\n         {\n             DatabasePtr & database = elem.second;\n             for (auto iterator = database->getTablesIterator(getContext()); iterator->isValid(); iterator->next())\n             {\n-                if (!access_is_granted_globally && !access->isGranted(AccessType::SYSTEM_DROP_REPLICA, elem.first, iterator->name()))\n-                {\n-                    LOG_INFO(log, \"Access {} denied, skipping {}.{}\", \"SYSTEM DROP REPLICA\", elem.first, iterator->name());\n-                    continue;\n-                }\n                 dropReplicaImpl(query, iterator->table());\n             }\n             LOG_TRACE(log, \"Dropped replica {} from database {}\", query.replica, backQuoteIfNeed(database->getDatabaseName()));\n",
  "test_patch": "diff --git a/tests/integration/test_permissions_drop_replica/__init__.py b/tests/integration/test_permissions_drop_replica/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_permissions_drop_replica/configs/remote_servers.xml b/tests/integration/test_permissions_drop_replica/configs/remote_servers.xml\nnew file mode 100644\nindex 000000000000..84d162060807\n--- /dev/null\n+++ b/tests/integration/test_permissions_drop_replica/configs/remote_servers.xml\n@@ -0,0 +1,16 @@\n+<clickhouse>\n+    <remote_servers>\n+        <cluster>\n+            <shard>\n+                <replica>\n+                    <host>node1</host>\n+                    <port>9000</port>\n+                </replica>\n+                <replica>\n+                    <host>node2</host>\n+                    <port>9000</port>\n+                </replica>\n+            </shard>\n+        </cluster>\n+    </remote_servers>\n+</clickhouse>\ndiff --git a/tests/integration/test_permissions_drop_replica/configs/zookeeper.xml b/tests/integration/test_permissions_drop_replica/configs/zookeeper.xml\nnew file mode 100644\nindex 000000000000..d23bf1625cee\n--- /dev/null\n+++ b/tests/integration/test_permissions_drop_replica/configs/zookeeper.xml\n@@ -0,0 +1,19 @@\n+\n+<clickhouse>\n+    <zookeeper>\n+        <node index=\"1\">\n+            <host>zoo1</host>\n+            <port>2181</port>\n+        </node>\n+        <node index=\"2\">\n+            <host>zoo2</host>\n+            <port>2181</port>\n+        </node>\n+            <node index=\"3\">\n+            <host>zoo3</host>\n+            <port>2181</port>\n+        </node>\n+        <session_timeout_ms>20000</session_timeout_ms>\n+    </zookeeper>\n+</clickhouse>\n+    \ndiff --git a/tests/integration/test_permissions_drop_replica/test.py b/tests/integration/test_permissions_drop_replica/test.py\nnew file mode 100644\nindex 000000000000..7b1e2175af85\n--- /dev/null\n+++ b/tests/integration/test_permissions_drop_replica/test.py\n@@ -0,0 +1,65 @@\n+import pytest\n+\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__, zookeeper_config_path=\"configs/zookeeper.xml\")\n+\n+main_configs = [\n+    \"configs/remote_servers.xml\",\n+]\n+\n+node1 = cluster.add_instance(\n+    \"node1\",\n+    main_configs=main_configs,\n+    macros={\"replica\": \"node1\", \"shard\": \"shard1\"},\n+    with_zookeeper=True,\n+)\n+\n+node2 = cluster.add_instance(\n+    \"node2\",\n+    main_configs=main_configs,\n+    macros={\"replica\": \"node2\", \"shard\": \"shard2\"},\n+    with_zookeeper=True,\n+)\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def start_cluster():\n+    try:\n+        cluster.start()\n+        yield cluster\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def test_drop_permissions(start_cluster):\n+    node1.query(\"DROP DATABASE IF EXISTS r\")\n+    node1.query(\n+        f\"CREATE DATABASE r ENGINE=Replicated('/clickhouse/databases/r', '{{shard}}', '{{replica}}')\"\n+    )\n+    node1.query(\n+        \"CREATE TABLE r.t1 (x UInt8, y String) ENGINE=ReplicatedMergeTree ORDER BY x\"\n+    )\n+    # create user without any permissions\n+    node1.query(\"CREATE USER foo;\")\n+    node1.query(\"REVOKE ALL ON *.* FROM foo;\")\n+    # try dropping replica using this user without any permissions\n+    got_error = node1.query_and_get_error(\"SYSTEM DROP REPLICA 'node2'\", user=\"foo\")\n+    # this operation should not fail silently\n+    assert (\n+        \"DB::Exception: Access denied for SYSTEM DROP REPLICA. Not enough permissions to drop these databases:\"\n+        in got_error\n+    )\n+    # assert that the replica still exists\n+    assert (\n+        node1.query(\"SELECT host_name FROM system.clusters WHERE replica_num=1\") != \"\"\n+    )\n+    # now query using default user (should have necessary permissions)\n+    node1.query(\"SYSTEM DROP REPLICA 'node2'\", user=\"default\")\n+    # assert that the replica was dropped successfully\n+    assert (\n+        node1.query(\"SELECT host_name FROM system.clusters WHERE replica_num=3\").strip()\n+        == \"\"\n+    )\n+    node1.query(\"DROP USER foo;\")\n+    node1.query(\"DROP DATABASE r\")\n",
  "problem_statement": "RBAC `SYSTEM DROP REPLICA` does not return exception.\n**Describe what's wrong**\r\nWhen user without privilege tries to execute SYSTEM DROP REPLICA, it does not return an exception, even if the query would return an exception to a user with privilege.\r\n\r\n* Which ClickHouse server version to use\r\n22.6.1.1985-alpine\r\n\r\n* Queries to run that lead to unexpected result\r\ndefault user:\r\n```\r\nclickhouse1 :) system drop replica 'clickhouse1'\r\n\r\nSYSTEM DROP REPLICA 'clickhouse1'\r\n\r\nQuery id: 620c49a3-6a67-4599-8d6d-9c1d3e51ebab\r\n\r\n\r\n0 rows in set. Elapsed: 0.003 sec. \r\n\r\nReceived exception from server (version 22.6.1):\r\nCode: 305. DB::Exception: Received from localhost:9000. DB::Exception: We can't drop local replica, please use `DROP TABLE` if you want to clean the data and drop this replica. (TABLE_WAS_NOT_DROPPED)\r\n```\r\n\r\nuser with no privileges:\r\n```\r\nConnecting to localhost:9000 as user user0.\r\nConnected to ClickHouse server version 22.6.1 revision 54455.\r\n\r\nclickhouse1 :) system drop replica 'clickhouse1'\r\n\r\nSYSTEM DROP REPLICA 'clickhouse1'\r\n\r\nQuery id: f777a502-e469-4791-87b4-ce749b73a17d\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.001 sec. \r\n\r\n```\r\n**Expected behavior**\r\nAn exception clarifying what grants the user needs.\n",
  "hints_text": "Seems like it's intentionally done this way:\r\nhttps://github.com/ClickHouse/ClickHouse/blob/6fbd49f55437bb2a2f914af4bb7c2cc9b3a6bd4d/src/Interpreters/InterpreterSystemQuery.cpp#L651-L666\r\n\r\nAnd we have the same behavior for `SYSTEM RESTART REPLICAS` (actually it's where this code was copy-pasted from)",
  "created_at": "2025-01-31T19:04:26Z",
  "modified_files": [
    "src/Interpreters/InterpreterSystemQuery.cpp"
  ],
  "modified_test_files": [
    "b/tests/integration/test_permissions_drop_replica/configs/remote_servers.xml",
    "b/tests/integration/test_permissions_drop_replica/configs/zookeeper.xml",
    "b/tests/integration/test_permissions_drop_replica/test.py"
  ]
}