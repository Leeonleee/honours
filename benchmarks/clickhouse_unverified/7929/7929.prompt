You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
UNION ALL causes segmentation fault with version 19.13.3.26
the following query will cause segmentation fault:
```
select
	1 as c1,
	2 as c2,
	3 as c3
union all
(
	select 
		1 as c1,
		2 as c2,
		3 as c3
	union all
	select
		1 as c1,
		2 as c2
)
```

```
2019.10.11 16:53:45.963659 [ 6315 ] {} <Error> BaseDaemon: ########################################
2019.10.11 16:53:45.963729 [ 6315 ] {} <Error> BaseDaemon: (version 19.13.3.26) (from thread 624) Received signal Segmentation fault (11).
2019.10.11 16:53:45.963748 [ 6315 ] {} <Error> BaseDaemon: Address: 0xfffffffffffffff8 Access: read. Address not mapped to object.
2019.10.11 16:53:46.020583 [ 6315 ] {} <Error> BaseDaemon: 0. clickhouse-server(StackTrace::StackTrace(ucontext const&)+0x30) [0x6f29000]
1. clickhouse-server() [0x327ebf5]
2. /lib64/libpthread.so.0(+0xf6d0) [0x7fbc6a2b76d0]
3. clickhouse-server(DB::isColumnConst(DB::IColumn const&)+0xa) [0x5f61a4a]
4. clickhouse-server(DB::getLeastSuperColumn(std::vector<DB::ColumnWithTypeAndName const*, std::allocator<DB::ColumnWithTypeAndName const*> >)+0x1bd) [0x5f62fcd]
5. clickhouse-server(DB::InterpreterSelectWithUnionQuery::getCommonHeaderForUnion(std::vector<DB::Block, std::allocator<DB::Block> > const&)+0x2ab) [0x5dc626b]
6. clickhouse-server(DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::vector<std::string, std::allocator<std::string> > const&)+0xa09) [0x5dc8799]
7. clickhouse-server(DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, DB::Context&, DB::QueryProcessingStage::Enum)+0x120) [0x5d92d10]
8. clickhouse-server() [0x5ebbdb1]
9. clickhouse-server(DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::function<void (std::string const&)>, std::function<void (std::string const&)>)+0x1ef) [0x5ebe74f]
10. clickhouse-server(DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&)+0x16dc) [0x31b1c7c]
11. clickhouse-server(DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&)+0x443) [0x31b4e33]
12. clickhouse-server(Poco::Net::HTTPServerConnection::run()+0x2af) [0x6a778ef]
13. clickhouse-server(Poco::Net::TCPServerConnection::start()+0xf) [0x6a6e63f]
14. clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0x166) [0x6a6ea06]
15. clickhouse-server(Poco::PooledThread::run()+0x77) [0x70fdee7]
16. clickhouse-server(Poco::ThreadImpl::runnableEntry(void*)+0x38) [0x70fa0a8]
17. clickhouse-server() [0x76cc0ff]
18. /lib64/libpthread.so.0(+0x7e25) [0x7fbc6a2afe25]
19. /lib64/libc.so.6(clone+0x6d) [0x7fbc69cd7bad]
```

it seems that there is  a bug when checking the number of columns in UNION ALL elements in  InterpreterSelectWithUnionQuery.

After the following changes were made in sql, the check of columns was successful.

```
select
	1 as c1,
	2 as c2,
	3 as c3
union all
(
	select 
		1 as c1,
		2 as c2
	union all
	select
		1 as c1,
		2 as c2,
		3 as c3

)

```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
