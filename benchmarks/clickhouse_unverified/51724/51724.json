{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 51724,
  "instance_id": "ClickHouse__ClickHouse-51724",
  "issue_numbers": [
    "44032"
  ],
  "base_commit": "97329981119ac6cc17e8a565df645d560f756193",
  "patch": "diff --git a/docs/en/operations/settings/query-complexity.md b/docs/en/operations/settings/query-complexity.md\nindex 163ed5d58260..3af368b87a74 100644\n--- a/docs/en/operations/settings/query-complexity.md\n+++ b/docs/en/operations/settings/query-complexity.md\n@@ -327,3 +327,39 @@ The maximum amount of data consumed by temporary files on disk in bytes for all\n Zero means unlimited.\n \n Default value: 0.\n+\n+## max_sessions_for_user {#max-sessions-per-user}\n+\n+Maximum number of simultaneous sessions per authenticated user to the ClickHouse server.\n+\n+Example:\n+\n+``` xml\n+<profiles>\n+    <single_session_profile>\n+        <max_sessions_for_user>1</max_sessions_for_user>\n+    </single_session_profile>\n+    <two_sessions_profile>\n+        <max_sessions_for_user>2</max_sessions_for_user>\n+    </two_sessions_profile>\n+    <unlimited_sessions_profile>\n+        <max_sessions_for_user>0</max_sessions_for_user>\n+    </unlimited_sessions_profile>\n+</profiles>\n+<users>\n+     <!-- User Alice can connect to a ClickHouse server no more than once at a time. -->\n+    <Alice>\n+        <profile>single_session_user</profile>\n+    </Alice>\n+    <!-- User Bob can use 2 simultaneous sessions. -->\n+    <Bob>\n+        <profile>two_sessions_profile</profile>\n+    </Bob>\n+    <!-- User Charles can use arbitrarily many of simultaneous sessions. -->\n+    <Charles>\n+       <profile>unlimited_sessions_profile</profile>\n+    </Charles>\n+</users>\n+```\n+\n+Default value: 0 (Infinite count of simultaneous sessions).\ndiff --git a/docs/en/operations/settings/settings-profiles.md b/docs/en/operations/settings/settings-profiles.md\nindex 2f39a75453c4..d08266b8ef8a 100644\n--- a/docs/en/operations/settings/settings-profiles.md\n+++ b/docs/en/operations/settings/settings-profiles.md\n@@ -39,7 +39,7 @@ Example:\n         <max_threads>8</max_threads>\n     </default>\n \n-    <!-- Settings for quries from the user interface -->\n+    <!-- Settings for queries from the user interface -->\n     <web>\n         <max_rows_to_read>1000000000</max_rows_to_read>\n         <max_bytes_to_read>100000000000</max_bytes_to_read>\n@@ -67,6 +67,8 @@ Example:\n         <max_ast_depth>50</max_ast_depth>\n         <max_ast_elements>100</max_ast_elements>\n \n+        <max_sessions_for_user>4</max_sessions_for_user>\n+\n         <readonly>1</readonly>\n     </web>\n </profiles>\ndiff --git a/docs/ru/operations/settings/query-complexity.md b/docs/ru/operations/settings/query-complexity.md\nindex de9bb9690858..5f3f4b74f51c 100644\n--- a/docs/ru/operations/settings/query-complexity.md\n+++ b/docs/ru/operations/settings/query-complexity.md\n@@ -314,3 +314,40 @@ FORMAT Null;\n \u041f\u0440\u0438 \u0432\u0441\u0442\u0430\u0432\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, ClickHouse \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0439 \u0432\u043e \u0432\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u043e\u043c \u0431\u043b\u043e\u043a\u0435. \u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043f\u0430\u0440\u0442\u0438\u0446\u0438\u0439 \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c `max_partitions_per_insert_block`, ClickHouse \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0442\u0435\u043a\u0441\u0442\u043e\u043c:\n \n > \u00abToo many partitions for single INSERT block (more than\u00bb + toString(max_parts) + \u00ab). The limit is controlled by \u2018max_partitions_per_insert_block\u2019 setting. Large number of partitions is a common misconception. It will lead to severe negative performance impact, including slow server startup, slow INSERT queries and slow SELECT queries. Recommended total number of partitions for a table is under 1000..10000. Please note, that partitioning is not intended to speed up SELECT queries (ORDER BY key is sufficient to make range queries fast). Partitions are intended for data manipulation (DROP PARTITION, etc).\u00bb\n+\n+## max_sessions_for_user {#max-sessions-per-user}\n+\n+\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439 \u043d\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u0446\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f.\n+\n+\u041f\u0440\u0438\u043c\u0435\u0440:\n+\n+``` xml\n+<profiles>\n+    <single_session_profile>\n+        <max_sessions_for_user>1</max_sessions_for_user>\n+    </single_session_profile>\n+    <two_sessions_profile>\n+        <max_sessions_for_user>2</max_sessions_for_user>\n+    </two_sessions_profile>\n+    <unlimited_sessions_profile>\n+        <max_sessions_for_user>0</max_sessions_for_user>\n+    </unlimited_sessions_profile>\n+</profiles>\n+<users>\n+     <!-- \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c Alice \u043c\u043e\u0436\u0435\u0442 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f \u043d\u0435\n+          \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0430 \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443 ClickHouse. -->\n+    <Alice>\n+        <profile>single_session_profile</profile>\n+    </Alice>\n+    <!-- \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c Bob \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c 2 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0438. -->\n+    <Bob>\n+        <profile>two_sessions_profile</profile>\n+    </Bob>\n+    <!-- \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c Charles \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u043b\u044e\u0431\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445 \u0441\u0435\u0441\u0441\u0438\u0439. -->\n+    <Charles>\n+       <profile>unlimited_sessions_profile</profile>\n+    </Charles>\n+</users>\n+```\n+\n+\u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e: 0 (\u043d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0435\u0441\u0441\u0438\u0439).\ndiff --git a/docs/ru/operations/settings/settings-profiles.md b/docs/ru/operations/settings/settings-profiles.md\nindex ba2cb9a601ff..0d094c637ac1 100644\n--- a/docs/ru/operations/settings/settings-profiles.md\n+++ b/docs/ru/operations/settings/settings-profiles.md\n@@ -39,7 +39,7 @@ SET profile = 'web'\n         <max_threads>8</max_threads>\n     </default>\n \n-    <!-- Settings for quries from the user interface -->\n+    <!-- Settings for queries from the user interface -->\n     <web>\n         <max_rows_to_read>1000000000</max_rows_to_read>\n         <max_bytes_to_read>100000000000</max_bytes_to_read>\n@@ -67,6 +67,7 @@ SET profile = 'web'\n         <max_ast_depth>50</max_ast_depth>\n         <max_ast_elements>100</max_ast_elements>\n \n+        <max_sessions_for_user>4</max_sessions_for_user>\n         <readonly>1</readonly>\n     </web>\n </profiles>\ndiff --git a/src/Access/ContextAccess.cpp b/src/Access/ContextAccess.cpp\nindex 9e9d86445394..e277c49e39d7 100644\n--- a/src/Access/ContextAccess.cpp\n+++ b/src/Access/ContextAccess.cpp\n@@ -328,9 +328,6 @@ void ContextAccess::setRolesInfo(const std::shared_ptr<const EnabledRolesInfo> &\n \n     enabled_row_policies = access_control->getEnabledRowPolicies(*params.user_id, roles_info->enabled_roles);\n \n-    enabled_quota = access_control->getEnabledQuota(\n-        *params.user_id, user_name, roles_info->enabled_roles, params.address, params.forwarded_address, params.quota_key);\n-\n     enabled_settings = access_control->getEnabledSettings(\n         *params.user_id, user->settings, roles_info->enabled_roles, roles_info->settings_from_enabled_roles);\n \n@@ -416,19 +413,32 @@ RowPolicyFilterPtr ContextAccess::getRowPolicyFilter(const String & database, co\n std::shared_ptr<const EnabledQuota> ContextAccess::getQuota() const\n {\n     std::lock_guard lock{mutex};\n-    if (enabled_quota)\n-        return enabled_quota;\n-    static const auto unlimited_quota = EnabledQuota::getUnlimitedQuota();\n-    return unlimited_quota;\n+\n+    if (!enabled_quota)\n+    {\n+        if (roles_info)\n+        {\n+            enabled_quota = access_control->getEnabledQuota(*params.user_id,\n+                                                            user_name,\n+                                                            roles_info->enabled_roles,\n+                                                            params.address,\n+                                                            params.forwarded_address,\n+                                                            params.quota_key);\n+        }\n+        else\n+        {\n+            static const auto unlimited_quota = EnabledQuota::getUnlimitedQuota();\n+            return unlimited_quota;\n+        }\n+    }\n+\n+    return enabled_quota;\n }\n \n \n std::optional<QuotaUsage> ContextAccess::getQuotaUsage() const\n {\n-    std::lock_guard lock{mutex};\n-    if (enabled_quota)\n-        return enabled_quota->getUsage();\n-    return {};\n+    return getQuota()->getUsage();\n }\n \n \ndiff --git a/src/Access/SettingsConstraints.cpp b/src/Access/SettingsConstraints.cpp\nindex 12f584cab839..74c6bbe03536 100644\n--- a/src/Access/SettingsConstraints.cpp\n+++ b/src/Access/SettingsConstraints.cpp\n@@ -1,4 +1,5 @@\n #include <string_view>\n+#include <unordered_map>\n #include <Access/SettingsConstraints.h>\n #include <Access/resolveSetting.h>\n #include <Access/AccessControl.h>\n@@ -6,6 +7,7 @@\n #include <Storages/MergeTree/MergeTreeSettings.h>\n #include <Common/FieldVisitorToString.h>\n #include <Common/FieldVisitorsAccurateComparison.h>\n+#include <Common/SettingSource.h>\n #include <IO/WriteHelpers.h>\n #include <Poco/Util/AbstractConfiguration.h>\n #include <boost/range/algorithm_ext/erase.hpp>\n@@ -20,6 +22,39 @@ namespace ErrorCodes\n     extern const int UNKNOWN_SETTING;\n }\n \n+namespace\n+{\n+struct SettingSourceRestrictions\n+{\n+    constexpr SettingSourceRestrictions() { allowed_sources.set(); }\n+\n+    constexpr SettingSourceRestrictions(std::initializer_list<SettingSource> allowed_sources_)\n+    {\n+        for (auto allowed_source : allowed_sources_)\n+            setSourceAllowed(allowed_source, true);\n+    }\n+\n+    constexpr bool isSourceAllowed(SettingSource source) { return allowed_sources[source]; }\n+    constexpr void setSourceAllowed(SettingSource source, bool allowed) { allowed_sources[source] = allowed; }\n+\n+    std::bitset<SettingSource::COUNT> allowed_sources;\n+};\n+\n+const std::unordered_map<std::string_view, SettingSourceRestrictions> SETTINGS_SOURCE_RESTRICTIONS = {\n+    {\"max_sessions_for_user\", {SettingSource::PROFILE}},\n+};\n+\n+SettingSourceRestrictions getSettingSourceRestrictions(std::string_view name)\n+{\n+    auto settingConstraintIter = SETTINGS_SOURCE_RESTRICTIONS.find(name);\n+    if (settingConstraintIter != SETTINGS_SOURCE_RESTRICTIONS.end())\n+        return settingConstraintIter->second;\n+    else\n+        return SettingSourceRestrictions(); // allows everything\n+}\n+\n+}\n+\n SettingsConstraints::SettingsConstraints(const AccessControl & access_control_) : access_control(&access_control_)\n {\n }\n@@ -98,7 +133,7 @@ void SettingsConstraints::merge(const SettingsConstraints & other)\n }\n \n \n-void SettingsConstraints::check(const Settings & current_settings, const SettingsProfileElements & profile_elements) const\n+void SettingsConstraints::check(const Settings & current_settings, const SettingsProfileElements & profile_elements, SettingSource source) const\n {\n     for (const auto & element : profile_elements)\n     {\n@@ -108,19 +143,19 @@ void SettingsConstraints::check(const Settings & current_settings, const Setting\n         if (element.value)\n         {\n             SettingChange value(element.setting_name, *element.value);\n-            check(current_settings, value);\n+            check(current_settings, value, source);\n         }\n \n         if (element.min_value)\n         {\n             SettingChange value(element.setting_name, *element.min_value);\n-            check(current_settings, value);\n+            check(current_settings, value, source);\n         }\n \n         if (element.max_value)\n         {\n             SettingChange value(element.setting_name, *element.max_value);\n-            check(current_settings, value);\n+            check(current_settings, value, source);\n         }\n \n         SettingConstraintWritability new_value = SettingConstraintWritability::WRITABLE;\n@@ -142,24 +177,24 @@ void SettingsConstraints::check(const Settings & current_settings, const Setting\n     }\n }\n \n-void SettingsConstraints::check(const Settings & current_settings, const SettingChange & change) const\n+void SettingsConstraints::check(const Settings & current_settings, const SettingChange & change, SettingSource source) const\n {\n-    checkImpl(current_settings, const_cast<SettingChange &>(change), THROW_ON_VIOLATION);\n+    checkImpl(current_settings, const_cast<SettingChange &>(change), THROW_ON_VIOLATION, source);\n }\n \n-void SettingsConstraints::check(const Settings & current_settings, const SettingsChanges & changes) const\n+void SettingsConstraints::check(const Settings & current_settings, const SettingsChanges & changes, SettingSource source) const\n {\n     for (const auto & change : changes)\n-        check(current_settings, change);\n+        check(current_settings, change, source);\n }\n \n-void SettingsConstraints::check(const Settings & current_settings, SettingsChanges & changes) const\n+void SettingsConstraints::check(const Settings & current_settings, SettingsChanges & changes, SettingSource source) const\n {\n     boost::range::remove_erase_if(\n         changes,\n         [&](SettingChange & change) -> bool\n         {\n-            return !checkImpl(current_settings, const_cast<SettingChange &>(change), THROW_ON_VIOLATION);\n+            return !checkImpl(current_settings, const_cast<SettingChange &>(change), THROW_ON_VIOLATION, source);\n         });\n }\n \n@@ -174,13 +209,13 @@ void SettingsConstraints::check(const MergeTreeSettings & current_settings, cons\n         check(current_settings, change);\n }\n \n-void SettingsConstraints::clamp(const Settings & current_settings, SettingsChanges & changes) const\n+void SettingsConstraints::clamp(const Settings & current_settings, SettingsChanges & changes, SettingSource source) const\n {\n     boost::range::remove_erase_if(\n         changes,\n         [&](SettingChange & change) -> bool\n         {\n-            return !checkImpl(current_settings, change, CLAMP_ON_VIOLATION);\n+            return !checkImpl(current_settings, change, CLAMP_ON_VIOLATION, source);\n         });\n }\n \n@@ -215,7 +250,10 @@ bool getNewValueToCheck(const T & current_settings, SettingChange & change, Fiel\n     return true;\n }\n \n-bool SettingsConstraints::checkImpl(const Settings & current_settings, SettingChange & change, ReactionOnViolation reaction) const\n+bool SettingsConstraints::checkImpl(const Settings & current_settings,\n+                                    SettingChange & change,\n+                                    ReactionOnViolation reaction,\n+                                    SettingSource source) const\n {\n     std::string_view setting_name = Settings::Traits::resolveName(change.name);\n \n@@ -247,7 +285,7 @@ bool SettingsConstraints::checkImpl(const Settings & current_settings, SettingCh\n     if (!getNewValueToCheck(current_settings, change, new_value, reaction == THROW_ON_VIOLATION))\n         return false;\n \n-    return getChecker(current_settings, setting_name).check(change, new_value, reaction);\n+    return getChecker(current_settings, setting_name).check(change, new_value, reaction, source);\n }\n \n bool SettingsConstraints::checkImpl(const MergeTreeSettings & current_settings, SettingChange & change, ReactionOnViolation reaction) const\n@@ -255,10 +293,13 @@ bool SettingsConstraints::checkImpl(const MergeTreeSettings & current_settings,\n     Field new_value;\n     if (!getNewValueToCheck(current_settings, change, new_value, reaction == THROW_ON_VIOLATION))\n         return false;\n-    return getMergeTreeChecker(change.name).check(change, new_value, reaction);\n+    return getMergeTreeChecker(change.name).check(change, new_value, reaction, SettingSource::QUERY);\n }\n \n-bool SettingsConstraints::Checker::check(SettingChange & change, const Field & new_value, ReactionOnViolation reaction) const\n+bool SettingsConstraints::Checker::check(SettingChange & change,\n+                                         const Field & new_value,\n+                                         ReactionOnViolation reaction,\n+                                         SettingSource source) const\n {\n     if (!explain.empty())\n     {\n@@ -326,6 +367,14 @@ bool SettingsConstraints::Checker::check(SettingChange & change, const Field & n\n             change.value = max_value;\n     }\n \n+    if (!getSettingSourceRestrictions(setting_name).isSourceAllowed(source))\n+    {\n+        if (reaction == THROW_ON_VIOLATION)\n+            throw Exception(ErrorCodes::READONLY, \"Setting {} is not allowed to be set by {}\", setting_name, toString(source));\n+        else\n+            return false;\n+    }\n+\n     return true;\n }\n \ndiff --git a/src/Access/SettingsConstraints.h b/src/Access/SettingsConstraints.h\nindex 667d57a90aed..d09e60cc9d5c 100644\n--- a/src/Access/SettingsConstraints.h\n+++ b/src/Access/SettingsConstraints.h\n@@ -2,6 +2,7 @@\n \n #include <Access/SettingsProfileElement.h>\n #include <Common/SettingsChanges.h>\n+#include <Common/SettingSource.h>\n #include <unordered_map>\n \n namespace Poco::Util\n@@ -73,17 +74,18 @@ class SettingsConstraints\n     void merge(const SettingsConstraints & other);\n \n     /// Checks whether `change` violates these constraints and throws an exception if so.\n-    void check(const Settings & current_settings, const SettingsProfileElements & profile_elements) const;\n-    void check(const Settings & current_settings, const SettingChange & change) const;\n-    void check(const Settings & current_settings, const SettingsChanges & changes) const;\n-    void check(const Settings & current_settings, SettingsChanges & changes) const;\n+    void check(const Settings & current_settings, const SettingsProfileElements & profile_elements, SettingSource source) const;\n+    void check(const Settings & current_settings, const SettingChange & change, SettingSource source) const;\n+    void check(const Settings & current_settings, const SettingsChanges & changes, SettingSource source) const;\n+    void check(const Settings & current_settings, SettingsChanges & changes, SettingSource source) const;\n \n     /// Checks whether `change` violates these constraints and throws an exception if so. (setting short name is expected inside `changes`)\n     void check(const MergeTreeSettings & current_settings, const SettingChange & change) const;\n     void check(const MergeTreeSettings & current_settings, const SettingsChanges & changes) const;\n \n     /// Checks whether `change` violates these and clamps the `change` if so.\n-    void clamp(const Settings & current_settings, SettingsChanges & changes) const;\n+    void clamp(const Settings & current_settings, SettingsChanges & changes, SettingSource source) const;\n+\n \n     friend bool operator ==(const SettingsConstraints & left, const SettingsConstraints & right);\n     friend bool operator !=(const SettingsConstraints & left, const SettingsConstraints & right) { return !(left == right); }\n@@ -133,7 +135,10 @@ class SettingsConstraints\n         {}\n \n         // Perform checking\n-        bool check(SettingChange & change, const Field & new_value, ReactionOnViolation reaction) const;\n+        bool check(SettingChange & change,\n+                   const Field & new_value,\n+                   ReactionOnViolation reaction,\n+                   SettingSource source) const;\n     };\n \n     struct StringHash\n@@ -145,7 +150,11 @@ class SettingsConstraints\n         }\n     };\n \n-    bool checkImpl(const Settings & current_settings, SettingChange & change, ReactionOnViolation reaction) const;\n+    bool checkImpl(const Settings & current_settings,\n+                  SettingChange & change,\n+                  ReactionOnViolation reaction,\n+                  SettingSource source) const;\n+\n     bool checkImpl(const MergeTreeSettings & current_settings, SettingChange & change, ReactionOnViolation reaction) const;\n \n     Checker getChecker(const Settings & current_settings, std::string_view setting_name) const;\ndiff --git a/src/Client/Suggest.cpp b/src/Client/Suggest.cpp\nindex 1723f85dc161..00e0ebd8b918 100644\n--- a/src/Client/Suggest.cpp\n+++ b/src/Client/Suggest.cpp\n@@ -124,6 +124,9 @@ void Suggest::load(ContextPtr context, const ConnectionParameters & connection_p\n                 if (e.code() == ErrorCodes::DEADLOCK_AVOIDED)\n                     continue;\n \n+                /// Client can successfully connect to the server and\n+                /// get ErrorCodes::USER_SESSION_LIMIT_EXCEEDED for suggestion connection.\n+\n                 /// We should not use std::cerr here, because this method works concurrently with the main thread.\n                 /// WriteBufferFromFileDescriptor will write directly to the file descriptor, avoiding data race on std::cerr.\n \ndiff --git a/src/Common/ErrorCodes.cpp b/src/Common/ErrorCodes.cpp\nindex ae8d5f8796d8..393486f805ce 100644\n--- a/src/Common/ErrorCodes.cpp\n+++ b/src/Common/ErrorCodes.cpp\n@@ -582,6 +582,7 @@\n     M(697, CANNOT_RESTORE_TO_NONENCRYPTED_DISK) \\\n     M(698, INVALID_REDIS_STORAGE_TYPE) \\\n     M(699, INVALID_REDIS_TABLE_STRUCTURE) \\\n+    M(700, USER_SESSION_LIMIT_EXCEEDED) \\\n     \\\n     M(999, KEEPER_EXCEPTION) \\\n     M(1000, POCO_EXCEPTION) \\\ndiff --git a/src/Common/SettingSource.h b/src/Common/SettingSource.h\nnew file mode 100644\nindex 000000000000..38e1bcae2955\n--- /dev/null\n+++ b/src/Common/SettingSource.h\n@@ -0,0 +1,43 @@\n+#pragma once\n+\n+#include <string_view>\n+\n+namespace DB\n+{\n+    enum SettingSource\n+    {\n+        /// Query or session change:\n+        /// SET <setting> = <value>\n+        /// SELECT ... SETTINGS [<setting> = <value]\n+        QUERY,\n+\n+        /// Profile creation or altering:\n+        /// CREATE SETTINGS PROFILE ... SETTINGS [<setting> = <value]\n+        /// ALTER SETTINGS PROFILE ... SETTINGS [<setting> = <value]\n+        PROFILE,\n+\n+        /// Role creation or altering:\n+        /// CREATE ROLE ... SETTINGS [<setting> = <value>]\n+        /// ALTER ROLE ... SETTINGS [<setting> = <value]\n+        ROLE,\n+\n+        /// User creation or altering:\n+        /// CREATE USER ... SETTINGS [<setting> = <value>]\n+        /// ALTER USER ... SETTINGS [<setting> = <value]\n+        USER,\n+\n+        COUNT,\n+    };\n+\n+    constexpr std::string_view toString(SettingSource source)\n+    {\n+        switch (source)\n+        {\n+            case SettingSource::QUERY: return \"query\";\n+            case SettingSource::PROFILE: return \"profile\";\n+            case SettingSource::USER: return \"user\";\n+            case SettingSource::ROLE: return \"role\";\n+            default: return \"unknown\";\n+        }\n+    }\n+}\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 26e0808aaa38..c142096ef5aa 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -386,6 +386,8 @@ class IColumn;\n     M(UInt64, max_temporary_columns, 0, \"If a query generates more than the specified number of temporary columns in memory as a result of intermediate calculation, exception is thrown. Zero value means unlimited. This setting is useful to prevent too complex queries.\", 0) \\\n     M(UInt64, max_temporary_non_const_columns, 0, \"Similar to the 'max_temporary_columns' setting but applies only to non-constant columns. This makes sense, because constant columns are cheap and it is reasonable to allow more of them.\", 0) \\\n     \\\n+    M(UInt64, max_sessions_for_user, 0, \"Maximum number of simultaneous sessions for a user.\", 0) \\\n+    \\\n     M(UInt64, max_subquery_depth, 100, \"If a query has more than specified number of nested subqueries, throw an exception. This allows you to have a sanity check to protect the users of your cluster from going insane with their queries.\", 0) \\\n     M(UInt64, max_analyze_depth, 5000, \"Maximum number of analyses performed by interpreter.\", 0) \\\n     M(UInt64, max_ast_depth, 1000, \"Maximum depth of query syntax tree. Checked after parsing.\", 0) \\\ndiff --git a/src/Interpreters/Access/InterpreterCreateRoleQuery.cpp b/src/Interpreters/Access/InterpreterCreateRoleQuery.cpp\nindex 3386dfb8792a..2b22857d5def 100644\n--- a/src/Interpreters/Access/InterpreterCreateRoleQuery.cpp\n+++ b/src/Interpreters/Access/InterpreterCreateRoleQuery.cpp\n@@ -46,7 +46,7 @@ BlockIO InterpreterCreateRoleQuery::execute()\n         settings_from_query = SettingsProfileElements{*query.settings, access_control};\n \n         if (!query.attach)\n-            getContext()->checkSettingsConstraints(*settings_from_query);\n+            getContext()->checkSettingsConstraints(*settings_from_query, SettingSource::ROLE);\n     }\n \n     if (!query.cluster.empty())\ndiff --git a/src/Interpreters/Access/InterpreterCreateSettingsProfileQuery.cpp b/src/Interpreters/Access/InterpreterCreateSettingsProfileQuery.cpp\nindex 0727b6f2182d..8a79bab0b0d9 100644\n--- a/src/Interpreters/Access/InterpreterCreateSettingsProfileQuery.cpp\n+++ b/src/Interpreters/Access/InterpreterCreateSettingsProfileQuery.cpp\n@@ -54,7 +54,7 @@ BlockIO InterpreterCreateSettingsProfileQuery::execute()\n         settings_from_query = SettingsProfileElements{*query.settings, access_control};\n \n         if (!query.attach)\n-            getContext()->checkSettingsConstraints(*settings_from_query);\n+            getContext()->checkSettingsConstraints(*settings_from_query, SettingSource::PROFILE);\n     }\n \n     if (!query.cluster.empty())\ndiff --git a/src/Interpreters/Access/InterpreterCreateUserQuery.cpp b/src/Interpreters/Access/InterpreterCreateUserQuery.cpp\nindex 165937560ccf..475ee2705061 100644\n--- a/src/Interpreters/Access/InterpreterCreateUserQuery.cpp\n+++ b/src/Interpreters/Access/InterpreterCreateUserQuery.cpp\n@@ -133,7 +133,7 @@ BlockIO InterpreterCreateUserQuery::execute()\n         settings_from_query = SettingsProfileElements{*query.settings, access_control};\n \n         if (!query.attach)\n-            getContext()->checkSettingsConstraints(*settings_from_query);\n+            getContext()->checkSettingsConstraints(*settings_from_query, SettingSource::USER);\n     }\n \n     if (!query.cluster.empty())\ndiff --git a/src/Interpreters/Context.cpp b/src/Interpreters/Context.cpp\nindex d1b88988e5e5..b10f85a21975 100644\n--- a/src/Interpreters/Context.cpp\n+++ b/src/Interpreters/Context.cpp\n@@ -45,6 +45,7 @@\n #include <Interpreters/Cache/QueryCache.h>\n #include <Interpreters/Cache/FileCacheFactory.h>\n #include <Interpreters/Cache/FileCache.h>\n+#include <Interpreters/SessionTracker.h>\n #include <Core/ServerSettings.h>\n #include <Interpreters/PreparedSets.h>\n #include <Core/Settings.h>\n@@ -158,6 +159,7 @@ namespace CurrentMetrics\n     extern const Metric IOWriterThreadsActive;\n }\n \n+\n namespace DB\n {\n \n@@ -276,6 +278,7 @@ struct ContextSharedPart : boost::noncopyable\n     mutable QueryCachePtr query_cache;         /// Cache of query results.\n     mutable MMappedFileCachePtr mmap_cache; /// Cache of mmapped files to avoid frequent open/map/unmap/close and to reuse from several threads.\n     ProcessList process_list;                               /// Executing queries at the moment.\n+    SessionTracker session_tracker;\n     GlobalOvercommitTracker global_overcommit_tracker;\n     MergeList merge_list;                                   /// The list of executable merge (for (Replicated)?MergeTree)\n     MovesList moves_list;                                   /// The list of executing moves (for (Replicated)?MergeTree)\n@@ -739,6 +742,9 @@ std::unique_lock<std::recursive_mutex> Context::getLock() const\n ProcessList & Context::getProcessList() { return shared->process_list; }\n const ProcessList & Context::getProcessList() const { return shared->process_list; }\n OvercommitTracker * Context::getGlobalOvercommitTracker() const { return &shared->global_overcommit_tracker; }\n+\n+SessionTracker & Context::getSessionTracker() { return shared->session_tracker; }\n+\n MergeList & Context::getMergeList() { return shared->merge_list; }\n const MergeList & Context::getMergeList() const { return shared->merge_list; }\n MovesList & Context::getMovesList() { return shared->moves_list; }\n@@ -1094,7 +1100,7 @@ void Context::setUser(const UUID & user_id_, bool set_current_profiles_, bool se\n         std::optional<ContextAccessParams> params;\n         {\n             auto lock = getLock();\n-            params.emplace(ContextAccessParams{user_id_, /* full_access= */ false, /* use_default_roles = */ true, {}, settings, current_database, client_info});\n+            params.emplace(ContextAccessParams{user_id_, /* full_access= */ false, /* use_default_roles = */ true, {}, settings, current_database, client_info });\n         }\n         /// `temp_access` is used here only to extract information about the user, not to actually check access.\n         /// NOTE: AccessControl::getContextAccess() may require some IO work, so Context::getLock() must be unlocked while we're doing this.\n@@ -1157,13 +1163,6 @@ std::optional<UUID> Context::getUserID() const\n }\n \n \n-void Context::setQuotaKey(String quota_key_)\n-{\n-    auto lock = getLock();\n-    client_info.quota_key = std::move(quota_key_);\n-}\n-\n-\n void Context::setCurrentRoles(const std::vector<UUID> & current_roles_)\n {\n     auto lock = getLock();\n@@ -1303,7 +1302,7 @@ void Context::setCurrentProfiles(const SettingsProfilesInfo & profiles_info, boo\n {\n     auto lock = getLock();\n     if (check_constraints)\n-        checkSettingsConstraints(profiles_info.settings);\n+        checkSettingsConstraints(profiles_info.settings, SettingSource::PROFILE);\n     applySettingsChanges(profiles_info.settings);\n     settings_constraints_and_current_profiles = profiles_info.getConstraintsAndProfileIDs(settings_constraints_and_current_profiles);\n }\n@@ -1857,29 +1856,29 @@ void Context::applySettingsChanges(const SettingsChanges & changes)\n }\n \n \n-void Context::checkSettingsConstraints(const SettingsProfileElements & profile_elements) const\n+void Context::checkSettingsConstraints(const SettingsProfileElements & profile_elements, SettingSource source) const\n {\n-    getSettingsConstraintsAndCurrentProfiles()->constraints.check(settings, profile_elements);\n+    getSettingsConstraintsAndCurrentProfiles()->constraints.check(settings, profile_elements, source);\n }\n \n-void Context::checkSettingsConstraints(const SettingChange & change) const\n+void Context::checkSettingsConstraints(const SettingChange & change, SettingSource source) const\n {\n-    getSettingsConstraintsAndCurrentProfiles()->constraints.check(settings, change);\n+    getSettingsConstraintsAndCurrentProfiles()->constraints.check(settings, change, source);\n }\n \n-void Context::checkSettingsConstraints(const SettingsChanges & changes) const\n+void Context::checkSettingsConstraints(const SettingsChanges & changes, SettingSource source) const\n {\n-    getSettingsConstraintsAndCurrentProfiles()->constraints.check(settings, changes);\n+    getSettingsConstraintsAndCurrentProfiles()->constraints.check(settings, changes, source);\n }\n \n-void Context::checkSettingsConstraints(SettingsChanges & changes) const\n+void Context::checkSettingsConstraints(SettingsChanges & changes, SettingSource source) const\n {\n-    getSettingsConstraintsAndCurrentProfiles()->constraints.check(settings, changes);\n+    getSettingsConstraintsAndCurrentProfiles()->constraints.check(settings, changes, source);\n }\n \n-void Context::clampToSettingsConstraints(SettingsChanges & changes) const\n+void Context::clampToSettingsConstraints(SettingsChanges & changes, SettingSource source) const\n {\n-    getSettingsConstraintsAndCurrentProfiles()->constraints.clamp(settings, changes);\n+    getSettingsConstraintsAndCurrentProfiles()->constraints.clamp(settings, changes, source);\n }\n \n void Context::checkMergeTreeSettingsConstraints(const MergeTreeSettings & merge_tree_settings, const SettingsChanges & changes) const\ndiff --git a/src/Interpreters/Context.h b/src/Interpreters/Context.h\nindex 0d567816ec9f..676eb8412e5f 100644\n--- a/src/Interpreters/Context.h\n+++ b/src/Interpreters/Context.h\n@@ -9,6 +9,7 @@\n #include <Common/HTTPHeaderFilter.h>\n #include <Common/ThreadPool_fwd.h>\n #include <Common/Throttler_fwd.h>\n+#include <Common/SettingSource.h>\n #include <Core/NamesAndTypes.h>\n #include <Core/Settings.h>\n #include <Core/UUID.h>\n@@ -202,6 +203,8 @@ using MergeTreeMetadataCachePtr = std::shared_ptr<MergeTreeMetadataCache>;\n class PreparedSetsCache;\n using PreparedSetsCachePtr = std::shared_ptr<PreparedSetsCache>;\n \n+class SessionTracker;\n+\n /// An empty interface for an arbitrary object that may be attached by a shared pointer\n /// to query context, when using ClickHouse as a library.\n struct IHostContext\n@@ -539,8 +542,6 @@ class Context: public std::enable_shared_from_this<Context>\n \n     String getUserName() const;\n \n-    void setQuotaKey(String quota_key_);\n-\n     void setCurrentRoles(const std::vector<UUID> & current_roles_);\n     void setCurrentRolesDefault();\n     boost::container::flat_set<UUID> getCurrentRoles() const;\n@@ -735,11 +736,11 @@ class Context: public std::enable_shared_from_this<Context>\n     void applySettingsChanges(const SettingsChanges & changes);\n \n     /// Checks the constraints.\n-    void checkSettingsConstraints(const SettingsProfileElements & profile_elements) const;\n-    void checkSettingsConstraints(const SettingChange & change) const;\n-    void checkSettingsConstraints(const SettingsChanges & changes) const;\n-    void checkSettingsConstraints(SettingsChanges & changes) const;\n-    void clampToSettingsConstraints(SettingsChanges & changes) const;\n+    void checkSettingsConstraints(const SettingsProfileElements & profile_elements, SettingSource source) const;\n+    void checkSettingsConstraints(const SettingChange & change, SettingSource source) const;\n+    void checkSettingsConstraints(const SettingsChanges & changes, SettingSource source) const;\n+    void checkSettingsConstraints(SettingsChanges & changes, SettingSource source) const;\n+    void clampToSettingsConstraints(SettingsChanges & changes, SettingSource source) const;\n     void checkMergeTreeSettingsConstraints(const MergeTreeSettings & merge_tree_settings, const SettingsChanges & changes) const;\n \n     /// Reset settings to default value\n@@ -861,6 +862,8 @@ class Context: public std::enable_shared_from_this<Context>\n \n     OvercommitTracker * getGlobalOvercommitTracker() const;\n \n+    SessionTracker & getSessionTracker();\n+\n     MergeList & getMergeList();\n     const MergeList & getMergeList() const;\n \ndiff --git a/src/Interpreters/InterpreterSetQuery.cpp b/src/Interpreters/InterpreterSetQuery.cpp\nindex e9118b747e5e..2c0baa0d4b36 100644\n--- a/src/Interpreters/InterpreterSetQuery.cpp\n+++ b/src/Interpreters/InterpreterSetQuery.cpp\n@@ -15,7 +15,7 @@ namespace DB\n BlockIO InterpreterSetQuery::execute()\n {\n     const auto & ast = query_ptr->as<ASTSetQuery &>();\n-    getContext()->checkSettingsConstraints(ast.changes);\n+    getContext()->checkSettingsConstraints(ast.changes, SettingSource::QUERY);\n     auto session_context = getContext()->getSessionContext();\n     session_context->applySettingsChanges(ast.changes);\n     session_context->addQueryParameters(ast.query_parameters);\n@@ -28,7 +28,7 @@ void InterpreterSetQuery::executeForCurrentContext(bool ignore_setting_constrain\n {\n     const auto & ast = query_ptr->as<ASTSetQuery &>();\n     if (!ignore_setting_constraints)\n-        getContext()->checkSettingsConstraints(ast.changes);\n+        getContext()->checkSettingsConstraints(ast.changes, SettingSource::QUERY);\n     getContext()->applySettingsChanges(ast.changes);\n     getContext()->resetSettingsToDefaultValue(ast.default_settings);\n }\ndiff --git a/src/Interpreters/Session.cpp b/src/Interpreters/Session.cpp\nindex cadf619700cb..de2a779b7408 100644\n--- a/src/Interpreters/Session.cpp\n+++ b/src/Interpreters/Session.cpp\n@@ -3,11 +3,13 @@\n #include <Access/AccessControl.h>\n #include <Access/Credentials.h>\n #include <Access/ContextAccess.h>\n+#include <Access/SettingsProfilesInfo.h>\n #include <Access/User.h>\n #include <Common/logger_useful.h>\n #include <Common/Exception.h>\n #include <Common/ThreadPool.h>\n #include <Common/setThreadName.h>\n+#include <Interpreters/SessionTracker.h>\n #include <Interpreters/Context.h>\n #include <Interpreters/SessionLog.h>\n #include <Interpreters/Cluster.h>\n@@ -200,7 +202,6 @@ class NamedSessionsStorage\n \n         LOG_TEST(log, \"Schedule closing session with session_id: {}, user_id: {}\",\n                  session.key.second, session.key.first);\n-\n     }\n \n     void cleanThread()\n@@ -336,6 +337,9 @@ void Session::authenticate(const Credentials & credentials_, const Poco::Net::So\n     if (session_context)\n         throw Exception(ErrorCodes::LOGICAL_ERROR, \"If there is a session context it must be created after authentication\");\n \n+    if (session_tracker_handle)\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Session tracker handle was created before authentication finish\");\n+\n     auto address = address_;\n     if ((address == Poco::Net::SocketAddress{}) && (prepared_client_info->interface == ClientInfo::Interface::LOCAL))\n         address = Poco::Net::SocketAddress{\"127.0.0.1\", 0};\n@@ -490,6 +494,8 @@ ContextMutablePtr Session::makeSessionContext()\n         throw Exception(ErrorCodes::LOGICAL_ERROR, \"Session context must be created before any query context\");\n     if (!user_id)\n         throw Exception(ErrorCodes::LOGICAL_ERROR, \"Session context must be created after authentication\");\n+    if (session_tracker_handle)\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Session tracker handle was created before making session\");\n \n     LOG_DEBUG(log, \"{} Creating session context with user_id: {}\",\n             toString(auth_id), toString(*user_id));\n@@ -503,13 +509,17 @@ ContextMutablePtr Session::makeSessionContext()\n     prepared_client_info.reset();\n \n     /// Set user information for the new context: current profiles, roles, access rights.\n-    if (user_id)\n-        new_session_context->setUser(*user_id);\n+    new_session_context->setUser(*user_id);\n \n     /// Session context is ready.\n     session_context = new_session_context;\n     user = session_context->getUser();\n \n+    session_tracker_handle = session_context->getSessionTracker().trackSession(\n+        *user_id,\n+        {},\n+        session_context->getSettingsRef().max_sessions_for_user);\n+\n     return session_context;\n }\n \n@@ -521,6 +531,8 @@ ContextMutablePtr Session::makeSessionContext(const String & session_name_, std:\n         throw Exception(ErrorCodes::LOGICAL_ERROR, \"Session context must be created before any query context\");\n     if (!user_id)\n         throw Exception(ErrorCodes::LOGICAL_ERROR, \"Session context must be created after authentication\");\n+    if (session_tracker_handle)\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Session tracker handle was created before making session\");\n \n     LOG_DEBUG(log, \"{} Creating named session context with name: {}, user_id: {}\",\n             toString(auth_id), session_name_, toString(*user_id));\n@@ -541,9 +553,23 @@ ContextMutablePtr Session::makeSessionContext(const String & session_name_, std:\n     new_session_context->setClientInfo(*prepared_client_info);\n     prepared_client_info.reset();\n \n+    auto access = new_session_context->getAccess();\n+    UInt64 max_sessions_for_user = 0;\n     /// Set user information for the new context: current profiles, roles, access rights.\n-    if (user_id && !new_session_context->getAccess()->tryGetUser())\n+    if (!access->tryGetUser())\n+    {\n         new_session_context->setUser(*user_id);\n+        max_sessions_for_user = new_session_context->getSettingsRef().max_sessions_for_user;\n+    }\n+    else\n+    {\n+        // Always get setting from profile\n+        // profile can be changed by ALTER PROFILE during single session\n+        auto settings = access->getDefaultSettings();\n+        const Field * max_session_for_user_field = settings.tryGet(\"max_sessions_for_user\");\n+        if (max_session_for_user_field)\n+            max_sessions_for_user = max_session_for_user_field->safeGet<UInt64>();\n+    }\n \n     /// Session context is ready.\n     session_context = std::move(new_session_context);\n@@ -551,6 +577,11 @@ ContextMutablePtr Session::makeSessionContext(const String & session_name_, std:\n     named_session_created = new_named_session_created;\n     user = session_context->getUser();\n \n+    session_tracker_handle = session_context->getSessionTracker().trackSession(\n+        *user_id,\n+        { session_name_ },\n+        max_sessions_for_user);\n+\n     return session_context;\n }\n \ndiff --git a/src/Interpreters/Session.h b/src/Interpreters/Session.h\nindex 36f811ccd24e..51c0e3c71fa0 100644\n--- a/src/Interpreters/Session.h\n+++ b/src/Interpreters/Session.h\n@@ -4,6 +4,7 @@\n #include <Access/AuthenticationData.h>\n #include <Interpreters/ClientInfo.h>\n #include <Interpreters/Context_fwd.h>\n+#include <Interpreters/SessionTracker.h>\n \n #include <chrono>\n #include <memory>\n@@ -113,6 +114,8 @@ class Session\n     std::shared_ptr<NamedSessionData> named_session;\n     bool named_session_created = false;\n \n+    SessionTracker::SessionTrackerHandle session_tracker_handle;\n+\n     Poco::Logger * log = nullptr;\n };\n \ndiff --git a/src/Interpreters/SessionTracker.cpp b/src/Interpreters/SessionTracker.cpp\nnew file mode 100644\nindex 000000000000..4636766e2888\n--- /dev/null\n+++ b/src/Interpreters/SessionTracker.cpp\n@@ -0,0 +1,62 @@\n+#include \"SessionTracker.h\"\n+\n+#include <Common/Exception.h>\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+    extern const int USER_SESSION_LIMIT_EXCEEDED;\n+}\n+\n+SessionTracker::Session::Session(SessionTracker & tracker_,\n+                                 const UUID& user_id_,\n+                                 SessionInfos::const_iterator session_info_iter_) noexcept\n+    : tracker(tracker_), user_id(user_id_), session_info_iter(session_info_iter_)\n+{\n+}\n+\n+SessionTracker::Session::~Session()\n+{\n+    tracker.stopTracking(user_id, session_info_iter);\n+}\n+\n+SessionTracker::SessionTrackerHandle\n+SessionTracker::trackSession(const UUID & user_id,\n+                             const SessionInfo & session_info,\n+                             size_t max_sessions_for_user)\n+{\n+    std::lock_guard lock(mutex);\n+\n+    auto sessions_for_user_iter = sessions_for_user.find(user_id);\n+    if (sessions_for_user_iter == sessions_for_user.end())\n+        sessions_for_user_iter = sessions_for_user.emplace(user_id, SessionInfos()).first;\n+\n+    SessionInfos & session_infos = sessions_for_user_iter->second;\n+    if (max_sessions_for_user && session_infos.size() >= max_sessions_for_user)\n+    {\n+        throw Exception(ErrorCodes::USER_SESSION_LIMIT_EXCEEDED,\n+                        \"User {} has overflown session count {}\",\n+                        toString(user_id),\n+                        max_sessions_for_user);\n+    }\n+\n+    session_infos.emplace_front(session_info);\n+\n+    return std::make_unique<SessionTracker::Session>(*this, user_id, session_infos.begin());\n+}\n+\n+void SessionTracker::stopTracking(const UUID& user_id, SessionInfos::const_iterator session_info_iter)\n+{\n+    std::lock_guard lock(mutex);\n+\n+    auto sessions_for_user_iter = sessions_for_user.find(user_id);\n+    chassert(sessions_for_user_iter != sessions_for_user.end());\n+\n+    sessions_for_user_iter->second.erase(session_info_iter);\n+    if (sessions_for_user_iter->second.empty())\n+        sessions_for_user.erase(sessions_for_user_iter);\n+}\n+\n+}\ndiff --git a/src/Interpreters/SessionTracker.h b/src/Interpreters/SessionTracker.h\nnew file mode 100644\nindex 000000000000..0827213aeed1\n--- /dev/null\n+++ b/src/Interpreters/SessionTracker.h\n@@ -0,0 +1,60 @@\n+#pragma once\n+\n+#include \"ClientInfo.h\"\n+\n+#include <list>\n+#include <map>\n+#include <memory>\n+#include <mutex>\n+\n+namespace DB\n+{\n+\n+struct SessionInfo\n+{\n+    const String session_id;\n+};\n+\n+using SessionInfos = std::list<SessionInfo>;\n+\n+using SessionsForUser = std::unordered_map<UUID, SessionInfos>;\n+\n+class SessionTracker;\n+\n+class SessionTracker\n+{\n+public:\n+    class Session : boost::noncopyable\n+    {\n+    public:\n+        explicit Session(SessionTracker & tracker_,\n+                         const UUID & user_id_,\n+                         SessionInfos::const_iterator session_info_iter_) noexcept;\n+\n+        ~Session();\n+\n+    private:\n+        friend class SessionTracker;\n+\n+        SessionTracker & tracker;\n+        const UUID user_id;\n+        const SessionInfos::const_iterator session_info_iter;\n+    };\n+\n+    using SessionTrackerHandle = std::unique_ptr<SessionTracker::Session>;\n+\n+    SessionTrackerHandle trackSession(const UUID & user_id,\n+                                      const SessionInfo & session_info,\n+                                      size_t max_sessions_for_user);\n+\n+private:\n+    /// disallow manual messing with session tracking\n+    friend class Session;\n+\n+    std::mutex mutex;\n+    SessionsForUser sessions_for_user TSA_GUARDED_BY(mutex);\n+\n+    void stopTracking(const UUID& user_id, SessionInfos::const_iterator session_info_iter);\n+};\n+\n+}\ndiff --git a/src/Server/GRPCServer.cpp b/src/Server/GRPCServer.cpp\nindex 67d30012b0e5..3370a8c009bc 100644\n--- a/src/Server/GRPCServer.cpp\n+++ b/src/Server/GRPCServer.cpp\n@@ -833,7 +833,7 @@ namespace\n         {\n             settings_changes.push_back({key, value});\n         }\n-        query_context->checkSettingsConstraints(settings_changes);\n+        query_context->checkSettingsConstraints(settings_changes, SettingSource::QUERY);\n         query_context->applySettingsChanges(settings_changes);\n \n         query_context->setCurrentQueryId(query_info.query_id());\n@@ -1118,7 +1118,7 @@ namespace\n                         SettingsChanges settings_changes;\n                         for (const auto & [key, value] : external_table.settings())\n                             settings_changes.push_back({key, value});\n-                        external_table_context->checkSettingsConstraints(settings_changes);\n+                        external_table_context->checkSettingsConstraints(settings_changes, SettingSource::QUERY);\n                         external_table_context->applySettingsChanges(settings_changes);\n                     }\n                     auto in = external_table_context->getInputFormat(\ndiff --git a/src/Server/HTTPHandler.cpp b/src/Server/HTTPHandler.cpp\nindex a0bfcd49dfda..ff5690a3b079 100644\n--- a/src/Server/HTTPHandler.cpp\n+++ b/src/Server/HTTPHandler.cpp\n@@ -764,7 +764,7 @@ void HTTPHandler::processQuery(\n         context->setDefaultFormat(default_format);\n \n     /// For external data we also want settings\n-    context->checkSettingsConstraints(settings_changes);\n+    context->checkSettingsConstraints(settings_changes, SettingSource::QUERY);\n     context->applySettingsChanges(settings_changes);\n \n     /// Set the query id supplied by the user, if any, and also update the OpenTelemetry fields.\ndiff --git a/src/Server/TCPHandler.cpp b/src/Server/TCPHandler.cpp\nindex a747f06f1ce2..5f3a7614eee4 100644\n--- a/src/Server/TCPHandler.cpp\n+++ b/src/Server/TCPHandler.cpp\n@@ -184,14 +184,17 @@ void TCPHandler::runImpl()\n     try\n     {\n         receiveHello();\n+\n+        /// In interserver mode queries are executed without a session context.\n+        if (!is_interserver_mode)\n+            session->makeSessionContext();\n+\n         sendHello();\n         if (client_tcp_protocol_version >= DBMS_MIN_PROTOCOL_VERSION_WITH_ADDENDUM)\n             receiveAddendum();\n \n-        if (!is_interserver_mode) /// In interserver mode queries are executed without a session context.\n+        if (!is_interserver_mode)\n         {\n-            session->makeSessionContext();\n-\n             /// If session created, then settings in session context has been updated.\n             /// So it's better to update the connection settings for flexibility.\n             extractConnectionSettingsFromContext(session->sessionContext());\n@@ -1181,7 +1184,6 @@ std::unique_ptr<Session> TCPHandler::makeSession()\n     res->setClientName(client_name);\n     res->setClientVersion(client_version_major, client_version_minor, client_version_patch, client_tcp_protocol_version);\n     res->setConnectionClientVersion(client_version_major, client_version_minor, client_version_patch, client_tcp_protocol_version);\n-    res->setQuotaClientKey(quota_key);\n     res->setClientInterface(interface);\n \n     return res;\n@@ -1274,11 +1276,10 @@ void TCPHandler::receiveHello()\n void TCPHandler::receiveAddendum()\n {\n     if (client_tcp_protocol_version >= DBMS_MIN_PROTOCOL_VERSION_WITH_QUOTA_KEY)\n-    {\n         readStringBinary(quota_key, *in);\n-        if (!is_interserver_mode)\n-            session->setQuotaClientKey(quota_key);\n-    }\n+\n+    if (!is_interserver_mode)\n+        session->setQuotaClientKey(quota_key);\n }\n \n \n@@ -1591,12 +1592,12 @@ void TCPHandler::receiveQuery()\n     if (query_kind == ClientInfo::QueryKind::INITIAL_QUERY)\n     {\n         /// Throw an exception if the passed settings violate the constraints.\n-        query_context->checkSettingsConstraints(settings_changes);\n+        query_context->checkSettingsConstraints(settings_changes, SettingSource::QUERY);\n     }\n     else\n     {\n         /// Quietly clamp to the constraints if it's not an initial query.\n-        query_context->clampToSettingsConstraints(settings_changes);\n+        query_context->clampToSettingsConstraints(settings_changes, SettingSource::QUERY);\n     }\n     query_context->applySettingsChanges(settings_changes);\n \n",
  "test_patch": "diff --git a/tests/integration/parallel_skip.json b/tests/integration/parallel_skip.json\nindex 6e1604f4eb57..cb2b98937caf 100644\n--- a/tests/integration/parallel_skip.json\n+++ b/tests/integration/parallel_skip.json\n@@ -81,5 +81,15 @@\n   \"test_system_flush_logs/test.py::test_log_buffer_size_rows_flush_threshold\",\n   \"test_system_flush_logs/test.py::test_log_max_size\",\n   \"test_crash_log/test.py::test_pkill_query_log\",\n-  \"test_crash_log/test.py::test_pkill\"\n+  \"test_crash_log/test.py::test_pkill\",\n+\n+  \"test_profile_max_sessions_for_user/test.py::test_profile_max_sessions_for_user_tcp\",\n+  \"test_profile_max_sessions_for_user/test.py::test_profile_max_sessions_for_user_postgres\",\n+  \"test_profile_max_sessions_for_user/test.py::test_profile_max_sessions_for_user_mysql\",\n+  \"test_profile_max_sessions_for_user/test.py::test_profile_max_sessions_for_user_http\",\n+  \"test_profile_max_sessions_for_user/test.py::test_profile_max_sessions_for_user_http_named_session\",\n+  \"test_profile_max_sessions_for_user/test.py::test_profile_max_sessions_for_user_grpc\",\n+  \"test_profile_max_sessions_for_user/test.py::test_profile_max_sessions_for_user_tcp_and_others\",\n+  \"test_profile_max_sessions_for_user/test.py::test_profile_max_sessions_for_user_tcp\",\n+  \"test_profile_max_sessions_for_user/test.py::test_profile_max_sessions_for_user_end_session\"\n ]\ndiff --git a/tests/integration/test_profile_max_sessions_for_user/__init__.py b/tests/integration/test_profile_max_sessions_for_user/__init__.py\nnew file mode 100755\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_profile_max_sessions_for_user/configs/dhparam.pem b/tests/integration/test_profile_max_sessions_for_user/configs/dhparam.pem\nnew file mode 100755\nindex 000000000000..2e6cee0798d7\n--- /dev/null\n+++ b/tests/integration/test_profile_max_sessions_for_user/configs/dhparam.pem\n@@ -0,0 +1,8 @@\n+-----BEGIN DH PARAMETERS-----\n+MIIBCAKCAQEAua92DDli13gJ+//ZXyGaggjIuidqB0crXfhUlsrBk9BV1hH3i7fR\n+XGP9rUdk2ubnB3k2ejBStL5oBrkHm9SzUFSQHqfDjLZjKoUpOEmuDc4cHvX1XTR5\n+Pr1vf5cd0yEncJWG5W4zyUB8k++SUdL2qaeslSs+f491HBLDYn/h8zCgRbBvxhxb\n+9qeho1xcbnWeqkN6Kc9bgGozA16P9NLuuLttNnOblkH+lMBf42BSne/TWt3AlGZf\n+slKmmZcySUhF8aKfJnLKbkBCFqOtFRh8zBA9a7g+BT/lSANATCDPaAk1YVih2EKb\n+dpc3briTDbRsiqg2JKMI7+VdULY9bh3EawIBAg==\n+-----END DH PARAMETERS-----\ndiff --git a/tests/integration/test_profile_max_sessions_for_user/configs/log.xml b/tests/integration/test_profile_max_sessions_for_user/configs/log.xml\nnew file mode 100644\nindex 000000000000..22f95a8bd5d4\n--- /dev/null\n+++ b/tests/integration/test_profile_max_sessions_for_user/configs/log.xml\n@@ -0,0 +1,9 @@\n+ <clickhouse>\n+     <logger>\n+         <level>trace</level>\n+         <log>/var/log/clickhouse-server/clickhouse-server.log</log>\n+         <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>\n+         <size>1000M</size>\n+         <count>10</count>\n+     </logger>\n+ </clickhouse>\ndiff --git a/tests/integration/test_profile_max_sessions_for_user/configs/ports.xml b/tests/integration/test_profile_max_sessions_for_user/configs/ports.xml\nnew file mode 100644\nindex 000000000000..3123c4a3d9c7\n--- /dev/null\n+++ b/tests/integration/test_profile_max_sessions_for_user/configs/ports.xml\n@@ -0,0 +1,9 @@\n+ <clickhouse>\n+    <postgresql_port>5433</postgresql_port>\n+    <mysql_port>9001</mysql_port>\n+    <grpc_port>9100</grpc_port>\n+    <grpc replace=\"replace\">\n+        <!-- Enable if you want very detailed logs -->\n+        <verbose_logs>false</verbose_logs>\n+    </grpc>\n+ </clickhouse>\ndiff --git a/tests/integration/test_profile_max_sessions_for_user/configs/server.crt b/tests/integration/test_profile_max_sessions_for_user/configs/server.crt\nnew file mode 100755\nindex 000000000000..070d37f3b778\n--- /dev/null\n+++ b/tests/integration/test_profile_max_sessions_for_user/configs/server.crt\n@@ -0,0 +1,18 @@\n+-----BEGIN CERTIFICATE-----\n+MIIC+zCCAeOgAwIBAgIJANhP897Se2gmMA0GCSqGSIb3DQEBCwUAMBQxEjAQBgNV\n+BAMMCWxvY2FsaG9zdDAeFw0yMDA0MTgyMTE2NDBaFw0yMTA0MTgyMTE2NDBaMBQx\n+EjAQBgNVBAMMCWxvY2FsaG9zdDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC\n+ggEBAM92kcojQoMsjZ9YGhPMY6h/fDUsZeSKHLxgqE6wbmfU1oZKCPWqnvl+4n0J\n+pnT5h1ETxxYZLepimKq0DEVPUTmCl0xmcKbtUNiaTUKYKsdita6b2vZCX9wUPN9p\n+2Kjnm41l+aZNqIEBhIgHNWg9qowi20y0EIXR79jQLwwaInHAaJLZxVsqY2zjQ/D7\n+1Zh82MXud7iqxBQiEfw9Cz35UFA239R8QTlPkVQfsN1gfLxnLk24QUX3o+hbUI1g\n+nlSpyYDHYQlOmwz8doDs6THHAZNJ4bPE9xHNFpw6dGZdbtH+IKQ/qRZIiOaiNuzJ\n+IOHl6XQDRDkW2LMTiCQ6fjC7Pz8CAwEAAaNQME4wHQYDVR0OBBYEFFvhaA/Eguyf\n+BXkMj8BkNLBqMnz2MB8GA1UdIwQYMBaAFFvhaA/EguyfBXkMj8BkNLBqMnz2MAwG\n+A1UdEwQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBACeU/oL48eVAKH7NQntHhRaJ\n+ZGeQzKIjrSBjFo8BGXD1nJZhUeFsylLrhCkC8/5/3grE3BNVX9bxcGjO81C9Mn4U\n+t0z13d6ovJjCZSQArtLwgeJGlpH7gNdD3DyT8DQmrqYVnmnB7UmBu45XH1LWGQZr\n+FAOhGRVs6s6mNj8QlLMgdmsOeOQnsGCMdoss8zV9vO2dc4A5SDSSL2mqGGY4Yjtt\n+X+XlEhXXnksGyx8NGVOZX4wcj8WeCAj/lihQ7Zh6XYwZH9i+E46ompUwoziZnNPu\n+2RH63tLNCxkOY2HF5VMlbMmzer3FkhlM6TAZZRPcvSphKPwXK4A33yqc6wnWvpc=\n+-----END CERTIFICATE-----\ndiff --git a/tests/integration/test_profile_max_sessions_for_user/configs/server.key b/tests/integration/test_profile_max_sessions_for_user/configs/server.key\nnew file mode 100755\nindex 000000000000..b3dee82dcda4\n--- /dev/null\n+++ b/tests/integration/test_profile_max_sessions_for_user/configs/server.key\n@@ -0,0 +1,28 @@\n+-----BEGIN PRIVATE KEY-----\n+MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDPdpHKI0KDLI2f\n+WBoTzGOof3w1LGXkihy8YKhOsG5n1NaGSgj1qp75fuJ9CaZ0+YdRE8cWGS3qYpiq\n+tAxFT1E5gpdMZnCm7VDYmk1CmCrHYrWum9r2Ql/cFDzfadio55uNZfmmTaiBAYSI\n+BzVoPaqMIttMtBCF0e/Y0C8MGiJxwGiS2cVbKmNs40Pw+9WYfNjF7ne4qsQUIhH8\n+PQs9+VBQNt/UfEE5T5FUH7DdYHy8Zy5NuEFF96PoW1CNYJ5UqcmAx2EJTpsM/HaA\n+7OkxxwGTSeGzxPcRzRacOnRmXW7R/iCkP6kWSIjmojbsySDh5el0A0Q5FtizE4gk\n+On4wuz8/AgMBAAECggEAJ54J2yL+mZQRe2NUn4FBarTloDXZQ1pIgISov1Ybz0Iq\n+sTxEF728XAKp95y3J9Fa0NXJB+RJC2BGrRpy2W17IlNY1yMc0hOxg5t7s4LhcG/e\n+J/jlSG+GZL2MnlFVKXQJFWhq0yIzUmdayqstvLlB7z7cx/n+yb88YRfoVBRNjZEL\n+Tdrsw+087igDjrIxZJ3eMN5Wi434n9s4yAoRQC1bP5wcWx0gD4MzdmL8ip6suiRc\n+LRuBAhV/Op812xlxUhrF5dInUM9OLlGTXpUzexAS8Cyy7S4bfkW2BaCxTF7I7TFw\n+Whx28CKn/G49tIuU0m6AlxWbXpLVePTFyMb7RJz5cQKBgQD7VQd2u3HM6eE3PcXD\n+p6ObdLTUk8OAJ5BMmADFc71W0Epyo26/e8KXKGYGxE2W3fr13y+9b0fl5fxZPuhS\n+MgvXEO7rItAVsLcp0IzaqY0WUee2b4XWPAU0XuPqvjYMpx8H5OEHqFK6lhZysAqM\n+X7Ot3/Hux9X0MC4v5a/HNbDUOQKBgQDTUPaP3ADRrmpmE2sWuzWEnCSEz5f0tCLO\n+wTqhV/UraWUNlAbgK5NB790IjH/gotBSqqNPLJwJh0LUfClKM4LiaHsEag0OArOF\n+GhPMK1Ohps8c2RRsiG8+hxX2HEHeAVbkouEDPDiHdIW/92pBViDoETXL6qxDKbm9\n+LkOcVeDfNwKBgQChh1xsqrvQ/t+IKWNZA/zahH9TwEP9sW/ESkz0mhYuHWA7nV4o\n+ItpFW+l2n+Nd+vy32OFN1p9W2iD9GrklWpTRfEiRRqaFyjVt4mMkhaPvnGRXlAVo\n+Utrldbb1v5ntN9txr2ARE9VXpe53dzzQSxGnxi4vUK/paK3GitAWMCOdwQKBgQCi\n+hmGsUXQb0P6qVYMGr6PAw2re7t8baLRguoMCdqjs45nCMLh9D2apzvb8TTtJJU/+\n+VJlYGqJEPdDrpjcHh8jBo8QBqCM0RGWYGG9jl2syKB6hPGCV/PU6bSE58Y/DVNpk\n+7NUM7PM5UyhPddY2PC0A78Ole29UFLJzSzLa+b4DTwKBgH9Wh2k4YPnPcRrX89UL\n+eSwWa1CGq6HWX8Kd5qyz256aeHWuG5nv15+rBt+D7nwajUsqeVkAXz5H/dHuG1xz\n+jb7RW+pEjx0GVAmIbkM9vOLqEUfHHHPuk4AXCGGZ5sarPiKg4BHKBBsY1dpoO5UH\n+0j71fRA6zurHnTXDaCLWlUpZ\n+-----END PRIVATE KEY-----\ndiff --git a/tests/integration/test_profile_max_sessions_for_user/configs/ssl_conf.xml b/tests/integration/test_profile_max_sessions_for_user/configs/ssl_conf.xml\nnew file mode 100644\nindex 000000000000..778d327c4608\n--- /dev/null\n+++ b/tests/integration/test_profile_max_sessions_for_user/configs/ssl_conf.xml\n@@ -0,0 +1,17 @@\n+ <clickhouse>\n+     <!-- Used with https_port and tcp_port_secure. Full ssl options list: https://github.com/ClickHouse-Extras/poco/blob/master/NetSSL_OpenSSL/include/Poco/Net/SSLManager.h#L71 -->\n+     <openSSL>\n+         <server> <!-- Used for https server AND secure tcp port -->\n+             <!-- openssl req -subj \"/CN=localhost\" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt -->\n+             <certificateFile>/etc/clickhouse-server/config.d/server.crt</certificateFile>\n+             <privateKeyFile>/etc/clickhouse-server/config.d/server.key</privateKeyFile>\n+             <!-- openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096 -->\n+             <dhParamsFile>/etc/clickhouse-server/config.d/dhparam.pem</dhParamsFile>\n+             <verificationMode>none</verificationMode>\n+             <loadDefaultCAFile>true</loadDefaultCAFile>\n+             <cacheSessions>true</cacheSessions>\n+             <disableProtocols>sslv2,sslv3</disableProtocols>\n+             <preferServerCiphers>true</preferServerCiphers>\n+         </server>\n+     </openSSL>\n+ </clickhouse>\ndiff --git a/tests/integration/test_profile_max_sessions_for_user/configs/users.xml b/tests/integration/test_profile_max_sessions_for_user/configs/users.xml\nnew file mode 100644\nindex 000000000000..3bed673b2ca0\n--- /dev/null\n+++ b/tests/integration/test_profile_max_sessions_for_user/configs/users.xml\n@@ -0,0 +1,16 @@\n+<clickhouse>\n+    <profiles>\n+        <default>\n+            <max_sessions_for_user>2</max_sessions_for_user>\n+            <function_sleep_max_microseconds_per_block>0</function_sleep_max_microseconds_per_block>\n+        </default>\n+    </profiles>\n+\n+    <users>\n+        <default>\n+        </default>      \n+        <test_user>\n+            <password>123</password>\n+        </test_user>\n+    </users>\n+</clickhouse>\ndiff --git a/tests/integration/test_profile_max_sessions_for_user/protos/clickhouse_grpc.proto b/tests/integration/test_profile_max_sessions_for_user/protos/clickhouse_grpc.proto\nnew file mode 120000\nindex 000000000000..25d15f11e3bd\n--- /dev/null\n+++ b/tests/integration/test_profile_max_sessions_for_user/protos/clickhouse_grpc.proto\n@@ -0,0 +1,1 @@\n+../../../../src/Server/grpc_protos/clickhouse_grpc.proto\n\\ No newline at end of file\ndiff --git a/tests/integration/test_profile_max_sessions_for_user/test.py b/tests/integration/test_profile_max_sessions_for_user/test.py\nnew file mode 100755\nindex 000000000000..9e6a10e7e153\n--- /dev/null\n+++ b/tests/integration/test_profile_max_sessions_for_user/test.py\n@@ -0,0 +1,222 @@\n+import os\n+\n+import grpc\n+import pymysql.connections\n+import psycopg2 as py_psql\n+import pytest\n+import sys\n+import threading\n+\n+from helpers.cluster import ClickHouseCluster, run_and_check\n+\n+MAX_SESSIONS_FOR_USER = 2\n+POSTGRES_SERVER_PORT = 5433\n+MYSQL_SERVER_PORT = 9001\n+GRPC_PORT = 9100\n+\n+TEST_USER = \"test_user\"\n+TEST_PASSWORD = \"123\"\n+\n+SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))\n+DEFAULT_ENCODING = \"utf-8\"\n+\n+# Use grpcio-tools to generate *pb2.py files from *.proto.\n+proto_dir = os.path.join(SCRIPT_DIR, \"./protos\")\n+gen_dir = os.path.join(SCRIPT_DIR, \"./_gen\")\n+os.makedirs(gen_dir, exist_ok=True)\n+run_and_check(\n+    \"python3 -m grpc_tools.protoc -I{proto_dir} --python_out={gen_dir} --grpc_python_out={gen_dir} \\\n+    {proto_dir}/clickhouse_grpc.proto\".format(\n+        proto_dir=proto_dir, gen_dir=gen_dir\n+    ),\n+    shell=True,\n+)\n+\n+sys.path.append(gen_dir)\n+\n+import clickhouse_grpc_pb2\n+import clickhouse_grpc_pb2_grpc\n+\n+cluster = ClickHouseCluster(__file__)\n+instance = cluster.add_instance(\n+    \"node\",\n+    main_configs=[\n+        \"configs/ports.xml\",\n+        \"configs/log.xml\",\n+        \"configs/ssl_conf.xml\",\n+        \"configs/dhparam.pem\",\n+        \"configs/server.crt\",\n+        \"configs/server.key\",\n+    ],\n+    user_configs=[\"configs/users.xml\"],\n+    env_variables={\"UBSAN_OPTIONS\": \"print_stacktrace=1\"},\n+)\n+\n+\n+def get_query(name, id):\n+    return f\"SElECT '{name}', {id}, sleep(1)\"\n+\n+\n+def grpc_get_url():\n+    return f\"{instance.ip_address}:{GRPC_PORT}\"\n+\n+\n+def grpc_create_insecure_channel():\n+    channel = grpc.insecure_channel(grpc_get_url())\n+    grpc.channel_ready_future(channel).result(timeout=2)\n+    return channel\n+\n+\n+def grpc_query(query_text, channel, session_id_):\n+    query_info = clickhouse_grpc_pb2.QueryInfo(\n+        query=query_text,\n+        session_id=session_id_,\n+        user_name=TEST_USER,\n+        password=TEST_PASSWORD,\n+    )\n+\n+    stub = clickhouse_grpc_pb2_grpc.ClickHouseStub(channel)\n+    result = stub.ExecuteQuery(query_info)\n+    if result and result.HasField(\"exception\"):\n+        raise Exception(result.exception.display_text)\n+    return result.output.decode(DEFAULT_ENCODING)\n+\n+\n+def threaded_run_test(sessions):\n+    thread_list = []\n+    for i in range(len(sessions)):\n+        thread = ThreadWithException(target=sessions[i], args=(i,))\n+        thread_list.append(thread)\n+        thread.start()\n+\n+    for thread in thread_list:\n+        thread.join()\n+\n+    exception_count = 0\n+    for i in range(len(sessions)):\n+        if thread_list[i].run_exception != None:\n+            exception_count += 1\n+\n+    assert exception_count == 1\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def started_cluster():\n+    try:\n+        cluster.start()\n+        yield cluster\n+    finally:\n+        cluster.shutdown()\n+\n+\n+class ThreadWithException(threading.Thread):\n+    run_exception = None\n+\n+    def run(self):\n+        try:\n+            super().run()\n+        except:\n+            self.run_exception = sys.exc_info()\n+\n+    def join(self):\n+        super().join()\n+\n+\n+def postgres_session(id):\n+    ch = py_psql.connect(\n+        host=instance.ip_address,\n+        port=POSTGRES_SERVER_PORT,\n+        user=TEST_USER,\n+        password=TEST_PASSWORD,\n+        database=\"default\",\n+    )\n+    cur = ch.cursor()\n+    cur.execute(get_query(\"postgres_session\", id))\n+    cur.fetchall()\n+\n+\n+def mysql_session(id):\n+    client = pymysql.connections.Connection(\n+        host=instance.ip_address,\n+        user=TEST_USER,\n+        password=TEST_PASSWORD,\n+        database=\"default\",\n+        port=MYSQL_SERVER_PORT,\n+    )\n+    cursor = client.cursor(pymysql.cursors.DictCursor)\n+    cursor.execute(get_query(\"mysql_session\", id))\n+    cursor.fetchall()\n+\n+\n+def tcp_session(id):\n+    instance.query(get_query(\"tcp_session\", id), user=TEST_USER, password=TEST_PASSWORD)\n+\n+\n+def http_session(id):\n+    instance.http_query(\n+        get_query(\"http_session\", id), user=TEST_USER, password=TEST_PASSWORD\n+    )\n+\n+\n+def http_named_session(id):\n+    instance.http_query(\n+        get_query(\"http_named_session\", id),\n+        user=TEST_USER,\n+        password=TEST_PASSWORD,\n+        params={\"session_id\": id},\n+    )\n+\n+\n+def grpc_session(id):\n+    grpc_query(\n+        get_query(\"grpc_session\", id), grpc_create_insecure_channel(), f\"session_{id}\"\n+    )\n+\n+\n+def test_profile_max_sessions_for_user_tcp(started_cluster):\n+    threaded_run_test([tcp_session] * 3)\n+\n+\n+def test_profile_max_sessions_for_user_postgres(started_cluster):\n+    threaded_run_test([postgres_session] * 3)\n+\n+\n+def test_profile_max_sessions_for_user_mysql(started_cluster):\n+    threaded_run_test([mysql_session] * 3)\n+\n+\n+def test_profile_max_sessions_for_user_http(started_cluster):\n+    threaded_run_test([http_session] * 3)\n+\n+\n+def test_profile_max_sessions_for_user_http_named_session(started_cluster):\n+    threaded_run_test([http_named_session] * 3)\n+\n+\n+def test_profile_max_sessions_for_user_grpc(started_cluster):\n+    threaded_run_test([grpc_session] * 3)\n+\n+\n+def test_profile_max_sessions_for_user_tcp_and_others(started_cluster):\n+    threaded_run_test([tcp_session, grpc_session, grpc_session])\n+    threaded_run_test([tcp_session, http_session, http_session])\n+    threaded_run_test([tcp_session, mysql_session, mysql_session])\n+    threaded_run_test([tcp_session, postgres_session, postgres_session])\n+    threaded_run_test([tcp_session, http_session, postgres_session])\n+    threaded_run_test([tcp_session, postgres_session, http_session])\n+\n+\n+def test_profile_max_sessions_for_user_end_session(started_cluster):\n+    for conection_func in [\n+        tcp_session,\n+        http_session,\n+        grpc_session,\n+        mysql_session,\n+        postgres_session,\n+    ]:\n+        threaded_run_test([conection_func] * MAX_SESSIONS_FOR_USER)\n+        threaded_run_test([conection_func] * MAX_SESSIONS_FOR_USER)\n+\n+\n+def test_profile_max_sessions_for_user_end_session(started_cluster):\n+    instance.query_and_get_error(\"SET max_sessions_for_user = 10\")\ndiff --git a/tests/queries/0_stateless/02832_alter_max_sessions_for_user.reference b/tests/queries/0_stateless/02832_alter_max_sessions_for_user.reference\nnew file mode 100644\nindex 000000000000..f80f8738ff80\n--- /dev/null\n+++ b/tests/queries/0_stateless/02832_alter_max_sessions_for_user.reference\n@@ -0,0 +1,12 @@\n+test_alter_profile case: max_session_count 1 alter_sessions_count 1\n+test_alter_profile case: max_session_count 2 alter_sessions_count 1\n+USER_SESSION_LIMIT_EXCEEDED\n+test_alter_profile case: max_session_count 1 alter_sessions_count 2\n+test_alter_profile case: max_session_count 2 alter_sessions_count 2\n+READONLY\n+READONLY\n+READONLY\n+READONLY\n+READONLY\n+READONLY\n+READONLY\ndiff --git a/tests/queries/0_stateless/02832_alter_max_sessions_for_user.sh b/tests/queries/0_stateless/02832_alter_max_sessions_for_user.sh\nnew file mode 100755\nindex 000000000000..546c54a4de94\n--- /dev/null\n+++ b/tests/queries/0_stateless/02832_alter_max_sessions_for_user.sh\n@@ -0,0 +1,64 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+SESSION_ID_PREFIX=\"02832_alter_max_sessions_session_$$\"\n+PROFILE=\"02832_alter_max_sessions_profile_$$\"\n+USER=\"02832_alter_max_sessions_user_$$\"\n+USER2=\"02832_alter_max_sessions_user_two_$$\"\n+ROLE=\"02832_alter_max_sessions_role_$$\"\n+\n+${CLICKHOUSE_CLIENT} -q $\"DROP USER IF EXISTS '${USER}'\"\n+${CLICKHOUSE_CLIENT} -q $\"DROP PROFILE IF EXISTS ${PROFILE}\"\n+${CLICKHOUSE_CLIENT} -q $\"CREATE SETTINGS PROFILE ${PROFILE}\"\n+${CLICKHOUSE_CLIENT} -q $\"CREATE USER '${USER}' SETTINGS PROFILE '${PROFILE}'\"\n+\n+function test_alter_profile()\n+{\n+    local max_session_count=\"$1\"\n+    local alter_sessions_count=\"$2\"\n+    echo $\"test_alter_profile case: max_session_count ${max_session_count} alter_sessions_count ${alter_sessions_count}\"\n+\n+    ${CLICKHOUSE_CLIENT} -q $\"ALTER SETTINGS PROFILE ${PROFILE} SETTINGS max_sessions_for_user = ${max_session_count}\"\n+\n+    # Create sesssions with $max_session_count resriction\n+    for ((i = 1 ; i <= ${max_session_count} ; i++)); do\n+        local session_id=\"${SESSION_ID_PREFIX}_${i}\"\n+         # Skip output from this query \n+         ${CLICKHOUSE_CURL} -sS -X POST \"${CLICKHOUSE_URL}&user=${USER}&session_id=${session_id}&session_check=0\" --data-binary \"SELECT 1\" > /dev/null\n+    done\n+\n+    # Update resriction to $alter_sessions_count\n+    ${CLICKHOUSE_CLIENT} -q $\"ALTER SETTINGS PROFILE ${PROFILE} SETTINGS max_sessions_for_user = ${alter_sessions_count}\"\n+\n+    # Simultaneous sessions should use max settings from profile ($alter_sessions_count)\n+    for ((i = 1 ; i <= ${max_session_count} ; i++)); do\n+        local session_id=\"${SESSION_ID_PREFIX}_${i}\"\n+        # ignore select 1, we need only errors\n+        ${CLICKHOUSE_CURL} -sS -X POST \"${CLICKHOUSE_URL}&user=${USER}&session_id=${session_id}&session_check=1\" --data-binary \"select sleep(0.3)\" | grep -o  -m 1 'USER_SESSION_LIMIT_EXCEEDED' &\n+    done\n+\n+    wait\n+}\n+\n+test_alter_profile 1 1\n+test_alter_profile 2 1\n+test_alter_profile 1 2\n+test_alter_profile 2 2\n+\n+${CLICKHOUSE_CLIENT} -q \"SELECT 1 SETTINGS max_sessions_for_user = 1\" 2>&1 | grep -m 1 -o 'READONLY' | head -1\n+${CLICKHOUSE_CLIENT} -q $\"SET max_sessions_for_user = 1 \" 2>&1 | grep -o  -m 1 'READONLY' | head -1\n+${CLICKHOUSE_CLIENT} --max_sessions_for_user=1 -q $\"SELECT 1 \" 2>&1 | grep -o  -m 1 'READONLY' | head -1\n+# max_sessions_for_user is profile setting\n+${CLICKHOUSE_CLIENT} -q $\"CREATE USER ${USER2} SETTINGS max_sessions_for_user = 1 \" 2>&1 | grep -o  -m 1 'READONLY' | head -1\n+${CLICKHOUSE_CLIENT} -q $\"ALTER USER ${USER} SETTINGS max_sessions_for_user = 1\" 2>&1 | grep -o  -m 1 'READONLY' | head -1\n+${CLICKHOUSE_CLIENT} -q $\"CREATE ROLE ${ROLE} SETTINGS max_sessions_for_user = 1\" 2>&1 | grep -o  -m 1 'READONLY' | head -1\n+${CLICKHOUSE_CLIENT} -q $\"CREATE ROLE ${ROLE}\"\n+${CLICKHOUSE_CLIENT} -q $\"ALTER ROLE ${ROLE} SETTINGS max_sessions_for_user = 1 \" 2>&1 | grep -o  -m 1 'READONLY' | head -1\n+\n+${CLICKHOUSE_CLIENT} -q $\"DROP USER IF EXISTS '${USER}'\"\n+${CLICKHOUSE_CLIENT} -q $\"DROP USER IF EXISTS '${USER2}'\"\n+${CLICKHOUSE_CLIENT} -q $\"DROP PROFILE IF EXISTS ${PROFILE}\"\n+${CLICKHOUSE_CLIENT} -q $\"DROP ROLE IF EXISTS ${ROLE}\"\n",
  "problem_statement": "add setting `max_connections_per_user`\nCurrently there is only `max_connections` for common TCP connection pool, which is a capacity of server, not limitation on users.\r\n\r\n**Use case**\r\n\r\nlimit a single user from creating too many connections, imposing denial-of-service attack.\r\n\n",
  "hints_text": "Hello @rschu1ze. Please assign me this task, I am going to start working on it soon.",
  "created_at": "2023-07-03T08:16:49Z",
  "modified_files": [
    "docs/en/operations/settings/query-complexity.md",
    "docs/en/operations/settings/settings-profiles.md",
    "docs/ru/operations/settings/query-complexity.md",
    "docs/ru/operations/settings/settings-profiles.md",
    "src/Access/ContextAccess.cpp",
    "src/Access/SettingsConstraints.cpp",
    "src/Access/SettingsConstraints.h",
    "src/Client/Suggest.cpp",
    "src/Common/ErrorCodes.cpp",
    "b/src/Common/SettingSource.h",
    "src/Core/Settings.h",
    "src/Interpreters/Access/InterpreterCreateRoleQuery.cpp",
    "src/Interpreters/Access/InterpreterCreateSettingsProfileQuery.cpp",
    "src/Interpreters/Access/InterpreterCreateUserQuery.cpp",
    "src/Interpreters/Context.cpp",
    "src/Interpreters/Context.h",
    "src/Interpreters/InterpreterSetQuery.cpp",
    "src/Interpreters/Session.cpp",
    "src/Interpreters/Session.h",
    "b/src/Interpreters/SessionTracker.cpp",
    "b/src/Interpreters/SessionTracker.h",
    "src/Server/GRPCServer.cpp",
    "src/Server/HTTPHandler.cpp",
    "src/Server/TCPHandler.cpp"
  ],
  "modified_test_files": [
    "tests/integration/parallel_skip.json",
    "b/tests/integration/test_profile_max_sessions_for_user/configs/dhparam.pem",
    "b/tests/integration/test_profile_max_sessions_for_user/configs/log.xml",
    "b/tests/integration/test_profile_max_sessions_for_user/configs/ports.xml",
    "b/tests/integration/test_profile_max_sessions_for_user/configs/server.crt",
    "b/tests/integration/test_profile_max_sessions_for_user/configs/server.key",
    "b/tests/integration/test_profile_max_sessions_for_user/configs/ssl_conf.xml",
    "b/tests/integration/test_profile_max_sessions_for_user/configs/users.xml",
    "b/tests/integration/test_profile_max_sessions_for_user/protos/clickhouse_grpc.proto",
    "b/tests/integration/test_profile_max_sessions_for_user/test.py",
    "b/tests/queries/0_stateless/02832_alter_max_sessions_for_user.reference",
    "b/tests/queries/0_stateless/02832_alter_max_sessions_for_user.sh"
  ]
}