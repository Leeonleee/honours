diff --git a/tests/integration/test_backward_compatibility/test_vertical_merges_from_compact_parts.py b/tests/integration/test_backward_compatibility/test_vertical_merges_from_compact_parts.py
new file mode 100644
index 000000000000..1781ed7c9766
--- /dev/null
+++ b/tests/integration/test_backward_compatibility/test_vertical_merges_from_compact_parts.py
@@ -0,0 +1,112 @@
+import pytest
+
+from helpers.cluster import ClickHouseCluster
+
+cluster = ClickHouseCluster(__file__)
+
+node_old = cluster.add_instance(
+    "node1",
+    image="clickhouse/clickhouse-server",
+    tag="22.8",
+    stay_alive=True,
+    with_installed_binary=True,
+    with_zookeeper=True,
+)
+node_new = cluster.add_instance(
+    "node2",
+    with_zookeeper=True,
+    stay_alive=True,
+)
+
+
+@pytest.fixture(scope="module")
+def start_cluster():
+    try:
+        cluster.start()
+        yield cluster
+
+    finally:
+        cluster.shutdown()
+
+
+def test_vertical_merges_from_comapact_parts(start_cluster):
+    for i, node in enumerate([node_old, node_new]):
+        node.query(
+            """
+            CREATE TABLE t_vertical_merges (id UInt64, v1 UInt64, v2 UInt64)
+            ENGINE = ReplicatedMergeTree('/clickhouse/tables/0/t_vertical_merges', '{}')
+            ORDER BY id
+            SETTINGS
+                index_granularity = 50,
+                vertical_merge_algorithm_min_rows_to_activate = 1,
+                vertical_merge_algorithm_min_columns_to_activate = 1,
+                min_bytes_for_wide_part = 0,
+                min_rows_for_wide_part = 100;
+        """.format(
+                i
+            )
+        )
+
+    node_new.query(
+        "INSERT INTO t_vertical_merges SELECT number, number, number FROM numbers(60)"
+    )
+    node_new.query(
+        "INSERT INTO t_vertical_merges SELECT number * 2, number, number FROM numbers(60)"
+    )
+    node_new.query("OPTIMIZE TABLE t_vertical_merges FINAL")
+    node_old.query("SYSTEM SYNC REPLICA t_vertical_merges")
+
+    check_query = """
+        SELECT merge_algorithm, part_type FROM system.part_log
+        WHERE event_type = 'MergeParts' AND table = 't_vertical_merges' AND part_name = '{}';
+    """
+
+    node_new.query("SYSTEM FLUSH LOGS")
+    node_old.query("SYSTEM FLUSH LOGS")
+
+    assert node_new.query(check_query.format("all_0_1_1")) == "Horizontal\tWide
"
+    assert node_old.query(check_query.format("all_0_1_1")) == "Horizontal\tWide
"
+
+    node_new.query(
+        "ALTER TABLE t_vertical_merges MODIFY SETTING allow_vertical_merges_from_compact_to_wide_parts = 1"
+    )
+
+    node_new.query(
+        "INSERT INTO t_vertical_merges SELECT number * 3, number, number FROM numbers(60)"
+    )
+    node_new.query("OPTIMIZE TABLE t_vertical_merges FINAL")
+    node_old.query("SYSTEM SYNC REPLICA t_vertical_merges")
+
+    node_new.query("SYSTEM FLUSH LOGS")
+    node_old.query("SYSTEM FLUSH LOGS")
+
+    assert node_old.contains_in_log(
+        "CHECKSUM_DOESNT_MATCH"
+    ) or node_new.contains_in_log("CHECKSUM_DOESNT_MATCH")
+
+    assert node_new.query(check_query.format("all_0_2_2")) == "Vertical\tWide
"
+    assert node_old.query(check_query.format("all_0_2_2")) == "Horizontal\tWide
"
+
+    node_old.restart_with_latest_version()
+    node_new.restart_clickhouse()
+
+    node_old.query(
+        "ALTER TABLE t_vertical_merges MODIFY SETTING allow_vertical_merges_from_compact_to_wide_parts = 1"
+    )
+
+    node_new.query(
+        "INSERT INTO t_vertical_merges SELECT number * 4, number, number FROM numbers(60)"
+    )
+    node_new.query("OPTIMIZE TABLE t_vertical_merges FINAL")
+    node_old.query("SYSTEM SYNC REPLICA t_vertical_merges")
+
+    node_new.query("SYSTEM FLUSH LOGS")
+    node_old.query("SYSTEM FLUSH LOGS")
+
+    assert not (
+        node_old.contains_in_log("CHECKSUM_DOESNT_MATCH")
+        or node_new.contains_in_log("CHECKSUM_DOESNT_MATCH")
+    )
+
+    assert node_new.query(check_query.format("all_0_3_3")) == "Vertical\tWide
"
+    assert node_old.query(check_query.format("all_0_3_3")) == "Vertical\tWide
"
diff --git a/tests/queries/0_stateless/02539_vertical_merge_compact_parts.reference b/tests/queries/0_stateless/02539_vertical_merge_compact_parts.reference
new file mode 100644
index 000000000000..685d3f3140d1
--- /dev/null
+++ b/tests/queries/0_stateless/02539_vertical_merge_compact_parts.reference
@@ -0,0 +1,2 @@
+1	2	MergeParts	Horizontal	Compact
+1	3	MergeParts	Vertical	Wide
diff --git a/tests/queries/0_stateless/02539_vertical_merge_compact_parts.sql b/tests/queries/0_stateless/02539_vertical_merge_compact_parts.sql
new file mode 100644
index 000000000000..898a2abd6c02
--- /dev/null
+++ b/tests/queries/0_stateless/02539_vertical_merge_compact_parts.sql
@@ -0,0 +1,42 @@
+DROP TABLE IF EXISTS t_compact_vertical_merge;
+
+CREATE TABLE t_compact_vertical_merge (id UInt64, s LowCardinality(String), arr Array(UInt64))
+ENGINE MergeTree ORDER BY id
+SETTINGS
+    index_granularity = 16,
+    min_bytes_for_wide_part = 0,
+    min_rows_for_wide_part = 100,
+    vertical_merge_algorithm_min_rows_to_activate = 1,
+    vertical_merge_algorithm_min_columns_to_activate = 1,
+    allow_vertical_merges_from_compact_to_wide_parts = 1;
+
+INSERT INTO t_compact_vertical_merge SELECT number, toString(number), range(number % 10) FROM numbers(40);
+INSERT INTO t_compact_vertical_merge SELECT number, toString(number), range(number % 10) FROM numbers(40);
+
+OPTIMIZE TABLE t_compact_vertical_merge FINAL;
+SYSTEM FLUSH LOGS;
+
+WITH splitByChar('_', part_name) AS name_parts,
+    name_parts[2]::UInt64 AS min_block,
+    name_parts[3]::UInt64 AS max_block
+SELECT min_block, max_block, event_type, merge_algorithm, part_type FROM system.part_log
+WHERE
+    database = currentDatabase() AND
+    table = 't_compact_vertical_merge' AND
+    min_block = 1 AND max_block = 2;
+
+INSERT INTO t_compact_vertical_merge SELECT number, toString(number), range(number % 10) FROM numbers(40);
+
+OPTIMIZE TABLE t_compact_vertical_merge FINAL;
+SYSTEM FLUSH LOGS;
+
+WITH splitByChar('_', part_name) AS name_parts,
+    name_parts[2]::UInt64 AS min_block,
+    name_parts[3]::UInt64 AS max_block
+SELECT min_block, max_block, event_type, merge_algorithm, part_type FROM system.part_log
+WHERE
+    database = currentDatabase() AND
+    table = 't_compact_vertical_merge' AND
+    min_block = 1 AND max_block = 3;
+
+DROP TABLE t_compact_vertical_merge;
