You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Big Decimal can overflow without exception
**Describe what's wrong**

It's possible to get meaningless result after big decimal division.

**Does it reproduce on recent release?**

Yes. ClickHouse 21.11, 21.8

**How to reproduce**

ClickHouse 21.11

```
SELECT toDecimal128(1, 20) / toDecimal128(1, 20)

Query id: 080e9ddd-9060-4095-8752-3b24dca42bb3

┌─divide(toDecimal128(1, 20), toDecimal128(1, 20))─┐
│                           0.01318113592927845595 │
└──────────────────────────────────────────────────┘

- P from [ 19 : 38 ] - for Decimal128(S)

SELECT
    toDecimal128(1, 20) / toDecimal128(1, 20) AS a,
    toDecimal128(1, 19) / toDecimal128(1, 19) AS b

┌──────────────────────a─┬─b─┐
│ 0.01318113592927845595 │ 1 │
└────────────────────────┴───┘

SELECT
    [1, 1] AS vs,
    toDecimal128(vs[2], 12) / toDecimal128(vs[1], 12) AS frac_dec128_12,
    toDecimal128(vs[2], 24) / toDecimal128(vs[1], 24) AS frac_dec128_24a,
    toFloat64(vs[2]) / toFloat64(vs[1]) AS frac_float64

Query id: 6e0fc55d-14a7-4cab-9d03-ccee9200c6b1

┌─vs────┬─frac_dec128_12─┬────────────frac_dec128_24a─┬─frac_float64─┐
│ [1,1] │              1 │ 0.000000000018960114910927 │            1 │


SELECT toDecimal64(2, 12) / toDecimal64(2, 12)

Query id: 5e5681dd-9984-43c9-a317-e9e232cd12ed


0 rows in set. Elapsed: 0.003 sec.

Received exception from server (version 21.11.1):
Code: 407. DB::Exception: Received from localhost:9000. DB::Exception: Decimal math overflow: While processing toDecimal64(2, 12) / toDecimal64(2, 12). (DECIMAL_OVERFLOW)
```


**Expected behavior**

Exception most likely.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
