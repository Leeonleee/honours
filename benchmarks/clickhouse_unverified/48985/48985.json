{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 48985,
  "instance_id": "ClickHouse__ClickHouse-48985",
  "issue_numbers": [
    "30890"
  ],
  "base_commit": "e78ec28f881a5a450dded2fcf4b83fdeb9b04a01",
  "patch": "diff --git a/base/base/argsToConfig.cpp b/base/base/argsToConfig.cpp\nindex d7983779d2da..faa1462218d9 100644\n--- a/base/base/argsToConfig.cpp\n+++ b/base/base/argsToConfig.cpp\n@@ -3,13 +3,29 @@\n #include <Poco/Util/LayeredConfiguration.h>\n #include <Poco/Util/MapConfiguration.h>\n \n-\n-void argsToConfig(const Poco::Util::Application::ArgVec & argv, Poco::Util::LayeredConfiguration & config, int priority)\n+void argsToConfig(const Poco::Util::Application::ArgVec & argv,\n+                  Poco::Util::LayeredConfiguration & config,\n+                  int priority,\n+                  const std::unordered_set<std::string>* alias_names)\n {\n     /// Parsing all args and converting to config layer\n     /// Test: -- --1=1 --1=2 --3 5 7 8 -9 10 -11=12 14= 15== --16==17 --=18 --19= --20 21 22 --23 --24 25 --26 -27 28 ---29=30 -- ----31 32 --33 3-4\n     Poco::AutoPtr<Poco::Util::MapConfiguration> map_config = new Poco::Util::MapConfiguration;\n     std::string key;\n+\n+    auto add_arg = [&map_config, &alias_names](const std::string & k, const std::string & v)\n+    {\n+        map_config->setString(k, v);\n+\n+        if (alias_names && !alias_names->contains(k))\n+        {\n+            std::string alias_key = k;\n+            std::replace(alias_key.begin(), alias_key.end(), '-', '_');\n+            if (alias_names->contains(alias_key))\n+                map_config->setString(alias_key, v);\n+        }\n+    };\n+\n     for (const auto & arg : argv)\n     {\n         auto key_start = arg.find_first_not_of('-');\n@@ -19,7 +35,7 @@ void argsToConfig(const Poco::Util::Application::ArgVec & argv, Poco::Util::Laye\n         // old saved '--key', will set to some true value \"1\"\n         if (!key.empty() && pos_minus != std::string::npos && pos_minus < key_start)\n         {\n-            map_config->setString(key, \"1\");\n+            add_arg(key, \"1\");\n             key = \"\";\n         }\n \n@@ -29,7 +45,7 @@ void argsToConfig(const Poco::Util::Application::ArgVec & argv, Poco::Util::Laye\n             {\n                 if (pos_minus == std::string::npos || pos_minus > key_start)\n                 {\n-                    map_config->setString(key, arg);\n+                    add_arg(key, arg);\n                 }\n                 key = \"\";\n             }\n@@ -55,7 +71,7 @@ void argsToConfig(const Poco::Util::Application::ArgVec & argv, Poco::Util::Laye\n         if (arg.size() > pos_eq)\n             value = arg.substr(pos_eq + 1);\n \n-        map_config->setString(key, value);\n+        add_arg(key, value);\n         key = \"\";\n     }\n \ndiff --git a/base/base/argsToConfig.h b/base/base/argsToConfig.h\nindex 9b7b44b7b7fa..ef34a8a21453 100644\n--- a/base/base/argsToConfig.h\n+++ b/base/base/argsToConfig.h\n@@ -1,6 +1,8 @@\n #pragma once\n \n #include <Poco/Util/Application.h>\n+#include <string>\n+#include <unordered_set>\n \n namespace Poco::Util\n {\n@@ -8,4 +10,7 @@ class LayeredConfiguration; // NOLINT(cppcoreguidelines-virtual-class-destructor\n }\n \n /// Import extra command line arguments to configuration. These are command line arguments after --.\n-void argsToConfig(const Poco::Util::Application::ArgVec & argv, Poco::Util::LayeredConfiguration & config, int priority);\n+void argsToConfig(const Poco::Util::Application::ArgVec & argv,\n+                  Poco::Util::LayeredConfiguration & config,\n+                  int priority,\n+                  const std::unordered_set<std::string>* registered_alias_names = nullptr);\ndiff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp\nindex 64a18479ca9d..a17e720c1e0d 100644\n--- a/src/Client/ClientBase.cpp\n+++ b/src/Client/ClientBase.cpp\n@@ -67,6 +67,7 @@\n #include <Storages/ColumnsDescription.h>\n \n #include <boost/algorithm/string/case_conv.hpp>\n+#include <boost/algorithm/string/replace.hpp>\n #include <iostream>\n #include <filesystem>\n #include <map>\n@@ -2405,6 +2406,54 @@ struct TransparentStringHash\n     }\n };\n \n+/*\n+ * This functor is used to parse command line arguments and replace dashes with underscores,\n+ * allowing options to be specified using either dashes or underscores.\n+ */\n+class OptionsAliasParser\n+{\n+public:\n+    explicit OptionsAliasParser(const boost::program_options::options_description& options)\n+    {\n+        options_names.reserve(options.options().size());\n+        for (const auto& option : options.options())\n+            options_names.insert(option->long_name());\n+    }\n+\n+    /*\n+     * Parses arguments by replacing dashes with underscores, and matches the resulting name with known options\n+     * Implements boost::program_options::ext_parser logic\n+     */\n+    std::pair<std::string, std::string> operator()(const std::string& token) const\n+    {\n+        if (token.find(\"--\") != 0)\n+            return {};\n+        std::string arg = token.substr(2);\n+\n+        // divide token by '=' to separate key and value if options style=long_allow_adjacent\n+        auto pos_eq = arg.find('=');\n+        std::string key = arg.substr(0, pos_eq);\n+\n+        if (options_names.contains(key))\n+            // option does not require any changes, because it is already correct\n+            return {};\n+\n+        std::replace(key.begin(), key.end(), '-', '_');\n+        if (!options_names.contains(key))\n+            // after replacing '-' with '_' argument is still unknown\n+            return {};\n+\n+        std::string value;\n+        if (pos_eq != std::string::npos && pos_eq < arg.size())\n+            value = arg.substr(pos_eq + 1);\n+\n+        return {key, value};\n+    }\n+\n+private:\n+    std::unordered_set<std::string> options_names;\n+};\n+\n }\n \n \n@@ -2455,7 +2504,10 @@ void ClientBase::parseAndCheckOptions(OptionsDescription & options_description,\n     }\n \n     /// Parse main commandline options.\n-    auto parser = po::command_line_parser(arguments).options(options_description.main_description.value()).allow_unregistered();\n+    auto parser = po::command_line_parser(arguments)\n+                      .options(options_description.main_description.value())\n+                      .extra_parser(OptionsAliasParser(options_description.main_description.value()))\n+                      .allow_unregistered();\n     po::parsed_options parsed = parser.run();\n \n     /// Check unrecognized options without positional options.\n@@ -2497,6 +2549,19 @@ void ClientBase::init(int argc, char ** argv)\n \n     readArguments(argc, argv, common_arguments, external_tables_arguments, hosts_and_ports_arguments);\n \n+    /// Support for Unicode dashes\n+    /// Interpret Unicode dashes as default double-hyphen\n+    for (auto & arg : common_arguments)\n+    {\n+        // replace em-dash(U+2014)\n+        boost::replace_all(arg, \"\u2014\", \"--\");\n+        // replace en-dash(U+2013)\n+        boost::replace_all(arg, \"\u2013\", \"--\");\n+        // replace mathematical minus(U+2212)\n+        boost::replace_all(arg, \"\u2212\", \"--\");\n+    }\n+\n+\n     po::variables_map options;\n     OptionsDescription options_description;\n     options_description.main_description.emplace(createOptionsDescription(\"Main options\", terminal_width));\n@@ -2670,7 +2735,14 @@ void ClientBase::init(int argc, char ** argv)\n     profile_events.delay_ms = options[\"profile-events-delay-ms\"].as<UInt64>();\n \n     processOptions(options_description, options, external_tables_arguments, hosts_and_ports_arguments);\n-    argsToConfig(common_arguments, config(), 100);\n+    {\n+        std::unordered_set<std::string> alias_names;\n+        alias_names.reserve(options_description.main_description->options().size());\n+        for (const auto& option : options_description.main_description->options())\n+            alias_names.insert(option->long_name());\n+        argsToConfig(common_arguments, config(), 100, &alias_names);\n+    }\n+\n     clearPasswordFromCommandLine(argc, argv);\n \n     /// Limit on total memory usage\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02718_cli_dashed_options_parsing.reference b/tests/queries/0_stateless/02718_cli_dashed_options_parsing.reference\nnew file mode 100644\nindex 000000000000..6479f538bd85\n--- /dev/null\n+++ b/tests/queries/0_stateless/02718_cli_dashed_options_parsing.reference\n@@ -0,0 +1,17 @@\n+Test 1: Check that you can specify options with a dashes, not an underscores\n+Test 1.1: Check option from config - server_logs_file\n+1\n+OK\n+1\n+OK\n+1\n+OK\n+Test 1.2: Check some option from Settings.h - allow_deprecated_syntax_for_merge_tree\n+0\n+Test 2: check that unicode dashes are handled correctly\n+Test 2.1: check em-dash support\n+1\n+Test 2.2: check en-dash support\n+1\n+Test 2.3 check mathematical minus support\n+1\ndiff --git a/tests/queries/0_stateless/02718_cli_dashed_options_parsing.sh b/tests/queries/0_stateless/02718_cli_dashed_options_parsing.sh\nnew file mode 100755\nindex 000000000000..ba455a565212\n--- /dev/null\n+++ b/tests/queries/0_stateless/02718_cli_dashed_options_parsing.sh\n@@ -0,0 +1,52 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+file_name=${CLICKHOUSE_TEST_UNIQUE_NAME}\n+file_name_1=${file_name}_1\n+file_name_2=${file_name}_2\n+file_name_3=${file_name}_3\n+\n+#################\n+echo \"Test 1: Check that you can specify options with a dashes, not an underscores\"\n+\n+[[ -e $file_name_1 ]] && rm $file_name_1\n+[[ -e $file_name_2 ]] && rm $file_name_2\n+[[ -e $file_name_3 ]] && rm $file_name_3\n+\n+echo \"Test 1.1: Check option from config - server_logs_file\"\n+\n+$CLICKHOUSE_LOCAL --log-level=debug --server-logs-file=$file_name_1 -q \"SELECT 1;\" 2> /dev/null\n+[[ -e $file_name_1 ]] && echo OK\n+$CLICKHOUSE_LOCAL --log-level=debug --server-logs-file $file_name_2 -q \"SELECT 1;\" 2> /dev/null\n+[[ -e $file_name_2 ]] && echo OK\n+$CLICKHOUSE_LOCAL --log-level=debug --server_logs_file $file_name_3 -q \"SELECT 1;\" 2> /dev/null\n+[[ -e $file_name_3 ]] && echo OK\n+\n+echo \"Test 1.2: Check some option from Settings.h - allow_deprecated_syntax_for_merge_tree\"\n+\n+$CLICKHOUSE_CLIENT -q \"DROP TABLE IF EXISTS test\";\n+$CLICKHOUSE_CLIENT --allow-deprecated-syntax-for-merge-tree=1 --query=\"CREATE TABLE test (d Date, s String) ENGINE = MergeTree(d, s, 8192)\";\n+$CLICKHOUSE_CLIENT --query=\"DROP TABLE test\";\n+echo $?\n+\n+#################\n+echo \"Test 2: check that unicode dashes are handled correctly\"\n+\n+echo \"Test 2.1: check em-dash support\"\n+# Unicode code: U+2014\n+$CLICKHOUSE_LOCAL \u2014query \"SELECT 1\";\n+\n+echo \"Test 2.2: check en-dash support\"\n+# Unicode code: U+2013\n+$CLICKHOUSE_LOCAL \u2013query \"SELECT 1\";\n+\n+echo \"Test 2.3 check mathematical minus support\"\n+# Unicode code: U+2212\n+$CLICKHOUSE_LOCAL \u2212query \"SELECT 1\";\n+\n+rm $file_name_1\n+rm $file_name_2\n+rm $file_name_3\n",
  "problem_statement": "Allow to specify settings with dashed-style in addition to underscore_style in command line parameters of clickhouse-client/clickhouse-local.\n**Use case**\r\n\r\n`clickhouse-client --max-memory-usage 1G`\n",
  "hints_text": "",
  "created_at": "2023-04-20T17:35:24Z",
  "modified_files": [
    "base/base/argsToConfig.cpp",
    "base/base/argsToConfig.h",
    "src/Client/ClientBase.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02718_cli_dashed_options_parsing.reference",
    "b/tests/queries/0_stateless/02718_cli_dashed_options_parsing.sh"
  ]
}