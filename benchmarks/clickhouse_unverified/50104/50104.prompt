You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Drop column lead to 'Missing columns' bug with projections
ClickHouse Version 22.11.1.1

`CREATE TABLE test
(
    col1 Int64,
    dt Date
)
ENGINE = MergeTree
PARTITION BY dt
ORDER BY tuple()`

Ok.
0 rows in set. Elapsed: 0.055 sec.


`INSERT INTO test FORMAT Values (1, today())`

Ok.
1 row in set. Elapsed: 0.033 sec.


`ALTER TABLE test ADD COLUMN col2 String`

Ok.
0 rows in set. Elapsed: 0.007 sec.


`ALTER TABLE test
    ADD PROJECTION p1
    (
        SELECT
            col2,
            sum(col1)
        GROUP BY col2
    )`

Ok.
0 rows in set. Elapsed: 0.017 sec.


`ALTER TABLE test
    ADD COLUMN col3 String`

Ok.
0 rows in set. Elapsed: 0.010 sec.


`ALTER TABLE test
    DROP COLUMN col3`

0 rows in set. Elapsed: 0.044 sec.
Received exception from server (version 22.11.1):
Code: 341. DB::Exception: Received from 127.0.0.1:9000. DB::Exception: Exception happened during execution of mutation 'mutation_2.txt' with part '20221110_1_1_0' reason: 'Code: 47. DB::Exception: Missing columns: 'col2' while processing query: 'SELECT col2, sum(col1) GROUP BY col2', required columns: 'col2' 'col1' 'col2' 'col1'. (UNKNOWN_IDENTIFIER) (version 22.11.1.1)'. This error maybe retryable or not. In case of unretryable error, mutation can be killed with KILL MUTATION query. (UNFINISHED)
NOT_FOUND_COLUMN_IN_BLOCK error in mutation adding data skipping index to a default column
> A clear and concise description of what works not as it is supposed to.

Data skipping indexes on DEFAULT and MATERIALIZED columns can cause `NOT_FOUND_COLUMN_IN_BLOCK` errors on subsequent mutations.

Reproducer fiddle: https://fiddle.clickhouse.com/ddfd1acb-af96-4597-b78d-fad02f8aa666

**Does it reproduce on recent release?**

Tested under 22.8 and 23.2.

**How to reproduce**

* Which ClickHouse server version to use
22.8

```sql
CREATE TABLE IF NOT EXISTS test (a Int64) ENGINE = MergeTree() ORDER BY a
INSERT INTO test (a) VALUES (1)

ALTER TABLE test ADD COLUMN default_1 Int64 DEFAULT a + 1

ALTER TABLE test ADD COLUMN default_2 Int64 DEFAULT a + 2
ALTER TABLE test ADD INDEX default_2_index default_2 TYPE minmax GRANULARITY 1

ALTER TABLE test UPDATE default_1 = default_1 WHERE 1=1
```

**Expected behavior**

Mutation succeeds without errors

**Error message and/or stacktrace**

`system.mutations` reports:

```
SELECT *
FROM system.mutations

Query id: b8c046eb-3414-455e-9cf7-a8c1afd2944a

Row 1:
──────
database:                   default
table:                      test
mutation_id:                mutation_2.txt
command:                    UPDATE default_1 = default_1 WHERE 1 = 1
create_time:                2023-03-14 07:05:14
block_numbers.partition_id: ['']
block_numbers.number:       [2]
parts_to_do_names:          ['all_1_1_0']
parts_to_do:                1
is_done:                    0
latest_failed_part:         all_1_1_0
latest_fail_time:           2023-03-14 07:07:12
latest_fail_reason:         Code: 10. DB::Exception: Not found column default_2 in block. There are only columns: a, default_1. (NOT_FOUND_COLUMN_IN_BLOCK) (version 22.8.9.24 (official build))
```

Error logs:

```
2023.03.14 07:07:42.953529 [ 355 ] {5129bccd-1e5a-4f5e-b34f-b5c951a4f810::all_1_1_0_2} <Error> MutatePlainMergeTreeTask: Code: 10. DB::Exception: Not found column default_2 in block. There are only columns: a, default_1. (NOT_FOUND_COLUMN_IN_BLOCK) (version 22.8.9.24 (official build))
2023.03.14 07:07:42.953835 [ 355 ] {5129bccd-1e5a-4f5e-b34f-b5c951a4f810::all_1_1_0_2} <Error> virtual bool DB::MutatePlainMergeTreeTask::executeStep(): Code: 10. DB::Exception: Not found column default_2 in block. There are only columns: a, default_1. (NOT_FOUND_COLUMN_IN_BLOCK), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa3efd5a in /usr/bin/clickhouse
1. DB::Block::getByName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool) const @ 0x13ef15b2 in /usr/bin/clickhouse
2. DB::getBlockAndPermute(DB::Block const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, DB::PODArray<unsigned long, 4096ul, Allocator<false, false>, 15ul, 16ul> const*) @ 0x158dce2f in /usr/bin/clickhouse
3. DB::MergeTreeDataPartWriterCompact::writeDataBlockPrimaryIndexAndSkipIndices(DB::Block const&, std::__1::vector<DB::Granule, std::__1::allocator<DB::Granule> > const&) @ 0x158d7cee in /usr/bin/clickhouse
4. DB::MergeTreeDataPartWriterCompact::fillDataChecksums(DB::MergeTreeDataPartChecksums&) @ 0x158d9082 in /usr/bin/clickhouse
5. DB::MergeTreeDataPartWriterCompact::fillChecksums(DB::MergeTreeDataPartChecksums&) @ 0x158d993c in /usr/bin/clickhouse
6. DB::MergedBlockOutputStream::finalizePartAsync(std::__1::shared_ptr<DB::IMergeTreeDataPart>&, bool, DB::NamesAndTypesList const*, DB::MergeTreeDataPartChecksums*) @ 0x159ca896 in /usr/bin/clickhouse
7. DB::MutateAllPartColumnsTask::finalize() @ 0x159efee5 in /usr/bin/clickhouse
8. DB::MutateAllPartColumnsTask::executeStep() @ 0x159ee4ec in /usr/bin/clickhouse
9. DB::MutatePlainMergeTreeTask::executeStep() @ 0x159d6b2e in /usr/bin/clickhouse
10. DB::MergeTreeBackgroundExecutor<DB::MergeMutateRuntimeQueue>::routine(std::__1::shared_ptr<DB::TaskRuntimeData>) @ 0xa3ba51b in /usr/bin/clickhouse
11. DB::MergeTreeBackgroundExecutor<DB::MergeMutateRuntimeQueue>::threadFunction() @ 0xa3b9f50 in /usr/bin/clickhouse
12. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0xa4b3f86 in /usr/bin/clickhouse
13. void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()>(void&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) @ 0xa4b58d7 in /usr/bin/clickhouse
14. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0xa4b18a8 in /usr/bin/clickhouse
15. ? @ 0xa4b4abd in /usr/bin/clickhouse
16. ? @ 0x7fe2bde62609 in ?
17. __clone @ 0x7fe2bdd87133 in ?
 (version 22.8.9.24 (official build))
```

**Additional context**

This seems to make the clickhouse-server run reasonably 'hot' (high CPU usage) as it's attempting the mutation in a loop. The `system.errors` counter also seems to increment really rapidly.

Original issue: https://github.com/PostHog/posthog/issues/14200
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
