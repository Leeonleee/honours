diff --git a/tests/queries/0_stateless/02790_async_queries_in_query_log.reference b/tests/queries/0_stateless/02790_async_queries_in_query_log.reference
index 567e8d4f4b5d..84254cc87355 100644
--- a/tests/queries/0_stateless/02790_async_queries_in_query_log.reference
+++ b/tests/queries/0_stateless/02790_async_queries_in_query_log.reference
@@ -9,7 +9,7 @@ written_rows:   0
 written_bytes:  0
 result_rows:    0
 result_bytes:   0
-query:          INSERT INTO default.async_insert_landing SETTINGS wait_for_async_insert = 1, async_insert = 1 FORMAT Values
+query:          INSERT INTO default.async_insert_landing (id) SETTINGS wait_for_async_insert = 1, async_insert = 1 FORMAT Values
 query_kind:     AsyncInsertFlush
 databases:      ['default']
 tables:         ['default.async_insert_landing']
@@ -26,7 +26,7 @@ written_rows:   4
 written_bytes:  16
 result_rows:    4
 result_bytes:   16
-query:          INSERT INTO default.async_insert_landing SETTINGS wait_for_async_insert = 1, async_insert = 1 FORMAT Values
+query:          INSERT INTO default.async_insert_landing (id) SETTINGS wait_for_async_insert = 1, async_insert = 1 FORMAT Values
 query_kind:     AsyncInsertFlush
 databases:      ['default']
 tables:         ['default.async_insert_landing']
@@ -54,7 +54,7 @@ written_rows:   0
 written_bytes:  0
 result_rows:    0
 result_bytes:   0
-query:          INSERT INTO default.async_insert_landing SETTINGS wait_for_async_insert = 1, async_insert = 1 FORMAT Values
+query:          INSERT INTO default.async_insert_landing (id) SETTINGS wait_for_async_insert = 1, async_insert = 1 FORMAT Values
 query_kind:     AsyncInsertFlush
 databases:      ['default']
 tables:         ['default.async_insert_landing','default.async_insert_target']
@@ -71,7 +71,7 @@ written_rows:   6
 written_bytes:  24
 result_rows:    6
 result_bytes:   24
-query:          INSERT INTO default.async_insert_landing SETTINGS wait_for_async_insert = 1, async_insert = 1 FORMAT Values
+query:          INSERT INTO default.async_insert_landing (id) SETTINGS wait_for_async_insert = 1, async_insert = 1 FORMAT Values
 query_kind:     AsyncInsertFlush
 databases:      ['default']
 tables:         ['default.async_insert_landing','default.async_insert_target']
@@ -118,7 +118,7 @@ written_rows:   0
 written_bytes:  0
 result_rows:    0
 result_bytes:   0
-query:          INSERT INTO default.async_insert_landing SETTINGS wait_for_async_insert = 1, async_insert = 1 FORMAT Values
+query:          INSERT INTO default.async_insert_landing (id) SETTINGS wait_for_async_insert = 1, async_insert = 1 FORMAT Values
 query_kind:     AsyncInsertFlush
 databases:      ['default']
 tables:         ['default.async_insert_landing','default.async_insert_target']
@@ -135,7 +135,7 @@ written_rows:   3
 written_bytes:  12
 result_rows:    0
 result_bytes:   0
-query:          INSERT INTO default.async_insert_landing SETTINGS wait_for_async_insert = 1, async_insert = 1 FORMAT Values
+query:          INSERT INTO default.async_insert_landing (id) SETTINGS wait_for_async_insert = 1, async_insert = 1 FORMAT Values
 query_kind:     AsyncInsertFlush
 databases:      ['default']
 tables:         ['default.async_insert_landing','default.async_insert_target']
diff --git a/tests/queries/0_stateless/03148_async_queries_in_query_log_errors.reference b/tests/queries/0_stateless/03148_async_queries_in_query_log_errors.reference
index 685d28268f6d..7cc2efd50ec1 100644
--- a/tests/queries/0_stateless/03148_async_queries_in_query_log_errors.reference
+++ b/tests/queries/0_stateless/03148_async_queries_in_query_log_errors.reference
@@ -4,7 +4,7 @@ Row 1:
 ──────
 database:                 default
 table:                    async_insert_landing
-query:                    INSERT INTO default.async_insert_landing SETTINGS wait_for_async_insert = 0, async_insert = 1 FORMAT Values
+query:                    INSERT INTO default.async_insert_landing (id) SETTINGS wait_for_async_insert = 0, async_insert = 1 FORMAT Values
 format:                   Values
 error:                    DB::Exc*****on: Cannot parse string 'Invalid' as UInt32:
 populated_flush_query_id: 1
@@ -18,7 +18,7 @@ written_rows:   0
 written_bytes:  0
 result_rows:    0
 result_bytes:   0
-query:          INSERT INTO default.async_insert_landing SETTINGS wait_for_async_insert = 0, async_insert = 1 FORMAT Values
+query:          INSERT INTO default.async_insert_landing (id) SETTINGS wait_for_async_insert = 0, async_insert = 1 FORMAT Values
 query_kind:     AsyncInsertFlush
 databases:      ['default']
 tables:         ['default.async_insert_landing']
@@ -35,7 +35,7 @@ written_rows:   0
 written_bytes:  0
 result_rows:    0
 result_bytes:   0
-query:          INSERT INTO default.async_insert_landing SETTINGS wait_for_async_insert = 0, async_insert = 1 FORMAT Values
+query:          INSERT INTO default.async_insert_landing (id) SETTINGS wait_for_async_insert = 0, async_insert = 1 FORMAT Values
 query_kind:     AsyncInsertFlush
 databases:      ['default']
 tables:         ['default.async_insert_landing']
diff --git a/tests/queries/0_stateless/03229_async_insert_alter.reference b/tests/queries/0_stateless/03229_async_insert_alter.reference
new file mode 100644
index 000000000000..f66021d0bfec
--- /dev/null
+++ b/tests/queries/0_stateless/03229_async_insert_alter.reference
@@ -0,0 +1,8 @@
+42	24	0
+42	24	0
+43	34	55
+42	24
+43	34
+INSERT INTO default.t_async_insert_alter (id, v1) FORMAT Values	Preprocessed	Ok
+INSERT INTO default.t_async_insert_alter (id, v1, value2) FORMAT Values	Preprocessed	Ok
+INSERT INTO default.t_async_insert_alter (id, v1, value2) FORMAT Values	Preprocessed	FlushError
diff --git a/tests/queries/0_stateless/03229_async_insert_alter.sql b/tests/queries/0_stateless/03229_async_insert_alter.sql
new file mode 100644
index 000000000000..022e386bef0b
--- /dev/null
+++ b/tests/queries/0_stateless/03229_async_insert_alter.sql
@@ -0,0 +1,47 @@
+-- Tags: no-parallel
+-- no-parallel because the test uses FLUSH ASYNC INSERT QUEUE
+
+SET wait_for_async_insert = 0;
+SET async_insert_busy_timeout_max_ms = 300000;
+SET async_insert_busy_timeout_min_ms = 300000;
+SET async_insert_use_adaptive_busy_timeout = 0;
+
+DROP TABLE IF EXISTS t_async_insert_alter;
+
+CREATE TABLE t_async_insert_alter (id Int64, v1 Int64) ENGINE = MergeTree ORDER BY id SETTINGS async_insert = 1;
+
+-- ADD COLUMN
+
+INSERT INTO t_async_insert_alter VALUES (42, 24);
+
+ALTER TABLE t_async_insert_alter ADD COLUMN value2 Int64;
+
+SYSTEM FLUSH ASYNC INSERT QUEUE;
+SYSTEM FLUSH LOGS;
+
+SELECT * FROM t_async_insert_alter ORDER BY id;
+
+-- MODIFY COLUMN
+
+INSERT INTO t_async_insert_alter VALUES (43, 34, 55);
+
+ALTER TABLE t_async_insert_alter MODIFY COLUMN value2 String;
+
+SYSTEM FLUSH ASYNC INSERT QUEUE;
+SYSTEM FLUSH LOGS;
+
+SELECT * FROM t_async_insert_alter ORDER BY id;
+
+-- DROP COLUMN
+
+INSERT INTO t_async_insert_alter VALUES ('100', '200', '300');
+
+ALTER TABLE t_async_insert_alter DROP COLUMN value2;
+
+SYSTEM FLUSH ASYNC INSERT QUEUE;
+SYSTEM FLUSH LOGS;
+
+SELECT * FROM t_async_insert_alter ORDER BY id;
+SELECT query, data_kind, status FROM system.asynchronous_insert_log WHERE database = currentDatabase() AND table = 't_async_insert_alter' ORDER BY event_time_microseconds;
+
+DROP TABLE t_async_insert_alter;
diff --git a/tests/queries/0_stateless/03229_async_insert_alter_http.reference b/tests/queries/0_stateless/03229_async_insert_alter_http.reference
new file mode 100644
index 000000000000..195701d2b826
--- /dev/null
+++ b/tests/queries/0_stateless/03229_async_insert_alter_http.reference
@@ -0,0 +1,8 @@
+42	24	0
+42	24	0
+43	34	55
+42	24
+43	34
+INSERT INTO default.t_async_insert_alter (id, v1) FORMAT Values	Parsed	Ok
+INSERT INTO default.t_async_insert_alter (id, v1, value2) FORMAT Values	Parsed	Ok
+INSERT INTO default.t_async_insert_alter (id, v1, value2) FORMAT Values	Parsed	FlushError
diff --git a/tests/queries/0_stateless/03229_async_insert_alter_http.sh b/tests/queries/0_stateless/03229_async_insert_alter_http.sh
new file mode 100755
index 000000000000..fe72ed3299a0
--- /dev/null
+++ b/tests/queries/0_stateless/03229_async_insert_alter_http.sh
@@ -0,0 +1,56 @@
+#!/usr/bin/env bash
+# Tags: no-parallel
+# no-parallel because the test uses FLUSH ASYNC INSERT QUEUE
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+$CLICKHOUSE_CLIENT -q "
+    DROP TABLE IF EXISTS t_async_insert_alter;
+    CREATE TABLE t_async_insert_alter (id Int64, v1 Int64) ENGINE = MergeTree ORDER BY id SETTINGS async_insert = 1;
+"
+
+url="${CLICKHOUSE_URL}&async_insert=1&async_insert_busy_timeout_max_ms=300000&async_insert_busy_timeout_min_ms=300000&wait_for_async_insert=0&async_insert_use_adaptive_busy_timeout=0"
+
+# ADD COLUMN
+
+${CLICKHOUSE_CURL} -sS "$url" -d "INSERT INTO t_async_insert_alter VALUES (42, 24)"
+
+$CLICKHOUSE_CLIENT -q "
+    ALTER TABLE t_async_insert_alter ADD COLUMN value2 Int64;
+
+    SYSTEM FLUSH ASYNC INSERT QUEUE;
+    SYSTEM FLUSH LOGS;
+
+    SELECT * FROM t_async_insert_alter ORDER BY id;
+"
+
+# MODIFY COLUMN
+
+${CLICKHOUSE_CURL} -sS "$url" -d "INSERT INTO t_async_insert_alter VALUES (43, 34, 55)"
+
+$CLICKHOUSE_CLIENT -q "
+    ALTER TABLE t_async_insert_alter MODIFY COLUMN value2 String;
+
+    SYSTEM FLUSH ASYNC INSERT QUEUE;
+    SYSTEM FLUSH LOGS;
+
+    SELECT * FROM t_async_insert_alter ORDER BY id;
+"
+
+## DROP COLUMN
+
+${CLICKHOUSE_CURL} -sS "$url" -d "INSERT INTO t_async_insert_alter VALUES ('100', '200', '300')"
+
+$CLICKHOUSE_CLIENT -q "
+    ALTER TABLE t_async_insert_alter DROP COLUMN value2;
+
+    SYSTEM FLUSH ASYNC INSERT QUEUE;
+    SYSTEM FLUSH LOGS;
+
+    SELECT * FROM t_async_insert_alter ORDER BY id;
+    SELECT query, data_kind, status FROM system.asynchronous_insert_log WHERE database = currentDatabase() AND table = 't_async_insert_alter' ORDER BY event_time_microseconds;
+
+    DROP TABLE t_async_insert_alter;
+"
