diff --git a/docs/en/sql-reference/functions/array-functions.md b/docs/en/sql-reference/functions/array-functions.md
index 8730e9afbb61..e7d01320a215 100644
--- a/docs/en/sql-reference/functions/array-functions.md
+++ b/docs/en/sql-reference/functions/array-functions.md
@@ -1753,18 +1753,38 @@ Query:
 ``` sql
 SELECT arrayEnumerateDenseRanked(2,[[10,10,30,20],[40,50,10,30]],2);
 ```
-
 Result:
 
 ``` text
 [[1,1,2,3],[1,2,3,4]]
 ```
 
-## arrayUnion(arr)
+## arrayUnion
 
-Takes multiple arrays, returns an array that contains all elements that are present in any of the source arrays.
+Takes multiple arrays and returns an array which contains all elements that are present in one of the source arrays.
+The result contains only unique values.
+
+**Syntax**
+
+``` sql
+arrayUnion(arr1, arr2, ..., arrN)
+```
+
+**Arguments**
+
+- `arrN` — [Array](../data-types/array.md).
+
+The function can take any number of arrays of different types.
+
+**Returned value**
+
+- [Array](../data-types/array.md) with distinct elements from the source arrays.
+
+
+**Example**
+
+Query:
 
-Example:
 ```sql
 SELECT
     arrayUnion([-2, 1], [10, 1], [-2], []) as num_example,
@@ -1772,28 +1792,95 @@ SELECT
     arrayUnion([1, 3, NULL], [2, 3, NULL]) as null_example
 ```
 
+Result:
+
 ```text
 ┌─num_example─┬─str_example────┬─null_example─┐
 │ [10,-2,1]   │ ['hello','hi'] │ [3,2,1,NULL] │
 └─────────────┴────────────────┴──────────────┘
 ```
 
-## arrayIntersect(arr)
+## arrayIntersect
 
-Takes multiple arrays, returns an array with elements that are present in all source arrays.
+Takes multiple arrays and returns an array with elements which are present in all source arrays.
+The result contains only unique values.
 
-Example:
+**Syntax**
+
+``` sql
+arrayIntersect(arr1, arr2, ..., arrN)
+```
+
+**Arguments**
+
+- `arrN` — [Array](../data-types/array.md).
+
+The function can take any number of arrays of different types.
+
+**Returned value**
+
+- [Array](../data-types/array.md) with distinct elements present in all source arrays.
+
+**Example**
+
+Query:
 
 ``` sql
 SELECT
-    arrayIntersect([1, 2], [1, 3], [2, 3]) AS no_intersect,
-    arrayIntersect([1, 2], [1, 3], [1, 4]) AS intersect
+    arrayIntersect([1, 2], [1, 3], [2, 3]) AS empty_intersection,
+    arrayIntersect([1, 2], [1, 3], [1, 4]) AS non_empty_intersection
+```
+
+Result:
+
+``` text
+┌─non_empty_intersection─┬─empty_intersection─┐
+│ []                     │ [1]                │
+└────────────────────────┴────────────────────┘
 ```
 
+## arraySymmetricDifference
+
+Takes multiple arrays and returns an array with elements that are not present in all source arrays.
+The result contains only unique values.
+
+:::note
+The symmetric difference of _more than two sets_ is [mathematically defined](https://en.wikipedia.org/wiki/Symmetric_difference#n-ary_symmetric_difference) as the set of all input elements which occur in an odd number of input sets.
+In contrast, function `arraySymmetricDifference` simply returns the set of input elements which do not occur in all input sets.
+:::
+
+**Syntax**
+
+``` sql
+arraySymmetricDifference(arr1, arr2, ..., arrN)
+```
+
+**Arguments**
+
+- `arrN` — [Array](../data-types/array.md).
+
+The function can take any number of arrays of different types.
+
+**Returned value**
+
+- [Array](../data-types/array.md) with distinct elements not present in all source arrays.
+
+**Example**
+
+Query:
+
+``` sql
+SELECT
+    arraySymmetricDifference([1, 2], [1, 2], [1, 2]) AS empty_symmetric_difference
+    arraySymmetricDifference([1, 2], [1, 2], [1, 3]) AS non_empty_symmetric_difference,
+```
+
+Result:
+
 ``` text
-┌─no_intersect─┬─intersect─┐
-│ []           │ [1]       │
-└──────────────┴───────────┘
+┌─empty_symmetric_difference─┬─non_empty_symmetric_difference─┐
+│ []                         │ [3]                            │
+└────────────────────────────┴────────────────────────────────┘
 ```
 
 ## arrayJaccardIndex
diff --git a/src/Functions/array/arrayIntersect.cpp b/src/Functions/array/arrayIntersect.cpp
index 98a230606961..bf4e5412fd44 100644
--- a/src/Functions/array/arrayIntersect.cpp
+++ b/src/Functions/array/arrayIntersect.cpp
@@ -47,6 +47,11 @@ struct ArrayModeUnion
     static constexpr auto name = "arrayUnion";
 };
 
+struct ArrayModeSymmetricDifference
+{
+    static constexpr auto name = "arraySymmetricDifference";
+};
+
 template <typename Mode>
 class FunctionArrayIntersect : public IFunction
 {
@@ -577,8 +582,8 @@ ColumnPtr FunctionArrayIntersect<Mode>::execute(const UnpackedArrays & arrays, M
         map.clear();
 
         bool all_has_nullable = all_nullable;
-        bool has_a_null = false;
         bool current_has_nullable = false;
+        size_t null_count = 0;
 
         for (size_t arg_num = 0; arg_num < args; ++arg_num)
         {
@@ -629,7 +634,8 @@ ColumnPtr FunctionArrayIntersect<Mode>::execute(const UnpackedArrays & arrays, M
             if (!current_has_nullable)
                 all_has_nullable = false;
             else
-                has_a_null = true;
+                null_count++;
+
         }
 
         // We have NULL in output only once if it should be there
@@ -643,11 +649,26 @@ ColumnPtr FunctionArrayIntersect<Mode>::execute(const UnpackedArrays & arrays, M
             {
                 typename Map::LookupResult pair = map.find(p.getKey());
                 if (pair && pair->getMapped() >= 1)
-                {
                     insertElement<Map, ColumnType, is_numeric_column>(pair, result_offset, result_data, null_map, use_null_map);
-                }
             }
-            if (has_a_null && !null_added)
+            if (null_count > 0 && !null_added)
+            {
+                ++result_offset;
+                result_data.insertDefault();
+                null_map.push_back(1);
+                null_added = true;
+            }
+        }
+        else if constexpr (std::is_same_v<Mode, ArrayModeSymmetricDifference>)
+        {
+            use_null_map = has_nullable;
+            for (auto & p : map)
+            {
+                typename Map::LookupResult pair = map.find(p.getKey());
+                if (pair && pair->getMapped() >= 1 && pair->getMapped() < args)
+                    insertElement<Map, ColumnType, is_numeric_column>(pair, result_offset, result_data, null_map, use_null_map);
+            }
+            if (null_count > 0 && null_count < args && !null_added)
             {
                 ++result_offset;
                 result_data.insertDefault();
@@ -685,9 +706,7 @@ ColumnPtr FunctionArrayIntersect<Mode>::execute(const UnpackedArrays & arrays, M
                         continue;
                 }
                 else if constexpr (is_numeric_column)
-                {
                     pair = map.find(columns[0]->getElement(i));
-                }
                 else if constexpr (std::is_same_v<ColumnType, ColumnString> || std::is_same_v<ColumnType, ColumnFixedString>)
                     pair = map.find(columns[0]->getDataAt(i));
                 else
@@ -705,9 +724,7 @@ ColumnPtr FunctionArrayIntersect<Mode>::execute(const UnpackedArrays & arrays, M
                 // Add the value if all arrays have the value for intersect
                 // or if there was at least one occurrence in all of the arrays for union
                 if (pair && pair->getMapped() == args)
-                {
                     insertElement<Map, ColumnType, is_numeric_column>(pair, result_offset, result_data, null_map, use_null_map);
-                }
             }
         }
 
@@ -745,11 +762,13 @@ void FunctionArrayIntersect<Mode>::insertElement(typename Map::LookupResult & pa
 
 using ArrayIntersect = FunctionArrayIntersect<ArrayModeIntersect>;
 using ArrayUnion = FunctionArrayIntersect<ArrayModeUnion>;
+using ArraySymmetricDifference = FunctionArrayIntersect<ArrayModeSymmetricDifference>;
 
 REGISTER_FUNCTION(ArrayIntersect)
 {
     factory.registerFunction<ArrayIntersect>();
     factory.registerFunction<ArrayUnion>();
+    factory.registerFunction<ArraySymmetricDifference>();
 }
 
 }
diff --git a/utils/check-style/aspell-ignore/en/aspell-dict.txt b/utils/check-style/aspell-ignore/en/aspell-dict.txt
index 4dacdc604bd2..a5a9ea794906 100644
--- a/utils/check-style/aspell-ignore/en/aspell-dict.txt
+++ b/utils/check-style/aspell-ignore/en/aspell-dict.txt
@@ -1324,6 +1324,7 @@ arraySort
 arraySplit
 arrayStringConcat
 arraySum
+arraySymmetricDifference
 arrayUnion
 arrayUniq
 arrayWithConstant
