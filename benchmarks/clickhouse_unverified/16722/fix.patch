diff --git a/src/Interpreters/NullableUtils.cpp b/src/Interpreters/NullableUtils.cpp
index d1586bec06b2..ce681b1d5692 100644
--- a/src/Interpreters/NullableUtils.cpp
+++ b/src/Interpreters/NullableUtils.cpp
@@ -5,7 +5,7 @@
 namespace DB
 {
 
-ColumnPtr extractNestedColumnsAndNullMap(ColumnRawPtrs & key_columns, ConstNullMapPtr & null_map, bool exact_null)
+ColumnPtr extractNestedColumnsAndNullMap(ColumnRawPtrs & key_columns, ConstNullMapPtr & null_map)
 {
     ColumnPtr null_map_holder;
 
@@ -38,12 +38,7 @@ ColumnPtr extractNestedColumnsAndNullMap(ColumnRawPtrs & key_columns, ConstNullM
                     PaddedPODArray<UInt8> & mutable_null_map = assert_cast<ColumnUInt8 &>(*mutable_null_map_holder).getData();
                     const PaddedPODArray<UInt8> & other_null_map = column_nullable->getNullMapData();
                     for (size_t i = 0, size = mutable_null_map.size(); i < size; ++i)
-                    {
-                        if (exact_null)
-                            mutable_null_map[i] &= other_null_map[i];
-                        else
-                            mutable_null_map[i] |= other_null_map[i];
-                    }
+                        mutable_null_map[i] |= other_null_map[i];
 
                     null_map_holder = std::move(mutable_null_map_holder);
                 }
diff --git a/src/Interpreters/NullableUtils.h b/src/Interpreters/NullableUtils.h
index f8294832c1d9..8750a60f2473 100644
--- a/src/Interpreters/NullableUtils.h
+++ b/src/Interpreters/NullableUtils.h
@@ -9,6 +9,6 @@ namespace DB
   * In 'null_map' return a map of positions where at least one column was NULL.
   * @returns ownership column of null_map.
   */
-ColumnPtr extractNestedColumnsAndNullMap(ColumnRawPtrs & key_columns, ConstNullMapPtr & null_map, bool exact_null = false);
+ColumnPtr extractNestedColumnsAndNullMap(ColumnRawPtrs & key_columns, ConstNullMapPtr & null_map);
 
 }
diff --git a/src/Interpreters/Set.cpp b/src/Interpreters/Set.cpp
index 0f9760661655..13606e1d54cb 100644
--- a/src/Interpreters/Set.cpp
+++ b/src/Interpreters/Set.cpp
@@ -87,8 +87,6 @@ void NO_INLINE Set::insertFromBlockImplCase(
         {
             if ((*null_map)[i])
             {
-                has_null = true;
-
                 if constexpr (build_filter)
                 {
                     (*out_filter)[i] = false;
@@ -140,7 +138,9 @@ void Set::setHeader(const Block & header)
 
     /// We will insert to the Set only keys, where all components are not NULL.
     ConstNullMapPtr null_map{};
-    ColumnPtr null_map_holder = extractNestedColumnsAndNullMap(key_columns, null_map, transform_null_in);
+    ColumnPtr null_map_holder;
+    if (!transform_null_in)
+        extractNestedColumnsAndNullMap(key_columns, null_map);
 
     if (fill_set_elements)
     {
@@ -180,7 +180,9 @@ bool Set::insertFromBlock(const Block & block)
 
     /// We will insert to the Set only keys, where all components are not NULL.
     ConstNullMapPtr null_map{};
-    ColumnPtr null_map_holder = extractNestedColumnsAndNullMap(key_columns, null_map, transform_null_in);
+    ColumnPtr null_map_holder;
+    if (!transform_null_in)
+         null_map_holder = extractNestedColumnsAndNullMap(key_columns, null_map);
 
     /// Filter to extract distinct values from the block.
     ColumnUInt8::MutablePtr filter;
@@ -259,8 +261,9 @@ ColumnPtr Set::execute(const Block & block, bool negative) const
 
     /// We will check existence in Set only for keys, where all components are not NULL.
     ConstNullMapPtr null_map{};
-
-    ColumnPtr null_map_holder = extractNestedColumnsAndNullMap(key_columns, null_map, transform_null_in);
+    ColumnPtr null_map_holder;
+    if (!transform_null_in)
+        null_map_holder = extractNestedColumnsAndNullMap(key_columns, null_map);
 
     executeOrdinary(key_columns, vec_res, negative, null_map);
 
@@ -303,10 +306,7 @@ void NO_INLINE Set::executeImplCase(
     {
         if (has_null_map && (*null_map)[i])
         {
-            if (transform_null_in && has_null)
-                vec_res[i] = !negative;
-            else
-                vec_res[i] = negative;
+            vec_res[i] = negative;
         }
         else
         {
diff --git a/src/Interpreters/Set.h b/src/Interpreters/Set.h
index faae9c7318ed..d3c9b8f684b0 100644
--- a/src/Interpreters/Set.h
+++ b/src/Interpreters/Set.h
@@ -108,10 +108,9 @@ class Set
     /// Do we need to additionally store all elements of the set in explicit form for subsequent use for index.
     bool fill_set_elements;
 
+    /// If true, insert NULL values to set.
     bool transform_null_in;
 
-    bool has_null = false;
-
     /// Check if set contains all the data.
     bool is_created = false;
 
