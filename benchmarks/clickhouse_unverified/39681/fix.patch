diff --git a/src/Parsers/ExpressionListParsers.cpp b/src/Parsers/ExpressionListParsers.cpp
index caf9be1fea63..ea51367ee5d0 100644
--- a/src/Parsers/ExpressionListParsers.cpp
+++ b/src/Parsers/ExpressionListParsers.cpp
@@ -1,6 +1,7 @@
 #include <string_view>
 
 #include <Parsers/ExpressionListParsers.h>
+#include <Parsers/ParserSetQuery.h>
 
 #include <Parsers/ASTAsterisk.h>
 #include <Parsers/ASTExpressionList.h>
@@ -9,6 +10,7 @@
 #include <Parsers/ASTIdentifier.h>
 #include <Parsers/ASTLiteral.h>
 #include <Parsers/ASTSelectQuery.h>
+#include <Parsers/ASTSetQuery.h>
 #include <Parsers/ASTSelectWithUnionQuery.h>
 #include <Parsers/ASTSubquery.h>
 #include <Parsers/ASTTablesInSelectQuery.h>
@@ -603,6 +605,13 @@ bool ParserTableFunctionExpression::parseImpl(Pos & pos, ASTPtr & node, Expected
 {
     if (ParserTableFunctionView().parse(pos, node, expected))
         return true;
+    ParserKeyword s_settings("SETTINGS");
+    if (s_settings.ignore(pos, expected))
+    {
+        ParserSetQuery parser_settings(true);
+        if (parser_settings.parse(pos, node, expected))
+            return true;
+    }
     return elem_parser.parse(pos, node, expected);
 }
 
diff --git a/src/TableFunctions/TableFunctionExecutable.cpp b/src/TableFunctions/TableFunctionExecutable.cpp
index b84008f5ac8d..7489b91659c7 100644
--- a/src/TableFunctions/TableFunctionExecutable.cpp
+++ b/src/TableFunctions/TableFunctionExecutable.cpp
@@ -4,7 +4,10 @@
 #include <TableFunctions/TableFunctionFactory.h>
 #include <TableFunctions/parseColumnsListForTableFunction.h>
 #include <Parsers/ASTFunction.h>
+#include <Parsers/ASTIdentifier.h>
 #include <Parsers/ASTSelectWithUnionQuery.h>
+#include <Parsers/ASTSetQuery.h>
+#include <Parsers/parseQuery.h>
 #include <Storages/checkAndGetLiteralArgument.h>
 #include <Storages/StorageExecutable.h>
 #include <DataTypes/DataTypeFactory.h>
@@ -48,7 +51,7 @@ void TableFunctionExecutable::parseArguments(const ASTPtr & ast_function, Contex
     std::vector<String> script_name_with_arguments;
     boost::split(script_name_with_arguments, script_name_with_arguments_value, [](char c){ return c == ' '; });
 
-    script_name = script_name_with_arguments[0];
+    script_name = std::move(script_name_with_arguments[0]);
     script_name_with_arguments.erase(script_name_with_arguments.begin());
     arguments = std::move(script_name_with_arguments);
     format = checkAndGetLiteralArgument<String>(args[1], "format");
@@ -56,14 +59,26 @@ void TableFunctionExecutable::parseArguments(const ASTPtr & ast_function, Contex
 
     for (size_t i = 3; i < args.size(); ++i)
     {
-        ASTPtr query = args[i]->children.at(0);
-        if (!query->as<ASTSelectWithUnionQuery>())
-            throw Exception(ErrorCodes::UNSUPPORTED_METHOD,
-                "Table function '{}' argument is invalid input query {}",
-                getName(),
-                query->formatForErrorMessage());
-
-        input_queries.emplace_back(std::move(query));
+        if (args[i]->as<ASTSetQuery>())
+        {
+            settings_query = std::move(args[i]);
+        }
+        else
+        {
+            ASTPtr query = args[i]->children.at(0);
+            if (query->as<ASTSelectWithUnionQuery>())
+            {
+                input_queries.emplace_back(std::move(query));
+            }
+            else
+            {
+                throw Exception(
+                    ErrorCodes::UNSUPPORTED_METHOD,
+                    "Table function '{}' argument is invalid {}",
+                    getName(),
+                    args[i]->formatForErrorMessage());
+            }
+        }
     }
 }
 
@@ -79,6 +94,8 @@ StoragePtr TableFunctionExecutable::executeImpl(const ASTPtr & /*ast_function*/,
     ExecutableSettings settings;
     settings.script_name = script_name;
     settings.script_arguments = arguments;
+    if (settings_query != nullptr)
+        settings.applyChanges(settings_query->as<ASTSetQuery>()->changes);
 
     auto storage = std::make_shared<StorageExecutable>(storage_id, format, settings, input_queries, getActualTableStructure(context), ConstraintsDescription{});
     storage->startup();
diff --git a/src/TableFunctions/TableFunctionExecutable.h b/src/TableFunctions/TableFunctionExecutable.h
index 128ee8e46fcf..820da077ca20 100644
--- a/src/TableFunctions/TableFunctionExecutable.h
+++ b/src/TableFunctions/TableFunctionExecutable.h
@@ -6,6 +6,7 @@ namespace DB
 {
 
 class Context;
+class ASTSetQuery;
 
 /* executable(script_name_optional_arguments, format, structure, input_query) - creates a temporary storage from executable file
  *
@@ -32,5 +33,6 @@ class TableFunctionExecutable : public ITableFunction
     String format;
     String structure;
     std::vector<ASTPtr> input_queries;
+    ASTPtr settings_query = nullptr;
 };
 }
