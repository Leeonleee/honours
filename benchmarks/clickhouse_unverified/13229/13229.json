{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 13229,
  "instance_id": "ClickHouse__ClickHouse-13229",
  "issue_numbers": [
    "12554"
  ],
  "base_commit": "18b21511a97ae5e23c6c67acaeb1552480728f56",
  "patch": "diff --git a/src/Functions/geohashesInBox.cpp b/src/Functions/geohashesInBox.cpp\nindex 7bb02f45e91c..ebd476c650ca 100644\n--- a/src/Functions/geohashesInBox.cpp\n+++ b/src/Functions/geohashesInBox.cpp\n@@ -59,24 +59,39 @@ class FunctionGeohashesInBox : public IFunction\n     bool useDefaultImplementationForConstants() const override { return true; }\n \n     template <typename LonAndLatType, typename PrecisionType>\n-    void execute(const IColumn * lon_min_column,\n-                    const IColumn * lat_min_column,\n-                    const IColumn * lon_max_column,\n-                    const IColumn * lat_max_column,\n-                    const IColumn * precision_column,\n-                    ColumnPtr & result) const\n+    void execute(\n+        const IColumn * lon_min_column,\n+        const IColumn * lat_min_column,\n+        const IColumn * lon_max_column,\n+        const IColumn * lat_max_column,\n+        const IColumn * precision_column,\n+        ColumnPtr & result,\n+        size_t input_rows_count) const\n     {\n         static constexpr size_t max_array_size = 10'000'000;\n \n+        const auto * lon_min_const = typeid_cast<const ColumnConst *>(lon_min_column);\n+        const auto * lat_min_const = typeid_cast<const ColumnConst *>(lat_min_column);\n+        const auto * lon_max_const = typeid_cast<const ColumnConst *>(lon_max_column);\n+        const auto * lat_max_const = typeid_cast<const ColumnConst *>(lat_max_column);\n+        const auto * precision_const = typeid_cast<const ColumnConst *>(precision_column);\n+\n+        if (lon_min_const)\n+            lon_min_column = &lon_min_const->getDataColumn();\n+        if (lat_min_const)\n+            lat_min_column = &lat_min_const->getDataColumn();\n+        if (lon_max_const)\n+            lon_max_column = &lon_max_const->getDataColumn();\n+        if (lat_max_const)\n+            lat_max_column = &lat_max_const->getDataColumn();\n+        if (precision_const)\n+            precision_column = &precision_const->getDataColumn();\n+\n         const auto * lon_min = checkAndGetColumn<ColumnVector<LonAndLatType>>(lon_min_column);\n         const auto * lat_min = checkAndGetColumn<ColumnVector<LonAndLatType>>(lat_min_column);\n         const auto * lon_max = checkAndGetColumn<ColumnVector<LonAndLatType>>(lon_max_column);\n         const auto * lat_max = checkAndGetColumn<ColumnVector<LonAndLatType>>(lat_max_column);\n-        auto * precision = checkAndGetColumn<ColumnVector<PrecisionType>>(precision_column);\n-        if (precision == nullptr)\n-        {\n-            precision = checkAndGetColumnConstData<ColumnVector<PrecisionType>>(precision_column);\n-        }\n+        const auto * precision = checkAndGetColumn<ColumnVector<PrecisionType>>(precision_column);\n \n         if (!lon_min || !lat_min || !lon_max || !lat_max || !precision)\n         {\n@@ -88,24 +103,24 @@ class FunctionGeohashesInBox : public IFunction\n                             ErrorCodes::LOGICAL_ERROR);\n         }\n \n-        const size_t total_rows = lat_min->size();\n-\n         auto col_res = ColumnArray::create(ColumnString::create());\n         ColumnString & res_strings = typeid_cast<ColumnString &>(col_res->getData());\n         ColumnArray::Offsets & res_offsets = col_res->getOffsets();\n         ColumnString::Chars & res_strings_chars = res_strings.getChars();\n         ColumnString::Offsets & res_strings_offsets = res_strings.getOffsets();\n \n-        for (size_t row = 0; row < total_rows; ++row)\n+        for (size_t row = 0; row < input_rows_count; ++row)\n         {\n-            const Float64 lon_min_value = lon_min->getElement(row);\n-            const Float64 lat_min_value = lat_min->getElement(row);\n-            const Float64 lon_max_value = lon_max->getElement(row);\n-            const Float64 lat_max_value = lat_max->getElement(row);\n+            const Float64 lon_min_value = lon_min->getElement(lon_min_const ? 0 : row);\n+            const Float64 lat_min_value = lat_min->getElement(lat_min_const ? 0 : row);\n+            const Float64 lon_max_value = lon_max->getElement(lon_max_const ? 0 : row);\n+            const Float64 lat_max_value = lat_max->getElement(lat_max_const ? 0 : row);\n+            const PrecisionType precision_value = precision->getElement(precision_const ? 0 : row);\n \n             const auto prepared_args = geohashesInBoxPrepare(\n-                        lon_min_value, lat_min_value, lon_max_value, lat_max_value,\n-                        precision->getElement(row % precision->size()));\n+                lon_min_value, lat_min_value, lon_max_value, lat_max_value,\n+                precision_value);\n+\n             if (prepared_args.items_count > max_array_size)\n             {\n                 throw Exception(getName() + \" would produce \" + std::to_string(prepared_args.items_count) +\n@@ -123,8 +138,9 @@ class FunctionGeohashesInBox : public IFunction\n \n             for (UInt64 i = 1; i <= prepared_args.items_count ; ++i)\n                 res_strings_offsets.push_back(starting_offset + (prepared_args.precision + 1) * i);\n-            res_offsets.push_back((res_offsets.empty() ? 0 : res_offsets.back()) + prepared_args.items_count);\n+            res_offsets.push_back(res_offsets.back() + prepared_args.items_count);\n         }\n+\n         if (!res_strings_offsets.empty() && res_strings_offsets.back() != res_strings_chars.size())\n         {\n             throw Exception(\"String column size mismatch (internal logical error)\", ErrorCodes::LOGICAL_ERROR);\n@@ -140,23 +156,19 @@ class FunctionGeohashesInBox : public IFunction\n         result = std::move(col_res);\n     }\n \n-    void executeImpl(Block & block, const ColumnNumbers & arguments, size_t result, size_t /*input_rows_count*/) const override\n+    void executeImpl(Block & block, const ColumnNumbers & arguments, size_t result, size_t input_rows_count) const override\n     {\n         const IColumn * lon_min = block.getByPosition(arguments[0]).column.get();\n         const IColumn * lat_min = block.getByPosition(arguments[1]).column.get();\n         const IColumn * lon_max = block.getByPosition(arguments[2]).column.get();\n         const IColumn * lat_max = block.getByPosition(arguments[3]).column.get();\n-        const IColumn * prec =    block.getByPosition(arguments[4]).column.get();\n+        const IColumn * precision = block.getByPosition(arguments[4]).column.get();\n         ColumnPtr & res = block.getByPosition(result).column;\n \n         if (checkColumn<ColumnVector<Float32>>(lon_min))\n-        {\n-            execute<Float32, UInt8>(lon_min, lat_min, lon_max, lat_max, prec, res);\n-        }\n+            execute<Float32, UInt8>(lon_min, lat_min, lon_max, lat_max, precision, res, input_rows_count);\n         else\n-        {\n-            execute<Float64, UInt8>(lon_min, lat_min, lon_max, lat_max, prec, res);\n-        }\n+            execute<Float64, UInt8>(lon_min, lat_min, lon_max, lat_max, precision, res, input_rows_count);\n     }\n };\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01426_geohash_constants.reference b/tests/queries/0_stateless/01426_geohash_constants.reference\nnew file mode 100644\nindex 000000000000..ac62d60ce04e\n--- /dev/null\n+++ b/tests/queries/0_stateless/01426_geohash_constants.reference\n@@ -0,0 +1,6 @@\n+['s']\n+['s0']\n+['s02','s08','s03','s09','s06','s0d']\n+['s']\n+['s0']\n+['s02','s08','s03','s09','s06','s0d']\ndiff --git a/tests/queries/0_stateless/01426_geohash_constants.sql b/tests/queries/0_stateless/01426_geohash_constants.sql\nnew file mode 100644\nindex 000000000000..4836ed6b2f83\n--- /dev/null\n+++ b/tests/queries/0_stateless/01426_geohash_constants.sql\n@@ -0,0 +1,6 @@\n+SELECT geohashesInBox(1., 2., 3., 4., 1);\n+SELECT geohashesInBox(materialize(1.), 2., 3., 4., 2);\n+SELECT geohashesInBox(1., materialize(2.), 3., 4., 3);\n+SELECT geohashesInBox(1., 2., materialize(3.), 4., 1);\n+SELECT geohashesInBox(1., 2., 3., materialize(4.), 2);\n+SELECT geohashesInBox(1., 2., 3., 4., materialize(3));\n",
  "problem_statement": "geohashesInBox: Logical error: Unsupported argument types\n```\r\nSELECT geohashesInBox(arrayJoin([1.]), 2., 3., 4., 5)\r\n\r\n\r\n2020.07.16 21:37:55.544346 [ 685820 ] {a9d597f6-5008-4b0d-8c1b-0e58df7bb711} <Error> : Logical error: 'Unsupported argument types for function geohashesInBox : Float64, Const(Float64), Const(Float64), Const(Float64).'.\r\nclickhouse-server: /home/akuzm/ch4/ch/src/Common/Exception.cpp:45: DB::Exception::Exception(const std::string &, int): Assertion `false' failed.\r\n2020.07.16 21:37:55.544707 [ 685754 ] {} <Trace> BaseDaemon: Received signal 6\r\n2020.07.16 21:37:55.545027 [ 685849 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.07.16 21:37:55.545415 [ 685849 ] {} <Fatal> BaseDaemon: (version 20.7.1.1, build id: 21B0DCC47427FD8E) (from thread 685820) (query_id: a9d597f6-5008-4b0d-8c1b-0e58df7bb711) Received signal Aborted (6)\r\n2020.07.16 21:37:55.545588 [ 685849 ] {} <Fatal> BaseDaemon: \r\n2020.07.16 21:37:55.545753 [ 685849 ] {} <Fatal> BaseDaemon: Stack trace: 0x7fcbfe5e418b 0x7fcbfe5c3859 0x7fcbfe5c3729 0x7fcbfe5d4f36 0x7fcc025103a5 0x7fcbf93ee4e5 0x7fcbf93ec9ab 0x7fcbf83ef6c1 0x7fcbf83eebcf 0x7fcbf8c30a63 0x7fcbf8c31b6d 0x7fcbf18bf9b3 0x7fcbf18c30e3 0x7fcbed41c0ff 0x7fcbecd4507e 0x7fcbf1d3027c 0x7fcbf1d26264 0x7fcbf1d1fa72 0x7fcbf1d1deb6 0x7fcbf1d8b5f8 0x7fcbf1d8b826 0x7fcbf20b8c33 0x7fcbf20b7c2a 0x7fcbee643864 0x7fcbee64ad18 0x7fcbff7acd7c 0x7fcbff7ad58a 0x7fcbff2be173\r\n2020.07.16 21:37:55.546053 [ 685849 ] {} <Fatal> BaseDaemon: 4. /build/glibc-YYA7BZ/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51: raise @ 0x4618b in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.16 21:37:55.546235 [ 685849 ] {} <Fatal> BaseDaemon: 5. /build/glibc-YYA7BZ/glibc-2.31/stdlib/abort.c:81: abort @ 0x25859 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.16 21:37:55.546468 [ 685849 ] {} <Fatal> BaseDaemon: 6. /build/glibc-YYA7BZ/glibc-2.31/intl/loadmsgcat.c:509: _nl_load_domain.cold @ 0x25729 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.16 21:37:55.546736 [ 685849 ] {} <Fatal> BaseDaemon: 7. ? @ 0x36f36 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.16 21:37:55.546967 [ 685849 ] {} <Fatal> BaseDaemon: 8. /home/akuzm/ch4/ch/src/Common/Exception.cpp:48: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x2a13a5 in /home/akuzm/ch4/build-clang10/src/libclickhouse_common_iod.so\r\n2020.07.16 21:37:55.551475 [ 685849 ] {} <Fatal> BaseDaemon: 9. /home/akuzm/ch4/ch/src/Functions/geohashesInBox.cpp:83: void DB::FunctionGeohashesInBox::execute<double, char8_t>(DB::IColumn const*, DB::IColumn const*, DB::IColumn const*, DB::IColumn const*, DB::IColumn const*, COW<DB::IColumn>::immutable_ptr<DB::IColumn>&) @ 0x38c14e5 in /home/akuzm/ch4/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.07.16 21:37:55.555714 [ 685849 ] {} <Fatal> BaseDaemon: 10. /home/akuzm/ch4/ch/src/Functions/geohashesInBox.cpp:160: DB::FunctionGeohashesInBox::executeImpl(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long) @ 0x38bf9ab in /home/akuzm/ch4/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.07.16 21:37:55.556177 [ 685849 ] {} <Fatal> BaseDaemon: 11. /home/akuzm/ch4/ch/src/Functions/IFunctionImpl.h:208: DB::IFunction::executeImplDryRun(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long) @ 0x28c26c1 in /home/akuzm/ch4/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.07.16 21:37:55.556575 [ 685849 ] {} <Fatal> BaseDaemon: 12. /home/akuzm/ch4/ch/src/Functions/IFunctionAdaptors.h:156: DB::DefaultExecutable::executeDryRun(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long) @ 0x28c1bcf in /home/akuzm/ch4/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.07.16 21:37:55.558038 [ 685849 ] {} <Fatal> BaseDaemon: 13. /home/akuzm/ch4/ch/src/Functions/IFunction.cpp:323: DB::ExecutableFunctionAdaptor::executeWithoutLowCardinalityColumns(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) @ 0x3103a63 in /home/akuzm/ch4/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.07.16 21:37:55.559560 [ 685849 ] {} <Fatal> BaseDaemon: 14. /home/akuzm/ch4/ch/src/Functions/IFunction.cpp:486: DB::ExecutableFunctionAdaptor::execute(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) @ 0x3104b6d in /home/akuzm/ch4/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.07.16 21:37:55.560592 [ 685849 ] {} <Fatal> BaseDaemon: 15. /home/akuzm/ch4/ch/src/Interpreters/ExpressionActions.cpp:365: DB::ExpressionAction::execute(DB::Block&, bool) const @ 0x11a89b3 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.16 21:37:55.561639 [ 685849 ] {} <Fatal> BaseDaemon: 16. /home/akuzm/ch4/ch/src/Interpreters/ExpressionActions.cpp:684: DB::ExpressionActions::execute(DB::Block&, bool) const @ 0x11ac0e3 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.16 21:37:55.562073 [ 685849 ] {} <Fatal> BaseDaemon: 17. /home/akuzm/ch4/ch/src/Processors/Transforms/ExpressionTransform.cpp:10: DB::ExpressionTransform::transformHeader(DB::Block, std::__1::shared_ptr<DB::ExpressionActions> const&) @ 0x25d0ff in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_transformsd.so\r\n2020.07.16 21:37:55.562398 [ 685849 ] {} <Fatal> BaseDaemon: 18. /home/akuzm/ch4/ch/src/Processors/QueryPlan/ExpressionStep.cpp:24: DB::ExpressionStep::ExpressionStep(DB::DataStream const&, std::__1::shared_ptr<DB::ExpressionActions>) @ 0x20507e in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_querypland.so\r\n2020.07.16 21:37:55.565039 [ 685849 ] {} <Fatal> BaseDaemon: 19. /home/akuzm/ch4/ch/contrib/libcxx/include/memory:3028: std::__1::__unique_if<DB::ExpressionStep>::__unique_single std::__1::make_unique<DB::ExpressionStep, DB::DataStream const&, std::__1::shared_ptr<DB::ExpressionActions> const&>(DB::DataStream const&, std::__1::shared_ptr<DB::ExpressionActions> const&) @ 0x161927c in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.16 21:37:55.568001 [ 685849 ] {} <Fatal> BaseDaemon: 20. /home/akuzm/ch4/ch/src/Interpreters/InterpreterSelectQuery.cpp:1549: DB::InterpreterSelectQuery::executeExpression(DB::QueryPlan&, std::__1::shared_ptr<DB::ExpressionActions> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0x160f264 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.16 21:37:55.571053 [ 685849 ] {} <Fatal> BaseDaemon: 21. /home/akuzm/ch4/ch/src/Interpreters/InterpreterSelectQuery.cpp:911: DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>) @ 0x1608a72 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.16 21:37:55.573371 [ 685849 ] {} <Fatal> BaseDaemon: 22. /home/akuzm/ch4/ch/src/Interpreters/InterpreterSelectQuery.cpp:472: DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x1606eb6 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.16 21:37:55.575676 [ 685849 ] {} <Fatal> BaseDaemon: 23. /home/akuzm/ch4/ch/src/Interpreters/InterpreterSelectWithUnionQuery.cpp:183: DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x16745f8 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.16 21:37:55.578012 [ 685849 ] {} <Fatal> BaseDaemon: 24. /home/akuzm/ch4/ch/src/Interpreters/InterpreterSelectWithUnionQuery.cpp:198: DB::InterpreterSelectWithUnionQuery::execute() @ 0x1674826 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.16 21:37:55.582079 [ 685849 ] {} <Fatal> BaseDaemon: 25. /home/akuzm/ch4/ch/src/Interpreters/executeQuery.cpp:385: DB::executeQueryImpl(char const*, char const*, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*) @ 0x19a1c33 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.16 21:37:55.586217 [ 685849 ] {} <Fatal> BaseDaemon: 26. /home/akuzm/ch4/ch/src/Interpreters/executeQuery.cpp:653: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0x19a0c2a in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.16 21:37:55.586852 [ 685849 ] {} <Fatal> BaseDaemon: 27. /home/akuzm/ch4/ch/src/Server/TCPHandler.cpp:253: DB::TCPHandler::runImpl() @ 0x36a864 in /home/akuzm/ch4/build-clang10/src/libclickhouse_serverd.so\r\n2020.07.16 21:37:55.587522 [ 685849 ] {} <Fatal> BaseDaemon: 28. /home/akuzm/ch4/ch/src/Server/TCPHandler.cpp:1201: DB::TCPHandler::run() @ 0x371d18 in /home/akuzm/ch4/build-clang10/src/libclickhouse_serverd.so\r\n2020.07.16 21:37:55.588046 [ 685849 ] {} <Fatal> BaseDaemon: 29. /home/akuzm/ch4/ch/contrib/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x1b9d7c in /home/akuzm/ch4/build-clang10/contrib/poco-cmake/Net/lib_poco_netd.so\r\n2020.07.16 21:37:55.588485 [ 685849 ] {} <Fatal> BaseDaemon: 30. /home/akuzm/ch4/ch/contrib/poco/Net/src/TCPServerDispatcher.cpp:114: Poco::Net::TCPServerDispatcher::run() @ 0x1ba58a in /home/akuzm/ch4/build-clang10/contrib/poco-cmake/Net/lib_poco_netd.so\r\n2020.07.16 21:37:55.589007 [ 685849 ] {} <Fatal> BaseDaemon: 31. /home/akuzm/ch4/ch/contrib/poco/Foundation/src/ThreadPool.cpp:199: Poco::PooledThread::run() @ 0x276173 in /home/akuzm/ch4/build-clang10/contrib/poco-cmake/Foundation/lib_poco_foundationd.so\r\n```\r\n\r\nLooks like a valid query that should work.\r\n\r\nCC @Enmk \n",
  "hints_text": "@Enmk did not respond.\n`precision->getElement(row % precision->size())`\r\n\r\nThat's no good.",
  "created_at": "2020-08-02T02:59:59Z",
  "modified_files": [
    "src/Functions/geohashesInBox.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01426_geohash_constants.reference",
    "b/tests/queries/0_stateless/01426_geohash_constants.sql"
  ]
}