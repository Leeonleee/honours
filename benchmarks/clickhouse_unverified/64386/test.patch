diff --git a/tests/queries/0_stateless/03166_fromReadableSize.reference b/tests/queries/0_stateless/03166_fromReadableSize.reference
new file mode 100644
index 000000000000..6fb54d991716
--- /dev/null
+++ b/tests/queries/0_stateless/03166_fromReadableSize.reference
@@ -0,0 +1,53 @@
+1.00 B
+1.00 KiB
+1.00 MiB
+1.00 GiB
+1.00 TiB
+1.00 PiB
+1.00 EiB
+1.00 MiB
+1024
+3072
+1024
+1024
+1024
+1024
+1024
+\N
+3217
+3217
+1000
+5
+2048
+8192
+0	0	0
+1 B	1
+1 KiB	1024
+1 MiB	1048576
+1 GiB	1073741824
+1 TiB	1099511627776
+1 PiB	1125899906842624
+1 EiB	1152921504606846976
+invalid	\N
+1 Joe	\N
+1KB	\N
+ 1 GiB	\N
+1 TiB with fries	\N
+NaN KiB	\N
+Inf KiB	\N
+0xa123 KiB	\N
+1 B	1
+1 KiB	1024
+1 MiB	1048576
+1 GiB	1073741824
+1 TiB	1099511627776
+1 PiB	1125899906842624
+1 EiB	1152921504606846976
+invalid	0
+1 Joe	0
+1KB	0
+ 1 GiB	0
+1 TiB with fries	0
+NaN KiB	0
+Inf KiB	0
+0xa123 KiB	0
diff --git a/tests/queries/0_stateless/03166_fromReadableSize.sql b/tests/queries/0_stateless/03166_fromReadableSize.sql
new file mode 100644
index 000000000000..2983280320c6
--- /dev/null
+++ b/tests/queries/0_stateless/03166_fromReadableSize.sql
@@ -0,0 +1,118 @@
+-- Should be kept in sync with 03167_fromReadableDecimalSize.sql
+
+-- Should be the inverse of formatReadableSize
+SELECT formatReadableSize(fromReadableSize('1 B'));
+SELECT formatReadableSize(fromReadableSize('1 KiB'));
+SELECT formatReadableSize(fromReadableSize('1 MiB'));
+SELECT formatReadableSize(fromReadableSize('1 GiB'));
+SELECT formatReadableSize(fromReadableSize('1 TiB'));
+SELECT formatReadableSize(fromReadableSize('1 PiB'));
+SELECT formatReadableSize(fromReadableSize('1 EiB'));
+
+-- Is case-insensitive
+SELECT formatReadableSize(fromReadableSize('1 mIb'));
+
+-- Should be able to parse decimals
+SELECT fromReadableSize('1.00 KiB');    -- 1024
+SELECT fromReadableSize('3.00 KiB');    -- 3072
+
+-- Infix whitespace is ignored
+SELECT fromReadableSize('1    KiB');
+SELECT fromReadableSize('1KiB');
+
+-- Can parse LowCardinality
+SELECT fromReadableSize(toLowCardinality('1 KiB'));
+
+-- Can parse nullable fields
+SELECT fromReadableSize(toNullable('1 KiB'));
+
+-- Can parse non-const columns fields
+SELECT fromReadableSize(materialize('1 KiB'));
+
+-- Output is NULL if NULL arg is passed
+SELECT fromReadableSize(NULL);
+
+-- Can parse more decimal places than Float64's precision
+SELECT fromReadableSize('3.14159265358979323846264338327950288419716939937510 KiB');
+
+-- Can parse sizes prefixed with a plus sign
+SELECT fromReadableSize('+3.1415 KiB');
+
+-- Can parse amounts in scientific notation
+SELECT fromReadableSize('10e2 B');
+
+-- Can parse floats with no decimal points
+SELECT fromReadableSize('5. B');
+
+-- Can parse numbers with leading zeroes
+SELECT fromReadableSize('002 KiB');
+
+-- Can parse octal-like
+SELECT fromReadableSize('08 KiB');
+
+-- Can parse various flavours of zero
+SELECT fromReadableSize('0 KiB'), fromReadableSize('+0 KiB'), fromReadableSize('-0 KiB');
+
+-- ERRORS
+-- No arguments
+SELECT fromReadableSize(); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
+-- Too many arguments
+SELECT fromReadableSize('1 B', '2 B'); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
+-- Wrong Type
+SELECT fromReadableSize(12); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
+-- Invalid input - overall garbage
+SELECT fromReadableSize('oh no'); -- { serverError CANNOT_PARSE_NUMBER }
+-- Invalid input - unknown unit
+SELECT fromReadableSize('12.3 rb'); -- { serverError CANNOT_PARSE_TEXT }
+-- Invalid input - Leading whitespace
+SELECT fromReadableSize(' 1 B'); -- { serverError CANNOT_PARSE_INPUT_ASSERTION_FAILED }
+-- Invalid input - Trailing characters
+SELECT fromReadableSize('1 B leftovers'); -- { serverError UNEXPECTED_DATA_AFTER_PARSED_VALUE }
+-- Invalid input - Decimal size unit is not accepted
+SELECT fromReadableSize('1 KB'); -- { serverError CANNOT_PARSE_TEXT }
+-- Invalid input - Negative sizes are not allowed
+SELECT fromReadableSize('-1 KiB'); -- { serverError BAD_ARGUMENTS }
+-- Invalid input - Input too large to fit in UInt64
+SELECT fromReadableSize('1000 EiB'); -- { serverError BAD_ARGUMENTS }
+-- Invalid input - Hexadecimal is not supported
+SELECT fromReadableSize('0xa123 KiB'); -- { serverError CANNOT_PARSE_TEXT }
+-- Invalid input - NaN is not supported, with or without sign and with different capitalizations
+SELECT fromReadableSize('nan KiB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableSize('+nan KiB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableSize('-nan KiB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableSize('NaN KiB'); -- { serverError BAD_ARGUMENTS }
+-- Invalid input - Infinite is not supported, with or without sign, in all its forms
+SELECT fromReadableSize('inf KiB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableSize('+inf KiB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableSize('-inf KiB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableSize('infinite KiB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableSize('+infinite KiB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableSize('-infinite KiB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableSize('Inf KiB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableSize('Infinite KiB'); -- { serverError BAD_ARGUMENTS }
+
+
+
+-- OR NULL
+-- Works as the regular version when inputs are correct
+SELECT
+    arrayJoin(['1 B', '1 KiB', '1 MiB', '1 GiB', '1 TiB', '1 PiB', '1 EiB']) AS readable_sizes,
+    fromReadableSizeOrNull(readable_sizes) AS filesize;
+
+-- Returns NULL on invalid values
+SELECT
+    arrayJoin(['invalid', '1 Joe', '1KB', ' 1 GiB', '1 TiB with fries', 'NaN KiB', 'Inf KiB', '0xa123 KiB']) AS readable_sizes,
+    fromReadableSizeOrNull(readable_sizes) AS filesize;
+
+
+-- OR ZERO
+-- Works as the regular version when inputs are correct
+SELECT
+    arrayJoin(['1 B', '1 KiB', '1 MiB', '1 GiB', '1 TiB', '1 PiB', '1 EiB']) AS readable_sizes,
+    fromReadableSizeOrZero(readable_sizes) AS filesize;
+
+-- Returns NULL on invalid values
+SELECT
+    arrayJoin(['invalid', '1 Joe', '1KB', ' 1 GiB', '1 TiB with fries', 'NaN KiB', 'Inf KiB', '0xa123 KiB']) AS readable_sizes,
+    fromReadableSizeOrZero(readable_sizes) AS filesize;
+
diff --git a/tests/queries/0_stateless/03167_fromReadableDecimalSize.reference b/tests/queries/0_stateless/03167_fromReadableDecimalSize.reference
new file mode 100644
index 000000000000..62620501de01
--- /dev/null
+++ b/tests/queries/0_stateless/03167_fromReadableDecimalSize.reference
@@ -0,0 +1,53 @@
+1.00 B
+1.00 KB
+1.00 MB
+1.00 GB
+1.00 TB
+1.00 PB
+1.00 EB
+1.00 MB
+1000
+3000
+1000
+1000
+1000
+1000
+1000
+\N
+3142
+3142
+1000
+5
+2000
+8000
+0	0	0
+1 B	1
+1 KB	1000
+1 MB	1000000
+1 GB	1000000000
+1 TB	1000000000000
+1 PB	1000000000000000
+1 EB	1000000000000000000
+invalid	\N
+1 Joe	\N
+1 KiB	\N
+ 1 GB	\N
+1 TB with fries	\N
+NaN KB	\N
+Inf KB	\N
+0xa123 KB	\N
+1 B	1
+1 KB	1000
+1 MB	1000000
+1 GB	1000000000
+1 TB	1000000000000
+1 PB	1000000000000000
+1 EB	1000000000000000000
+invalid	0
+1 Joe	0
+1 KiB	0
+ 1 GiB	0
+1 TiB with fries	0
+NaN KB	0
+Inf KB	0
+0xa123 KB	0
diff --git a/tests/queries/0_stateless/03167_fromReadableDecimalSize.sql b/tests/queries/0_stateless/03167_fromReadableDecimalSize.sql
new file mode 100644
index 000000000000..618f99b1d282
--- /dev/null
+++ b/tests/queries/0_stateless/03167_fromReadableDecimalSize.sql
@@ -0,0 +1,117 @@
+-- Should be kept in sync with 03166_fromReadableSize.sql
+
+-- Should be the inverse of formatReadableDecimalSize
+SELECT formatReadableDecimalSize(fromReadableDecimalSize('1 B'));
+SELECT formatReadableDecimalSize(fromReadableDecimalSize('1 KB'));
+SELECT formatReadableDecimalSize(fromReadableDecimalSize('1 MB'));
+SELECT formatReadableDecimalSize(fromReadableDecimalSize('1 GB'));
+SELECT formatReadableDecimalSize(fromReadableDecimalSize('1 TB'));
+SELECT formatReadableDecimalSize(fromReadableDecimalSize('1 PB'));
+SELECT formatReadableDecimalSize(fromReadableDecimalSize('1 EB'));
+
+-- Is case-insensitive
+SELECT formatReadableDecimalSize(fromReadableDecimalSize('1 mb'));
+
+-- Should be able to parse decimals
+SELECT fromReadableDecimalSize('1.00 KB');    -- 1024
+SELECT fromReadableDecimalSize('3.00 KB');    -- 3072
+
+-- Infix whitespace is ignored
+SELECT fromReadableDecimalSize('1    KB');
+SELECT fromReadableDecimalSize('1KB');
+
+-- Can parse LowCardinality
+SELECT fromReadableDecimalSize(toLowCardinality('1 KB'));
+
+-- Can parse nullable fields
+SELECT fromReadableDecimalSize(toNullable('1 KB'));
+
+-- Can parse non-const columns fields
+SELECT fromReadableDecimalSize(materialize('1 KB'));
+
+-- Output is NULL if NULL arg is passed
+SELECT fromReadableDecimalSize(NULL);
+
+-- Can parse more decimal places than Float64's precision
+SELECT fromReadableDecimalSize('3.14159265358979323846264338327950288419716939937510 KB');
+
+-- Can parse sizes prefixed with a plus sign
+SELECT fromReadableDecimalSize('+3.1415 KB');
+
+-- Can parse amounts in scientific notation
+SELECT fromReadableDecimalSize('10e2 B');
+
+-- Can parse floats with no decimal points
+SELECT fromReadableDecimalSize('5. B');
+
+-- Can parse numbers with leading zeroes
+SELECT fromReadableDecimalSize('002 KB');
+
+-- Can parse octal-like
+SELECT fromReadableDecimalSize('08 KB');
+
+-- Can parse various flavours of zero
+SELECT fromReadableDecimalSize('0 KB'), fromReadableDecimalSize('+0 KB'), fromReadableDecimalSize('-0 KB');
+
+-- ERRORS
+-- No arguments
+SELECT fromReadableDecimalSize(); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
+-- Too many arguments
+SELECT fromReadableDecimalSize('1 B', '2 B'); -- { serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH }
+-- Wrong Type
+SELECT fromReadableDecimalSize(12); -- { serverError ILLEGAL_TYPE_OF_ARGUMENT }
+-- Invalid input - overall garbage
+SELECT fromReadableDecimalSize('oh no'); -- { serverError CANNOT_PARSE_NUMBER }
+-- Invalid input - unknown unit
+SELECT fromReadableDecimalSize('12.3 rb'); -- { serverError CANNOT_PARSE_TEXT }
+-- Invalid input - Leading whitespace
+SELECT fromReadableDecimalSize(' 1 B'); -- { serverError CANNOT_PARSE_INPUT_ASSERTION_FAILED }
+-- Invalid input - Trailing characters
+SELECT fromReadableDecimalSize('1 B leftovers'); -- { serverError UNEXPECTED_DATA_AFTER_PARSED_VALUE }
+-- Invalid input - Binary size unit is not accepted
+SELECT fromReadableDecimalSize('1 KiB'); -- { serverError CANNOT_PARSE_TEXT }
+-- Invalid input - Negative sizes are not allowed
+SELECT fromReadableDecimalSize('-1 KB'); -- { serverError BAD_ARGUMENTS }
+-- Invalid input - Input too large to fit in UInt64
+SELECT fromReadableDecimalSize('1000 EB'); -- { serverError BAD_ARGUMENTS }
+-- Invalid input - Hexadecimal is not supported
+SELECT fromReadableDecimalSize('0xa123 KB'); -- { serverError CANNOT_PARSE_TEXT }
+-- Invalid input - NaN is not supported, with or without sign and with different capitalizations
+SELECT fromReadableDecimalSize('nan KB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableDecimalSize('+nan KB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableDecimalSize('-nan KB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableDecimalSize('NaN KB'); -- { serverError BAD_ARGUMENTS }
+-- Invalid input - Infinite is not supported, with or without sign, in all its forms
+SELECT fromReadableDecimalSize('inf KB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableDecimalSize('+inf KB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableDecimalSize('-inf KB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableDecimalSize('infinite KB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableDecimalSize('+infinite KB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableDecimalSize('-infinite KB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableDecimalSize('Inf KB'); -- { serverError BAD_ARGUMENTS }
+SELECT fromReadableDecimalSize('Infinite KB'); -- { serverError BAD_ARGUMENTS }
+
+
+-- OR NULL
+-- Works as the regular version when inputs are correct
+SELECT
+    arrayJoin(['1 B', '1 KB', '1 MB', '1 GB', '1 TB', '1 PB', '1 EB']) AS readable_sizes,
+    fromReadableDecimalSizeOrNull(readable_sizes) AS filesize;
+
+-- Returns NULL on invalid values
+SELECT
+    arrayJoin(['invalid', '1 Joe', '1 KiB', ' 1 GB', '1 TB with fries', 'NaN KB', 'Inf KB', '0xa123 KB']) AS readable_sizes,
+    fromReadableDecimalSizeOrNull(readable_sizes) AS filesize;
+
+
+-- OR ZERO
+-- Works as the regular version when inputs are correct
+SELECT
+    arrayJoin(['1 B', '1 KB', '1 MB', '1 GB', '1 TB', '1 PB', '1 EB']) AS readable_sizes,
+    fromReadableDecimalSizeOrZero(readable_sizes) AS filesize;
+
+-- Returns NULL on invalid values
+SELECT
+    arrayJoin(['invalid', '1 Joe', '1 KiB', ' 1 GiB', '1 TiB with fries', 'NaN KB', 'Inf KB', '0xa123 KB']) AS readable_sizes,
+    fromReadableDecimalSizeOrZero(readable_sizes) AS filesize;
+
