diff --git a/tests/queries/0_stateless/01825_type_json_ghdata.sh b/tests/queries/0_stateless/01825_type_json_ghdata.sh
index 7486571cc22d..bdb439f756f1 100755
--- a/tests/queries/0_stateless/01825_type_json_ghdata.sh
+++ b/tests/queries/0_stateless/01825_type_json_ghdata.sh
@@ -6,7 +6,6 @@ CUR_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
 . "$CUR_DIR"/../shell_config.sh
 
 ${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS ghdata"
-
 ${CLICKHOUSE_CLIENT} -q "CREATE TABLE ghdata (data JSON) ENGINE = MergeTree ORDER BY tuple()" --allow_experimental_object_type 1
 
 cat $CUR_DIR/data_json/ghdata_sample.json | ${CLICKHOUSE_CLIENT} -q "INSERT INTO ghdata FORMAT JSONAsObject"
diff --git a/tests/queries/0_stateless/01825_type_json_ghdata_insert_select.reference b/tests/queries/0_stateless/01825_type_json_ghdata_insert_select.reference
new file mode 100644
index 000000000000..d00491fd7e5b
--- /dev/null
+++ b/tests/queries/0_stateless/01825_type_json_ghdata_insert_select.reference
@@ -0,0 +1,1 @@
+1
diff --git a/tests/queries/0_stateless/01825_type_json_ghdata_insert_select.sh b/tests/queries/0_stateless/01825_type_json_ghdata_insert_select.sh
new file mode 100755
index 000000000000..487c95137ae1
--- /dev/null
+++ b/tests/queries/0_stateless/01825_type_json_ghdata_insert_select.sh
@@ -0,0 +1,27 @@
+#!/usr/bin/env bash
+# Tags: no-fasttest
+
+CUR_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CUR_DIR"/../shell_config.sh
+
+${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS ghdata_2"
+${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS ghdata_2_string"
+${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS ghdata_2_from_string"
+
+${CLICKHOUSE_CLIENT} -q "CREATE TABLE ghdata_2 (data JSON) ENGINE = MergeTree ORDER BY tuple()" --allow_experimental_object_type 1
+${CLICKHOUSE_CLIENT} -q "CREATE TABLE ghdata_2_string (data String) ENGINE = MergeTree ORDER BY tuple()"
+${CLICKHOUSE_CLIENT} -q "CREATE TABLE ghdata_2_from_string (data JSON) ENGINE = MergeTree ORDER BY tuple()" --allow_experimental_object_type 1
+
+cat $CUR_DIR/data_json/ghdata_sample.json | ${CLICKHOUSE_CLIENT} -q "INSERT INTO ghdata_2 FORMAT JSONAsObject"
+cat $CUR_DIR/data_json/ghdata_sample.json | ${CLICKHOUSE_CLIENT} -q "INSERT INTO ghdata_2_string FORMAT JSONAsString"
+
+${CLICKHOUSE_CLIENT} -q "INSERT INTO ghdata_2_from_string SELECT data FROM ghdata_2_string"
+
+${CLICKHOUSE_CLIENT} -q "SELECT \
+    (SELECT toTypeName(any(data)), sum(cityHash64(flattenTuple(data))) FROM ghdata_2_from_string) = \
+    (SELECT toTypeName(any(data)), sum(cityHash64(flattenTuple(data))) FROM ghdata_2)"
+
+${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS ghdata_2"
+${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS ghdata_2_string"
+${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS ghdata_2_from_string"
diff --git a/tests/queries/0_stateless/01825_type_json_insert_select.reference b/tests/queries/0_stateless/01825_type_json_insert_select.reference
index 8283cc5af484..6e50983f5eef 100644
--- a/tests/queries/0_stateless/01825_type_json_insert_select.reference
+++ b/tests/queries/0_stateless/01825_type_json_insert_select.reference
@@ -10,3 +10,6 @@ Tuple(arr Nested(k11 Int8, k22 String, k33 Int8), k1 Int8, k2 String, k3 String)
 3	([],3,'','aaa')
 4	([(5,'6',0),(7,'0',8)],0,'','')
 5	([(0,'str1',0)],0,'','')
+{"data":{"k1":1,"k10":[{"a":"1","b":"2","c":{"k11":""}},{"a":"2","b":"3","c":{"k11":""}}]}}
+{"data":{"k1":2,"k10":[{"a":"1","b":"2","c":{"k11":"haha"}}]}}
+Tuple(k1 Int8, k10 Nested(a String, b String, c Tuple(k11 String)))
diff --git a/tests/queries/0_stateless/01825_type_json_insert_select.sql b/tests/queries/0_stateless/01825_type_json_insert_select.sql
index 8bb03f84f5a1..b80fa08382dd 100644
--- a/tests/queries/0_stateless/01825_type_json_insert_select.sql
+++ b/tests/queries/0_stateless/01825_type_json_insert_select.sql
@@ -34,3 +34,17 @@ SELECT id, data FROM type_json_dst ORDER BY id;
 
 DROP TABLE type_json_src;
 DROP TABLE type_json_dst;
+
+CREATE TABLE type_json_dst (data JSON) ENGINE = MergeTree ORDER BY tuple();
+CREATE TABLE type_json_src (data String) ENGINE = MergeTree ORDER BY tuple();
+
+INSERT INTO type_json_src FORMAT JSONAsString {"k1": 1, "k10": [{"a": "1", "b": "2"}, {"a": "2", "b": "3"}]};
+INSERT INTO type_json_src FORMAT JSONAsString  {"k1": 2, "k10": [{"a": "1", "b": "2", "c": {"k11": "haha"}}]};
+INSERT INTO type_json_dst SELECT data FROM type_json_src;
+
+SET output_format_json_named_tuples_as_objects = 1;
+SELECT * FROM type_json_dst ORDER BY data.k1 FORMAT JSONEachRow;
+SELECT toTypeName(data) FROM type_json_dst LIMIT 1;
+
+DROP TABLE type_json_src;
+DROP TABLE type_json_dst;
diff --git a/tests/queries/0_stateless/01825_type_json_multiple_files.reference b/tests/queries/0_stateless/01825_type_json_multiple_files.reference
new file mode 100644
index 000000000000..b887abc85900
--- /dev/null
+++ b/tests/queries/0_stateless/01825_type_json_multiple_files.reference
@@ -0,0 +1,14 @@
+{"data":{"k0":100,"k1":0,"k2":0,"k3":0,"k4":0,"k5":0}}
+{"data":{"k0":0,"k1":100,"k2":0,"k3":0,"k4":0,"k5":0}}
+{"data":{"k0":0,"k1":0,"k2":100,"k3":0,"k4":0,"k5":0}}
+{"data":{"k0":0,"k1":0,"k2":0,"k3":100,"k4":0,"k5":0}}
+{"data":{"k0":0,"k1":0,"k2":0,"k3":0,"k4":100,"k5":0}}
+{"data":{"k0":0,"k1":0,"k2":0,"k3":0,"k4":0,"k5":100}}
+Tuple(k0 Int8, k1 Int8, k2 Int8, k3 Int8, k4 Int8, k5 Int8)
+{"data":{"k0":100,"k1":0,"k2":0}}
+{"data":{"k0":0,"k1":100,"k2":0}}
+{"data":{"k0":0,"k1":0,"k2":100}}
+Tuple(k0 Int8, k1 Int8, k2 Int8)
+{"data":{"k1":100,"k3":0}}
+{"data":{"k1":0,"k3":100}}
+Tuple(k1 Int8, k3 Int8)
diff --git a/tests/queries/0_stateless/01825_type_json_multiple_files.sh b/tests/queries/0_stateless/01825_type_json_multiple_files.sh
new file mode 100755
index 000000000000..9120568bb171
--- /dev/null
+++ b/tests/queries/0_stateless/01825_type_json_multiple_files.sh
@@ -0,0 +1,44 @@
+#!/usr/bin/env bash
+# Tags: no-fasttest, no-parallel
+
+CUR_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CUR_DIR"/../shell_config.sh
+
+user_files_path=$($CLICKHOUSE_CLIENT --query "select _path,_file from file('nonexist.txt', 'CSV', 'val1 char')" 2>&1 | grep -E '^Code: 107.*FILE_DOESNT_EXIST' | head -1 | awk '{gsub("/nonexist.txt","",$9); print $9}')
+for f in "$user_files_path"/01825_file_*.json; do
+    [ -e $f ] && rm $f
+done
+
+for i in {0..5}; do
+    echo "{\"k$i\": 100}" > "$user_files_path"/01825_file_$i.json
+done
+
+${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS t_json_files"
+${CLICKHOUSE_CLIENT} -q "CREATE TABLE t_json_files (file String, data JSON) ENGINE = MergeTree ORDER BY tuple()" --allow_experimental_object_type 1
+
+${CLICKHOUSE_CLIENT} -q "INSERT INTO t_json_files SELECT _file, data FROM file('01825_file_*.json', 'JSONAsObject', 'data JSON')"
+
+${CLICKHOUSE_CLIENT} -q "SELECT data FROM t_json_files ORDER BY file FORMAT JSONEachRow" --output_format_json_named_tuples_as_objects 1
+${CLICKHOUSE_CLIENT} -q "SELECT toTypeName(data) FROM t_json_files LIMIT 1"
+
+${CLICKHOUSE_CLIENT} -q "TRUNCATE TABLE IF EXISTS t_json_files"
+
+${CLICKHOUSE_CLIENT} -q "INSERT INTO t_json_files \
+    SELECT _file, data FROM file('01825_file_*.json', 'JSONAsObject', 'data JSON') \
+    ORDER BY _file LIMIT 3" --max_threads 1 --min_insert_block_size_rows 1 --max_insert_block_size 1 --max_block_size 1
+
+${CLICKHOUSE_CLIENT} -q "SELECT data FROM t_json_files ORDER BY file FORMAT JSONEachRow" --output_format_json_named_tuples_as_objects 1
+${CLICKHOUSE_CLIENT} -q "SELECT toTypeName(data) FROM t_json_files LIMIT 1"
+
+${CLICKHOUSE_CLIENT} -q "TRUNCATE TABLE IF EXISTS t_json_files"
+
+${CLICKHOUSE_CLIENT} -q "INSERT INTO t_json_files \
+    SELECT _file, data FROM file('01825_file_*.json', 'JSONAsObject', 'data JSON') \
+    WHERE _file IN ('01825_file_1.json', '01825_file_3.json')"
+
+${CLICKHOUSE_CLIENT} -q "SELECT data FROM t_json_files ORDER BY file FORMAT JSONEachRow" --output_format_json_named_tuples_as_objects 1
+${CLICKHOUSE_CLIENT} -q "SELECT toTypeName(data) FROM t_json_files LIMIT 1"
+
+${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS t_json_files"
+rm "$user_files_path"/01825_file_*.json
diff --git a/tests/queries/0_stateless/01825_type_json_nbagames.reference b/tests/queries/0_stateless/01825_type_json_nbagames.reference
index 8f86bfe613e4..863f5a0db841 100644
--- a/tests/queries/0_stateless/01825_type_json_nbagames.reference
+++ b/tests/queries/0_stateless/01825_type_json_nbagames.reference
@@ -10,3 +10,4 @@ Clyde Drexler	4
 Alvin Robertson	3
 Magic Johnson	3
 Charles Barkley	2
+1
diff --git a/tests/queries/0_stateless/01825_type_json_nbagames.sh b/tests/queries/0_stateless/01825_type_json_nbagames.sh
index 18e7c0506801..e13d004ac58a 100755
--- a/tests/queries/0_stateless/01825_type_json_nbagames.sh
+++ b/tests/queries/0_stateless/01825_type_json_nbagames.sh
@@ -6,6 +6,8 @@ CUR_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
 . "$CUR_DIR"/../shell_config.sh
 
 ${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS nbagames"
+${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS nbagames_string"
+${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS nbagames_from_string"
 
 ${CLICKHOUSE_CLIENT} -q "CREATE TABLE nbagames (data JSON) ENGINE = MergeTree ORDER BY tuple()" --allow_experimental_object_type 1
 
@@ -36,5 +38,16 @@ ${CLICKHOUSE_CLIENT} -q \
 ) \
 GROUP BY player ORDER BY triple_doubles DESC, player LIMIT 5"
 
+${CLICKHOUSE_CLIENT} -q "CREATE TABLE nbagames_string (data String) ENGINE = MergeTree ORDER BY tuple()"
+${CLICKHOUSE_CLIENT} -q "CREATE TABLE nbagames_from_string (data JSON) ENGINE = MergeTree ORDER BY tuple()" --allow_experimental_object_type 1
+
+cat $CUR_DIR/data_json/nbagames_sample.json | ${CLICKHOUSE_CLIENT} -q "INSERT INTO nbagames_string FORMAT JSONAsString"
+${CLICKHOUSE_CLIENT} -q "INSERT INTO nbagames_from_string SELECT data FROM nbagames_string"
+
+${CLICKHOUSE_CLIENT} -q "SELECT \
+    (SELECT toTypeName(any(data)), sum(cityHash64(flattenTuple(data))) FROM nbagames_from_string) = \
+    (SELECT toTypeName(any(data)), sum(cityHash64(flattenTuple(data))) FROM nbagames)"
 
 ${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS nbagames"
+${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS nbagames_string"
+${CLICKHOUSE_CLIENT} -q "DROP TABLE IF EXISTS nbagames_from_string"
