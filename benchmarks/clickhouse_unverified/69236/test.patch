diff --git a/tests/clickhouse-test b/tests/clickhouse-test
index 8a4b867b9626..7bf0a6f5e13d 100755
--- a/tests/clickhouse-test
+++ b/tests/clickhouse-test
@@ -1086,6 +1086,7 @@ class SettingsRandomizer:
         "query_plan_join_swap_table": lambda: random.choice(["auto", "false", "true"]),
         "enable_vertical_final": lambda: random.randint(0, 1),
         "optimize_extract_common_expressions": lambda: random.randint(0, 1),
+        "use_query_condition_cache": lambda: random.randint(0, 1),
         **randomize_external_sort_group_by(),
     }
 
diff --git a/tests/queries/0_stateless/00837_minmax_index.sh b/tests/queries/0_stateless/00837_minmax_index.sh
index ff487f50ee04..d11cd960c4c5 100755
--- a/tests/queries/0_stateless/00837_minmax_index.sh
+++ b/tests/queries/0_stateless/00837_minmax_index.sh
@@ -41,11 +41,11 @@ $CLICKHOUSE_CLIENT --query="INSERT INTO minmax_idx VALUES
 (12, 5, 4.7, 6.5, 'cba', 'b', '2015-01-01')"
 
 # simple select
-$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba') ORDER BY dt"
-$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba') ORDER BY dt FORMAT JSON" | grep "rows_read"
+$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba') ORDER BY dt SETTINGS use_query_condition_cache = 0"
+$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba') ORDER BY dt SETTINGS use_query_condition_cache = 0 FORMAT JSON" | grep "rows_read"
 
 # select with hole made by primary key
-$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE (u64 < 2 OR u64 > 10) AND e != 'b' ORDER BY dt"
-$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE (u64 < 2 OR u64 > 10) AND e != 'b' ORDER BY dt FORMAT JSON" | grep "rows_read"
+$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE (u64 < 2 OR u64 > 10) AND e != 'b' ORDER BY dt SETTINGS use_query_condition_cache = 0"
+$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE (u64 < 2 OR u64 > 10) AND e != 'b' ORDER BY dt SETTINGS use_query_condition_cache = 0 FORMAT JSON" | grep "rows_read"
 
 $CLICKHOUSE_CLIENT --query="DROP TABLE minmax_idx"
diff --git a/tests/queries/0_stateless/00838_unique_index.sh b/tests/queries/0_stateless/00838_unique_index.sh
index a3aba4f26b6c..edec41b5711f 100755
--- a/tests/queries/0_stateless/00838_unique_index.sh
+++ b/tests/queries/0_stateless/00838_unique_index.sh
@@ -39,18 +39,18 @@ $CLICKHOUSE_CLIENT --query="INSERT INTO set_idx VALUES
 (13, 5, 4.7, 6.5, 'cba', 'b', '2015-01-01')"
 
 # simple select
-$CLICKHOUSE_CLIENT --query="SELECT * FROM set_idx WHERE i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba') ORDER BY dt"
-$CLICKHOUSE_CLIENT --query="SELECT * FROM set_idx WHERE i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba') ORDER BY dt FORMAT JSON" | grep "rows_read"
+$CLICKHOUSE_CLIENT --query="SELECT * FROM set_idx WHERE i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba') ORDER BY dt SETTINGS use_query_condition_cache = 0"
+$CLICKHOUSE_CLIENT --query="SELECT * FROM set_idx WHERE i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba') ORDER BY dt SETTINGS use_query_condition_cache = 0 FORMAT JSON" | grep "rows_read"
 
-$CLICKHOUSE_CLIENT --query="SELECT * FROM set_idx WHERE NOT (i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba'))  ORDER BY dt"
-$CLICKHOUSE_CLIENT --query="SELECT * FROM set_idx WHERE NOT (i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba')) ORDER BY dt FORMAT JSON" | grep "rows_read"
+$CLICKHOUSE_CLIENT --query="SELECT * FROM set_idx WHERE NOT (i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba'))  ORDER BY dt SETTINGS use_query_condition_cache = 0"
+$CLICKHOUSE_CLIENT --query="SELECT * FROM set_idx WHERE NOT (i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba')) ORDER BY dt SETTINGS use_query_condition_cache = 0 FORMAT JSON" | grep "rows_read"
 
 # select with hole made by primary key
 $CLICKHOUSE_CLIENT --query="SELECT * FROM set_idx WHERE (u64 < 2 OR u64 > 10) AND s != 'cba' ORDER BY dt"
-$CLICKHOUSE_CLIENT --query="SELECT * FROM set_idx WHERE (u64 < 2 OR u64 > 10) AND s != 'cba' ORDER BY dt FORMAT JSON" | grep "rows_read"
+$CLICKHOUSE_CLIENT --query="SELECT * FROM set_idx WHERE (u64 < 2 OR u64 > 10) AND s != 'cba' ORDER BY dt SETTINGS use_query_condition_cache = 0 FORMAT JSON" | grep "rows_read"
 
-$CLICKHOUSE_CLIENT --query="SELECT * FROM set_idx WHERE (u64 < 2 OR NOT u64 > 10) AND NOT (s = 'cba') ORDER BY dt"
-$CLICKHOUSE_CLIENT --query="SELECT * FROM set_idx WHERE (u64 < 2 OR NOT u64 > 10) AND NOT (s = 'cba') ORDER BY dt FORMAT JSON" | grep "rows_read"
+$CLICKHOUSE_CLIENT --query="SELECT * FROM set_idx WHERE (u64 < 2 OR NOT u64 > 10) AND NOT (s = 'cba') ORDER BY dt SETTINGS use_query_condition_cache = 0"
+$CLICKHOUSE_CLIENT --query="SELECT * FROM set_idx WHERE (u64 < 2 OR NOT u64 > 10) AND NOT (s = 'cba') ORDER BY dt SETTINGS use_query_condition_cache = 0 FORMAT JSON" | grep "rows_read"
 
 
 $CLICKHOUSE_CLIENT --query="DROP TABLE set_idx;"
diff --git a/tests/queries/0_stateless/01055_minmax_index_compact_parts.sh b/tests/queries/0_stateless/01055_minmax_index_compact_parts.sh
index 29ce4da02edd..211d86e2cdd9 100755
--- a/tests/queries/0_stateless/01055_minmax_index_compact_parts.sh
+++ b/tests/queries/0_stateless/01055_minmax_index_compact_parts.sh
@@ -43,11 +43,11 @@ $CLICKHOUSE_CLIENT --query="INSERT INTO minmax_idx VALUES
 (12, 5, 4.7, 6.5, 'cba', 'b', '2015-01-01')"
 
 # simple select
-$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba') ORDER BY dt"
-$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba') ORDER BY dt FORMAT JSON" | grep "rows_read"
+$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba') ORDER BY dt SETTINGS use_query_condition_cache = 0"
+$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE i32 = 5 AND i32 + f64 < 12 AND 3 < d AND d < 7 AND (s = 'bac' OR s = 'cba') ORDER BY dt SETTINGS use_query_condition_cache = 0 FORMAT JSON" | grep "rows_read"
 
 # select with hole made by primary key
-$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE (u64 < 2 OR u64 > 10) AND e != 'b' ORDER BY dt"
-$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE (u64 < 2 OR u64 > 10) AND e != 'b' ORDER BY dt FORMAT JSON" | grep "rows_read"
+$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE (u64 < 2 OR u64 > 10) AND e != 'b' ORDER BY dt SETTINGS use_query_condition_cache = 0"
+$CLICKHOUSE_CLIENT --query="SELECT * FROM minmax_idx WHERE (u64 < 2 OR u64 > 10) AND e != 'b' ORDER BY dt SETTINGS use_query_condition_cache = 0 FORMAT JSON" | grep "rows_read"
 
 $CLICKHOUSE_CLIENT --query="DROP TABLE minmax_idx"
diff --git a/tests/queries/0_stateless/01271_show_privileges.reference b/tests/queries/0_stateless/01271_show_privileges.reference
index ba91e23e4ce7..9d7c297828d4 100644
--- a/tests/queries/0_stateless/01271_show_privileges.reference
+++ b/tests/queries/0_stateless/01271_show_privileges.reference
@@ -122,6 +122,7 @@ SYSTEM DROP UNCOMPRESSED CACHE	['SYSTEM DROP UNCOMPRESSED','DROP UNCOMPRESSED CA
 SYSTEM DROP SKIPPING INDEX CACHE	['SYSTEM DROP SKIPPING INDEX CACHE','DROP SKIPPING INDEX CACHE']	GLOBAL	SYSTEM DROP CACHE
 SYSTEM DROP MMAP CACHE	['SYSTEM DROP MMAP','DROP MMAP CACHE','DROP MMAP']	GLOBAL	SYSTEM DROP CACHE
 SYSTEM DROP QUERY CACHE	['SYSTEM DROP QUERY','DROP QUERY CACHE','DROP QUERY']	GLOBAL	SYSTEM DROP CACHE
+SYSTEM DROP QUERY CONDITION CACHE	['SYSTEM DROP QUERY CONDITION','DROP QUERY CONDITION CACHE','DROP QUERY CONDITION']	GLOBAL	SYSTEM DROP CACHE
 SYSTEM DROP COMPILED EXPRESSION CACHE	['SYSTEM DROP COMPILED EXPRESSION','DROP COMPILED EXPRESSION CACHE','DROP COMPILED EXPRESSIONS']	GLOBAL	SYSTEM DROP CACHE
 SYSTEM DROP FILESYSTEM CACHE	['SYSTEM DROP FILESYSTEM CACHE','DROP FILESYSTEM CACHE']	GLOBAL	SYSTEM DROP CACHE
 SYSTEM DROP DISTRIBUTED CACHE	['SYSTEM DROP DISTRIBUTED CACHE','DROP DISTRIBUTED CACHE']	GLOBAL	SYSTEM DROP CACHE
diff --git a/tests/queries/0_stateless/02784_parallel_replicas_automatic_decision.sh b/tests/queries/0_stateless/02784_parallel_replicas_automatic_decision.sh
index f25619437478..77a52da6c0f3 100755
--- a/tests/queries/0_stateless/02784_parallel_replicas_automatic_decision.sh
+++ b/tests/queries/0_stateless/02784_parallel_replicas_automatic_decision.sh
@@ -61,36 +61,36 @@ function run_query_with_pure_parallel_replicas () {
 query_id_base="02784_automatic_parallel_replicas-$CLICKHOUSE_DATABASE"
 
 #### Reading 10M rows without filters
-whole_table_query="SELECT sum(number) FROM test_parallel_replicas_automatic_count format Null"
+whole_table_query="SELECT sum(number) FROM test_parallel_replicas_automatic_count SETTINGS use_query_condition_cache = 0 format Null"
 run_query_with_pure_parallel_replicas "${query_id_base}_whole_table_10M" 10000000 "$whole_table_query"
 run_query_with_pure_parallel_replicas "${query_id_base}_whole_table_6M" 6000000 "$whole_table_query" # 1.6 replicas -> 1 replica -> No parallel replicas
 run_query_with_pure_parallel_replicas "${query_id_base}_whole_table_5M" 5000000 "$whole_table_query"
 run_query_with_pure_parallel_replicas "${query_id_base}_whole_table_1M" 1000000 "$whole_table_query"
 
 ##### Reading 2M rows without filters as partition (p=3) is pruned completely
-query_with_partition_pruning="SELECT sum(number) FROM test_parallel_replicas_automatic_count WHERE p != 3 format Null"
+query_with_partition_pruning="SELECT sum(number) FROM test_parallel_replicas_automatic_count WHERE p != 3 SETTINGS use_query_condition_cache = 0 format Null"
 run_query_with_pure_parallel_replicas "${query_id_base}_pruning_10M" 10000000 "$query_with_partition_pruning"
 run_query_with_pure_parallel_replicas "${query_id_base}_pruning_1M" 1000000 "$query_with_partition_pruning"
 run_query_with_pure_parallel_replicas "${query_id_base}_pruning_500k" 500000 "$query_with_partition_pruning"
 
 #### Reading ~500k rows as index filter should prune granules from partition=1 and partition=2, and drop p3 completely
-query_with_index="SELECT sum(number) FROM test_parallel_replicas_automatic_count WHERE number < 500_000 format Null"
+query_with_index="SELECT sum(number) FROM test_parallel_replicas_automatic_count WHERE number < 500_000 SETTINGS use_query_condition_cache = 0 format Null"
 run_query_with_pure_parallel_replicas "${query_id_base}_index_1M" 1000000 "$query_with_index"
 run_query_with_pure_parallel_replicas "${query_id_base}_index_200k" 200000 "$query_with_index"
 run_query_with_pure_parallel_replicas "${query_id_base}_index_100k" 100000 "$query_with_index"
 
 #### Reading 1M (because of LIMIT)
-limit_table_query="SELECT sum(number) FROM (SELECT number FROM test_parallel_replicas_automatic_count LIMIT 1_000_000) format Null"
+limit_table_query="SELECT sum(number) FROM (SELECT number FROM test_parallel_replicas_automatic_count LIMIT 1_000_000) SETTINGS use_query_condition_cache = 0 format Null"
 run_query_with_pure_parallel_replicas "${query_id_base}_limit_10M" 10000000 "$limit_table_query"
 run_query_with_pure_parallel_replicas "${query_id_base}_limit_1M" 1000000 "$limit_table_query"
 run_query_with_pure_parallel_replicas "${query_id_base}_limit_500k" 500000 "$limit_table_query"
 
 #### Reading 10M (because of LIMIT is applied after aggregations)
-limit_agg_table_query="SELECT sum(number) FROM test_parallel_replicas_automatic_count LIMIT 1_000_000 format Null"
+limit_agg_table_query="SELECT sum(number) FROM test_parallel_replicas_automatic_count LIMIT 1_000_000 SETTINGS use_query_condition_cache = 0 format Null"
 run_query_with_pure_parallel_replicas "${query_id_base}_useless_limit_500k" 500000 "$limit_agg_table_query"
 
 #### If the filter does not help, it shouldn't disable parallel replicas. Table has 10M rows, filter removes all rows
-helpless_filter_query="SELECT sum(number) FROM test_parallel_replicas_automatic_count WHERE number + p = 42 format Null"
+helpless_filter_query="SELECT sum(number) FROM test_parallel_replicas_automatic_count WHERE number + p = 42 SETTINGS use_query_condition_cache = 0 format Null"
 run_query_with_pure_parallel_replicas "${query_id_base}_helpless_filter_10M" 10000000 "$helpless_filter_query"
 run_query_with_pure_parallel_replicas "${query_id_base}_helpless_filter_5M" 5000000 "$helpless_filter_query"
 
diff --git a/tests/queries/0_stateless/03031_read_in_order_optimization_with_virtual_row.sql b/tests/queries/0_stateless/03031_read_in_order_optimization_with_virtual_row.sql
index 0f1002878155..8ad8a88a4163 100644
--- a/tests/queries/0_stateless/03031_read_in_order_optimization_with_virtual_row.sql
+++ b/tests/queries/0_stateless/03031_read_in_order_optimization_with_virtual_row.sql
@@ -1,5 +1,6 @@
 
 SET read_in_order_use_virtual_row = 1;
+SET use_query_condition_cache = 0;
 
 DROP TABLE IF EXISTS t;
 
diff --git a/tests/queries/0_stateless/03229_query_condition_cache.reference b/tests/queries/0_stateless/03229_query_condition_cache.reference
new file mode 100644
index 000000000000..079d63832267
--- /dev/null
+++ b/tests/queries/0_stateless/03229_query_condition_cache.reference
@@ -0,0 +1,8 @@
+1
+0	1	0
+10000	10000
+1	1	1
+1
+0	1	0
+10000	10000
+1	0	1
diff --git a/tests/queries/0_stateless/03229_query_condition_cache.sql b/tests/queries/0_stateless/03229_query_condition_cache.sql
new file mode 100644
index 000000000000..5a3068d085f6
--- /dev/null
+++ b/tests/queries/0_stateless/03229_query_condition_cache.sql
@@ -0,0 +1,76 @@
+-- Tags: no-parallel, no-parallel-replicas
+
+SET allow_experimental_analyzer = 1;
+
+SYSTEM DROP QUERY CONDITION CACHE;
+
+DROP TABLE IF EXISTS tab;
+
+CREATE TABLE tab (a Int64, b Int64) ENGINE = MergeTree ORDER BY a;
+INSERT INTO tab SELECT number, number FROM numbers(1000000);
+
+SELECT count(*) FROM tab WHERE b = 10000 SETTINGS use_query_condition_cache = true;
+
+SYSTEM FLUSH LOGS;
+SELECT
+    ProfileEvents['QueryConditionCacheHits'],
+    ProfileEvents['QueryConditionCacheMisses'],
+    toInt32(ProfileEvents['SelectedMarks']) < toInt32(ProfileEvents['SelectedMarksTotal'])
+FROM system.query_log
+WHERE
+    type = 'QueryFinish'
+    AND current_database = currentDatabase()
+    AND query = 'SELECT count(*) FROM tab WHERE b = 10000 SETTINGS use_query_condition_cache = true;'
+ORDER BY
+    event_time_microseconds;
+
+SELECT * FROM tab WHERE b = 10000 SETTINGS use_query_condition_cache = true;
+
+SYSTEM FLUSH LOGS;
+SELECT
+    ProfileEvents['QueryConditionCacheHits'],
+    ProfileEvents['QueryConditionCacheMisses'],
+    toInt32(ProfileEvents['SelectedMarks']) < toInt32(ProfileEvents['SelectedMarksTotal'])
+FROM system.query_log
+WHERE
+    type = 'QueryFinish'
+    AND current_database = currentDatabase()
+    AND query = 'SELECT * FROM tab WHERE b = 10000 SETTINGS use_query_condition_cache = true;'
+ORDER BY
+    event_time_microseconds;
+
+-- Now test without move to PREWHERE
+
+SYSTEM DROP QUERY CONDITION CACHE;
+
+SELECT count(*) FROM tab WHERE b = 10000 SETTINGS use_query_condition_cache = true, optimize_move_to_prewhere = false;
+
+SYSTEM FLUSH LOGS;
+SELECT
+    ProfileEvents['QueryConditionCacheHits'],
+    ProfileEvents['QueryConditionCacheMisses'],
+    toInt32(ProfileEvents['SelectedMarks']) < toInt32(ProfileEvents['SelectedMarksTotal'])
+FROM system.query_log
+WHERE
+    type = 'QueryFinish'
+    AND current_database = currentDatabase()
+    AND query = 'SELECT count(*) FROM tab WHERE b = 10000 SETTINGS use_query_condition_cache = true, optimize_move_to_prewhere = false;'
+ORDER BY
+    event_time_microseconds;
+
+SELECT * FROM tab WHERE b = 10000 SETTINGS use_query_condition_cache = true, optimize_move_to_prewhere = false;
+
+SYSTEM FLUSH LOGS;
+SELECT
+    ProfileEvents['QueryConditionCacheHits'],
+    ProfileEvents['QueryConditionCacheMisses'],
+    toInt32(ProfileEvents['SelectedMarks']) < toInt32(ProfileEvents['SelectedMarksTotal'])
+FROM system.query_log
+WHERE
+    type = 'QueryFinish'
+    AND current_database = currentDatabase()
+    AND query = 'SELECT * FROM tab WHERE b = 10000 SETTINGS use_query_condition_cache = true, optimize_move_to_prewhere = false;'
+ORDER BY
+    event_time_microseconds;
+
+DROP TABLE tab;
diff --git a/tests/queries/0_stateless/03252_merge_tree_min_bytes_to_seek.sql b/tests/queries/0_stateless/03252_merge_tree_min_bytes_to_seek.sql
index cbfadbb723fb..445871283df6 100644
--- a/tests/queries/0_stateless/03252_merge_tree_min_bytes_to_seek.sql
+++ b/tests/queries/0_stateless/03252_merge_tree_min_bytes_to_seek.sql
@@ -1,3 +1,7 @@
+
+-- Disable query condition cache because it affects the `SelectedRanges` metric.
+SET use_query_condition_cache = 0;
+
 DROP TABLE IF EXISTS t_min_bytes_to_seek;
 
 CREATE TABLE t_min_bytes_to_seek (id UInt64)
