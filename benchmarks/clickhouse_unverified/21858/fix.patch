diff --git a/.gitmodules b/.gitmodules
index 66a2370f0da6..2ccce88e5e46 100644
--- a/.gitmodules
+++ b/.gitmodules
@@ -228,3 +228,7 @@
 [submodule "contrib/datasketches-cpp"]
 	path = contrib/datasketches-cpp
 	url = https://github.com/ClickHouse-Extras/datasketches-cpp.git
+
+[submodule "contrib/yaml-cpp"]
+	path = contrib/yaml-cpp
+	url = https://github.com/ClickHouse-Extras/yaml-cpp.git
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 2c3fa0889957..866d9f542e11 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -527,6 +527,7 @@ include (cmake/find/nanodbc.cmake)
 include (cmake/find/rocksdb.cmake)
 include (cmake/find/libpqxx.cmake)
 include (cmake/find/nuraft.cmake)
+include (cmake/find/yaml-cpp.cmake)
 
 
 if(NOT USE_INTERNAL_PARQUET_LIBRARY)
diff --git a/base/bridge/CMakeLists.txt b/base/bridge/CMakeLists.txt
index 20b0b6516777..bcba43e8c2e4 100644
--- a/base/bridge/CMakeLists.txt
+++ b/base/bridge/CMakeLists.txt
@@ -3,5 +3,11 @@ add_library (bridge
 )
 
 target_include_directories (daemon PUBLIC ..)
-target_link_libraries (bridge PRIVATE daemon dbms Poco::Data Poco::Data::ODBC)
+target_link_libraries (bridge 
+    PRIVATE 
+	daemon
+	dbms
+	Poco::Data
+	Poco::Data::ODBC
+)
 
diff --git a/cmake/find/yaml-cpp.cmake b/cmake/find/yaml-cpp.cmake
new file mode 100644
index 000000000000..9b9d9bd39d60
--- /dev/null
+++ b/cmake/find/yaml-cpp.cmake
@@ -0,0 +1,9 @@
+option(USE_YAML_CPP "Enable yaml-cpp" ${ENABLE_LIBRARIES})
+
+if (NOT USE_YAML_CPP)
+    return()
+endif()
+
+if (NOT EXISTS "${ClickHouse_SOURCE_DIR}/contrib/yaml-cpp")
+    message (ERROR "submodule contrib/yaml-cpp is missing. to fix try run: 
 git submodule update --init --recursive")
+endif()
diff --git a/contrib/CMakeLists.txt b/contrib/CMakeLists.txt
index 9eafec23f515..a9438aa4b769 100644
--- a/contrib/CMakeLists.txt
+++ b/contrib/CMakeLists.txt
@@ -50,6 +50,10 @@ add_subdirectory (replxx-cmake)
 add_subdirectory (unixodbc-cmake)
 add_subdirectory (nanodbc-cmake)
 
+if (USE_YAML_CPP)
+    add_subdirectory (yaml-cpp-cmake)
+endif()
+
 if (USE_INTERNAL_XZ_LIBRARY)
     add_subdirectory (xz)
 endif()
diff --git a/contrib/yaml-cpp b/contrib/yaml-cpp
new file mode 160000
index 000000000000..0c86adac6d11
--- /dev/null
+++ b/contrib/yaml-cpp
@@ -0,0 +1,1 @@
+Subproject commit 0c86adac6d117ee2b4afcedb8ade19036ca0327d
diff --git a/contrib/yaml-cpp-cmake/CMakeLists.txt b/contrib/yaml-cpp-cmake/CMakeLists.txt
new file mode 100644
index 000000000000..ed0287de1103
--- /dev/null
+++ b/contrib/yaml-cpp-cmake/CMakeLists.txt
@@ -0,0 +1,39 @@
+set (LIBRARY_DIR ${ClickHouse_SOURCE_DIR}/contrib/yaml-cpp)
+
+set (SRCS
+	${LIBRARY_DIR}/src/binary.cpp
+	${LIBRARY_DIR}/src/emitterutils.cpp
+	${LIBRARY_DIR}/src/null.cpp
+	${LIBRARY_DIR}/src/scantoken.cpp
+	${LIBRARY_DIR}/src/convert.cpp
+	${LIBRARY_DIR}/src/exceptions.cpp
+	${LIBRARY_DIR}/src/ostream_wrapper.cpp
+	${LIBRARY_DIR}/src/simplekey.cpp
+	${LIBRARY_DIR}/src/depthguard.cpp 
+	${LIBRARY_DIR}/src/exp.cpp
+	${LIBRARY_DIR}/src/parse.cpp
+	${LIBRARY_DIR}/src/singledocparser.cpp
+	${LIBRARY_DIR}/src/directives.cpp
+	${LIBRARY_DIR}/src/memory.cpp
+	${LIBRARY_DIR}/src/parser.cpp
+	${LIBRARY_DIR}/src/stream.cpp
+	${LIBRARY_DIR}/src/emit.cpp
+	${LIBRARY_DIR}/src/nodebuilder.cpp
+	${LIBRARY_DIR}/src/regex_yaml.cpp
+	${LIBRARY_DIR}/src/tag.cpp
+	${LIBRARY_DIR}/src/emitfromevents.cpp
+	${LIBRARY_DIR}/src/node.cpp
+	${LIBRARY_DIR}/src/scanner.cpp
+	${LIBRARY_DIR}/src/emitter.cpp
+	${LIBRARY_DIR}/src/node_data.cpp
+	${LIBRARY_DIR}/src/scanscalar.cpp
+	${LIBRARY_DIR}/src/emitterstate.cpp
+	${LIBRARY_DIR}/src/nodeevents.cpp
+	${LIBRARY_DIR}/src/scantag.cpp
+)
+
+add_library (yaml-cpp ${SRCS})
+
+
+target_include_directories(yaml-cpp PRIVATE ${LIBRARY_DIR}/include/yaml-cpp)
+target_include_directories(yaml-cpp SYSTEM BEFORE PUBLIC ${LIBRARY_DIR}/include)
diff --git a/programs/server/config-example.yaml.disabled b/programs/server/config-example.yaml.disabled
new file mode 100644
index 000000000000..a83acf50de00
--- /dev/null
+++ b/programs/server/config-example.yaml.disabled
@@ -0,0 +1,86 @@
+# We can use 3 main node types in YAML: Scalar, Map and Sequence.
+
+
+
+# A Scalar is a simple key-value pair:
+
+scalar: 123
+
+# Here we have a key "scalar" and value "123"
+# If we rewrite this in XML, we will get <scalar>123</scalar>
+
+# We can also represent an empty value with '':
+
+key: ''
+
+
+
+# A Map is a node, which contains other nodes:
+
+map:
+  key1: value1
+  key2: value2
+  small_map:
+    key3: value3
+    
+# This map can be converted into:
+# <map>
+#     <key1>value1</key1>
+#     <key2>value2</key2>
+#     <small_map>
+#         <key3>value3</key3>
+#     </small_map>
+# </map>
+
+
+
+# A Sequence is a node, which contains also other nodes.
+# The main difference from Map is that Sequence can also contain simple values.
+
+sequence:
+  - val1
+  - val2
+  - key: 123
+  - map:
+      mkey1: foo
+      mkey2: bar
+      
+# We can represent it in XML this way:
+# <sequence>val1</sequence>
+# <sequence>val2</sequence>
+# <sequence>
+#     <key>123</key>
+# </sequence>
+# <sequence>
+#     <map>
+#         <mkey1>foo</mkey1>
+#         <mkey2>bar</mkey2>
+#     </map>
+# </sequence>
+
+
+
+# YAML does not have direct support for structures like XML attributes.
+# We represent them as nodes with @ prefix in key. Note, that @ is reserved by YAML standard,
+# so you will need to write double quotes around the key. Both Map and Sequence can have
+# attributes as children nodes
+
+map:
+  "@attr1": value1
+  "@attr2": value2
+  key: 123
+  
+# This gives us:
+# <map attr1="value1" attr2="value2">
+#     <key>123</key>
+# </map>
+
+sequence:
+  - "@attr1": value1
+  - "@attr2": value2
+  - 123
+  - abc
+  
+# And this gives us:
+# <map attr1="value1" attr2="value2">123</map>
+# <map attr1="value1" attr2="value2">abc</map>
diff --git a/src/Common/Config/CMakeLists.txt b/src/Common/Config/CMakeLists.txt
index a7914fb17ecf..3da44be2af67 100644
--- a/src/Common/Config/CMakeLists.txt
+++ b/src/Common/Config/CMakeLists.txt
@@ -3,6 +3,7 @@ set (SRCS
     ConfigProcessor.cpp
     configReadClient.cpp
     ConfigReloader.cpp
+    YAMLParser.cpp
 )
 
 add_library(clickhouse_common_config ${SRCS})
@@ -15,3 +16,10 @@ target_link_libraries(clickhouse_common_config
     PRIVATE
         string_utils
 )
+
+if (USE_YAML_CPP)
+target_link_libraries(clickhouse_common_config
+    PRIVATE
+        yaml-cpp
+)
+endif()
diff --git a/src/Common/Config/ConfigProcessor.cpp b/src/Common/Config/ConfigProcessor.cpp
index bc2a8a279438..fa9e9b720874 100644
--- a/src/Common/Config/ConfigProcessor.cpp
+++ b/src/Common/Config/ConfigProcessor.cpp
@@ -1,4 +1,8 @@
+#if !defined(ARCADIA_BUILD)
+    #include <Common/config.h>
+#endif
 #include "ConfigProcessor.h"
+#include "YAMLParser.h"
 
 #include <sys/utsname.h>
 #include <cerrno>
@@ -20,10 +24,8 @@
 #include <IO/WriteBufferFromString.h>
 #include <IO/Operators.h>
 
-
 #define PREPROCESSED_SUFFIX "-preprocessed"
 
-
 namespace fs = std::filesystem;
 
 using namespace Poco::XML;
@@ -438,8 +440,10 @@ ConfigProcessor::Files ConfigProcessor::getConfigMergeFiles(const std::string &
             std::string base_name = path.getBaseName();
 
             // Skip non-config and temporary files
-            if (file.isFile() && (extension == "xml" || extension == "conf") && !startsWith(base_name, "."))
-                files.push_back(file.path());
+            if (file.isFile() && (extension == "xml" || extension == "conf" || extension == "yaml" || extension == "yml") && !startsWith(base_name, "."))
+            {
+               files.push_back(file.path());
+            }
         }
     }
 
@@ -453,12 +457,21 @@ XMLDocumentPtr ConfigProcessor::processConfig(
     zkutil::ZooKeeperNodeCache * zk_node_cache,
     const zkutil::EventPtr & zk_changed_event)
 {
-    XMLDocumentPtr config;
     LOG_DEBUG(log, "Processing configuration file '{}'.", path);
 
+    XMLDocumentPtr config;
+
     if (fs::exists(path))
     {
-        config = dom_parser.parse(path);
+        fs::path p(path);
+        if (p.extension() == ".xml")
+        {
+            config = dom_parser.parse(path);
+        }
+        else if (p.extension() == ".yaml" || p.extension() == ".yml")
+        {
+            config = YAMLParser::parse(path);
+        }
     }
     else
     {
@@ -493,8 +506,20 @@ XMLDocumentPtr ConfigProcessor::processConfig(
         {
             LOG_DEBUG(log, "Merging configuration file '{}'.", merge_file);
 
-            XMLDocumentPtr with = dom_parser.parse(merge_file);
+            XMLDocumentPtr with;
+
+            fs::path p(merge_file);
+            if (p.extension() == ".yaml" || p.extension() == ".yml")
+            {
+                with = YAMLParser::parse(merge_file);
+            }
+            else
+            {
+                with = dom_parser.parse(merge_file);
+            }
+
             merge(config, with);
+
             contributing_files.push_back(merge_file);
         }
         catch (Exception & e)
diff --git a/src/Common/Config/ConfigProcessor.h b/src/Common/Config/ConfigProcessor.h
index 7a4102140d99..5b16bc0cb1b7 100644
--- a/src/Common/Config/ConfigProcessor.h
+++ b/src/Common/Config/ConfigProcessor.h
@@ -1,5 +1,9 @@
 #pragma once
 
+#if !defined(ARCADIA_BUILD)
+    #include <Common/config.h>
+#endif
+
 #include <string>
 #include <unordered_set>
 #include <vector>
@@ -141,3 +145,4 @@ class ConfigProcessor
 };
 
 }
+
diff --git a/src/Common/Config/YAMLParser.cpp b/src/Common/Config/YAMLParser.cpp
new file mode 100644
index 000000000000..9eaf1cdc1adf
--- /dev/null
+++ b/src/Common/Config/YAMLParser.cpp
@@ -0,0 +1,166 @@
+#if !defined(ARCADIA_BUILD)
+    #include <Common/config.h>
+#endif
+
+#if USE_YAML_CPP
+#include "YAMLParser.h"
+
+#include <string>
+#include <cstring>
+#include <vector>
+
+#include <Poco/DOM/Document.h>
+#include <Poco/DOM/DOMParser.h>
+#include <Poco/DOM/DOMWriter.h>
+#include <Poco/DOM/NodeList.h>
+#include <Poco/DOM/Element.h>
+#include <Poco/DOM/AutoPtr.h>
+#include <Poco/DOM/NamedNodeMap.h>
+#include <Poco/DOM/Text.h>
+#include <Common/Exception.h>
+
+#include <yaml-cpp/yaml.h> // Y_IGNORE
+
+#include <common/logger_useful.h>
+
+using namespace Poco::XML;
+
+namespace DB
+{
+
+namespace ErrorCodes
+{
+    extern const int CANNOT_OPEN_FILE;
+    extern const int CANNOT_PARSE_YAML;
+}
+
+/// A prefix symbol in yaml key
+/// We add attributes to nodes by using a prefix symbol in the key part.
+/// Currently we use @ as a prefix symbol. Note, that @ is reserved
+/// by YAML standard, so we need to write a key-value pair like this: "@attribute": attr_value
+const char YAML_ATTRIBUTE_PREFIX = '@';
+
+namespace
+{
+
+Poco::AutoPtr<Poco::XML::Element> createCloneNode(Poco::XML::Element & original_node)
+{
+    Poco::AutoPtr<Poco::XML::Element> clone_node = original_node.ownerDocument()->createElement(original_node.nodeName());
+    original_node.parentNode()->appendChild(clone_node);
+    return clone_node;
+}
+
+void processNode(const YAML::Node & node, Poco::XML::Element & parent_xml_element)
+{
+    auto * xml_document = parent_xml_element.ownerDocument();
+    switch (node.Type())
+    {
+        case YAML::NodeType::Scalar:
+        {
+            auto value = node.as<std::string>();
+            Poco::AutoPtr<Poco::XML::Text> xml_value = xml_document->createTextNode(value);
+            parent_xml_element.appendChild(xml_value);
+            break;
+        }
+
+        /// We process YAML Sequences as a
+        /// list of <key>value</key> tags with same key and different values.
+        /// For example, we translate this sequence
+        /// seq:
+        ///     - val1
+        ///     - val2
+        ///
+        /// into this:
+        /// <seq>val1</seq>
+        /// <seq>val2</seq>
+        case YAML::NodeType::Sequence:
+        {
+            for (const auto & child_node : node)
+                if (parent_xml_element.hasChildNodes())
+                {
+                    /// We want to process sequences like that:
+                    /// seq:
+                    ///     - val1
+                    ///     - k2: val2
+                    ///     - val3
+                    ///     - k4: val4
+                    ///     - val5
+                    /// into xml like this:
+                    /// <seq>val1</seq>
+                    /// <seq>
+                    ///     <k2>val2</k2>
+                    /// </seq>
+                    /// <seq>val3</seq>
+                    /// <seq>
+                    ///     <k4>val4</k4>
+                    /// </seq>
+                    /// <seq>val5</seq>
+                    /// So, we create a new parent node with same tag for each child node
+                    processNode(child_node, *createCloneNode(parent_xml_element));
+                }
+                else
+                {
+                    processNode(child_node, parent_xml_element);
+                }
+            break;
+        }
+        case YAML::NodeType::Map:
+        {
+            for (const auto & key_value_pair : node)
+            {
+                const auto & key_node = key_value_pair.first;
+                const auto & value_node = key_value_pair.second;
+                auto key = key_node.as<std::string>();
+                bool is_attribute = (key.starts_with(YAML_ATTRIBUTE_PREFIX) && value_node.IsScalar());
+                if (is_attribute)
+                {
+                    /// we use substr(1) here to remove YAML_ATTRIBUTE_PREFIX from key
+                    auto attribute_name = key.substr(1);
+                    auto value = value_node.as<std::string>();
+                    parent_xml_element.setAttribute(attribute_name, value);
+                }
+                else
+                {
+                    Poco::AutoPtr<Poco::XML::Element> xml_key = xml_document->createElement(key);
+                    parent_xml_element.appendChild(xml_key);
+                    processNode(value_node, *xml_key);
+                }
+            }
+            break;
+        }
+        case YAML::NodeType::Null: break;
+        case YAML::NodeType::Undefined:
+        {
+            throw Exception(ErrorCodes::CANNOT_PARSE_YAML, "YAMLParser has encountered node with undefined type and cannot continue parsing of the file");
+        }
+    }
+}
+
+}
+
+Poco::AutoPtr<Poco::XML::Document> YAMLParser::parse(const String& path)
+{
+    YAML::Node node_yml;
+    try
+    {
+        node_yml = YAML::LoadFile(path);
+    }
+    catch (const YAML::ParserException& e)
+    {
+        /// yaml-cpp cannot parse the file because its contents are incorrect
+        throw Exception(ErrorCodes::CANNOT_PARSE_YAML, "Unable to parse YAML configuration file {}", path, e.what());
+    }
+    catch (const YAML::BadFile&)
+    {
+        /// yaml-cpp cannot open the file even though it exists
+        throw Exception(ErrorCodes::CANNOT_OPEN_FILE, "Unable to open YAML configuration file {}", path);
+    }
+    Poco::AutoPtr<Poco::XML::Document> xml = new Document;
+    Poco::AutoPtr<Poco::XML::Element> root_node = xml->createElement("yandex");
+    xml->appendChild(root_node);
+    processNode(node_yml, *root_node);
+    return xml;
+}
+
+}
+#endif
diff --git a/src/Common/Config/YAMLParser.h b/src/Common/Config/YAMLParser.h
new file mode 100644
index 000000000000..a716f3de9b11
--- /dev/null
+++ b/src/Common/Config/YAMLParser.h
@@ -0,0 +1,55 @@
+#pragma once
+
+#if !defined(ARCADIA_BUILD)
+    #include <Common/config.h>
+#endif
+
+#include <string>
+
+#include <Poco/DOM/Document.h>
+#include "Poco/DOM/AutoPtr.h"
+#include <common/logger_useful.h>
+
+#if USE_YAML_CPP
+
+namespace DB
+{
+
+/// Real YAML parser: loads yaml file into a YAML::Node
+class YAMLParserImpl
+{
+public:
+    static Poco::AutoPtr<Poco::XML::Document> parse(const String& path);
+};
+
+using YAMLParser = YAMLParserImpl;
+
+}
+
+#else
+
+namespace DB
+{
+
+namespace ErrorCodes
+{
+    extern const int CANNOT_PARSE_YAML;
+}
+
+/// Fake YAML parser: throws an exception if we try to parse YAML configs in a build without yaml-cpp
+class DummyYAMLParser
+{
+public:
+    static Poco::AutoPtr<Poco::XML::Document> parse(const String& path)
+    {
+        Poco::AutoPtr<Poco::XML::Document> xml = new Poco::XML::Document;
+        throw Exception(ErrorCodes::CANNOT_PARSE_YAML, "Unable to parse YAML configuration file {} without usage of yaml-cpp library", path);
+        return xml;
+    }
+};
+
+using YAMLParser = DummyYAMLParser;
+
+}
+
+#endif
diff --git a/src/Common/ErrorCodes.cpp b/src/Common/ErrorCodes.cpp
index b1efd791bf89..330a193212bd 100644
--- a/src/Common/ErrorCodes.cpp
+++ b/src/Common/ErrorCodes.cpp
@@ -552,6 +552,7 @@
     M(582, NO_SUCH_PROJECTION_IN_TABLE) \
     M(583, ILLEGAL_PROJECTION) \
     M(584, PROJECTION_NOT_USED) \
+    M(585, CANNOT_PARSE_YAML) \
     \
     M(998, POSTGRESQL_CONNECTION_FAILURE) \
     M(999, KEEPER_EXCEPTION) \
diff --git a/src/Common/config.h.in b/src/Common/config.h.in
index 28a21ea77646..6844f0fa9e30 100644
--- a/src/Common/config.h.in
+++ b/src/Common/config.h.in
@@ -16,3 +16,4 @@
 #cmakedefine01 USE_STATS
 #cmakedefine01 CLICKHOUSE_SPLIT_BINARY
 #cmakedefine01 USE_DATASKETCHES
+#cmakedefine01 USE_YAML_CPP
