diff --git a/docs/en/operations/settings/settings.md b/docs/en/operations/settings/settings.md
index da503bc02aad..0216938f8ec0 100644
--- a/docs/en/operations/settings/settings.md
+++ b/docs/en/operations/settings/settings.md
@@ -4071,6 +4071,36 @@ SELECT sum(number) FROM numbers(10000000000) SETTINGS partial_result_on_first_ca
 Possible values: `true`, `false`
 
 Default value: `false`
+
+## check_dictionary_primary_key {#check_dictionary_primary_key}
+
+Enables the check at dictionay creation, dictionaries without word complex-key* in a layout have a key with UInt64 type. The primary key data type must be one of unsigned [integer types](../../sql-reference/data-types/int-uint.md): `UInt8`, `UInt16`, `UInt32`, `UInt64`.
+Possible values:
+
+-   true  — The check is enabled.
+-   false — The check is disabled at dictionay creation.
+
+Default value: `true`.
+
+If you already have dictionay with incorrect primar key and do not want the server to raise an exception during startup, set `check_dictionary_primary_key` to `false`.
+
+Or you can create dictionay with settings `check_dictionary_primary_key` to `false`.
+
+**Example**
+
+```sql
+CREATE DICTIONARY test
+(
+    `id` Int128,
+    `name` String
+)
+PRIMARY KEY id
+SOURCE(CLICKHOUSE(TABLE 'test_local'))
+LIFETIME(MIN 0 MAX 300)
+LAYOUT(HASHED())
+SETTINGS(check_dictionary_primary_key = 0);
+```
+
 ## function_json_value_return_type_allow_nullable
 
 Control whether allow to return `NULL` when value is not exist for JSON_VALUE function.
diff --git a/src/Core/Settings.h b/src/Core/Settings.h
index 44b68f459bd2..d8d92a70f5cc 100644
--- a/src/Core/Settings.h
+++ b/src/Core/Settings.h
@@ -951,6 +951,7 @@ class IColumn;
     M(Bool, regexp_dict_allow_hyperscan, true, "Allow regexp_tree dictionary using Hyperscan library.", 0) \
     \
     M(Bool, dictionary_use_async_executor, false, "Execute a pipeline for reading from a dictionary with several threads. It's supported only by DIRECT dictionary with CLICKHOUSE source.", 0) \
+    M(Bool, check_dictionary_primary_key, true, "Check primary key type for simple dictionary is native unsigned integer", 0) \
 
 // End of FORMAT_FACTORY_SETTINGS
 // Please add settings non-related to formats into the COMMON_SETTINGS above.
diff --git a/src/Dictionaries/getDictionaryConfigurationFromAST.cpp b/src/Dictionaries/getDictionaryConfigurationFromAST.cpp
index 0de8b843604b..5aecd54c115f 100644
--- a/src/Dictionaries/getDictionaryConfigurationFromAST.cpp
+++ b/src/Dictionaries/getDictionaryConfigurationFromAST.cpp
@@ -19,6 +19,7 @@
 #include <Functions/FunctionFactory.h>
 #include <Common/isLocalAddress.h>
 #include <Interpreters/Context.h>
+#include <DataTypes/DataTypeFactory.h>
 
 
 namespace DB
@@ -341,7 +342,9 @@ void buildPrimaryKeyConfiguration(
     AutoPtr<Element> root,
     bool complex,
     const Names & key_names,
-    const ASTExpressionList * dictionary_attributes)
+    const ASTExpressionList * dictionary_attributes,
+    const ASTDictionarySettings * dict_settings,
+    ContextPtr context)
 {
     const auto & children = dictionary_attributes->children;
 
@@ -376,6 +379,26 @@ void buildPrimaryKeyConfiguration(
 
         const ASTDictionaryAttributeDeclaration * dict_attr = (*it)->as<const ASTDictionaryAttributeDeclaration>();
 
+        auto key_type = DataTypeFactory::instance().tryGet(dict_attr->type);
+
+        auto check_dictionary_primary_key = context->getSettingsRef().check_dictionary_primary_key;
+
+        if (dict_settings)
+        {
+            if (const auto * check_dictionary_primary_key_change = dict_settings->changes.tryGet("check_dictionary_primary_key"))
+            {
+                check_dictionary_primary_key = check_dictionary_primary_key_change->get<bool>();
+            }
+        }
+
+        if (check_dictionary_primary_key && !WhichDataType(key_type).isNativeUInt())
+        {
+            throw Exception(ErrorCodes::INCORRECT_DICTIONARY_DEFINITION,
+                "Invalid Primary key type for simple dictionary: {}. Must be native unsigned integer type. "
+                "To avoid checking it, please set check_dictionary_primary_key=false",
+                dict_attr->name);
+        }
+
         AutoPtr<Text> name(doc->createTextNode(dict_attr->name));
         name_element->appendChild(name);
 
@@ -614,7 +637,7 @@ getDictionaryConfigurationFromAST(const ASTCreateQuery & query, ContextPtr conte
 
     checkPrimaryKey(all_attr_names_and_types, pk_attrs);
 
-    buildPrimaryKeyConfiguration(xml_document, structure_element, complex, pk_attrs, query.dictionary_attributes_list);
+    buildPrimaryKeyConfiguration(xml_document, structure_element, complex, pk_attrs, query.dictionary_attributes_list, query.dictionary->dict_settings, context);
 
     buildLayoutConfiguration(xml_document, current_dictionary, query.dictionary->dict_settings, dictionary_layout);
     buildSourceConfiguration(xml_document, current_dictionary, query.dictionary->source, query.dictionary->dict_settings, context);
