diff --git a/src/IO/tests/gtest_s3_uri.cpp b/src/IO/tests/gtest_s3_uri.cpp
index 20d19437c64d..41ce102ca8ae 100644
--- a/src/IO/tests/gtest_s3_uri.cpp
+++ b/src/IO/tests/gtest_s3_uri.cpp
@@ -3,12 +3,79 @@
 
 #if USE_AWS_S3
 
-#    include <IO/S3Common.h>
+#include <IO/S3Common.h>
 
 namespace
 {
 using namespace DB;
 
+struct TestCase
+{
+    S3::URI uri;
+    String endpoint;
+    String bucket;
+    String key;
+    String version_id;
+    bool is_virtual_hosted_style;
+};
+
+const TestCase TestCases[] = {
+    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data")),
+     "https://s3.us-east-2.amazonaws.com",
+     "bucketname",
+     "data",
+     "",
+     true},
+    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?firstKey=someKey&secondKey=anotherKey")),
+     "https://s3.us-east-2.amazonaws.com",
+     "bucketname",
+     "data",
+     "",
+     true},
+    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?versionId=testVersionId&anotherKey=someOtherKey")),
+     "https://s3.us-east-2.amazonaws.com",
+     "bucketname",
+     "data",
+     "testVersionId",
+     true},
+    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?firstKey=someKey&versionId=testVersionId&anotherKey=someOtherKey")),
+     "https://s3.us-east-2.amazonaws.com",
+     "bucketname",
+     "data",
+     "testVersionId",
+     true},
+    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?anotherKey=someOtherKey&versionId=testVersionId")),
+     "https://s3.us-east-2.amazonaws.com",
+     "bucketname",
+     "data",
+     "testVersionId",
+     true},
+    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?versionId=testVersionId")),
+     "https://s3.us-east-2.amazonaws.com",
+     "bucketname",
+     "data",
+     "testVersionId",
+     true},
+    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?versionId=")),
+     "https://s3.us-east-2.amazonaws.com",
+     "bucketname",
+     "data",
+     "",
+     true},
+    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?versionId&")),
+     "https://s3.us-east-2.amazonaws.com",
+     "bucketname",
+     "data",
+     "",
+     true},
+    {S3::URI(Poco::URI("https://bucketname.s3.us-east-2.amazonaws.com/data?versionId")),
+     "https://s3.us-east-2.amazonaws.com",
+     "bucketname",
+     "data",
+     "",
+     true},
+};
+
 class S3UriTest : public testing::TestWithParam<std::string>
 {
 };
@@ -20,6 +87,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ("https://s3.amazonaws.com", uri.endpoint);
         ASSERT_EQ("jokserfn", uri.bucket);
         ASSERT_EQ("", uri.key);
+        ASSERT_EQ("", uri.version_id);
         ASSERT_EQ(true, uri.is_virtual_hosted_style);
     }
     {
@@ -27,6 +95,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ("https://s3.amazonaws.com", uri.endpoint);
         ASSERT_EQ("jokserfn", uri.bucket);
         ASSERT_EQ("", uri.key);
+        ASSERT_EQ("", uri.version_id);
         ASSERT_EQ(false, uri.is_virtual_hosted_style);
     }
     {
@@ -34,6 +103,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ("https://amazonaws.com", uri.endpoint);
         ASSERT_EQ("bucket", uri.bucket);
         ASSERT_EQ("", uri.key);
+        ASSERT_EQ("", uri.version_id);
         ASSERT_EQ(false, uri.is_virtual_hosted_style);
     }
     {
@@ -41,6 +111,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ("https://s3.amazonaws.com", uri.endpoint);
         ASSERT_EQ("jokserfn", uri.bucket);
         ASSERT_EQ("data", uri.key);
+        ASSERT_EQ("", uri.version_id);
         ASSERT_EQ(true, uri.is_virtual_hosted_style);
     }
     {
@@ -48,6 +119,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ("https://storage.amazonaws.com", uri.endpoint);
         ASSERT_EQ("jokserfn", uri.bucket);
         ASSERT_EQ("data", uri.key);
+        ASSERT_EQ("", uri.version_id);
         ASSERT_EQ(false, uri.is_virtual_hosted_style);
     }
     {
@@ -55,6 +127,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ("https://cos.ap-beijing.myqcloud.com", uri.endpoint);
         ASSERT_EQ("bucketname", uri.bucket);
         ASSERT_EQ("data", uri.key);
+        ASSERT_EQ("", uri.version_id);
         ASSERT_EQ(true, uri.is_virtual_hosted_style);
     }
     {
@@ -62,6 +135,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ("https://s3.us-east-2.amazonaws.com", uri.endpoint);
         ASSERT_EQ("bucketname", uri.bucket);
         ASSERT_EQ("data", uri.key);
+        ASSERT_EQ("", uri.version_id);
         ASSERT_EQ(true, uri.is_virtual_hosted_style);
     }
     {
@@ -69,6 +143,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ("https://s3.us-east-2.amazonaws.com", uri.endpoint);
         ASSERT_EQ("bucketname", uri.bucket);
         ASSERT_EQ("data", uri.key);
+        ASSERT_EQ("", uri.version_id);
         ASSERT_EQ(false, uri.is_virtual_hosted_style);
     }
     {
@@ -76,6 +151,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ("https://s3-us-east-2.amazonaws.com", uri.endpoint);
         ASSERT_EQ("bucketname", uri.bucket);
         ASSERT_EQ("data", uri.key);
+        ASSERT_EQ("", uri.version_id);
         ASSERT_EQ(true, uri.is_virtual_hosted_style);
     }
     {
@@ -83,6 +159,7 @@ TEST(S3UriTest, validPatterns)
         ASSERT_EQ("https://s3-us-east-2.amazonaws.com", uri.endpoint);
         ASSERT_EQ("bucketname", uri.bucket);
         ASSERT_EQ("data", uri.key);
+        ASSERT_EQ("", uri.version_id);
         ASSERT_EQ(false, uri.is_virtual_hosted_style);
     }
 }
@@ -92,6 +169,18 @@ TEST_P(S3UriTest, invalidPatterns)
     ASSERT_ANY_THROW(S3::URI(Poco::URI(GetParam())));
 }
 
+TEST(S3UriTest, versionIdChecks)
+{
+    for (const auto& test_case : TestCases)
+    {
+        ASSERT_EQ(test_case.endpoint, test_case.uri.endpoint);
+        ASSERT_EQ(test_case.bucket, test_case.uri.bucket);
+        ASSERT_EQ(test_case.key, test_case.uri.key);
+        ASSERT_EQ(test_case.version_id, test_case.uri.version_id);
+        ASSERT_EQ(test_case.is_virtual_hosted_style, test_case.uri.is_virtual_hosted_style);
+    }
+}
+
 INSTANTIATE_TEST_SUITE_P(
     S3,
     S3UriTest,
