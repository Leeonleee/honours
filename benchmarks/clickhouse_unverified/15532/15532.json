{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 15532,
  "instance_id": "ClickHouse__ClickHouse-15532",
  "issue_numbers": [
    "15530"
  ],
  "base_commit": "c5df9433f051e272bdfa731a79a4b592a8859b0b",
  "patch": "diff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex d900eb17d782..df365a2089e9 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -1555,9 +1555,8 @@ class Client : public Poco::Util::Application\n         BlockInputStreamPtr block_input = context.getInputFormat(\n             current_format, buf, sample, insert_format_max_block_size);\n \n-        const auto & column_defaults = columns_description.getDefaults();\n-        if (!column_defaults.empty())\n-            block_input = std::make_shared<AddingDefaultsBlockInputStream>(block_input, column_defaults, context);\n+        if (columns_description.hasDefaults())\n+            block_input = std::make_shared<AddingDefaultsBlockInputStream>(block_input, columns_description, context);\n \n         BlockInputStreamPtr async_block_input = std::make_shared<AsynchronousBlockInputStream>(block_input);\n \ndiff --git a/src/DataStreams/AddingDefaultBlockOutputStream.cpp b/src/DataStreams/AddingDefaultBlockOutputStream.cpp\nindex a8f78c434e7f..74300a371fb9 100644\n--- a/src/DataStreams/AddingDefaultBlockOutputStream.cpp\n+++ b/src/DataStreams/AddingDefaultBlockOutputStream.cpp\n@@ -7,7 +7,7 @@ namespace DB\n \n void AddingDefaultBlockOutputStream::write(const Block & block)\n {\n-    output->write(addMissingDefaults(block, output_block.getNamesAndTypesList(), column_defaults, context));\n+    output->write(addMissingDefaults(block, output_block.getNamesAndTypesList(), columns, context));\n }\n \n void AddingDefaultBlockOutputStream::flush()\ndiff --git a/src/DataStreams/AddingDefaultBlockOutputStream.h b/src/DataStreams/AddingDefaultBlockOutputStream.h\nindex 891349207304..5b46c533f7f6 100644\n--- a/src/DataStreams/AddingDefaultBlockOutputStream.h\n+++ b/src/DataStreams/AddingDefaultBlockOutputStream.h\n@@ -2,7 +2,7 @@\n \n #include <DataStreams/IBlockOutputStream.h>\n #include <Columns/ColumnConst.h>\n-#include <Storages/ColumnDefault.h>\n+#include <Storages/ColumnsDescription.h>\n \n \n namespace DB\n@@ -23,10 +23,10 @@ class AddingDefaultBlockOutputStream : public IBlockOutputStream\n         const BlockOutputStreamPtr & output_,\n         const Block & header_,\n         const Block & output_block_,\n-        const ColumnDefaults & column_defaults_,\n+        const ColumnsDescription & columns_,\n         const Context & context_)\n         : output(output_), header(header_), output_block(output_block_),\n-          column_defaults(column_defaults_), context(context_)\n+          columns(columns_), context(context_)\n     {\n     }\n \n@@ -43,7 +43,7 @@ class AddingDefaultBlockOutputStream : public IBlockOutputStream\n     const Block header;\n     /// Blocks after this stream should have this structure\n     const Block output_block;\n-    const ColumnDefaults column_defaults;\n+    const ColumnsDescription columns;\n     const Context & context;\n };\n \ndiff --git a/src/DataStreams/AddingDefaultsBlockInputStream.cpp b/src/DataStreams/AddingDefaultsBlockInputStream.cpp\nindex e958b5790741..160d1b4fb763 100644\n--- a/src/DataStreams/AddingDefaultsBlockInputStream.cpp\n+++ b/src/DataStreams/AddingDefaultsBlockInputStream.cpp\n@@ -127,11 +127,13 @@ static MutableColumnPtr mixColumns(const ColumnWithTypeAndName & col_read,\n }\n \n \n-AddingDefaultsBlockInputStream::AddingDefaultsBlockInputStream(const BlockInputStreamPtr & input,\n-                                                               const ColumnDefaults & column_defaults_,\n-                                                               const Context & context_)\n-    : column_defaults(column_defaults_),\n-      context(context_)\n+AddingDefaultsBlockInputStream::AddingDefaultsBlockInputStream(\n+    const BlockInputStreamPtr & input,\n+    const ColumnsDescription & columns_,\n+    const Context & context_)\n+    : columns(columns_)\n+    , column_defaults(columns.getDefaults())\n+    , context(context_)\n {\n     children.push_back(input);\n     header = input->getHeader();\n@@ -169,7 +171,7 @@ Block AddingDefaultsBlockInputStream::readImpl()\n     if (!evaluate_block.columns())\n         evaluate_block.insert({ColumnConst::create(ColumnUInt8::create(1, 0), res.rows()), std::make_shared<DataTypeUInt8>(), \"_dummy\"});\n \n-    evaluateMissingDefaults(evaluate_block, header.getNamesAndTypesList(), column_defaults, context, false);\n+    evaluateMissingDefaults(evaluate_block, header.getNamesAndTypesList(), columns, context, false);\n \n     std::unordered_map<size_t, MutableColumnPtr> mixed_columns;\n \ndiff --git a/src/DataStreams/AddingDefaultsBlockInputStream.h b/src/DataStreams/AddingDefaultsBlockInputStream.h\nindex 10fa20f7ad14..b2efa5863ef3 100644\n--- a/src/DataStreams/AddingDefaultsBlockInputStream.h\n+++ b/src/DataStreams/AddingDefaultsBlockInputStream.h\n@@ -1,7 +1,7 @@\n #pragma once\n \n #include <DataStreams/IBlockInputStream.h>\n-#include <Storages/ColumnDefault.h>\n+#include <Storages/ColumnsDescription.h>\n \n \n namespace DB\n@@ -15,7 +15,7 @@ class AddingDefaultsBlockInputStream : public IBlockInputStream\n public:\n     AddingDefaultsBlockInputStream(\n         const BlockInputStreamPtr & input,\n-        const ColumnDefaults & column_defaults_,\n+        const ColumnsDescription & columns_,\n         const Context & context_);\n \n     String getName() const override { return \"AddingDefaults\"; }\n@@ -26,6 +26,7 @@ class AddingDefaultsBlockInputStream : public IBlockInputStream\n \n private:\n     Block header;\n+    const ColumnsDescription columns;\n     const ColumnDefaults column_defaults;\n     const Context & context;\n };\ndiff --git a/src/DataStreams/InputStreamFromASTInsertQuery.cpp b/src/DataStreams/InputStreamFromASTInsertQuery.cpp\nindex 19c6fe41ecaf..70d69227ac01 100644\n--- a/src/DataStreams/InputStreamFromASTInsertQuery.cpp\n+++ b/src/DataStreams/InputStreamFromASTInsertQuery.cpp\n@@ -64,9 +64,9 @@ InputStreamFromASTInsertQuery::InputStreamFromASTInsertQuery(\n     {\n         StoragePtr storage = DatabaseCatalog::instance().getTable(ast_insert_query->table_id, context);\n         auto metadata_snapshot = storage->getInMemoryMetadataPtr();\n-        auto column_defaults = metadata_snapshot->getColumns().getDefaults();\n-        if (!column_defaults.empty())\n-            res_stream = std::make_shared<AddingDefaultsBlockInputStream>(res_stream, column_defaults, context);\n+        const auto & columns = metadata_snapshot->getColumns();\n+        if (columns.hasDefaults())\n+            res_stream = std::make_shared<AddingDefaultsBlockInputStream>(res_stream, columns, context);\n     }\n }\n \ndiff --git a/src/DataStreams/PushingToViewsBlockOutputStream.cpp b/src/DataStreams/PushingToViewsBlockOutputStream.cpp\nindex 12ee22b20bb8..dc28d59b5324 100644\n--- a/src/DataStreams/PushingToViewsBlockOutputStream.cpp\n+++ b/src/DataStreams/PushingToViewsBlockOutputStream.cpp\n@@ -1,4 +1,3 @@\n-#include <DataStreams/AddingDefaultBlockOutputStream.h>\n #include <DataStreams/ConvertingBlockInputStream.h>\n #include <DataStreams/PushingToViewsBlockOutputStream.h>\n #include <DataStreams/SquashingBlockInputStream.h>\ndiff --git a/src/Interpreters/InterpreterInsertQuery.cpp b/src/Interpreters/InterpreterInsertQuery.cpp\nindex 5985a7fb7d65..05707b66c0b1 100644\n--- a/src/Interpreters/InterpreterInsertQuery.cpp\n+++ b/src/Interpreters/InterpreterInsertQuery.cpp\n@@ -348,7 +348,7 @@ BlockIO InterpreterInsertQuery::execute()\n             /// Actually we don't know structure of input blocks from query/table,\n             /// because some clients break insertion protocol (columns != header)\n             out = std::make_shared<AddingDefaultBlockOutputStream>(\n-                out, query_sample_block, out->getHeader(), metadata_snapshot->getColumns().getDefaults(), context);\n+                out, query_sample_block, out->getHeader(), metadata_snapshot->getColumns(), context);\n \n             /// It's important to squash blocks as early as possible (before other transforms),\n             ///  because other transforms may work inefficient if block size is small.\ndiff --git a/src/Interpreters/addMissingDefaults.cpp b/src/Interpreters/addMissingDefaults.cpp\nindex cbe6811ea9e4..37a0812826b0 100644\n--- a/src/Interpreters/addMissingDefaults.cpp\n+++ b/src/Interpreters/addMissingDefaults.cpp\n@@ -6,16 +6,17 @@\n #include <Columns/ColumnArray.h>\n #include <Interpreters/inplaceBlockConversions.h>\n #include <Core/Block.h>\n-#include <Storages/ColumnDefault.h>\n+#include <Storages/ColumnsDescription.h>\n \n \n namespace DB\n {\n \n-Block addMissingDefaults(const Block & block,\n-                         const NamesAndTypesList & required_columns,\n-                         const ColumnDefaults & column_defaults,\n-                         const Context & context)\n+Block addMissingDefaults(\n+    const Block & block,\n+    const NamesAndTypesList & required_columns,\n+    const ColumnsDescription & columns,\n+    const Context & context)\n {\n     /// For missing columns of nested structure, you need to create not a column of empty arrays, but a column of arrays of correct lengths.\n     /// First, remember the offset columns for all arrays in the block.\n@@ -49,7 +50,7 @@ Block addMissingDefaults(const Block & block,\n             continue;\n         }\n \n-        if (column_defaults.count(column.name))\n+        if (columns.hasDefault(column.name))\n             continue;\n \n         String offsets_name = Nested::extractTableName(column.name);\n@@ -72,8 +73,8 @@ Block addMissingDefaults(const Block & block,\n         res.insert(ColumnWithTypeAndName(std::move(new_column), column.type, column.name));\n     }\n \n-    /// Computes explicitly specified values (in column_defaults) by default and materialized columns.\n-    evaluateMissingDefaults(res, required_columns, column_defaults, context);\n+    /// Computes explicitly specified values by default and materialized columns.\n+    evaluateMissingDefaults(res, required_columns, columns, context);\n     return res;\n }\n \ndiff --git a/src/Interpreters/addMissingDefaults.h b/src/Interpreters/addMissingDefaults.h\nindex cc84f413b168..ed5d5ce61ff6 100644\n--- a/src/Interpreters/addMissingDefaults.h\n+++ b/src/Interpreters/addMissingDefaults.h\n@@ -10,7 +10,7 @@ namespace DB\n class Block;\n class Context;\n class NamesAndTypesList;\n-struct ColumnDefault;\n+class ColumnsDescription;\n \n /** Adds three types of columns into block\n   * 1. Columns, that are missed inside request, but present in table without defaults (missed columns)\n@@ -21,7 +21,7 @@ struct ColumnDefault;\n Block addMissingDefaults(\n     const Block & block,\n     const NamesAndTypesList & required_columns,\n-    const std::unordered_map<std::string, ColumnDefault> & column_defaults,\n+    const ColumnsDescription & columns,\n     const Context & context);\n \n }\ndiff --git a/src/Interpreters/inplaceBlockConversions.cpp b/src/Interpreters/inplaceBlockConversions.cpp\nindex 19495b0ffed8..849512adcc19 100644\n--- a/src/Interpreters/inplaceBlockConversions.cpp\n+++ b/src/Interpreters/inplaceBlockConversions.cpp\n@@ -2,7 +2,6 @@\n \n #include <Core/Block.h>\n #include <Parsers/queryToString.h>\n-#include <Storages/ColumnDefault.h>\n #include <Interpreters/TreeRewriter.h>\n #include <Interpreters/ExpressionAnalyzer.h>\n #include <Interpreters/ExpressionActions.h>\n@@ -14,6 +13,8 @@\n #include <utility>\n #include <DataTypes/DataTypesNumber.h>\n #include <Interpreters/RequiredSourceColumnsVisitor.h>\n+#include <Common/checkStackSize.h>\n+#include <Storages/ColumnsDescription.h>\n \n \n namespace DB\n@@ -22,46 +23,46 @@ namespace DB\n namespace\n {\n \n-ASTPtr defaultRequiredExpressions(Block & block, const NamesAndTypesList & required_columns, const ColumnDefaults & column_defaults)\n+/// Add all required expressions for missing columns calculation\n+void addDefaultRequiredExpressionsRecursively(Block & block, const String & required_column, const ColumnsDescription & columns, ASTPtr default_expr_list_accum, NameSet & added_columns)\n {\n-    ASTPtr default_expr_list = std::make_shared<ASTExpressionList>();\n+    checkStackSize();\n+    if (block.has(required_column) || added_columns.count(required_column))\n+        return;\n \n-    for (const auto & column : required_columns)\n+    auto column_default = columns.getDefault(required_column);\n+\n+    if (column_default)\n     {\n-        if (block.has(column.name))\n-            continue;\n+        /// expressions must be cloned to prevent modification by the ExpressionAnalyzer\n+        auto column_default_expr = column_default->expression->clone();\n \n-        const auto it = column_defaults.find(column.name);\n+        /// Our default may depend on columns with default expr which not present in block\n+        /// we have to add them to block too\n+        RequiredSourceColumnsVisitor::Data columns_context;\n+        RequiredSourceColumnsVisitor(columns_context).visit(column_default_expr);\n+        NameSet required_columns_names = columns_context.requiredColumns();\n \n-        if (it != column_defaults.end())\n-        {\n-            /// expressions must be cloned to prevent modification by the ExpressionAnalyzer\n-            auto column_default_expr = it->second.expression->clone();\n-\n-            /// Our default may depend on columns with ALIAS as default expr which not present in block\n-            /// we can easily add them from column_defaults struct\n-            RequiredSourceColumnsVisitor::Data columns_context;\n-            RequiredSourceColumnsVisitor(columns_context).visit(column_default_expr);\n-            NameSet required_columns_names = columns_context.requiredColumns();\n-\n-            for (const auto & required_column_name : required_columns_names)\n-            {\n-                /// If we have such default column and it's alias than we should\n-                /// add it into default_expression_list\n-                if (auto rit = column_defaults.find(required_column_name);\n-                    rit != column_defaults.end() && rit->second.kind == ColumnDefaultKind::Alias)\n-                {\n-                    default_expr_list->children.emplace_back(setAlias(rit->second.expression->clone(), required_column_name));\n-                }\n-            }\n-\n-            auto cast_func = makeASTFunction(\"CAST\", column_default_expr, std::make_shared<ASTLiteral>(column.type->getName()));\n-            default_expr_list->children.emplace_back(setAlias(cast_func, it->first));\n-        }\n+        auto cast_func = makeASTFunction(\"CAST\", column_default_expr, std::make_shared<ASTLiteral>(columns.get(required_column).type->getName()));\n+        default_expr_list_accum->children.emplace_back(setAlias(cast_func, required_column));\n+        added_columns.emplace(required_column);\n+\n+        for (const auto & required_column_name : required_columns_names)\n+            addDefaultRequiredExpressionsRecursively(block, required_column_name, columns, default_expr_list_accum, added_columns);\n     }\n+}\n+\n+ASTPtr defaultRequiredExpressions(Block & block, const NamesAndTypesList & required_columns, const ColumnsDescription & columns)\n+{\n+    ASTPtr default_expr_list = std::make_shared<ASTExpressionList>();\n+\n+    NameSet added_columns;\n+    for (const auto & column : required_columns)\n+        addDefaultRequiredExpressionsRecursively(block, column.name, columns, default_expr_list, added_columns);\n \n     if (default_expr_list->children.empty())\n         return nullptr;\n+\n     return default_expr_list;\n }\n \n@@ -161,13 +162,13 @@ void performRequiredConversions(Block & block, const NamesAndTypesList & require\n \n void evaluateMissingDefaults(Block & block,\n     const NamesAndTypesList & required_columns,\n-    const ColumnDefaults & column_defaults,\n+    const ColumnsDescription & columns,\n     const Context & context, bool save_unneeded_columns)\n {\n-    if (column_defaults.empty())\n+    if (!columns.hasDefaults())\n         return;\n \n-    ASTPtr default_expr_list = defaultRequiredExpressions(block, required_columns, column_defaults);\n+    ASTPtr default_expr_list = defaultRequiredExpressions(block, required_columns, columns);\n     executeExpressionsOnBlock(block, default_expr_list, save_unneeded_columns, required_columns, context);\n }\n \ndiff --git a/src/Interpreters/inplaceBlockConversions.h b/src/Interpreters/inplaceBlockConversions.h\nindex b86a23bde134..066975ab4bc1 100644\n--- a/src/Interpreters/inplaceBlockConversions.h\n+++ b/src/Interpreters/inplaceBlockConversions.h\n@@ -10,13 +10,13 @@ namespace DB\n class Block;\n class Context;\n class NamesAndTypesList;\n-struct ColumnDefault;\n+class ColumnsDescription;\n \n /// Adds missing defaults to block according to required_columns\n-/// using column_defaults map\n+/// using columns description\n void evaluateMissingDefaults(Block & block,\n     const NamesAndTypesList & required_columns,\n-    const std::unordered_map<std::string, ColumnDefault> & column_defaults,\n+    const ColumnsDescription & columns,\n     const Context & context, bool save_unneeded_columns = true);\n \n /// Tries to convert columns in block to required_columns\ndiff --git a/src/Processors/Transforms/AddingMissedTransform.cpp b/src/Processors/Transforms/AddingMissedTransform.cpp\nindex 75823fc8a63f..1344cce22a74 100644\n--- a/src/Processors/Transforms/AddingMissedTransform.cpp\n+++ b/src/Processors/Transforms/AddingMissedTransform.cpp\n@@ -8,10 +8,10 @@ namespace DB\n AddingMissedTransform::AddingMissedTransform(\n     Block header_,\n     Block result_header_,\n-    const ColumnDefaults & column_defaults_,\n+    const ColumnsDescription & columns_,\n     const Context & context_)\n     : ISimpleTransform(std::move(header_), std::move(result_header_), false)\n-    , column_defaults(column_defaults_), context(context_)\n+    , columns(columns_), context(context_)\n {\n }\n \n@@ -20,7 +20,7 @@ void AddingMissedTransform::transform(Chunk & chunk)\n     auto num_rows = chunk.getNumRows();\n     Block src = getInputPort().getHeader().cloneWithColumns(chunk.detachColumns());\n \n-    auto res = addMissingDefaults(src, getOutputPort().getHeader().getNamesAndTypesList(), column_defaults, context);\n+    auto res = addMissingDefaults(src, getOutputPort().getHeader().getNamesAndTypesList(), columns, context);\n     chunk.setColumns(res.getColumns(), num_rows);\n }\n \ndiff --git a/src/Processors/Transforms/AddingMissedTransform.h b/src/Processors/Transforms/AddingMissedTransform.h\nindex b9baa1622efd..561f908acef2 100644\n--- a/src/Processors/Transforms/AddingMissedTransform.h\n+++ b/src/Processors/Transforms/AddingMissedTransform.h\n@@ -1,7 +1,7 @@\n #pragma once\n \n #include <Processors/ISimpleTransform.h>\n-#include <Storages/ColumnDefault.h>\n+#include <Storages/ColumnsDescription.h>\n \n \n namespace DB\n@@ -20,7 +20,7 @@ class AddingMissedTransform : public ISimpleTransform\n     AddingMissedTransform(\n         Block header_,\n         Block result_header_,\n-        const ColumnDefaults & column_defaults_,\n+        const ColumnsDescription & columns_,\n         const Context & context_);\n \n     String getName() const override { return \"AddingMissed\"; }\n@@ -28,7 +28,7 @@ class AddingMissedTransform : public ISimpleTransform\n private:\n     void transform(Chunk &) override;\n \n-    const ColumnDefaults column_defaults;\n+    const ColumnsDescription columns;\n     const Context & context;\n };\n \ndiff --git a/src/Storages/ColumnsDescription.cpp b/src/Storages/ColumnsDescription.cpp\nindex 48cde6b6aa96..9bbc16538485 100644\n--- a/src/Storages/ColumnsDescription.cpp\n+++ b/src/Storages/ColumnsDescription.cpp\n@@ -378,6 +378,14 @@ bool ColumnsDescription::hasPhysical(const String & column_name) const\n }\n \n \n+bool ColumnsDescription::hasDefaults() const\n+{\n+    for (const auto & column : columns)\n+        if (column.default_desc.expression)\n+            return true;\n+    return false;\n+}\n+\n ColumnDefaults ColumnsDescription::getDefaults() const\n {\n     ColumnDefaults ret;\ndiff --git a/src/Storages/ColumnsDescription.h b/src/Storages/ColumnsDescription.h\nindex 8d1009b72630..1df6c6ae67b6 100644\n--- a/src/Storages/ColumnsDescription.h\n+++ b/src/Storages/ColumnsDescription.h\n@@ -109,6 +109,7 @@ class ColumnsDescription\n \n     ColumnDefaults getDefaults() const; /// TODO: remove\n     bool hasDefault(const String & column_name) const;\n+    bool hasDefaults() const;\n     std::optional<ColumnDefault> getDefault(const String & column_name) const;\n \n     /// Does column has non default specified compression codec\ndiff --git a/src/Storages/MergeTree/IMergeTreeReader.cpp b/src/Storages/MergeTree/IMergeTreeReader.cpp\nindex 5740eef68109..4379ac09af01 100644\n--- a/src/Storages/MergeTree/IMergeTreeReader.cpp\n+++ b/src/Storages/MergeTree/IMergeTreeReader.cpp\n@@ -180,7 +180,7 @@ void IMergeTreeReader::evaluateMissingDefaults(Block additional_columns, Columns\n             additional_columns.insert({res_columns[pos], name_and_type->type, name_and_type->name});\n         }\n \n-        DB::evaluateMissingDefaults(additional_columns, columns, metadata_snapshot->getColumns().getDefaults(), storage.global_context);\n+        DB::evaluateMissingDefaults(additional_columns, columns, metadata_snapshot->getColumns(), storage.global_context);\n \n         /// Move columns from block.\n         name_and_type = columns.begin();\ndiff --git a/src/Storages/StorageBuffer.cpp b/src/Storages/StorageBuffer.cpp\nindex 14f188275e5e..4b038692b777 100644\n--- a/src/Storages/StorageBuffer.cpp\n+++ b/src/Storages/StorageBuffer.cpp\n@@ -224,7 +224,7 @@ Pipe StorageBuffer::read(\n                 pipe_from_dst.addSimpleTransform([&](const Block & stream_header)\n                 {\n                     return std::make_shared<AddingMissedTransform>(stream_header, header_after_adding_defaults,\n-                        metadata_snapshot->getColumns().getDefaults(), context);\n+                        metadata_snapshot->getColumns(), context);\n                 });\n \n                 pipe_from_dst.addSimpleTransform([&](const Block & stream_header)\ndiff --git a/src/Storages/StorageFile.cpp b/src/Storages/StorageFile.cpp\nindex cc47047dc783..8f7e1563a629 100644\n--- a/src/Storages/StorageFile.cpp\n+++ b/src/Storages/StorageFile.cpp\n@@ -234,12 +234,12 @@ class StorageFileSource : public SourceWithProgress\n         const Context & context_,\n         UInt64 max_block_size_,\n         FilesInfoPtr files_info_,\n-        ColumnDefaults column_defaults_)\n+        ColumnsDescription columns_description_)\n         : SourceWithProgress(getHeader(metadata_snapshot_, files_info_->need_path_column, files_info_->need_file_column))\n         , storage(std::move(storage_))\n         , metadata_snapshot(metadata_snapshot_)\n         , files_info(std::move(files_info_))\n-        , column_defaults(std::move(column_defaults_))\n+        , columns_description(std::move(columns_description_))\n         , context(context_)\n         , max_block_size(max_block_size_)\n     {\n@@ -314,8 +314,8 @@ class StorageFileSource : public SourceWithProgress\n                 reader = FormatFactory::instance().getInput(\n                         storage->format_name, *read_buf, metadata_snapshot->getSampleBlock(), context, max_block_size);\n \n-                if (!column_defaults.empty())\n-                    reader = std::make_shared<AddingDefaultsBlockInputStream>(reader, column_defaults, context);\n+                if (columns_description.hasDefaults())\n+                    reader = std::make_shared<AddingDefaultsBlockInputStream>(reader, columns_description, context);\n \n                 reader->readPrefix();\n             }\n@@ -366,7 +366,7 @@ class StorageFileSource : public SourceWithProgress\n     std::unique_ptr<ReadBuffer> read_buf;\n     BlockInputStreamPtr reader;\n \n-    ColumnDefaults column_defaults;\n+    ColumnsDescription columns_description;\n \n     const Context & context;    /// TODO Untangle potential issues with context lifetime.\n     UInt64 max_block_size;\n@@ -417,7 +417,7 @@ Pipe StorageFile::read(\n \n     for (size_t i = 0; i < num_streams; ++i)\n         pipes.emplace_back(std::make_shared<StorageFileSource>(\n-                this_ptr, metadata_snapshot, context, max_block_size, files_info, metadata_snapshot->getColumns().getDefaults()));\n+                this_ptr, metadata_snapshot, context, max_block_size, files_info, metadata_snapshot->getColumns()));\n \n     return Pipe::unitePipes(std::move(pipes));\n }\ndiff --git a/src/Storages/StorageS3.cpp b/src/Storages/StorageS3.cpp\nindex 469350d6eaa7..ceca14058575 100644\n--- a/src/Storages/StorageS3.cpp\n+++ b/src/Storages/StorageS3.cpp\n@@ -71,7 +71,7 @@ namespace\n             String name_,\n             const Block & sample_block,\n             const Context & context,\n-            const ColumnDefaults & column_defaults,\n+            const ColumnsDescription & columns,\n             UInt64 max_block_size,\n             const CompressionMethod compression_method,\n             const std::shared_ptr<Aws::S3::S3Client> & client,\n@@ -86,8 +86,8 @@ namespace\n             read_buf = wrapReadBufferWithCompressionMethod(std::make_unique<ReadBufferFromS3>(client, bucket, key), compression_method);\n             reader = FormatFactory::instance().getInput(format, *read_buf, sample_block, context, max_block_size);\n \n-            if (!column_defaults.empty())\n-                reader = std::make_shared<AddingDefaultsBlockInputStream>(reader, column_defaults, context);\n+            if (columns.hasDefaults())\n+                reader = std::make_shared<AddingDefaultsBlockInputStream>(reader, columns, context);\n         }\n \n         String getName() const override\n@@ -312,7 +312,7 @@ Pipe StorageS3::read(\n             getName(),\n             metadata_snapshot->getSampleBlock(),\n             context,\n-            metadata_snapshot->getColumns().getDefaults(),\n+            metadata_snapshot->getColumns(),\n             max_block_size,\n             chooseCompressionMethod(uri.endpoint, compression_method),\n             client,\ndiff --git a/src/Storages/StorageURL.cpp b/src/Storages/StorageURL.cpp\nindex c2f7bfd18d20..a6c8f1b39f86 100644\n--- a/src/Storages/StorageURL.cpp\n+++ b/src/Storages/StorageURL.cpp\n@@ -61,7 +61,7 @@ namespace\n             String name_,\n             const Block & sample_block,\n             const Context & context,\n-            const ColumnDefaults & column_defaults,\n+            const ColumnsDescription & columns,\n             UInt64 max_block_size,\n             const ConnectionTimeouts & timeouts,\n             const CompressionMethod compression_method)\n@@ -81,7 +81,7 @@ namespace\n                 compression_method);\n \n             reader = FormatFactory::instance().getInput(format, *read_buf, sample_block, context, max_block_size);\n-            reader = std::make_shared<AddingDefaultsBlockInputStream>(reader, column_defaults, context);\n+            reader = std::make_shared<AddingDefaultsBlockInputStream>(reader, columns, context);\n         }\n \n         String getName() const override\n@@ -201,7 +201,7 @@ Pipe IStorageURLBase::read(\n         getName(),\n         getHeaderBlock(column_names, metadata_snapshot),\n         context,\n-        metadata_snapshot->getColumns().getDefaults(),\n+        metadata_snapshot->getColumns(),\n         max_block_size,\n         ConnectionTimeouts::getHTTPTimeouts(context),\n         chooseCompressionMethod(request_uri.getPath(), compression_method)));\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01513_defaults_on_defaults_no_column.reference b/tests/queries/0_stateless/01513_defaults_on_defaults_no_column.reference\nnew file mode 100644\nindex 000000000000..10eb384579ec\n--- /dev/null\n+++ b/tests/queries/0_stateless/01513_defaults_on_defaults_no_column.reference\n@@ -0,0 +1,7 @@\n+1\n+1\n+1\n+1\n+1\t[]\t[]\t[]\t0\n+CREATE TABLE default.defaults_on_defaults\\n(\\n    `key` UInt64,\\n    `Arr.C1` Array(UInt32) DEFAULT emptyArrayUInt32(),\\n    `Arr.C2` Array(UInt32) DEFAULT arrayResize(emptyArrayUInt32(), length(Arr.C1)),\\n    `Arr.C3` Array(UInt32) ALIAS arrayResize(emptyArrayUInt32(), length(Arr.C2)),\\n    `Arr.C4` Array(UInt32) DEFAULT arrayResize(emptyArrayUInt32(), length(Arr.C3)),\\n    `ArrLen` UInt64 DEFAULT length(Arr.C4)\\n)\\nENGINE = MergeTree()\\nORDER BY tuple()\\nSETTINGS index_granularity = 8192\n+1\ndiff --git a/tests/queries/0_stateless/01513_defaults_on_defaults_no_column.sql b/tests/queries/0_stateless/01513_defaults_on_defaults_no_column.sql\nnew file mode 100644\nindex 000000000000..65b7b99f70ba\n--- /dev/null\n+++ b/tests/queries/0_stateless/01513_defaults_on_defaults_no_column.sql\n@@ -0,0 +1,36 @@\n+DROP TABLE IF EXISTS defaults_on_defaults;\n+CREATE TABLE defaults_on_defaults (\n+    key UInt64\n+)\n+ENGINE = MergeTree()\n+ORDER BY tuple();\n+\n+INSERT INTO defaults_on_defaults values (1);\n+\n+ALTER TABLE defaults_on_defaults ADD COLUMN `Arr.C1` Array(UInt32) DEFAULT emptyArrayUInt32();\n+\n+ALTER TABLE defaults_on_defaults ADD COLUMN `Arr.C2` Array(UInt32) DEFAULT arrayResize(emptyArrayUInt32(), length(Arr.C1));\n+\n+ALTER TABLE defaults_on_defaults ADD COLUMN `Arr.C3` Array(UInt32) ALIAS arrayResize(emptyArrayUInt32(), length(Arr.C2));\n+\n+SELECT 1 from defaults_on_defaults where length(`Arr.C2`) = 0;\n+\n+SELECT 1 from defaults_on_defaults where length(`Arr.C3`) = 0;\n+\n+ALTER TABLE defaults_on_defaults ADD COLUMN `Arr.C4` Array(UInt32) DEFAULT arrayResize(emptyArrayUInt32(), length(Arr.C3));\n+\n+SELECT 1 from defaults_on_defaults where length(`Arr.C4`) = 0;\n+\n+ALTER TABLE defaults_on_defaults ADD COLUMN `ArrLen` UInt64 DEFAULT length(Arr.C4);\n+\n+SELECT 1 from defaults_on_defaults where ArrLen = 0;\n+\n+SELECT * from defaults_on_defaults where ArrLen = 0;\n+\n+SHOW CREATE TABLE defaults_on_defaults;\n+\n+OPTIMIZE TABLE defaults_on_defaults FINAL;\n+\n+SELECT 1 from defaults_on_defaults where length(`Arr.C4`) = 0;\n+\n+DROP TABLE IF EXISTS defaults_on_defaults;\n",
  "problem_statement": "Default is not substituted into expression\n```\r\nCREATE TABLE qweqwe                                                                                                                                                                                                                            \r\n(                                                                                                                                                                                                                                              \r\n    `Key` UInt32                                                                                                                                                                                                                               \r\n)                                                                                                                                                                                                                                              \r\nENGINE = MergeTree()                                                                                                                                                                                                                           \r\nORDER BY tuple();\r\n\r\nINSERT INTO qweqwe VALUES(1);\r\n\r\nALTER TABLE qweqwe\r\n    ADD COLUMN `Arr.C1` Array(UInt32) DEFAULT emptyArrayUInt32();\r\n\r\nALTER TABLE qweqwe\r\n    ADD COLUMN `Arr.C2` Array(UInt32) DEFAULT arrayResize(emptyArrayUInt32(), length(Arr.C1))\r\n\r\nSELECT 1 from qweqwe where length(`Arr.C2`) > 0  \r\nCode: 47. DB::Exception: Received from localhost:9000. DB::Exception: Missing columns: 'Arr.C1' while processing query: 'CAST(arrayResize(emptyArrayUInt32(), length(Arr.C1)), 'Array(UInt32)') AS `Arr.C2`', required columns: 'Arr.C1', source columns: 'Key': (while reading from part /home/alesap/clickdb/data/default/qweqwe/all_1_1_0/): While executing MergeTreeThread.                                                                                                                                                                                                                 \r\n```\n",
  "hints_text": "",
  "created_at": "2020-10-02T12:52:59Z",
  "modified_files": [
    "programs/client/Client.cpp",
    "src/DataStreams/AddingDefaultBlockOutputStream.cpp",
    "src/DataStreams/AddingDefaultBlockOutputStream.h",
    "src/DataStreams/AddingDefaultsBlockInputStream.cpp",
    "src/DataStreams/AddingDefaultsBlockInputStream.h",
    "src/DataStreams/InputStreamFromASTInsertQuery.cpp",
    "src/DataStreams/PushingToViewsBlockOutputStream.cpp",
    "src/Interpreters/InterpreterInsertQuery.cpp",
    "src/Interpreters/addMissingDefaults.cpp",
    "src/Interpreters/addMissingDefaults.h",
    "src/Interpreters/inplaceBlockConversions.cpp",
    "src/Interpreters/inplaceBlockConversions.h",
    "src/Processors/Transforms/AddingMissedTransform.cpp",
    "src/Processors/Transforms/AddingMissedTransform.h",
    "src/Storages/ColumnsDescription.cpp",
    "src/Storages/ColumnsDescription.h",
    "src/Storages/MergeTree/IMergeTreeReader.cpp",
    "src/Storages/StorageBuffer.cpp",
    "src/Storages/StorageFile.cpp",
    "src/Storages/StorageS3.cpp",
    "src/Storages/StorageURL.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01513_defaults_on_defaults_no_column.reference",
    "b/tests/queries/0_stateless/01513_defaults_on_defaults_no_column.sql"
  ]
}