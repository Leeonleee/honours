You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Inverted Indices (RFC)
We already have "data skipping" indices in ClickHouse.

Data skipping index is a data structure (aggregation, data sketch, etc) that is created for every data granule (or every n granules) and allows to quickly answer - if some condition can be possibly true or possibly false on this range of data. This way, we can scan through the granules and the corresponding index data and filter out the irrelevant granules by asking every granule of the data skipping index.

In comparison, the inverted index is a single data structure created for all the granules and contains a mapping: value -> list of granules (marks) where the value might be.

We can have an independent immutable inverted index in every data part (it is the most simple approach compatible with replication, transactions, and MVCC...).

Inverted indices can reuse and extend the interface of `IMergeTreeIndex`. We can imagine it as having only one "index granule" per data part.

Inverted indices can be quite heavy (in some cases heavier than the data itself) and work well only when presented in memory. Nevertheless, we can experiment with fully in-memory indices (HashMap + Arena), reusing SSDCache data structure and RocksDB.

The main application will be text search. But we still need inverted indices on exact values as a first step in approaching text search. Then we will use tokenization or ngrams, normalization, and ensure that the intersection of granule lists works alright - to implement text search.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
