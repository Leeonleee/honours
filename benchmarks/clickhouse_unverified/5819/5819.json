{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 5819,
  "instance_id": "ClickHouse__ClickHouse-5819",
  "issue_numbers": [
    "5814"
  ],
  "base_commit": "106a2d0c0f44d09ac50376304977e3909b989c1e",
  "patch": "diff --git a/dbms/src/DataStreams/TTLBlockInputStream.cpp b/dbms/src/DataStreams/TTLBlockInputStream.cpp\nindex 482a3ff48143..1e765f8bb3cf 100644\n--- a/dbms/src/DataStreams/TTLBlockInputStream.cpp\n+++ b/dbms/src/DataStreams/TTLBlockInputStream.cpp\n@@ -26,6 +26,7 @@ TTLBlockInputStream::TTLBlockInputStream(\n     , date_lut(DateLUT::instance())\n {\n     children.push_back(input_);\n+    header = children.at(0)->getHeader();\n \n     const auto & column_defaults = storage.getColumns().getDefaults();\n     ASTPtr default_expr_list = std::make_shared<ASTExpressionList>();\n@@ -58,11 +59,6 @@ TTLBlockInputStream::TTLBlockInputStream(\n }\n \n \n-Block TTLBlockInputStream::getHeader() const\n-{\n-    return children.at(0)->getHeader();\n-}\n-\n Block TTLBlockInputStream::readImpl()\n {\n     Block block = children.at(0)->read();\n@@ -108,11 +104,13 @@ void TTLBlockInputStream::removeRowsWithExpiredTableTTL(Block & block)\n     const auto & current = block.getByName(storage.ttl_table_entry.result_column);\n     const IColumn * ttl_column = current.column.get();\n \n+    const auto & column_names = header.getNames();\n     MutableColumns result_columns;\n-    result_columns.reserve(getHeader().columns());\n-    for (const auto & name : storage.getColumns().getNamesOfPhysical())\n+    result_columns.reserve(column_names.size());\n+\n+    for (auto it = column_names.begin(); it != column_names.end(); ++it)\n     {\n-        auto & column_with_type = block.getByName(name);\n+        auto & column_with_type = block.getByName(*it);\n         const IColumn * values_column = column_with_type.column.get();\n         MutableColumnPtr result_column = values_column->cloneEmpty();\n         result_column->reserve(block.rows());\n@@ -125,13 +123,13 @@ void TTLBlockInputStream::removeRowsWithExpiredTableTTL(Block & block)\n                 new_ttl_infos.table_ttl.update(cur_ttl);\n                 result_column->insertFrom(*values_column, i);\n             }\n-            else\n+            else if (it == column_names.begin())\n                 ++rows_removed;\n         }\n         result_columns.emplace_back(std::move(result_column));\n     }\n \n-    block = getHeader().cloneWithColumns(std::move(result_columns));\n+    block = header.cloneWithColumns(std::move(result_columns));\n }\n \n void TTLBlockInputStream::removeValuesWithExpiredColumnTTL(Block & block)\ndiff --git a/dbms/src/DataStreams/TTLBlockInputStream.h b/dbms/src/DataStreams/TTLBlockInputStream.h\nindex a95cd627bc97..de0d4f9156b9 100644\n--- a/dbms/src/DataStreams/TTLBlockInputStream.h\n+++ b/dbms/src/DataStreams/TTLBlockInputStream.h\n@@ -21,7 +21,7 @@ class TTLBlockInputStream : public IBlockInputStream\n \n     String getName() const override { return \"TTLBlockInputStream\"; }\n \n-    Block getHeader() const override;\n+    Block getHeader() const override { return header; }\n \n protected:\n     Block readImpl() override;\n@@ -47,6 +47,8 @@ class TTLBlockInputStream : public IBlockInputStream\n \n     std::unordered_map<String, String> defaults_result_column;\n     ExpressionActionsPtr defaults_expression;\n+\n+    Block header;\n private:\n     /// Removes values with expired ttl and computes new min_ttl and empty_columns for part\n     void removeValuesWithExpiredColumnTTL(Block & block);\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00933_ttl_simple.reference b/dbms/tests/queries/0_stateless/00933_ttl_simple.reference\nindex f1377e3d2205..09e5d7d1f023 100644\n--- a/dbms/tests/queries/0_stateless/00933_ttl_simple.reference\n+++ b/dbms/tests/queries/0_stateless/00933_ttl_simple.reference\n@@ -1,5 +1,6 @@\n 0\t0\n 0\t0\n+5\t6\n 2000-10-10 00:00:00\t0\n 2000-10-10 00:00:00\t0\n 2000-10-10 00:00:00\t0\ndiff --git a/dbms/tests/queries/0_stateless/00933_ttl_simple.sql b/dbms/tests/queries/0_stateless/00933_ttl_simple.sql\nindex 62b320cc0b0d..11f0055a3776 100644\n--- a/dbms/tests/queries/0_stateless/00933_ttl_simple.sql\n+++ b/dbms/tests/queries/0_stateless/00933_ttl_simple.sql\n@@ -9,6 +9,17 @@ select a, b from ttl_00933_1;\n \n drop table if exists ttl_00933_1;\n \n+create table ttl_00933_1 (d DateTime, a Int, b Int) engine = MergeTree order by toDate(d) partition by tuple() ttl d + interval 1 second;\n+insert into ttl_00933_1 values (now(), 1, 2);\n+insert into ttl_00933_1 values (now(), 3, 4);\n+insert into ttl_00933_1 values (now() + 1000, 5, 6);\n+optimize table ttl_00933_1 final; -- check ttl merge for part with both expired and unexpired values\n+select sleep(1.1) format Null; -- wait if very fast merge happen\n+optimize table ttl_00933_1 final;\n+select a, b from ttl_00933_1;\n+\n+drop table if exists ttl_00933_1;\n+\n create table ttl_00933_1 (d DateTime, a Int ttl d + interval 1 DAY) engine = MergeTree order by tuple() partition by toDayOfMonth(d);\n insert into ttl_00933_1 values (toDateTime('2000-10-10 00:00:00'), 1);\n insert into ttl_00933_1 values (toDateTime('2000-10-10 00:00:00'), 2);\n",
  "problem_statement": "Segmentation fault using TTL on MergeTree\nHi, i'm experiencing an issue with clickhouse 19.8.3.8 inside a docker container using yandex/clickhouse-server:19.8 image.\r\n\r\nI have a table with MergeTree engine and TTL for records. As soon as TTL time passes for the very first record, clickhouse constantly exits with following error:\r\n\r\n```\r\n<Error> BaseDaemon: (version 19.8.3.8 (official build)) (from thread 13) Received signal Segmentation fault (11).\r\n<Error> BaseDaemon: Address: NULL pointer.\r\n<Error> BaseDaemon: Access: read.\r\n<Error> BaseDaemon: Address not mapped to object.\r\n<Error> BaseDaemon: 0. /usr/bin/clickhouse-server(DB::Block::bytes() const+0x96) [0x6b95876]\r\n<Error> BaseDaemon: 1. /usr/bin/clickhouse-server(DB::BlockStreamProfileInfo::update(DB::Block&)+0x26) [0x6be5fc6]\r\n<Error> BaseDaemon: 2. /usr/bin/clickhouse-server(DB::IBlockInputStream::read()+0x2bb) [0x6bec9fb]\r\n<Error> BaseDaemon: 3. /usr/bin/clickhouse-server(DB::MergeTreeDataMergerMutator::mergePartsToTemporaryPart(DB::FutureMergedMutatedPart const&, DB::MergeListEntry&, long, DB::DiskSpaceMonitor::Reservation*, bool)+0x1fc6) [0x7002416]\r\n<Error> BaseDaemon: 4. /usr/bin/clickhouse-server(DB::StorageMergeTree::merge(bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, bool, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >*)+0x3bc) [0x6f43c7c]\r\n<Error> BaseDaemon: 5. /usr/bin/clickhouse-server(DB::StorageMergeTree::backgroundTask()+0x16f) [0x6f4552f]\r\n<Error> BaseDaemon: 6. /usr/bin/clickhouse-server(DB::BackgroundProcessingPool::threadFunction()+0x44e) [0x6fb1a0e]\r\n<Error> BaseDaemon: 7. /usr/bin/clickhouse-server() [0x6fb2489]\r\n<Error> BaseDaemon: 8. /usr/bin/clickhouse-server(ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)+0x1af) [0x78e6a0f]\r\n<Error> BaseDaemon: 9. /usr/bin/clickhouse-server() [0xb79aaef]\r\n<Error> BaseDaemon: 10. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76db) [0x7f7e846126db]\r\n<Warning> test.models: Removing temporary directory /var/lib/clickhouse/data/test/models/tmp_merge_all_18797_19975_229\r\n<Warning> test.source: Removing temporary directory /var/lib/clickhouse/data/test/source/tmp_merge_all_19403_19791_126\r\n<Error> Application: Listen [::]:8123 failed: 0: DNS error: EAI: -9  If it is an IPv6 or IPv4 address and your host has disabled IPv6 or IPv4, then consider to specify not disabled IPv4 or IPv6 address to listen in <listen_host> element of configuration file. Example for disabled IPv6: <listen_host>0.0.0.0</listen_host> . Example for disabled IPv4: <listen_host>::</listen_host>\r\n```\r\n\r\nThis is a table structure i have:\r\n```\r\nCREATE TABLE IF NOT EXISTS source (\r\n  time DateTime,\r\n  headers String,\r\n  driver String,\r\n  feed String,\r\n  data String\r\n) ENGINE = MergeTree()\r\nORDER BY (driver, feed, toDate(time))\r\nTTL time + INTERVAL 3 DAY;\r\n```\r\n\r\nAny ideas what might that be? Thanks\n",
  "hints_text": "It seems that it`s the same issue as #5515.",
  "created_at": "2019-07-01T13:00:13Z",
  "modified_files": [
    "dbms/src/DataStreams/TTLBlockInputStream.cpp",
    "dbms/src/DataStreams/TTLBlockInputStream.h"
  ],
  "modified_test_files": [
    "dbms/tests/queries/0_stateless/00933_ttl_simple.reference",
    "dbms/tests/queries/0_stateless/00933_ttl_simple.sql"
  ]
}