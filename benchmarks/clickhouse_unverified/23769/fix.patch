diff --git a/src/Interpreters/HashJoin.cpp b/src/Interpreters/HashJoin.cpp
index d6163ff773a3..4cbf0886d6b3 100644
--- a/src/Interpreters/HashJoin.cpp
+++ b/src/Interpreters/HashJoin.cpp
@@ -680,7 +680,19 @@ namespace
 class AddedColumns
 {
 public:
-    using TypeAndNames = std::vector<std::pair<decltype(ColumnWithTypeAndName::type), decltype(ColumnWithTypeAndName::name)>>;
+
+    struct TypeAndName
+    {
+        DataTypePtr type;
+        String name;
+        String qualified_name;
+
+        TypeAndName(DataTypePtr type_, const String & name_, const String & qualified_name_)
+            : type(type_)
+            , name(name_)
+            , qualified_name(qualified_name_)
+        {}
+    };
 
     AddedColumns(const Block & block_with_columns_to_add,
                  const Block & block,
@@ -705,27 +717,30 @@ class AddedColumns
 
         for (const auto & src_column : block_with_columns_to_add)
         {
+            /// Column names `src_column.name` and `qualified_name` can differ for StorageJoin,
+            /// because it uses not qualified right block column names
+            auto qualified_name = join.getTableJoin().renamedRightColumnName(src_column.name);
             /// Don't insert column if it's in left block
-            if (!block.has(src_column.name))
-                addColumn(src_column);
+            if (!block.has(qualified_name))
+                addColumn(src_column, qualified_name);
         }
 
         if (is_asof_join)
         {
             const ColumnWithTypeAndName & right_asof_column = join.rightAsofKeyColumn();
-            addColumn(right_asof_column);
+            addColumn(right_asof_column, right_asof_column.name);
             left_asof_key = key_columns.back();
         }
 
         for (auto & tn : type_name)
-            right_indexes.push_back(saved_block_sample.getPositionByName(tn.second));
+            right_indexes.push_back(saved_block_sample.getPositionByName(tn.name));
     }
 
     size_t size() const { return columns.size(); }
 
     ColumnWithTypeAndName moveColumn(size_t i)
     {
-        return ColumnWithTypeAndName(std::move(columns[i]), type_name[i].first, type_name[i].second);
+        return ColumnWithTypeAndName(std::move(columns[i]), type_name[i].type, type_name[i].qualified_name);
     }
 
     template <bool has_defaults>
@@ -748,7 +763,7 @@ class AddedColumns
         if (lazy_defaults_count)
         {
             for (size_t j = 0, size = right_indexes.size(); j < size; ++j)
-                JoinCommon::addDefaultValues(*columns[j], type_name[j].first, lazy_defaults_count);
+                JoinCommon::addDefaultValues(*columns[j], type_name[j].type, lazy_defaults_count);
             lazy_defaults_count = 0;
         }
     }
@@ -764,7 +779,7 @@ class AddedColumns
     bool need_filter = false;
 
 private:
-    TypeAndNames type_name;
+    std::vector<TypeAndName> type_name;
     MutableColumns columns;
     std::vector<size_t> right_indexes;
     size_t lazy_defaults_count = 0;
@@ -773,11 +788,11 @@ class AddedColumns
     ASOF::Inequality asof_inequality;
     const IColumn * left_asof_key = nullptr;
 
-    void addColumn(const ColumnWithTypeAndName & src_column)
+    void addColumn(const ColumnWithTypeAndName & src_column, const std::string & qualified_name)
     {
         columns.push_back(src_column.column->cloneEmpty());
         columns.back()->reserve(src_column.column->size());
-        type_name.emplace_back(src_column.type, src_column.name);
+        type_name.emplace_back(src_column.type, src_column.name, qualified_name);
     }
 };
 
@@ -1081,7 +1096,8 @@ void HashJoin::joinBlockImpl(
 
             const auto & col = block.getByName(left_name);
             bool is_nullable = nullable_right_side || right_key.type->isNullable();
-            block.insert(correctNullability({col.column, col.type, right_key.name}, is_nullable));
+            auto right_col_name = getTableJoin().renamedRightColumnName(right_key.name);
+            block.insert(correctNullability({col.column, col.type, right_col_name}, is_nullable));
         }
     }
     else if (has_required_right_keys)
@@ -1106,7 +1122,8 @@ void HashJoin::joinBlockImpl(
             bool is_nullable = nullable_right_side || right_key.type->isNullable();
 
             ColumnPtr thin_column = filterWithBlanks(col.column, filter);
-            block.insert(correctNullability({thin_column, col.type, right_key.name}, is_nullable, null_map_filter));
+            auto right_col_name = getTableJoin().renamedRightColumnName(right_key.name);
+            block.insert(correctNullability({thin_column, col.type, right_col_name}, is_nullable, null_map_filter));
 
             if constexpr (need_replication)
                 right_keys_to_replicate.push_back(block.getPositionByName(right_key.name));
@@ -1311,7 +1328,12 @@ void HashJoin::joinBlock(Block & block, ExtraBlockPtr & not_processed)
 
 void HashJoin::joinTotals(Block & block) const
 {
-    JoinCommon::joinTotals(totals, sample_block_with_columns_to_add, *table_join, block);
+    Block sample_right_block = sample_block_with_columns_to_add.cloneEmpty();
+    /// For StorageJoin column names isn't qualified in sample_block_with_columns_to_add
+    for (auto & col : sample_right_block)
+        col.name = getTableJoin().renamedRightColumnName(col.name);
+
+    JoinCommon::joinTotals(totals, sample_right_block, *table_join, block);
 }
 
 
diff --git a/src/Interpreters/TableJoin.cpp b/src/Interpreters/TableJoin.cpp
index f547e011a737..122e2cd64793 100644
--- a/src/Interpreters/TableJoin.cpp
+++ b/src/Interpreters/TableJoin.cpp
@@ -156,9 +156,12 @@ NameSet TableJoin::requiredRightKeys() const
 {
     NameSet required;
     for (const auto & name : key_names_right)
+    {
+        auto rename = renamedRightColumnName(name);
         for (const auto & column : columns_added_by_join)
-            if (name == column.name)
+            if (rename == column.name)
                 required.insert(name);
+    }
     return required;
 }
 
@@ -464,4 +467,11 @@ ActionsDAGPtr TableJoin::applyKeyConvertToTable(
     return dag;
 }
 
+String TableJoin::renamedRightColumnName(const String & name) const
+{
+    if (const auto it = renames.find(name); it != renames.end())
+        return it->second;
+    return name;
+}
+
 }
diff --git a/src/Interpreters/TableJoin.h b/src/Interpreters/TableJoin.h
index b75ef848f13a..dc8ebeb74131 100644
--- a/src/Interpreters/TableJoin.h
+++ b/src/Interpreters/TableJoin.h
@@ -203,6 +203,8 @@ class TableJoin
     /// Split key and other columns by keys name list
     void splitAdditionalColumns(const Block & sample_block, Block & block_keys, Block & block_others) const;
     Block getRequiredRightKeys(const Block & right_table_keys, std::vector<String> & keys_sources) const;
+
+    String renamedRightColumnName(const String & name) const;
 };
 
 }
diff --git a/src/Storages/StorageJoin.cpp b/src/Storages/StorageJoin.cpp
index d9970bab22ca..dda2cc39d6bb 100644
--- a/src/Storages/StorageJoin.cpp
+++ b/src/Storages/StorageJoin.cpp
@@ -92,7 +92,9 @@ HashJoinPtr StorageJoin::getJoinLocked(std::shared_ptr<TableJoin> analyzed_join)
 
     /// TODO: check key columns
 
-    /// Some HACK to remove wrong names qualifiers: table.column -> column.
+    /// Set names qualifiers: table.column -> column
+    /// It's required because storage join stores non-qualified names
+    /// Qualifies will be added by join implementation (HashJoin)
     analyzed_join->setRightKeys(key_names);
 
     HashJoinPtr join_clone = std::make_shared<HashJoin>(analyzed_join, metadata_snapshot->getSampleBlock().sortColumns());
