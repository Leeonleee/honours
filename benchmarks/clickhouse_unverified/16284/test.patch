diff --git a/tests/queries/0_stateless/01532_primary_key_without_order_by_zookeeper.reference b/tests/queries/0_stateless/01532_primary_key_without_order_by_zookeeper.reference
new file mode 100644
index 000000000000..02d4fe64f8d5
--- /dev/null
+++ b/tests/queries/0_stateless/01532_primary_key_without_order_by_zookeeper.reference
@@ -0,0 +1,23 @@
+CREATE TABLE default.merge_tree_pk
(
    `key` UInt64,
    `value` String
)
ENGINE = ReplacingMergeTree()
PRIMARY KEY key
ORDER BY key
SETTINGS index_granularity = 8192
+1	a
+2	b
+1	c
+2	b
+CREATE TABLE default.merge_tree_pk_sql
(
    `key` UInt64,
    `value` String
)
ENGINE = ReplacingMergeTree()
PRIMARY KEY key
ORDER BY key
SETTINGS index_granularity = 8192
+1	a
+2	b
+1	c
+2	b
+1	c	0
+2	e	555
+2	b	0
+CREATE TABLE default.merge_tree_pk_sql
(
    `key` UInt64,
    `value` String,
    `key2` UInt64
)
ENGINE = ReplacingMergeTree()
PRIMARY KEY key
ORDER BY (key, key2)
SETTINGS index_granularity = 8192
+CREATE TABLE default.replicated_merge_tree_pk_sql
(
    `key` UInt64,
    `value` String
)
ENGINE = ReplicatedReplacingMergeTree(\'/clickhouse/test/01532_primary_key_without\', \'r1\')
PRIMARY KEY key
ORDER BY key
SETTINGS index_granularity = 8192
+1	a
+2	b
+1	c
+2	b
+1	c	0
+2	e	555
+2	b	0
+CREATE TABLE default.replicated_merge_tree_pk_sql
(
    `key` UInt64,
    `value` String,
    `key2` UInt64
)
ENGINE = ReplicatedReplacingMergeTree(\'/clickhouse/test/01532_primary_key_without\', \'r1\')
PRIMARY KEY key
ORDER BY (key, key2)
SETTINGS index_granularity = 8192
diff --git a/tests/queries/0_stateless/01532_primary_key_without_order_by_zookeeper.sql b/tests/queries/0_stateless/01532_primary_key_without_order_by_zookeeper.sql
new file mode 100644
index 000000000000..31294d8ebbc3
--- /dev/null
+++ b/tests/queries/0_stateless/01532_primary_key_without_order_by_zookeeper.sql
@@ -0,0 +1,100 @@
+DROP TABLE IF EXISTS merge_tree_pk;
+
+CREATE TABLE merge_tree_pk
+(
+    key UInt64,
+    value String
+)
+ENGINE = ReplacingMergeTree()
+PRIMARY KEY key;
+
+SHOW CREATE TABLE merge_tree_pk;
+
+INSERT INTO merge_tree_pk VALUES (1, 'a');
+INSERT INTO merge_tree_pk VALUES (2, 'b');
+
+SELECT * FROM merge_tree_pk ORDER BY key;
+
+INSERT INTO merge_tree_pk VALUES (1, 'c');
+
+DETACH TABLE merge_tree_pk;
+ATTACH TABLE merge_tree_pk;
+
+SELECT * FROM merge_tree_pk FINAL ORDER BY key;
+
+DROP TABLE IF EXISTS merge_tree_pk;
+
+DROP TABLE IF EXISTS merge_tree_pk_sql;
+
+CREATE TABLE merge_tree_pk_sql
+(
+    key UInt64,
+    value String,
+    PRIMARY KEY (key)
+)
+ENGINE = ReplacingMergeTree();
+
+SHOW CREATE TABLE merge_tree_pk_sql;
+
+INSERT INTO merge_tree_pk_sql VALUES (1, 'a');
+INSERT INTO merge_tree_pk_sql VALUES (2, 'b');
+
+SELECT * FROM merge_tree_pk_sql ORDER BY key;
+
+INSERT INTO merge_tree_pk_sql VALUES (1, 'c');
+
+DETACH TABLE merge_tree_pk_sql;
+ATTACH TABLE merge_tree_pk_sql;
+
+SELECT * FROM merge_tree_pk_sql FINAL ORDER BY key;
+
+ALTER TABLE merge_tree_pk_sql ADD COLUMN key2 UInt64, MODIFY ORDER BY (key, key2);
+
+INSERT INTO merge_tree_pk_sql VALUES (2, 'd', 555);
+
+INSERT INTO merge_tree_pk_sql VALUES (2, 'e', 555);
+
+SELECT * FROM merge_tree_pk_sql FINAL ORDER BY key;
+
+SHOW CREATE TABLE merge_tree_pk_sql;
+
+DROP TABLE IF EXISTS merge_tree_pk_sql;
+
+DROP TABLE IF EXISTS replicated_merge_tree_pk_sql;
+
+CREATE TABLE replicated_merge_tree_pk_sql
+(
+    key UInt64,
+    value String,
+    PRIMARY KEY (key)
+)
+ENGINE = ReplicatedReplacingMergeTree('/clickhouse/test/01532_primary_key_without', 'r1');
+
+SHOW CREATE TABLE replicated_merge_tree_pk_sql;
+
+INSERT INTO replicated_merge_tree_pk_sql VALUES (1, 'a');
+INSERT INTO replicated_merge_tree_pk_sql VALUES (2, 'b');
+
+SELECT * FROM replicated_merge_tree_pk_sql ORDER BY key;
+
+INSERT INTO replicated_merge_tree_pk_sql VALUES (1, 'c');
+
+DETACH TABLE replicated_merge_tree_pk_sql;
+ATTACH TABLE replicated_merge_tree_pk_sql;
+
+SELECT * FROM replicated_merge_tree_pk_sql FINAL ORDER BY key;
+
+ALTER TABLE replicated_merge_tree_pk_sql ADD COLUMN key2 UInt64, MODIFY ORDER BY (key, key2);
+
+INSERT INTO replicated_merge_tree_pk_sql VALUES (2, 'd', 555);
+
+INSERT INTO replicated_merge_tree_pk_sql VALUES (2, 'e', 555);
+
+SELECT * FROM replicated_merge_tree_pk_sql FINAL ORDER BY key;
+
+DETACH TABLE replicated_merge_tree_pk_sql;
+ATTACH TABLE replicated_merge_tree_pk_sql;
+
+SHOW CREATE TABLE replicated_merge_tree_pk_sql;
+
+DROP TABLE IF EXISTS replicated_merge_tree_pk_sql;
