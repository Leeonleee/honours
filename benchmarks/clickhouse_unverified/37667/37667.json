{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 37667,
  "instance_id": "ClickHouse__ClickHouse-37667",
  "issue_numbers": [
    "37360"
  ],
  "base_commit": "18bda56e4c572b00f4f82ad9d2318f54e699e0df",
  "patch": "diff --git a/src/Columns/IColumn.h b/src/Columns/IColumn.h\nindex f62f6c444b3e..a99d4172e5bb 100644\n--- a/src/Columns/IColumn.h\n+++ b/src/Columns/IColumn.h\n@@ -90,7 +90,7 @@ class IColumn : public COW<IColumn>\n     /// Creates column with the same type and specified size.\n     /// If size is less current size, then data is cut.\n     /// If size is greater, than default values are appended.\n-    [[nodiscard]] virtual MutablePtr cloneResized(size_t /*size*/) const { throw Exception(\"Cannot cloneResized() column \" + getName(), ErrorCodes::NOT_IMPLEMENTED); }\n+    [[nodiscard]] virtual MutablePtr cloneResized(size_t /*size*/) const { throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Cannot cloneResized() column {}\", getName()); }\n \n     /// Returns number of values in column.\n     [[nodiscard]] virtual size_t size() const = 0;\ndiff --git a/src/DataTypes/IDataType.cpp b/src/DataTypes/IDataType.cpp\nindex 0976233c031f..f2bb878a5330 100644\n--- a/src/DataTypes/IDataType.cpp\n+++ b/src/DataTypes/IDataType.cpp\n@@ -1,3 +1,4 @@\n+#include <cstddef>\n #include <Columns/IColumn.h>\n #include <Columns/ColumnConst.h>\n #include <Columns/ColumnSparse.h>\n@@ -162,6 +163,12 @@ void IDataType::insertDefaultInto(IColumn & column) const\n     column.insertDefault();\n }\n \n+void IDataType::insertManyDefaultsInto(IColumn & column, size_t n) const\n+{\n+    for (size_t i = 0; i < n; ++i)\n+        insertDefaultInto(column);\n+}\n+\n void IDataType::setCustomization(DataTypeCustomDescPtr custom_desc_) const\n {\n     /// replace only if not null\ndiff --git a/src/DataTypes/IDataType.h b/src/DataTypes/IDataType.h\nindex fc9e50dc55ba..420ef61a13fe 100644\n--- a/src/DataTypes/IDataType.h\n+++ b/src/DataTypes/IDataType.h\n@@ -159,6 +159,8 @@ class IDataType : private boost::noncopyable, public std::enable_shared_from_thi\n       */\n     virtual void insertDefaultInto(IColumn & column) const;\n \n+    void insertManyDefaultsInto(IColumn & column, size_t n) const;\n+\n     /// Checks that two instances belong to the same type\n     virtual bool equals(const IDataType & rhs) const = 0;\n \ndiff --git a/src/Processors/QueryPlan/AggregatingStep.cpp b/src/Processors/QueryPlan/AggregatingStep.cpp\nindex 4114eff5c56c..17a0498fb7ee 100644\n--- a/src/Processors/QueryPlan/AggregatingStep.cpp\n+++ b/src/Processors/QueryPlan/AggregatingStep.cpp\n@@ -241,7 +241,9 @@ void AggregatingStep::transformPipeline(QueryPipelineBuilder & pipeline, const B\n                     if (missign_column_index < missing_columns.size() && missing_columns[missign_column_index] == i)\n                     {\n                         ++missign_column_index;\n-                        auto column = ColumnConst::create(col.column->cloneResized(1), 0);\n+                        auto column_with_default = col.column->cloneEmpty();\n+                        col.type->insertDefaultInto(*column_with_default);\n+                        auto column = ColumnConst::create(std::move(column_with_default), 0);\n                         const auto * node = &dag->addColumn({ColumnPtr(std::move(column)), col.type, col.name});\n                         node = &dag->materializeNode(*node);\n                         index.push_back(node);\ndiff --git a/src/Processors/Transforms/CubeTransform.cpp b/src/Processors/Transforms/CubeTransform.cpp\nindex c699e724ffc6..83ed346dabe9 100644\n--- a/src/Processors/Transforms/CubeTransform.cpp\n+++ b/src/Processors/Transforms/CubeTransform.cpp\n@@ -35,6 +35,8 @@ void CubeTransform::consume(Chunk chunk)\n     consumed_chunks.emplace_back(std::move(chunk));\n }\n \n+MutableColumnPtr getColumnWithDefaults(Block const & header, size_t key, size_t n);\n+\n Chunk CubeTransform::generate()\n {\n     if (!consumed_chunks.empty())\n@@ -53,8 +55,9 @@ Chunk CubeTransform::generate()\n         current_zero_columns.clear();\n         current_zero_columns.reserve(keys.size());\n \n+        auto const & input_header = getInputPort().getHeader();\n         for (auto key : keys)\n-            current_zero_columns.emplace_back(current_columns[key]->cloneEmpty()->cloneResized(num_rows));\n+            current_zero_columns.emplace_back(getColumnWithDefaults(input_header, key, num_rows));\n     }\n \n     auto gen_chunk = std::move(cube_chunk);\ndiff --git a/src/Processors/Transforms/RollupTransform.cpp b/src/Processors/Transforms/RollupTransform.cpp\nindex db60b99102d8..b69a691323c9 100644\n--- a/src/Processors/Transforms/RollupTransform.cpp\n+++ b/src/Processors/Transforms/RollupTransform.cpp\n@@ -29,6 +29,14 @@ Chunk RollupTransform::merge(Chunks && chunks, bool final)\n     return Chunk(rollup_block.getColumns(), num_rows);\n }\n \n+MutableColumnPtr getColumnWithDefaults(Block const & header, size_t key, size_t n)\n+{\n+    auto const & col = header.getByPosition(key);\n+    auto result_column = col.column->cloneEmpty();\n+    col.type->insertManyDefaultsInto(*result_column, n);\n+    return result_column;\n+}\n+\n Chunk RollupTransform::generate()\n {\n     if (!consumed_chunks.empty())\n@@ -51,7 +59,7 @@ Chunk RollupTransform::generate()\n \n         auto num_rows = gen_chunk.getNumRows();\n         auto columns = gen_chunk.getColumns();\n-        columns[key] = columns[key]->cloneEmpty()->cloneResized(num_rows);\n+        columns[key] = getColumnWithDefaults(getInputPort().getHeader(), key, num_rows);\n \n         Chunks chunks;\n         chunks.emplace_back(std::move(columns), num_rows);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02313_group_by_modifiers_with_non-default_types.reference b/tests/queries/0_stateless/02313_group_by_modifiers_with_non-default_types.reference\nnew file mode 100644\nindex 000000000000..183c63d12222\n--- /dev/null\n+++ b/tests/queries/0_stateless/02313_group_by_modifiers_with_non-default_types.reference\n@@ -0,0 +1,113 @@\n+-- { echoOn }\n+SELECT\n+    count() as d, a, b, c\n+FROM test02313\n+GROUP BY ROLLUP(a, b, c)\n+ORDER BY d, a, b, c;\n+1\tone\tdefault\t0\n+1\tone\tdefault\t2\n+1\tone\tdefault\t4\n+1\tone\tdefault\t6\n+1\tone\tdefault\t8\n+1\ttwo\tnon-default\t1\n+1\ttwo\tnon-default\t3\n+1\ttwo\tnon-default\t5\n+1\ttwo\tnon-default\t7\n+1\ttwo\tnon-default\t9\n+5\tone\tdefault\t0\n+5\tone\tdefault\t0\n+5\ttwo\tdefault\t0\n+5\ttwo\tnon-default\t0\n+10\tone\tdefault\t0\n+SELECT\n+    count() as d, a, b, c\n+FROM test02313\n+GROUP BY CUBE(a, b, c)\n+ORDER BY d, a, b, c;\n+1\tone\tdefault\t0\n+1\tone\tdefault\t0\n+1\tone\tdefault\t0\n+1\tone\tdefault\t0\n+1\tone\tdefault\t1\n+1\tone\tdefault\t2\n+1\tone\tdefault\t2\n+1\tone\tdefault\t2\n+1\tone\tdefault\t2\n+1\tone\tdefault\t3\n+1\tone\tdefault\t4\n+1\tone\tdefault\t4\n+1\tone\tdefault\t4\n+1\tone\tdefault\t4\n+1\tone\tdefault\t5\n+1\tone\tdefault\t6\n+1\tone\tdefault\t6\n+1\tone\tdefault\t6\n+1\tone\tdefault\t6\n+1\tone\tdefault\t7\n+1\tone\tdefault\t8\n+1\tone\tdefault\t8\n+1\tone\tdefault\t8\n+1\tone\tdefault\t8\n+1\tone\tdefault\t9\n+1\tone\tnon-default\t1\n+1\tone\tnon-default\t3\n+1\tone\tnon-default\t5\n+1\tone\tnon-default\t7\n+1\tone\tnon-default\t9\n+1\ttwo\tdefault\t1\n+1\ttwo\tdefault\t3\n+1\ttwo\tdefault\t5\n+1\ttwo\tdefault\t7\n+1\ttwo\tdefault\t9\n+1\ttwo\tnon-default\t1\n+1\ttwo\tnon-default\t3\n+1\ttwo\tnon-default\t5\n+1\ttwo\tnon-default\t7\n+1\ttwo\tnon-default\t9\n+5\tone\tdefault\t0\n+5\tone\tdefault\t0\n+5\tone\tdefault\t0\n+5\tone\tnon-default\t0\n+5\ttwo\tdefault\t0\n+5\ttwo\tnon-default\t0\n+10\tone\tdefault\t0\n+SELECT\n+    count() as d, a, b, c\n+FROM test02313\n+GROUP BY GROUPING SETS\n+    (\n+        (c),\n+        (a, c),\n+        (b, c)\n+    )\n+ORDER BY d, a, b, c;\n+1\tone\tdefault\t0\n+1\tone\tdefault\t0\n+1\tone\tdefault\t0\n+1\tone\tdefault\t1\n+1\tone\tdefault\t2\n+1\tone\tdefault\t2\n+1\tone\tdefault\t2\n+1\tone\tdefault\t3\n+1\tone\tdefault\t4\n+1\tone\tdefault\t4\n+1\tone\tdefault\t4\n+1\tone\tdefault\t5\n+1\tone\tdefault\t6\n+1\tone\tdefault\t6\n+1\tone\tdefault\t6\n+1\tone\tdefault\t7\n+1\tone\tdefault\t8\n+1\tone\tdefault\t8\n+1\tone\tdefault\t8\n+1\tone\tdefault\t9\n+1\tone\tnon-default\t1\n+1\tone\tnon-default\t3\n+1\tone\tnon-default\t5\n+1\tone\tnon-default\t7\n+1\tone\tnon-default\t9\n+1\ttwo\tdefault\t1\n+1\ttwo\tdefault\t3\n+1\ttwo\tdefault\t5\n+1\ttwo\tdefault\t7\n+1\ttwo\tdefault\t9\ndiff --git a/tests/queries/0_stateless/02313_group_by_modifiers_with_non-default_types.sql b/tests/queries/0_stateless/02313_group_by_modifiers_with_non-default_types.sql\nnew file mode 100644\nindex 000000000000..d30cc9304296\n--- /dev/null\n+++ b/tests/queries/0_stateless/02313_group_by_modifiers_with_non-default_types.sql\n@@ -0,0 +1,39 @@\n+DROP TABLE IF EXISTS test02313;\n+\n+CREATE TABLE test02313\n+(\n+    a Enum('one' = 1, 'two' = 2),\n+    b Enum('default' = 0, 'non-default' = 1),\n+    c UInt8\n+)\n+ENGINE = MergeTree()\n+ORDER BY (a, b, c);\n+\n+INSERT INTO test02313 SELECT number % 2 + 1 AS a, number % 2 AS b, number FROM numbers(10);\n+\n+-- { echoOn }\n+SELECT\n+    count() as d, a, b, c\n+FROM test02313\n+GROUP BY ROLLUP(a, b, c)\n+ORDER BY d, a, b, c;\n+\n+SELECT\n+    count() as d, a, b, c\n+FROM test02313\n+GROUP BY CUBE(a, b, c)\n+ORDER BY d, a, b, c;\n+\n+SELECT\n+    count() as d, a, b, c\n+FROM test02313\n+GROUP BY GROUPING SETS\n+    (\n+        (c),\n+        (a, c),\n+        (b, c)\n+    )\n+ORDER BY d, a, b, c;\n+\n+-- { echoOff }\n+DROP TABLE test02313;\n",
  "problem_statement": "Enum without zero value is not supported in WITH CUBE, WITH ROLLUP and GROUPING SETS\n```\r\nplay-eu :) SELECT actor_login, event_type, count() FROM github_events WHERE repo_name = 'ClickHouse/ClickHouse' GROUP BY actor_login, event_type WITH ROLLUP ORDER BY count() DESC LIMIT 10\r\n\r\nSELECT\r\n    actor_login,\r\n    event_type,\r\n    count()\r\nFROM github_events\r\nWHERE repo_name = 'ClickHouse/ClickHouse'\r\nGROUP BY\r\n    actor_login,\r\n    event_type\r\n    WITH ROLLUP\r\nORDER BY count() DESC\r\nLIMIT 10\r\n\r\nQuery id: 1b7baa06-2ee6-4ae8-b1ed-4c9ecb21514c\r\n\r\nOk.\r\nException on client:\r\nCode: 36. DB::Exception: Code: 36. DB::Exception: Unexpected value 0 in enum. (BAD_ARGUMENTS) (version 22.5.1.1984 (official build)). (BAD_ARGUMENTS)\r\n```\n",
  "hints_text": "",
  "created_at": "2022-05-31T00:15:01Z",
  "modified_files": [
    "src/Columns/IColumn.h",
    "src/DataTypes/IDataType.cpp",
    "src/DataTypes/IDataType.h",
    "src/Processors/QueryPlan/AggregatingStep.cpp",
    "src/Processors/Transforms/CubeTransform.cpp",
    "src/Processors/Transforms/RollupTransform.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02313_group_by_modifiers_with_non-default_types.reference",
    "b/tests/queries/0_stateless/02313_group_by_modifiers_with_non-default_types.sql"
  ]
}