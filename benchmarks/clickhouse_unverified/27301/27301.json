{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 27301,
  "instance_id": "ClickHouse__ClickHouse-27301",
  "issue_numbers": [
    "26522"
  ],
  "base_commit": "9f0b5a5937c0a43f0fdd778323cd9ecfdc92bf97",
  "patch": "diff --git a/src/Processors/QueryPlan/ReadFromMergeTree.cpp b/src/Processors/QueryPlan/ReadFromMergeTree.cpp\nindex f8c12449c7e6..4276160f514d 100644\n--- a/src/Processors/QueryPlan/ReadFromMergeTree.cpp\n+++ b/src/Processors/QueryPlan/ReadFromMergeTree.cpp\n@@ -992,17 +992,14 @@ void ReadFromMergeTree::initializePipeline(QueryPipeline & pipeline, const Build\n         });\n     }\n \n-    Block cur_header = result_projection ? result_projection->getResultColumns()\n-                                         : pipe.getHeader();\n+    Block cur_header = pipe.getHeader();\n \n-    auto append_actions = [&result_projection, &cur_header](ActionsDAGPtr actions)\n+    auto append_actions = [&result_projection](ActionsDAGPtr actions)\n     {\n         if (!result_projection)\n             result_projection = std::move(actions);\n         else\n             result_projection = ActionsDAG::merge(std::move(*result_projection), std::move(*actions));\n-\n-        cur_header = result_projection->getResultColumns();\n     };\n \n     /// By the way, if a distributed query or query to a Merge table is made, then the `_sample_factor` column can have different values.\n@@ -1017,6 +1014,9 @@ void ReadFromMergeTree::initializePipeline(QueryPipeline & pipeline, const Build\n         append_actions(std::move(adding_column));\n     }\n \n+    if (result_projection)\n+        cur_header = result_projection->updateHeader(cur_header);\n+\n     /// Extra columns may be returned (for example, if sampling is used).\n     /// Convert pipe to step header structure.\n     if (!isCompatibleHeader(cur_header, getOutputStream().header))\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02002_sampling_and_unknown_column_bug.reference b/tests/queries/0_stateless/02002_sampling_and_unknown_column_bug.reference\nnew file mode 100644\nindex 000000000000..9315e86b328a\n--- /dev/null\n+++ b/tests/queries/0_stateless/02002_sampling_and_unknown_column_bug.reference\n@@ -0,0 +1,2 @@\n+1\n+1\t1\t1\ndiff --git a/tests/queries/0_stateless/02002_sampling_and_unknown_column_bug.sql b/tests/queries/0_stateless/02002_sampling_and_unknown_column_bug.sql\nnew file mode 100644\nindex 000000000000..838d7a5526bf\n--- /dev/null\n+++ b/tests/queries/0_stateless/02002_sampling_and_unknown_column_bug.sql\n@@ -0,0 +1,20 @@\n+drop table if exists sessions;\n+CREATE TABLE sessions\n+(\n+  `user_id` UInt64\n+)\n+ENGINE = MergeTree\n+ORDER BY user_id \n+SAMPLE BY user_id;\n+\n+insert into sessions values(1);\n+\n+SELECT\n+    sum(user_id * _sample_factor) \n+FROM sessions\n+SAMPLE 10000000;\n+\n+SELECT\n+    uniq(user_id) a,  min(_sample_factor) x,  a*x\n+FROM sessions\n+SAMPLE 10000000;\n",
  "problem_statement": "21.7+ Cannot find column in source stream in a query with sampling\n21.7.3 throws an exception if `_sample_factor` is used in a query:\r\n```\r\nCREATE TABLE sessions\r\n(\r\n  `user_id` UInt64\r\n)\r\nENGINE = MergeTree\r\nORDER BY user_id \r\nSAMPLE BY user_id;\r\n\r\ninsert into sessions values(1);\r\n\r\nSELECT\r\n    sum(user_id * _sample_factor) \r\nFROM sessions\r\nSAMPLE 10000000\r\n\r\nDB::Exception: Cannot find column `user_id` in source stream (version 21.8.1.7409 (official build))\r\n\r\nSELECT\r\n    sum(user_id) \r\nFROM sessions\r\nSAMPLE 10000000\r\n\r\nsum(user_id)\r\n------------\r\n           1\r\n```\r\nNo exception on 21.6.5\n",
  "hints_text": "Full trace:\r\n\r\n```\r\n<Error> TCPHandler: Code: 8. DB::Exception: Cannot find column `user_id` in source stream. (THERE_IS_NO_COLUMN), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x10e193 in gh/ch/build/release-shared-none/contrib/poco-cmake/Foundation/lib_poco_foundation.so\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x10c13a in /home/ilezhankin/gh/ch/build/release-shared-none/src/libclickhouse_common_io.so\r\n2. DB::ActionsDAG::makeConvertingActions(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, DB::ActionsDAG::MatchColumnsMode, bool, bool, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >*) @ 0x5377a0 in gh/ch/build/release-shared-none/src/libclickhouse_interpreters.so\r\n3. DB::ReadFromMergeTree::initializePipeline(DB::QueryPipeline&, DB::BuildQueryPipelineSettings const&) @ 0xa7dc7 in gh/ch/build/release-shared-none/src/libclickhouse_processors_queryplan.so\r\n4. DB::ISourceStep::updatePipeline(std::__1::vector<std::__1::unique_ptr<DB::QueryPipeline, std::__1::default_delete<DB::QueryPipeline> >, std::__1::allocator<std::__1::unique_ptr<DB::QueryPipeline, std::__1::default_delete<DB::QueryPipeline> > > >, DB::BuildQueryPipelineSettings const&) @ 0x8a384 in gh/ch/build/release-shared-none/src/libclickhouse_processors_queryplan.so\r\n5. DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x9589a in gh/ch/build/release-shared-none/src/libclickhouse_processors_queryplan.so\r\n6. DB::InterpreterSelectWithUnionQuery::execute() @ 0xc65297 in gh/ch/build/release-shared-none/src/libclickhouse_interpreters.so\r\n7. DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*) @ 0xdcb6cb in gh/ch/build/release-shared-none/src/libclickhouse_interpreters.so\r\n8. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, bool) @ 0xdca31f in gh/ch/build/release-shared-none/src/libclickhouse_interpreters.so\r\n9. DB::TCPHandler::runImpl() @ 0x117701 in gh/ch/build/release-shared-none/src/libclickhouse_server.so\r\n10. DB::TCPHandler::run() @ 0x122e59 in gh/ch/build/release-shared-none/src/libclickhouse_server.so\r\n11. Poco::Net::TCPServerConnection::start() @ 0x11fea7 in gh/ch/build/release-shared-none/contrib/poco-cmake/Net/lib_poco_net.so\r\n12. Poco::Net::TCPServerDispatcher::run() @ 0x120362 in gh/ch/build/release-shared-none/contrib/poco-cmake/Net/lib_poco_net.so\r\n13. Poco::PooledThread::run() @ 0x183439 in gh/ch/build/release-shared-none/contrib/poco-cmake/Foundation/lib_poco_foundation.so\r\n14. Poco::ThreadImpl::runnableEntry(void*) @ 0x181069 in gh/ch/build/release-shared-none/contrib/poco-cmake/Foundation/lib_poco_foundation.so\r\n15. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n16. /build/glibc-S9d2JN/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97: __clone @ 0x12171f in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so\r\n```\n```\r\nSELECT\r\n    uniq(user_id) * _sample_factor\r\nFROM sessions\r\nSAMPLE 10000000\r\n\r\n DB::Exception: Column `_sample_factor` is not under aggregate function and not in GROUP BY\r\n```\r\n\r\n```\r\nSELECT\r\n    uniq(user_id) a,  min(_sample_factor) x,  a*x\r\nFROM sessions\r\nSAMPLE 10000000\r\n\r\nDB::Exception: Cannot find column `user_id` in source stream.\r\n```\r\n\r\n",
  "created_at": "2021-08-06T14:31:03Z",
  "modified_files": [
    "src/Processors/QueryPlan/ReadFromMergeTree.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02002_sampling_and_unknown_column_bug.reference",
    "b/tests/queries/0_stateless/02002_sampling_and_unknown_column_bug.sql"
  ]
}