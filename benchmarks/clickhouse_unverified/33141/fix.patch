diff --git a/docs/en/sql-reference/statements/insert-into.md b/docs/en/sql-reference/statements/insert-into.md
index c36f1b1c9cf3..f8eefad7051b 100644
--- a/docs/en/sql-reference/statements/insert-into.md
+++ b/docs/en/sql-reference/statements/insert-into.md
@@ -55,7 +55,11 @@ SELECT * FROM insert_select_testtable;
 └───┴───┴───┘
 ```
 
-In this example, we see that the second inserted row has `a` and `c` columns filled by the passed values, and `b` filled with value by default.
+In this example, we see that the second inserted row has `a` and `c` columns filled by the passed values, and `b` filled with value by default. It is also possible to use `DEFAULT` keyword to insert default values:
+
+``` sql
+INSERT INTO insert_select_testtable VALUES (1, DEFAULT, 1) ;
+```
 
 If a list of columns does not include all existing columns, the rest of the columns are filled with:
 
diff --git a/docs/ru/sql-reference/statements/insert-into.md b/docs/ru/sql-reference/statements/insert-into.md
index 21fef0e02869..a2d9ebaf68e5 100644
--- a/docs/ru/sql-reference/statements/insert-into.md
+++ b/docs/ru/sql-reference/statements/insert-into.md
@@ -55,7 +55,12 @@ SELECT * FROM insert_select_testtable
 └───┴───┴───┘
 ```
 
-В этом примере мы видим, что вторая строка содержит столбцы `a` и `c`, заполненные переданными значениями и `b`, заполненный значением по умолчанию.
+В этом примере мы видим, что вторая строка содержит столбцы `a` и `c`, заполненные переданными значениями и `b`, заполненный значением по умолчанию. Также можно использовать ключевое слово `DEFAULT` для вставки значений по умолчанию:
+
+``` sql
+INSERT INTO insert_select_testtable VALUES (1, DEFAULT, 1) ;
+```
+
 Если список столбцов не включает все существующие столбцы, то все остальные столбцы заполняются следующим образом:
 
 -   Значения, вычисляемые из `DEFAULT` выражений, указанных в определении таблицы.
diff --git a/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp b/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp
index adf6d2e8a253..afe2d6a9f304 100644
--- a/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp
+++ b/src/Processors/Formats/Impl/ValuesBlockInputFormat.cpp
@@ -176,12 +176,20 @@ bool ValuesBlockInputFormat::tryReadValue(IColumn & column, size_t column_idx)
     try
     {
         bool read = true;
-        const auto & type = types[column_idx];
-        const auto & serialization = serializations[column_idx];
-        if (format_settings.null_as_default && !type->isNullable() && !type->isLowCardinalityNullable())
-            read = SerializationNullable::deserializeTextQuotedImpl(column, *buf, format_settings, serialization);
+        if (bool default_value = checkStringByFirstCharacterAndAssertTheRestCaseInsensitive("DEFAULT", *buf); default_value)
+        {
+            column.insertDefault();
+            read = false;
+        }
         else
-            serialization->deserializeTextQuoted(column, *buf, format_settings);
+        {
+            const auto & type = types[column_idx];
+            const auto & serialization = serializations[column_idx];
+            if (format_settings.null_as_default && !type->isNullable() && !type->isLowCardinalityNullable())
+                read = SerializationNullable::deserializeTextQuotedImpl(column, *buf, format_settings, serialization);
+            else
+                serialization->deserializeTextQuoted(column, *buf, format_settings);
+        }
 
         rollback_on_exception = true;
 
