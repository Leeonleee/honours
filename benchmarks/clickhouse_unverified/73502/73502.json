{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 73502,
  "instance_id": "ClickHouse__ClickHouse-73502",
  "issue_numbers": [
    "68239"
  ],
  "base_commit": "a23c95c75b4d73eb6ecc7c2a415c7c0893a38da1",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp b/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp\nindex 58b231520165..8cda97a514c1 100644\n--- a/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp\n+++ b/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp\n@@ -92,13 +92,14 @@ size_t MergeTreeDataSelectExecutor::getApproximateTotalRowsToRead(\n     /// We will find out how many rows we would have read without sampling.\n     LOG_DEBUG(log, \"Preliminary index scan with condition: {}\", key_condition.toString());\n \n+    MarkRanges exact_ranges;\n     for (const auto & part : parts)\n     {\n-        MarkRanges exact_ranges;\n-        markRangesFromPKRange(part, metadata_snapshot, key_condition, {}, &exact_ranges, settings, log);\n-        for (const auto & range : exact_ranges)\n+        MarkRanges part_ranges = markRangesFromPKRange(part, metadata_snapshot, key_condition, {}, &exact_ranges, settings, log);\n+        for (const auto & range : part_ranges)\n             rows_count += part->index_granularity.getRowsCountInRange(range);\n     }\n+    UNUSED(exact_ranges);\n \n     return rows_count;\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03227_test_sample_n.reference b/tests/queries/0_stateless/03227_test_sample_n.reference\nnew file mode 100644\nindex 000000000000..bc051d8d8165\n--- /dev/null\n+++ b/tests/queries/0_stateless/03227_test_sample_n.reference\n@@ -0,0 +1,2 @@\n+50000\n+1\ndiff --git a/tests/queries/0_stateless/03227_test_sample_n.sql b/tests/queries/0_stateless/03227_test_sample_n.sql\nnew file mode 100644\nindex 000000000000..d38bdd0a3eec\n--- /dev/null\n+++ b/tests/queries/0_stateless/03227_test_sample_n.sql\n@@ -0,0 +1,20 @@\n+CREATE TABLE IF NOT EXISTS table_name\n+(\n+id UInt64\n+)\n+ENGINE = MergeTree()\n+ORDER BY cityHash64(id)\n+SAMPLE BY cityHash64(id);\n+\n+INSERT INTO table_name SELECT rand() from system.numbers limit 10000;\n+INSERT INTO table_name SELECT rand() from system.numbers limit 10000;\n+INSERT INTO table_name SELECT rand() from system.numbers limit 10000;\n+INSERT INTO table_name SELECT rand() from system.numbers limit 10000;\n+INSERT INTO table_name SELECT rand() from system.numbers limit 10000;\n+\n+select count() from table_name;\n+SELECT count() < 50 * 5 FROM (\n+\tSELECT * FROM table_name SAMPLE 50\n+);\n+\n+DROP TABLE table_name;\n",
  "problem_statement": "SAMPLE n (n is integer) doesn't work\n**Describe what's wrong**\r\n\r\nSAMPLE n (Here n is a sufficiently large integer) doesn't work\r\n\r\nI can't use reproducer because SAMPLE n works only with huge number of rows (100k+)\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\nYes, including head build at the moment of creating this issue\r\n\r\n**How to reproduce**\r\n\r\n* clickhouse version is 24.6 or 24.7\r\n* Non-default settings - no\r\n* `CREATE TABLE` statement:\r\n```\r\n    CREATE TABLE IF NOT EXISTS table_name\r\n    (\r\n        id UInt64\r\n    )\r\n    ENGINE = MergeTree()\r\n    ORDER BY cityHash64(id)\r\n    SAMPLE BY cityHash64(id);\r\n```\r\n\r\n* Insert 10M records with random id (random is mandatory)\r\n* Queries to run that lead to an unexpected result:\r\n```\r\nSELECT count() FROM (\r\n\tSELECT * FROM table_name SAMPLE 1_000_000\r\n)\r\n```\r\nIt returns 10,000,000, but should approximately 1,000,000\r\n\r\n**Expected behavior**\r\n\r\nAccording to the docs: The query is executed on a sample of at least n rows (but not significantly more than this)\r\nIt should return not significantly more than this 1,000,000\r\n\r\n**Additional context**\r\n\r\nOn version 23.5 and below it works As I expected\r\nSAMPLE k (k is between 0 and 1) - works the same way as before\n",
  "hints_text": "I've reproduced it on [fiddle latest version](https://fiddle.clickhouse.com/102031f7-00ed-4597-b4e3-da8e9237d1f7). \r\nSeems to be independent from analyzer and selecting `count()` on the column, not full result.\r\nFor reference. - working correctly on [23.5.5](https://fiddle.clickhouse.com/eff14693-84de-4c55-a562-a0c798caeba5)\r\n",
  "created_at": "2024-12-17T23:09:05Z"
}