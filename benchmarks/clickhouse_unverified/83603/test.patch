diff --git a/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.reference b/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.reference
index 4aac44967478..cb7f8a7ca28c 100644
--- a/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.reference
+++ b/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.reference
@@ -1,24 +1,24 @@
 TEST numericIndexedVectorPointwise operations with zero values and UInt64 value type
 {10000001:7,10000002:8,10000003:0,10000004:0,20000005:0,30000005:100,50000005:0}
-{10000001:7,10000002:18446744073709551608,10000003:30,10000004:18446744073709551613,20000005:0,40000005:100,60000005:0}
-{10000001:14,10000002:0,10000003:30,10000004:18446744073709551613,20000005:0,30000005:100,40000005:100,50000005:0,60000005:0}
-{10000001:0,10000002:1,10000003:18446744073709551609,10000004:18446744073709551609,20000005:18446744073709551609,30000005:93,50000005:18446744073709551609}
+{10000001:7,10000002:8,10000003:30,10000004:3,20000005:0,40000005:100,60000005:0}
+{10000001:14,10000002:16,10000003:30,10000004:3,20000005:0,30000005:100,40000005:100,50000005:0,60000005:0}
+{10000001:14,10000002:15,10000003:7,10000004:7,20000005:7,30000005:107,50000005:7}
 {10000001:7,10000002:8,10000003:0,10000004:0,20000005:0,30000005:100,50000005:0}
-{10000001:0,10000002:16,10000003:18446744073709551586,10000004:3,20000005:0,30000005:100,40000005:18446744073709551516,50000005:0,60000005:0}
+{10000001:0,10000002:0,10000003:18446744073709551586,10000004:18446744073709551613,20000005:0,30000005:100,40000005:18446744073709551516,50000005:0,60000005:0}
 {10000001:5,10000002:6,10000003:18446744073709551614,10000004:18446744073709551614,20000005:18446744073709551614,30000005:98,50000005:18446744073709551614}
-{10000001:49,10000002:18446744073709551615,10000003:0,10000004:0,20000005:0,30000005:0,40000005:0,50000005:0,60000005:0}
-{10000001:18446744073709551615,10000002:18446744073709551615,10000003:0,10000004:0,20000005:0,30000005:18446744073709551615,50000005:0}
-{10000001:1,10000003:0,10000004:0,20000005:0,30000005:0,40000005:0,50000005:0,60000005:0}
+{10000001:49,10000002:64,10000003:0,10000004:0,20000005:0,30000005:0,40000005:0,50000005:0,60000005:0}
+{10000001:56,10000002:64,10000003:0,10000004:0,20000005:0,30000005:800,50000005:0}
+{10000001:1,10000002:1,10000003:0,10000004:0,20000005:0,30000005:0,40000005:0,50000005:0,60000005:0}
 {10000001:3,10000002:4,10000003:0,10000004:0,20000005:0,30000005:50,50000005:0}
 {10000001:0,10000002:0,10000003:0,10000004:0,20000005:0,30000005:0,50000005:0}
-{10000001:1,20000005:1,50000005:1,60000005:1}
+{10000001:1,10000002:1,20000005:1,50000005:1,60000005:1}
 {}
-{10000002:1,10000003:1,10000004:1,30000005:1,40000005:1}
+{10000003:1,10000004:1,30000005:1,40000005:1}
 {10000001:1,10000002:1,10000003:1,10000004:1,20000005:1,30000005:1,50000005:1}
 {10000001:1,10000002:1,30000005:1}
-{10000002:1,10000003:1,10000004:1,40000005:1}
+{10000003:1,10000004:1,40000005:1}
 {10000003:1,10000004:1,20000005:1,50000005:1}
-{10000001:1,10000002:1,10000003:1,20000005:1,40000005:1,60000005:1}
+{10000004:1,20000005:1,60000005:1}
 {}
 {}
 {10000001:1,10000002:1,10000003:1,10000004:1,20000005:1,40000005:1,50000005:1,60000005:1}
@@ -27,5 +27,5 @@ TEST numericIndexedVectorPointwise operations with zero values and UInt64 value
 {}
 {30000005:1}
 {10000001:1,10000002:1,30000005:1}
-{10000001:1,20000005:1,30000005:1,50000005:1,60000005:1}
+{10000001:1,10000002:1,20000005:1,30000005:1,50000005:1,60000005:1}
 {10000001:1,10000002:1,30000005:1}
diff --git a/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.sql b/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.sql
index 4edda498022a..88a80042e916 100644
--- a/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.sql
+++ b/tests/queries/0_stateless/03458_numeric_indexed_vector_operations_u32u64.sql
@@ -11,7 +11,7 @@ CREATE TABLE uin_value_details
 ENGINE = MergeTree()
 ORDER BY ds;
 INSERT INTO uin_value_details (ds, uin, value) values ('2023-12-26', 10000001, 7), ('2023-12-26', 10000002, 8), ('2023-12-26', 10000003, 0), ('2023-12-26', 10000004, 0), ('2023-12-26', 20000005, 0), ('2023-12-26', 30000005, 100), ('2023-12-26', 50000005, 0);
-INSERT INTO uin_value_details (ds, uin, value) values ('2023-12-27', 10000001, 7), ('2023-12-27', 10000002, -8), ('2023-12-27', 10000003, 30), ('2023-12-27', 10000004, -3), ('2023-12-27', 20000005, 0), ('2023-12-27', 40000005, 100), ('2023-12-27', 60000005, 0);
+INSERT INTO uin_value_details (ds, uin, value) values ('2023-12-27', 10000001, 7), ('2023-12-27', 10000002, 8), ('2023-12-27', 10000003, 30), ('2023-12-27', 10000004, 3), ('2023-12-27', 20000005, 0), ('2023-12-27', 40000005, 100), ('2023-12-27', 60000005, 0);
 
 with
 (
@@ -26,12 +26,12 @@ select arrayJoin([
     numericIndexedVectorToMap(vec_1)
     , numericIndexedVectorToMap(vec_2)
     , numericIndexedVectorToMap(numericIndexedVectorPointwiseAdd(vec_1, vec_2))
-    , numericIndexedVectorToMap(numericIndexedVectorPointwiseAdd(vec_1, -7))
+    , numericIndexedVectorToMap(numericIndexedVectorPointwiseAdd(vec_1, 7))
     , numericIndexedVectorToMap(numericIndexedVectorPointwiseAdd(vec_1, 0))
     , numericIndexedVectorToMap(numericIndexedVectorPointwiseSubtract(vec_1, vec_2))
     , numericIndexedVectorToMap(numericIndexedVectorPointwiseSubtract(vec_1, 2))
     , numericIndexedVectorToMap(numericIndexedVectorPointwiseMultiply(vec_1, vec_2))
-    , numericIndexedVectorToMap(numericIndexedVectorPointwiseMultiply(vec_1, -8))
+    , numericIndexedVectorToMap(numericIndexedVectorPointwiseMultiply(vec_1, 8))
     , numericIndexedVectorToMap(numericIndexedVectorPointwiseDivide(vec_1, vec_2))
     , numericIndexedVectorToMap(numericIndexedVectorPointwiseDivide(vec_1, 2))
     , numericIndexedVectorToMap(numericIndexedVectorPointwiseDivide(vec_1, 0))
@@ -42,7 +42,7 @@ select arrayJoin([
     , numericIndexedVectorToMap(numericIndexedVectorPointwiseNotEqual(vec_1, 0))
     , numericIndexedVectorToMap(numericIndexedVectorPointwiseLess(vec_1, vec_2))
     , numericIndexedVectorToMap(numericIndexedVectorPointwiseLess(vec_1, 2))
-    , numericIndexedVectorToMap(numericIndexedVectorPointwiseLess(vec_2, -5))
+    , numericIndexedVectorToMap(numericIndexedVectorPointwiseLess(vec_2, 5))
     , numericIndexedVectorToMap(numericIndexedVectorPointwiseLess(vec_1, 0))
     , numericIndexedVectorToMap(numericIndexedVectorPointwiseLess(vec_2, 0))
     , numericIndexedVectorToMap(numericIndexedVectorPointwiseLessEqual(vec_1, vec_2))
diff --git a/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.reference b/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.reference
index deae640f4092..ba249587a356 100644
--- a/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.reference
+++ b/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.reference
@@ -1,4 +1,6 @@
 {1:72999999515.86284,2:82999999514.86284,3:0,4:0,5:0,6:-92967846119.29968,7:0}
 {1:-72999999515.86284,2:-82999999514.86284,3:0,4:0,5:0,7:0}
 \N
+Test with NaN, INFs and Nulls
 3
+Test for overflows
diff --git a/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.sql b/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.sql
index d737f9f4dce8..297bfdbb9650 100644
--- a/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.sql
+++ b/tests/queries/0_stateless/03463_numeric_indexed_vector_overflow.sql
@@ -49,8 +49,20 @@ SELECT numericIndexedVectorToMap(numericIndexedVectorPointwiseGreaterEqual(vec_1
 
 DROP TABLE uin_value_details;
 
+-- https://github.com/ClickHouse/ClickHouse/issues/82239
+SELECT 'Test with NaN, INFs and Nulls' AS test;
 
 SELECT groupNumericIndexedVector(x, y) FROM values('x Nullable(Int32), y Nullable(Float64)', (1, 0), (3, nan), (3, 2), (0, 0), (5, 1)); -- { serverError INCORRECT_DATA }
 SELECT groupNumericIndexedVector(x, y) FROM values('x Nullable(Int32), y Nullable(Float64)', (1, 0), (3, Null), (3, 2), (0, 0), (5, 1));
 SELECT groupNumericIndexedVector(x, y) FROM values('x Nullable(Int32), y Nullable(Float64)', (1, 0), (3, inf), (3, 2), (0, 0), (5, 1)); -- { serverError INCORRECT_DATA }
 SELECT groupNumericIndexedVector(x, y) FROM values('x Nullable(Int32), y Nullable(Float64)', (1, 0), (3, -inf), (3, 2), (0, 0), (5, 1)); -- { serverError INCORRECT_DATA }
+
+-- https://github.com/ClickHouse/ClickHouse/issues/83591
+SELECT 'Test for overflows' AS test;
+CREATE TABLE test (t AggregateFunction(groupNumericIndexedVectorState, UInt32, Float64)) ENGINE = AggregatingMergeTree ORDER BY tuple();
+CREATE TABLE test2 (t AggregateFunction(groupNumericIndexedVectorState, UInt32, UInt64)) ENGINE = AggregatingMergeTree ORDER BY tuple();
+INSERT INTO test SELECT groupNumericIndexedVectorState(toUInt32(1), 1.54743e+26); -- { serverError INCORRECT_DATA }
+INSERT INTO test SELECT groupNumericIndexedVectorState(toUInt32(2), -1.54743e+26); -- { serverError INCORRECT_DATA }
+INSERT INTO test2 SELECT groupNumericIndexedVectorState(toUInt32(1), 18446744073709551615); -- { serverError INCORRECT_DATA }
+DROP TABLE test;
+DROP TABLE test2;
