You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Server crashes by the `uniqTheta(tuple())` expression
**Describe the bug**
Server crashes by the `uniqTheta(tuple())` expression.
It was found by an in-development fuzzer of WINGFUZZ.

**How to reproduce**
The SQL statement to reproduce:
```sql
SELECT uniqTheta(tuple());
```

It can be reproduced on the official docker image. (clickhouse/clickhouse-server:head (version 24.8.1.473) and clickhouse/clickhouse-server:latest (version 24.6.2.17)).

The log traced by ClickHouse Server:
```
SELECT uniqTheta(tuple())

Query id: 9e0e6058-9c34-48d2-b8e1-d93d46238c36

[1c6fc9302e45] 2024.07.28 13:02:17.264746 [ 804 ] <Fatal> BaseDaemon: ########################################
[1c6fc9302e45] 2024.07.28 13:02:17.264840 [ 804 ] <Fatal> BaseDaemon: (version 24.8.1.473 (official build), build id: AB57C74DD7456AA12E643F366E718F749FADFC24, git hash: 206a5ff4a1f09f1f4b6826de1f0b35a605697fed) (from thread 728) (query_id: 9e0e6058-9c34-48d2-b8e1-d93d46238c36) (query: SELECT uniqTheta(tuple());) Received signal Segmentation fault (11)
[1c6fc9302e45] 2024.07.28 13:02:17.264880 [ 804 ] <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.
[1c6fc9302e45] 2024.07.28 13:02:17.264914 [ 804 ] <Fatal> BaseDaemon: Stack trace: 0x000000000d8bd724 0x00007f7304239420 0x000000000fba4933 0x00000000110d384d 0x00000000110d568b 0x0000000012fd6aea 0x0000000012c4f547 0x0000000012c43d10 0x0000000012c453ce 0x000000000d6bafa9 0x000000000d6bf0f1 0x000000000d6bde69 0x00007f730422d609 0x00007f7304152353
[1c6fc9302e45] 2024.07.28 13:02:17.265014 [ 804 ] <Fatal> BaseDaemon: 0. signalHandler(int, siginfo_t*, void*) @ 0x000000000d8bd724
[1c6fc9302e45] 2024.07.28 13:02:17.265049 [ 804 ] <Fatal> BaseDaemon: 1. ? @ 0x00007f7304239420
[1c6fc9302e45] 2024.07.28 13:02:17.265119 [ 804 ] <Fatal> BaseDaemon: 2. DB::AggregateFunctionUniqVariadic<DB::AggregateFunctionUniqThetaDataForVariadic<false, true>>::addBatchSinglePlace(unsigned long, unsigned long, char*, DB::IColumn const**, DB::Arena*, long) const @ 0x000000000fba4933
[1c6fc9302e45] 2024.07.28 13:02:17.265168 [ 804 ] <Fatal> BaseDaemon: 3. DB::Aggregator::executeWithoutKeyImpl(char*&, unsigned long, unsigned long, DB::Aggregator::AggregateFunctionInstruction*, DB::Arena*, bool) const @ 0x00000000110d384d
[1c6fc9302e45] 2024.07.28 13:02:17.265224 [ 804 ] <Fatal> BaseDaemon: 4. DB::Aggregator::executeOnBlock(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>, unsigned long, unsigned long, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*>>&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*>>, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*>>>>&, bool&) const @ 0x00000000110d568b
[1c6fc9302e45] 2024.07.28 13:02:17.265283 [ 804 ] <Fatal> BaseDaemon: 5. DB::AggregatingTransform::work() @ 0x0000000012fd6aea
[1c6fc9302e45] 2024.07.28 13:02:17.265322 [ 804 ] <Fatal> BaseDaemon: 6. DB::ExecutionThreadContext::executeTask() @ 0x0000000012c4f547
[1c6fc9302e45] 2024.07.28 13:02:17.265363 [ 804 ] <Fatal> BaseDaemon: 7. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000012c43d10
[1c6fc9302e45] 2024.07.28 13:02:17.265414 [ 804 ] <Fatal> BaseDaemon: 8. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000012c453ce
[1c6fc9302e45] 2024.07.28 13:02:17.265500 [ 804 ] <Fatal> BaseDaemon: 9. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false, true>, void*>) @ 0x000000000d6bafa9
[1c6fc9302e45] 2024.07.28 13:02:17.265563 [ 804 ] <Fatal> BaseDaemon: 10. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000d6bf0f1
[1c6fc9302e45] 2024.07.28 13:02:17.265618 [ 804 ] <Fatal> BaseDaemon: 11. void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000d6bde69
[1c6fc9302e45] 2024.07.28 13:02:17.265642 [ 804 ] <Fatal> BaseDaemon: 12. ? @ 0x00007f730422d609
[1c6fc9302e45] 2024.07.28 13:02:17.265671 [ 804 ] <Fatal> BaseDaemon: 13. ? @ 0x00007f7304152353
[1c6fc9302e45] 2024.07.28 13:02:17.441074 [ 804 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: EFFEC9494498ABD92EF154C349356F59)
[1c6fc9302e45] 2024.07.28 13:02:17.441433 [ 804 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
[1c6fc9302e45] 2024.07.28 13:02:17.441685 [ 804 ] <Fatal> BaseDaemon: No settings were changed
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
