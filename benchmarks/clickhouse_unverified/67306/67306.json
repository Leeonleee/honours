{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 67306,
  "instance_id": "ClickHouse__ClickHouse-67306",
  "issue_numbers": [
    "67303"
  ],
  "base_commit": "7b5a7f546e55a23ffedafe1e2a3760a594d79d4b",
  "patch": "diff --git a/src/AggregateFunctions/UniqVariadicHash.h b/src/AggregateFunctions/UniqVariadicHash.h\nindex 5bb245397d46..279feed8bc6d 100644\n--- a/src/AggregateFunctions/UniqVariadicHash.h\n+++ b/src/AggregateFunctions/UniqVariadicHash.h\n@@ -67,6 +67,9 @@ struct UniqVariadicHash<false, true>\n {\n     static UInt64 apply(size_t num_args, const IColumn ** columns, size_t row_num)\n     {\n+        if (!num_args)\n+            return 0;\n+\n         UInt64 hash;\n \n         const auto & tuple_columns = assert_cast<const ColumnTuple *>(columns[0])->getColumns();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03208_uniq_with_empty_tuple.reference b/tests/queries/0_stateless/03208_uniq_with_empty_tuple.reference\nnew file mode 100644\nindex 000000000000..6ed281c757a9\n--- /dev/null\n+++ b/tests/queries/0_stateless/03208_uniq_with_empty_tuple.reference\n@@ -0,0 +1,2 @@\n+1\n+1\ndiff --git a/tests/queries/0_stateless/03208_uniq_with_empty_tuple.sql b/tests/queries/0_stateless/03208_uniq_with_empty_tuple.sql\nnew file mode 100644\nindex 000000000000..09eeaf6f3709\n--- /dev/null\n+++ b/tests/queries/0_stateless/03208_uniq_with_empty_tuple.sql\n@@ -0,0 +1,4 @@\n+-- Tags: no-fasttest\n+-- https://github.com/ClickHouse/ClickHouse/issues/67303\n+SELECT uniqTheta(tuple());\n+SELECT uniq(tuple());\n",
  "problem_statement": "Server crashes by the `uniqTheta(tuple())` expression\n**Describe the bug**\r\nServer crashes by the `uniqTheta(tuple())` expression.\r\nIt was found by an in-development fuzzer of WINGFUZZ.\r\n\r\n**How to reproduce**\r\nThe SQL statement to reproduce:\r\n```sql\r\nSELECT uniqTheta(tuple());\r\n```\r\n\r\nIt can be reproduced on the official docker image. (clickhouse/clickhouse-server:head (version 24.8.1.473) and clickhouse/clickhouse-server:latest (version 24.6.2.17)).\r\n\r\nThe log traced by ClickHouse Server:\r\n```\r\nSELECT uniqTheta(tuple())\r\n\r\nQuery id: 9e0e6058-9c34-48d2-b8e1-d93d46238c36\r\n\r\n[1c6fc9302e45] 2024.07.28 13:02:17.264746 [ 804 ] <Fatal> BaseDaemon: ########################################\r\n[1c6fc9302e45] 2024.07.28 13:02:17.264840 [ 804 ] <Fatal> BaseDaemon: (version 24.8.1.473 (official build), build id: AB57C74DD7456AA12E643F366E718F749FADFC24, git hash: 206a5ff4a1f09f1f4b6826de1f0b35a605697fed) (from thread 728) (query_id: 9e0e6058-9c34-48d2-b8e1-d93d46238c36) (query: SELECT uniqTheta(tuple());) Received signal Segmentation fault (11)\r\n[1c6fc9302e45] 2024.07.28 13:02:17.264880 [ 804 ] <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n[1c6fc9302e45] 2024.07.28 13:02:17.264914 [ 804 ] <Fatal> BaseDaemon: Stack trace: 0x000000000d8bd724 0x00007f7304239420 0x000000000fba4933 0x00000000110d384d 0x00000000110d568b 0x0000000012fd6aea 0x0000000012c4f547 0x0000000012c43d10 0x0000000012c453ce 0x000000000d6bafa9 0x000000000d6bf0f1 0x000000000d6bde69 0x00007f730422d609 0x00007f7304152353\r\n[1c6fc9302e45] 2024.07.28 13:02:17.265014 [ 804 ] <Fatal> BaseDaemon: 0. signalHandler(int, siginfo_t*, void*) @ 0x000000000d8bd724\r\n[1c6fc9302e45] 2024.07.28 13:02:17.265049 [ 804 ] <Fatal> BaseDaemon: 1. ? @ 0x00007f7304239420\r\n[1c6fc9302e45] 2024.07.28 13:02:17.265119 [ 804 ] <Fatal> BaseDaemon: 2. DB::AggregateFunctionUniqVariadic<DB::AggregateFunctionUniqThetaDataForVariadic<false, true>>::addBatchSinglePlace(unsigned long, unsigned long, char*, DB::IColumn const**, DB::Arena*, long) const @ 0x000000000fba4933\r\n[1c6fc9302e45] 2024.07.28 13:02:17.265168 [ 804 ] <Fatal> BaseDaemon: 3. DB::Aggregator::executeWithoutKeyImpl(char*&, unsigned long, unsigned long, DB::Aggregator::AggregateFunctionInstruction*, DB::Arena*, bool) const @ 0x00000000110d384d\r\n[1c6fc9302e45] 2024.07.28 13:02:17.265224 [ 804 ] <Fatal> BaseDaemon: 4. DB::Aggregator::executeOnBlock(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>>, unsigned long, unsigned long, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*>>&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*>>, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*>>>>&, bool&) const @ 0x00000000110d568b\r\n[1c6fc9302e45] 2024.07.28 13:02:17.265283 [ 804 ] <Fatal> BaseDaemon: 5. DB::AggregatingTransform::work() @ 0x0000000012fd6aea\r\n[1c6fc9302e45] 2024.07.28 13:02:17.265322 [ 804 ] <Fatal> BaseDaemon: 6. DB::ExecutionThreadContext::executeTask() @ 0x0000000012c4f547\r\n[1c6fc9302e45] 2024.07.28 13:02:17.265363 [ 804 ] <Fatal> BaseDaemon: 7. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000012c43d10\r\n[1c6fc9302e45] 2024.07.28 13:02:17.265414 [ 804 ] <Fatal> BaseDaemon: 8. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<DB::PipelineExecutor::spawnThreads()::$_0, void ()>>(std::__function::__policy_storage const*) @ 0x0000000012c453ce\r\n[1c6fc9302e45] 2024.07.28 13:02:17.265500 [ 804 ] <Fatal> BaseDaemon: 9. ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::worker(std::__list_iterator<ThreadFromGlobalPoolImpl<false, true>, void*>) @ 0x000000000d6bafa9\r\n[1c6fc9302e45] 2024.07.28 13:02:17.265563 [ 804 ] <Fatal> BaseDaemon: 10. void std::__function::__policy_invoker<void ()>::__call_impl<std::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__function::__policy_storage const*) @ 0x000000000d6bf0f1\r\n[1c6fc9302e45] 2024.07.28 13:02:17.265618 [ 804 ] <Fatal> BaseDaemon: 11. void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000d6bde69\r\n[1c6fc9302e45] 2024.07.28 13:02:17.265642 [ 804 ] <Fatal> BaseDaemon: 12. ? @ 0x00007f730422d609\r\n[1c6fc9302e45] 2024.07.28 13:02:17.265671 [ 804 ] <Fatal> BaseDaemon: 13. ? @ 0x00007f7304152353\r\n[1c6fc9302e45] 2024.07.28 13:02:17.441074 [ 804 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: EFFEC9494498ABD92EF154C349356F59)\r\n[1c6fc9302e45] 2024.07.28 13:02:17.441433 [ 804 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues\r\n[1c6fc9302e45] 2024.07.28 13:02:17.441685 [ 804 ] <Fatal> BaseDaemon: No settings were changed\r\n```\n",
  "hints_text": "",
  "created_at": "2024-07-28T14:44:16Z",
  "modified_files": [
    "src/AggregateFunctions/UniqVariadicHash.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03208_uniq_with_empty_tuple.reference",
    "b/tests/queries/0_stateless/03208_uniq_with_empty_tuple.sql"
  ]
}