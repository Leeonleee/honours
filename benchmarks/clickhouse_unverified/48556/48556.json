{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 48556,
  "instance_id": "ClickHouse__ClickHouse-48556",
  "issue_numbers": [
    "48418"
  ],
  "base_commit": "62e9c419de3cd956ddf6ee695e1501506b2eae68",
  "patch": "diff --git a/base/base/IPv4andIPv6.h b/base/base/IPv4andIPv6.h\nindex 0e97d83b07ed..7b745ec7b847 100644\n--- a/base/base/IPv4andIPv6.h\n+++ b/base/base/IPv4andIPv6.h\n@@ -51,3 +51,15 @@ namespace DB\n     };\n \n }\n+\n+namespace std\n+{\n+    template <>\n+    struct hash<DB::IPv6>\n+    {\n+        size_t operator()(const DB::IPv6 & x) const\n+        {\n+            return std::hash<DB::IPv6::UnderlyingType>()(x.toUnderType());\n+        }\n+    };\n+}\ndiff --git a/src/AggregateFunctions/Helpers.h b/src/AggregateFunctions/Helpers.h\nindex c97733571a37..19904dd92152 100644\n--- a/src/AggregateFunctions/Helpers.h\n+++ b/src/AggregateFunctions/Helpers.h\n@@ -130,6 +130,8 @@ static IAggregateFunction * createWithNumericBasedType(const IDataType & argumen\n     if (which.idx == TypeIndex::Date) return new AggregateFunctionTemplate<UInt16>(std::forward<TArgs>(args)...);\n     if (which.idx == TypeIndex::DateTime) return new AggregateFunctionTemplate<UInt32>(std::forward<TArgs>(args)...);\n     if (which.idx == TypeIndex::UUID) return new AggregateFunctionTemplate<UUID>(std::forward<TArgs>(args)...);\n+    if (which.idx == TypeIndex::IPv4) return new AggregateFunctionTemplate<IPv4>(std::forward<TArgs>(args)...);\n+    if (which.idx == TypeIndex::IPv6) return new AggregateFunctionTemplate<IPv6>(std::forward<TArgs>(args)...);\n     return nullptr;\n }\n \ndiff --git a/src/Common/HashTable/Hash.h b/src/Common/HashTable/Hash.h\nindex efdc43917dac..eb455c5f9e3a 100644\n--- a/src/Common/HashTable/Hash.h\n+++ b/src/Common/HashTable/Hash.h\n@@ -344,6 +344,8 @@ DEFINE_HASH(DB::Int256)\n DEFINE_HASH(DB::Float32)\n DEFINE_HASH(DB::Float64)\n DEFINE_HASH(DB::UUID)\n+DEFINE_HASH(DB::IPv4)\n+DEFINE_HASH(DB::IPv6)\n \n #undef DEFINE_HASH\n \ndiff --git a/src/Common/HashTable/HashTable.h b/src/Common/HashTable/HashTable.h\nindex 7ddcbc20b22e..8542ddae144e 100644\n--- a/src/Common/HashTable/HashTable.h\n+++ b/src/Common/HashTable/HashTable.h\n@@ -75,7 +75,7 @@ template <typename T>\n bool check(const T x) { return x == T{}; }\n \n template <typename T>\n-void set(T & x) { x = {}; }\n+void set(T & x) { x = T{}; }\n \n }\n \ndiff --git a/src/DataTypes/DataTypeIPv4andIPv6.h b/src/DataTypes/DataTypeIPv4andIPv6.h\nindex 0a0c61d0ad8e..ad70bdae9336 100644\n--- a/src/DataTypes/DataTypeIPv4andIPv6.h\n+++ b/src/DataTypes/DataTypeIPv4andIPv6.h\n@@ -37,6 +37,7 @@ class DataTypeIPv4 : public IDataType\n     bool textCanContainOnlyValidUTF8() const override { return true; }\n     bool isComparable() const override { return true; }\n     bool isValueRepresentedByNumber() const override { return true; }\n+    bool isValueRepresentedByInteger() const override { return true; }\n     bool isValueRepresentedByUnsignedInteger() const override { return true; }\n     bool isValueUnambiguouslyRepresentedInContiguousMemoryRegion() const override { return true; }\n     bool isValueUnambiguouslyRepresentedInFixedSizeContiguousMemoryRegion() const override { return true; }\ndiff --git a/src/Processors/Merges/Algorithms/SummingSortedAlgorithm.cpp b/src/Processors/Merges/Algorithms/SummingSortedAlgorithm.cpp\nindex d8e95e6b9504..c45613f18e57 100644\n--- a/src/Processors/Merges/Algorithms/SummingSortedAlgorithm.cpp\n+++ b/src/Processors/Merges/Algorithms/SummingSortedAlgorithm.cpp\n@@ -328,8 +328,11 @@ static SummingSortedAlgorithm::ColumnsDefinition defineColumns(\n                 || endsWith(name, \"Key\")\n                 || endsWith(name, \"Type\"))\n             {\n-                if (!nested_type.isValueRepresentedByInteger() && !isStringOrFixedString(nested_type))\n-                    break;\n+                if (!nested_type.isValueRepresentedByInteger() &&\n+                    !isStringOrFixedString(nested_type) &&\n+                    !typeid_cast<const DataTypeIPv6 *>(&nested_type) &&\n+                    !typeid_cast<const DataTypeUUID *>(&nested_type))\n+                        break;\n \n                 map_desc.key_col_nums.push_back(*column_num_it);\n             }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02710_aggregation_nested_map_ip_uuid.reference b/tests/queries/0_stateless/02710_aggregation_nested_map_ip_uuid.reference\nnew file mode 100644\nindex 000000000000..c5b787f3dd64\n--- /dev/null\n+++ b/tests/queries/0_stateless/02710_aggregation_nested_map_ip_uuid.reference\n@@ -0,0 +1,3 @@\n+1\t['1.2.3.4']\t[5]\t['::1']\t[7]\t['00130949-0cd4-4c3d-84c4-cc421eff480f']\t[9]\n+1\t['1.2.3.4','2.3.4.5']\t[37,13]\t['::1','::2']\t[41,14]\t['00000000-0cd4-4c3d-84c4-cc421eff480f','00130949-0cd4-4c3d-84c4-cc421eff480f']\t[39,21]\n+2\t['1.2.3.4','2.3.4.5']\t[26,16]\t['::1','::2']\t[25,20]\t['00130949-0cd4-4c3d-84c4-cc421eff480f']\t[48]\ndiff --git a/tests/queries/0_stateless/02710_aggregation_nested_map_ip_uuid.sql b/tests/queries/0_stateless/02710_aggregation_nested_map_ip_uuid.sql\nnew file mode 100644\nindex 000000000000..456e8723d08f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02710_aggregation_nested_map_ip_uuid.sql\n@@ -0,0 +1,32 @@\n+DROP TABLE IF EXISTS summing_table;\n+CREATE TABLE summing_table\n+(\n+    id UInt32,\n+    `ip4Map.value` Array(IPv4), `ip4Map.total` Array(UInt32),\n+    `ip6Map.value` Array(IPv6), `ip6Map.total` Array(UInt32),\n+    `uuidMap.value` Array(UUID), `uuidMap.total` Array(UInt32)\n+) ENGINE = SummingMergeTree ORDER BY id;\n+\n+INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total)\n+    values (1, ['1.2.3.4'], [1], ['::1'], [2], ['00130949-0cd4-4c3d-84c4-cc421eff480f'], [3]);\n+INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total)\n+    values(1, ['1.2.3.4'], [4], ['::1'], [5], ['00130949-0cd4-4c3d-84c4-cc421eff480f'], [6]);\n+OPTIMIZE TABLE summing_table FINAL;\n+SELECT * FROM summing_table ORDER BY id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total;\n+\n+INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total)\n+    values(2, ['1.2.3.4'], [7], ['::1'], [8], ['00130949-0cd4-4c3d-84c4-cc421eff480f'], [9]);\n+INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total)\n+    values(1, ['1.2.3.4'], [10], ['::1'], [11], ['00130949-0cd4-4c3d-84c4-cc421eff480f'], [12]);\n+INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total)\n+    values(1, ['2.3.4.5'], [13], ['::2'], [14], ['00000000-0cd4-4c3d-84c4-cc421eff480f'], [15]);\n+INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total)\n+    values(2, ['2.3.4.5'], [16], ['::1'], [17], ['00130949-0cd4-4c3d-84c4-cc421eff480f'], [18]);\n+INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total)\n+    values(2, ['1.2.3.4'], [19], ['::2'], [20], ['00130949-0cd4-4c3d-84c4-cc421eff480f'], [21]);\n+INSERT INTO summing_table(id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total)\n+    values(1, ['1.2.3.4'], [22], ['::1'], [23], ['00000000-0cd4-4c3d-84c4-cc421eff480f'], [24]);\n+OPTIMIZE TABLE summing_table FINAL;\n+SELECT * FROM summing_table ORDER BY id, ip4Map.value, ip4Map.total, ip6Map.value, ip6Map.total, uuidMap.value, uuidMap.total;\n+\n+DROP TABLE summing_table;\n",
  "problem_statement": "On a SummingMergeTree, a Map with an IPv4/IPv6 field does not sum.\nHello and thanks for your work on ClickHouse!\r\n\r\n**Describe what's wrong**\r\n\r\nI have found a bug reproducible on the latest available CH build.\r\nI don't know if it's related to #39965 since I don't have the exact same behaviour.\r\n\r\nOn a SummingMergeTree, a Map with an IPv4/IPv6 field does not sum.\r\n\r\n```\r\nClickHouse client version 23.4.1.375 (official build).                                                                                                                                                                                                                          \r\nConnecting to localhost:9000 as user default.                                                                                                                                                                                                                                   \r\nConnected to ClickHouse server version 23.4.1 revision 54462.\r\n\r\n---\r\n\r\nclickhouse :) CREATE TABLE summing_table\r\n(\r\n    `id` UInt32,\r\n    `ipMap.value` Array(IPv4) DEFAULT [],\r\n    `ipMap.total` Array(UInt32) DEFAULT [],\r\n    `intMap.value` Array(UInt8) DEFAULT [],\r\n    `intMap.total` Array(UInt32) DEFAULT [],\r\n)\r\nENGINE = SummingMergeTree\r\nORDER BY id;\r\n\r\n---\r\n\r\nclickhouse :) insert into summing_table(id, ipMap.value, ipMap.total, intMap.value, intMap.total) values(1, ['10.20.30.40'], [1], [123], [10]);\r\nclickhouse :) SELECT * FROM summing_table\r\n\u250c\u2500id\u2500\u252c\u2500ipMap.value\u2500\u2500\u2500\u2500\u2500\u252c\u2500ipMap.total\u2500\u252c\u2500intMap.value\u2500\u252c\u2500intMap.total\u2500\u2510\r\n\u2502  1 \u2502 ['10.20.30.40'] \u2502 [1]         \u2502 [123]        \u2502 [10]         \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n---\r\n\r\nclickhouse :) insert into summing_table(id, ipMap.value, ipMap.total, intMap.value, intMap.total) values(1, ['10.20.30.40'], [1], [123], [10]);\r\nclickhouse :) OPTIMIZE TABLE summing_table FINAL\r\nclickhouse :) SELECT * FROM summing_table\r\n\u250c\u2500id\u2500\u252c\u2500ipMap.value\u2500\u2500\u2500\u2500\u2500\u252c\u2500ipMap.total\u2500\u252c\u2500intMap.value\u2500\u252c\u2500intMap.total\u2500\u2510\r\n\u2502  1 \u2502 ['10.20.30.40'] \u2502 [1]         \u2502 [123]        \u2502 [20]         \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nExpected : \r\n\u250c\u2500id\u2500\u252c\u2500ipMap.value\u2500\u2500\u2500\u2500\u2500\u252c\u2500ipMap.total\u2500\u252c\u2500intMap.value\u2500\u252c\u2500intMap.total\u2500\u2510\r\n\u2502  1 \u2502 ['10.20.30.40'] \u2502 [2]         \u2502 [123]        \u2502 [20]         \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n---\r\n\r\nclickhouse :) insert into summing_table(id, ipMap.value, ipMap.total, intMap.value, intMap.total) values(1, ['50.60.70.80'], [10], [124], [50]);\r\nclickhouse :) OPTIMIZE TABLE summing_table FINAL\r\nclickhouse :) SELECT * FROM summing_table\r\n\u250c\u2500id\u2500\u252c\u2500ipMap.value\u2500\u2500\u2500\u2500\u2500\u252c\u2500ipMap.total\u2500\u252c\u2500intMap.value\u2500\u252c\u2500intMap.total\u2500\u2510\r\n\u2502  1 \u2502 ['10.20.30.40'] \u2502 [1]         \u2502 [123,124]    \u2502 [20,50]      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nExpected : \r\n\u250c\u2500id\u2500\u252c\u2500ipMap.value\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500ipMap.total\u2500\u252c\u2500intMap.value\u2500\u252c\u2500intMap.total\u2500\u2510\r\n\u2502  1 \u2502 ['10.20.30.40', '50.60.70.80'] \u2502 [2, 10]     \u2502 [123,124]    \u2502 [20,50]      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nReproducible on ClickHouse server version 23.4.1 revision 54462.\r\nIt worked well on Clickhouse 22\r\n\r\n\n",
  "hints_text": "related to https://github.com/ClickHouse/ClickHouse/pull/43221",
  "created_at": "2023-04-08T05:41:19Z",
  "modified_files": [
    "base/base/IPv4andIPv6.h",
    "src/AggregateFunctions/Helpers.h",
    "src/Common/HashTable/Hash.h",
    "src/Common/HashTable/HashTable.h",
    "src/DataTypes/DataTypeIPv4andIPv6.h",
    "src/Processors/Merges/Algorithms/SummingSortedAlgorithm.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02710_aggregation_nested_map_ip_uuid.reference",
    "b/tests/queries/0_stateless/02710_aggregation_nested_map_ip_uuid.sql"
  ]
}