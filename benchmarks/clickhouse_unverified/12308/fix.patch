diff --git a/src/Compression/CompressionCodecDelta.cpp b/src/Compression/CompressionCodecDelta.cpp
index 6c7cf92a41df..50f449bef514 100644
--- a/src/Compression/CompressionCodecDelta.cpp
+++ b/src/Compression/CompressionCodecDelta.cpp
@@ -13,10 +13,11 @@ namespace DB
 
 namespace ErrorCodes
 {
-extern const int CANNOT_COMPRESS;
-extern const int CANNOT_DECOMPRESS;
-extern const int ILLEGAL_SYNTAX_FOR_CODEC_TYPE;
-extern const int ILLEGAL_CODEC_PARAMETER;
+    extern const int CANNOT_COMPRESS;
+    extern const int CANNOT_DECOMPRESS;
+    extern const int ILLEGAL_SYNTAX_FOR_CODEC_TYPE;
+    extern const int ILLEGAL_CODEC_PARAMETER;
+    extern const int BAD_ARGUMENTS;
 }
 
 CompressionCodecDelta::CompressionCodecDelta(UInt8 delta_bytes_size_)
@@ -31,7 +32,7 @@ uint8_t CompressionCodecDelta::getMethodByte() const
 
 String CompressionCodecDelta::getCodecDesc() const
 {
-    return "Delta(" + toString(delta_bytes_size) + ")";
+    return fmt::format("Delta({})", size_t(delta_bytes_size));
 }
 
 namespace
@@ -41,7 +42,7 @@ template <typename T>
 void compressDataForType(const char * source, UInt32 source_size, char * dest)
 {
     if (source_size % sizeof(T) != 0)
-        throw Exception("Cannot delta compress, data size " + toString(source_size) + " is not aligned to " + toString(sizeof(T)), ErrorCodes::CANNOT_COMPRESS);
+        throw Exception(ErrorCodes::CANNOT_COMPRESS, "Cannot delta compress, data size {}  is not aligned to {}", source_size, sizeof(T));
 
     T prev_src{};
     const char * source_end = source + source_size;
@@ -60,7 +61,7 @@ template <typename T>
 void decompressDataForType(const char * source, UInt32 source_size, char * dest)
 {
     if (source_size % sizeof(T) != 0)
-        throw Exception("Cannot delta decompress, data size " + toString(source_size) + " is not aligned to " + toString(sizeof(T)), ErrorCodes::CANNOT_DECOMPRESS);
+        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, "Cannot delta decompress, data size {}  is not aligned to {}", source_size, sizeof(T));
 
     T accumulator{};
     const char * source_end = source + source_size;
@@ -136,19 +137,21 @@ namespace
 
 UInt8 getDeltaBytesSize(DataTypePtr column_type)
 {
-    UInt8 delta_bytes_size = 1;
-    if (column_type && column_type->haveMaximumSizeOfValue())
-    {
-        size_t max_size = column_type->getSizeOfValueInMemory();
-        if (max_size == 1 || max_size == 2 || max_size == 4 || max_size == 8)
-            delta_bytes_size = static_cast<UInt8>(max_size);
-    }
-    return delta_bytes_size;
+    if (!column_type->isValueUnambiguouslyRepresentedInFixedSizeContiguousMemoryRegion())
+        throw Exception(ErrorCodes::BAD_ARGUMENTS, "Codec Delta is not applicable for {} because the data type is not of fixed size",
+            column_type->getName());
+
+    size_t max_size = column_type->getSizeOfValueInMemory();
+    if (max_size == 1 || max_size == 2 || max_size == 4 || max_size == 8)
+        return static_cast<UInt8>(max_size);
+    else
+        throw Exception(ErrorCodes::BAD_ARGUMENTS, "Codec Delta is only applicable for data types of size 1, 2, 4, 8 bytes. Given type {}",
+            column_type->getName());
 }
 
 }
 
-void CompressionCodecDelta::useInfoAboutType(DataTypePtr data_type)
+void CompressionCodecDelta::useInfoAboutType(const DataTypePtr & data_type)
 {
     delta_bytes_size = getDeltaBytesSize(data_type);
 }
@@ -158,7 +161,8 @@ void registerCodecDelta(CompressionCodecFactory & factory)
     UInt8 method_code = UInt8(CompressionMethodByte::Delta);
     factory.registerCompressionCodecWithType("Delta", method_code, [&](const ASTPtr & arguments, DataTypePtr column_type) -> CompressionCodecPtr
     {
-        UInt8 delta_bytes_size = getDeltaBytesSize(column_type);
+        UInt8 delta_bytes_size = 0;
+
         if (arguments && !arguments->children.empty())
         {
             if (arguments->children.size() > 1)
@@ -174,6 +178,11 @@ void registerCodecDelta(CompressionCodecFactory & factory)
                 throw Exception("Delta value for delta codec can be 1, 2, 4 or 8, given " + toString(user_bytes_size), ErrorCodes::ILLEGAL_CODEC_PARAMETER);
             delta_bytes_size = static_cast<UInt8>(user_bytes_size);
         }
+        else if (column_type)
+        {
+            delta_bytes_size = getDeltaBytesSize(column_type);
+        }
+
         return std::make_shared<CompressionCodecDelta>(delta_bytes_size);
     });
 }
diff --git a/src/Compression/CompressionCodecDelta.h b/src/Compression/CompressionCodecDelta.h
index 1077a7915351..7bc5d9ceb7a3 100644
--- a/src/Compression/CompressionCodecDelta.h
+++ b/src/Compression/CompressionCodecDelta.h
@@ -14,7 +14,7 @@ class CompressionCodecDelta : public ICompressionCodec
 
     String getCodecDesc() const override;
 
-    void useInfoAboutType(DataTypePtr data_type) override;
+    void useInfoAboutType(const DataTypePtr & data_type) override;
 
 protected:
     UInt32 doCompressData(const char * source, UInt32 source_size, char * dest) const override;
@@ -30,7 +30,4 @@ class CompressionCodecDelta : public ICompressionCodec
     UInt8 delta_bytes_size;
 };
 
-class CompressionCodecFactory;
-void registerCodecDelta(CompressionCodecFactory & factory);
-
 }
diff --git a/src/Compression/CompressionCodecDoubleDelta.cpp b/src/Compression/CompressionCodecDoubleDelta.cpp
index 5ed9916037db..f45fc82a3704 100644
--- a/src/Compression/CompressionCodecDoubleDelta.cpp
+++ b/src/Compression/CompressionCodecDoubleDelta.cpp
@@ -19,8 +19,9 @@ namespace DB
 
 namespace ErrorCodes
 {
-extern const int CANNOT_COMPRESS;
-extern const int CANNOT_DECOMPRESS;
+    extern const int CANNOT_COMPRESS;
+    extern const int CANNOT_DECOMPRESS;
+    extern const int BAD_ARGUMENTS;
 }
 
 namespace
@@ -307,14 +308,16 @@ void decompressDataForType(const char * source, UInt32 source_size, char * dest)
 
 UInt8 getDataBytesSize(DataTypePtr column_type)
 {
-    UInt8 data_bytes_size = 1;
-    if (column_type && column_type->haveMaximumSizeOfValue())
-    {
-        size_t max_size = column_type->getSizeOfValueInMemory();
-        if (max_size == 1 || max_size == 2 || max_size == 4 || max_size == 8)
-            data_bytes_size = static_cast<UInt8>(max_size);
-    }
-    return data_bytes_size;
+    if (!column_type->isValueUnambiguouslyRepresentedInFixedSizeContiguousMemoryRegion())
+        throw Exception(ErrorCodes::BAD_ARGUMENTS, "Codec DoubleDelta is not applicable for {} because the data type is not of fixed size",
+            column_type->getName());
+
+    size_t max_size = column_type->getSizeOfValueInMemory();
+    if (max_size == 1 || max_size == 2 || max_size == 4 || max_size == 8)
+        return static_cast<UInt8>(max_size);
+    else
+        throw Exception(ErrorCodes::BAD_ARGUMENTS, "Codec Delta is only applicable for data types of size 1, 2, 4, 8 bytes. Given type {}",
+            column_type->getName());
 }
 
 }
@@ -403,7 +406,7 @@ void CompressionCodecDoubleDelta::doDecompressData(const char * source, UInt32 s
     }
 }
 
-void CompressionCodecDoubleDelta::useInfoAboutType(DataTypePtr data_type)
+void CompressionCodecDoubleDelta::useInfoAboutType(const DataTypePtr & data_type)
 {
     data_bytes_size = getDataBytesSize(data_type);
 }
@@ -411,10 +414,14 @@ void CompressionCodecDoubleDelta::useInfoAboutType(DataTypePtr data_type)
 void registerCodecDoubleDelta(CompressionCodecFactory & factory)
 {
     UInt8 method_code = UInt8(CompressionMethodByte::DoubleDelta);
-    factory.registerCompressionCodecWithType("DoubleDelta", method_code, [&](const ASTPtr &, DataTypePtr column_type) -> CompressionCodecPtr
+    factory.registerCompressionCodecWithType("DoubleDelta", method_code,
+        [&](const ASTPtr & arguments, DataTypePtr column_type) -> CompressionCodecPtr
     {
-        UInt8 delta_bytes_size = getDataBytesSize(column_type);
-        return std::make_shared<CompressionCodecDoubleDelta>(delta_bytes_size);
+        if (arguments)
+            throw Exception("Codec DoubleDelta does not accept any arguments", ErrorCodes::BAD_ARGUMENTS);
+
+        UInt8 data_bytes_size = column_type ? getDataBytesSize(column_type) : 0;   /// Maybe postponed to the call to "useInfoAboutType"
+        return std::make_shared<CompressionCodecDoubleDelta>(data_bytes_size);
     });
 }
 }
diff --git a/src/Compression/CompressionCodecDoubleDelta.h b/src/Compression/CompressionCodecDoubleDelta.h
index 7803a29c34a6..d5e0770c6637 100644
--- a/src/Compression/CompressionCodecDoubleDelta.h
+++ b/src/Compression/CompressionCodecDoubleDelta.h
@@ -100,7 +100,7 @@ class CompressionCodecDoubleDelta : public ICompressionCodec
 
     String getCodecDesc() const override;
 
-    void useInfoAboutType(DataTypePtr data_type) override;
+    void useInfoAboutType(const DataTypePtr & data_type) override;
 
 protected:
     UInt32 doCompressData(const char * source, UInt32 source_size, char * dest) const override;
@@ -116,7 +116,4 @@ class CompressionCodecDoubleDelta : public ICompressionCodec
     UInt8 data_bytes_size;
 };
 
-class CompressionCodecFactory;
-void registerCodecDoubleDelta(CompressionCodecFactory & factory);
-
 }
diff --git a/src/Compression/CompressionCodecGorilla.cpp b/src/Compression/CompressionCodecGorilla.cpp
index 7ba128cfe4e4..9038482c9505 100644
--- a/src/Compression/CompressionCodecGorilla.cpp
+++ b/src/Compression/CompressionCodecGorilla.cpp
@@ -19,8 +19,9 @@ namespace DB
 
 namespace ErrorCodes
 {
-extern const int CANNOT_COMPRESS;
-extern const int CANNOT_DECOMPRESS;
+    extern const int CANNOT_COMPRESS;
+    extern const int CANNOT_DECOMPRESS;
+    extern const int BAD_ARGUMENTS;
 }
 
 namespace
@@ -223,14 +224,16 @@ void decompressDataForType(const char * source, UInt32 source_size, char * dest)
 
 UInt8 getDataBytesSize(DataTypePtr column_type)
 {
-    UInt8 delta_bytes_size = 1;
-    if (column_type && column_type->haveMaximumSizeOfValue())
-    {
-        size_t max_size = column_type->getSizeOfValueInMemory();
-        if (max_size == 1 || max_size == 2 || max_size == 4 || max_size == 8)
-            delta_bytes_size = static_cast<UInt8>(max_size);
-    }
-    return delta_bytes_size;
+    if (!column_type->isValueUnambiguouslyRepresentedInFixedSizeContiguousMemoryRegion())
+        throw Exception(ErrorCodes::BAD_ARGUMENTS, "Codec Gorilla is not applicable for {} because the data type is not of fixed size",
+            column_type->getName());
+
+    size_t max_size = column_type->getSizeOfValueInMemory();
+    if (max_size == 1 || max_size == 2 || max_size == 4 || max_size == 8)
+        return static_cast<UInt8>(max_size);
+    else
+        throw Exception(ErrorCodes::BAD_ARGUMENTS, "Codec Delta is only applicable for data types of size 1, 2, 4, 8 bytes. Given type {}",
+            column_type->getName());
 }
 
 }
@@ -320,7 +323,7 @@ void CompressionCodecGorilla::doDecompressData(const char * source, UInt32 sourc
     }
 }
 
-void CompressionCodecGorilla::useInfoAboutType(DataTypePtr data_type)
+void CompressionCodecGorilla::useInfoAboutType(const DataTypePtr & data_type)
 {
     data_bytes_size = getDataBytesSize(data_type);
 }
@@ -328,10 +331,14 @@ void CompressionCodecGorilla::useInfoAboutType(DataTypePtr data_type)
 void registerCodecGorilla(CompressionCodecFactory & factory)
 {
     UInt8 method_code = UInt8(CompressionMethodByte::Gorilla);
-    factory.registerCompressionCodecWithType("Gorilla", method_code, [&](const ASTPtr &, DataTypePtr column_type) -> CompressionCodecPtr
+    factory.registerCompressionCodecWithType("Gorilla", method_code,
+        [&](const ASTPtr & arguments, DataTypePtr column_type) -> CompressionCodecPtr
     {
-        UInt8 delta_bytes_size = getDataBytesSize(column_type);
-        return std::make_shared<CompressionCodecGorilla>(delta_bytes_size);
+        if (arguments)
+            throw Exception("Codec Gorilla does not accept any arguments", ErrorCodes::BAD_ARGUMENTS);
+
+        UInt8 data_bytes_size = column_type ? getDataBytesSize(column_type) : 0;   /// Maybe postponed to the call to "useInfoAboutType"
+        return std::make_shared<CompressionCodecGorilla>(data_bytes_size);
     });
 }
 }
diff --git a/src/Compression/CompressionCodecGorilla.h b/src/Compression/CompressionCodecGorilla.h
index d11aeed6056e..27a6d2789788 100644
--- a/src/Compression/CompressionCodecGorilla.h
+++ b/src/Compression/CompressionCodecGorilla.h
@@ -97,7 +97,7 @@ class CompressionCodecGorilla : public ICompressionCodec
 
     String getCodecDesc() const override;
 
-    void useInfoAboutType(DataTypePtr data_type) override;
+    void useInfoAboutType(const DataTypePtr & data_type) override;
 
 protected:
     UInt32 doCompressData(const char * source, UInt32 source_size, char * dest) const override;
@@ -113,7 +113,4 @@ class CompressionCodecGorilla : public ICompressionCodec
     UInt8 data_bytes_size;
 };
 
-class CompressionCodecFactory;
-void registerCodecGorilla(CompressionCodecFactory & factory);
-
 }
diff --git a/src/Compression/CompressionCodecLZ4.h b/src/Compression/CompressionCodecLZ4.h
index a73dd48a36ca..0cfa694c4162 100644
--- a/src/Compression/CompressionCodecLZ4.h
+++ b/src/Compression/CompressionCodecLZ4.h
@@ -32,8 +32,6 @@ class CompressionCodecLZ4 : public ICompressionCodec
     mutable LZ4::PerformanceStatistics lz4_stat;
 };
 
-class CompressionCodecFactory;
-void registerCodecLZ4(CompressionCodecFactory & factory);
 
 class CompressionCodecLZ4HC : public CompressionCodecLZ4
 {
@@ -50,7 +48,4 @@ class CompressionCodecLZ4HC : public CompressionCodecLZ4
     const int level;
 };
 
-class CompressionCodecFactory;
-void registerCodecLZ4HC(CompressionCodecFactory & factory);
-
 }
diff --git a/src/Compression/CompressionCodecMultiple.cpp b/src/Compression/CompressionCodecMultiple.cpp
index d9a8c3cf8df1..e5adacb61739 100644
--- a/src/Compression/CompressionCodecMultiple.cpp
+++ b/src/Compression/CompressionCodecMultiple.cpp
@@ -105,12 +105,10 @@ UInt32 CompressionCodecMultiple::doCompressData(const char * source, UInt32 sour
     return 1 + codecs.size() + source_size;
 }
 
-void CompressionCodecMultiple::useInfoAboutType(DataTypePtr data_type)
+void CompressionCodecMultiple::useInfoAboutType(const DataTypePtr & data_type)
 {
     for (auto & codec : codecs)
-    {
         codec->useInfoAboutType(data_type);
-    }
 }
 
 void CompressionCodecMultiple::doDecompressData(const char * source, UInt32 source_size, char * dest, UInt32 decompressed_size) const
@@ -155,6 +153,7 @@ bool CompressionCodecMultiple::isCompression() const
     return false;
 }
 
+
 void registerCodecMultiple(CompressionCodecFactory & factory)
 {
     factory.registerSimpleCompressionCodec("Multiple", static_cast<UInt8>(CompressionMethodByte::Multiple), [&] ()
diff --git a/src/Compression/CompressionCodecMultiple.h b/src/Compression/CompressionCodecMultiple.h
index ff208d619cbf..7737e91ad928 100644
--- a/src/Compression/CompressionCodecMultiple.h
+++ b/src/Compression/CompressionCodecMultiple.h
@@ -8,7 +8,7 @@ namespace DB
 class CompressionCodecMultiple final : public ICompressionCodec
 {
 public:
-    CompressionCodecMultiple() = default;
+    CompressionCodecMultiple() = default;   /// Need for CompressionFactory to register codec by method byte.
     CompressionCodecMultiple(Codecs codecs_, bool sanity_check);
 
     uint8_t getMethodByte() const override;
@@ -17,7 +17,7 @@ class CompressionCodecMultiple final : public ICompressionCodec
 
     UInt32 getMaxCompressedDataSize(UInt32 uncompressed_size) const override;
 
-    void useInfoAboutType(DataTypePtr data_type) override;
+    void useInfoAboutType(const DataTypePtr & data_type) override;
 
 protected:
     UInt32 doCompressData(const char * source, UInt32 source_size, char * dest) const override;
@@ -33,8 +33,4 @@ class CompressionCodecMultiple final : public ICompressionCodec
     String getCodecDescImpl() const;
 };
 
-
-class CompressionCodecFactory;
-void registerCodecMultiple(CompressionCodecFactory & factory);
-
 }
diff --git a/src/Compression/CompressionCodecNone.h b/src/Compression/CompressionCodecNone.h
index ef7029e244b5..88bd87908106 100644
--- a/src/Compression/CompressionCodecNone.h
+++ b/src/Compression/CompressionCodecNone.h
@@ -25,6 +25,4 @@ class CompressionCodecNone : public ICompressionCodec
     bool isNone() const override { return true; }
 };
 
-class CompressionCodecFactory;
-void registerCodecNone(CompressionCodecFactory & factory);
 }
diff --git a/src/Compression/CompressionCodecT64.cpp b/src/Compression/CompressionCodecT64.cpp
index 53f9fb13d58e..ba0adc8ec658 100644
--- a/src/Compression/CompressionCodecT64.cpp
+++ b/src/Compression/CompressionCodecT64.cpp
@@ -630,16 +630,6 @@ void CompressionCodecT64::doDecompressData(const char * src, UInt32 src_size, ch
     throw Exception("Cannot decompress with T64", ErrorCodes::CANNOT_DECOMPRESS);
 }
 
-void CompressionCodecT64::useInfoAboutType(DataTypePtr data_type)
-{
-    if (data_type)
-    {
-        type_idx = typeIdx(data_type);
-        if (type_idx == TypeIndex::Nothing)
-            throw Exception("T64 codec is not supported for specified type", ErrorCodes::ILLEGAL_SYNTAX_FOR_CODEC_TYPE);
-    }
-}
-
 uint8_t CompressionCodecT64::getMethodByte() const
 {
     return codecId();
diff --git a/src/Compression/CompressionCodecT64.h b/src/Compression/CompressionCodecT64.h
index cafc9959a9d9..f5e142378df7 100644
--- a/src/Compression/CompressionCodecT64.h
+++ b/src/Compression/CompressionCodecT64.h
@@ -3,6 +3,7 @@
 #include <Core/Types.h>
 #include <Compression/ICompressionCodec.h>
 
+
 namespace DB
 {
 
@@ -33,11 +34,9 @@ class CompressionCodecT64 : public ICompressionCodec
     uint8_t getMethodByte() const override;
     String getCodecDesc() const override
     {
-        return String("T64") + ((variant == Variant::Byte) ? "" : "(\'bit\')");
+        return variant == Variant::Byte ? "T64" : "T64('bit')";
     }
 
-    void useInfoAboutType(DataTypePtr data_type) override;
-
 protected:
     UInt32 doCompressData(const char * src, UInt32 src_size, char * dst) const override;
     void doDecompressData(const char * src, UInt32 src_size, char * dst, UInt32 uncompressed_size) const override;
@@ -56,7 +55,4 @@ class CompressionCodecT64 : public ICompressionCodec
     Variant variant;
 };
 
-class CompressionCodecFactory;
-void registerCodecT64(CompressionCodecFactory & factory);
-
 }
diff --git a/src/Compression/CompressionCodecZSTD.h b/src/Compression/CompressionCodecZSTD.h
index 234f49b279be..d0790f2f2d7d 100644
--- a/src/Compression/CompressionCodecZSTD.h
+++ b/src/Compression/CompressionCodecZSTD.h
@@ -33,8 +33,4 @@ class CompressionCodecZSTD : public ICompressionCodec
     const int level;
 };
 
-
-class CompressionCodecFactory;
-void registerCodecZSTD(CompressionCodecFactory & factory);
-
 }
diff --git a/src/Compression/CompressionFactory.cpp b/src/Compression/CompressionFactory.cpp
index 2598fc07b08c..e9dee053c2ce 100644
--- a/src/Compression/CompressionFactory.cpp
+++ b/src/Compression/CompressionFactory.cpp
@@ -9,7 +9,6 @@
 #include <IO/ReadBuffer.h>
 #include <Parsers/queryToString.h>
 #include <Compression/CompressionCodecMultiple.h>
-#include <Compression/CompressionCodecLZ4.h>
 #include <IO/WriteHelpers.h>
 
 
@@ -146,24 +145,28 @@ void CompressionCodecFactory::registerSimpleCompressionCodec(
 
 
 void registerCodecNone(CompressionCodecFactory & factory);
+void registerCodecLZ4(CompressionCodecFactory & factory);
+void registerCodecLZ4HC(CompressionCodecFactory & factory);
 void registerCodecZSTD(CompressionCodecFactory & factory);
 void registerCodecDelta(CompressionCodecFactory & factory);
 void registerCodecT64(CompressionCodecFactory & factory);
 void registerCodecDoubleDelta(CompressionCodecFactory & factory);
 void registerCodecGorilla(CompressionCodecFactory & factory);
+void registerCodecMultiple(CompressionCodecFactory & factory);
 
 CompressionCodecFactory::CompressionCodecFactory()
 {
-    default_codec = std::make_shared<CompressionCodecLZ4>();
     registerCodecLZ4(*this);
     registerCodecNone(*this);
     registerCodecZSTD(*this);
-    registerCodecMultiple(*this);
     registerCodecLZ4HC(*this);
     registerCodecDelta(*this);
     registerCodecT64(*this);
     registerCodecDoubleDelta(*this);
     registerCodecGorilla(*this);
+    registerCodecMultiple(*this);
+
+    default_codec = get("LZ4", {}, false);
 }
 
 CompressionCodecFactory & CompressionCodecFactory::instance()
diff --git a/src/Compression/ICompressionCodec.cpp b/src/Compression/ICompressionCodec.cpp
index 3c7766ba508e..9a33def868be 100644
--- a/src/Compression/ICompressionCodec.cpp
+++ b/src/Compression/ICompressionCodec.cpp
@@ -1,12 +1,9 @@
 #include "ICompressionCodec.h"
 
-#include <Compression/LZ4_decompress_faster.h>
+#include <cassert>
+
 #include <common/unaligned.h>
-#include <Common/hex.h>
-#include <IO/WriteHelpers.h>
-#include <IO/ReadBufferFromFileBase.h>
-#include <Common/typeid_cast.h>
-#include <Compression/CompressionFactory.h>
+#include <Common/Exception.h>
 
 
 namespace DB
@@ -39,12 +36,12 @@ UInt32 ICompressionCodec::decompress(const char * source, UInt32 source_size, ch
 
     UInt8 header_size = getHeaderSize();
     if (source_size < header_size)
-        throw Exception("Can't decompress data: the compressed data size (" + toString(source_size)
-            + ", this should include header size) is less than the header size (" + toString(header_size) + ")", ErrorCodes::CORRUPTED_DATA);
+        throw Exception(ErrorCodes::CORRUPTED_DATA, "Can't decompress data: the compressed data size ({}), this should include header size) is less than the header size ({})", source_size, size_t(header_size));
 
+    uint8_t our_method = getMethodByte();
     uint8_t method = source[0];
-    if (method != getMethodByte())
-        throw Exception("Can't decompress data with codec byte " + toString(method) + " from codec with byte " + toString(method), ErrorCodes::CANNOT_DECOMPRESS);
+    if (method != our_method)
+        throw Exception(ErrorCodes::CANNOT_DECOMPRESS, "Can't decompress data with codec byte {} using codec with byte {}", method, our_method);
 
     UInt32 decompressed_size = readDecompressedBlockSize(source);
     doDecompressData(&source[header_size], source_size - header_size, dest, decompressed_size);
diff --git a/src/Compression/ICompressionCodec.h b/src/Compression/ICompressionCodec.h
index cac42ee61f48..dab2f8176161 100644
--- a/src/Compression/ICompressionCodec.h
+++ b/src/Compression/ICompressionCodec.h
@@ -1,14 +1,10 @@
 #pragma once
 
 #include <memory>
-#include <IO/ReadBuffer.h>
-#include <IO/WriteBuffer.h>
-#include <IO/BufferWithOwnMemory.h>
-#include <DataTypes/IDataType.h>
 #include <boost/noncopyable.hpp>
-#include <IO/UncompressedCache.h>
-#include <Compression/LZ4_decompress_faster.h>
 #include <Compression/CompressionInfo.h>
+#include <Core/Types.h>
+
 
 namespace DB
 {
@@ -18,6 +14,10 @@ class ICompressionCodec;
 using CompressionCodecPtr = std::shared_ptr<ICompressionCodec>;
 using Codecs = std::vector<CompressionCodecPtr>;
 
+class IDataType;
+using DataTypePtr = std::shared_ptr<const IDataType>;
+
+
 /**
 * Represents interface for compression codecs like LZ4, ZSTD, etc.
 */
@@ -39,7 +39,10 @@ class ICompressionCodec : private boost::noncopyable
     UInt32 decompress(const char * source, UInt32 source_size, char * dest) const;
 
     /// Number of bytes, that will be used to compress uncompressed_size bytes with current codec
-    virtual UInt32 getCompressedReserveSize(UInt32 uncompressed_size) const { return getHeaderSize() + getMaxCompressedDataSize(uncompressed_size); }
+    virtual UInt32 getCompressedReserveSize(UInt32 uncompressed_size) const
+    {
+        return getHeaderSize() + getMaxCompressedDataSize(uncompressed_size);
+    }
 
     /// Some codecs (LZ4, for example) require additional bytes at end of buffer
     virtual UInt32 getAdditionalSizeAtTheEndOfBuffer() const { return 0; }
@@ -57,7 +60,7 @@ class ICompressionCodec : private boost::noncopyable
     static uint8_t readMethod(const char * source);
 
     /// Some codecs may use information about column type which appears after codec creation
-    virtual void useInfoAboutType(DataTypePtr /* data_type */) {}
+    virtual void useInfoAboutType(const DataTypePtr & /* data_type */) {}
 
     /// Return true if this codec actually compressing something. Otherwise it can be just transformation that helps compression (e.g. Delta).
     virtual bool isCompression() const = 0;
diff --git a/src/Storages/MergeTree/IMergeTreeDataPart.h b/src/Storages/MergeTree/IMergeTreeDataPart.h
index 5e10fbcfadbf..5c32882131db 100644
--- a/src/Storages/MergeTree/IMergeTreeDataPart.h
+++ b/src/Storages/MergeTree/IMergeTreeDataPart.h
@@ -37,6 +37,8 @@ using VolumePtr = std::shared_ptr<IVolume>;
 class IMergeTreeReader;
 class IMergeTreeDataPartWriter;
 class MarkCache;
+class UncompressedCache;
+
 
 namespace ErrorCodes
 {
diff --git a/src/Storages/MergeTree/MergeTreeDataPartInMemory.h b/src/Storages/MergeTree/MergeTreeDataPartInMemory.h
index f90de0195e24..1fceb47cba87 100644
--- a/src/Storages/MergeTree/MergeTreeDataPartInMemory.h
+++ b/src/Storages/MergeTree/MergeTreeDataPartInMemory.h
@@ -5,6 +5,8 @@
 namespace DB
 {
 
+class UncompressedCache;
+
 class MergeTreeDataPartInMemory : public IMergeTreeDataPart
 {
 public:
diff --git a/src/Storages/StorageURL.cpp b/src/Storages/StorageURL.cpp
index fd9dde695ffd..55138bf6650c 100644
--- a/src/Storages/StorageURL.cpp
+++ b/src/Storages/StorageURL.cpp
@@ -131,6 +131,25 @@ StorageURLBlockOutputStream::StorageURLBlockOutputStream(const Poco::URI & uri,
     writer = FormatFactory::instance().getOutput(format, *write_buf, sample_block, context);
 }
 
+
+void StorageURLBlockOutputStream::write(const Block & block)
+{
+    writer->write(block);
+}
+
+void StorageURLBlockOutputStream::writePrefix()
+{
+    writer->writePrefix();
+}
+
+void StorageURLBlockOutputStream::writeSuffix()
+{
+    writer->writeSuffix();
+    writer->flush();
+    write_buf->finalize();
+}
+
+
 std::string IStorageURLBase::getReadMethod() const
 {
     return Poco::Net::HTTPRequest::HTTP_GET;
diff --git a/src/Storages/StorageURL.h b/src/Storages/StorageURL.h
index 67ad95d2f91c..69b22e5a1e40 100644
--- a/src/Storages/StorageURL.h
+++ b/src/Storages/StorageURL.h
@@ -83,22 +83,9 @@ class StorageURLBlockOutputStream : public IBlockOutputStream
         return sample_block;
     }
 
-    void write(const Block & block) override
-    {
-        writer->write(block);
-    }
-
-    void writePrefix() override
-    {
-        writer->writePrefix();
-    }
-
-    void writeSuffix() override
-    {
-        writer->writeSuffix();
-        writer->flush();
-        write_buf->finalize();
-    }
+    void write(const Block & block) override;
+    void writePrefix() override;
+    void writeSuffix() override;
 
 private:
     Block sample_block;
diff --git a/src/Storages/System/StorageSystemStackTrace.cpp b/src/Storages/System/StorageSystemStackTrace.cpp
index bdce70894d58..bd9915237d45 100644
--- a/src/Storages/System/StorageSystemStackTrace.cpp
+++ b/src/Storages/System/StorageSystemStackTrace.cpp
@@ -14,6 +14,7 @@
 #include <DataTypes/DataTypeArray.h>
 #include <IO/ReadHelpers.h>
 #include <Common/PipeFDs.h>
+#include <Common/CurrentThread.h>
 #include <common/getThreadId.h>
 
 
