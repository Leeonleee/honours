{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 79939,
  "instance_id": "ClickHouse__ClickHouse-79939",
  "issue_numbers": [
    "73507"
  ],
  "base_commit": "a4d894eac686016b3bfbf22a1d2b66ee646d4b4e",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionTopK.cpp b/src/AggregateFunctions/AggregateFunctionTopK.cpp\nindex 484633a76ff6..f2e40cc89546 100644\n--- a/src/AggregateFunctions/AggregateFunctionTopK.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionTopK.cpp\n@@ -279,7 +279,7 @@ class AggregateFunctionTopKGeneric final\n                 size,\n                 getName(),\n                 TOP_K_MAX_SIZE);\n-        set.resize(size);\n+        set.resize(std::min(size + 1, size_t(reserved)));\n         for (size_t i = 0; i < size; ++i)\n         {\n             auto ref = readStringBinaryInto(*arena, buf);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03448_topk_merging.reference b/tests/queries/0_stateless/03448_topk_merging.reference\nnew file mode 100644\nindex 000000000000..781066625b86\n--- /dev/null\n+++ b/tests/queries/0_stateless/03448_topk_merging.reference\n@@ -0,0 +1,39 @@\n+6\ta\t30\t0\n+6\tb\t30\t0\n+6\tc\t30\t0\n+6\td\t20\t0\n+6\te\t20\t0\n+8\ti\t30\t0\n+8\tj\t30\t0\n+8\tk\t30\t0\n+8\td\t20\t0\n+8\te\t20\t0\n+9\tl\t30\t0\n+9\tm\t30\t0\n+9\tn\t30\t0\n+9\td\t20\t0\n+9\te\t20\t0\n+10\tw\t30\t0\n+10\ty\t30\t0\n+10\tz\t30\t0\n+10\td\t20\t0\n+10\te\t20\t0\n+11\ti\t30\t0\n+11\tj\t30\t0\n+11\tk\t30\t0\n+11\td\t20\t0\n+11\te\t20\t0\n+d\t100\t0\n+e\t100\t0\n+i\t60\t0\n+j\t60\t0\n+k\t60\t0\n+a\t30\t0\n+b\t30\t0\n+c\t30\t0\n+l\t30\t0\n+m\t30\t0\n+n\t30\t0\n+w\t30\t0\n+y\t30\t0\n+z\t30\t0\ndiff --git a/tests/queries/0_stateless/03448_topk_merging.sql b/tests/queries/0_stateless/03448_topk_merging.sql\nnew file mode 100644\nindex 000000000000..416f2bcd2dbb\n--- /dev/null\n+++ b/tests/queries/0_stateless/03448_topk_merging.sql\n@@ -0,0 +1,66 @@\n+DROP TABLE IF EXISTS topk_test;\n+\n+CREATE TABLE topk_test (\n+    foo UInt64,\n+    top_items AggregateFunction(topKWeighted(100, 3, 'counts'), String, UInt64)\n+)\n+ENGINE = AggregatingMergeTree()\n+ORDER BY (foo);\n+\n+INSERT INTO topk_test\n+SELECT\n+    6 AS foo,\n+    topKWeightedState(100, 3, 'counts')(item, toUInt64(10))\n+FROM (\n+    SELECT arrayJoin(['a','a','a','b','b','b','c','c','c','d','d','e','e']) AS item\n+);\n+\n+INSERT INTO topk_test\n+SELECT\n+    8 AS foo,\n+    topKWeightedState(100, 3, 'counts')(item, toUInt64(10))\n+FROM (\n+    SELECT arrayJoin(['i','i','i','j','j','j','k','k','k','d','d','e','e']) AS item\n+);\n+\n+INSERT INTO topk_test\n+SELECT\n+    9 AS foo,\n+    topKWeightedState(100, 3, 'counts')(item, toUInt64(10))\n+FROM (\n+    SELECT arrayJoin(['l','l','l','m','m','m','n','n','n','d','d','e','e']) AS item\n+);\n+\n+INSERT INTO topk_test\n+SELECT\n+    10 AS foo,\n+    topKWeightedState(100, 3, 'counts')(item, toUInt64(10))\n+FROM (\n+    SELECT arrayJoin(['z','z','z','w','w','w','y','y','y','d','d','e','e']) AS item\n+);\n+\n+INSERT INTO topk_test\n+SELECT\n+    11 AS foo,\n+    topKWeightedState(100, 3, 'counts')(item, toUInt64(10))\n+FROM (\n+    SELECT arrayJoin(['i','i','i','j','j','j','k','k','k','d','d','e','e']) AS item\n+);\n+\n+SELECT * FROM (\n+    SELECT\n+        foo,\n+        untuple(arrayJoin(topKWeightedMerge(100, 3, 'counts')(top_items))) AS top\n+    FROM topk_test\n+    GROUP BY foo\n+)\n+ORDER BY foo, top.count DESC, top.item;\n+\n+SELECT * FROM (\n+    SELECT\n+        untuple(arrayJoin(topKWeightedMerge(100, 3, 'counts')(top_items))) AS top\n+    FROM topk_test FINAL\n+)\n+ORDER BY top.count DESC, top.item;\n+\n+DROP TABLE topk_test;\n",
  "problem_statement": "AggregatingMergeTree topK merging across buckets has unexpected results\n\r\n**Company or project name**\r\nCompany is on Clickhouse Cloud (LangChain). \r\n\r\n**Describe the unexpected behaviour**\r\nTopK not merging correctly across different aggregation buckets when using AggregatedMergeTree.  \r\n\r\n**How to reproduce**\r\nhttps://fiddle.clickhouse.com/9b4a0d4f-9ec4-4689-8b75-392a0ccdb7bb\r\n\r\n```\r\nCREATE TABLE topk_test\r\n(\r\n    tenant_id UUID,\r\n    hour DateTime,\r\n    top_items AggregateFunction(topK(10), String)\r\n)\r\nENGINE = AggregatingMergeTree()\r\nORDER BY (tenant_id, hour);\r\n\r\n\r\nINSERT INTO topk_test\r\nSELECT\r\n    '00000000-0000-0000-0000-000000000000' AS tenant_id,\r\n    toDateTime('2024-12-14 06:00:00') AS hour,\r\n    topKState(10)(item)\r\nFROM (\r\n    SELECT arrayJoin(['a','a','a','b','b','b','c','c','c','d','d','e','e']) AS item\r\n);\r\n\r\nINSERT INTO topk_test\r\nSELECT\r\n    '00000000-0000-0000-0000-000000000000' AS tenant_id,\r\n    toDateTime('2024-12-14 07:00:00') AS hour,\r\n    topKState(10)(item)\r\nFROM (\r\n    SELECT arrayJoin(['f','f','f','g','g','g','h','h','h','d','d','e','e']) AS item\r\n);\r\n\r\nINSERT INTO topk_test_4\r\nSELECT\r\n    '00000000-0000-0000-0000-000000000000' AS tenant_id,\r\n    toDateTime('2024-12-14 08:00:00') AS hour,\r\n    topKState(10)(item)\r\nFROM (\r\n    SELECT arrayJoin(['i','i','i','j','j','j','k','k','k','d','d','e','e']) AS item\r\n);\r\n\r\nINSERT INTO topk_test\r\nSELECT\r\n    '00000000-0000-0000-0000-000000000000' AS tenant_id,\r\n    toDateTime('2024-12-14 09:00:00') AS hour,\r\n    topKState(10)(item)\r\nFROM (\r\n    SELECT arrayJoin(['l','l','l','m','m','m','n','n','n','d','d','e','e']) AS item\r\n);\r\n\r\nINSERT INTO topk_test\r\nSELECT\r\n    '00000000-0000-0000-0000-000000000000' AS tenant_id,\r\n    toDateTime('2024-12-14 10:00:00') AS hour,\r\n    topKState(10)(item)\r\nFROM (\r\n    SELECT arrayJoin(['z','z','z','w','w','w','y','y','y','d','d','e','e']) AS item\r\n);\r\n\r\nINSERT INTO topk_test\r\nSELECT\r\n    '00000000-0000-0000-0000-000000000000' AS tenant_id,\r\n    toDateTime('2024-12-14 11:00:00') AS hour,\r\n    topKState(10)(item)\r\nFROM (\r\n    SELECT arrayJoin(['i','i','i','j','j','j','k','k','k','d','d','e','e']) AS item\r\n);\r\n\r\nSELECT\r\n    hour,\r\n    topKMerge(10)(top_items) AS top3\r\nFROM topk_test\r\nWHERE tenant_id = '00000000-0000-0000-0000-000000000000'\r\nGROUP BY hour\r\nORDER BY hour;\r\n\r\n-- global merge: this is wrong\r\nSELECT\r\n    topKMerge(10)(top_items) AS global_top3\r\nFROM topk_test\r\nWHERE tenant_id = '00000000-0000-0000-0000-000000000000';\r\n```\r\n\r\n**Expected behavior**\r\nFor the global merge, shouldShould merge the topK stats correctly, global top 3 should be:  ['d', 'e', _]\r\n\r\n**Additional context**\r\nTrying to improve performance for topK stats -  currently this is calculated via raw table but performance is not good for large datasets. So trying to move to aggregate this and bucket it per hour using AggregatedMergeTree and then query the aggregated table. However, that requires merging across time periods. \r\n\n",
  "hints_text": "`topK` is approximate function\nhttps://fiddle.clickhouse.com/0dfe4552-e684-429f-927d-0e3b627501d8\r\n\r\nHaving `c` go from { count: 3, error: 0 } to { count 13, error: 10 } seems abnormally high. Either the algorithm is bad, or our implementation is wrong, but I have a hard time accepting this is ok.\nWe're running into the same issue here. There are fewer unique values in the table than the `topKWeighted` aggr has capacity, yet we randomly see huge error values when the topK aggregation is built with a MV that populates an `AggregatingMergeTree`. Running the same `topKWeighted` on the whole source table (without MV) results in an error of 0. It seems that the [merge implementation](https://github.com/ClickHouse/ClickHouse/blob/f5c40e77af9d415aa746071cc9d8ed08a0487b58/src/Common/SpaceSaving.h#L203-L265) is buggy somehow.\nMinimized reproducer (one fewer `INSERT`, no `tenant_id`), switched to `topKWeighted` with count reporting enabled, capacity raised to 100:\n\n```sql\nDROP TABLE IF EXISTS topk_test;\n\nCREATE TABLE topk_test\n(\n    hour DateTime,\n    top_items AggregateFunction(topKWeighted(100, 3, 'counts'), String, UInt64)\n)\nENGINE = AggregatingMergeTree()\nORDER BY (hour);\n\nINSERT INTO topk_test\nSELECT\n    toDateTime('2024-12-14 06:00:00') AS hour,\n    topKWeightedState(100, 3, 'counts')(item, toUInt64(10))\nFROM (\n    SELECT arrayJoin(['a','a','a','b','b','b','c','c','c','d','d','e','e']) AS item\n);\n\nINSERT INTO topk_test\nSELECT\n    toDateTime('2024-12-14 08:00:00') AS hour,\n    topKWeightedState(100, 3, 'counts')(item, toUInt64(10))\nFROM (\n    SELECT arrayJoin(['i','i','i','j','j','j','k','k','k','d','d','e','e']) AS item\n);\n\nINSERT INTO topk_test\nSELECT\n    toDateTime('2024-12-14 09:00:00') AS hour,\n    topKWeightedState(100, 3, 'counts')(item, toUInt64(10))\nFROM (\n    SELECT arrayJoin(['l','l','l','m','m','m','n','n','n','d','d','e','e']) AS item\n);\n\nINSERT INTO topk_test\nSELECT\n    toDateTime('2024-12-14 10:00:00') AS hour,\n    topKWeightedState(100, 3, 'counts')(item, toUInt64(10))\nFROM (\n    SELECT arrayJoin(['z','z','z','w','w','w','y','y','y','d','d','e','e']) AS item\n);\n\nINSERT INTO topk_test\nSELECT\n    toDateTime('2024-12-14 11:00:00') AS hour,\n    topKWeightedState(100, 3, 'counts')(item, toUInt64(10))\nFROM (\n    SELECT arrayJoin(['i','i','i','j','j','j','k','k','k','d','d','e','e']) AS item\n);\n\nSELECT\n    hour,\n    untuple(arrayJoin(topKWeightedMerge(100, 3, 'counts')(top_items))) AS top3\nFROM topk_test\nGROUP BY hour\nORDER BY hour;\n\nSELECT\n    untuple(arrayJoin(topKWeightedMerge(100, 3, 'counts')(top_items))) AS global_top3\nFROM topk_test;\n```\n\n```\nSELECT\n    hour,\n    untuple(arrayJoin(topKWeightedMerge(100, 3, 'counts')(top_items))) AS top3\nFROM topk_test\nGROUP BY hour\nORDER BY hour ASC\n\nQuery id: a7442118-3e01-48de-8e46-ce61199b3ad5\n\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500hour\u2500\u252c\u2500top3.item\u2500\u252c\u2500top3.count\u2500\u252c\u2500top3.error\u2500\u2510\n 1. \u2502 2024-12-14 06:00:00 \u2502 a         \u2502         30 \u2502          0 \u2502\n 2. \u2502 2024-12-14 06:00:00 \u2502 b         \u2502         30 \u2502          0 \u2502\n 3. \u2502 2024-12-14 06:00:00 \u2502 c         \u2502         30 \u2502          0 \u2502\n 4. \u2502 2024-12-14 06:00:00 \u2502 d         \u2502         20 \u2502          0 \u2502\n 5. \u2502 2024-12-14 06:00:00 \u2502 e         \u2502         20 \u2502          0 \u2502\n 6. \u2502 2024-12-14 08:00:00 \u2502 i         \u2502         30 \u2502          0 \u2502\n 7. \u2502 2024-12-14 08:00:00 \u2502 j         \u2502         30 \u2502          0 \u2502\n 8. \u2502 2024-12-14 08:00:00 \u2502 k         \u2502         30 \u2502          0 \u2502\n 9. \u2502 2024-12-14 08:00:00 \u2502 d         \u2502         20 \u2502          0 \u2502\n10. \u2502 2024-12-14 08:00:00 \u2502 e         \u2502         20 \u2502          0 \u2502\n11. \u2502 2024-12-14 09:00:00 \u2502 l         \u2502         30 \u2502          0 \u2502\n12. \u2502 2024-12-14 09:00:00 \u2502 m         \u2502         30 \u2502          0 \u2502\n13. \u2502 2024-12-14 09:00:00 \u2502 n         \u2502         30 \u2502          0 \u2502\n14. \u2502 2024-12-14 09:00:00 \u2502 d         \u2502         20 \u2502          0 \u2502\n15. \u2502 2024-12-14 09:00:00 \u2502 e         \u2502         20 \u2502          0 \u2502\n16. \u2502 2024-12-14 10:00:00 \u2502 z         \u2502         30 \u2502          0 \u2502\n17. \u2502 2024-12-14 10:00:00 \u2502 w         \u2502         30 \u2502          0 \u2502\n18. \u2502 2024-12-14 10:00:00 \u2502 y         \u2502         30 \u2502          0 \u2502\n19. \u2502 2024-12-14 10:00:00 \u2502 d         \u2502         20 \u2502          0 \u2502\n20. \u2502 2024-12-14 10:00:00 \u2502 e         \u2502         20 \u2502          0 \u2502\n21. \u2502 2024-12-14 11:00:00 \u2502 i         \u2502         30 \u2502          0 \u2502\n22. \u2502 2024-12-14 11:00:00 \u2502 j         \u2502         30 \u2502          0 \u2502\n23. \u2502 2024-12-14 11:00:00 \u2502 k         \u2502         30 \u2502          0 \u2502\n24. \u2502 2024-12-14 11:00:00 \u2502 d         \u2502         20 \u2502          0 \u2502\n25. \u2502 2024-12-14 11:00:00 \u2502 e         \u2502         20 \u2502          0 \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n25 rows in set. Elapsed: 0.008 sec. \n\n\nSELECT untuple(arrayJoin(topKWeightedMerge(100, 3, 'counts')(top_items))) AS global_top3\nFROM topk_test\n\nQuery id: 838384b0-5f88-472a-953c-bdd1612b7655\n\n    \u250c\u2500global_top3.item\u2500\u252c\u2500global_top3.count\u2500\u252c\u2500global_top3.error\u2500\u2510\n 1. \u2502 c                \u2502               110 \u2502                80 \u2502\n 2. \u2502 b                \u2502               110 \u2502                80 \u2502\n 3. \u2502 a                \u2502               110 \u2502                80 \u2502\n 4. \u2502 e                \u2502               100 \u2502                 0 \u2502\n 5. \u2502 d                \u2502               100 \u2502                 0 \u2502\n 6. \u2502 k                \u2502               100 \u2502                40 \u2502\n 7. \u2502 j                \u2502               100 \u2502                40 \u2502\n 8. \u2502 i                \u2502               100 \u2502                40 \u2502\n 9. \u2502 n                \u2502                70 \u2502                40 \u2502\n10. \u2502 m                \u2502                70 \u2502                40 \u2502\n11. \u2502 l                \u2502                70 \u2502                40 \u2502\n12. \u2502 y                \u2502                50 \u2502                20 \u2502\n13. \u2502 w                \u2502                50 \u2502                20 \u2502\n14. \u2502 z                \u2502                50 \u2502                20 \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\nReplacing the fancy in-place merge logic [here](https://github.com/ClickHouse/ClickHouse/blob/f5c40e77af9d415aa746071cc9d8ed08a0487b58/src/Common/SpaceSaving.h#L203-L265) with a dumb one:\n\n```c++\n    void merge(const Self & rhs)\n    {\n        for (auto & counter : rhs.counter_list) {\n            this->insert(counter->key, counter->count, counter->error);\n        }\n    }\n```\n\nResolves the issue. Definitely a bug in the merge code. \n\nI'm not familiar with the DS being implemented here, but one thing that strikes me as suspicious is that the alpha map is not being updated at all in `merge`, though I suspect that is an unrelated issue (if it's an issue at all).\n\n**Edit:** it seems that the instances constructed from the table have their capacity set == their size (5 in the example above), which then triggers the error adding case. They should probably be constructed with the same capacity as the function defined on the table?\n\n**Edit 2:** this patch fixes it:\n\n```diff\ndiff --git a/src/AggregateFunctions/AggregateFunctionTopK.cpp b/src/AggregateFunctions/AggregateFunctionTopK.cpp\nindex 484633a76ff..cfcecc36eb2 100644\n--- a/src/AggregateFunctions/AggregateFunctionTopK.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionTopK.cpp\n@@ -279,7 +279,7 @@ public:\n                 size,\n                 getName(),\n                 TOP_K_MAX_SIZE);\n-        set.resize(size);\n+        set.resize(reserved);\n         for (size_t i = 0; i < size; ++i)\n         {\n             auto ref = readStringBinaryInto(*arena, buf);\n```\n\nHowever, this comes at the cost of allocating more memory in case the records read from the table aren't full. Would that be acceptable?",
  "created_at": "2025-05-07T15:58:44Z",
  "modified_files": [
    "src/AggregateFunctions/AggregateFunctionTopK.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03448_topk_merging.reference",
    "b/tests/queries/0_stateless/03448_topk_merging.sql"
  ]
}