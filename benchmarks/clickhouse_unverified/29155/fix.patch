diff --git a/programs/server/config.xml b/programs/server/config.xml
index f9a3a5030d94..35d86e70f690 100644
--- a/programs/server/config.xml
+++ b/programs/server/config.xml
@@ -62,6 +62,27 @@
         -->
     </logger>
 
+    <!-- Add headers to response in options request. OPTIONS method is used in CORS preflight requests. -->
+    <!-- It is off by default. Next headers are obligate for CORS.-->
+    <!-- http_options_response>
+        <header>
+            <name>Access-Control-Allow-Origin</name>
+            <value>*</value>
+        </header>
+        <header>
+            <name>Access-Control-Allow-Headers</name>
+            <value>origin, x-requested-with</value>
+        </header>
+        <header>
+            <name>Access-Control-Allow-Methods</name>
+            <value>POST, GET, OPTIONS</value>
+        </header>
+        <header>
+            <name>Access-Control-Max-Age</name>
+            <value>86400</value>
+        </header>
+    </http_options_response -->
+
     <!-- It is the name that will be shown in the clickhouse-client.
          By default, anything with "production" will be highlighted in red in query prompt.
     -->
diff --git a/src/Interpreters/ClientInfo.h b/src/Interpreters/ClientInfo.h
index 661497c88f5f..ed00de6e8034 100644
--- a/src/Interpreters/ClientInfo.h
+++ b/src/Interpreters/ClientInfo.h
@@ -35,8 +35,9 @@ class ClientInfo
     enum class HTTPMethod : uint8_t
     {
         UNKNOWN = 0,
-        GET = 1,
-        POST = 2,
+        GET     = 1,
+        POST    = 2,
+        OPTIONS = 3
     };
 
     enum class QueryKind : uint8_t
diff --git a/src/Server/HTTPHandler.cpp b/src/Server/HTTPHandler.cpp
index aefa1fe68e1b..b7e7ac2ac33a 100644
--- a/src/Server/HTTPHandler.cpp
+++ b/src/Server/HTTPHandler.cpp
@@ -24,13 +24,16 @@
 #include <Server/HTTPHandlerFactory.h>
 #include <Server/HTTPHandlerRequestFilter.h>
 #include <Server/IServer.h>
+#include <base/logger_useful.h>
 #include <Common/SettingsChanges.h>
 #include <Common/StringUtils/StringUtils.h>
 #include <Common/escapeForFileName.h>
 #include <Common/setThreadName.h>
 #include <Common/typeid_cast.h>
+
 #include <base/getFQDNOrHostName.h>
 #include <base/scope_guard.h>
+#include <Server/HTTP/HTTPResponse.h>
 
 #if !defined(ARCADIA_BUILD)
 #    include <Common/config.h>
@@ -107,6 +110,45 @@ namespace ErrorCodes
     extern const int HTTP_LENGTH_REQUIRED;
 }
 
+namespace
+{
+bool tryAddHeadersFromConfig(HTTPServerResponse & response, const Poco::Util::LayeredConfiguration & config)
+{
+    if (config.has("http_options_response"))
+    {
+        Strings config_keys;
+        config.keys("http_options_response", config_keys);
+        for (const std::string & config_key : config_keys)
+        {
+            if (config_key == "header" || config_key.starts_with("header["))
+            {
+                /// If there is empty header name, it will not be processed and message about it will be in logs
+                if (config.getString("http_options_response." + config_key + ".name", "").empty())
+                    LOG_WARNING(&Poco::Logger::get("processOptionsRequest"), "Empty header was found in config. It will not be processed.");
+                else
+                    response.add(config.getString("http_options_response." + config_key + ".name", ""),
+                                    config.getString("http_options_response." + config_key + ".value", ""));
+
+            }
+        }
+        return true;
+    }
+    return false;
+}
+
+/// Process options request. Useful for CORS.
+void processOptionsRequest(HTTPServerResponse & response, const Poco::Util::LayeredConfiguration & config)
+{
+    /// If can add some headers from config
+    if (tryAddHeadersFromConfig(response, config))
+    {
+        response.setKeepAlive(false);
+        response.setStatusAndReason(HTTPResponse::HTTP_NO_CONTENT);
+        response.send();
+    }
+}
+}
+
 static String base64Decode(const String & encoded)
 {
     String decoded;
@@ -703,9 +745,16 @@ void HTTPHandler::processQuery(
     if (in_post_compressed && settings.http_native_compression_disable_checksumming_on_decompress)
         static_cast<CompressedReadBuffer &>(*in_post_maybe_compressed).disableChecksumming();
 
-    /// Add CORS header if 'add_http_cors_header' setting is turned on and the client passed
-    /// Origin header.
-    used_output.out->addHeaderCORS(settings.add_http_cors_header && !request.get("Origin", "").empty());
+    /// Add CORS header if 'add_http_cors_header' setting is turned on send * in Access-Control-Allow-Origin,
+    /// or if config has http_options_response, which means that there
+    /// are some headers to be sent, and the client passed Origin header.
+    if (!request.get("Origin", "").empty())
+    {
+        if (config.has("http_options_response"))
+            tryAddHeadersFromConfig(response, config);
+        else if (settings.add_http_cors_header)
+            used_output.out->addHeaderCORS(true);
+    }
 
     auto append_callback = [context = context] (ProgressCallback callback)
     {
@@ -854,6 +903,11 @@ void HTTPHandler::handleRequest(HTTPServerRequest & request, HTTPServerResponse
 
     try
     {
+        if (request.getMethod() == HTTPServerRequest::HTTP_OPTIONS)
+        {
+            processOptionsRequest(response, server.config());
+            return;
+        }
         response.setContentType("text/plain; charset=UTF-8");
         response.set("X-ClickHouse-Server-Display-Name", server_display_name);
         /// For keep-alive to work.
diff --git a/src/Server/HTTPHandlerFactory.cpp b/src/Server/HTTPHandlerFactory.cpp
index 62225e7e7944..526b86a5c28e 100644
--- a/src/Server/HTTPHandlerFactory.cpp
+++ b/src/Server/HTTPHandlerFactory.cpp
@@ -123,7 +123,7 @@ static inline HTTPRequestHandlerFactoryPtr createInterserverHTTPHandlerFactory(I
     addCommonDefaultHandlersFactory(*factory, server);
 
     auto main_handler = std::make_shared<HandlingRuleHTTPHandlerFactory<InterserverIOHTTPHandler>>(server);
-    main_handler->allowPostGetOrHeadRequest();
+    main_handler->allowPostAndGetParamsAndOptionsRequest();
     factory->addHandler(main_handler);
 
     return factory;
@@ -180,7 +180,7 @@ void addDefaultHandlersFactory(HTTPRequestHandlerFactoryMain & factory, IServer
     addCommonDefaultHandlersFactory(factory, server);
 
     auto query_handler = std::make_shared<HandlingRuleHTTPHandlerFactory<DynamicQueryHandler>>(server, "query");
-    query_handler->allowPostGetOrHeadRequest();
+    query_handler->allowPostAndGetParamsAndOptionsRequest();
     factory.addHandler(query_handler);
 
     /// We check that prometheus handler will be served on current (default) port.
diff --git a/src/Server/HTTPHandlerFactory.h b/src/Server/HTTPHandlerFactory.h
index ed5431113eff..ef16806dfdc2 100644
--- a/src/Server/HTTPHandlerFactory.h
+++ b/src/Server/HTTPHandlerFactory.h
@@ -103,14 +103,15 @@ class HandlingRuleHTTPHandlerFactory : public HTTPRequestHandlerFactory
         });
     }
 
-    /// Handle Post request or (Get or Head) requests with params
-    void allowPostGetOrHeadRequest()
+    /// Handle Post request or (Get or Head) with params or OPTIONS requests
+    void allowPostAndGetParamsAndOptionsRequest()
     {
         addFilter([](const auto & request)
         {
             return (request.getURI().find('?') != std::string::npos
                 && (request.getMethod() == Poco::Net::HTTPRequest::HTTP_GET
                 || request.getMethod() == Poco::Net::HTTPRequest::HTTP_HEAD))
+                || request.getMethod() == Poco::Net::HTTPRequest::HTTP_OPTIONS
                 || request.getMethod() == Poco::Net::HTTPRequest::HTTP_POST;
         });
     }
