{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 41763,
  "instance_id": "ClickHouse__ClickHouse-41763",
  "issue_numbers": [
    "41716"
  ],
  "base_commit": "a3b28b441b40729f62f2f127bce6ca551b2e41d3",
  "patch": "diff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 622f2a71ec96..41c378babcd4 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -766,6 +766,16 @@ void InterpreterCreateQuery::validateTableStructure(const ASTCreateQuery & creat\n             throw Exception(\"Column \" + backQuoteIfNeed(column.name) + \" already exists\", ErrorCodes::DUPLICATE_COLUMN);\n     }\n \n+    /// Check if _row_exists for lightweight delete column in column_lists for merge tree family.\n+    if (create.storage && create.storage->engine && endsWith(create.storage->engine->name, \"MergeTree\"))\n+    {\n+        auto search = all_columns.find(LightweightDeleteDescription::FILTER_COLUMN.name);\n+        if (search != all_columns.end())\n+            throw Exception(\"Cannot create table with column '\" + LightweightDeleteDescription::FILTER_COLUMN.name + \"' \"\n+                            \"for *MergeTree engines because it is reserved for lightweight delete feature\",\n+                            ErrorCodes::ILLEGAL_COLUMN);\n+    }\n+\n     const auto & settings = getContext()->getSettingsRef();\n \n     /// Check low cardinality types in creating table if it was not allowed in setting\ndiff --git a/src/Storages/AlterCommands.cpp b/src/Storages/AlterCommands.cpp\nindex d370a67bfcc3..d68252679a72 100644\n--- a/src/Storages/AlterCommands.cpp\n+++ b/src/Storages/AlterCommands.cpp\n@@ -26,6 +26,7 @@\n #include <Storages/AlterCommands.h>\n #include <Storages/IStorage.h>\n #include <Storages/LightweightDeleteDescription.h>\n+#include <Storages/MergeTree/MergeTreeData.h>\n #include <Common/typeid_cast.h>\n #include <Common/randomSeed.h>\n \n@@ -1056,6 +1057,10 @@ void AlterCommands::validate(const StoragePtr & table, ContextPtr context) const\n                 throw Exception{\"Data type have to be specified for column \" + backQuote(column_name) + \" to add\",\n                                 ErrorCodes::BAD_ARGUMENTS};\n \n+            if (column_name == LightweightDeleteDescription::FILTER_COLUMN.name && std::dynamic_pointer_cast<MergeTreeData>(table))\n+                throw Exception{\"Cannot add column \" + backQuote(column_name) + \": this column name is reserved for lightweight delete feature\",\n+                               ErrorCodes::ILLEGAL_COLUMN};\n+\n             if (command.codec)\n                 CompressionCodecFactory::instance().validateCodecAndGetPreprocessedAST(command.codec, command.data_type, !context->getSettingsRef().allow_suspicious_codecs, context->getSettingsRef().allow_experimental_codecs);\n \n@@ -1240,6 +1245,10 @@ void AlterCommands::validate(const StoragePtr & table, ContextPtr context) const\n                 throw Exception{\"Cannot rename to \" + backQuote(command.rename_to) + \": column with this name already exists\",\n                                 ErrorCodes::DUPLICATE_COLUMN};\n \n+            if (command.rename_to == LightweightDeleteDescription::FILTER_COLUMN.name && std::dynamic_pointer_cast<MergeTreeData>(table))\n+                throw Exception{\"Cannot rename to \" + backQuote(command.rename_to) + \": this column name is reserved for lightweight delete feature\",\n+                               ErrorCodes::ILLEGAL_COLUMN};\n+\n             if (modified_columns.contains(column_name))\n                 throw Exception{\"Cannot rename and modify the same column \" + backQuote(column_name) + \" in a single ALTER query\",\n                                 ErrorCodes::NOT_IMPLEMENTED};\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02454_disable_mergetree_with_lightweight_delete_column.reference b/tests/queries/0_stateless/02454_disable_mergetree_with_lightweight_delete_column.reference\nnew file mode 100644\nindex 000000000000..9972842f9827\n--- /dev/null\n+++ b/tests/queries/0_stateless/02454_disable_mergetree_with_lightweight_delete_column.reference\n@@ -0,0 +1,1 @@\n+1\t1\ndiff --git a/tests/queries/0_stateless/02454_disable_mergetree_with_lightweight_delete_column.sql b/tests/queries/0_stateless/02454_disable_mergetree_with_lightweight_delete_column.sql\nnew file mode 100644\nindex 000000000000..999210ef36e1\n--- /dev/null\n+++ b/tests/queries/0_stateless/02454_disable_mergetree_with_lightweight_delete_column.sql\n@@ -0,0 +1,21 @@\n+drop table if exists t_row_exists;\n+\n+create table t_row_exists(a int, _row_exists int) engine=MergeTree order by a; --{serverError 44}\n+\n+create table t_row_exists(a int, b int) engine=MergeTree order by a;\n+alter table t_row_exists add column _row_exists int; --{serverError ILLEGAL_COLUMN}\n+alter table t_row_exists rename column b to _row_exists; --{serverError ILLEGAL_COLUMN}\n+alter table t_row_exists rename column _row_exists to c; --{serverError NOT_FOUND_COLUMN_IN_BLOCK}\n+alter table t_row_exists drop column _row_exists; --{serverError NOT_FOUND_COLUMN_IN_BLOCK}\n+alter table t_row_exists drop column unknown_column; --{serverError NOT_FOUND_COLUMN_IN_BLOCK}\n+drop table t_row_exists;\n+\n+create table t_row_exists(a int, _row_exists int) engine=Memory;\n+insert into t_row_exists values(1,1);\n+select * from t_row_exists;\n+drop table t_row_exists;\n+\n+create table t_row_exists(a int, b int) engine=Memory;\n+alter table t_row_exists add column _row_exists int; --{serverError NOT_IMPLEMENTED}\n+alter table t_row_exists rename column b to _row_exists; --{serverError NOT_IMPLEMENTED}\n+drop table t_row_exists;\n",
  "problem_statement": "Lightweight delete causes segfault when table is created with _row_exists column\n**Describe the unexpected behaviour**\r\nThe lightweight delete feature implementation causes server side segfault when table is created with a `_row_exists` column.\r\n\r\n**How to reproduce**\r\nTested on ~~master branch (commit `74ffb8438`)~~ tag `v22.8.5.29-lts`.\r\n\r\nEdit: WARNING: be careful when testing, the created table cannot be dropped from CH!\r\n\r\n```\r\nCREATE TABLE test(\r\n    whatever String,\r\n    _row_exists String\r\n)\r\nENGINE = MergeTree()\r\nORDER BY whatever;  -- Works\r\n\r\nINSERT INTO test values('1', '1');  -- Still works\r\n\r\nSELECT * FROM test;  -- Fails in client, sometimes segfault in server?\r\n\r\nDROP TABLE test; -- Client hangs for a while, then exits, segfault in server\r\n```\r\n\r\n**Expected behavior**\r\nIf it is not possible to use tables with explicitly created `_row_exists` column, the create statement should raise an error, and this restriction should be documented IMHO. (It would be a nice feature if the column name containing the delete mask could be specified in the MergeTree parameters upon table creation, defaulting to `_row_exists`.)\r\n\r\n**Error message and/or stacktrace**\r\nFailure message in client after `SELECT`:\r\n```\r\nReceived exception from server (version 22.8.5):\r\nCode: 352. DB::Exception: Received from localhost:9000. DB::Exception: Block structure mismatch in (columns with identical name must have identical structure) stream: different types:\r\n_row_exists String String(size = 1)\r\n_row_exists UInt8 UInt8(size = 1): While executing MergeTreeInOrder. (AMBIGUOUS_COLUMN_NAME)\r\n```\r\n\r\nError message in server after `SELECT`:\r\n```\r\n2022.09.23 10:17:31.352611 [ 306928 ] {6906df8e-36b2-4ec3-9012-3f1faaa00fc3} <Error> executeQuery: Code: 352. DB::Exception: Block structure mismatch in (columns with identical name must have identical structure) stream: different types:\r\n_row_exists String String(size = 1)\r\n_row_exists UInt8 UInt8(size = 1): While executing MergeTreeThread. (AMBIGUOUS_COLUMN_NAME) (version 22.8.5.1) (from [::1]:34452) (in query: select * from test;), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. /home/clickhouse/build/./contrib/libcxx/include/exception:133: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x183f3aac in /home/clickhouse/build/programs/clickhouse\r\n1. /home/clickhouse/build/./src/Common/Exception.cpp:69: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x1035f348 in /home/clickhouse/build/programs/clickhouse\r\n2. /home/clickhouse/build/./src/Core/Block.cpp:36: void DB::checkColumnStructure<void>(DB::ColumnWithTypeAndName const&, DB::ColumnWithTypeAndName const&, std::__1::basic_string_view<char, std::__1::char_traits<char> >, bool, int) @ 0x1471e8cb in /home/clickhouse/build/programs/clickhouse\r\n3. /home/clickhouse/build/./contrib/libcxx/include/vector:1575: DB::Block::insert(DB::ColumnWithTypeAndName) @ 0x1471f094 in /home/clickhouse/build/programs/clickhouse\r\n4. /home/clickhouse/build/./contrib/libcxx/include/string:1445: DB::MergeTreeBaseSelectProcessor::injectVirtualColumns(DB::Block&, unsigned long, DB::MergeTreeReadTask*, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x1641590e in /home/clickhouse/build/programs/clickhouse\r\n5. /home/clickhouse/build/./src/Storages/MergeTree/MergeTreeBaseSelectProcessor.cpp:216: DB::MergeTreeBaseSelectProcessor::generate() @ 0x16414dbd in /home/clickhouse/build/programs/clickhouse\r\n6. /home/clickhouse/build/./src/Processors/Chunk.h:90: DB::ISource::tryGenerate() @ 0x160ee323 in /home/clickhouse/build/programs/clickhouse\r\n7. /home/clickhouse/build/./contrib/libcxx/include/optional:321: DB::ISource::work() @ 0x160edf92 in /home/clickhouse/build/programs/clickhouse\r\n8. /home/clickhouse/build/./src/Processors/Executors/ExecutionThreadContext.cpp:0: DB::ExecutionThreadContext::executeTask() @ 0x16107bc0 in /home/clickhouse/build/programs/clickhouse\r\n9. /home/clickhouse/build/./src/Processors/Executors/PipelineExecutor.cpp:228: DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) @ 0x160fdcba in /home/clickhouse/build/programs/clickhouse\r\n10. /home/clickhouse/build/./src/Processors/Executors/PipelineExecutor.cpp:0: void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::spawnThreads()::$_0>(DB::PipelineExecutor::spawnThreads()::$_0&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) @ 0x160ff1fe in /home/clickhouse/build/programs/clickhouse\r\n11. /home/clickhouse/build/./contrib/libcxx/include/__functional/function.h:832: ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x103f435f in /home/clickhouse/build/programs/clickhouse\r\n12. /home/clickhouse/build/./contrib/libcxx/include/__memory/unique_ptr.h:312: void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()> >(void*) @ 0x103f67c0 in /home/clickhouse/build/programs/clickhouse\r\n13. ? @ 0x7efea9f4078d in ?\r\n14. clone @ 0x7efea9fc18e4 in ?\r\n```\r\n\r\nFailure message in client after `DROP`:\r\n```\r\nException on client:\r\nCode: 32. DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000. (ATTEMPT_TO_READ_AFTER_EOF)\r\n\r\nConnecting to localhost:9000 as user default.\r\nCode: 210. DB::NetException: Connection refused (localhost:9000). (NETWORK_ERROR)\r\n```\r\n\r\nServer after `SELECT` / `DROP`:\r\n```\r\nSegmentation fault (core dumped)\r\n```\r\n\r\n**Additional context**\r\nTested on ~~master branch (commit `74ffb8438`)~~ `v22.8.5.29-lts`.\n",
  "hints_text": "@zhangjmruc \nTried on latest CH 22.9, but failed to reproduce the Segmentation fault on server. Only see the error with AMBIGUOUS_COLUMN_NAME.\r\n\r\nBy the way,  tables with other virtual columns like, _part, _database, the same error occurs.\r\n\r\n=== details ===\r\nclickhouse-client -mn\r\nClickHouse client version 22.9.1.2603 (official build).\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 22.9.1 revision 54460.\r\n\r\nVM-7-13-ubuntu :) select * from test;\r\n\r\nSELECT *\r\nFROM test\r\n\r\nQuery id: b37c40e4-b361-439e-8749-2462d0ea8e49\r\n\r\n\r\n0 rows in set. Elapsed: 0.054 sec.\r\n\r\nReceived exception from server (version 22.9.1):\r\nCode: 352. DB::Exception: Received from localhost:9000. DB::Exception: Block structure mismatch in (columns with identical name must have identical structure) stream: different types:\r\n_row_exists String String(size = 1)\r\n_row_exists UInt8 UInt8(size = 1): While executing MergeTreeInOrder. (AMBIGUOUS_COLUMN_NAME)\r\n\r\nVM-7-13-ubuntu :) show create table test;\r\n\r\nSHOW CREATE TABLE test\r\n\r\nQuery id: efcb19db-506d-4492-9478-2e509ea78d3b\r\n\r\n\u250c\u2500statement\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CREATE TABLE default.test\r\n(\r\n    `whatever` String,\r\n    `_row_exists` String\r\n)\r\nENGINE = MergeTree\r\nORDER BY whatever\r\nSETTINGS index_granularity = 8192 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.001 sec.\r\n\r\nVM-7-13-ubuntu :) drop table test;\r\n\r\nDROP TABLE test\r\n\r\nQuery id: cdda5eb8-329c-44d0-bc08-9967d804d4d5\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.001 sec.\nThanks for the quick reply.\r\n\r\n> Tried on latest CH 22.9, but failed to reproduce the Segmentation fault on server. Only see the error with AMBIGUOUS_COLUMN_NAME.\r\n\r\nThe commit specified in my OP was incorrect, sorry. I used `v22.8.5.29-lts` tag and compiled ClickHouse myself. So the difference might be caused by either the difference in commits between this and v22.9, or by different compile flags / dependency versions used to build CH. Could you please check it with v22.8?\r\n\r\n> By the way, tables with other virtual columns like, _part, _database, the same error occurs.\r\n\r\nI was not aware of other virtual columns, then it is not restricted to lightweight delete. ClickHouse should refuse to create tables with these columns then.\ncc: @davenger \n> Could you please check it with v22.8?\r\n@jzombi I tried with official build deb packages on v22.8.5.29-lts, same behaviors as CH 22.9. The select fails but the server is ok and table can be dropped.\r\n\r\n> I was not aware of other virtual columns, then it is not restricted to lightweight delete. ClickHouse should refuse to create tables with these columns then.\r\n\r\nWill add some checks for this virtual columns when creating tables.\r\n\r\n===== details ===\r\n$ clickhouse-client -mn\r\nClickHouse client version 22.8.5.29 (official build).\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 22.8.5 revision 54460.\r\n\r\nWarnings:\r\n * Linux is not using a fast TSC clock source. Performance can be degraded. Check /sys/devices/system/clocksource/clocksource0/current_clocksource\r\n\r\nVM-7-13-ubuntu :) CREATE TABLE test(\r\n                      whatever String,\r\n                      _row_exists String\r\n                  )\r\n                  ENGINE = MergeTree()\r\n                  ORDER BY whatever;\r\n\r\nCREATE TABLE test\r\n(\r\n    `whatever` String,\r\n    `_row_exists` String\r\n)\r\nENGINE = MergeTree\r\nORDER BY whatever\r\n\r\nQuery id: 9b329806-0b49-4ee5-9bab-b73928533675\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.015 sec.\r\n\r\nVM-7-13-ubuntu :) INSERT INTO test values('1', '1');\r\n\r\nINSERT INTO test FORMAT Values\r\n\r\nQuery id: c8ec6848-e011-45ab-bfa0-38f0cb36d544\r\n\r\nOk.\r\n\r\n1 row in set. Elapsed: 0.002 sec.\r\n\r\nVM-7-13-ubuntu :) SELECT * FROM test;\r\n\r\nSELECT *\r\nFROM test\r\n\r\nQuery id: 459cb126-a83f-4aff-b56c-f282c7d5fea2\r\n\r\n\r\n0 rows in set. Elapsed: 0.002 sec.\r\n\r\nReceived exception from server (version 22.8.5):\r\nCode: 352. DB::Exception: Received from localhost:9000. DB::Exception: Block structure mismatch in (columns with identical name must have identical structure) stream: different types:\r\n_row_exists String String(size = 1)\r\n_row_exists UInt8 UInt8(size = 1): While executing MergeTreeInOrder. (AMBIGUOUS_COLUMN_NAME)\r\n\r\nVM-7-13-ubuntu :) show create table test;\r\n\r\nSHOW CREATE TABLE test\r\n\r\nQuery id: 724ba536-e46b-4333-ae25-0cee010ab58b\r\n\r\n\u250c\u2500statement\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CREATE TABLE default.test\r\n(\r\n    `whatever` String,\r\n    `_row_exists` String\r\n)\r\nENGINE = MergeTree\r\nORDER BY whatever\r\nSETTINGS index_granularity = 8192 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.001 sec.\r\n\r\nVM-7-13-ubuntu :) drop table test;\r\n\r\nDROP TABLE test\r\n\r\nQuery id: bb88d05d-1c8e-426d-8cbd-f4e27e38b9ba\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.001 sec.\r\n\r\nVM-7-13-ubuntu :) quit;\r\nBye.\r\nubuntu@VM-7-13-ubuntu:~/app$ sudo clickhouse status\r\n/var/run/clickhouse-server/clickhouse-server.pid file exists and contains pid = 3766212.\r\nThe process with pid = 3766212 is running. \r\n\r\n",
  "created_at": "2022-09-26T07:39:52Z",
  "modified_files": [
    "src/Interpreters/InterpreterCreateQuery.cpp",
    "src/Storages/AlterCommands.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02454_disable_mergetree_with_lightweight_delete_column.reference",
    "b/tests/queries/0_stateless/02454_disable_mergetree_with_lightweight_delete_column.sql"
  ]
}