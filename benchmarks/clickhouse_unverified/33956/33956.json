{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 33956,
  "instance_id": "ClickHouse__ClickHouse-33956",
  "issue_numbers": [
    "33838"
  ],
  "base_commit": "3c5bdc0054ec17d94047069000d97bbd5fc49f79",
  "patch": "diff --git a/src/DataTypes/DataTypeTuple.cpp b/src/DataTypes/DataTypeTuple.cpp\nindex ad6d4e2943b4..a5e9868cf890 100644\n--- a/src/DataTypes/DataTypeTuple.cpp\n+++ b/src/DataTypes/DataTypeTuple.cpp\n@@ -32,6 +32,7 @@ namespace ErrorCodes\n     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n     extern const int SIZES_OF_COLUMNS_IN_TUPLE_DOESNT_MATCH;\n     extern const int ILLEGAL_INDEX;\n+    extern const int LOGICAL_ERROR;\n }\n \n \n@@ -156,8 +157,19 @@ MutableColumnPtr DataTypeTuple::createColumn() const\n \n MutableColumnPtr DataTypeTuple::createColumn(const ISerialization & serialization) const\n {\n-    const auto & element_serializations =\n-        assert_cast<const SerializationTuple &>(serialization).getElementsSerializations();\n+    /// If we read subcolumn of nested Tuple, it may be wrapped to SerializationNamed\n+    /// several times to allow to reconstruct the substream path name.\n+    /// Here we don't need substream path name, so we drop first several wrapper serializations.\n+\n+    const auto * current_serialization = &serialization;\n+    while (const auto * serialization_named = typeid_cast<const SerializationNamed *>(current_serialization))\n+        current_serialization = serialization_named->getNested().get();\n+\n+    const auto * serialization_tuple = typeid_cast<const SerializationTuple *>(current_serialization);\n+    if (!serialization_tuple)\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Unexpected serialization to create column of type Tuple\");\n+\n+    const auto & element_serializations = serialization_tuple->getElementsSerializations();\n \n     size_t size = elems.size();\n     assert(element_serializations.size() == size);\ndiff --git a/src/DataTypes/Serializations/SerializationNamed.h b/src/DataTypes/Serializations/SerializationNamed.h\nindex 91db0cf67f4b..343b96c16e30 100644\n--- a/src/DataTypes/Serializations/SerializationNamed.h\n+++ b/src/DataTypes/Serializations/SerializationNamed.h\n@@ -5,6 +5,11 @@\n namespace DB\n {\n \n+/// Serialization wrapper that acts like nested serialization,\n+/// but adds a passed name to the substream path like the\n+/// read column was the tuple element with this name.\n+/// It's used while reading subcolumns of complex types.\n+/// In particular while reading components of named tuples.\n class SerializationNamed final : public SerializationWrapper\n {\n private:\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02184_nested_tuple.reference b/tests/queries/0_stateless/02184_nested_tuple.reference\nnew file mode 100644\nindex 000000000000..b435e2f28a6f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02184_nested_tuple.reference\n@@ -0,0 +1,7 @@\n+{\"endUserIDs\":{\"_experience\":{\"aaid\":{\"id\":\"id_1\",\"namespace\":{\"code\":\"code_1\"},\"primary\":1},\"mcid\":{\"id\":\"id_2\",\"namespace\":{\"code\":\"code_2\"},\"primary\":2}}}}\n+{\"endUserIDs._experience\":{\"aaid\":{\"id\":\"id_1\",\"namespace\":{\"code\":\"code_1\"},\"primary\":1},\"mcid\":{\"id\":\"id_2\",\"namespace\":{\"code\":\"code_2\"},\"primary\":2}}}\n+{\"endUserIDs._experience.aaid\":{\"id\":\"id_1\",\"namespace\":{\"code\":\"code_1\"},\"primary\":1}}\n+{\"endUserIDs._experience.aaid.id\":\"id_1\"}\n+{\"endUserIDs._experience.aaid.namespace\":{\"code\":\"code_1\"}}\n+{\"endUserIDs._experience.aaid.namespace.code\":\"code_1\"}\n+{\"endUserIDs._experience.aaid.primary\":1}\ndiff --git a/tests/queries/0_stateless/02184_nested_tuple.sql b/tests/queries/0_stateless/02184_nested_tuple.sql\nnew file mode 100644\nindex 000000000000..67a20e3dce1e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02184_nested_tuple.sql\n@@ -0,0 +1,38 @@\n+DROP TABLE IF EXISTS t_nested_tuple;\n+\n+CREATE TABLE t_nested_tuple\n+(\n+    endUserIDs Tuple(\n+      _experience Tuple(\n+          aaid Tuple(\n+              id Nullable(String),\n+              namespace Tuple(\n+                  code LowCardinality(Nullable(String))\n+              ),\n+              primary LowCardinality(Nullable(UInt8))\n+          ),\n+          mcid Tuple(\n+              id Nullable(String),\n+              namespace Tuple(\n+                  code LowCardinality(Nullable(String))\n+              ),\n+              primary LowCardinality(Nullable(UInt8))\n+          )\n+      )\n+  )\n+)\n+ENGINE = MergeTree ORDER BY tuple();\n+\n+SET output_format_json_named_tuples_as_objects = 1;\n+\n+INSERT INTO t_nested_tuple FORMAT JSONEachRow {\"endUserIDs\":{\"_experience\":{\"aaid\":{\"id\":\"id_1\",\"namespace\":{\"code\":\"code_1\"},\"primary\":1},\"mcid\":{\"id\":\"id_2\",\"namespace\":{\"code\":\"code_2\"},\"primary\":2}}}};\n+\n+SELECT * FROM t_nested_tuple FORMAT JSONEachRow;\n+SELECT endUserIDs._experience FROM t_nested_tuple FORMAT JSONEachRow;\n+SELECT endUserIDs._experience.aaid FROM t_nested_tuple FORMAT JSONEachRow;\n+SELECT endUserIDs._experience.aaid.id FROM t_nested_tuple FORMAT JSONEachRow;\n+SELECT endUserIDs._experience.aaid.namespace FROM t_nested_tuple FORMAT JSONEachRow;\n+SELECT endUserIDs._experience.aaid.namespace.code FROM t_nested_tuple FORMAT JSONEachRow;\n+SELECT endUserIDs._experience.aaid.primary FROM t_nested_tuple FORMAT JSONEachRow;\n+\n+DROP TABLE t_nested_tuple;\n",
  "problem_statement": "Null pointer exception - server crash selecting Tuple\n**Describe the unexpected behaviour**\r\nHave a table with the following column definition:\r\n```\r\nendUserIDs Tuple(\r\n      _experience Tuple(\r\n          aaid Tuple(\r\n              id Nullable(String),\r\n              namespace Tuple(\r\n                  code LowCardinality(Nullable(String))\r\n              ),\r\n              primary LowCardinality(Nullable(UInt8))\r\n          ),\r\n          mcid Tuple(\r\n              id Nullable(String),\r\n              namespace Tuple(\r\n                  code LowCardinality(Nullable(String))\r\n              ),\r\n              primary LowCardinality(Nullable(UInt8))\r\n          )\r\n      )\r\n  )\r\n```\r\nWhen I select a tuple element `endUserIDs._experience`, server crashes with null pointer exception:\r\n\r\n**How to reproduce**\r\n* 22.1.2.2\r\n* clickhouse-client\r\n* select endUserIDs._experience from table limit 10;\r\n\r\n**Expected behavior**\r\nQuery should succeed (This was working on version 21.10)\r\n\r\n**Error message and/or stacktrace**\r\n```\r\n2022.01.20 15:24:47.705230 [ 2793 ] {} <Fatal> BaseDaemon: ########################################\r\n2022.01.20 15:24:47.705370 [ 2793 ] {} <Fatal> BaseDaemon: (version 22.1.2.2 (official build), build id: D4467B3558D29571) (from thread 2577) (query_id: 0e011ee7-27f7-4053-89ce-d2fe0e678170) Received signal Segmentation fault (11)\r\n2022.01.20 15:24:47.705406 [ 2793 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.\r\n2022.01.20 15:24:47.705439 [ 2793 ] {} <Fatal> BaseDaemon: Stack trace: 0x13245f59 0x1323a5f9 0x143a2fd3 0x14b1dd2e 0x14b226e0 0x14b20ed5 0x14b16da8 0x14b17ead 0x14b16620 0x1483f655 0x1483f21a 0x14a8a802 0x1485ecc3 0x1485353e 0x14852389 0x14852098 0x148627e7 0xa86e077 0xa871a7d 0x7f74452ac609 0x7f74451d3293\r\n2022.01.20 15:24:47.705512 [ 2793 ] {} <Fatal> BaseDaemon: 2. DB::IDataType::createColumn(DB::ISerialization const&) const @ 0x13245f59 in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.705547 [ 2793 ] {} <Fatal> BaseDaemon: 3. DB::DataTypeTuple::createColumn(DB::ISerialization const&) const @ 0x1323a5f9 in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.705579 [ 2793 ] {} <Fatal> BaseDaemon: 4. DB::MergeTreeReaderWide::readRows(unsigned long, unsigned long, bool, unsigned long, std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >&) @ 0x143a2fd3 in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.705614 [ 2793 ] {} <Fatal> BaseDaemon: 5. DB::MergeTreeRangeReader::DelayedStream::finalize(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >&) @ 0x14b1dd2e in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.705674 [ 2793 ] {} <Fatal> BaseDaemon: 6. DB::MergeTreeRangeReader::startReadingChain(unsigned long, std::__1::deque<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&) @ 0x14b226e0 in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.705713 [ 2793 ] {} <Fatal> BaseDaemon: 7. DB::MergeTreeRangeReader::read(unsigned long, std::__1::deque<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&) @ 0x14b20ed5 in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.705743 [ 2793 ] {} <Fatal> BaseDaemon: 8. DB::MergeTreeBaseSelectProcessor::readFromPartImpl() @ 0x14b16da8 in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.705765 [ 2793 ] {} <Fatal> BaseDaemon: 9. DB::MergeTreeBaseSelectProcessor::readFromPart() @ 0x14b17ead in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.705885 [ 2793 ] {} <Fatal> BaseDaemon: 10. DB::MergeTreeBaseSelectProcessor::generate() @ 0x14b16620 in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.705946 [ 2793 ] {} <Fatal> BaseDaemon: 11. DB::ISource::tryGenerate() @ 0x1483f655 in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.705981 [ 2793 ] {} <Fatal> BaseDaemon: 12. DB::ISource::work() @ 0x1483f21a in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.706010 [ 2793 ] {} <Fatal> BaseDaemon: 13. DB::SourceWithProgress::work() @ 0x14a8a802 in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.706033 [ 2793 ] {} <Fatal> BaseDaemon: 14. DB::ExecutionThreadContext::executeTask() @ 0x1485ecc3 in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.706063 [ 2793 ] {} <Fatal> BaseDaemon: 15. DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) @ 0x1485353e in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.706109 [ 2793 ] {} <Fatal> BaseDaemon: 16. DB::PipelineExecutor::executeImpl(unsigned long) @ 0x14852389 in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.706142 [ 2793 ] {} <Fatal> BaseDaemon: 17. DB::PipelineExecutor::execute(unsigned long) @ 0x14852098 in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.706172 [ 2793 ] {} <Fatal> BaseDaemon: 18. ? @ 0x148627e7 in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.706220 [ 2793 ] {} <Fatal> BaseDaemon: 19. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0xa86e077 in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.706268 [ 2793 ] {} <Fatal> BaseDaemon: 20. ? @ 0xa871a7d in /usr/bin/clickhouse\r\n2022.01.20 15:24:47.706302 [ 2793 ] {} <Fatal> BaseDaemon: 21. ? @ 0x7f74452ac609 in ?\r\n2022.01.20 15:24:47.706344 [ 2793 ] {} <Fatal> BaseDaemon: 22. __clone @ 0x7f74451d3293 in ?\r\n2022.01.20 15:24:47.841121 [ 2793 ] {} <Fatal> BaseDaemon: Calculated checksum of the binary: 1DADB85040C1C3668E7B676D9BDFA079. There is no information about the reference checksum.\r\n```\r\n\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\n",
  "hints_text": "```\r\nCREATE TABLE ttt\r\n(\r\n    `endUserIDs` Tuple(_experience Tuple(aaid Tuple(id Nullable(String), namespace Tuple(code LowCardinality(Nullable(String))), primary LowCardinality(Nullable(UInt8))), mcid Tuple(id Nullable(String), namespace Tuple(code LowCardinality(Nullable(String))), primary LowCardinality(Nullable(UInt8)))))\r\n)\r\nENGINE = MergeTree\r\nORDER BY tuple()\r\nSETTINGS index_granularity = 8192;\r\n\r\ninsert into ttt\r\nselect * from generateRandom('endUserIDs Tuple(_experience Tuple(aaid Tuple(id Nullable(String),namespace Tuple(code Nullable(String)),primary Nullable(UInt8)),mcid Tuple(id Nullable(String),namespace Tuple(code Nullable(String)),primary Nullable(UInt8))))', 1,20,10  ) limit 1000\r\n;\r\n\r\nselect endUserIDs._experience from ttt limit 10;\r\n\r\nBaseDaemon: ########################################\r\nBaseDaemon: (version 22.1.2.2 (official build), build id: D4467B3558D29571) (from thread 25035) (query_id: ba37a70e-38f4-4e19-a701-83dd5f6cf632) Received signal Segmentation fault (11)\r\nBaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.\r\nBaseDaemon: Stack trace: 0x1323a5e8 0x1323a5f9 0x14390561 0x14b1dd2e 0x14b226e0 0x14b20ed5 0x14b16da8 0x14b17ead 0x14b16620 0x1483f655 0x1483f21a 0x14a8a802 0x1485ecc3 0x1485353e 0x14852389 0x14852098 0x148627e7 0xa86e077 0xa871a7d 0x7f4dbd91afa3 0x7f4dbd84b4cf\r\n```",
  "created_at": "2022-01-24T15:46:06Z",
  "modified_files": [
    "src/DataTypes/DataTypeTuple.cpp",
    "src/DataTypes/Serializations/SerializationNamed.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02184_nested_tuple.reference",
    "b/tests/queries/0_stateless/02184_nested_tuple.sql"
  ]
}