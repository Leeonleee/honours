diff --git a/src/Interpreters/HashJoin.cpp b/src/Interpreters/HashJoin.cpp
index dd17fc1004c4..e0aad706966f 100644
--- a/src/Interpreters/HashJoin.cpp
+++ b/src/Interpreters/HashJoin.cpp
@@ -1516,12 +1516,16 @@ class NonJoinedBlockInputStream : private NotJoined, public IBlockInputStream
         if (!rows_added)
             return {};
 
-        correctLowcardAndNullability(columns_right);
-
         Block res = result_sample_block.cloneEmpty();
         addLeftColumns(res, rows_added);
         addRightColumns(res, columns_right);
         copySameKeys(res);
+        correctLowcardAndNullability(res);
+
+#ifndef NDEBUG
+        assertBlocksHaveEqualStructure(res, result_sample_block, getName());
+#endif
+
         return res;
     }
 
diff --git a/src/Interpreters/MergeJoin.cpp b/src/Interpreters/MergeJoin.cpp
index b93a94b42158..a2c63a4693b1 100644
--- a/src/Interpreters/MergeJoin.cpp
+++ b/src/Interpreters/MergeJoin.cpp
@@ -1075,12 +1075,11 @@ class NonMergeJoinedBlockInputStream : private NotJoined, public IBlockInputStre
         if (!rows_added)
             return {};
 
-        correctLowcardAndNullability(columns_right);
-
         Block res = result_sample_block.cloneEmpty();
         addLeftColumns(res, rows_added);
         addRightColumns(res, columns_right);
         copySameKeys(res);
+        correctLowcardAndNullability(res);
         return res;
     }
 
diff --git a/src/Interpreters/join_common.cpp b/src/Interpreters/join_common.cpp
index 9d6abda42ed8..76bfd7f28992 100644
--- a/src/Interpreters/join_common.cpp
+++ b/src/Interpreters/join_common.cpp
@@ -29,17 +29,6 @@ namespace ErrorCodes
 namespace
 {
 
-void changeNullability(MutableColumnPtr & mutable_column)
-{
-    ColumnPtr column = std::move(mutable_column);
-    if (const auto * nullable = checkAndGetColumn<ColumnNullable>(*column))
-        column = nullable->getNestedColumnPtr();
-    else
-        column = makeNullable(column);
-
-    mutable_column = IColumn::mutate(std::move(column));
-}
-
 ColumnPtr changeLowCardinality(const ColumnPtr & column, const ColumnPtr & dst_sample)
 {
     if (dst_sample->lowCardinality())
@@ -52,6 +41,24 @@ ColumnPtr changeLowCardinality(const ColumnPtr & column, const ColumnPtr & dst_s
     return column->convertToFullColumnIfLowCardinality();
 }
 
+struct LowcardAndNull
+{
+    bool is_lowcard;
+    bool is_nullable;
+};
+
+LowcardAndNull getLowcardAndNullability(const ColumnPtr & col)
+{
+    if (col->lowCardinality())
+    {
+        /// Currently only `LowCardinality(Nullable(T))` is possible, but not `Nullable(LowCardinality(T))`
+        assert(!col->canBeInsideNullable());
+        const auto * col_as_lc = assert_cast<const ColumnLowCardinality *>(col.get());
+        return {true, col_as_lc->nestedIsNullable()};
+    }
+    return {false, col->isNullable()};
+}
+
 }
 
 namespace JoinCommon
@@ -91,35 +98,32 @@ DataTypePtr convertTypeToNullable(const DataTypePtr & type)
         if (dict_type->canBeInsideNullable())
             return std::make_shared<DataTypeLowCardinality>(makeNullable(dict_type));
     }
-    return makeNullable(type);
+
+    if (type->canBeInsideNullable())
+        return makeNullable(type);
+
+    return type;
 }
 
-void convertColumnToNullable(ColumnWithTypeAndName & column, bool remove_low_card)
+void convertColumnToNullable(ColumnWithTypeAndName & column)
 {
-    if (remove_low_card && column.type->lowCardinality())
-    {
-        column.column = recursiveRemoveLowCardinality(column.column);
-        column.type = recursiveRemoveLowCardinality(column.type);
-    }
+    column.type = convertTypeToNullable(column.type);
 
-    if (column.type->isNullable() || !canBecomeNullable(column.type))
+    if (!column.column)
         return;
 
-    column.type = convertTypeToNullable(column.type);
-
-    if (column.column)
+    if (column.column->lowCardinality())
     {
-        if (column.column->lowCardinality())
-        {
-            /// Convert nested to nullable, not LowCardinality itself
-            auto mut_col = IColumn::mutate(std::move(column.column));
-            ColumnLowCardinality * col_as_lc = assert_cast<ColumnLowCardinality *>(mut_col.get());
-            if (!col_as_lc->nestedIsNullable())
-                col_as_lc->nestedToNullable();
-            column.column = std::move(mut_col);
-        }
-        else
-            column.column = makeNullable(column.column);
+        /// Convert nested to nullable, not LowCardinality itself
+        auto mut_col = IColumn::mutate(std::move(column.column));
+        ColumnLowCardinality * col_as_lc = assert_cast<ColumnLowCardinality *>(mut_col.get());
+        if (!col_as_lc->nestedIsNullable())
+            col_as_lc->nestedToNullable();
+        column.column = std::move(mut_col);
+    }
+    else if (column.column->canBeInsideNullable())
+    {
+        column.column = makeNullable(column.column);
     }
 }
 
@@ -146,20 +150,18 @@ void removeColumnNullability(ColumnWithTypeAndName & column)
                 col_as_lc->nestedRemoveNullable();
             column.column = std::move(mut_col);
         }
-
-        return;
     }
-
-    if (!column.type->isNullable())
-        return;
-
-    column.type = static_cast<const DataTypeNullable &>(*column.type).getNestedType();
-    if (column.column)
+    else
     {
-        const auto * nullable_column = checkAndGetColumn<ColumnNullable>(*column.column);
-        ColumnPtr nested_column = nullable_column->getNestedColumnPtr();
-        MutableColumnPtr mutable_column = IColumn::mutate(std::move(nested_column));
-        column.column = std::move(mutable_column);
+        column.type = removeNullable(column.type);
+
+        if (column.column && column.column->isNullable())
+        {
+            const auto * nullable_column = checkAndGetColumn<ColumnNullable>(*column.column);
+            ColumnPtr nested_column = nullable_column->getNestedColumnPtr();
+            MutableColumnPtr mutable_column = IColumn::mutate(std::move(nested_column));
+            column.column = std::move(mutable_column);
+        }
     }
 }
 
@@ -534,32 +536,42 @@ void NotJoined::setRightIndex(size_t right_pos, size_t result_position)
 
 void NotJoined::extractColumnChanges(size_t right_pos, size_t result_pos)
 {
-    const auto & src = saved_block_sample.getByPosition(right_pos).column;
-    const auto & dst = result_sample_block.getByPosition(result_pos).column;
-
-    if (!src->isNullable() && dst->isNullable())
-        right_nullability_adds.push_back(right_pos);
+    auto src_props = getLowcardAndNullability(saved_block_sample.getByPosition(right_pos).column);
+    auto dst_props = getLowcardAndNullability(result_sample_block.getByPosition(result_pos).column);
 
-    if (src->isNullable() && !dst->isNullable())
-        right_nullability_removes.push_back(right_pos);
+    if (src_props.is_nullable != dst_props.is_nullable)
+        right_nullability_changes.push_back({result_pos, dst_props.is_nullable});
 
-    ColumnPtr src_not_null = JoinCommon::emptyNotNullableClone(src);
-    ColumnPtr dst_not_null = JoinCommon::emptyNotNullableClone(dst);
-
-    if (src_not_null->lowCardinality() != dst_not_null->lowCardinality())
-        right_lowcard_changes.push_back({right_pos, dst_not_null});
+    if (src_props.is_lowcard != dst_props.is_lowcard)
+        right_lowcard_changes.push_back({result_pos, dst_props.is_lowcard});
 }
 
-void NotJoined::correctLowcardAndNullability(MutableColumns & columns_right)
+void NotJoined::correctLowcardAndNullability(Block & block)
 {
-    for (size_t pos : right_nullability_removes)
-        changeNullability(columns_right[pos]);
-
-    for (auto & [pos, dst_sample] : right_lowcard_changes)
-        columns_right[pos] = changeLowCardinality(std::move(columns_right[pos]), dst_sample)->assumeMutable();
+    for (auto & [pos, added] : right_nullability_changes)
+    {
+        auto & col = block.getByPosition(pos);
+        if (added)
+            JoinCommon::convertColumnToNullable(col);
+        else
+            JoinCommon::removeColumnNullability(col);
+    }
 
-    for (size_t pos : right_nullability_adds)
-        changeNullability(columns_right[pos]);
+    for (auto & [pos, added] : right_lowcard_changes)
+    {
+        auto & col = block.getByPosition(pos);
+        if (added)
+        {
+            if (!col.type->lowCardinality())
+                col.type = std::make_shared<DataTypeLowCardinality>(col.type);
+            col.column = changeLowCardinality(col.column, col.type->createColumn());
+        }
+        else
+        {
+            col.column = recursiveRemoveLowCardinality(col.column);
+            col.type = recursiveRemoveLowCardinality(col.type);
+        }
+    }
 }
 
 void NotJoined::addLeftColumns(Block & block, size_t rows_added) const
@@ -580,11 +592,6 @@ void NotJoined::addRightColumns(Block & block, MutableColumns & columns_right) c
     {
         auto & right_column = columns_right[pr.first];
         auto & result_column = block.getByPosition(pr.second).column;
-#ifndef NDEBUG
-        if (result_column->getName() != right_column->getName())
-            throw Exception("Wrong columns assign in RIGHT|FULL JOIN: " + result_column->getName() +
-                            " " + right_column->getName(), ErrorCodes::LOGICAL_ERROR);
-#endif
         result_column = std::move(right_column);
     }
 }
diff --git a/src/Interpreters/join_common.h b/src/Interpreters/join_common.h
index 8862116d1fa6..1f0378991551 100644
--- a/src/Interpreters/join_common.h
+++ b/src/Interpreters/join_common.h
@@ -19,7 +19,7 @@ namespace JoinCommon
 {
 bool canBecomeNullable(const DataTypePtr & type);
 DataTypePtr convertTypeToNullable(const DataTypePtr & type);
-void convertColumnToNullable(ColumnWithTypeAndName & column, bool remove_low_card = false);
+void convertColumnToNullable(ColumnWithTypeAndName & column);
 void convertColumnsToNullable(Block & block, size_t starting_pos = 0);
 void removeColumnNullability(ColumnWithTypeAndName & column);
 void changeColumnRepresentation(const ColumnPtr & src_column, ColumnPtr & dst_column);
@@ -70,7 +70,7 @@ class NotJoined
     NotJoined(const TableJoin & table_join, const Block & saved_block_sample_, const Block & right_sample_block,
               const Block & result_sample_block_, const Names & key_names_left_ = {}, const Names & key_names_right_ = {});
 
-    void correctLowcardAndNullability(MutableColumns & columns_right);
+    void correctLowcardAndNullability(Block & block);
     void addLeftColumns(Block & block, size_t rows_added) const;
     void addRightColumns(Block & block, MutableColumns & columns_right) const;
     void copySameKeys(Block & block) const;
@@ -92,10 +92,9 @@ class NotJoined
     ///
     std::unordered_map<size_t, size_t> same_result_keys;
     /// Which right columns (saved in parent) need nullability change before placing them in result block
-    std::vector<size_t> right_nullability_adds;
-    std::vector<size_t> right_nullability_removes;
+    std::vector<std::pair<size_t, bool>> right_nullability_changes;
     /// Which right columns (saved in parent) need LowCardinality change before placing them in result block
-    std::vector<std::pair<size_t, ColumnPtr>> right_lowcard_changes;
+    std::vector<std::pair<size_t, bool>> right_lowcard_changes;
 
     void setRightIndex(size_t right_pos, size_t result_position);
     void extractColumnChanges(size_t right_pos, size_t result_pos);
