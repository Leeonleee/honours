diff --git a/programs/client/Client.cpp b/programs/client/Client.cpp
index 808a505b5e42..ace509d6691b 100644
--- a/programs/client/Client.cpp
+++ b/programs/client/Client.cpp
@@ -218,6 +218,8 @@ class Client : public Poco::Util::Application
     QueryFuzzer fuzzer;
     int query_fuzzer_runs = 0;
 
+    std::optional<Suggest> suggest;
+
     /// We will format query_id in interactive mode in various ways, the default is just to print Query id: ...
     std::vector<std::pair<String, String>> query_id_formats;
 
@@ -577,10 +579,11 @@ class Client : public Poco::Util::Application
             if (print_time_to_stderr)
                 throw Exception("time option could be specified only in non-interactive mode", ErrorCodes::BAD_ARGUMENTS);
 
+            suggest.emplace();
             if (server_revision >= Suggest::MIN_SERVER_REVISION && !config().getBool("disable_suggestion", false))
             {
                 /// Load suggestion data from the server.
-                Suggest::instance().load(connection_parameters, config().getInt("suggestion_limit"));
+                suggest->load(connection_parameters, config().getInt("suggestion_limit"));
             }
 
             /// Load command history if present.
@@ -607,7 +610,7 @@ class Client : public Poco::Util::Application
                 highlight_callback = highlight;
 
             ReplxxLineReader lr(
-                Suggest::instance(),
+                *suggest,
                 history_file,
                 config().has("multiline"),
                 query_extenders,
@@ -615,7 +618,7 @@ class Client : public Poco::Util::Application
                 highlight_callback);
 
 #elif defined(USE_READLINE) && USE_READLINE
-            ReadlineLineReader lr(Suggest::instance(), history_file, config().has("multiline"), query_extenders, query_delimiters);
+            ReadlineLineReader lr(*suggest, history_file, config().has("multiline"), query_extenders, query_delimiters);
 #else
             LineReader lr(history_file, config().has("multiline"), query_extenders, query_delimiters);
 #endif
diff --git a/programs/client/Suggest.h b/programs/client/Suggest.h
index b13289ac322d..03332088cbe4 100644
--- a/programs/client/Suggest.h
+++ b/programs/client/Suggest.h
@@ -18,10 +18,11 @@ namespace ErrorCodes
 class Suggest : public LineReader::Suggest, boost::noncopyable
 {
 public:
-    static Suggest & instance()
+    Suggest();
+    ~Suggest()
     {
-        static Suggest instance;
-        return instance;
+        if (loading_thread.joinable())
+            loading_thread.join();
     }
 
     void load(const ConnectionParameters & connection_parameters, size_t suggestion_limit);
@@ -30,12 +31,6 @@ class Suggest : public LineReader::Suggest, boost::noncopyable
     static constexpr int MIN_SERVER_REVISION = 54406;
 
 private:
-    Suggest();
-    ~Suggest()
-    {
-        if (loading_thread.joinable())
-            loading_thread.join();
-    }
 
     void loadImpl(Connection & connection, const ConnectionTimeouts & timeouts, size_t suggestion_limit);
     void fetch(Connection & connection, const ConnectionTimeouts & timeouts, const std::string & query);
