{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 16047,
  "instance_id": "ClickHouse__ClickHouse-16047",
  "issue_numbers": [
    "16035"
  ],
  "base_commit": "f573aeb97e4373956355c82fe35d12111dc2e7fe",
  "patch": "diff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex 808a505b5e42..ace509d6691b 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -218,6 +218,8 @@ class Client : public Poco::Util::Application\n     QueryFuzzer fuzzer;\n     int query_fuzzer_runs = 0;\n \n+    std::optional<Suggest> suggest;\n+\n     /// We will format query_id in interactive mode in various ways, the default is just to print Query id: ...\n     std::vector<std::pair<String, String>> query_id_formats;\n \n@@ -577,10 +579,11 @@ class Client : public Poco::Util::Application\n             if (print_time_to_stderr)\n                 throw Exception(\"time option could be specified only in non-interactive mode\", ErrorCodes::BAD_ARGUMENTS);\n \n+            suggest.emplace();\n             if (server_revision >= Suggest::MIN_SERVER_REVISION && !config().getBool(\"disable_suggestion\", false))\n             {\n                 /// Load suggestion data from the server.\n-                Suggest::instance().load(connection_parameters, config().getInt(\"suggestion_limit\"));\n+                suggest->load(connection_parameters, config().getInt(\"suggestion_limit\"));\n             }\n \n             /// Load command history if present.\n@@ -607,7 +610,7 @@ class Client : public Poco::Util::Application\n                 highlight_callback = highlight;\n \n             ReplxxLineReader lr(\n-                Suggest::instance(),\n+                *suggest,\n                 history_file,\n                 config().has(\"multiline\"),\n                 query_extenders,\n@@ -615,7 +618,7 @@ class Client : public Poco::Util::Application\n                 highlight_callback);\n \n #elif defined(USE_READLINE) && USE_READLINE\n-            ReadlineLineReader lr(Suggest::instance(), history_file, config().has(\"multiline\"), query_extenders, query_delimiters);\n+            ReadlineLineReader lr(*suggest, history_file, config().has(\"multiline\"), query_extenders, query_delimiters);\n #else\n             LineReader lr(history_file, config().has(\"multiline\"), query_extenders, query_delimiters);\n #endif\ndiff --git a/programs/client/Suggest.h b/programs/client/Suggest.h\nindex b13289ac322d..03332088cbe4 100644\n--- a/programs/client/Suggest.h\n+++ b/programs/client/Suggest.h\n@@ -18,10 +18,11 @@ namespace ErrorCodes\n class Suggest : public LineReader::Suggest, boost::noncopyable\n {\n public:\n-    static Suggest & instance()\n+    Suggest();\n+    ~Suggest()\n     {\n-        static Suggest instance;\n-        return instance;\n+        if (loading_thread.joinable())\n+            loading_thread.join();\n     }\n \n     void load(const ConnectionParameters & connection_parameters, size_t suggestion_limit);\n@@ -30,12 +31,6 @@ class Suggest : public LineReader::Suggest, boost::noncopyable\n     static constexpr int MIN_SERVER_REVISION = 54406;\n \n private:\n-    Suggest();\n-    ~Suggest()\n-    {\n-        if (loading_thread.joinable())\n-            loading_thread.join();\n-    }\n \n     void loadImpl(Connection & connection, const ConnectionTimeouts & timeouts, size_t suggestion_limit);\n     void fetch(Connection & connection, const ConnectionTimeouts & timeouts, const std::string & query);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01526_client_start_and_exit.expect b/tests/queries/0_stateless/01526_client_start_and_exit.expect\nnew file mode 100755\nindex 000000000000..003439ffa542\n--- /dev/null\n+++ b/tests/queries/0_stateless/01526_client_start_and_exit.expect\n@@ -0,0 +1,12 @@\n+#!/usr/bin/expect -f\n+\n+log_user 1\n+set timeout 5\n+match_max 100000\n+\n+if ![info exists env(CLICKHOUSE_PORT_TCP)] {set env(CLICKHOUSE_PORT_TCP) 9000}\n+\n+spawn bash -c \"clickhouse-client --port $env(CLICKHOUSE_PORT_TCP) && echo $?\"\n+expect \":) \"\n+send -- \"\\4\"\n+expect eof\ndiff --git a/tests/queries/0_stateless/01526_client_start_and_exit.reference b/tests/queries/0_stateless/01526_client_start_and_exit.reference\nnew file mode 100644\nindex 000000000000..e3e2e7b22afc\n--- /dev/null\n+++ b/tests/queries/0_stateless/01526_client_start_and_exit.reference\n@@ -0,0 +1,1 @@\n+Loaded 10000 queries.\ndiff --git a/tests/queries/0_stateless/01526_client_start_and_exit.sh b/tests/queries/0_stateless/01526_client_start_and_exit.sh\nnew file mode 100755\nindex 000000000000..c179be79d032\n--- /dev/null\n+++ b/tests/queries/0_stateless/01526_client_start_and_exit.sh\n@@ -0,0 +1,23 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. \"$CURDIR\"/../shell_config.sh\n+\n+# Create a huge amount of tables, so Suggest will take a time to load\n+${CLICKHOUSE_CLIENT} -q \"SELECT 'CREATE TABLE test_' || hex(randomPrintableASCII(40)) || '(x UInt8) Engine=Memory;' FROM numbers(10000)\" --format=TSVRaw | ${CLICKHOUSE_BENCHMARK} -c32 -i 10000 -d 0 2>&1 | grep -F 'Loaded 10000 queries'\n+\n+function stress()\n+{\n+    while true; do\n+        \"${CURDIR}\"/01526_client_start_and_exit.expect | grep -v -P 'ClickHouse client|Connecting|Connected|:\\) Bye\\.|^\\s*$|spawn bash|^0\\s*$'\n+    done\n+}\n+\n+export CURDIR\n+export -f stress\n+\n+for _ in {1..10}; do\n+    timeout 3 bash -c stress &\n+done\n+\n+wait\n",
  "problem_statement": "clickhouse-client and 100K tables crashes on exit\nRelated to huge suggestions list\r\n\r\n```\r\n(gdb) thread apply all bt\r\n\r\nThread 2 (Thread 0x7fbefa6d8400 (LWP 298)):\r\n#0  __pthread_clockjoin_ex (threadid=140458186086144, thread_return=0x0, clockid=<optimized out>, abstime=<optimized out>, block=<optimized out>) at pthread_join_common.c:145\r\n#1  0x0000000007c42cb0 in DB::Suggest::~Suggest() ()\r\n#2  0x00007fbefa874a27 in __run_exit_handlers (status=0, listp=0x7fbefaa16718 <__exit_funcs>, run_list_atexit=run_list_atexit@entry=true, run_dtors=run_dtors@entry=true) at exit.c:108\r\n#3  0x00007fbefa874be0 in __GI_exit (status=<optimized out>) at exit.c:139\r\n#4  0x00007fbefa8520ba in __libc_start_main (main=0x7b8e780 <main>, argc=1, argv=0x7ffc4e5be1e8, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7ffc4e5be1d8) at ../csu/libc-start.c:342\r\n#5  0x0000000007b3f02e in _start ()\r\n\r\nThread 1 (Thread 0x7fbef8499700 (LWP 299)):\r\n#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50\r\n#1  0x00007fbefa850859 in __GI_abort () at abort.c:79\r\n#2  0x0000000010eb0edc in Poco::SignalHandler::handleSignal(int) ()\r\n#3  <signal handler called>\r\n#4  0x000000000d42dd4f in std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, void*>*> std::__1::__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::__unordered_map_hasher<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > >::find<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const ()\r\n#5  0x000000000d793065 in DB::IFactoryWithAliases<std::__1::function<std::__1::shared_ptr<DB::IDataType const> (std::__1::shared_ptr<DB::IAST> const&)> >::getAliasToOrName(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const ()\r\n#6  0x000000000d7927f1 in DB::DataTypeFactory::get(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IAST> const&) const ()\r\n#7  0x000000000d792640 in DB::DataTypeFactory::get(std::__1::shared_ptr<DB::IAST> const&) const ()\r\n#8  0x000000000d7924b1 in DB::DataTypeFactory::get(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const ()\r\n#9  0x000000000ddfd267 in DB::NativeBlockInputStream::readImpl() ()\r\n#10 0x000000000d7575d5 in DB::IBlockInputStream::read() ()\r\n#11 0x000000000e530096 in DB::Connection::receivePacket() ()\r\n#12 0x0000000007c6e217 in DB::Suggest::fetch(DB::Connection&, DB::ConnectionTimeouts const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) ()\r\n#13 0x0000000007c6e0a4 in DB::Suggest::loadImpl(DB::Connection&, DB::ConnectionTimeouts const&, unsigned long) ()\r\n#14 0x0000000007c6eb14 in ?? ()\r\n#15 0x00007fbefaa37609 in start_thread (arg=<optimized out>) at pthread_create.c:477\r\n#16 0x00007fbefa94d293 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```\n",
  "hints_text": "BTW, We limit the number of tables to 10 000 in suggest.\nSuggest should be destroyed earlier. Not in global destructors. Otherwise the order of destruction is undetermined.",
  "created_at": "2020-10-15T23:47:40Z",
  "modified_files": [
    "programs/client/Client.cpp",
    "programs/client/Suggest.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01526_client_start_and_exit.expect",
    "b/tests/queries/0_stateless/01526_client_start_and_exit.reference",
    "b/tests/queries/0_stateless/01526_client_start_and_exit.sh"
  ]
}