diff --git a/src/TableFunctions/TableFunctionFormat.cpp b/src/TableFunctions/TableFunctionFormat.cpp
index f2a92b41560d..1e37775f574b 100644
--- a/src/TableFunctions/TableFunctionFormat.cpp
+++ b/src/TableFunctions/TableFunctionFormat.cpp
@@ -4,6 +4,7 @@
 
 #include <Interpreters/Context.h>
 #include <Interpreters/evaluateConstantExpression.h>
+#include <Interpreters/parseColumnsListForTableFunction.h>
 
 #include <Parsers/ASTLiteral.h>
 
@@ -38,23 +39,29 @@ void TableFunctionFormat::parseArguments(const ASTPtr & ast_function, ContextPtr
 
     ASTs & args = args_func.at(0)->children;
 
-    if (args.size() != 2)
-        throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, "Table function '{}' requires 2 arguments: format and data", getName());
+    if (args.size() != 2 && args.size() != 3)
+        throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, "Table function '{}' requires 2 or 3 arguments: format, [structure], data", getName());
 
     for (auto & arg : args)
         arg = evaluateConstantExpressionOrIdentifierAsLiteral(arg, context);
 
     format = checkAndGetLiteralArgument<String>(args[0], "format");
-    data = checkAndGetLiteralArgument<String>(args[1], "data");
+    data = checkAndGetLiteralArgument<String>(args.back(), "data");
+    if (args.size() == 3)
+        structure = checkAndGetLiteralArgument<String>(args[1], "structure");
 }
 
 ColumnsDescription TableFunctionFormat::getActualTableStructure(ContextPtr context) const
 {
-    ReadBufferIterator read_buffer_iterator = [&](ColumnsDescription &)
+    if (structure == "auto")
     {
-        return std::make_unique<ReadBufferFromString>(data);
-    };
-    return readSchemaFromFormat(format, std::nullopt, read_buffer_iterator, false, context);
+        ReadBufferIterator read_buffer_iterator = [&](ColumnsDescription &)
+        {
+            return std::make_unique<ReadBufferFromString>(data);
+        };
+        return readSchemaFromFormat(format, std::nullopt, read_buffer_iterator, false, context);
+    }
+    return parseColumnsListFromString(structure, context);
 }
 
 Block TableFunctionFormat::parseData(ColumnsDescription columns, ContextPtr context) const
diff --git a/src/TableFunctions/TableFunctionFormat.h b/src/TableFunctions/TableFunctionFormat.h
index c6db322343b3..d64ab14cb641 100644
--- a/src/TableFunctions/TableFunctionFormat.h
+++ b/src/TableFunctions/TableFunctionFormat.h
@@ -28,6 +28,7 @@ class TableFunctionFormat : public ITableFunction
 
     String format;
     String data;
+    String structure = "auto";
 };
 
 }
