{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 13925,
  "instance_id": "ClickHouse__ClickHouse-13925",
  "issue_numbers": [
    "13666"
  ],
  "base_commit": "97094a212a60a652f01ef0b15b76f66b7f064e7c",
  "patch": "diff --git a/src/Interpreters/DuplicateDistinctVisitor.h b/src/Interpreters/DuplicateDistinctVisitor.h\ndeleted file mode 100644\nindex 9ce2624f5bdf..000000000000\n--- a/src/Interpreters/DuplicateDistinctVisitor.h\n+++ /dev/null\n@@ -1,72 +0,0 @@\n-#pragma once\n-\n-#include <Functions/FunctionFactory.h>\n-#include <IO/WriteHelpers.h>\n-#include <Interpreters/InDepthNodeVisitor.h>\n-#include <Parsers/ASTFunction.h>\n-#include <Parsers/ASTLiteral.h>\n-#include <Parsers/ASTSelectQuery.h>\n-#include <Parsers/ASTSetQuery.h>\n-#include <Parsers/ASTTablesInSelectQuery.h>\n-#include <Parsers/IAST.h>\n-#include <Common/typeid_cast.h>\n-\n-namespace DB\n-{\n-\n-/// Removes duplicate DISTINCT from queries.\n-class DuplicateDistinctMatcher\n-{\n-public:\n-    struct Data\n-    {\n-        bool is_distinct;\n-        std::vector<String> last_ids;\n-    };\n-\n-    static void visit(const ASTPtr & ast, Data & data)\n-    {\n-        auto * select_query = ast->as<ASTSelectQuery>();\n-        if (select_query)\n-            visit(*select_query, data);\n-    }\n-\n-    static void visit(ASTSelectQuery & select_query, Data & data)\n-    {\n-        if (!select_query.distinct || !select_query.select())\n-            return;\n-\n-        /// Optimize shouldn't work for distributed tables\n-        for (const auto & elem : select_query.children)\n-        {\n-            if (elem->as<ASTSetQuery>() && !elem->as<ASTSetQuery>()->is_standalone)\n-                return;\n-        }\n-\n-        auto expression_list = select_query.select();\n-        std::vector<String> current_ids;\n-\n-        if (expression_list->children.empty())\n-            return;\n-\n-        current_ids.reserve(expression_list->children.size());\n-        for (const auto & id : expression_list->children)\n-            current_ids.push_back(id->getColumnName());\n-\n-        if (data.is_distinct && current_ids == data.last_ids)\n-            select_query.distinct = false;\n-\n-        data.is_distinct = true;\n-        data.last_ids = std::move(current_ids);\n-    }\n-\n-    static bool needChildVisit(const ASTPtr &, const ASTPtr &)\n-    {\n-        return true;\n-    }\n-\n-};\n-\n-using DuplicateDistinctVisitor = InDepthNodeVisitor<DuplicateDistinctMatcher, false>;\n-\n-}\ndiff --git a/src/Interpreters/TreeOptimizer.cpp b/src/Interpreters/TreeOptimizer.cpp\nindex ae0a435edc22..bdc506b0cc6b 100644\n--- a/src/Interpreters/TreeOptimizer.cpp\n+++ b/src/Interpreters/TreeOptimizer.cpp\n@@ -4,7 +4,6 @@\n #include <Interpreters/OptimizeIfChains.h>\n #include <Interpreters/OptimizeIfWithConstantConditionVisitor.h>\n #include <Interpreters/ArithmeticOperationsInAgrFuncOptimize.h>\n-#include <Interpreters/DuplicateDistinctVisitor.h>\n #include <Interpreters/DuplicateOrderByVisitor.h>\n #include <Interpreters/GroupByFunctionKeysVisitor.h>\n #include <Interpreters/AggregateFunctionOfGroupByKeysVisitor.h>\n@@ -22,6 +21,8 @@\n #include <Parsers/ASTLiteral.h>\n #include <Parsers/ASTOrderByElement.h>\n #include <Parsers/ASTSelectQuery.h>\n+#include <Parsers/ASTSubquery.h>\n+#include <Parsers/ASTSelectWithUnionQuery.h>\n #include <Parsers/ASTTablesInSelectQuery.h>\n \n #include <Functions/FunctionFactory.h>\n@@ -311,13 +312,129 @@ void optimizeDuplicatesInOrderBy(const ASTSelectQuery * select_query)\n         elems = std::move(unique_elems);\n }\n \n-/// Optimize duplicate ORDER BY and DISTINCT\n-void optimizeDuplicateOrderByAndDistinct(ASTPtr & query, const Context & context)\n+/// Optimize duplicate ORDER BY\n+void optimizeDuplicateOrderBy(ASTPtr & query, const Context & context)\n {\n     DuplicateOrderByVisitor::Data order_by_data{context};\n     DuplicateOrderByVisitor(order_by_data).visit(query);\n-    DuplicateDistinctVisitor::Data distinct_data{};\n-    DuplicateDistinctVisitor(distinct_data).visit(query);\n+}\n+\n+/// Return simple subselect (without UNIONs or JOINs or SETTINGS) if any\n+const ASTSelectQuery * getSimpleSubselect(const ASTSelectQuery & select)\n+{\n+    if (!select.tables())\n+        return nullptr;\n+\n+    const auto & tables = select.tables()->children;\n+    if (tables.empty() || tables.size() != 1)\n+        return nullptr;\n+\n+    const auto & ast_table_expression = tables[0]->as<ASTTablesInSelectQueryElement>()->table_expression;\n+    if (!ast_table_expression)\n+        return nullptr;\n+\n+    const auto & table_expression = ast_table_expression->as<ASTTableExpression>();\n+    if (!table_expression->subquery)\n+        return nullptr;\n+\n+    const auto & subquery = table_expression->subquery->as<ASTSubquery>();\n+    if (!subquery || subquery->children.size() != 1)\n+        return nullptr;\n+\n+    const auto & subselect_union = subquery->children[0]->as<ASTSelectWithUnionQuery>();\n+    if (!subselect_union || !subselect_union->list_of_selects ||\n+        subselect_union->list_of_selects->children.size() != 1)\n+        return nullptr;\n+\n+    const auto & subselect = subselect_union->list_of_selects->children[0]->as<ASTSelectQuery>();\n+    if (subselect && subselect->settings())\n+        return nullptr;\n+\n+    return subselect;\n+}\n+\n+std::unordered_set<String> getDistinctNames(const ASTSelectQuery & select)\n+{\n+    if (!select.select() || select.select()->children.empty())\n+        return {};\n+\n+    std::unordered_set<String> names;\n+    std::unordered_set<String> implicit_distinct;\n+\n+    if (!select.distinct)\n+    {\n+        /// SELECT a, b FROM (SELECT DISTINCT a FROM ...)\n+        if (const ASTSelectQuery * subselect = getSimpleSubselect(select))\n+            implicit_distinct = getDistinctNames(*subselect);\n+\n+        if (implicit_distinct.empty())\n+            return {};\n+    }\n+\n+    /// Extract result column names (prefer aliases, ignore table name)\n+    for (const auto & id : select.select()->children)\n+    {\n+        String alias = id->tryGetAlias();\n+\n+        if (const auto * identifier = id->as<ASTIdentifier>())\n+        {\n+            const String & name = identifier->shortName();\n+\n+            if (select.distinct || implicit_distinct.count(name))\n+            {\n+                if (alias.empty())\n+                    names.insert(name);\n+                else\n+                    names.insert(alias);\n+            }\n+        }\n+        else if (select.distinct && !alias.empty())\n+        {\n+            /// It's not possible to use getAliasOrColumnName() cause name is context specific (function arguments)\n+            names.insert(alias);\n+        }\n+    }\n+\n+    /// SELECT a FROM (SELECT DISTINCT a, b FROM ...)\n+    if (!select.distinct && names.size() != implicit_distinct.size())\n+        return {};\n+\n+    return names;\n+}\n+\n+/// Remove DISTINCT from query if columns are known as DISTINCT from subquery\n+void optimizeDuplicateDistinct(ASTSelectQuery & select)\n+{\n+    if (!select.select() || select.select()->children.empty())\n+        return;\n+\n+    const ASTSelectQuery * subselect = getSimpleSubselect(select);\n+    if (!subselect)\n+        return;\n+\n+    std::unordered_set<String> distinct_names = getDistinctNames(*subselect);\n+    std::unordered_set<String> selected_names;\n+\n+    /// Check source column names from select list (ignore aliases and table names)\n+    for (const auto & id : select.select()->children)\n+    {\n+        const auto * identifier = id->as<ASTIdentifier>();\n+        if (!identifier)\n+            return;\n+\n+        String name = identifier->shortName();\n+        if (!distinct_names.count(name))\n+            return; /// Not a distinct column, keep DISTINCT for it.\n+\n+        selected_names.insert(name);\n+    }\n+\n+    /// select columns list != distinct columns list\n+    /// SELECT DISTINCT a FROM (SELECT DISTINCT a, b FROM ...)) -- cannot remove DISTINCT\n+    if (selected_names.size() != distinct_names.size())\n+        return;\n+\n+    select.distinct = false;\n }\n \n /// Replace monotonous functions in ORDER BY if they don't participate in GROUP BY expression,\n@@ -537,7 +654,14 @@ void TreeOptimizer::apply(ASTPtr & query, Aliases & aliases, const NameSet & sou\n \n     /// Remove duplicate ORDER BY and DISTINCT from subqueries.\n     if (settings.optimize_duplicate_order_by_and_distinct)\n-        optimizeDuplicateOrderByAndDistinct(query, context);\n+    {\n+        optimizeDuplicateOrderBy(query, context);\n+\n+        /// DISTINCT has special meaning in Distributed query with enabled distributed_group_by_no_merge\n+        /// TODO: disable Distributed/remote() tables only\n+        if (!settings.distributed_group_by_no_merge)\n+            optimizeDuplicateDistinct(*select_query);\n+    }\n \n     /// Remove functions from ORDER BY if its argument is also in ORDER BY\n     if (settings.optimize_redundant_functions_in_order_by)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01305_duplicate_order_by_and_distinct.reference b/tests/queries/0_stateless/01305_duplicate_order_by_and_distinct.reference\nindex 5e6fdfcdefb6..c076e56a91b9 100644\n--- a/tests/queries/0_stateless/01305_duplicate_order_by_and_distinct.reference\n+++ b/tests/queries/0_stateless/01305_duplicate_order_by_and_distinct.reference\n@@ -31,7 +31,7 @@ ORDER BY number ASC\n SELECT number\n FROM \n (\n-    SELECT DISTINCT number\n+    SELECT number\n     FROM \n     (\n         SELECT DISTINCT number % 2 AS number\ndiff --git a/tests/queries/0_stateless/01306_disable_duplicate_order_by_and_distinct_optimize_for_distributed_table.reference b/tests/queries/0_stateless/01306_disable_duplicate_order_by_and_distinct_optimize_for_distributed_table.reference\nindex aa47d0d46d47..44e0be8e3569 100644\n--- a/tests/queries/0_stateless/01306_disable_duplicate_order_by_and_distinct_optimize_for_distributed_table.reference\n+++ b/tests/queries/0_stateless/01306_disable_duplicate_order_by_and_distinct_optimize_for_distributed_table.reference\n@@ -1,2 +1,4 @@\n 0\n 0\n+0\n+0\ndiff --git a/tests/queries/0_stateless/01306_disable_duplicate_order_by_and_distinct_optimize_for_distributed_table.sql b/tests/queries/0_stateless/01306_disable_duplicate_order_by_and_distinct_optimize_for_distributed_table.sql\nindex e1467bacf2f3..2daf199f82e6 100644\n--- a/tests/queries/0_stateless/01306_disable_duplicate_order_by_and_distinct_optimize_for_distributed_table.sql\n+++ b/tests/queries/0_stateless/01306_disable_duplicate_order_by_and_distinct_optimize_for_distributed_table.sql\n@@ -1,4 +1,6 @@\n set optimize_duplicate_order_by_and_distinct = 1;\n+SET distributed_group_by_no_merge = 0;\n+\n SELECT DISTINCT number\n FROM\n (\n@@ -8,7 +10,19 @@ FROM\n     SETTINGS distributed_group_by_no_merge = 1\n );\n \n+SET distributed_group_by_no_merge = 1;\n+\n+SELECT DISTINCT number\n+FROM\n+(\n+    SELECT DISTINCT number\n+    FROM remote('127.0.0.{1,2}', system.numbers)\n+    LIMIT 1\n+);\n+\n set optimize_duplicate_order_by_and_distinct = 0;\n+SET distributed_group_by_no_merge = 0;\n+\n SELECT DISTINCT number\n FROM\n (\n@@ -18,3 +32,13 @@ FROM\n     SETTINGS distributed_group_by_no_merge = 1\n );\n \n+SET distributed_group_by_no_merge = 1;\n+\n+set optimize_duplicate_order_by_and_distinct = 0;\n+SELECT DISTINCT number\n+FROM\n+(\n+    SELECT DISTINCT number\n+    FROM remote('127.0.0.{1,2}', system.numbers)\n+    LIMIT 1\n+);\ndiff --git a/tests/queries/0_stateless/01455_duplicate_distinct_optimization.reference b/tests/queries/0_stateless/01455_duplicate_distinct_optimization.reference\nnew file mode 100644\nindex 000000000000..c5a06ca0cd3c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01455_duplicate_distinct_optimization.reference\n@@ -0,0 +1,136 @@\n+SELECT DISTINCT number\n+FROM numbers(1)\n+SELECT number\n+FROM \n+(\n+    SELECT DISTINCT number\n+    FROM numbers(1)\n+)\n+SELECT DISTINCT number * 2\n+FROM \n+(\n+    SELECT DISTINCT \n+        number * 2,\n+        number\n+    FROM numbers(1)\n+)\n+SELECT number\n+FROM \n+(\n+    SELECT DISTINCT number * 2 AS number\n+    FROM numbers(1)\n+)\n+SELECT \n+    b,\n+    a\n+FROM \n+(\n+    SELECT DISTINCT \n+        number % 2 AS a,\n+        number % 3 AS b\n+    FROM numbers(100)\n+)\n+SELECT DISTINCT a\n+FROM \n+(\n+    SELECT DISTINCT \n+        number % 2 AS a,\n+        number % 3 AS b\n+    FROM numbers(100)\n+)\n+SELECT a\n+FROM \n+(\n+    SELECT DISTINCT a\n+    FROM \n+    (\n+        SELECT DISTINCT \n+            number % 2 AS a,\n+            number % 3 AS b\n+        FROM numbers(100)\n+    )\n+)\n+SELECT DISTINCT a\n+FROM \n+(\n+    SELECT \n+        a,\n+        b\n+    FROM \n+    (\n+        SELECT DISTINCT \n+            number % 2 AS a,\n+            number % 3 AS b\n+        FROM numbers(100)\n+    )\n+)\n+SELECT \n+    a,\n+    b\n+FROM \n+(\n+    SELECT \n+        b,\n+        a\n+    FROM \n+    (\n+        SELECT DISTINCT \n+            number AS a,\n+            number AS b\n+        FROM numbers(1)\n+    )\n+)\n+SELECT \n+    a,\n+    b\n+FROM \n+(\n+    SELECT \n+        b,\n+        a,\n+        a + b\n+    FROM \n+    (\n+        SELECT DISTINCT \n+            number % 2 AS a,\n+            number % 3 AS b\n+        FROM numbers(100)\n+    )\n+)\n+SELECT DISTINCT a\n+FROM \n+(\n+    SELECT a\n+    FROM \n+    (\n+        SELECT DISTINCT \n+            number % 2 AS a,\n+            number % 3 AS b\n+        FROM numbers(100)\n+    )\n+)\n+SELECT DISTINCT number\n+FROM \n+(\n+    SELECT DISTINCT number\n+    FROM numbers(1)\n+) AS t1\n+CROSS JOIN numbers(2) AS t2\n+SELECT number\n+FROM \n+(\n+    SELECT DISTINCT number\n+    FROM numbers(1) AS t1\n+    CROSS JOIN numbers(2) AS t2\n+)\n+SELECT DISTINCT number\n+FROM \n+(\n+    SELECT DISTINCT number\n+    FROM numbers(1)\n+    UNION ALL\n+    SELECT DISTINCT number\n+    FROM numbers(2)\n+)\n+0\n+1\ndiff --git a/tests/queries/0_stateless/01455_duplicate_distinct_optimization.sql b/tests/queries/0_stateless/01455_duplicate_distinct_optimization.sql\nnew file mode 100644\nindex 000000000000..10937819de28\n--- /dev/null\n+++ b/tests/queries/0_stateless/01455_duplicate_distinct_optimization.sql\n@@ -0,0 +1,33 @@\n+SET enable_debug_queries = 1;\n+SET optimize_duplicate_order_by_and_distinct = 1;\n+\n+ANALYZE SELECT DISTINCT number FROM numbers(1);\n+ANALYZE SELECT DISTINCT number FROM (SELECT DISTINCT number FROM numbers(1));\n+ANALYZE SELECT DISTINCT number * 2 FROM (SELECT DISTINCT number * 2, number FROM numbers(1));\n+ANALYZE SELECT DISTINCT number FROM (SELECT DISTINCT number * 2 AS number FROM numbers(1));\n+ANALYZE SELECT DISTINCT b, a FROM (SELECT DISTINCT number % 2 AS a, number % 3 AS b FROM numbers(100));\n+ANALYZE SELECT DISTINCT a FROM (SELECT DISTINCT number % 2 AS a, number % 3 AS b FROM numbers(100));\n+ANALYZE SELECT DISTINCT a FROM (SELECT DISTINCT a FROM (SELECT DISTINCT number % 2 AS a, number % 3 AS b FROM numbers(100)));\n+ANALYZE SELECT DISTINCT a FROM (SELECT DISTINCT a, b FROM (SELECT DISTINCT number % 2 AS a, number % 3 AS b FROM numbers(100)));\n+ANALYZE SELECT DISTINCT a, b FROM (SELECT DISTINCT b, a FROM (SELECT DISTINCT number a, number b FROM numbers(1)));\n+ANALYZE SELECT DISTINCT a, b FROM (SELECT b, a, a + b FROM (SELECT DISTINCT number % 2 AS a, number % 3 AS b FROM numbers(100)));\n+ANALYZE SELECT DISTINCT a FROM (SELECT a FROM (SELECT DISTINCT number % 2 AS a, number % 3 AS b FROM numbers(100)));\n+ANALYZE SELECT DISTINCT number FROM (SELECT DISTINCT number FROM numbers(1)) t1 CROSS JOIN numbers(2) t2;\n+ANALYZE SELECT DISTINCT number FROM (SELECT DISTINCT number FROM numbers(1) t1 CROSS JOIN numbers(2) t2);\n+\n+ANALYZE SELECT DISTINCT number FROM\n+(\n+    (SELECT DISTINCT number FROM numbers(1))\n+    UNION ALL\n+    (SELECT DISTINCT number FROM numbers(2))\n+);\n+\n+--\n+\n+SELECT DISTINCT number FROM\n+(\n+    (SELECT DISTINCT number FROM numbers(1))\n+    UNION ALL\n+    (SELECT DISTINCT number FROM numbers(2))\n+)\n+ORDER BY number;\n",
  "problem_statement": "DISTINCT works incorrectly if was already applied to one of the subqueries\nHello, there. Run into the problem with DISTINCT expression. It works incorrectly on the main query if it was already applied to one of the subqueries bond with UNION ALL.\r\n\r\n**How to reproduce**\r\nServer version: 20.5.4.40. 19.17.6.36 was free of the bug.\r\nUsing Datagrip for running queries.\r\nNon-default settings:\r\n```\r\ninput_format_defaults_for_omitted_fields: 1\r\ndecimal_check_overflow: 0\r\njoined_subquery_requires_alias: 0\r\n```\r\n\r\nConsider following query\r\n```\r\nselect distinct number\r\nfrom ((select number from numbers(10)) union all (select number from numbers(20)));\r\n```\r\nIt works fine, returning 20 rows as expected.\r\n\r\nBut if we add distinct to subqueries (it doesn't matter to the first, the second or both)\r\n```\r\nselect distinct number\r\nfrom ((select distinct number from numbers(10)) union all (select distinct number from numbers(20)));\r\n```\r\n\r\nThen in 20.5.4.40 we'll see 30 rows with numbers from 0 to 9 duplicated.\r\nHowever, `count(distinct number)` returns the correct number of rows.\r\n\n",
  "hints_text": "`ClickHouse client version 20.5.3.27 (official build).`\r\n`Connected to ClickHouse server version 20.5.3 revision 54435.`\r\n\r\n```sql\r\nMiWiFi-R4A-srv :) select distinct number from ((select number from numbers(10)) union all (select number from numbers(20)));\r\n\r\nSELECT DISTINCT number\r\nFROM\r\n(\r\n    SELECT number\r\n    FROM numbers(10)\r\n    UNION ALL\r\n    SELECT number\r\n    FROM numbers(20)\r\n)\r\n\r\n\u250c\u2500number\u2500\u2510\r\n\u2502      0 \u2502\r\n\u2502      1 \u2502\r\n\u2502      2 \u2502\r\n\u2502      3 \u2502\r\n\u2502      4 \u2502\r\n\u2502      5 \u2502\r\n\u2502      6 \u2502\r\n\u2502      7 \u2502\r\n\u2502      8 \u2502\r\n\u2502      9 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500number\u2500\u2510\r\n\u2502     10 \u2502\r\n\u2502     11 \u2502\r\n\u2502     12 \u2502\r\n\u2502     13 \u2502\r\n\u2502     14 \u2502\r\n\u2502     15 \u2502\r\n\u2502     16 \u2502\r\n\u2502     17 \u2502\r\n\u2502     18 \u2502\r\n\u2502     19 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n20 rows in set. Elapsed: 0.004 sec.\r\n```\nIt's a wrong optimization #10067.\r\nTo disable it, turn off the `optimize_duplicate_order_by_and_distinct` setting.\r\n\r\n```\r\nSET optimize_duplicate_order_by_and_distinct = 0\r\n```",
  "created_at": "2020-08-20T17:09:29Z",
  "modified_files": [
    "src/Interpreters/DuplicateDistinctVisitor.h",
    "src/Interpreters/TreeOptimizer.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01305_duplicate_order_by_and_distinct.reference",
    "tests/queries/0_stateless/01306_disable_duplicate_order_by_and_distinct_optimize_for_distributed_table.reference",
    "tests/queries/0_stateless/01306_disable_duplicate_order_by_and_distinct_optimize_for_distributed_table.sql",
    "b/tests/queries/0_stateless/01455_duplicate_distinct_optimization.reference",
    "b/tests/queries/0_stateless/01455_duplicate_distinct_optimization.sql"
  ]
}