{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 43193,
  "instance_id": "ClickHouse__ClickHouse-43193",
  "issue_numbers": [
    "25785"
  ],
  "base_commit": "ebde28bc50b8569221b5833dff827c7348214f99",
  "patch": "diff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h\nindex dd494d821bfa..208da8a78fe8 100644\n--- a/src/Functions/FunctionsConversion.h\n+++ b/src/Functions/FunctionsConversion.h\n@@ -2828,6 +2828,31 @@ class FunctionCast final : public FunctionCastBase\n         };\n     }\n \n+#define GENERATE_INTERVAL_CASE(INTERVAL_KIND) \\\n+            case IntervalKind::INTERVAL_KIND: \\\n+                return createFunctionAdaptor(FunctionConvert<DataTypeInterval, NameToInterval##INTERVAL_KIND, PositiveMonotonicity>::create(), from_type);\n+\n+    static WrapperType createIntervalWrapper(const DataTypePtr & from_type, IntervalKind kind)\n+    {\n+        switch (kind)\n+        {\n+            GENERATE_INTERVAL_CASE(Nanosecond)\n+            GENERATE_INTERVAL_CASE(Microsecond)\n+            GENERATE_INTERVAL_CASE(Millisecond)\n+            GENERATE_INTERVAL_CASE(Second)\n+            GENERATE_INTERVAL_CASE(Minute)\n+            GENERATE_INTERVAL_CASE(Hour)\n+            GENERATE_INTERVAL_CASE(Day)\n+            GENERATE_INTERVAL_CASE(Week)\n+            GENERATE_INTERVAL_CASE(Month)\n+            GENERATE_INTERVAL_CASE(Quarter)\n+            GENERATE_INTERVAL_CASE(Year)\n+        }\n+        throw Exception{ErrorCodes::CANNOT_CONVERT_TYPE, \"Conversion to unexpected IntervalKind: {}\", kind.toString()};\n+    }\n+\n+#undef GENERATE_INTERVAL_CASE\n+\n     template <typename ToDataType>\n     requires IsDataTypeDecimal<ToDataType>\n     WrapperType createDecimalWrapper(const DataTypePtr & from_type, const ToDataType * to_type, bool requested_result_is_nullable) const\n@@ -3853,6 +3878,8 @@ class FunctionCast final : public FunctionCastBase\n                 return createObjectWrapper(from_type, checkAndGetDataType<DataTypeObject>(to_type.get()));\n             case TypeIndex::AggregateFunction:\n                 return createAggregateFunctionWrapper(from_type, checkAndGetDataType<DataTypeAggregateFunction>(to_type.get()));\n+            case TypeIndex::Interval:\n+                return createIntervalWrapper(from_type, checkAndGetDataType<DataTypeInterval>(to_type.get())->getKind());\n             default:\n                 break;\n         }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02480_interval_casting_and_subquery.reference b/tests/queries/0_stateless/02480_interval_casting_and_subquery.reference\nnew file mode 100644\nindex 000000000000..74df309720b4\n--- /dev/null\n+++ b/tests/queries/0_stateless/02480_interval_casting_and_subquery.reference\n@@ -0,0 +1,25 @@\n+5\t2017-01-01 00:00:05\n+5\t2017-01-01 00:05:00\n+5\t2017-01-01 05:00:00\n+5\t2017-01-06 00:00:00\n+5\t2017-06-01 00:00:00\n+5\t2018-04-01 00:00:00\n+5\t2022-01-01 00:00:00\n+5\n+5\n+5\n+5\n+5\n+5\n+5\n+5\n+5\n+5\n+5\n+5\t2017-01-01 00:00:05\n+5\t2017-01-01 00:05:00\n+5\t2017-01-01 05:00:00\n+5\t2017-01-06 00:00:00\n+5\t2017-06-01 00:00:00\n+5\t2018-04-01 00:00:00\n+5\t2022-01-01 00:00:00\ndiff --git a/tests/queries/0_stateless/02480_interval_casting_and_subquery.sql b/tests/queries/0_stateless/02480_interval_casting_and_subquery.sql\nnew file mode 100644\nindex 000000000000..cb6eccb06c06\n--- /dev/null\n+++ b/tests/queries/0_stateless/02480_interval_casting_and_subquery.sql\n@@ -0,0 +1,25 @@\n+SELECT toIntervalSecond(5) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;\n+SELECT toIntervalMinute(5) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;\n+SELECT toIntervalHour(5) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;\n+SELECT toIntervalDay(5) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;\n+SELECT toIntervalMonth(5) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;\n+SELECT toIntervalQuarter(5) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;\n+SELECT toIntervalYear(5) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;\n+SELECT CAST(5 AS IntervalNanosecond);\n+SELECT CAST(5 AS IntervalMicrosecond);\n+SELECT CAST(5 AS IntervalMillisecond);\n+SELECT CAST(5 AS IntervalSecond);\n+SELECT CAST(5 AS IntervalMinute);\n+SELECT CAST(5 AS IntervalHour);\n+SELECT CAST(5 AS IntervalDay);\n+SELECT CAST(5 AS IntervalWeek);\n+SELECT CAST(5 AS IntervalMonth);\n+SELECT CAST(5 AS IntervalQuarter);\n+SELECT CAST(5 AS IntervalYear);\n+SELECT (SELECT toIntervalSecond(5)) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;\n+SELECT (SELECT toIntervalMinute(5)) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;\n+SELECT (SELECT toIntervalHour(5)) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;\n+SELECT (SELECT toIntervalDay(5)) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;\n+SELECT (SELECT toIntervalMonth(5)) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;\n+SELECT (SELECT toIntervalQuarter(5)) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;\n+SELECT (SELECT toIntervalYear(5)) AS interval, toDateTime('2017-01-01 00:00:00') + interval AS res;\n",
  "problem_statement": "Interval data type is not passed correctly from subquery\nYou have to provide the following information whenever possible.\r\n\r\n**Describe the bug**\r\n\r\nInterval data type is not passed correctly from subquery\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes, tested on 21.6.5.37.\r\n\r\n**How to reproduce**\r\n\r\n```sql\r\nSELECT\r\n    toIntervalDay(5) AS interval,\r\n    now() + interval AS res\r\n\r\n\u250c\u2500interval\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500res\u2500\u2510\r\n\u2502        5 \u2502 2021-07-03 13:11:45 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nBut if I wrap interval calculation in subquery:\r\n\r\n```sql\r\nSELECT\r\n    (SELECT toIntervalDay(5)) AS interval,\r\n    now() + interval AS res\r\n\r\nReceived exception from server (version 21.6.5):\r\nCode: 70. DB::Exception: Received from localhost:9000. DB::Exception: Conversion from Int8 to IntervalDay is not supported: While processing CAST(5, 'IntervalDay') AS interval, now() + interval AS res.\r\n```\r\n\r\n**Expected behavior**\r\n\r\nBoth queries should work the same way.\n",
  "hints_text": "Minimal example: `SELECT CAST(5 AS IntervalDay)`.\nHi, I'd like to have a try on this one.",
  "created_at": "2022-11-12T19:56:57Z",
  "modified_files": [
    "src/Functions/FunctionsConversion.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02480_interval_casting_and_subquery.reference",
    "b/tests/queries/0_stateless/02480_interval_casting_and_subquery.sql"
  ]
}