{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 80597,
  "instance_id": "ClickHouse__ClickHouse-80597",
  "issue_numbers": [
    "45536"
  ],
  "base_commit": "25f2e13a8fc3ed6e6215ee7481677e1b8523ac4c",
  "patch": "diff --git a/src/Storages/MergeTree/KeyCondition.cpp b/src/Storages/MergeTree/KeyCondition.cpp\nindex 09b99888cf72..d23c76fc3fd9 100644\n--- a/src/Storages/MergeTree/KeyCondition.cpp\n+++ b/src/Storages/MergeTree/KeyCondition.cpp\n@@ -2901,9 +2901,41 @@ std::optional<Range> KeyCondition::applyMonotonicFunctionsChainToRange(\n // This allows to use a more efficient lookup with no extra reads.\n bool KeyCondition::matchesExactContinuousRange() const\n {\n-    // Not implemented yet.\n-    if (hasMonotonicFunctionsChain())\n-        return false;\n+    const Field field{};\n+    auto is_always_monotonic_chain = [&field](const std::vector<FunctionBasePtr> & chain)\n+    {\n+        for (const auto & func : chain)\n+        {\n+            if (!func || !func->hasInformationAboutMonotonicity())\n+                return false;\n+\n+            const auto & types = func->getArgumentTypes();\n+            if (types.empty() || !types.front())\n+                return false;\n+\n+            const auto monotonicity = func->getMonotonicityForRange(*types.front(), field, field);\n+            if (!monotonicity.is_always_monotonic)\n+                return false;\n+        }\n+\n+        return true;\n+    };\n+\n+    for (const auto & elem : rpn)\n+    {\n+        if (!elem.monotonic_functions_chain.empty() && !is_always_monotonic_chain(elem.monotonic_functions_chain))\n+            return false;\n+\n+        if (elem.set_index)\n+        {\n+            if (elem.function != RPNElement::Function::FUNCTION_IN_SET || elem.set_index->size() != 1)\n+                return false;\n+\n+            for (const auto & mapping : elem.set_index->getIndexesMapping())\n+                if (!mapping.functions.empty() && !is_always_monotonic_chain(mapping.functions))\n+                    return false;\n+        }\n+    }\n \n     enum Constraint\n     {\n@@ -2945,6 +2977,11 @@ bool KeyCondition::matchesExactContinuousRange() const\n             continue;\n         }\n \n+        if (element.function == RPNElement::Function::ALWAYS_TRUE)\n+        {\n+            continue;\n+        }\n+\n         return false;\n     }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03518_key_condition_binary_search.reference b/tests/queries/0_stateless/03518_key_condition_binary_search.reference\nnew file mode 100644\nindex 000000000000..f00580c40607\n--- /dev/null\n+++ b/tests/queries/0_stateless/03518_key_condition_binary_search.reference\n@@ -0,0 +1,2 @@\n+3\n+1\ndiff --git a/tests/queries/0_stateless/03518_key_condition_binary_search.sh b/tests/queries/0_stateless/03518_key_condition_binary_search.sh\nnew file mode 100755\nindex 000000000000..e7ab9b6ef0b7\n--- /dev/null\n+++ b/tests/queries/0_stateless/03518_key_condition_binary_search.sh\n@@ -0,0 +1,31 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_CLIENT -n -q \"\n+DROP TABLE IF EXISTS t;\n+CREATE TABLE t\n+(\n+    c Enum8('Zero' = 0, 'One' = 1, 'Two' = 2, 'Three' = 3, 'Four' = 4, 'Five' = 5)\n+)\n+ENGINE = MergeTree\n+ORDER BY c;\n+INSERT INTO t values('One');\n+SELECT * FROM t WHERE c = 1 settings send_logs_level='trace';\n+SELECT * FROM t WHERE c = 'One' settings send_logs_level='trace';\n+SELECT * FROM t WHERE c = 1 and 1 = 1 settings send_logs_level='trace';\n+\" 2>&1 | grep -c \"binary search\"\n+\n+$CLICKHOUSE_CLIENT -n -q \"\n+DROP TABLE IF EXISTS t1;\n+CREATE TABLE t1\n+(\n+    timestamp DateTime64(3, 'Asia/Shanghai')\n+)\n+ENGINE = MergeTree\n+ORDER BY timestamp;\n+INSERT INTO t1 VALUES ('2025-05-21 00:00:00');\n+SELECT * FROM t1 WHERE toDayOfMonth(timestamp) = 1 settings send_logs_level='trace';\n+\" 2>&1 | grep -c \"generic exclusion search\"\n\\ No newline at end of file\n",
  "problem_statement": "For enum columns in the primary key, the granule selection algorithm shouldn't depend on if string or numeric value is used in predicate \nFor a table where an `enum column is used as primary key column`, then:\r\n- for searches on that column with a numeric value, ClickHouse uses `generic exclusion search` over index entries\r\n- for searches on that column with a string value, ClickHouse uses `binary search` over index entries\r\n\r\nIt should use the same algorithm in both cases. \r\n\r\nMinimal example:\r\n```\r\nSELECT version();\r\n\u250c\u2500version()\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 22.12.1.21301 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\nCREATE TABLE t\r\n(\r\n    c Enum8('Zero' = 0, 'One' = 1, 'Two' = 2, 'Three' = 3, 'Four' = 4, 'Five' = 5)\r\n)\r\nENGINE = AggregatingMergeTree\r\nORDER BY c;\r\n\r\n\r\nINSERT INTO t values('Zero');\r\nINSERT INTO t values('One');\r\nINSERT INTO t values('Two');\r\n\r\n\r\nSET send_logs_level = 'trace';\r\n\r\n\r\n----------------------------------------------------------\r\n-- this triggers generic exclusion search\r\n----------------------------------------------------------\r\nSELECT * FROM t WHERE c = 1;\r\n\r\n...\r\n(SelectExecutor): Key condition: (_CAST(column 0) in [1, 1])\r\n(SelectExecutor): Used generic exclusion search over index\r\n...\r\n\r\n\r\n----------------------------------------------------------\r\n-- whereas this triggers binary search\r\n----------------------------------------------------------\r\n\r\nSELECT * FROM t WHERE c = 'One';\r\n\r\n...\r\n(SelectExecutor): Key condition: (column 0 in [1, 1])\r\n(SelectExecutor): Running binary search on index\r\n...\r\n```\n",
  "hints_text": "Probably because of function `_CAST` in the lhs of key condition. #12277 didn't implement binary search if lhs is wrapped by function chain.",
  "created_at": "2025-05-21T02:01:44Z",
  "modified_files": [
    "src/Storages/MergeTree/KeyCondition.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03518_key_condition_binary_search.reference",
    "b/tests/queries/0_stateless/03518_key_condition_binary_search.sh"
  ]
}