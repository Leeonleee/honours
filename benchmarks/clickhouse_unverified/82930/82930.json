{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 82930,
  "instance_id": "ClickHouse__ClickHouse-82930",
  "issue_numbers": [
    "82725"
  ],
  "base_commit": "ec62acabf2c13d8b7d391263e8b82f56e2aa9c1e",
  "patch": "diff --git a/src/Analyzer/Resolve/IdentifierResolver.cpp b/src/Analyzer/Resolve/IdentifierResolver.cpp\nindex 9b1ec75a8074..fa0b8749271f 100644\n--- a/src/Analyzer/Resolve/IdentifierResolver.cpp\n+++ b/src/Analyzer/Resolve/IdentifierResolver.cpp\n@@ -914,6 +914,9 @@ IdentifierResolveResult IdentifierResolver::tryResolveIdentifierFromJoin(const I\n                 identifier_lookup.dump(),\n                 scope.scope_node->formatASTForErrorMessage());\n \n+        if (!left_resolved_identifier && !right_resolved_identifier)\n+            return {};\n+\n         return {\n                 .resolved_identifier = left_resolved_identifier ? left_resolved_identifier : right_resolved_identifier,\n                 .resolve_place = IdentifierResolvePlace::JOIN_TREE\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03548_analyzer_indentifier_resolution_invariant.reference b/tests/queries/0_stateless/03548_analyzer_indentifier_resolution_invariant.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03548_analyzer_indentifier_resolution_invariant.sql b/tests/queries/0_stateless/03548_analyzer_indentifier_resolution_invariant.sql\nnew file mode 100644\nindex 000000000000..f63ec1f5b193\n--- /dev/null\n+++ b/tests/queries/0_stateless/03548_analyzer_indentifier_resolution_invariant.sql\n@@ -0,0 +1,4 @@\n+SET allow_experimental_analyzer = 1;\n+\n+CREATE TABLE t0 (c0 Int) ENGINE = Memory;\n+CREATE VIEW v0 AS (SELECT 1 AS a0, (1) IN a0 FROM t0 tx JOIN t0 ty ON 1 CROSS JOIN t0 tz); -- { serverError UNKNOWN_IDENTIFIER }\n",
  "problem_statement": "Logical error: 'check_invariant()'\n### Describe the bug\n\nEasy to reproduce.\n\n### How to reproduce\n\nI only reproduce it in a debug build:\n\n```sql\nCREATE TABLE t0 (c0 Int) ENGINE = Memory;\nCREATE VIEW v0 AS (SELECT 1 AS a0, (1) IN a0 FROM t0 tx JOIN t0 ty ON 1 CROSS JOIN t0 tz);\n```\nOnly happens with the new analyzer enabled, and when creating a view.\n\n### Error message and/or stacktrace\n\nStack trace:\n```\n<Fatal> : Logical error: 'check_invariant()'.\n<Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. src/Common/StackTrace.cpp:389: StackTrace::StackTrace() @ 0x00000000137820c4\n1. src/Common/Exception.cpp:55: DB::abortOnFailedAssertion(String const&) @ 0x00000000136ea895\n2. src/Analyzer/Resolve/IdentifierLookup.h:121: DB::IdentifierResolver::tryResolveIdentifierFromCrossJoin(DB::IdentifierLookup const&, std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000019830cdb\n3. src/Analyzer/Resolve/IdentifierResolver.cpp:1383: DB::IdentifierResolver::tryResolveIdentifierFromJoinTreeNode(DB::IdentifierLookup const&, std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000001983114f\n4. src/Analyzer/Resolve/IdentifierResolver.cpp:0: DB::IdentifierResolver::tryResolveIdentifierFromJoinTree(DB::IdentifierLookup const&, DB::IdentifierResolveScope&) @ 0x0000000019834bf1\n5. src/Analyzer/Resolve/QueryAnalyzer.cpp:1517: DB::QueryAnalyzer::tryResolveIdentifier(DB::IdentifierLookup const&, DB::IdentifierResolveScope&, DB::IdentifierResolveContext) @ 0x000000001958b0ea\n6. src/Analyzer/Resolve/QueryAnalyzer.cpp:3807: DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000001957bd01\n7. src/Analyzer/Resolve/QueryAnalyzer.cpp:4091: DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000001957a291\n8. src/Analyzer/Resolve/QueryAnalyzer.cpp:2998: DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000001959225d\n9. src/Analyzer/Resolve/QueryAnalyzer.cpp:3940: DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000001957af5e\n10. src/Analyzer/Resolve/QueryAnalyzer.cpp:4091: DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x000000001957a291\n11. src/Analyzer/Resolve/QueryAnalyzer.cpp:4415: DB::QueryAnalyzer::resolveProjectionExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x00000000195a5e72\n12. src/Analyzer/Resolve/QueryAnalyzer.cpp:5774: DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x00000000195743fe\n13. src/Analyzer/Resolve/QueryAnalyzer.cpp:181: DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000019573414\n14. src/Analyzer/Resolve/QueryAnalysisPass.cpp:18: DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000019572bee\n15. src/Analyzer/QueryTreePassManager.cpp:187: DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>) @ 0x00000000195d2833\n16. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:165: DB::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000001a15c247\n17. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:182: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000001a15a9ed\n18. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:219: DB::InterpreterSelectQueryAnalyzer::getSampleBlock(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&) @ 0x000000001a15c506\n19. src/Interpreters/InterpreterCreateQuery.cpp:962: DB::InterpreterCreateQuery::getTablePropertiesAndNormalizeCreateQuery(DB::ASTCreateQuery&, DB::LoadingStrictnessLevel) const @ 0x000000001a0b556b\n20. src/Interpreters/InterpreterCreateQuery.cpp:1674: DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x000000001a0beb8f\n21. src/Interpreters/InterpreterCreateQuery.cpp:2370: DB::InterpreterCreateQuery::execute() @ 0x000000001a0cc272\n22. src/Interpreters/executeQuery.cpp:1561: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::ImplicitTransactionControlExecutor>) @ 0x000000001a435543\n23. src/Interpreters/executeQuery.cpp:1769: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001a430d1b\n24. src/Server/TCPHandler.cpp:722: DB::TCPHandler::runImpl() @ 0x000000001c1f3232\n25. src/Server/TCPHandler.cpp:2729: DB::TCPHandler::run() @ 0x000000001c20c864\n26. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000020532267\n27. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000020532765\n28. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000204dac5f\n29. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000204d8811\n30. start_thread @ 0x00000000000a2ef1\n31. __clone3 @ 0x000000000013445c\n```\n",
  "hints_text": "",
  "created_at": "2025-06-30T14:34:42Z",
  "modified_files": [
    "src/Analyzer/Resolve/IdentifierResolver.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03548_analyzer_indentifier_resolution_invariant.sql"
  ]
}