{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 8606,
  "instance_id": "ClickHouse__ClickHouse-8606",
  "issue_numbers": [
    "5653"
  ],
  "base_commit": "5f446a117de21ca5c0944cb25ad56957f1f1829c",
  "patch": "diff --git a/dbms/src/DataStreams/AddingDefaultsBlockInputStream.cpp b/dbms/src/DataStreams/AddingDefaultsBlockInputStream.cpp\nindex f6b6b290428e..112afe61183f 100644\n--- a/dbms/src/DataStreams/AddingDefaultsBlockInputStream.cpp\n+++ b/dbms/src/DataStreams/AddingDefaultsBlockInputStream.cpp\n@@ -62,6 +62,9 @@ Block AddingDefaultsBlockInputStream::readImpl()\n         if (evaluate_block.has(column.first))\n             evaluate_block.erase(column.first);\n \n+    if (!evaluate_block.columns())\n+        evaluate_block.insert({ColumnConst::create(ColumnUInt8::create(1, 0), res.rows()), std::make_shared<DataTypeUInt8>(), \"_dummy\"});\n+\n     evaluateMissingDefaults(evaluate_block, header.getNamesAndTypesList(), column_defaults, context, false);\n \n     std::unordered_map<size_t, MutableColumnPtr> mixed_columns;\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01060_defaults_all_columns.reference b/dbms/tests/queries/0_stateless/01060_defaults_all_columns.reference\nnew file mode 100644\nindex 000000000000..68b4657ca606\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01060_defaults_all_columns.reference\n@@ -0,0 +1,4 @@\n+1\thello\n+2\ttest42\n+42\ttest42\n+42\tworld\ndiff --git a/dbms/tests/queries/0_stateless/01060_defaults_all_columns.sql b/dbms/tests/queries/0_stateless/01060_defaults_all_columns.sql\nnew file mode 100644\nindex 000000000000..afbb01b8cb25\n--- /dev/null\n+++ b/dbms/tests/queries/0_stateless/01060_defaults_all_columns.sql\n@@ -0,0 +1,10 @@\n+DROP TABLE IF EXISTS defaults_all_columns;\n+\n+CREATE TABLE defaults_all_columns (n UInt8 DEFAULT 42, s String DEFAULT concat('test', CAST(n, 'String'))) ENGINE = Memory;\n+\n+INSERT INTO defaults_all_columns FORMAT JSONEachRow {\"n\": 1, \"s\": \"hello\"} {};\n+INSERT INTO defaults_all_columns FORMAT JSONEachRow {\"n\": 2}, {\"s\": \"world\"};\n+\n+SELECT * FROM defaults_all_columns ORDER BY n, s;\n+\n+DROP TABLE defaults_all_columns;\ndiff --git a/dbms/tests/queries/bugs/01060_defaults_all_columns.reference b/dbms/tests/queries/bugs/01060_defaults_all_columns.reference\nnew file mode 100644\nindex 000000000000..7b1fdfb68171\n--- /dev/null\n+++ b/dbms/tests/queries/bugs/01060_defaults_all_columns.reference\n@@ -0,0 +1,4 @@\n+1\thello\n+2\ttest2\n+42\ttest42\n+42\tworld\n",
  "problem_statement": "\"Mismatch column sizes\" when inserting default Tuple from JSONEachRow\n```\r\ncreate table t(a Tuple(int, int) default (7, 7));\r\nset input_format_defaults_for_omitted_values = true;\r\ninsert into t values {}\r\n\r\nException on client:\r\nCode: 9. DB::Exception: Mismatch column sizes while adding defaults\r\n```\n",
  "hints_text": "Turns out the Tuple type is irrelevant. The core problem is that we can't determine the size of a Block that has no columns. We run into this problem at some point, when all the columns of a block are to be filled with defaults.\r\n\r\nWe have not received any complaints about this issue, and the way we work with Blocks is going to be changed in processors pr (#4914), so let's wait for it.\nI got the same problem when using default values with CSV format. I'm using ClickHouse 19.17.5 and input_format_defaults_for_omitted_fields is on by default. For example:\r\n```\r\n~ clickhouse-client -q \"CREATE TABLE foo (id UInt32 DEFAULT 1, date Date DEFAULT today(), random UInt32 DEFAULT rand()) ENGINE = Log\"\r\n~ echo -ne \"1,'2019-12-31',17\\n2,'2019-12-31',18\" | clickhouse-client -q \"INSERT INTO foo FORMAT CSV\"\r\n~ clickhouse-client -q \"SELECT * FROM foo\"                                                           \r\n1\t2019-12-31\t17\r\n2\t2019-12-31\t18\r\n~ echo -ne \"3,,19\\n2,'2019-12-31',\" | clickhouse-client -q \"INSERT INTO foo FORMAT CSV\"\r\nCode: 9. DB::Exception: Mismatch column sizes while adding defaults\r\n```\r\nSame problem with TSKV format:\r\n```\r\n~ echo -ne \"id=3\\tdate=2019-12-31\\trandom=19\\n\" | clickhouse-client -q \"INSERT INTO foo FORMAT TSKV\"\r\n~ clickhouse-client -q \"SELECT * FROM foo\"                                                                                                                                                                             \r\n3\t2019-12-31\t19\r\n1\t2019-12-31\t17\r\n2\t2019-12-31\t18\r\n~ echo -ne \"id=3\\trandom=19\\n\" | clickhouse-client -q \"INSERT INTO foo FORMAT TSKV\"                 \r\nCode: 9. DB::Exception: Mismatch column sizes while adding defaults\r\n```\r\nNo matter what I tried, the same error was returned. The input_format_defaults_for_omitted_fields feature doesn't seem to work at all.\n```\r\ncreate table json_insert (a UInt32 DEFAULT 1, b UInt32 DEFAULT 1) Engine=Log;\r\ninsert into json_insert FORMAT JSONEachRow {\"a\":2}\r\n```\r\n\r\n```\r\nException on client:\r\nCode: 9. DB::Exception: Mismatch column sizes while adding defaults\r\nStack trace:\r\n0. 0x55b34754d147 StackTrace::StackTrace() /build/obj-x86_64-linux-gnu/../dbms/src/Common/StackTrace.cpp:228\r\n1. 0x55b34754cf43 DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) /build/obj-x86_64-linux-gnu/../dbms/src/Common/Exception.h:26\r\n2. 0x55b34723a05e DB::AddingDefaultsBlockInputStream::checkCalculated(DB::ColumnWithTypeAndName const&, DB::ColumnWithTypeAndName const&, unsigned long) const [clone .cold] /usr/include/c++/9/bits/basic_string.h:222\r\n3. 0x55b34abd29f5 DB::AddingDefaultsBlockInputStream::readImpl() /usr/include/c++/9/bits/stl_bvector.h:187\r\n4. 0x55b34abdb28f DB::IBlockInputStream::read() /usr/include/c++/9/bits/stl_vector.h:108\r\n5. 0x55b34abd4594 DB::AsynchronousBlockInputStream::calculate() /usr/include/c++/9/bits/stl_vector.h:108\r\n6. 0x55b34abd491a std::_Function_handler<void (), DB::AsynchronousBlockInputStream::next()::{lambda()#1}>::_M_invoke(std::_Any_data const&) /usr/include/c++/9/bits/atomic_base.h:551\r\n7. 0x55b34759774a ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>) /usr/include/c++/9/bits/atomic_base.h:551\r\n8. 0x55b347597d79 ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const /build/obj-x86_64-linux-gnu/../dbms/src/Common/ThreadPool.h:155\r\n9. 0x55b34759524a ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>) /usr/include/c++/9/bits/atomic_base.h:551\r\n10. 0x55b34d75a410 execute_native_thread_routine /usr/lib/debug/usr/bin/clickhouse\r\n11. 0x7fd0158a16db start_thread /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n12. 0x7fd0151be88f clone /build/glibc-OTsEL5/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n```",
  "created_at": "2020-01-10T10:46:51Z",
  "modified_files": [
    "dbms/src/DataStreams/AddingDefaultsBlockInputStream.cpp"
  ],
  "modified_test_files": [
    "b/dbms/tests/queries/0_stateless/01060_defaults_all_columns.reference",
    "b/dbms/tests/queries/0_stateless/01060_defaults_all_columns.sql",
    "b/dbms/tests/queries/bugs/01060_defaults_all_columns.reference"
  ]
}