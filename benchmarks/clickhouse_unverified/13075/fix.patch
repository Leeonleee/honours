diff --git a/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp b/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp
index 51f7e93552a7..5c41b4a1fc04 100644
--- a/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp
+++ b/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp
@@ -80,7 +80,7 @@ QueryPipeline createLocalStream(
     pipeline.addSimpleTransform([&](const Block & source_header)
     {
         return std::make_shared<ConvertingTransform>(
-                source_header, header, ConvertingTransform::MatchColumnsMode::Name);
+                source_header, header, ConvertingTransform::MatchColumnsMode::Name, true);
     });
 
     /** Materialization is needed, since from remote servers the constants come materialized.
diff --git a/src/Interpreters/InterpreterSelectQuery.cpp b/src/Interpreters/InterpreterSelectQuery.cpp
index c13ed22b1114..f5ea9ec965d3 100644
--- a/src/Interpreters/InterpreterSelectQuery.cpp
+++ b/src/Interpreters/InterpreterSelectQuery.cpp
@@ -474,7 +474,7 @@ void InterpreterSelectQuery::buildQueryPlan(QueryPlan & query_plan)
     /// We must guarantee that result structure is the same as in getSampleBlock()
     if (!blocksHaveEqualStructure(query_plan.getCurrentDataStream().header, result_header))
     {
-        auto converting = std::make_unique<ConvertingStep>(query_plan.getCurrentDataStream(), result_header);
+        auto converting = std::make_unique<ConvertingStep>(query_plan.getCurrentDataStream(), result_header, true);
         query_plan.addStep(std::move(converting));
     }
 }
diff --git a/src/Processors/QueryPlan/ConvertingStep.cpp b/src/Processors/QueryPlan/ConvertingStep.cpp
index 4713a3c44027..356aad638241 100644
--- a/src/Processors/QueryPlan/ConvertingStep.cpp
+++ b/src/Processors/QueryPlan/ConvertingStep.cpp
@@ -16,9 +16,10 @@ static ITransformingStep::DataStreamTraits getTraits()
     };
 }
 
-ConvertingStep::ConvertingStep(const DataStream & input_stream_, Block result_header_)
+ConvertingStep::ConvertingStep(const DataStream & input_stream_, Block result_header_, bool ignore_constant_values_)
     : ITransformingStep(input_stream_, result_header_, getTraits())
     , result_header(std::move(result_header_))
+    , ignore_constant_values(ignore_constant_values_)
 {
     updateDistinctColumns(output_stream->header, output_stream->distinct_columns);
 }
@@ -27,14 +28,14 @@ void ConvertingStep::transformPipeline(QueryPipeline & pipeline)
 {
     pipeline.addSimpleTransform([&](const Block & header)
     {
-        return std::make_shared<ConvertingTransform>(header, result_header, ConvertingTransform::MatchColumnsMode::Name);
+        return std::make_shared<ConvertingTransform>(header, result_header, ConvertingTransform::MatchColumnsMode::Name, ignore_constant_values);
     });
 }
 
 void ConvertingStep::describeActions(FormatSettings & settings) const
 {
     const auto & header = input_streams[0].header;
-    auto conversion = ConvertingTransform(header, result_header, ConvertingTransform::MatchColumnsMode::Name)
+    auto conversion = ConvertingTransform(header, result_header, ConvertingTransform::MatchColumnsMode::Name, ignore_constant_values)
             .getConversion();
 
     auto dump_description = [&](const ColumnWithTypeAndName & elem, bool is_const)
diff --git a/src/Processors/QueryPlan/ConvertingStep.h b/src/Processors/QueryPlan/ConvertingStep.h
index 5591b49028c5..70fd34330d15 100644
--- a/src/Processors/QueryPlan/ConvertingStep.h
+++ b/src/Processors/QueryPlan/ConvertingStep.h
@@ -8,7 +8,7 @@ namespace DB
 class ConvertingStep : public ITransformingStep
 {
 public:
-    ConvertingStep(const DataStream & input_stream_, Block result_header_);
+    ConvertingStep(const DataStream & input_stream_, Block result_header_, bool ignore_constant_values_ = false);
 
     String getName() const override { return "Converting"; }
 
@@ -18,6 +18,8 @@ class ConvertingStep : public ITransformingStep
 
 private:
     Block result_header;
+    /// Do not check that constants are same. Use value from result_header.
+    bool ignore_constant_values;
 };
 
 }
diff --git a/src/Processors/Transforms/ConvertingTransform.cpp b/src/Processors/Transforms/ConvertingTransform.cpp
index a0e9626b3025..e9d6f36adec3 100644
--- a/src/Processors/Transforms/ConvertingTransform.cpp
+++ b/src/Processors/Transforms/ConvertingTransform.cpp
@@ -35,9 +35,11 @@ static ColumnPtr castColumnWithDiagnostic(
 ConvertingTransform::ConvertingTransform(
     Block source_header_,
     Block result_header_,
-    MatchColumnsMode mode_)
+    MatchColumnsMode mode_,
+    bool ignore_constant_values_)
     : ISimpleTransform(std::move(source_header_), std::move(result_header_), false)
     , conversion(getOutputPort().getHeader().columns())
+    , ignore_constant_values(ignore_constant_values_)
 {
     const auto & source = getInputPort().getHeader();
     const auto & result = getOutputPort().getHeader();
@@ -79,7 +81,7 @@ ConvertingTransform::ConvertingTransform(
         {
             if (const auto * src_const = typeid_cast<const ColumnConst *>(src_elem.column.get()))
             {
-                if (res_const->getField() != src_const->getField())
+                if (!ignore_constant_values && res_const->getField() != src_const->getField())
                     throw Exception("Cannot convert column " + backQuoteIfNeed(res_elem.name) + " because "
                                     "it is constant but values of constants are different in source and result",
                                     ErrorCodes::BLOCKS_HAVE_DIFFERENT_STRUCTURE);
@@ -115,6 +117,12 @@ void ConvertingTransform::transform(Chunk & chunk)
         src_elem.column = src_columns[conversion[res_pos]];
         auto res_elem = result.getByPosition(res_pos);
 
+        if (ignore_constant_values && isColumnConst(*res_elem.column))
+        {
+            res_columns.emplace_back(res_elem.column->cloneResized(num_rows));
+            continue;
+        }
+
         ColumnPtr converted = castColumnWithDiagnostic(src_elem, res_elem);
 
         if (!isColumnConst(*res_elem.column))
diff --git a/src/Processors/Transforms/ConvertingTransform.h b/src/Processors/Transforms/ConvertingTransform.h
index b4b42dcb6ead..68a914e84416 100644
--- a/src/Processors/Transforms/ConvertingTransform.h
+++ b/src/Processors/Transforms/ConvertingTransform.h
@@ -31,7 +31,8 @@ class ConvertingTransform : public ISimpleTransform
     ConvertingTransform(
         Block source_header_,
         Block result_header_,
-        MatchColumnsMode mode_);
+        MatchColumnsMode mode_,
+        bool ignore_constant_values_ = false); /// Do not check that constants are same. Use value from result_header.
 
     String getName() const override { return "Converting"; }
 
@@ -43,6 +44,11 @@ class ConvertingTransform : public ISimpleTransform
 private:
     /// How to construct result block. Position in source block, where to get each column.
     ColumnNumbers conversion;
+    /// Do not check that constants are same. Use value from result_header.
+    /// This is needed in case run functions which are constatn in query scope, 
+    /// but may return different result being executed remotely, like `now64()` or `randConstant()`.
+    /// In this case we replace constants from remote source to constatns from initiator.
+    bool ignore_constant_values;
 };
 
 }
