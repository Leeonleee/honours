diff --git a/src/AggregateFunctions/AggregateFunctionSum.h b/src/AggregateFunctions/AggregateFunctionSum.h
index 812390641693..15fc93dec75a 100644
--- a/src/AggregateFunctions/AggregateFunctionSum.h
+++ b/src/AggregateFunctions/AggregateFunctionSum.h
@@ -287,7 +287,7 @@ class AggregateFunctionSum final : public IAggregateFunctionDataHelper<Data, Agg
 
     void add(AggregateDataPtr place, const IColumn ** columns, size_t row_num, Arena *) const override
     {
-        const auto & column = static_cast<const ColVecType &>(*columns[0]);
+        const auto & column = assert_cast<const ColVecType &>(*columns[0]);
         if constexpr (is_big_int_v<T>)
             this->data(place).add(static_cast<TResult>(column.getData()[row_num]));
         else
@@ -309,7 +309,7 @@ class AggregateFunctionSum final : public IAggregateFunctionDataHelper<Data, Agg
         }
         else
         {
-            const auto & column = static_cast<const ColVecType &>(*columns[0]);
+            const auto & column = assert_cast<const ColVecType &>(*columns[0]);
             this->data(place).addMany(column.getData().data(), batch_size);
         }
     }
@@ -327,7 +327,7 @@ class AggregateFunctionSum final : public IAggregateFunctionDataHelper<Data, Agg
         }
         else
         {
-            const auto & column = static_cast<const ColVecType &>(*columns[0]);
+            const auto & column = assert_cast<const ColVecType &>(*columns[0]);
             this->data(place).addManyNotNull(column.getData().data(), null_map, batch_size);
         }
     }
@@ -349,7 +349,7 @@ class AggregateFunctionSum final : public IAggregateFunctionDataHelper<Data, Agg
 
     void insertResultInto(AggregateDataPtr place, IColumn & to, Arena *) const override
     {
-        auto & column = static_cast<ColVecResult &>(to);
+        auto & column = assert_cast<ColVecResult &>(to);
         column.getData().push_back(this->data(place).get());
     }
 
diff --git a/src/Storages/StorageMaterializedView.cpp b/src/Storages/StorageMaterializedView.cpp
index 61fdbc0198b9..af00b37b1d5a 100644
--- a/src/Storages/StorageMaterializedView.cpp
+++ b/src/Storages/StorageMaterializedView.cpp
@@ -11,6 +11,7 @@
 #include <Interpreters/InterpreterRenameQuery.h>
 #include <Interpreters/getTableExpressions.h>
 #include <Interpreters/AddDefaultDatabaseVisitor.h>
+#include <Interpreters/getHeaderForProcessingStage.h>
 #include <Access/AccessFlags.h>
 #include <DataStreams/IBlockInputStream.h>
 #include <DataStreams/IBlockOutputStream.h>
@@ -24,6 +25,7 @@
 #include <Common/checkStackSize.h>
 #include <Processors/Sources/SourceFromInputStream.h>
 #include <Processors/QueryPlan/SettingQuotaAndLimitsStep.h>
+#include <Processors/QueryPlan/ExpressionStep.h>
 
 
 namespace DB
@@ -130,7 +132,7 @@ Pipe StorageMaterializedView::read(
 void StorageMaterializedView::read(
     QueryPlan & query_plan,
     const Names & column_names,
-    const StorageMetadataPtr & /*metadata_snapshot*/,
+    const StorageMetadataPtr & metadata_snapshot,
     SelectQueryInfo & query_info,
     const Context & context,
     QueryProcessingStage::Enum processed_stage,
@@ -139,15 +141,27 @@ void StorageMaterializedView::read(
 {
     auto storage = getTargetTable();
     auto lock = storage->lockForShare(context.getCurrentQueryId(), context.getSettingsRef().lock_acquire_timeout);
-    auto metadata_snapshot = storage->getInMemoryMetadataPtr();
+    auto target_metadata_snapshot = storage->getInMemoryMetadataPtr();
 
     if (query_info.order_optimizer)
-        query_info.input_order_info = query_info.order_optimizer->getInputOrder(metadata_snapshot, context);
+        query_info.input_order_info = query_info.order_optimizer->getInputOrder(target_metadata_snapshot, context);
 
-    storage->read(query_plan, column_names, metadata_snapshot, query_info, context, processed_stage, max_block_size, num_streams);
+    storage->read(query_plan, column_names, target_metadata_snapshot, query_info, context, processed_stage, max_block_size, num_streams);
 
     if (query_plan.isInitialized())
     {
+        auto mv_header = getHeaderForProcessingStage(*this, column_names, metadata_snapshot, query_info, context, processed_stage);
+        auto target_header = query_plan.getCurrentDataStream().header;
+        if (!blocksHaveEqualStructure(mv_header, target_header))
+        {
+            auto converting_actions = ActionsDAG::makeConvertingActions(target_header.getColumnsWithTypeAndName(),
+                                                                        mv_header.getColumnsWithTypeAndName(),
+                                                                        ActionsDAG::MatchColumnsMode::Name);
+            auto converting_step = std::make_unique<ExpressionStep>(query_plan.getCurrentDataStream(), converting_actions);
+            converting_step->setStepDescription("Convert target table structure to MaterializedView structure");
+            query_plan.addStep(std::move(converting_step));
+        }
+
         StreamLocalLimits limits;
         SizeLimits leaf_limits;
 
@@ -161,7 +175,7 @@ void StorageMaterializedView::read(
                 nullptr,
                 nullptr);
 
-        adding_limits_and_quota->setStepDescription("Lock destination table for Buffer");
+        adding_limits_and_quota->setStepDescription("Lock destination table for MaterializedView");
         query_plan.addStep(std::move(adding_limits_and_quota));
     }
 }
