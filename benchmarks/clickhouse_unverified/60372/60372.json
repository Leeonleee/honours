{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 60372,
  "instance_id": "ClickHouse__ClickHouse-60372",
  "issue_numbers": [
    "60301"
  ],
  "base_commit": "2d00705e4e1317ddacb9d1a180da5b5d1aee312f",
  "patch": "diff --git a/docs/en/sql-reference/table-functions/merge.md b/docs/en/sql-reference/table-functions/merge.md\nindex a1f376ba0ebb..1d21bd504afd 100644\n--- a/docs/en/sql-reference/table-functions/merge.md\n+++ b/docs/en/sql-reference/table-functions/merge.md\n@@ -11,11 +11,11 @@ Creates a temporary [Merge](../../engines/table-engines/special/merge.md) table.\n **Syntax**\n \n ```sql\n-merge('db_name', 'tables_regexp')\n+merge(['db_name',] 'tables_regexp')\n ```\n **Arguments**\n \n-- `db_name` \u2014 Possible values:\n+- `db_name` \u2014 Possible values (optional, default is `currentDatabase()`):\n     - database name,\n     - constant expression that returns a string with a database name, for example, `currentDatabase()`,\n     - `REGEXP(expression)`, where `expression` is a regular expression to match the DB names.\ndiff --git a/src/TableFunctions/TableFunctionMerge.cpp b/src/TableFunctions/TableFunctionMerge.cpp\nindex e7b5a34958fb..ff1459ca34bf 100644\n--- a/src/TableFunctions/TableFunctionMerge.cpp\n+++ b/src/TableFunctions/TableFunctionMerge.cpp\n@@ -88,26 +88,38 @@ void TableFunctionMerge::parseArguments(const ASTPtr & ast_function, ContextPtr\n \n     if (args_func.size() != 1)\n         throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,\n-                        \"Table function 'merge' requires exactly 2 arguments - name \"\n-                        \"of source database and regexp for table names.\");\n+                        \"Table function 'merge' requires from 1 to 2 parameters: \"\n+                        \"merge(['db_name',] 'tables_regexp')\");\n \n     ASTs & args = args_func.at(0)->children;\n \n-    if (args.size() != 2)\n-        throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,\n-                        \"Table function 'merge' requires exactly 2 arguments - name \"\n-                        \"of source database and regexp for table names.\");\n+    if (args.size() == 1)\n+    {\n+        database_is_regexp = false;\n+        source_database_name_or_regexp = context->getCurrentDatabase();\n \n-    auto [is_regexp, database_ast] = StorageMerge::evaluateDatabaseName(args[0], context);\n+        args[0] = evaluateConstantExpressionAsLiteral(args[0], context);\n+        source_table_regexp = checkAndGetLiteralArgument<String>(args[0], \"table_name_regexp\");\n+    }\n+    else if (args.size() == 2)\n+    {\n+        auto [is_regexp, database_ast] = StorageMerge::evaluateDatabaseName(args[0], context);\n \n-    database_is_regexp = is_regexp;\n+        database_is_regexp = is_regexp;\n \n-    if (!is_regexp)\n-        args[0] = database_ast;\n-    source_database_name_or_regexp = checkAndGetLiteralArgument<String>(database_ast, \"database_name\");\n+        if (!is_regexp)\n+            args[0] = database_ast;\n+        source_database_name_or_regexp = checkAndGetLiteralArgument<String>(database_ast, \"database_name\");\n \n-    args[1] = evaluateConstantExpressionAsLiteral(args[1], context);\n-    source_table_regexp = checkAndGetLiteralArgument<String>(args[1], \"table_name_regexp\");\n+        args[1] = evaluateConstantExpressionAsLiteral(args[1], context);\n+        source_table_regexp = checkAndGetLiteralArgument<String>(args[1], \"table_name_regexp\");\n+    }\n+    else\n+    {\n+        throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,\n+                        \"Table function 'merge' requires from 1 to 2 parameters: \"\n+                        \"merge(['db_name',] 'tables_regexp')\");\n+    }\n }\n \n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01902_table_function_merge_db_params.reference b/tests/queries/0_stateless/01902_table_function_merge_db_params.reference\nnew file mode 100644\nindex 000000000000..28edbbdfd389\n--- /dev/null\n+++ b/tests/queries/0_stateless/01902_table_function_merge_db_params.reference\n@@ -0,0 +1,6 @@\n+01902_db_params\tt\t0\n+01902_db_params\tt\t1\n+01902_db_params\tt\t2\n+01902_db_params\tt\t0\n+01902_db_params\tt\t1\n+01902_db_params\tt\t2\ndiff --git a/tests/queries/0_stateless/01902_table_function_merge_db_params.sql b/tests/queries/0_stateless/01902_table_function_merge_db_params.sql\nnew file mode 100644\nindex 000000000000..3d97cf2b0c64\n--- /dev/null\n+++ b/tests/queries/0_stateless/01902_table_function_merge_db_params.sql\n@@ -0,0 +1,13 @@\n+DROP DATABASE IF EXISTS 01902_db_params;\n+CREATE DATABASE 01902_db_params;\n+CREATE TABLE 01902_db_params.t(n Int8) ENGINE=MergeTree ORDER BY n;\n+INSERT INTO 01902_db_params.t SELECT * FROM numbers(3);\n+SELECT _database, _table, n FROM merge(REGEXP('^01902_db_params'), '^t') ORDER BY _database, _table, n;\n+\n+SELECT _database, _table, n FROM merge() ORDER BY _database, _table, n; -- {serverError NUMBER_OF_ARGUMENTS_DOESNT_MATCH}\n+SELECT _database, _table, n FROM merge('^t') ORDER BY _database, _table, n; -- {serverError BAD_ARGUMENTS}\n+\n+USE 01902_db_params;\n+SELECT _database, _table, n FROM merge('^t') ORDER BY _database, _table, n;\n+\n+DROP DATABASE 01902_db_params;\n",
  "problem_statement": "Single-argument version for the `merge` table function\n**Use case**\r\n\r\n```\r\nclickhouse-cloud :) SELECT check_name, count() FROM merge('^text_log_') WHERE pull_request_number = 58640 AND commit_sha = 'a680fcb1f7389340b46cc38c555cc83e1a68e955' GROUP BY check_name\r\n\r\nSELECT\r\n    check_name,\r\n    count()\r\nFROM merge('^text_log_')\r\nWHERE (pull_request_number = 58640) AND (commit_sha = 'a680fcb1f7389340b46cc38c555cc83e1a68e955')\r\nGROUP BY check_name\r\n\r\nQuery id: 7d6e6b87-de2c-4853-a5d8-21c6898f22f1\r\n\r\n\r\nElapsed: 0.248 sec. \r\n\r\nReceived exception from server (version 24.2.1):\r\nCode: 42. DB::Exception: Received from p12uiq1ogd.us-east-2.aws.clickhouse-staging.com:9440. DB::Exception: Table function 'merge' requires exactly 2 arguments - name of source database and regexp for table names.. (NUMBER_OF_ARGUMENTS_DOESNT_MATCH)\r\n\r\nclickhouse-cloud :) SELECT check_name, count() FROM merge(default, '^text_log_') WHERE pull_request_number = 58640 AND commit_sha = 'a680fcb1f7389340b46cc38c555cc83e1a68e955' GROUP BY check_name\r\n```\r\n\r\nIf there is a single argument - the current database will be used.\n",
  "hints_text": "@alexey-milovidov I'd like to work on this. And, should the optional `db_name` be considered as the second parameter? like `merge('tables_regexp' [, 'db_name'] )`\n> @alexey-milovidov I'd like to work on this. And, should the optional `db_name` be considered as the second parameter? like `merge('tables_regexp' [, 'db_name'] )`\r\n\r\nIf have two arguments, the first argument is db_name or regexp about db_name: https://clickhouse.com/docs/en/engines/table-engines/special/merge\r\n\n> > @alexey-milovidov I'd like to work on this. And, should the optional `db_name` be considered as the second parameter? like `merge('tables_regexp' [, 'db_name'] )`\r\n> \r\n> If have two arguments, the first argument is db_name or regexp about db_name: https://clickhouse.com/docs/en/engines/table-engines/special/merge\r\n\r\nget\u221a",
  "created_at": "2024-02-24T00:07:21Z",
  "modified_files": [
    "docs/en/sql-reference/table-functions/merge.md",
    "src/TableFunctions/TableFunctionMerge.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01902_table_function_merge_db_params.reference",
    "b/tests/queries/0_stateless/01902_table_function_merge_db_params.sql"
  ]
}