diff --git a/src/Columns/tests/gtest_column_vector.cpp b/src/Columns/tests/gtest_column_vector.cpp
index b71d4a095ab2..3a084a890793 100644
--- a/src/Columns/tests/gtest_column_vector.cpp
+++ b/src/Columns/tests/gtest_column_vector.cpp
@@ -93,6 +93,7 @@ TEST(ColumnVector, Filter)
     testFilter<Int64>();
     testFilter<UInt128>();
     testFilter<Int256>();
+    testFilter<BFloat16>();
     testFilter<Float32>();
     testFilter<Float64>();
     testFilter<UUID>();
diff --git a/src/Columns/tests/gtest_low_cardinality.cpp b/src/Columns/tests/gtest_low_cardinality.cpp
index ce16d2cadb1a..301fa2a60904 100644
--- a/src/Columns/tests/gtest_low_cardinality.cpp
+++ b/src/Columns/tests/gtest_low_cardinality.cpp
@@ -45,6 +45,7 @@ TEST(ColumnLowCardinality, Insert)
     testLowCardinalityNumberInsert<Int128>(std::make_shared<DataTypeInt128>());
     testLowCardinalityNumberInsert<Int256>(std::make_shared<DataTypeInt256>());
 
+    testLowCardinalityNumberInsert<BFloat16>(std::make_shared<DataTypeBFloat16>());
     testLowCardinalityNumberInsert<Float32>(std::make_shared<DataTypeFloat32>());
     testLowCardinalityNumberInsert<Float64>(std::make_shared<DataTypeFloat64>());
 }
diff --git a/tests/performance/avg_weighted.xml b/tests/performance/avg_weighted.xml
index edf3c19fdfa9..ec1b7aae5c2c 100644
--- a/tests/performance/avg_weighted.xml
+++ b/tests/performance/avg_weighted.xml
@@ -1,6 +1,5 @@
 <test>
     <settings>
-        <allow_experimental_bigint_types>1</allow_experimental_bigint_types>
         <max_threads>1</max_threads>
         <max_insert_threads>8</max_insert_threads>
     </settings>
diff --git a/tests/performance/reinterpret_as.xml b/tests/performance/reinterpret_as.xml
index d05ef3bb0389..2e0fa0571c3a 100644
--- a/tests/performance/reinterpret_as.xml
+++ b/tests/performance/reinterpret_as.xml
@@ -1,6 +1,5 @@
 <test>
     <settings>
-        <allow_experimental_bigint_types>1</allow_experimental_bigint_types>
         <max_memory_usage>15G</max_memory_usage>
     </settings>
 
diff --git a/tests/queries/0_stateless/01035_avg.sql b/tests/queries/0_stateless/01035_avg.sql
index a3cb35a80ec1..0f7baddaec57 100644
--- a/tests/queries/0_stateless/01035_avg.sql
+++ b/tests/queries/0_stateless/01035_avg.sql
@@ -1,5 +1,3 @@
-SET allow_experimental_bigint_types=1;
-
 CREATE TABLE IF NOT EXISTS test_01035_avg (
     i8 Int8         DEFAULT i64,
     i16 Int16       DEFAULT i64,
diff --git a/tests/queries/0_stateless/01182_materialized_view_different_structure.sql b/tests/queries/0_stateless/01182_materialized_view_different_structure.sql
index 485f99859744..7e41172bd0c1 100644
--- a/tests/queries/0_stateless/01182_materialized_view_different_structure.sql
+++ b/tests/queries/0_stateless/01182_materialized_view_different_structure.sql
@@ -20,7 +20,6 @@ SELECT sum(value) FROM (SELECT number, sum(number) AS value FROM (SELECT *, toDe
 CREATE TABLE src (n UInt64, s FixedString(16)) ENGINE=Memory;
 CREATE TABLE dst (n UInt8, s String) ENGINE = Memory;
 CREATE MATERIALIZED VIEW mv TO dst (n String) AS SELECT * FROM src;
-SET allow_experimental_bigint_types=1;
 CREATE TABLE dist (n Int128) ENGINE=Distributed(test_cluster_two_shards, currentDatabase(), mv);
 
 INSERT INTO src SELECT number, toString(number) FROM numbers(1000);
diff --git a/tests/queries/0_stateless/01440_big_int_exotic_casts.sql b/tests/queries/0_stateless/01440_big_int_exotic_casts.sql
index 42fde9da01b9..f411af897e8d 100644
--- a/tests/queries/0_stateless/01440_big_int_exotic_casts.sql
+++ b/tests/queries/0_stateless/01440_big_int_exotic_casts.sql
@@ -32,8 +32,6 @@ SELECT number y, toInt128(number) - y, toInt256(number) - y, toUInt256(number) -
 SELECT -number y, toInt128(number) + y, toInt256(number) + y, toUInt256(number) + y FROM numbers_mt(10) ORDER BY number;
 
 
-SET allow_experimental_bigint_types = 1;
-
 DROP TABLE IF EXISTS t;
 CREATE TABLE t (x UInt64, i256 Int256, u256 UInt256, d256 Decimal256(2)) ENGINE = Memory;
 
diff --git a/tests/queries/0_stateless/01554_bloom_filter_index_big_integer_uuid.sql b/tests/queries/0_stateless/01554_bloom_filter_index_big_integer_uuid.sql
index 3472f41092da..f82fe39f4397 100644
--- a/tests/queries/0_stateless/01554_bloom_filter_index_big_integer_uuid.sql
+++ b/tests/queries/0_stateless/01554_bloom_filter_index_big_integer_uuid.sql
@@ -1,5 +1,3 @@
-SET allow_experimental_bigint_types = 1;
-
 CREATE TABLE 01154_test (x Int128, INDEX ix_x x TYPE bloom_filter(0.01) GRANULARITY 1) ENGINE = MergeTree() ORDER BY x SETTINGS index_granularity=8192;
 INSERT INTO 01154_test VALUES (1), (2), (3);
 SELECT x FROM 01154_test WHERE x = 1;
diff --git a/tests/queries/0_stateless/01622_byte_size.sql b/tests/queries/0_stateless/01622_byte_size.sql
index 9f9de4e58e92..f73011f4151d 100644
--- a/tests/queries/0_stateless/01622_byte_size.sql
+++ b/tests/queries/0_stateless/01622_byte_size.sql
@@ -4,8 +4,6 @@
 select '';
 select '# byteSize';
 
-set allow_experimental_bigint_types = 1;
-
 -- numbers #0 --
 select '';
 select 'byteSize for numbers #0';
diff --git a/tests/queries/0_stateless/01721_dictionary_decimal_p_s.sql b/tests/queries/0_stateless/01721_dictionary_decimal_p_s.sql
index 272bd2d71040..57483430cc09 100644
--- a/tests/queries/0_stateless/01721_dictionary_decimal_p_s.sql
+++ b/tests/queries/0_stateless/01721_dictionary_decimal_p_s.sql
@@ -1,6 +1,5 @@
 -- Tags: no-parallel
 
-set allow_experimental_bigint_types=1;
 drop database if exists db_01721;
 drop table if exists db_01721.table_decimal_dict;
 drop dictionary if exists db_01721.decimal_dict;
@@ -77,4 +76,3 @@ SELECT dictGet('db_01721.decimal_dict', 'Decimal32_', toUInt64(5000)),
 drop table if exists table_decimal_dict;
 drop dictionary if exists cache_dict;
 drop database if exists db_01721;
-
diff --git a/tests/queries/0_stateless/01804_dictionary_decimal256_type.sql b/tests/queries/0_stateless/01804_dictionary_decimal256_type.sql
index 08a8d0feb27e..32b029442b97 100644
--- a/tests/queries/0_stateless/01804_dictionary_decimal256_type.sql
+++ b/tests/queries/0_stateless/01804_dictionary_decimal256_type.sql
@@ -1,7 +1,5 @@
 -- Tags: no-parallel
 
-SET allow_experimental_bigint_types = 1;
-
 DROP TABLE IF EXISTS dictionary_decimal_source_table;
 CREATE TABLE dictionary_decimal_source_table
 (
diff --git a/tests/queries/0_stateless/01875_ssd_cache_dictionary_decimal256_type.sh b/tests/queries/0_stateless/01875_ssd_cache_dictionary_decimal256_type.sh
index 1294ba53e82f..2a24a9316969 100755
--- a/tests/queries/0_stateless/01875_ssd_cache_dictionary_decimal256_type.sh
+++ b/tests/queries/0_stateless/01875_ssd_cache_dictionary_decimal256_type.sh
@@ -6,8 +6,6 @@ CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
 . "$CURDIR"/../shell_config.sh
 
 $CLICKHOUSE_CLIENT --query="
-    SET allow_experimental_bigint_types = 1;
-
     DROP TABLE IF EXISTS dictionary_decimal_source_table;
     CREATE TABLE dictionary_decimal_source_table
     (
diff --git a/tests/queries/0_stateless/03269_bf16.reference b/tests/queries/0_stateless/03269_bf16.reference
new file mode 100644
index 000000000000..896cc3076236
--- /dev/null
+++ b/tests/queries/0_stateless/03269_bf16.reference
@@ -0,0 +1,47 @@
+1	-1	1.09375	-1.09375	1	-1	1.09375	-1.09375	18446744000000000000	-0	inf	-inf	nan
+1.09375	1.09375	1.09375	1
+1	1	0	1	1
+0	2.1875	1.1962891	1	Float32	Float32	Float32	Float64
+-0.006250000000000089	2.19375	1.203125	1.0057142857142858	Float64	Float64	Float64	Float64
+0	0	1	0
+1000	1000	1	0
+2000	2000	1	0
+3000	2992	0	8
+4000	4000	1	0
+5000	4992	0	8
+6000	5984	0	16
+7000	6976	0	24
+8000	8000	1	0
+9000	8960	0	40
+49995000	49855104	4999.5	4985.5104	0	0	9999	9984	10000	925	10000	925
+0	0	1	0
+1000	1000	1	0
+2000	2000	1	0
+3000	2992	0	8
+4000	4000	1	0
+5000	4992	0	8
+6000	5984	0	16
+7000	6976	0	24
+8000	8000	1	0
+9000	8960	0	40
+49995000	49855104	4999.5	4985.5104	0	0	9999	9984	10000	925	10000	925
+Row 1:
+──────
+a32:                        [0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10,10.5,11,11.5,12,12.5,13,13.5,14,14.5,15,15.5,16,16.5,17,17.5,18,18.5,19,19.5,20,20.5,21,21.5,22,22.5,23,23.5,24,24.5,25,25.5,26,26.5,27,27.5,28,28.5,29,29.5,30,30.5,31,31.5,32,32.5,33,33.5,34,34.5,35,35.5,36,36.5,37,37.5,38,38.5,39,39.5,40,40.5,41,41.5,42,42.5,43,43.5,44,44.5,45,45.5,46,46.5,47,47.5,48,48.5,49,49.5,50,50.5,51,51.5,52,52.5,53,53.5,54,54.5,55,55.5,56,56.5,57,57.5,58,58.5,59,59.5,60,60.5,61,61.5,62,62.5,63,63.5,64,64.5,65,65.5,66,66.5,67,67.5,68,68.5,69,69.5,70,70.5,71,71.5,72,72.5,73,73.5,74,74.5,75,75.5,76,76.5,77,77.5,78,78.5,79,79.5,80,80.5,81,81.5,82,82.5,83,83.5,84,84.5,85,85.5,86,86.5,87,87.5,88,88.5,89,89.5,90,90.5,91,91.5,92,92.5,93,93.5,94,94.5,95,95.5,96,96.5,97,97.5,98,98.5,99,99.5,100,100.5,101,101.5,102,102.5,103,103.5,104,104.5,105,105.5,106,106.5,107,107.5,108,108.5,109,109.5,110,110.5,111,111.5,112,112.5,113,113.5,114,114.5,115,115.5,116,116.5,117,117.5,118,118.5,119,119.5,120,120.5,121,121.5,122,122.5,123,123.5,124,124.5,125,125.5,126,126.5,127,127.5,128,128.5,129,129.5,130,130.5,131,131.5,132,132.5,133,133.5,134,134.5,135,135.5,136,136.5,137,137.5,138,138.5,139,139.5,140,140.5,141,141.5,142,142.5,143,143.5,144,144.5,145,145.5,146,146.5,147,147.5,148,148.5,149,149.5,150,150.5,151,151.5,152,152.5,153,153.5,154,154.5,155,155.5,156,156.5,157,157.5,158,158.5,159,159.5,160,160.5,161,161.5,162,162.5,163,163.5,164,164.5,165,165.5,166,166.5,167,167.5,168,168.5,169,169.5,170,170.5,171,171.5,172,172.5,173,173.5,174,174.5,175,175.5,176,176.5,177,177.5,178,178.5,179,179.5,180,180.5,181,181.5,182,182.5,183,183.5,184,184.5,185,185.5,186,186.5,187,187.5,188,188.5,189,189.5,190,190.5,191,191.5]
+a16:                        [0,0.5,1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10,10.5,11,11.5,12,12.5,13,13.5,14,14.5,15,15.5,16,16.5,17,17.5,18,18.5,19,19.5,20,20.5,21,21.5,22,22.5,23,23.5,24,24.5,25,25.5,26,26.5,27,27.5,28,28.5,29,29.5,30,30.5,31,31.5,32,32.5,33,33.5,34,34.5,35,35.5,36,36.5,37,37.5,38,38.5,39,39.5,40,40.5,41,41.5,42,42.5,43,43.5,44,44.5,45,45.5,46,46.5,47,47.5,48,48.5,49,49.5,50,50.5,51,51.5,52,52.5,53,53.5,54,54.5,55,55.5,56,56.5,57,57.5,58,58.5,59,59.5,60,60.5,61,61.5,62,62.5,63,63.5,64,64.5,65,65.5,66,66.5,67,67.5,68,68.5,69,69.5,70,70.5,71,71.5,72,72.5,73,73.5,74,74.5,75,75.5,76,76.5,77,77.5,78,78.5,79,79.5,80,80.5,81,81.5,82,82.5,83,83.5,84,84.5,85,85.5,86,86.5,87,87.5,88,88.5,89,89.5,90,90.5,91,91.5,92,92.5,93,93.5,94,94.5,95,95.5,96,96.5,97,97.5,98,98.5,99,99.5,100,100.5,101,101.5,102,102.5,103,103.5,104,104.5,105,105.5,106,106.5,107,107.5,108,108.5,109,109.5,110,110.5,111,111.5,112,112.5,113,113.5,114,114.5,115,115.5,116,116.5,117,117.5,118,118.5,119,119.5,120,120.5,121,121.5,122,122.5,123,123.5,124,124.5,125,125.5,126,126.5,127,127.5,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,142,143,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,155,155,156,156,157,157,158,158,159,159,160,160,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,168,169,169,170,170,171,171,172,172,173,173,174,174,175,175,176,176,177,177,178,178,179,179,180,180,181,181,182,182,183,183,184,184,185,185,186,186,187,187,188,188,189,189,190,190,191,191]
+a32_1:                      [1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10,10.5,11,11.5,12,12.5,13,13.5,14,14.5,15,15.5,16,16.5,17,17.5,18,18.5,19,19.5,20,20.5,21,21.5,22,22.5,23,23.5,24,24.5,25,25.5,26,26.5,27,27.5,28,28.5,29,29.5,30,30.5,31,31.5,32,32.5,33,33.5,34,34.5,35,35.5,36,36.5,37,37.5,38,38.5,39,39.5,40,40.5,41,41.5,42,42.5,43,43.5,44,44.5,45,45.5,46,46.5,47,47.5,48,48.5,49,49.5,50,50.5,51,51.5,52,52.5,53,53.5,54,54.5,55,55.5,56,56.5,57,57.5,58,58.5,59,59.5,60,60.5,61,61.5,62,62.5,63,63.5,64,64.5,65,65.5,66,66.5,67,67.5,68,68.5,69,69.5,70,70.5,71,71.5,72,72.5,73,73.5,74,74.5,75,75.5,76,76.5,77,77.5,78,78.5,79,79.5,80,80.5,81,81.5,82,82.5,83,83.5,84,84.5,85,85.5,86,86.5,87,87.5,88,88.5,89,89.5,90,90.5,91,91.5,92,92.5,93,93.5,94,94.5,95,95.5,96,96.5,97,97.5,98,98.5,99,99.5,100,100.5,101,101.5,102,102.5,103,103.5,104,104.5,105,105.5,106,106.5,107,107.5,108,108.5,109,109.5,110,110.5,111,111.5,112,112.5,113,113.5,114,114.5,115,115.5,116,116.5,117,117.5,118,118.5,119,119.5,120,120.5,121,121.5,122,122.5,123,123.5,124,124.5,125,125.5,126,126.5,127,127.5,128,128.5,129,129.5,130,130.5,131,131.5,132,132.5,133,133.5,134,134.5,135,135.5,136,136.5,137,137.5,138,138.5,139,139.5,140,140.5,141,141.5,142,142.5,143,143.5,144,144.5,145,145.5,146,146.5,147,147.5,148,148.5,149,149.5,150,150.5,151,151.5,152,152.5,153,153.5,154,154.5,155,155.5,156,156.5,157,157.5,158,158.5,159,159.5,160,160.5,161,161.5,162,162.5,163,163.5,164,164.5,165,165.5,166,166.5,167,167.5,168,168.5,169,169.5,170,170.5,171,171.5,172,172.5,173,173.5,174,174.5,175,175.5,176,176.5,177,177.5,178,178.5,179,179.5,180,180.5,181,181.5,182,182.5,183,183.5,184,184.5,185,185.5,186,186.5,187,187.5,188,188.5,189,189.5,190,190.5,191,191.5,192,192.5]
+a16_1:                      [1,1.5,2,2.5,3,3.5,4,4.5,5,5.5,6,6.5,7,7.5,8,8.5,9,9.5,10,10.5,11,11.5,12,12.5,13,13.5,14,14.5,15,15.5,16,16.5,17,17.5,18,18.5,19,19.5,20,20.5,21,21.5,22,22.5,23,23.5,24,24.5,25,25.5,26,26.5,27,27.5,28,28.5,29,29.5,30,30.5,31,31.5,32,32.5,33,33.5,34,34.5,35,35.5,36,36.5,37,37.5,38,38.5,39,39.5,40,40.5,41,41.5,42,42.5,43,43.5,44,44.5,45,45.5,46,46.5,47,47.5,48,48.5,49,49.5,50,50.5,51,51.5,52,52.5,53,53.5,54,54.5,55,55.5,56,56.5,57,57.5,58,58.5,59,59.5,60,60.5,61,61.5,62,62.5,63,63.5,64,64.5,65,65.5,66,66.5,67,67.5,68,68.5,69,69.5,70,70.5,71,71.5,72,72.5,73,73.5,74,74.5,75,75.5,76,76.5,77,77.5,78,78.5,79,79.5,80,80.5,81,81.5,82,82.5,83,83.5,84,84.5,85,85.5,86,86.5,87,87.5,88,88.5,89,89.5,90,90.5,91,91.5,92,92.5,93,93.5,94,94.5,95,95.5,96,96.5,97,97.5,98,98.5,99,99.5,100,100.5,101,101.5,102,102.5,103,103.5,104,104.5,105,105.5,106,106.5,107,107.5,108,108.5,109,109.5,110,110.5,111,111.5,112,112.5,113,113.5,114,114.5,115,115.5,116,116.5,117,117.5,118,118.5,119,119.5,120,120.5,121,121.5,122,122.5,123,123.5,124,124.5,125,125.5,126,126.5,127,127.5,128,128.5,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,142,143,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,151,151,152,152,153,153,154,154,155,155,156,156,157,157,158,158,159,159,160,160,161,161,162,162,163,163,164,164,165,165,166,166,167,167,168,168,169,169,170,170,171,171,172,172,173,173,174,174,175,175,176,176,177,177,178,178,179,179,180,180,181,181,182,182,183,183,184,184,185,185,186,186,187,187,188,188,189,189,190,190,191,191,192,192]
+dotProduct(a32, a32_1):     4736944 -- 4.74 million
+dotProduct(a16, a16_1):     4726688 -- 4.73 million
+cosineDistance(a32, a32_1): 0.000010093636084174129
+cosineDistance(a16, a16_1): 0.00001010226319664298
+L2Distance(a32, a32_1):     19.595917942265423
+L2Distance(a16, a16_1):     19.595917942265423
+L1Distance(a32, a32_1):     384
+L1Distance(a16, a16_1):     384
+LinfDistance(a32, a32_1):   1
+LinfDistance(a16, a16_1):   1
+LpDistance(a32, a32_1, 5):  3.2875036590344515
+LpDistance(a16, a16_1, 5):  3.2875036590344515
+1.09375	8C3F	1000110000111111	2	16268	8C3F
+1.09375	1	1.09375	1.0859375	0
diff --git a/tests/queries/0_stateless/03269_bf16.sql b/tests/queries/0_stateless/03269_bf16.sql
new file mode 100644
index 000000000000..b332a6e31199
--- /dev/null
+++ b/tests/queries/0_stateless/03269_bf16.sql
@@ -0,0 +1,100 @@
+SET allow_experimental_bfloat16_type = 1;
+
+-- This is a smoke test, non exhaustive.
+
+-- Conversions
+
+SELECT
+    1::BFloat16,
+    -1::BFloat16,
+    1.1::BFloat16,
+    -1.1::BFloat16,
+    CAST(1 AS BFloat16),
+    CAST(-1 AS BFloat16),
+    CAST(1.1 AS BFloat16),
+    CAST(-1.1 AS BFloat16),
+    CAST(0xFFFFFFFFFFFFFFFF AS BFloat16),
+    CAST(-0.0 AS BFloat16),
+    CAST(inf AS BFloat16),
+    CAST(-inf AS BFloat16),
+    CAST(nan AS BFloat16);
+
+-- Conversions back
+
+SELECT
+    CAST(1.1::BFloat16 AS BFloat16),
+    CAST(1.1::BFloat16 AS Float32),
+    CAST(1.1::BFloat16 AS Float64),
+    CAST(1.1::BFloat16 AS Int8);
+
+-- Comparisons
+
+SELECT
+    1.1::BFloat16 = 1.1::BFloat16,
+    1.1::BFloat16 < 1.1,
+    1.1::BFloat16 > 1.1,
+    1.1::BFloat16 > 1,
+    1.1::BFloat16 = 1.09375;
+
+-- Arithmetic
+
+SELECT
+    1.1::BFloat16 - 1.1::BFloat16 AS a,
+    1.1::BFloat16 + 1.1::BFloat16 AS b,
+    1.1::BFloat16 * 1.1::BFloat16 AS c,
+    1.1::BFloat16 / 1.1::BFloat16 AS d,
+    toTypeName(a), toTypeName(b), toTypeName(c), toTypeName(d);
+
+SELECT
+    1.1::BFloat16 - 1.1 AS a,
+    1.1 + 1.1::BFloat16 AS b,
+    1.1::BFloat16 * 1.1 AS c,
+    1.1 / 1.1::BFloat16 AS d,
+    toTypeName(a), toTypeName(b), toTypeName(c), toTypeName(d);
+
+-- Tables
+
+DROP TABLE IF EXISTS t;
+CREATE TEMPORARY TABLE t (n UInt64, x BFloat16);
+INSERT INTO t SELECT number, number FROM numbers(10000);
+SELECT *, n = x, n - x FROM t WHERE n % 1000 = 0 ORDER BY n;
+
+-- Aggregate functions
+
+SELECT sum(n), sum(x), avg(n), avg(x), min(n), min(x), max(n), max(x), uniq(n), uniq(x), uniqExact(n), uniqExact(x) FROM t;
+
+-- MergeTree
+
+DROP TABLE t;
+CREATE TABLE t (n UInt64, x BFloat16) ENGINE = MergeTree ORDER BY n;
+INSERT INTO t SELECT number, number FROM numbers(10000);
+SELECT *, n = x, n - x FROM t WHERE n % 1000 = 0 ORDER BY n;
+SELECT sum(n), sum(x), avg(n), avg(x), min(n), min(x), max(n), max(x), uniq(n), uniq(x), uniqExact(n), uniqExact(x) FROM t;
+
+-- Distances
+
+WITH
+    arrayMap(x -> toFloat32(x) / 2, range(384)) AS a32,
+    arrayMap(x -> toBFloat16(x) / 2, range(384)) AS a16,
+    arrayMap(x -> x + 1, a32) AS a32_1,
+    arrayMap(x -> x + 1, a16) AS a16_1
+SELECT a32, a16, a32_1, a16_1,
+    dotProduct(a32, a32_1), dotProduct(a16, a16_1),
+    cosineDistance(a32, a32_1), cosineDistance(a16, a16_1),
+    L2Distance(a32, a32_1), L2Distance(a16, a16_1),
+    L1Distance(a32, a32_1), L1Distance(a16, a16_1),
+    LinfDistance(a32, a32_1), LinfDistance(a16, a16_1),
+    LpDistance(a32, a32_1, 5), LpDistance(a16, a16_1, 5)
+FORMAT Vertical;
+
+-- Introspection
+
+SELECT 1.1::BFloat16 AS x,
+    hex(x), bin(x),
+    byteSize(x),
+    reinterpretAsUInt16(x), hex(reinterpretAsString(x));
+
+-- Rounding (this could be not towards the nearest)
+
+SELECT 1.1::BFloat16 AS x,
+    round(x), round(x, 1), round(x, 2), round(x, -1);
diff --git a/tests/queries/0_stateless/03271_benchmark_metrics.reference b/tests/queries/0_stateless/03271_benchmark_metrics.reference
new file mode 100644
index 000000000000..573541ac9702
--- /dev/null
+++ b/tests/queries/0_stateless/03271_benchmark_metrics.reference
@@ -0,0 +1,1 @@
+0
diff --git a/tests/queries/0_stateless/03271_benchmark_metrics.sh b/tests/queries/0_stateless/03271_benchmark_metrics.sh
new file mode 100755
index 000000000000..23bd39fa987f
--- /dev/null
+++ b/tests/queries/0_stateless/03271_benchmark_metrics.sh
@@ -0,0 +1,10 @@
+#!/usr/bin/env bash
+
+set -e
+
+CUR_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CUR_DIR"/../shell_config.sh
+
+# A query with two seconds sleep cannot be processed with QPS > 0.5
+$CLICKHOUSE_BENCHMARK --query "SELECT sleep(2)" 2>&1 | grep -m1 -o -P 'QPS: \d+\.\d+' | $CLICKHOUSE_LOCAL --query "SELECT throwIf(extract(line, 'QPS: (.+)')::Float64 > 0.75) FROM table" --input-format LineAsString
