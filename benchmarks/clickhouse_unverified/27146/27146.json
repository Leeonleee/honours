{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 27146,
  "instance_id": "ClickHouse__ClickHouse-27146",
  "issue_numbers": [
    "25026"
  ],
  "base_commit": "e4f85a5569cf4df5f54e57c2341f19e93d8a19ae",
  "patch": "diff --git a/src/DataTypes/DataTypeMap.cpp b/src/DataTypes/DataTypeMap.cpp\nindex 8fd375aa86e6..b0bf459b4ca1 100644\n--- a/src/DataTypes/DataTypeMap.cpp\n+++ b/src/DataTypes/DataTypeMap.cpp\n@@ -79,7 +79,7 @@ void DataTypeMap::assertKeyType() const\n std::string DataTypeMap::doGetName() const\n {\n     WriteBufferFromOwnString s;\n-    s << \"Map(\" << key_type->getName() << \",\" << value_type->getName() << \")\";\n+    s << \"Map(\" << key_type->getName() << \", \" << value_type->getName() << \")\";\n \n     return s.str();\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01318_map_add_map_subtract_on_map_type.reference b/tests/queries/0_stateless/01318_map_add_map_subtract_on_map_type.reference\nindex 96bafc2c79c6..304f7407cf5f 100644\n--- a/tests/queries/0_stateless/01318_map_add_map_subtract_on_map_type.reference\n+++ b/tests/queries/0_stateless/01318_map_add_map_subtract_on_map_type.reference\n@@ -18,38 +18,38 @@\n {1:3,2:2,8:2}\n {1:3,2:2,9:2}\n {1:3,2:2,10:2}\n-{1:2,2:2}\tMap(UInt8,UInt64)\n-{1:2,2:2}\tMap(UInt16,UInt64)\n-{1:2,2:2}\tMap(UInt32,UInt64)\n-{1:2,2:2}\tMap(UInt64,UInt64)\n-{1:2,2:2}\tMap(UInt128,UInt128)\n-{1:2,2:2}\tMap(UInt256,UInt256)\n-{1:2,2:2}\tMap(Int16,UInt64)\n-{1:2,2:2}\tMap(Int16,Int64)\n-{1:2,2:2}\tMap(Int32,Int64)\n-{1:2,2:2}\tMap(Int64,Int64)\n-{1:2,2:2}\tMap(Int128,Int128)\n-{1:2,2:2}\tMap(Int256,Int256)\n-{1:3.300000023841858,2:2}\tMap(UInt8,Float64)\n-{1:3.3000000000000003,2:2}\tMap(UInt8,Float64)\n+{1:2,2:2}\tMap(UInt8, UInt64)\n+{1:2,2:2}\tMap(UInt16, UInt64)\n+{1:2,2:2}\tMap(UInt32, UInt64)\n+{1:2,2:2}\tMap(UInt64, UInt64)\n+{1:2,2:2}\tMap(UInt128, UInt128)\n+{1:2,2:2}\tMap(UInt256, UInt256)\n+{1:2,2:2}\tMap(Int16, UInt64)\n+{1:2,2:2}\tMap(Int16, Int64)\n+{1:2,2:2}\tMap(Int32, Int64)\n+{1:2,2:2}\tMap(Int64, Int64)\n+{1:2,2:2}\tMap(Int128, Int128)\n+{1:2,2:2}\tMap(Int256, Int256)\n+{1:3.300000023841858,2:2}\tMap(UInt8, Float64)\n+{1:3.3000000000000003,2:2}\tMap(UInt8, Float64)\n {'a':1,'b':2}\n {'a':1,'b':1,'c':1}\n {'a':1,'b':1,'d':1}\n-{'a':1,'b':2}\tMap(String,UInt64)\n-{'a':1,'b':1,'c':1}\tMap(String,UInt64)\n-{'a':1,'b':1,'d':1}\tMap(String,UInt64)\n+{'a':1,'b':2}\tMap(String, UInt64)\n+{'a':1,'b':1,'c':1}\tMap(String, UInt64)\n+{'a':1,'b':1,'d':1}\tMap(String, UInt64)\n {'a':1,'b':2}\n {'a':1,'b':1,'c':1}\n {'a':1,'b':1,'d':1}\n-{'a':2}\tMap(Enum16(\\'a\\' = 1, \\'b\\' = 2),Int64)\n-{'b':2}\tMap(Enum16(\\'a\\' = 1, \\'b\\' = 2),Int64)\n-{'a':2}\tMap(Enum8(\\'a\\' = 1, \\'b\\' = 2),Int64)\n-{'b':2}\tMap(Enum8(\\'a\\' = 1, \\'b\\' = 2),Int64)\n-{'00000000-89ab-cdef-0123-456789abcdef':2}\tMap(UUID,Int64)\n-{'11111111-89ab-cdef-0123-456789abcdef':4}\tMap(UUID,Int64)\n+{'a':2}\tMap(Enum16(\\'a\\' = 1, \\'b\\' = 2), Int64)\n+{'b':2}\tMap(Enum16(\\'a\\' = 1, \\'b\\' = 2), Int64)\n+{'a':2}\tMap(Enum8(\\'a\\' = 1, \\'b\\' = 2), Int64)\n+{'b':2}\tMap(Enum8(\\'a\\' = 1, \\'b\\' = 2), Int64)\n+{'00000000-89ab-cdef-0123-456789abcdef':2}\tMap(UUID, Int64)\n+{'11111111-89ab-cdef-0123-456789abcdef':4}\tMap(UUID, Int64)\n {1:0,2:0}\tMap(UInt8,UInt64)\n-{1:18446744073709551615,2:18446744073709551615}\tMap(UInt8,UInt64)\n+{1:18446744073709551615,2:18446744073709551615}\tMap(UInt8, UInt64)\n {1:-1,2:-1}\tMap(UInt8,Int64)\n-{1:-1.0999999761581423,2:0}\tMap(UInt8,Float64)\n-{1:-1,2:-1}\tMap(UInt8,Int64)\n-{1:-2,2:-2,3:1}\tMap(UInt8,Int64)\n+{1:-1.0999999761581423,2:0}\tMap(UInt8, Float64)\n+{1:-1,2:-1}\tMap(UInt8, Int64)\n+{1:-2,2:-2,3:1}\tMap(UInt8, Int64)\ndiff --git a/tests/queries/0_stateless/01550_type_map_formats.reference b/tests/queries/0_stateless/01550_type_map_formats.reference\nindex ca081db75a2f..998473ef63ad 100644\n--- a/tests/queries/0_stateless/01550_type_map_formats.reference\n+++ b/tests/queries/0_stateless/01550_type_map_formats.reference\n@@ -4,15 +4,15 @@ JSON\n \t[\n \t\t{\n \t\t\t\"name\": \"m\",\n-\t\t\t\"type\": \"Map(String,UInt32)\"\n+\t\t\t\"type\": \"Map(String, UInt32)\"\n \t\t},\n \t\t{\n \t\t\t\"name\": \"m1\",\n-\t\t\t\"type\": \"Map(String,Date)\"\n+\t\t\t\"type\": \"Map(String, Date)\"\n \t\t},\n \t\t{\n \t\t\t\"name\": \"m2\",\n-\t\t\t\"type\": \"Map(String,Array(UInt32))\"\n+\t\t\t\"type\": \"Map(String, Array(UInt32))\"\n \t\t}\n \t],\n \ndiff --git a/tests/queries/0_stateless/02002_parse_map_int_key.reference b/tests/queries/0_stateless/02002_parse_map_int_key.reference\nnew file mode 100644\nindex 000000000000..dc02589d4bcf\n--- /dev/null\n+++ b/tests/queries/0_stateless/02002_parse_map_int_key.reference\n@@ -0,0 +1,1 @@\n+{1:2,3:4,5:6,7:8}\t{'2021-05-20':1,'2021-05-21':2,'2021-05-22':3,'2021-05-23':4}\ndiff --git a/tests/queries/0_stateless/02002_parse_map_int_key.sql b/tests/queries/0_stateless/02002_parse_map_int_key.sql\nnew file mode 100644\nindex 000000000000..ecd2a0909750\n--- /dev/null\n+++ b/tests/queries/0_stateless/02002_parse_map_int_key.sql\n@@ -0,0 +1,11 @@\n+SET allow_experimental_map_type = 1;\n+\n+DROP TABLE IF EXISTS t_map_int_key;\n+CREATE TABLE t_map_int_key (m1 Map(UInt32, UInt32), m2 Map(Date, UInt32)) ENGINE = Memory;\n+\n+INSERT INTO t_map_int_key FORMAT CSV \"{1:2, 3: 4, 5 :6, 7 : 8}\",\"{'2021-05-20':1, '2021-05-21': 2, '2021-05-22' :3, '2021-05-23' : 4}\"\n+;\n+\n+SELECT m1, m2 FROM t_map_int_key;\n+\n+DROP TABLE t_map_int_key;\n",
  "problem_statement": "Map does not support Integer key very well since 21.4\nBelow test case worked before 21.4. It seems there's parsing issue with all Map columns using Integer as key.\r\n```sql\r\nset allow_experimental_map_type = 1;\r\nCREATE TABLE IF NOT EXISTS test_maps(ma Map(Integer, Array(String)), mi Map(Integer, Integer), ms Map(String, String)) ENGINE = Memory;\r\n-- Exception on client:\r\n-- Code: 62. DB::Exception: Cannot parse expression of type Map(Int32,Array(String)) here: {1:['11','12'],2:['22','23']},{1:11,2:22},{'k1':'v1','k2':'v2'}): data for INSERT was parsed from query\r\ninsert into test_maps values ({1:['11','12'],2:['22','23']},{1:11,2:22},{'k1':'v1','k2':'v2'});\r\n```\r\n\r\nJust tried 21.6 and it's still the same:\r\n```sql\r\n:) create table if not exists test_map_with_int_key(m Map(UInt32, UInt32)) engine = Memory;\r\n...\r\n:) SELECT CAST(([1, 2], [11, 22]), 'Map(UInt32, UInt32)') AS m;\r\n\r\nSELECT CAST(([1, 2], [11, 22]), 'Map(UInt32, UInt32)') AS m\r\n\r\nQuery id: dbe47185-bc24-488b-a85d-761616e3199d\r\n\r\n\u250c\u2500m\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 {1:11,2:22} \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n:) insert into test_map_with_int_key SELECT CAST(([1, 2], [11, 22]), 'Map(UInt32, UInt32)') as m\r\n\r\nINSERT INTO test_map_with_int_key SELECT CAST(([1, 2], [11, 22]), 'Map(UInt32, UInt32)') AS m\r\n\r\nQuery id: 6877901f-1518-48f9-ba65-d54ed7326388\r\n\r\nOk.\r\n:) insert into test_map_with_int_key values({1:11,2:22})\r\n\r\nINSERT INTO test_map_with_in_key VALUES\r\n\r\nQuery id: 3f6cae42-064a-467f-baae-b7f323e910c0\r\n\r\n\r\n0 rows in set. Elapsed: 0.004 sec.\r\n\r\nReceived exception from server (version 21.6.3):\r\nCode: 60. DB::Exception: Received from localhost:9000. DB::Exception: Table default.test_map_with_in_key doesn't exist.\r\n```\r\n\r\nP.S. I'll submit PRs for integration test this week so that we can spot this kind of issue early.\n",
  "hints_text": "I will try to fix this.\r\n\r\nps: try: add a space before `:`\r\n`insert into test_map_with_int_key values({1 :11,2 :22})`\n> ps: try: add a space before `:`\r\n> `insert into test_map_with_int_key values({1 :11,2 :22})`\r\n\r\nThanks @hexiaoting, that worked.\n#24589",
  "created_at": "2021-08-03T14:55:26Z",
  "modified_files": [
    "src/DataTypes/DataTypeMap.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01318_map_add_map_subtract_on_map_type.reference",
    "tests/queries/0_stateless/01550_type_map_formats.reference",
    "b/tests/queries/0_stateless/02002_parse_map_int_key.reference",
    "b/tests/queries/0_stateless/02002_parse_map_int_key.sql"
  ]
}