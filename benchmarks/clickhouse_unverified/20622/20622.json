{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 20622,
  "instance_id": "ClickHouse__ClickHouse-20622",
  "issue_numbers": [
    "20497"
  ],
  "base_commit": "e6c755cabd577035b6103f6423bf55605e9503dd",
  "patch": "diff --git a/src/Interpreters/IdentifierSemantic.cpp b/src/Interpreters/IdentifierSemantic.cpp\nindex a1fc533eb7fa..81bd499ea2e7 100644\n--- a/src/Interpreters/IdentifierSemantic.cpp\n+++ b/src/Interpreters/IdentifierSemantic.cpp\n@@ -209,7 +209,7 @@ IdentifierSemantic::ColumnMatch IdentifierSemantic::canReferColumnToTable(const\n     return canReferColumnToTable(identifier, table_with_columns.table);\n }\n \n-/// Strip qualificators from left side of column name.\n+/// Strip qualifications from left side of column name.\n /// Example: 'database.table.name' -> 'name'.\n void IdentifierSemantic::setColumnShortName(ASTIdentifier & identifier, const DatabaseAndTableWithAlias & db_and_table)\n {\ndiff --git a/src/Interpreters/PredicateExpressionsOptimizer.cpp b/src/Interpreters/PredicateExpressionsOptimizer.cpp\nindex 00b47be408aa..476bdaaceea7 100644\n--- a/src/Interpreters/PredicateExpressionsOptimizer.cpp\n+++ b/src/Interpreters/PredicateExpressionsOptimizer.cpp\n@@ -146,7 +146,7 @@ bool PredicateExpressionsOptimizer::tryRewritePredicatesToTables(ASTs & tables_e\n                 break;  /// Skip left and right table optimization\n \n             is_rewrite_tables |= tryRewritePredicatesToTable(tables_element[table_pos], tables_predicates[table_pos],\n-                tables_with_columns[table_pos].columns.getNames());\n+                tables_with_columns[table_pos]);\n \n             if (table_element->table_join && isRight(table_element->table_join->as<ASTTableJoin>()->kind))\n                 break;  /// Skip left table optimization\n@@ -156,13 +156,13 @@ bool PredicateExpressionsOptimizer::tryRewritePredicatesToTables(ASTs & tables_e\n     return is_rewrite_tables;\n }\n \n-bool PredicateExpressionsOptimizer::tryRewritePredicatesToTable(ASTPtr & table_element, const ASTs & table_predicates, Names && table_columns) const\n+bool PredicateExpressionsOptimizer::tryRewritePredicatesToTable(ASTPtr & table_element, const ASTs & table_predicates, const TableWithColumnNamesAndTypes & table_columns) const\n {\n     if (!table_predicates.empty())\n     {\n         auto optimize_final = enable_optimize_predicate_expression_to_final_subquery;\n         auto optimize_with = allow_push_predicate_when_subquery_contains_with;\n-        PredicateRewriteVisitor::Data data(context, table_predicates, std::move(table_columns), optimize_final, optimize_with);\n+        PredicateRewriteVisitor::Data data(context, table_predicates, table_columns, optimize_final, optimize_with);\n \n         PredicateRewriteVisitor(data).visit(table_element);\n         return data.is_rewrite;\ndiff --git a/src/Interpreters/PredicateExpressionsOptimizer.h b/src/Interpreters/PredicateExpressionsOptimizer.h\nindex 8cceda931641..223ac1e89988 100644\n--- a/src/Interpreters/PredicateExpressionsOptimizer.h\n+++ b/src/Interpreters/PredicateExpressionsOptimizer.h\n@@ -33,7 +33,8 @@ class PredicateExpressionsOptimizer\n \n     bool tryRewritePredicatesToTables(ASTs & tables_element, const std::vector<ASTs> & tables_predicates);\n \n-    bool tryRewritePredicatesToTable(ASTPtr & table_element, const ASTs & table_predicates, Names && table_columns) const;\n+    bool tryRewritePredicatesToTable(\n+        ASTPtr & table_element, const ASTs & table_predicates, const TableWithColumnNamesAndTypes & table_columns) const;\n \n     bool tryMovePredicatesFromHavingToWhere(ASTSelectQuery & select_query);\n };\ndiff --git a/src/Interpreters/PredicateRewriteVisitor.cpp b/src/Interpreters/PredicateRewriteVisitor.cpp\nindex 9e6d5543f2f2..6f28b9050df1 100644\n--- a/src/Interpreters/PredicateRewriteVisitor.cpp\n+++ b/src/Interpreters/PredicateRewriteVisitor.cpp\n@@ -17,8 +17,8 @@ namespace DB\n {\n \n PredicateRewriteVisitorData::PredicateRewriteVisitorData(\n-    const Context & context_, const ASTs & predicates_, Names && column_names_, bool optimize_final_, bool optimize_with_)\n-    : context(context_), predicates(predicates_), column_names(column_names_), optimize_final(optimize_final_), optimize_with(optimize_with_)\n+    const Context & context_, const ASTs & predicates_, const TableWithColumnNamesAndTypes & table_columns_, bool optimize_final_, bool optimize_with_)\n+    : context(context_), predicates(predicates_), table_columns(table_columns_), optimize_final(optimize_final_), optimize_with(optimize_with_)\n {\n }\n \n@@ -42,7 +42,8 @@ void PredicateRewriteVisitorData::visit(ASTSelectWithUnionQuery & union_select_q\n \n void PredicateRewriteVisitorData::visitFirstInternalSelect(ASTSelectQuery & select_query, ASTPtr &)\n {\n-    is_rewrite |= rewriteSubquery(select_query, column_names, column_names);\n+    /// In this case inner_columns same as outer_columns from table_columns\n+    is_rewrite |= rewriteSubquery(select_query, table_columns.columns.getNames());\n }\n \n void PredicateRewriteVisitorData::visitOtherInternalSelect(ASTSelectQuery & select_query, ASTPtr &)\n@@ -65,7 +66,7 @@ void PredicateRewriteVisitorData::visitOtherInternalSelect(ASTSelectQuery & sele\n     const Names & internal_columns = InterpreterSelectQuery(\n         temp_internal_select, context, SelectQueryOptions().analyze()).getSampleBlock().getNames();\n \n-    if (rewriteSubquery(*temp_select_query, column_names, internal_columns))\n+    if (rewriteSubquery(*temp_select_query, internal_columns))\n     {\n         is_rewrite |= true;\n         select_query.setExpression(ASTSelectQuery::Expression::SELECT, std::move(temp_select_query->refSelect()));\n@@ -89,7 +90,7 @@ static void cleanAliasAndCollectIdentifiers(ASTPtr & predicate, std::vector<ASTI\n         identifiers.emplace_back(identifier);\n }\n \n-bool PredicateRewriteVisitorData::rewriteSubquery(ASTSelectQuery & subquery, const Names & outer_columns, const Names & inner_columns)\n+bool PredicateRewriteVisitorData::rewriteSubquery(ASTSelectQuery & subquery, const Names & inner_columns)\n {\n     if ((!optimize_final && subquery.final())\n         || (!optimize_with && subquery.with())\n@@ -98,6 +99,7 @@ bool PredicateRewriteVisitorData::rewriteSubquery(ASTSelectQuery & subquery, con\n         || hasNonRewritableFunction(subquery.select(), context))\n         return false;\n \n+    Names outer_columns = table_columns.columns.getNames();\n     for (const auto & predicate : predicates)\n     {\n         std::vector<ASTIdentifier *> identifiers;\n@@ -106,13 +108,16 @@ bool PredicateRewriteVisitorData::rewriteSubquery(ASTSelectQuery & subquery, con\n \n         for (const auto & identifier : identifiers)\n         {\n-            const auto & column_name = identifier->shortName();\n-            const auto & outer_column_iterator = std::find(outer_columns.begin(), outer_columns.end(), column_name);\n+            IdentifierSemantic::setColumnShortName(*identifier, table_columns.table);\n+            const auto & column_name = identifier->name();\n \n             /// For lambda functions, we can't always find them in the list of columns\n             /// For example: SELECT * FROM system.one WHERE arrayMap(x -> x, [dummy]) = [0]\n+            const auto & outer_column_iterator = std::find(outer_columns.begin(), outer_columns.end(), column_name);\n             if (outer_column_iterator != outer_columns.end())\n+            {\n                 identifier->setShortName(inner_columns[outer_column_iterator - outer_columns.begin()]);\n+            }\n         }\n \n         /// We only need to push all the predicates to subquery having\ndiff --git a/src/Interpreters/PredicateRewriteVisitor.h b/src/Interpreters/PredicateRewriteVisitor.h\nindex 02c8b9ca422c..1132d93a5ec1 100644\n--- a/src/Interpreters/PredicateRewriteVisitor.h\n+++ b/src/Interpreters/PredicateRewriteVisitor.h\n@@ -4,6 +4,7 @@\n #include <Parsers/ASTSelectQuery.h>\n #include <Parsers/ASTSelectWithUnionQuery.h>\n #include <Interpreters/InDepthNodeVisitor.h>\n+#include <Interpreters/DatabaseAndTableWithAlias.h>\n \n namespace DB\n {\n@@ -24,12 +25,13 @@ class PredicateRewriteVisitorData\n         return true;\n     }\n \n-    PredicateRewriteVisitorData(const Context & context_, const ASTs & predicates_, Names && column_names_, bool optimize_final_, bool optimize_with_);\n+    PredicateRewriteVisitorData(const Context & context_, const ASTs & predicates_,\n+                                const TableWithColumnNamesAndTypes & table_columns_, bool optimize_final_, bool optimize_with_);\n \n private:\n     const Context & context;\n     const ASTs & predicates;\n-    const Names column_names;\n+    const TableWithColumnNamesAndTypes & table_columns;\n     bool optimize_final;\n     bool optimize_with;\n \n@@ -37,7 +39,7 @@ class PredicateRewriteVisitorData\n \n     void visitOtherInternalSelect(ASTSelectQuery & select_query, ASTPtr &);\n \n-    bool rewriteSubquery(ASTSelectQuery & subquery, const Names & outer_columns, const Names & inner_columns);\n+    bool rewriteSubquery(ASTSelectQuery & subquery, const Names & inner_columns);\n };\n \n using PredicateRewriteMatcher = OneTypeMatcher<PredicateRewriteVisitorData, PredicateRewriteVisitorData::needChild>;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00597_push_down_predicate.reference b/tests/queries/0_stateless/00597_push_down_predicate.reference\nindex bd1c4791df44..59313c35b81b 100644\n--- a/tests/queries/0_stateless/00597_push_down_predicate.reference\n+++ b/tests/queries/0_stateless/00597_push_down_predicate.reference\n@@ -585,3 +585,15 @@ SEMI LEFT JOIN\n ) AS r USING (id)\n WHERE r.id = 1\n 2000-01-01\t1\ttest string 1\t1\t2000-01-01\ttest string 1\t1\n+SELECT value + t1.value AS expr\n+FROM \n+(\n+    SELECT\n+        value,\n+        t1.value\n+    FROM test_00597 AS t0\n+    ALL FULL OUTER JOIN test_00597 AS t1 USING (date)\n+    WHERE (value + `t1.value`) < 3\n+)\n+WHERE expr < 3\n+2\ndiff --git a/tests/queries/0_stateless/00597_push_down_predicate.sql b/tests/queries/0_stateless/00597_push_down_predicate.sql\nindex ec306ac67929..2e3357241ad3 100644\n--- a/tests/queries/0_stateless/00597_push_down_predicate.sql\n+++ b/tests/queries/0_stateless/00597_push_down_predicate.sql\n@@ -135,5 +135,9 @@ SELECT * FROM (SELECT * FROM (SELECT * FROM test_00597) AS a ANY LEFT JOIN (SELE\n EXPLAIN SYNTAX SELECT * FROM (SELECT * FROM test_00597) ANY INNER JOIN (SELECT * FROM (SELECT * FROM test_00597)) as r USING id WHERE r.id = 1;\n SELECT * FROM (SELECT * FROM test_00597) ANY INNER JOIN (SELECT * FROM (SELECT * FROM test_00597)) as r USING id WHERE r.id = 1;\n \n+-- issue 20497\n+EXPLAIN SYNTAX SELECT value + t1.value AS expr FROM (SELECT t0.value, t1.value FROM test_00597 AS t0 FULL JOIN test_00597 AS t1 USING date) WHERE expr < 3;\n+SELECT value + t1.value AS expr FROM (SELECT t0.value, t1.value FROM test_00597 AS t0 FULL JOIN test_00597 AS t1 USING date) WHERE expr < 3;\n+\n DROP TABLE IF EXISTS test_00597;\n DROP TABLE IF EXISTS test_view_00597;\n",
  "problem_statement": "Incorrect 'where' filtration after full join\n**Describe the bug**\r\nStrange behavior with 'where' condition after join. Some rows are discarded by mistake.\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use\r\nLatest version in Arcadia.\r\n\r\n* `CREATE TABLE` statements for all tables involved\r\n```sql\r\ncreate table t0 (a Int64) engine = MergeTree() primary key a;\r\ncreate table t1 (a Int64) engine = MergeTree() primary key a;\r\n```\r\n\r\n* Sample data for all these tables\r\n```sql\r\ninsert into t0 values (1), (2);\r\ninsert into t1 values (1), (3);\r\n```\r\n\r\n* Queries to run that lead to unexpected result\r\n```sql\r\nselect multiIf(a != 0 and t1.a != 0, 'both', a != 0 and t1.a = 0, 'first', a = 0 and t1.a != 0, 'second', 'error') as type from (select t0.a, t1.a from t0 full join t1 using a) where type = 'first';\r\nselect multiIf(a != 0 and t1.a != 0, 'both', a != 0 and t1.a = 0, 'first', a = 0 and t1.a != 0, 'second', 'error') as type from (select t0.a, t1.a from t0 full join t1 using a) where type in ('both', 'first', 'second');\r\n```\r\n**Expected behavior**\r\nResult should contain 1 row in first query and 3 in second one.\r\n\r\n**Additional context**\r\nFirst two queries and the last one return correct results. Others do not. The queries differ only in 'where' condition.\r\n```sql\r\ndi.man.yp-c.yandex.net :) select multiIf(a != 0 and t1.a != 0, 'both', a != 0 and t1.a = 0, 'first', a = 0 and t1.a != 0, 'second', 'error') as type from (select t0.a, t1.a from t0 full join t1 using a)\r\n\r\nSELECT multiIf((a != 0) AND (t1.a != 0), 'both', (a != 0) AND (t1.a = 0), 'first', (a = 0) AND (t1.a != 0), 'second', 'error') AS type\r\nFROM \r\n(\r\n    SELECT\r\n        t0.a,\r\n        t1.a\r\n    FROM t0\r\n    FULL OUTER JOIN t1 USING (a)\r\n)\r\n\r\nQuery id: 52e62625-d357-4fa4-babe-805332ab1dfd\r\n\r\n\u250c\u2500type\u2500\u2500\u2510\r\n\u2502 both  \u2502\r\n\u2502 first \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\u250c\u2500type\u2500\u2500\u2500\u2510\r\n\u2502 second \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n3 rows in set. Elapsed: 0.019 sec.\r\n\r\ndi.man.yp-c.yandex.net :) select multiIf(a != 0 and t1.a != 0, 'both', a != 0 and t1.a = 0, 'first', a = 0 and t1.a != 0, 'second', 'error') as type from (select t0.a, t1.a from t0 full join t1 using a) where type = 'both'\r\n\r\nSELECT multiIf((a != 0) AND (t1.a != 0), 'both', (a != 0) AND (t1.a = 0), 'first', (a = 0) AND (t1.a != 0), 'second', 'error') AS type\r\nFROM \r\n(\r\n    SELECT\r\n        t0.a,\r\n        t1.a\r\n    FROM t0\r\n    FULL OUTER JOIN t1 USING (a)\r\n)\r\nWHERE type = 'both'\r\n\r\nQuery id: 4ac91465-c66b-4aed-89cd-c6fbea58ff57\r\n\r\n\u250c\u2500type\u2500\u2510\r\n\u2502 both \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.028 sec.\r\n\r\ndi.man.yp-c.yandex.net :) select multiIf(a != 0 and t1.a != 0, 'both', a != 0 and t1.a = 0, 'first', a = 0 and t1.a != 0, 'second', 'error') as type from (select t0.a, t1.a from t0 full join t1 using a) where type = 'first'\r\n\r\nSELECT multiIf((a != 0) AND (t1.a != 0), 'both', (a != 0) AND (t1.a = 0), 'first', (a = 0) AND (t1.a != 0), 'second', 'error') AS type\r\nFROM \r\n(\r\n    SELECT\r\n        t0.a,\r\n        t1.a\r\n    FROM t0\r\n    FULL OUTER JOIN t1 USING (a)\r\n)\r\nWHERE type = 'first'\r\n\r\nQuery id: 5e90a617-d996-4fde-ace2-9a43e5c96906\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.028 sec. \r\n\r\ndi.man.yp-c.yandex.net :) select multiIf(a != 0 and t1.a != 0, 'both', a != 0 and t1.a = 0, 'first', a = 0 and t1.a != 0, 'second', 'error') as type from (select t0.a, t1.a from t0 full join t1 using a) where type = 'second'\r\n\r\nSELECT multiIf((a != 0) AND (t1.a != 0), 'both', (a != 0) AND (t1.a = 0), 'first', (a = 0) AND (t1.a != 0), 'second', 'error') AS type\r\nFROM \r\n(\r\n    SELECT\r\n        t0.a,\r\n        t1.a\r\n    FROM t0\r\n    FULL OUTER JOIN t1 USING (a)\r\n)\r\nWHERE type = 'second'\r\n\r\nQuery id: a673bf99-0cfe-4782-912f-3132b150fd83\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.027 sec. \r\n\r\ndi.man.yp-c.yandex.net :) select multiIf(a != 0 and t1.a != 0, 'both', a != 0 and t1.a = 0, 'first', a = 0 and t1.a != 0, 'second', 'error') as type from (select t0.a, t1.a from t0 full join t1 using a) where type in ('both', 'first', 'second')\r\n\r\nSELECT multiIf((a != 0) AND (t1.a != 0), 'both', (a != 0) AND (t1.a = 0), 'first', (a = 0) AND (t1.a != 0), 'second', 'error') AS type\r\nFROM \r\n(\r\n    SELECT\r\n        t0.a,\r\n        t1.a\r\n    FROM t0\r\n    FULL OUTER JOIN t1 USING (a)\r\n)\r\nWHERE type IN ('both', 'first', 'second')\r\n\r\nQuery id: 8cc4b758-6b0d-41b3-8dc9-3932c46c00ce\r\n\r\n\u250c\u2500type\u2500\u2500\u2510\r\n\u2502 both  \u2502\r\n\u2502 first \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.028 sec.\r\n\r\ndi.man.yp-c.yandex.net :) select multiIf(a != 0 and t1.a != 0, 'both', a != 0 and t1.a = 0, 'first', a = 0 and t1.a != 0, 'second', 'error') as type from (select t0.a, t1.a from t0 full join t1 using a) where type not in ('both', 'first')\r\n\r\nSELECT multiIf((a != 0) AND (t1.a != 0), 'both', (a != 0) AND (t1.a = 0), 'first', (a = 0) AND (t1.a != 0), 'second', 'error') AS type\r\nFROM \r\n(\r\n    SELECT\r\n        t0.a,\r\n        t1.a\r\n    FROM t0\r\n    FULL OUTER JOIN t1 USING (a)\r\n)\r\nWHERE type NOT IN ('both', 'first')\r\n\r\nQuery id: e8f174d1-f2e4-424b-9ad0-2fa233ceb0b0\r\n\r\n\u250c\u2500type\u2500\u2500\u2500\u2510\r\n\u2502 second \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.034 sec. \r\n```\n",
  "hints_text": "",
  "created_at": "2021-02-17T12:00:19Z",
  "modified_files": [
    "src/Interpreters/IdentifierSemantic.cpp",
    "src/Interpreters/PredicateExpressionsOptimizer.cpp",
    "src/Interpreters/PredicateExpressionsOptimizer.h",
    "src/Interpreters/PredicateRewriteVisitor.cpp",
    "src/Interpreters/PredicateRewriteVisitor.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00597_push_down_predicate.reference",
    "tests/queries/0_stateless/00597_push_down_predicate.sql"
  ]
}