{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52209,
  "instance_id": "ClickHouse__ClickHouse-52209",
  "issue_numbers": [
    "51172"
  ],
  "base_commit": "5637c419bd0995ac55311255d8131191324fce0c",
  "patch": "diff --git a/docs/en/sql-reference/functions/string-functions.md b/docs/en/sql-reference/functions/string-functions.md\nindex 4f174a53ad67..9890d257e84b 100644\n--- a/docs/en/sql-reference/functions/string-functions.md\n+++ b/docs/en/sql-reference/functions/string-functions.md\n@@ -1267,3 +1267,36 @@ Like [initcap](#initcap), assuming that the string contains valid UTF-8 encoded\n Does not detect the language, e.g. for Turkish the result might not be exactly correct (i/\u0130 vs. i/I).\n \n If the length of the UTF-8 byte sequence is different for upper and lower case of a code point, the result may be incorrect for this code point.\n+\n+## firstLine\n+\n+Returns the first line from a multi-line string.\n+\n+**Syntax**\n+\n+```sql\n+firstLine(val)\n+```\n+\n+**Arguments**\n+\n+- `val` - Input value. [String](../data-types/string.md)\n+\n+**Returned value**\n+\n+- The first line of the input value or the whole value if there is no line\n+  separators. [String](../data-types/string.md)\n+\n+**Example**\n+\n+```sql\n+select firstLine('foo\\nbar\\nbaz');\n+```\n+\n+Result:\n+\n+```result\n+\u250c\u2500firstLine('foo\\nbar\\nbaz')\u2500\u2510\n+\u2502 foo                        \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\ndiff --git a/docs/ru/sql-reference/functions/string-functions.md b/docs/ru/sql-reference/functions/string-functions.md\nindex b872200f99b6..276dfc2ef203 100644\n--- a/docs/ru/sql-reference/functions/string-functions.md\n+++ b/docs/ru/sql-reference/functions/string-functions.md\n@@ -1124,3 +1124,39 @@ Do Nothing for 2 Minutes 2:00 &nbsp;\n \u041d\u0435 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u044f\u0437\u044b\u043a. \u0422\u043e \u0435\u0441\u0442\u044c, \u0434\u043b\u044f \u0442\u0443\u0440\u0435\u0446\u043a\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435 \u0441\u043e\u0432\u0441\u0435\u043c \u0432\u0435\u0440\u043d\u044b\u043c.\n \u0415\u0441\u043b\u0438 \u0434\u043b\u0438\u043d\u0430 UTF-8 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0431\u0430\u0439\u0442\u043e\u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u0430 \u0434\u043b\u044f \u0432\u0435\u0440\u0445\u043d\u0435\u0433\u043e \u0438 \u043d\u0438\u0436\u043d\u0435\u0433\u043e \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430 \u043a\u043e\u0434\u043e\u0432\u043e\u0439 \u0442\u043e\u0447\u043a\u0438, \u0442\u043e \u0434\u043b\u044f \u044d\u0442\u043e\u0439 \u043a\u043e\u0434\u043e\u0432\u043e\u0439 \u0442\u043e\u0447\u043a\u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u043c.\n \u0415\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043d\u0430\u0431\u043e\u0440 \u0431\u0430\u0439\u0442\u043e\u0432, \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0439\u0441\u044f UTF-8, \u0442\u043e \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043d\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043e.\n+\n+## firstLine\n+\n+\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043f\u0435\u0440\u0432\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043c\u043d\u043e\u0433\u043e\u0441\u0442\u0440\u043e\u0447\u043d\u043e\u043c \u0442\u0435\u043a\u0441\u0442\u0435.\n+\n+**\u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441**\n+\n+```sql\n+firstLine(val)\n+```\n+\n+**\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b**\n+\n+- `val` - \u0442\u0435\u043a\u0441\u0442 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438. [String](../data-types/string.md)\n+\n+**Returned value**\n+\n+- \u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430 \u0438\u043b\u0438 \u0432\u0435\u0441\u044c \u0442\u0435\u043a\u0441\u0442, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u044b \u0441\u0442\u0440\u043e\u043a \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442.\n+\n+\u0422\u0438\u043f: [String](../data-types/string.md)\n+\n+**\u041f\u0440\u0438\u043c\u0435\u0440**\n+\n+\u0417\u0430\u043f\u0440\u043e\u0441:\n+\n+```sql\n+select firstLine('foo\\nbar\\nbaz');\n+```\n+\n+\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n+\n+```result\n+\u250c\u2500firstLine('foo\\nbar\\nbaz')\u2500\u2510\n+\u2502 foo                        \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\ndiff --git a/src/Functions/URL/FunctionsURL.h b/src/Functions/StringHelpers.h\nsimilarity index 93%\nrename from src/Functions/URL/FunctionsURL.h\nrename to src/Functions/StringHelpers.h\nindex 362042e31e19..8f3a87d5d0e3 100644\n--- a/src/Functions/URL/FunctionsURL.h\n+++ b/src/Functions/StringHelpers.h\n@@ -7,8 +7,8 @@\n namespace DB\n {\n \n-/** URL processing functions. See implementation in separate .cpp files.\n-  * All functions are not strictly follow RFC, instead they are maximally simplified for performance reasons.\n+/** These helpers are used by URL processing functions. See implementation in separate .cpp files.\n+  * All functions do not strictly follow RFC, instead they are maximally simplified for performance reasons.\n   *\n   * Functions for extraction parts of URL.\n   * If URL has nothing like, then empty string is returned.\n@@ -101,7 +101,7 @@ struct ExtractSubstringImpl\n \n     static void vectorFixed(const ColumnString::Chars &, size_t, ColumnString::Chars &)\n     {\n-        throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Column of type FixedString is not supported by URL functions\");\n+        throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Column of type FixedString is not supported by this function\");\n     }\n };\n \n@@ -156,7 +156,7 @@ struct CutSubstringImpl\n \n     static void vectorFixed(const ColumnString::Chars &, size_t, ColumnString::Chars &)\n     {\n-        throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Column of type FixedString is not supported by URL functions\");\n+        throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Column of type FixedString is not supported by this function\");\n     }\n };\n \ndiff --git a/src/Functions/URL/FirstSignificantSubdomainCustomImpl.h b/src/Functions/URL/FirstSignificantSubdomainCustomImpl.h\nindex 5862265ce7df..93691e357412 100644\n--- a/src/Functions/URL/FirstSignificantSubdomainCustomImpl.h\n+++ b/src/Functions/URL/FirstSignificantSubdomainCustomImpl.h\n@@ -1,8 +1,8 @@\n #pragma once\n \n #include <Functions/FunctionFactory.h>\n-#include <Functions/URL/FunctionsURL.h>\n #include <Functions/FunctionHelpers.h>\n+#include <Functions/StringHelpers.h>\n #include <DataTypes/DataTypeString.h>\n #include <Columns/ColumnString.h>\n #include <Columns/ColumnFixedString.h>\ndiff --git a/src/Functions/URL/basename.cpp b/src/Functions/URL/basename.cpp\nindex 6992f924ef20..bc747e2595fe 100644\n--- a/src/Functions/URL/basename.cpp\n+++ b/src/Functions/URL/basename.cpp\n@@ -1,7 +1,7 @@\n #include <Functions/FunctionFactory.h>\n #include <Functions/FunctionStringToString.h>\n+#include <Functions/StringHelpers.h>\n #include <base/find_symbols.h>\n-#include \"FunctionsURL.h\"\n \n namespace DB\n {\ndiff --git a/src/Functions/URL/fragment.h b/src/Functions/URL/fragment.h\nindex 6c11d0fbb34e..0414c4f64a23 100644\n--- a/src/Functions/URL/fragment.h\n+++ b/src/Functions/URL/fragment.h\n@@ -1,7 +1,7 @@\n #pragma once\n \n-#include \"FunctionsURL.h\"\n #include <base/find_symbols.h>\n+#include <Functions/StringHelpers.h>\n \n namespace DB\n {\ndiff --git a/src/Functions/URL/netloc.cpp b/src/Functions/URL/netloc.cpp\nindex bc34e34a40d6..bf3e8a471ef3 100644\n--- a/src/Functions/URL/netloc.cpp\n+++ b/src/Functions/URL/netloc.cpp\n@@ -1,7 +1,7 @@\n #include <Common/StringUtils/StringUtils.h>\n #include <Functions/FunctionFactory.h>\n #include <Functions/FunctionStringToString.h>\n-#include <Functions/URL/FunctionsURL.h>\n+#include <Functions/StringHelpers.h>\n \n \n namespace DB\n@@ -154,4 +154,3 @@ REGISTER_FUNCTION(Netloc)\n }\n \n }\n-\ndiff --git a/src/Functions/URL/path.cpp b/src/Functions/URL/path.cpp\nindex ccc7dedb724e..8d609f431916 100644\n--- a/src/Functions/URL/path.cpp\n+++ b/src/Functions/URL/path.cpp\n@@ -1,6 +1,6 @@\n #include <Functions/FunctionFactory.h>\n #include <Functions/FunctionStringToString.h>\n-#include \"FunctionsURL.h\"\n+#include <Functions/StringHelpers.h>\n #include \"path.h\"\n #include <base/find_symbols.h>\n \ndiff --git a/src/Functions/URL/path.h b/src/Functions/URL/path.h\nindex 89244659088e..a0dd5eea2d3d 100644\n--- a/src/Functions/URL/path.h\n+++ b/src/Functions/URL/path.h\n@@ -1,7 +1,7 @@\n #pragma once\n \n #include <base/find_symbols.h>\n-#include <Functions/URL/FunctionsURL.h>\n+#include <Functions/StringHelpers.h>\n \n \n namespace DB\ndiff --git a/src/Functions/URL/pathFull.cpp b/src/Functions/URL/pathFull.cpp\nindex 002770e812a7..9aacee21fed3 100644\n--- a/src/Functions/URL/pathFull.cpp\n+++ b/src/Functions/URL/pathFull.cpp\n@@ -1,6 +1,6 @@\n #include <Functions/FunctionFactory.h>\n #include <Functions/FunctionStringToString.h>\n-#include \"FunctionsURL.h\"\n+#include <Functions/StringHelpers.h>\n #include \"path.h\"\n #include <base/find_symbols.h>\n \ndiff --git a/src/Functions/URL/protocol.h b/src/Functions/URL/protocol.h\nindex 74c0bb820b43..c1d831928351 100644\n--- a/src/Functions/URL/protocol.h\n+++ b/src/Functions/URL/protocol.h\n@@ -1,7 +1,7 @@\n #pragma once\n \n-#include \"FunctionsURL.h\"\n #include <Common/StringUtils/StringUtils.h>\n+#include <Functions/StringHelpers.h>\n \n \n namespace DB\n@@ -54,4 +54,3 @@ struct ExtractProtocol\n };\n \n }\n-\ndiff --git a/src/Functions/URL/queryString.h b/src/Functions/URL/queryString.h\nindex a0777a5c9a1f..603450d102b8 100644\n--- a/src/Functions/URL/queryString.h\n+++ b/src/Functions/URL/queryString.h\n@@ -1,7 +1,7 @@\n #pragma once\n \n-#include \"FunctionsURL.h\"\n #include <base/find_symbols.h>\n+#include <Functions/StringHelpers.h>\n \n \n namespace DB\ndiff --git a/src/Functions/URL/queryStringAndFragment.h b/src/Functions/URL/queryStringAndFragment.h\nindex ed19cd14b744..27008388e4d6 100644\n--- a/src/Functions/URL/queryStringAndFragment.h\n+++ b/src/Functions/URL/queryStringAndFragment.h\n@@ -1,7 +1,7 @@\n #pragma once\n \n-#include \"FunctionsURL.h\"\n #include <base/find_symbols.h>\n+#include <Functions/StringHelpers.h>\n \n \n namespace DB\n@@ -34,4 +34,3 @@ struct ExtractQueryStringAndFragment\n };\n \n }\n-\ndiff --git a/src/Functions/firstLine.cpp b/src/Functions/firstLine.cpp\nnew file mode 100644\nindex 000000000000..20b47361d58a\n--- /dev/null\n+++ b/src/Functions/firstLine.cpp\n@@ -0,0 +1,42 @@\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/FunctionStringToString.h>\n+#include <Functions/StringHelpers.h>\n+#include <base/find_symbols.h>\n+\n+namespace DB\n+{\n+\n+struct FirstLine\n+{\n+    static size_t getReserveLengthForElement() { return 16; }\n+\n+    static void execute(Pos data, size_t size, Pos & res_data, size_t & res_size)\n+    {\n+        res_data = data;\n+\n+        const Pos end = data + size;\n+        const Pos pos = find_first_symbols<'\\r', '\\n'>(data, end);\n+        res_size = pos - data;\n+    }\n+};\n+\n+struct NameFirstLine\n+{\n+    static constexpr auto name = \"firstLine\";\n+};\n+\n+using FunctionFirstLine = FunctionStringToString<ExtractSubstringImpl<FirstLine>, NameFirstLine>;\n+\n+REGISTER_FUNCTION(FirstLine)\n+{\n+    factory.registerFunction<FunctionFirstLine>(FunctionDocumentation{\n+        .description = \"Returns first line of a multi-line string.\",\n+        .syntax = \"firstLine(string)\",\n+        .arguments = {{.name = \"string\", .description = \"The string to process.\"}},\n+        .returned_value = {\"The first line of the string or the whole string if there is no line separators.\"},\n+        .examples = {\n+            {.name = \"Return first line\", .query = \"firstLine('Hello\\\\nWorld')\", .result = \"'Hello'\"},\n+            {.name = \"Return whole string\", .query = \"firstLine('Hello World')\", .result = \"'Hello World'\"},\n+        }});\n+}\n+}\ndiff --git a/utils/check-style/aspell-ignore/en/aspell-dict.txt b/utils/check-style/aspell-ignore/en/aspell-dict.txt\nindex 6c88d63be49e..57934b287282 100644\n--- a/utils/check-style/aspell-ignore/en/aspell-dict.txt\n+++ b/utils/check-style/aspell-ignore/en/aspell-dict.txt\n@@ -1428,6 +1428,7 @@ filesystemFree\n filesystems\n finalizeAggregation\n fips\n+firstLine\n firstSignificantSubdomain\n firstSignificantSubdomainCustom\n fixedstring\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02815_first_line.reference b/tests/queries/0_stateless/02815_first_line.reference\nnew file mode 100644\nindex 000000000000..cdc86229cc8e\n--- /dev/null\n+++ b/tests/queries/0_stateless/02815_first_line.reference\n@@ -0,0 +1,9 @@\n+foo\n+foo\n+foo\n+foobarbaz\n+== vector\n+1\tfoo\n+2\tquux\n+3\tsingle line\n+4\twindows\ndiff --git a/tests/queries/0_stateless/02815_first_line.sql b/tests/queries/0_stateless/02815_first_line.sql\nnew file mode 100644\nindex 000000000000..8c0affaebd3c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02815_first_line.sql\n@@ -0,0 +1,12 @@\n+select firstLine('foo\\nbar\\nbaz');\n+select firstLine('foo\\rbar\\rbaz');\n+select firstLine('foo\\r\\nbar\\r\\nbaz');\n+select firstLine('foobarbaz');\n+\n+select '== vector';\n+\n+drop table if exists 02815_first_line_vector;\n+create table 02815_first_line_vector (n Int32, text String) engine = MergeTree order by n;\n+\n+insert into 02815_first_line_vector values (1, 'foo\\nbar\\nbaz'), (2, 'quux\\n'), (3, 'single line'), (4, 'windows\\r\\nline breaks');\n+select n, firstLine(text) from 02815_first_line_vector order by n;\n",
  "problem_statement": "A function `firstLine` to extract the first line from a multi-line string\n**Describe alternatives you've considered**\r\n\r\n```\r\nextract(s, '^[^\\r\\n]+')\r\n```\n",
  "hints_text": "I'd like to take this task. And can I ask where is the function placed on?\n> I'd like to take this task. And can I ask where is the function placed on?\r\n\r\nIt can be a new function under `src/Functions/`.\nHey @infdahai! Are you working on this task? If not, I'd like to take it instead.\n@mkmkme Thank you! Reassigned...",
  "created_at": "2023-07-17T13:10:35Z",
  "modified_files": [
    "docs/en/sql-reference/functions/string-functions.md",
    "docs/ru/sql-reference/functions/string-functions.md",
    "b/src/Functions/StringHelpers.h",
    "src/Functions/URL/FirstSignificantSubdomainCustomImpl.h",
    "src/Functions/URL/basename.cpp",
    "src/Functions/URL/fragment.h",
    "src/Functions/URL/netloc.cpp",
    "src/Functions/URL/path.cpp",
    "src/Functions/URL/path.h",
    "src/Functions/URL/pathFull.cpp",
    "src/Functions/URL/protocol.h",
    "src/Functions/URL/queryString.h",
    "src/Functions/URL/queryStringAndFragment.h",
    "b/src/Functions/firstLine.cpp",
    "utils/check-style/aspell-ignore/en/aspell-dict.txt"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02815_first_line.reference",
    "b/tests/queries/0_stateless/02815_first_line.sql"
  ]
}