{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 54943,
  "instance_id": "ClickHouse__ClickHouse-54943",
  "issue_numbers": [
    "54941"
  ],
  "base_commit": "4f037c25041a0468b4a8cd276ad649e02f47559e",
  "patch": "diff --git a/src/Storages/AlterCommands.cpp b/src/Storages/AlterCommands.cpp\nindex da46cb4d7fea..1f69af0b6cef 100644\n--- a/src/Storages/AlterCommands.cpp\n+++ b/src/Storages/AlterCommands.cpp\n@@ -11,6 +11,7 @@\n #include <Interpreters/ExpressionActions.h>\n #include <Interpreters/addTypeConversionToAST.h>\n #include <Interpreters/ExpressionAnalyzer.h>\n+#include <Interpreters/FunctionNameNormalizer.h>\n #include <Interpreters/TreeRewriter.h>\n #include <Interpreters/RenameColumnVisitor.h>\n #include <Interpreters/GinFilter.h>\n@@ -937,8 +938,21 @@ void AlterCommands::apply(StorageInMemoryMetadata & metadata, ContextPtr context\n \n     /// And in partition key expression\n     if (metadata_copy.partition_key.definition_ast != nullptr)\n+    {\n         metadata_copy.partition_key.recalculateWithNewAST(metadata_copy.partition_key.definition_ast, metadata_copy.columns, context);\n \n+        /// If partition key expression is changed, we also need to rebuild minmax_count_projection\n+        if (!blocksHaveEqualStructure(metadata_copy.partition_key.sample_block, metadata.partition_key.sample_block))\n+        {\n+            auto minmax_columns = metadata_copy.getColumnsRequiredForPartitionKey();\n+            auto partition_key = metadata_copy.partition_key.expression_list_ast->clone();\n+            FunctionNameNormalizer().visit(partition_key.get());\n+            auto primary_key_asts = metadata_copy.primary_key.expression_list_ast->children;\n+            metadata_copy.minmax_count_projection.emplace(ProjectionDescription::getMinMaxCountProjection(\n+                metadata_copy.columns, partition_key, minmax_columns, primary_key_asts, context));\n+        }\n+    }\n+\n     // /// And in sample key expression\n     if (metadata_copy.sampling_key.definition_ast != nullptr)\n         metadata_copy.sampling_key.recalculateWithNewAST(metadata_copy.sampling_key.definition_ast, metadata_copy.columns, context);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01710_minmax_count_projection_modify_partition_key.reference b/tests/queries/0_stateless/01710_minmax_count_projection_modify_partition_key.reference\nnew file mode 100644\nindex 000000000000..60f9fb089181\n--- /dev/null\n+++ b/tests/queries/0_stateless/01710_minmax_count_projection_modify_partition_key.reference\n@@ -0,0 +1,3 @@\n+x\t1\n+x\t1\n+y\t1\ndiff --git a/tests/queries/0_stateless/01710_minmax_count_projection_modify_partition_key.sql b/tests/queries/0_stateless/01710_minmax_count_projection_modify_partition_key.sql\nnew file mode 100644\nindex 000000000000..5297fb3e194f\n--- /dev/null\n+++ b/tests/queries/0_stateless/01710_minmax_count_projection_modify_partition_key.sql\n@@ -0,0 +1,13 @@\n+DROP TABLE IF EXISTS test;\n+\n+CREATE TABLE test (type Enum('x'), s String) ENGINE = MergeTree ORDER BY s PARTITION BY type;\n+INSERT INTO test VALUES ('x', 'Hello');\n+\n+SELECT type, count() FROM test GROUP BY type ORDER BY type;\n+\n+ALTER TABLE test MODIFY COLUMN type Enum('x', 'y');\n+INSERT INTO test VALUES ('y', 'World');\n+\n+SELECT type, count() FROM test GROUP BY type ORDER BY type;\n+\n+DROP TABLE test;\n",
  "problem_statement": "Optimization with implicit projections produces logical error if table's partition key was ALTERed by extending its Enum type.\n**Describe what's wrong**\r\n\r\n```\r\nCREATE TABLE test (type Enum('x'), s String) ENGINE = MergeTree ORDER BY s PARTITION BY type;\r\nINSERT INTO test VALUES ('x', 'Hello');\r\n\r\nSELECT type, count() FROM test GROUP BY type ORDER BY type;\r\n\r\nALTER TABLE test MODIFY COLUMN type Enum('x', 'y');\r\nINSERT INTO test VALUES ('y', 'World');\r\n\r\nSELECT type, count() FROM test GROUP BY type ORDER BY type;\r\n```\r\n\r\nExample:\r\n\r\n```\r\nmilovidov@milovidov-desktop:~/work/ClickHouse$ clickhouse-local \r\nClickHouse local version 23.9.1.1.\r\n\r\nmilovidov-desktop :) CREATE TABLE test (type Enum('x'), s String) ENGINE = MergeTree ORDER BY s PARTITION BY type;\r\n\r\nCREATE TABLE test\r\n(\r\n    `type` Enum('x'),\r\n    `s` String\r\n)\r\nENGINE = MergeTree\r\nPARTITION BY type\r\nORDER BY s\r\n\r\nQuery id: 49ac0b02-e3c0-4b47-8a8e-1f38c973368f\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.020 sec. \r\n\r\nmilovidov-desktop :) INSERT INTO test VALUES ('x', 'Hello');\r\n\r\nINSERT INTO test FORMAT Values\r\n\r\nQuery id: 5b747e2c-6966-4f23-877d-c3d99d11f40e\r\n\r\nOk.\r\n\r\n1 row in set. Elapsed: 0.010 sec. \r\n\r\nmilovidov-desktop :) SELECT type, count() FROM test GROUP BY type ORDER BY type;\r\n\r\nSELECT\r\n    type,\r\n    count()\r\nFROM test\r\nGROUP BY type\r\nORDER BY type ASC\r\n\r\nQuery id: 20cba2b0-3f00-41f7-8fbd-a74320714781\r\n\r\n\u250c\u2500type\u2500\u252c\u2500count()\u2500\u2510\r\n\u2502 x    \u2502       1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.011 sec. \r\n\r\nmilovidov-desktop :) ALTER TABLE test MODIFY COLUMN type Enum('x', 'y');\r\n\r\nALTER TABLE test\r\n    MODIFY COLUMN `type` Enum('x', 'y')\r\n\r\nQuery id: b4470893-2ed6-456a-9276-6d2f26a50a60\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.001 sec. \r\n\r\nmilovidov-desktop :) INSERT INTO test VALUES ('y', 'World');\r\n\r\nINSERT INTO test FORMAT Values\r\n\r\nQuery id: 5a400225-e0e3-4504-8237-427737679db0\r\n\r\nOk.\r\n\r\n1 row in set. Elapsed: 0.001 sec. \r\n\r\nmilovidov-desktop :) SELECT type, count() FROM test GROUP BY type ORDER BY type;\r\n\r\nSELECT\r\n    type,\r\n    count()\r\nFROM test\r\nGROUP BY type\r\nORDER BY type ASC\r\n\r\nQuery id: 74e2925b-a8f9-4e92-907c-fa428e1d0df2\r\n\r\n\r\n0 rows in set. Elapsed: 0.002 sec. \r\n\r\nReceived exception:\r\nCode: 49. DB::Exception: Block structure mismatch in AggregatingStep stream: different types:\r\ntype Enum8('x' = 1, 'y' = 2) Int8(size = 0)\r\ntype Enum8('x' = 1) Int8(size = 0). (LOGICAL_ERROR)\r\n\r\nmilovidov-desktop :) SET optimize_use_\r\noptimize_use_implicit_projections  optimize_use_projections\r\nmilovidov-desktop :) SET optimize_use_implicit_projections = 0\r\n\r\nSET optimize_use_implicit_projections = 0\r\n\r\nQuery id: e782ee1f-cfb1-45e3-94bd-22e32f3424d7\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.000 sec. \r\n\r\nmilovidov-desktop :) SELECT type, count() FROM test GROUP BY type ORDER BY type;\r\n\r\nSELECT\r\n    type,\r\n    count()\r\nFROM test\r\nGROUP BY type\r\nORDER BY type ASC\r\n\r\nQuery id: 1d760294-f6a9-44c6-b837-afeeeaba4d59\r\n\r\n\u250c\u2500type\u2500\u252c\u2500count()\u2500\u2510\r\n\u2502 x    \u2502       1 \u2502\r\n\u2502 y    \u2502       1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n2 rows in set. Elapsed: 0.004 sec. \r\n\r\nmilovidov-desktop :)\r\n```\n",
  "hints_text": "",
  "created_at": "2023-09-23T09:52:16Z",
  "modified_files": [
    "src/Storages/AlterCommands.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01710_minmax_count_projection_modify_partition_key.reference",
    "b/tests/queries/0_stateless/01710_minmax_count_projection_modify_partition_key.sql"
  ]
}