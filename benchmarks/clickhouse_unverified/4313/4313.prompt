You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Select from system.tables can fail because it changed during select.
18.16.1

select name from system.tables where name like '%_20190103200704_7318357_31397'

```
2019.01.03 21:05:36.525464 [ 70 ] {97f51fe5-a129-4ce4-ac3a-6966e3531c8d} <Debug> executeQuery: (from [::1]:40196) select name from system.tables where name like '%_20190103200704_7318357_31397'
2019.01.03 21:05:36.525925 [ 70 ] {97f51fe5-a129-4ce4-ac3a-6966e3531c8d} <Trace> InterpreterSelectQuery: FetchColumns -> Complete
2019.01.03 21:05:36.525982 [ 70 ] {97f51fe5-a129-4ce4-ac3a-6966e3531c8d} <Debug> executeQuery: Query pipeline:
```

meanwhile ANOTHER table was dropped, system.tables changed.
```
2019.01.03 21:05:36.530037 [ 50 ] {53c33fa1-da11-42ca-b800-a18484acfcae} <Debug> executeQuery: (from [::1]:40198) DROP TABLE dim_event888520190103210000
2019.01.03 21:05:36.530169 [ 50 ] {53c33fa1-da11-42ca-b800-a18484acfcae} <Debug> MemoryTracker: Peak memory usage (for query): 121.00 B.
2019.01.03 21:05:36.530206 [ 50 ] {} <Information> TCPHandler: Processed in 0.000 sec.
2019.01.03 21:05:36.530408 [ 50 ] {} <Information> TCPHandler: Done processing connection.

```

Result
```

2019.01.03 21:05:36.621698 [ 70 ] {97f51fe5-a129-4ce4-ac3a-6966e3531c8d} <Error> executeQuery: Code: 60, e.displayText() = DB::Exception: Table dw.dim_event888520190103210000 doesn't exist., e.w
hat() = DB::Exception (from [::1]:40196) (in query: select name from system.tables where name like '%_20190103200704_7318357_31397'), Stack trace:

0. clickhouse-server(StackTrace::StackTrace()+0x16) [0x9c778f6]
1. clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x22) [0x32b6342]
2. clickhouse-server(DB::Context::getTableImpl(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, st
d::allocator<char> > const&, DB::Exception*) const+0x372) [0x6e558c2]
3. clickhouse-server(DB::Context::getTable(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::a
llocator<char> > const&) const+0x73) [0x6e55c13]
4. clickhouse-server(DB::TablesBlockInputStream::readImpl()+0x78f) [0x34f440f]
5. clickhouse-server(DB::IProfilingBlockInputStream::read()+0x25a) [0x6d6ac6a]
6. clickhouse-server(DB::FilterBlockInputStream::readImpl()+0xbd) [0x73151ed]
7. clickhouse-server(DB::IProfilingBlockInputStream::read()+0x25a) [0x6d6ac6a]
8. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x2e) [0x73144be]
9. clickhouse-server(DB::IProfilingBlockInputStream::read()+0x25a) [0x6d6ac6a]
10. clickhouse-server(DB::ExpressionBlockInputStream::readImpl()+0x2e) [0x73144be]
11. clickhouse-server(DB::IProfilingBlockInputStream::read()+0x25a) [0x6d6ac6a]
12. clickhouse-server(DB::AsynchronousBlockInputStream::calculate()+0x56) [0x6d5fe96]
13. clickhouse-server() [0x6d60300]
14. clickhouse-server(ThreadPool::worker()+0x19e) [0x9f3779e]
15. clickhouse-server() [0xa94e40f]
16. /lib/x86_64-linux-gnu/libpthread.so.0(+0x7494) [0x7f96b87bf494]
17. /lib/x86_64-linux-gnu/libc.so.6(clone+0x3f) [0x7f96b7df1acf]
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
