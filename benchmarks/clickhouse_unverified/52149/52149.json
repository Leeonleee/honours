{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52149,
  "instance_id": "ClickHouse__ClickHouse-52149",
  "issue_numbers": [
    "52139"
  ],
  "base_commit": "09b300cf0742ca8fa494cd64aed59b8cabd03d00",
  "patch": "diff --git a/docs/en/sql-reference/aggregate-functions/reference/arrayconcatagg.md b/docs/en/sql-reference/aggregate-functions/reference/arrayconcatagg.md\nnew file mode 100644\nindex 000000000000..3c71129bdb56\n--- /dev/null\n+++ b/docs/en/sql-reference/aggregate-functions/reference/arrayconcatagg.md\n@@ -0,0 +1,32 @@\n+---\n+slug: /en/sql-reference/aggregate-functions/reference/array_concat_agg\n+sidebar_position: 110\n+---\n+\n+# array_concat_agg \n+- Alias of `groupArrayArray`. The function is case insensitive.\n+\n+**Example**\n+\n+```text\n+SELECT *\n+FROM t\n+\n+\u250c\u2500a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [1,2,3] \u2502\n+\u2502 [4,5]   \u2502\n+\u2502 [6]     \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+\n+```\n+\n+Query:\n+\n+```sql\n+SELECT array_concat_agg(a) AS a\n+FROM t\n+\n+\u250c\u2500a\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n+\u2502 [1,2,3,4,5,6] \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\ndiff --git a/src/AggregateFunctions/AggregateFunctionFactory.cpp b/src/AggregateFunctions/AggregateFunctionFactory.cpp\nindex 6cacf66500fb..f52c9ac8510b 100644\n--- a/src/AggregateFunctions/AggregateFunctionFactory.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionFactory.cpp\n@@ -222,7 +222,6 @@ AggregateFunctionPtr AggregateFunctionFactory::tryGet(\n         : nullptr;\n }\n \n-\n std::optional<AggregateFunctionProperties> AggregateFunctionFactory::tryGetProperties(String name) const\n {\n     if (name.size() > MAX_AGGREGATE_FUNCTION_NAME_LENGTH)\ndiff --git a/src/AggregateFunctions/AggregateFunctionGroupArray.cpp b/src/AggregateFunctions/AggregateFunctionGroupArray.cpp\nindex 1c54038929ba..93a6925d84b3 100644\n--- a/src/AggregateFunctions/AggregateFunctionGroupArray.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionGroupArray.cpp\n@@ -126,6 +126,7 @@ void registerAggregateFunctionGroupArray(AggregateFunctionFactory & factory)\n \n     factory.registerFunction(\"groupArray\", { createAggregateFunctionGroupArray<false>, properties });\n     factory.registerAlias(\"array_agg\", \"groupArray\", AggregateFunctionFactory::CaseInsensitive);\n+    factory.registerAliasUnchecked(\"array_concat_agg\", \"groupArrayArray\", AggregateFunctionFactory::CaseInsensitive);\n     factory.registerFunction(\"groupArraySample\", { createAggregateFunctionGroupArraySample, properties });\n     factory.registerFunction(\"groupArrayLast\", { createAggregateFunctionGroupArray<true>, properties });\n }\ndiff --git a/src/Common/IFactoryWithAliases.h b/src/Common/IFactoryWithAliases.h\nindex b2ac4ab289e1..07440dd2463b 100644\n--- a/src/Common/IFactoryWithAliases.h\n+++ b/src/Common/IFactoryWithAliases.h\n@@ -52,35 +52,38 @@ class IFactoryWithAliases : public IHints<2, IFactoryWithAliases<ValueType>>\n     {\n         const auto & creator_map = getMap();\n         const auto & case_insensitive_creator_map = getCaseInsensitiveMap();\n-        const String factory_name = getFactoryName();\n \n-        String real_dict_name;\n-        if (creator_map.count(real_name))\n-            real_dict_name = real_name;\n-        else if (auto real_name_lowercase = Poco::toLower(real_name); case_insensitive_creator_map.count(real_name_lowercase))\n-            real_dict_name = real_name_lowercase;\n-        else\n-            throw Exception(ErrorCodes::LOGICAL_ERROR, \"{}: can't create alias '{}', the real name '{}' is not registered\",\n-                            factory_name, alias_name, real_name);\n+        auto real_name_lowercase = Poco::toLower(real_name);\n+        if (!creator_map.contains(real_name) && !case_insensitive_creator_map.contains(real_name_lowercase))\n+            throw Exception(\n+                ErrorCodes::LOGICAL_ERROR,\n+                \"{}: can't create alias '{}', the real name '{}' is not registered\",\n+                getFactoryName(),\n+                alias_name,\n+                real_name);\n \n-        String alias_name_lowercase = Poco::toLower(alias_name);\n+        registerAliasUnchecked(alias_name, real_name, case_sensitiveness);\n+    }\n \n-        if (creator_map.count(alias_name) || case_insensitive_creator_map.count(alias_name_lowercase))\n-            throw Exception(ErrorCodes::LOGICAL_ERROR, \"{}: the alias name '{}' is already registered as real name\",\n-                            factory_name, alias_name);\n+    /// We need sure the real_name exactly exists when call the function directly.\n+    void registerAliasUnchecked(const String & alias_name, const String & real_name, CaseSensitiveness case_sensitiveness = CaseSensitive)\n+    {\n+        String alias_name_lowercase = Poco::toLower(alias_name);\n+        String real_name_lowercase = Poco::toLower(real_name);\n+        const String factory_name = getFactoryName();\n \n         if (case_sensitiveness == CaseInsensitive)\n         {\n-            if (!case_insensitive_aliases.emplace(alias_name_lowercase, real_dict_name).second)\n-                throw Exception(ErrorCodes::LOGICAL_ERROR, \"{}: case insensitive alias name '{}' is not unique\",\n-                                factory_name, alias_name);\n+            if (!case_insensitive_aliases.emplace(alias_name_lowercase, real_name).second)\n+                throw Exception(ErrorCodes::LOGICAL_ERROR, \"{}: case insensitive alias name '{}' is not unique\", factory_name, alias_name);\n             case_insensitive_name_mapping[alias_name_lowercase] = real_name;\n         }\n \n-        if (!aliases.emplace(alias_name, real_dict_name).second)\n+        if (!aliases.emplace(alias_name, real_name).second)\n             throw Exception(ErrorCodes::LOGICAL_ERROR, \"{}: alias name '{}' is not unique\", factory_name, alias_name);\n     }\n \n+\n     std::vector<String> getAllRegisteredNames() const override\n     {\n         std::vector<String> result;\n@@ -93,7 +96,7 @@ class IFactoryWithAliases : public IHints<2, IFactoryWithAliases<ValueType>>\n     bool isCaseInsensitive(const String & name) const\n     {\n         String name_lowercase = Poco::toLower(name);\n-        return getCaseInsensitiveMap().count(name_lowercase) || case_insensitive_aliases.count(name_lowercase);\n+        return getCaseInsensitiveMap().contains(name_lowercase) || case_insensitive_aliases.contains(name_lowercase);\n     }\n \n     const String & aliasTo(const String & name) const\n@@ -106,14 +109,11 @@ class IFactoryWithAliases : public IHints<2, IFactoryWithAliases<ValueType>>\n         throw Exception(ErrorCodes::LOGICAL_ERROR, \"{}: name '{}' is not alias\", getFactoryName(), name);\n     }\n \n-    bool isAlias(const String & name) const\n-    {\n-        return aliases.count(name) || case_insensitive_aliases.contains(name);\n-    }\n+    bool isAlias(const String & name) const { return aliases.contains(name) || case_insensitive_aliases.contains(name); }\n \n     bool hasNameOrAlias(const String & name) const\n     {\n-        return getMap().count(name) || getCaseInsensitiveMap().count(name) || isAlias(name);\n+        return getMap().contains(name) || getCaseInsensitiveMap().contains(name) || isAlias(name);\n     }\n \n     /// Return the canonical name (the name used in registration) if it's different from `name`.\n@@ -129,7 +129,7 @@ class IFactoryWithAliases : public IHints<2, IFactoryWithAliases<ValueType>>\n \n private:\n     using InnerMap = std::unordered_map<String, Value>; // name -> creator\n-    using AliasMap = std::unordered_map<String, String>; // alias -> original type\n+    using AliasMap = std::unordered_map<String, String>; // alias -> original name\n \n     virtual const InnerMap & getMap() const = 0;\n     virtual const InnerMap & getCaseInsensitiveMap() const = 0;\ndiff --git a/utils/check-style/aspell-ignore/en/aspell-dict.txt b/utils/check-style/aspell-ignore/en/aspell-dict.txt\nindex 6ddca6db538a..238e63e7a742 100644\n--- a/utils/check-style/aspell-ignore/en/aspell-dict.txt\n+++ b/utils/check-style/aspell-ignore/en/aspell-dict.txt\n@@ -991,6 +991,7 @@ addressToLine\n addressToLineWithInlines\n addressToSymbol\n adviced\n+agg\n aggregatefunction\n aggregatingmergetree\n aggregatio\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02813_array_concat_agg.reference b/tests/queries/0_stateless/02813_array_concat_agg.reference\nnew file mode 100644\nindex 000000000000..7144a4999221\n--- /dev/null\n+++ b/tests/queries/0_stateless/02813_array_concat_agg.reference\n@@ -0,0 +1,5 @@\n+[1,2,3,4,5,6]\n+[1,2,3,4,5,6]\n+1\t[1,2,3]\n+2\t[4,5]\n+3\t[6]\ndiff --git a/tests/queries/0_stateless/02813_array_concat_agg.sql b/tests/queries/0_stateless/02813_array_concat_agg.sql\nnew file mode 100644\nindex 000000000000..94fe133db7d7\n--- /dev/null\n+++ b/tests/queries/0_stateless/02813_array_concat_agg.sql\n@@ -0,0 +1,9 @@\n+drop table if exists t;\n+\n+create table t (n UInt32, a Array(Int32)) engine=Memory;\n+insert into t values (1, [1,2,3]), (2, [4,5]), (3, [6]);\n+\n+select array_concat_agg(a) from t;\n+select ArrAy_cOncAt_aGg(a) from t;\n+select n, array_concat_agg(a) from t group by n order by n;\n+drop table t;\n",
  "problem_statement": "Add `array_concat_agg` for compatibility with BigQuery\nIt should be an alias to `groupArrayArray` aggregate function in ClickHouse.\r\n\r\nThe task is slightly more complex than https://github.com/ClickHouse/ClickHouse/issues/52100 because the `groupArrayArray` is a combination of `groupArray` and the `Array` combinator.\n",
  "hints_text": "",
  "created_at": "2023-07-16T09:29:20Z",
  "modified_files": [
    "b/docs/en/sql-reference/aggregate-functions/reference/arrayconcatagg.md",
    "src/AggregateFunctions/AggregateFunctionFactory.cpp",
    "src/AggregateFunctions/AggregateFunctionGroupArray.cpp",
    "src/Common/IFactoryWithAliases.h",
    "utils/check-style/aspell-ignore/en/aspell-dict.txt"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02813_array_concat_agg.reference",
    "b/tests/queries/0_stateless/02813_array_concat_agg.sql"
  ]
}