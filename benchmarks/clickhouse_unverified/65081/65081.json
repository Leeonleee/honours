{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 65081,
  "instance_id": "ClickHouse__ClickHouse-65081",
  "issue_numbers": [
    "64849"
  ],
  "base_commit": "2c0a1ce918fd68c545de0a97b1f5d46f0480de91",
  "patch": "diff --git a/src/Analyzer/Resolve/ScopeAliases.h b/src/Analyzer/Resolve/ScopeAliases.h\nindex baab843988b9..830ae72144b8 100644\n--- a/src/Analyzer/Resolve/ScopeAliases.h\n+++ b/src/Analyzer/Resolve/ScopeAliases.h\n@@ -75,7 +75,12 @@ struct ScopeAliases\n             if (jt == transitive_aliases.end())\n                 return {};\n \n-            key = &(getKey(jt->second, find_option));\n+            const auto & new_key = getKey(jt->second, find_option);\n+            /// Ignore potential cyclic aliases.\n+            if (new_key == *key)\n+                return {};\n+\n+            key = &new_key;\n             it = alias_map.find(*key);\n         }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02896_cyclic_aliases_crash.reference b/tests/queries/0_stateless/02896_cyclic_aliases_crash.reference\nindex caf11f5c15a6..e537236478da 100644\n--- a/tests/queries/0_stateless/02896_cyclic_aliases_crash.reference\n+++ b/tests/queries/0_stateless/02896_cyclic_aliases_crash.reference\n@@ -1,2 +1,3 @@\n 1\t2\t3\n 1\t5\n+300\ndiff --git a/tests/queries/0_stateless/02896_cyclic_aliases_crash.sql b/tests/queries/0_stateless/02896_cyclic_aliases_crash.sql\nindex 5fb628eeb67c..5440872e0524 100644\n--- a/tests/queries/0_stateless/02896_cyclic_aliases_crash.sql\n+++ b/tests/queries/0_stateless/02896_cyclic_aliases_crash.sql\n@@ -30,3 +30,7 @@ WHERE (time_stamp_utc >= toDateTime('2024-04-25 00:00:00')) AND (time_stamp_utc\n GROUP BY time_stamp_utc\n ORDER BY Impressions DESC\n LIMIT 1000;\n+\n+drop table test_table;\n+create table test_table engine MergeTree order by sum as select 100 as sum union all select 200 as sum;\n+select sum as sum from (select sum(sum) as sum from test_table);\n",
  "problem_statement": "Infinite duration of query with new analyzer\nClickHouse version 24.5.1.1763\r\n\r\nHow to reproduce\r\n```\r\ncreate or replace table test_table engine MergeTree order by sum as\r\nselect 100                  as sum\r\nunion all\r\nselect 200                  as sum;\r\n\r\nselect sum               as sum\r\nfrom (select sum(sum)           as sum\r\n      from test_table)\r\n```\r\n\r\nExpected behavior:\r\nOne column `sum` value 300\r\n\r\nError message and/or stacktrace:\r\nThere is no error message, just infinite duration\r\n\r\nAdditional context:\r\nSelect query do not work with `settings allow_experimental_analyzer=1`, but it works with old `settings allow_experimental_analyzer=1`\r\nAlso checked on 24.3.3.102, and got exception (and exception is better than infinite duration of query IMHO)\r\n\n",
  "hints_text": "",
  "created_at": "2024-06-11T09:08:13Z",
  "modified_files": [
    "src/Analyzer/Resolve/ScopeAliases.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02896_cyclic_aliases_crash.reference",
    "tests/queries/0_stateless/02896_cyclic_aliases_crash.sql"
  ]
}