{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 66402,
  "instance_id": "ClickHouse__ClickHouse-66402",
  "issue_numbers": [
    "65969"
  ],
  "base_commit": "a8a04f9e22f156170983cf6dc8e3850f2f1e0a4b",
  "patch": "diff --git a/src/Storages/transformQueryForExternalDatabase.cpp b/src/Storages/transformQueryForExternalDatabase.cpp\nindex fc85bde11d93..7aac138296d2 100644\n--- a/src/Storages/transformQueryForExternalDatabase.cpp\n+++ b/src/Storages/transformQueryForExternalDatabase.cpp\n@@ -419,7 +419,7 @@ String transformQueryForExternalDatabase(\n             throw Exception(ErrorCodes::UNSUPPORTED_METHOD, \"No column names for query '{}' to external table '{}.{}'\",\n                             query_info.query_tree->formatASTForErrorMessage(), database, table);\n \n-        auto clone_query = getASTForExternalDatabaseFromQueryTree(query_info.query_tree);\n+        auto clone_query = getASTForExternalDatabaseFromQueryTree(query_info.query_tree, query_info.table_expression);\n \n         return transformQueryForExternalDatabaseImpl(\n             clone_query,\ndiff --git a/src/Storages/transformQueryForExternalDatabaseAnalyzer.cpp b/src/Storages/transformQueryForExternalDatabaseAnalyzer.cpp\nindex 5e0bfdd5f2a4..dc1749b3196f 100644\n--- a/src/Storages/transformQueryForExternalDatabaseAnalyzer.cpp\n+++ b/src/Storages/transformQueryForExternalDatabaseAnalyzer.cpp\n@@ -3,6 +3,7 @@\n #include <Storages/transformQueryForExternalDatabaseAnalyzer.h>\n \n #include <Parsers/ASTSelectWithUnionQuery.h>\n+#include <Parsers/ASTSelectQuery.h>\n #include <Analyzer/InDepthQueryTreeVisitor.h>\n \n #include <Columns/ColumnConst.h>\n@@ -10,7 +11,7 @@\n #include <Analyzer/QueryNode.h>\n #include <Analyzer/ConstantNode.h>\n #include <Analyzer/ConstantValue.h>\n-\n+#include <Analyzer/JoinNode.h>\n \n #include <DataTypes/DataTypesNumber.h>\n \n@@ -20,6 +21,7 @@ namespace DB\n namespace ErrorCodes\n {\n     extern const int UNSUPPORTED_METHOD;\n+    extern const int LOGICAL_ERROR;\n }\n \n namespace\n@@ -55,7 +57,7 @@ class PrepareForExternalDatabaseVisitor : public InDepthQueryTreeVisitor<Prepare\n \n }\n \n-ASTPtr getASTForExternalDatabaseFromQueryTree(const QueryTreeNodePtr & query_tree)\n+ASTPtr getASTForExternalDatabaseFromQueryTree(const QueryTreeNodePtr & query_tree, const QueryTreeNodePtr & table_expression)\n {\n     auto new_tree = query_tree->clone();\n \n@@ -63,6 +65,21 @@ ASTPtr getASTForExternalDatabaseFromQueryTree(const QueryTreeNodePtr & query_tre\n     visitor.visit(new_tree);\n     const auto * query_node = new_tree->as<QueryNode>();\n \n+    const auto & join_tree = query_node->getJoinTree();\n+    bool allow_where = true;\n+    if (const auto * join_node = join_tree->as<JoinNode>())\n+    {\n+        if (join_node->getStrictness() != JoinStrictness::All)\n+            allow_where = false;\n+\n+        if (join_node->getKind() == JoinKind::Left)\n+            allow_where = join_node->getLeftTableExpression()->isEqual(*table_expression);\n+        else if (join_node->getKind() == JoinKind::Right)\n+            allow_where = join_node->getRightTableExpression()->isEqual(*table_expression);\n+        else\n+            allow_where = (join_node->getKind() == JoinKind::Inner);\n+    }\n+\n     auto query_node_ast = query_node->toAST({ .add_cast_for_constants = false, .fully_qualified_identifiers = false });\n     const IAST * ast = query_node_ast.get();\n \n@@ -76,7 +93,13 @@ ASTPtr getASTForExternalDatabaseFromQueryTree(const QueryTreeNodePtr & query_tre\n     if (union_ast->list_of_selects->children.size() != 1)\n         throw Exception(ErrorCodes::UNSUPPORTED_METHOD, \"QueryNode AST is not a single ASTSelectQuery, got {}\", union_ast->list_of_selects->children.size());\n \n-    return union_ast->list_of_selects->children.at(0);\n+    ASTPtr select_query = union_ast->list_of_selects->children.at(0);\n+    auto * select_query_typed = select_query->as<ASTSelectQuery>();\n+    if (!select_query_typed)\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Expected ASTSelectQuery, got {}\", select_query ? select_query->formatForErrorMessage() : \"nullptr\");\n+    if (!allow_where)\n+        select_query_typed->setExpression(ASTSelectQuery::Expression::WHERE, nullptr);\n+    return select_query;\n }\n \n }\ndiff --git a/src/Storages/transformQueryForExternalDatabaseAnalyzer.h b/src/Storages/transformQueryForExternalDatabaseAnalyzer.h\nindex f8983619d1f9..7d8bf99646b0 100644\n--- a/src/Storages/transformQueryForExternalDatabaseAnalyzer.h\n+++ b/src/Storages/transformQueryForExternalDatabaseAnalyzer.h\n@@ -6,6 +6,6 @@\n namespace DB\n {\n \n-ASTPtr getASTForExternalDatabaseFromQueryTree(const QueryTreeNodePtr & query_tree);\n+ASTPtr getASTForExternalDatabaseFromQueryTree(const QueryTreeNodePtr & query_tree, const QueryTreeNodePtr & table_expression);\n \n }\n",
  "test_patch": "diff --git a/tests/integration/test_storage_postgresql/test.py b/tests/integration/test_storage_postgresql/test.py\nindex d9f3a9917ab7..ffcff36c47e6 100644\n--- a/tests/integration/test_storage_postgresql/test.py\n+++ b/tests/integration/test_storage_postgresql/test.py\n@@ -834,6 +834,60 @@ def test_literal_escaping(started_cluster):\n     cursor.execute(f\"DROP TABLE escaping\")\n \n \n+def test_filter_pushdown(started_cluster):\n+    cursor = started_cluster.postgres_conn.cursor()\n+    cursor.execute(\"CREATE SCHEMA test_filter_pushdown\")\n+    cursor.execute(\n+        \"CREATE TABLE test_filter_pushdown.test_table (id integer, value integer)\"\n+    )\n+    cursor.execute(\n+        \"INSERT INTO test_filter_pushdown.test_table VALUES (1, 10), (1, 110), (2, 0), (3, 33), (4, 0)\"\n+    )\n+\n+    node1.query(\n+        \"\"\"\n+        CREATE TABLE test_filter_pushdown_pg_table (id UInt32, value UInt32)\n+        ENGINE PostgreSQL('postgres1:5432', 'postgres', 'test_table', 'postgres', 'mysecretpassword', 'test_filter_pushdown');\n+    \"\"\"\n+    )\n+\n+    node1.query(\n+        \"\"\"\n+        CREATE TABLE test_filter_pushdown_local_table (id UInt32, value UInt32) ENGINE Memory AS SELECT * FROM test_filter_pushdown_pg_table\n+    \"\"\"\n+    )\n+\n+    node1.query(\n+        \"CREATE TABLE ch_table (id UInt32, pg_id UInt32) ENGINE MergeTree ORDER BY id\"\n+    )\n+    node1.query(\"INSERT INTO ch_table VALUES (1, 1), (2, 2), (3, 1), (4, 2), (5, 999)\")\n+\n+    def compare_results(query, **kwargs):\n+        result1 = node1.query(\n+            query.format(pg_table=\"test_filter_pushdown_pg_table\", **kwargs)\n+        )\n+        result2 = node1.query(\n+            query.format(pg_table=\"test_filter_pushdown_local_table\", **kwargs)\n+        )\n+        assert result1 == result2\n+\n+    for kind in [\"INNER\", \"LEFT\", \"RIGHT\", \"FULL\"]:\n+        for value in [0, 10]:\n+            compare_results(\n+                \"SELECT * FROM ch_table {kind} JOIN {pg_table} as p ON ch_table.pg_id = p.id WHERE value = {value} ORDER BY ALL\",\n+                kind=kind,\n+                value=value,\n+            )\n+\n+            compare_results(\n+                \"SELECT * FROM {pg_table} as p {kind} JOIN ch_table ON ch_table.pg_id = p.id WHERE value = {value} ORDER BY ALL\",\n+                kind=kind,\n+                value=value,\n+            )\n+\n+    cursor.execute(\"DROP SCHEMA test_filter_pushdown CASCADE\")\n+\n+\n if __name__ == \"__main__\":\n     cluster.start()\n     input(\"Cluster created, press any key to destroy...\")\n",
  "problem_statement": "Incorrect optimization when left join postgresql engine with null condition\n**Describe what's wrong**\r\n\r\nIf you do left join a MergeTree Engine table and a PostgreSQL Engine table and add a condition (is null) for the PostgreSQL Engine table to the WHERE condition, the WHERE condition is applied before joining.\r\n\r\n**How to reproduce**\r\n\r\n> ch version: 24.5.1.1763\r\n> pg version: 12.6\r\n\r\npg table\r\n```\r\ncreate table public.pg_table\r\n(\r\n    id int,\r\n    name varchar(10)\r\n);\r\n\r\ninsert into public.pg_table values (1, 'name 1'), (2, 'name 2'), (3, 'name 3');\r\n```\r\n\r\nch tables\r\n```\r\n-- pg_table (PostgreSQL Engine)\r\ncreate table default.pg_table \r\n(\r\n    id Int32,\r\n    name String\r\n)\r\nENGINE = PostgreSQL(PG_NAMED_COLLECTION, table = 'pg_table');\r\n\r\n-- ch_table\r\ncreate table default.ch_table \r\n(\r\n    id Int32,\r\n    pg_id Int32\r\n)\r\nengine = MergeTree\r\norder by id;\r\n\r\ninsert into default.ch_table values (1, 1), (2, 2), (3, 3), (4, 1), (5, 2);\r\n```\r\n\r\nquery\r\n```\r\nselect\r\n    t1.id,\r\n    t1.pg_id,\r\n    t2.id AS id_of_pg_table,\r\n    t2.name AS name_of_pg_table\r\nfrom default.ch_table t1\r\nleft outer join default.pg_table t2\r\non t1.pg_id = t2.id\r\nwhere name_of_pg_table is null;\r\n```\r\n\r\n**Expected behavior**\r\n\r\nreturn nothing.\r\n\r\n**Error message and/or stacktrace**\r\n\r\n![image](https://github.com/ClickHouse/ClickHouse/assets/144005614/b089222b-eef6-441f-adc4-c6954ed0895d)\r\n\r\n\r\n**Additional context**\r\n\r\nhttps://clickhousedb.slack.com/archives/CU478UEQZ/p1719802361432549\r\n\n",
  "hints_text": "@vdimir could you pls help me to understand if this pr https://github.com/ClickHouse/ClickHouse/pull/65835 will cover the given problem too?\n> could you pls help me to understand if this pr https://github.com/ClickHouse/ClickHouse/pull/65835 will cover the given problem too?\r\n\r\nI'm afraid it won't, this looks more like incorrect query is sent to postgress.\r\n\r\n@com-exem-route7 Temporary workaround is to disable analyzer with `SET allow_experimental_analyzer=0`, I'll try to fix the issue asap.\r\n\r\nThanks for reporting.",
  "created_at": "2024-07-11T16:58:02Z",
  "modified_files": [
    "src/Storages/transformQueryForExternalDatabase.cpp",
    "src/Storages/transformQueryForExternalDatabaseAnalyzer.cpp",
    "src/Storages/transformQueryForExternalDatabaseAnalyzer.h"
  ],
  "modified_test_files": [
    "tests/integration/test_storage_postgresql/test.py"
  ]
}