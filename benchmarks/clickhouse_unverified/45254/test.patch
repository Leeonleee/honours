diff --git a/tests/queries/0_stateless/02532_analyzer_aggregation_with_rollup.reference b/tests/queries/0_stateless/02532_analyzer_aggregation_with_rollup.reference
new file mode 100644
index 000000000000..2ce5e9558666
--- /dev/null
+++ b/tests/queries/0_stateless/02532_analyzer_aggregation_with_rollup.reference
@@ -0,0 +1,10 @@
+45	0	0	0	1
+45	0	1	0	1
+45	0	2	0	1
+45	0	3	0	1
+45	0	4	0	1
+45	0	5	0	1
+45	0	6	0	1
+45	0	7	0	1
+45	0	8	0	1
+45	0	9	0	1
diff --git a/tests/queries/0_stateless/02532_analyzer_aggregation_with_rollup.sql b/tests/queries/0_stateless/02532_analyzer_aggregation_with_rollup.sql
new file mode 100644
index 000000000000..09097eb029fb
--- /dev/null
+++ b/tests/queries/0_stateless/02532_analyzer_aggregation_with_rollup.sql
@@ -0,0 +1,20 @@
+SET allow_experimental_analyzer = 1;
+
+SELECT
+    sum(a.number) AS total,
+    c.number AS cn,
+    b.number AS bn,
+    grouping(c.number) + grouping(b.number) AS l,
+    rank() OVER (PARTITION BY grouping(c.number) + grouping(b.number), multiIf(grouping(c.number) = 0, b.number, NULL) ORDER BY sum(a.number) DESC) AS r
+FROM numbers(10) AS a, numbers(10) AS b, numbers(10) AS c
+GROUP BY
+    cn,
+    bn
+    WITH ROLLUP
+ORDER BY
+    total ASC,
+    cn ASC,
+    bn ASC,
+    l ASC,
+    r ASC
+LIMIT 10;
diff --git a/tests/queries/0_stateless/02534_analyzer_grouping_function.reference b/tests/queries/0_stateless/02534_analyzer_grouping_function.reference
new file mode 100644
index 000000000000..fcbf625ef225
--- /dev/null
+++ b/tests/queries/0_stateless/02534_analyzer_grouping_function.reference
@@ -0,0 +1,141 @@
+-- { echoOn }
+
+EXPLAIN QUERY TREE SELECT grouping(id), grouping(value) FROM test_table GROUP BY id, value;
+QUERY id: 0
+  PROJECTION COLUMNS
+    grouping(id) UInt64
+    grouping(value) UInt64
+  PROJECTION
+    LIST id: 1, nodes: 2
+      FUNCTION id: 2, function_name: groupingOrdinary, function_type: ordinary, result_type: UInt64
+        ARGUMENTS
+          LIST id: 3, nodes: 1
+            COLUMN id: 4, column_name: id, result_type: UInt64, source_id: 5
+      FUNCTION id: 6, function_name: groupingOrdinary, function_type: ordinary, result_type: UInt64
+        ARGUMENTS
+          LIST id: 7, nodes: 1
+            COLUMN id: 8, column_name: value, result_type: String, source_id: 5
+  JOIN TREE
+    TABLE id: 5, table_name: default.test_table
+  GROUP BY
+    LIST id: 9, nodes: 2
+      COLUMN id: 4, column_name: id, result_type: UInt64, source_id: 5
+      COLUMN id: 8, column_name: value, result_type: String, source_id: 5
+SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table
+GROUP BY id, value ORDER BY grouping_id, grouping_value;
+0	0	0	Value
+EXPLAIN QUERY TREE SELECT grouping(id), grouping(value) FROM test_table GROUP BY ROLLUP (id, value);
+QUERY id: 0, group_by_type: rollup
+  PROJECTION COLUMNS
+    grouping(id) UInt64
+    grouping(value) UInt64
+  PROJECTION
+    LIST id: 1, nodes: 2
+      FUNCTION id: 2, function_name: groupingForRollup, function_type: ordinary, result_type: UInt64
+        ARGUMENTS
+          LIST id: 3, nodes: 2
+            COLUMN id: 4, column_name: __grouping_set, result_type: UInt64
+            COLUMN id: 5, column_name: id, result_type: UInt64, source_id: 6
+      FUNCTION id: 7, function_name: groupingForRollup, function_type: ordinary, result_type: UInt64
+        ARGUMENTS
+          LIST id: 8, nodes: 2
+            COLUMN id: 9, column_name: __grouping_set, result_type: UInt64
+            COLUMN id: 10, column_name: value, result_type: String, source_id: 6
+  JOIN TREE
+    TABLE id: 6, table_name: default.test_table
+  GROUP BY
+    LIST id: 11, nodes: 2
+      COLUMN id: 5, column_name: id, result_type: UInt64, source_id: 6
+      COLUMN id: 10, column_name: value, result_type: String, source_id: 6
+SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table
+GROUP BY ROLLUP (id, value) ORDER BY grouping_id, grouping_value;
+0	0	0	Value
+0	1	0	
+1	1	0	
+EXPLAIN QUERY TREE SELECT grouping(id), grouping(value) FROM test_table GROUP BY CUBE (id, value);
+QUERY id: 0, group_by_type: cube
+  PROJECTION COLUMNS
+    grouping(id) UInt64
+    grouping(value) UInt64
+  PROJECTION
+    LIST id: 1, nodes: 2
+      FUNCTION id: 2, function_name: groupingForCube, function_type: ordinary, result_type: UInt64
+        ARGUMENTS
+          LIST id: 3, nodes: 2
+            COLUMN id: 4, column_name: __grouping_set, result_type: UInt64
+            COLUMN id: 5, column_name: id, result_type: UInt64, source_id: 6
+      FUNCTION id: 7, function_name: groupingForCube, function_type: ordinary, result_type: UInt64
+        ARGUMENTS
+          LIST id: 8, nodes: 2
+            COLUMN id: 9, column_name: __grouping_set, result_type: UInt64
+            COLUMN id: 10, column_name: value, result_type: String, source_id: 6
+  JOIN TREE
+    TABLE id: 6, table_name: default.test_table
+  GROUP BY
+    LIST id: 11, nodes: 2
+      COLUMN id: 5, column_name: id, result_type: UInt64, source_id: 6
+      COLUMN id: 10, column_name: value, result_type: String, source_id: 6
+SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table
+GROUP BY CUBE (id, value) ORDER BY grouping_id, grouping_value;
+0	0	0	Value
+0	1	0	
+1	0	0	Value
+1	1	0	
+EXPLAIN QUERY TREE SELECT grouping(id), grouping(value) FROM test_table GROUP BY GROUPING SETS (id, value);
+QUERY id: 0, group_by_type: grouping_sets
+  PROJECTION COLUMNS
+    grouping(id) UInt64
+    grouping(value) UInt64
+  PROJECTION
+    LIST id: 1, nodes: 2
+      FUNCTION id: 2, function_name: groupingForGroupingSets, function_type: ordinary, result_type: UInt64
+        ARGUMENTS
+          LIST id: 3, nodes: 2
+            COLUMN id: 4, column_name: __grouping_set, result_type: UInt64
+            COLUMN id: 5, column_name: id, result_type: UInt64, source_id: 6
+      FUNCTION id: 7, function_name: groupingForGroupingSets, function_type: ordinary, result_type: UInt64
+        ARGUMENTS
+          LIST id: 8, nodes: 2
+            COLUMN id: 9, column_name: __grouping_set, result_type: UInt64
+            COLUMN id: 10, column_name: value, result_type: String, source_id: 6
+  JOIN TREE
+    TABLE id: 6, table_name: default.test_table
+  GROUP BY
+    LIST id: 11, nodes: 2
+      LIST id: 12, nodes: 1
+        COLUMN id: 5, column_name: id, result_type: UInt64, source_id: 6
+      LIST id: 13, nodes: 1
+        COLUMN id: 10, column_name: value, result_type: String, source_id: 6
+SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table
+GROUP BY GROUPING SETS (id, value) ORDER BY grouping_id, grouping_value;
+0	1	0	
+1	0	0	Value
+EXPLAIN QUERY TREE SELECT grouping(id), grouping(value) FROM test_table GROUP BY GROUPING SETS ((id), (value));
+QUERY id: 0, group_by_type: grouping_sets
+  PROJECTION COLUMNS
+    grouping(id) UInt64
+    grouping(value) UInt64
+  PROJECTION
+    LIST id: 1, nodes: 2
+      FUNCTION id: 2, function_name: groupingForGroupingSets, function_type: ordinary, result_type: UInt64
+        ARGUMENTS
+          LIST id: 3, nodes: 2
+            COLUMN id: 4, column_name: __grouping_set, result_type: UInt64
+            COLUMN id: 5, column_name: id, result_type: UInt64, source_id: 6
+      FUNCTION id: 7, function_name: groupingForGroupingSets, function_type: ordinary, result_type: UInt64
+        ARGUMENTS
+          LIST id: 8, nodes: 2
+            COLUMN id: 9, column_name: __grouping_set, result_type: UInt64
+            COLUMN id: 10, column_name: value, result_type: String, source_id: 6
+  JOIN TREE
+    TABLE id: 6, table_name: default.test_table
+  GROUP BY
+    LIST id: 11, nodes: 2
+      LIST id: 12, nodes: 1
+        COLUMN id: 5, column_name: id, result_type: UInt64, source_id: 6
+      LIST id: 13, nodes: 1
+        COLUMN id: 10, column_name: value, result_type: String, source_id: 6
+SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table
+GROUP BY GROUPING SETS ((id), (value)) ORDER BY grouping_id, grouping_value;
+0	1	0	
+1	0	0	Value
diff --git a/tests/queries/0_stateless/02534_analyzer_grouping_function.sql b/tests/queries/0_stateless/02534_analyzer_grouping_function.sql
new file mode 100644
index 000000000000..3163e03d5797
--- /dev/null
+++ b/tests/queries/0_stateless/02534_analyzer_grouping_function.sql
@@ -0,0 +1,41 @@
+SET allow_experimental_analyzer = 1;
+
+DROP TABLE IF EXISTS test_table;
+CREATE TABLE test_table
+(
+    id UInt64,
+    value String
+) ENGINE=MergeTree ORDER BY id;
+
+INSERT INTO test_table VALUES (0, 'Value');
+
+-- { echoOn }
+
+EXPLAIN QUERY TREE SELECT grouping(id), grouping(value) FROM test_table GROUP BY id, value;
+
+SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table
+GROUP BY id, value ORDER BY grouping_id, grouping_value;
+
+EXPLAIN QUERY TREE SELECT grouping(id), grouping(value) FROM test_table GROUP BY ROLLUP (id, value);
+
+SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table
+GROUP BY ROLLUP (id, value) ORDER BY grouping_id, grouping_value;
+
+EXPLAIN QUERY TREE SELECT grouping(id), grouping(value) FROM test_table GROUP BY CUBE (id, value);
+
+SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table
+GROUP BY CUBE (id, value) ORDER BY grouping_id, grouping_value;
+
+EXPLAIN QUERY TREE SELECT grouping(id), grouping(value) FROM test_table GROUP BY GROUPING SETS (id, value);
+
+SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table
+GROUP BY GROUPING SETS (id, value) ORDER BY grouping_id, grouping_value;
+
+EXPLAIN QUERY TREE SELECT grouping(id), grouping(value) FROM test_table GROUP BY GROUPING SETS ((id), (value));
+
+SELECT grouping(id) AS grouping_id, grouping(value) AS grouping_value, id, value FROM test_table
+GROUP BY GROUPING SETS ((id), (value)) ORDER BY grouping_id, grouping_value;
+
+-- { echoOff }
+
+DROP TABLE test_table;
