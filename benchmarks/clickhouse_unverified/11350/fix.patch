diff --git a/base/common/LineReader.cpp b/base/common/LineReader.cpp
index 0d06e5ef2252..dd2e09b0393e 100644
--- a/base/common/LineReader.cpp
+++ b/base/common/LineReader.cpp
@@ -67,8 +67,8 @@ LineReader::Suggest::WordsRange LineReader::Suggest::getCompletions(const String
         });
 }
 
-LineReader::LineReader(const String & history_file_path_, char extender_, char delimiter_)
-    : history_file_path(history_file_path_), extender(extender_), delimiter(delimiter_)
+LineReader::LineReader(const String & history_file_path_, bool multiline_, Patterns extenders_, Patterns delimiters_)
+    : history_file_path(history_file_path_), multiline(multiline_), extenders(std::move(extenders_)), delimiters(std::move(delimiters_))
 {
     /// FIXME: check extender != delimiter
 }
@@ -76,38 +76,60 @@ LineReader::LineReader(const String & history_file_path_, char extender_, char d
 String LineReader::readLine(const String & first_prompt, const String & second_prompt)
 {
     String line;
-    bool is_multiline = false;
+    bool need_next_line = false;
 
-    while (auto status = readOneLine(is_multiline ? second_prompt : first_prompt))
+    while (auto status = readOneLine(need_next_line ? second_prompt : first_prompt))
     {
         if (status == RESET_LINE)
         {
             line.clear();
-            is_multiline = false;
+            need_next_line = false;
             continue;
         }
 
         if (input.empty())
         {
-            if (!line.empty() && !delimiter && !hasInputData())
+            if (!line.empty() && !multiline && !hasInputData())
                 break;
             else
                 continue;
         }
 
-        is_multiline = (input.back() == extender) || (delimiter && input.back() != delimiter) || hasInputData();
+#if !defined(ARCADIA_BUILD) /// C++20
+        const char * has_extender = nullptr;
+        for (const auto * extender : extenders)
+        {
+            if (input.ends_with(extender))
+            {
+                has_extender = extender;
+                break;
+            }
+        }
 
-        if (input.back() == extender)
+        const char * has_delimiter = nullptr;
+        for (const auto * delimiter : delimiters)
         {
-            input = input.substr(0, input.size() - 1);
+            if (input.ends_with(delimiter))
+            {
+                has_delimiter = delimiter;
+                break;
+            }
+        }
+
+        need_next_line = has_extender || (multiline && !has_delimiter) || hasInputData();
+
+        if (has_extender)
+        {
+            input.resize(input.size() - strlen(has_extender));
             trim(input);
             if (input.empty())
                 continue;
         }
+#endif
 
         line += (line.empty() ? "" : " ") + input;
 
-        if (!is_multiline)
+        if (!need_next_line)
             break;
     }
 
diff --git a/base/common/LineReader.h b/base/common/LineReader.h
index 3e64bc858ade..f31459078ab6 100644
--- a/base/common/LineReader.h
+++ b/base/common/LineReader.h
@@ -21,7 +21,9 @@ class LineReader
         WordsRange getCompletions(const String & prefix, size_t prefix_length) const;
     };
 
-    LineReader(const String & history_file_path, char extender, char delimiter = 0);  /// if delimiter != 0, then it's multiline mode
+    using Patterns = std::vector<const char *>;
+
+    LineReader(const String & history_file_path, bool multiline, Patterns extenders, Patterns delimiters);
     virtual ~LineReader() {}
 
     /// Reads the whole line until delimiter (in multiline mode) or until the last line without extender.
@@ -51,8 +53,10 @@ class LineReader
     String input;
 
 private:
-    const char extender;
-    const char delimiter;
+    bool multiline;
+
+    Patterns extenders;
+    Patterns delimiters;
 
     String prev_line;
 
diff --git a/base/common/ReadlineLineReader.cpp b/base/common/ReadlineLineReader.cpp
index ee9a37d2168c..d52ac0e97695 100644
--- a/base/common/ReadlineLineReader.cpp
+++ b/base/common/ReadlineLineReader.cpp
@@ -56,8 +56,9 @@ static char * generate(const char * text, int state)
     return nextMatch();
 };
 
-ReadlineLineReader::ReadlineLineReader(const Suggest & suggest_, const String & history_file_path_, char extender_, char delimiter_)
-    : LineReader(history_file_path_, extender_, delimiter_)
+ReadlineLineReader::ReadlineLineReader(
+    const Suggest & suggest_, const String & history_file_path_, bool multiline_, Patterns extenders_, Patterns delimiters_)
+    : LineReader(history_file_path_, multiline_, std::move(extenders_), std::move(delimiters_))
 {
     suggest = &suggest_;
 
diff --git a/base/common/ReadlineLineReader.h b/base/common/ReadlineLineReader.h
index 395ae56c7242..95bd23b46347 100644
--- a/base/common/ReadlineLineReader.h
+++ b/base/common/ReadlineLineReader.h
@@ -8,7 +8,7 @@
 class ReadlineLineReader : public LineReader
 {
 public:
-    ReadlineLineReader(const Suggest & suggest, const String & history_file_path, char extender, char delimiter = 0);
+    ReadlineLineReader(const Suggest & suggest, const String & history_file_path, bool multiline, Patterns extenders_, Patterns delimiters_);
     ~ReadlineLineReader() override;
 
     void enableBracketedPaste() override;
diff --git a/base/common/ReplxxLineReader.cpp b/base/common/ReplxxLineReader.cpp
index 52c42235f1b7..141237d5d945 100644
--- a/base/common/ReplxxLineReader.cpp
+++ b/base/common/ReplxxLineReader.cpp
@@ -16,8 +16,9 @@ void trim(String & s)
 
 }
 
-ReplxxLineReader::ReplxxLineReader(const Suggest & suggest, const String & history_file_path_, char extender_, char delimiter_)
-    : LineReader(history_file_path_, extender_, delimiter_)
+ReplxxLineReader::ReplxxLineReader(
+    const Suggest & suggest, const String & history_file_path_, bool multiline_, Patterns extenders_, Patterns delimiters_)
+    : LineReader(history_file_path_, multiline_, std::move(extenders_), std::move(delimiters_))
 {
     using namespace std::placeholders;
     using Replxx = replxx::Replxx;
diff --git a/base/common/ReplxxLineReader.h b/base/common/ReplxxLineReader.h
index e7821f54ad3c..472198bcfafa 100644
--- a/base/common/ReplxxLineReader.h
+++ b/base/common/ReplxxLineReader.h
@@ -7,7 +7,7 @@
 class ReplxxLineReader : public LineReader
 {
 public:
-    ReplxxLineReader(const Suggest & suggest, const String & history_file_path, char extender, char delimiter = 0);
+    ReplxxLineReader(const Suggest & suggest, const String & history_file_path, bool multiline, Patterns extenders_, Patterns delimiters_);
     ~ReplxxLineReader() override;
 
     void enableBracketedPaste() override;
diff --git a/programs/client/Client.cpp b/programs/client/Client.cpp
index f45daa737fdd..1c2e0925c2a7 100644
--- a/programs/client/Client.cpp
+++ b/programs/client/Client.cpp
@@ -498,12 +498,15 @@ class Client : public Poco::Util::Application
             if (!history_file.empty() && !Poco::File(history_file).exists())
                 Poco::File(history_file).createFile();
 
+            LineReader::Patterns query_extenders = {"\\"};
+            LineReader::Patterns query_delimiters = {";", "\\G"};
+
 #if USE_REPLXX
-            ReplxxLineReader lr(Suggest::instance(), history_file, '\\', config().has("multiline") ? ';' : 0);
+            ReplxxLineReader lr(Suggest::instance(), history_file, config().has("multiline"), query_extenders, query_delimiters);
 #elif defined(USE_READLINE) && USE_READLINE
-            ReadlineLineReader lr(Suggest::instance(), history_file, '\\', config().has("multiline") ? ';' : 0);
+            ReadlineLineReader lr(Suggest::instance(), history_file, config().has("multiline"), query_extenders, query_delimiters);
 #else
-            LineReader lr(history_file, '\\', config().has("multiline") ? ';' : 0);
+            LineReader lr(history_file, config().has("multiline"), query_extenders, query_delimiters);
 #endif
 
             /// Enable bracketed-paste-mode only when multiquery is enabled and multiline is
diff --git a/utils/zookeeper-cli/zookeeper-cli.cpp b/utils/zookeeper-cli/zookeeper-cli.cpp
index 6fd7b39ab687..17a8c9f0da8c 100644
--- a/utils/zookeeper-cli/zookeeper-cli.cpp
+++ b/utils/zookeeper-cli/zookeeper-cli.cpp
@@ -70,7 +70,7 @@ int main(int argc, char ** argv)
         Poco::Logger::root().setLevel("trace");
 
         zkutil::ZooKeeper zk(argv[1]);
-        LineReader lr({}, '\\');
+        LineReader lr({}, false, {"\\"}, {});
 
         do
         {
