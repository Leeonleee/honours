{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 66394,
  "instance_id": "ClickHouse__ClickHouse-66394",
  "issue_numbers": [
    "42005"
  ],
  "base_commit": "26ace74be36c912aa61d812a583545746c03a407",
  "patch": "diff --git a/ci/jobs/scripts/workflow_hooks/feature_docs.py b/ci/jobs/scripts/workflow_hooks/feature_docs.py\nindex b4bd474f44b4..555ec599b091 100644\n--- a/ci/jobs/scripts/workflow_hooks/feature_docs.py\n+++ b/ci/jobs/scripts/workflow_hooks/feature_docs.py\n@@ -5,7 +5,7 @@\n from ci.jobs.scripts.workflow_hooks.pr_description import Labels\n \n files_for_which_docs_autogenerated = [\n-    \"src/storages/MergeTree/MergeTreeSettings.cpp\",\n+    \"src/Storages/MergeTree/MergeTreeSettings.cpp\",\n     \"src/Core/Settings.cpp\",\n ]\n \ndiff --git a/src/Core/SettingsChangesHistory.cpp b/src/Core/SettingsChangesHistory.cpp\nindex 69ffe3f19c3a..3137443a89cc 100644\n--- a/src/Core/SettingsChangesHistory.cpp\n+++ b/src/Core/SettingsChangesHistory.cpp\n@@ -709,6 +709,7 @@ const VersionToSettingsChangesMap & getMergeTreeSettingsChangesHistory()\n     {\n         addSettingsChanges(merge_tree_settings_changes_history, \"25.5\",\n         {\n+            {\"default_compression_codec\", \"\", \"\", \"New setting\"},\n         });\n         addSettingsChanges(merge_tree_settings_changes_history, \"25.4\",\n         {\ndiff --git a/src/Storages/MergeTree/IMergeTreeDataPartWriter.cpp b/src/Storages/MergeTree/IMergeTreeDataPartWriter.cpp\nindex abd026c9487b..078733a2ce5b 100644\n--- a/src/Storages/MergeTree/IMergeTreeDataPartWriter.cpp\n+++ b/src/Storages/MergeTree/IMergeTreeDataPartWriter.cpp\n@@ -1,9 +1,10 @@\n-#include <Storages/MergeTree/IMergeTreeDataPartWriter.h>\n-\n #include <Columns/ColumnSparse.h>\n-#include <Common/MemoryTrackerBlockerInThread.h>\n+#include <Compression/CompressionFactory.h>\n+#include <Storages/MergeTree/IMergeTreeDataPartWriter.h>\n #include <Storages/MergeTree/MergeTreeIndexGranularity.h>\n+#include <Storages/MergeTree/MergeTreeSettings.h>\n #include <Storages/StorageInMemoryMetadata.h>\n+#include <Common/MemoryTrackerBlockerInThread.h>\n \n namespace DB\n {\n@@ -14,6 +15,11 @@ namespace ErrorCodes\n     extern const int NO_SUCH_COLUMN_IN_TABLE;\n }\n \n+namespace MergeTreeSetting\n+{\n+extern const MergeTreeSettingsString default_compression_codec;\n+}\n+\n Block getIndexBlockAndPermute(const Block & block, const Names & names, const IColumnPermutation * permutation)\n {\n     Block result;\n@@ -116,19 +122,21 @@ SerializationPtr IMergeTreeDataPartWriter::getSerialization(const String & colum\n \n ASTPtr IMergeTreeDataPartWriter::getCodecDescOrDefault(const String & column_name, CompressionCodecPtr default_codec) const\n {\n-    auto get_codec_or_default = [&](const auto & column_desc)\n-    {\n-        return column_desc.codec ? column_desc.codec : default_codec->getFullCodecDesc();\n-    };\n+    ASTPtr default_codec_desc = default_codec->getFullCodecDesc();\n+\n+    auto default_compression_codec_mergetree_settings = (*storage_settings)[MergeTreeSetting::default_compression_codec].value;\n+    // Prioritize the codec from the settings over `default_codec`\n+    if (!default_compression_codec_mergetree_settings.empty())\n+        default_codec_desc = CompressionCodecFactory::instance().get(default_compression_codec_mergetree_settings)->getFullCodecDesc();\n \n     const auto & columns = metadata_snapshot->getColumns();\n     if (const auto * column_desc = columns.tryGet(column_name))\n-        return get_codec_or_default(*column_desc);\n+        return column_desc->codec ? column_desc->codec : default_codec_desc;\n \n     if (const auto * virtual_desc = virtual_columns->tryGetDescription(column_name))\n-        return get_codec_or_default(*virtual_desc);\n+        return virtual_desc->codec ? virtual_desc->codec : default_codec_desc;\n \n-    return default_codec->getFullCodecDesc();\n+    throw Exception(ErrorCodes::LOGICAL_ERROR, \"Unexpected column name: {}\", column_name);\n }\n \n \ndiff --git a/src/Storages/MergeTree/MergeTreeSettings.cpp b/src/Storages/MergeTree/MergeTreeSettings.cpp\nindex 721a89666be4..bd57d64064ca 100644\n--- a/src/Storages/MergeTree/MergeTreeSettings.cpp\n+++ b/src/Storages/MergeTree/MergeTreeSettings.cpp\n@@ -1775,6 +1775,14 @@ namespace ErrorCodes\n     Calculate columns and secondary indices sizes lazily on first request instead\n     of on table initialization.\n     )\", 0) \\\n+    DECLARE(String, default_compression_codec, \"\", R\"(\n+    Specifies the default compression codec to be used if none is defined for a particular column in the table declaration.\n+    Compression codec selecting order for a column:\n+        1. Compression codec defined for the column in the table declaration\n+        2. Compression codec defined in `default_compression_codec` (this setting)\n+        3. Default compression codec defined in `compression` settings\n+    Default value: an empty string (not defined).\n+    )\", 0) \\\n \n #define MAKE_OBSOLETE_MERGE_TREE_SETTING(M, TYPE, NAME, DEFAULT) \\\n     M(TYPE, NAME, DEFAULT, \"Obsolete setting, does nothing.\", SettingsTierType::OBSOLETE)\ndiff --git a/src/Storages/StorageLog.cpp b/src/Storages/StorageLog.cpp\nindex 945586d42683..9a6f543b5b2f 100644\n--- a/src/Storages/StorageLog.cpp\n+++ b/src/Storages/StorageLog.cpp\n@@ -11,14 +11,15 @@\n \n #include <Parsers/ASTCheckQuery.h>\n \n+#include <Compression/CompressedReadBuffer.h>\n+#include <Compression/CompressedWriteBuffer.h>\n+#include <Compression/CompressionFactory.h>\n #include <IO/LimitReadBuffer.h>\n #include <IO/ReadBufferFromFileBase.h>\n #include <IO/ReadHelpers.h>\n #include <IO/WriteBufferFromFileBase.h>\n #include <IO/WriteHelpers.h>\n #include <IO/copyData.h>\n-#include <Compression/CompressedReadBuffer.h>\n-#include <Compression/CompressedWriteBuffer.h>\n \n #include <DataTypes/NestedUtils.h>\n \n@@ -402,6 +403,9 @@ class LogSink final : public SinkToStorage\n \n     ISerialization::OutputStreamGetter createStreamGetter(const NameAndTypePair & name_and_type);\n \n+    CompressionCodecPtr getCodecOrDefault(const String & column_name, CompressionCodecPtr default_codec) const;\n+    CompressionCodecPtr getCodecOrDefault(const String & column_name) const;\n+\n     void writeData(const NameAndTypePair & name_and_type, const IColumn & column);\n };\n \n@@ -478,6 +482,32 @@ ISerialization::OutputStreamGetter LogSink::createStreamGetter(const NameAndType\n }\n \n \n+CompressionCodecPtr LogSink::getCodecOrDefault(const String & column_name, CompressionCodecPtr default_codec) const\n+{\n+    auto get_codec_or_default = [&default_codec](const auto & column_desc)\n+    {\n+        return column_desc.codec\n+            ? CompressionCodecFactory::instance().get(column_desc.codec, column_desc.type, default_codec)\n+            : default_codec;\n+    };\n+\n+    const auto & columns = metadata_snapshot->getColumns();\n+    if (const auto * column_desc = columns.tryGet(column_name))\n+        return get_codec_or_default(*column_desc);\n+\n+    const auto & virtual_columns = storage.getVirtualsPtr();\n+    if (const auto * virtual_desc = virtual_columns->tryGetDescription(column_name))\n+        return get_codec_or_default(*virtual_desc);\n+\n+    throw Exception(ErrorCodes::LOGICAL_ERROR, \"Unexpected column name: {}\", column_name);\n+}\n+\n+CompressionCodecPtr LogSink::getCodecOrDefault(const String & column_name) const\n+{\n+    return getCodecOrDefault(column_name, CompressionCodecFactory::instance().getDefaultCodec());\n+}\n+\n+\n void LogSink::writeData(const NameAndTypePair & name_and_type, const IColumn & column)\n {\n     ISerialization::SerializeBinaryBulkSettings settings;\n@@ -495,7 +525,7 @@ void LogSink::writeData(const NameAndTypePair & name_and_type, const IColumn & c\n                 throw Exception(ErrorCodes::LOGICAL_ERROR, \"No information about file {} in StorageLog\", data_file_name);\n \n             const auto & data_file = *data_file_it->second;\n-            auto compression = storage_snapshot->getCodecOrDefault(name_and_type.name);\n+            auto compression = getCodecOrDefault(name_and_type.name);\n \n             it = streams.try_emplace(data_file.name, storage.disk, data_file.path,\n                                      storage.file_checker.getFileSize(data_file.path),\ndiff --git a/src/Storages/StorageSnapshot.cpp b/src/Storages/StorageSnapshot.cpp\nindex 86ba233d3f5f..31814bb44960 100644\n--- a/src/Storages/StorageSnapshot.cpp\n+++ b/src/Storages/StorageSnapshot.cpp\n@@ -145,47 +145,6 @@ NameAndTypePair StorageSnapshot::getColumn(const GetColumnsOptions & options, co\n     return *column;\n }\n \n-CompressionCodecPtr StorageSnapshot::getCodecOrDefault(const String & column_name, CompressionCodecPtr default_codec) const\n-{\n-    auto get_codec_or_default = [&](const auto & column_desc)\n-    {\n-        return column_desc.codec\n-            ? CompressionCodecFactory::instance().get(column_desc.codec, column_desc.type, default_codec)\n-            : default_codec;\n-    };\n-\n-    const auto & columns = metadata->getColumns();\n-    if (const auto * column_desc = columns.tryGet(column_name))\n-        return get_codec_or_default(*column_desc);\n-\n-    if (const auto * virtual_desc = virtual_columns->tryGetDescription(column_name))\n-        return get_codec_or_default(*virtual_desc);\n-\n-    return default_codec;\n-}\n-\n-CompressionCodecPtr StorageSnapshot::getCodecOrDefault(const String & column_name) const\n-{\n-    return getCodecOrDefault(column_name, CompressionCodecFactory::instance().getDefaultCodec());\n-}\n-\n-ASTPtr StorageSnapshot::getCodecDescOrDefault(const String & column_name, CompressionCodecPtr default_codec) const\n-{\n-    auto get_codec_or_default = [&](const auto & column_desc)\n-    {\n-        return column_desc.codec ? column_desc.codec : default_codec->getFullCodecDesc();\n-    };\n-\n-    const auto & columns = metadata->getColumns();\n-    if (const auto * column_desc = columns.tryGet(column_name))\n-        return get_codec_or_default(*column_desc);\n-\n-    if (const auto * virtual_desc = virtual_columns->tryGetDescription(column_name))\n-        return get_codec_or_default(*virtual_desc);\n-\n-    return default_codec->getFullCodecDesc();\n-}\n-\n Block StorageSnapshot::getSampleBlockForColumns(const Names & column_names) const\n {\n     Block res;\ndiff --git a/src/Storages/StorageSnapshot.h b/src/Storages/StorageSnapshot.h\nindex aa013b25ec58..6610ebfd4de8 100644\n--- a/src/Storages/StorageSnapshot.h\n+++ b/src/Storages/StorageSnapshot.h\n@@ -67,10 +67,6 @@ struct StorageSnapshot\n     std::optional<NameAndTypePair> tryGetColumn(const GetColumnsOptions & options, const String & column_name) const;\n     NameAndTypePair getColumn(const GetColumnsOptions & options, const String & column_name) const;\n \n-    CompressionCodecPtr getCodecOrDefault(const String & column_name, CompressionCodecPtr default_codec) const;\n-    CompressionCodecPtr getCodecOrDefault(const String & column_name) const;\n-    ASTPtr getCodecDescOrDefault(const String & column_name, CompressionCodecPtr default_codec) const;\n-\n     /// Block with ordinary + materialized + aliases + virtuals + subcolumns.\n     Block getSampleBlockForColumns(const Names & column_names) const;\n \n",
  "test_patch": "diff --git a/tests/integration/test_default_compression_in_mergetree_settings/__init__.py b/tests/integration/test_default_compression_in_mergetree_settings/__init__.py\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/integration/test_default_compression_in_mergetree_settings/configs/default_compression.xml b/tests/integration/test_default_compression_in_mergetree_settings/configs/default_compression.xml\nnew file mode 100644\nindex 000000000000..2c63389aeb29\n--- /dev/null\n+++ b/tests/integration/test_default_compression_in_mergetree_settings/configs/default_compression.xml\n@@ -0,0 +1,20 @@\n+<clickhouse>\n+    <compression>\n+        <case>\n+            <!-- Conditions. All must be satisfied simultaneously. Some conditions may not be specified. -->\n+            <min_part_size>1024</min_part_size>         <!-- The minimum size of a part in bytes. -->\n+            <min_part_size_ratio>0</min_part_size_ratio>    <!-- The minimum size of the part relative to all the data in the table. -->\n+            <!-- Which compression method to choose. -->\n+            <method>lz4hc</method>\n+            <level>5</level>\n+        </case>\n+        <case>\n+            <!-- Conditions. All must be satisfied simultaneously. Some conditions may not be specified. -->\n+            <min_part_size>11024</min_part_size>         <!-- The minimum size of a part in bytes. -->\n+            <min_part_size_ratio>0</min_part_size_ratio>    <!-- The minimum size of the part relative to all the data in the table. -->\n+            <!-- Which compression method to choose. -->\n+            <method>lz4</method>\n+        </case>\n+\n+    </compression>\n+</clickhouse>\ndiff --git a/tests/integration/test_default_compression_in_mergetree_settings/configs/encryption_codec.xml b/tests/integration/test_default_compression_in_mergetree_settings/configs/encryption_codec.xml\nnew file mode 100644\nindex 000000000000..eb4f8abaa77e\n--- /dev/null\n+++ b/tests/integration/test_default_compression_in_mergetree_settings/configs/encryption_codec.xml\n@@ -0,0 +1,7 @@\n+<clickhouse>\n+    <encryption_codecs>\n+        <aes_128_gcm_siv>\n+            <key>0000000000000000</key>\n+        </aes_128_gcm_siv>\n+    </encryption_codecs>\n+</clickhouse>\ndiff --git a/tests/integration/test_default_compression_in_mergetree_settings/test.py b/tests/integration/test_default_compression_in_mergetree_settings/test.py\nnew file mode 100644\nindex 000000000000..39540843a4b1\n--- /dev/null\n+++ b/tests/integration/test_default_compression_in_mergetree_settings/test.py\n@@ -0,0 +1,130 @@\n+import random\n+import string\n+\n+import pytest\n+from helpers.cluster import ClickHouseCluster\n+\n+cluster = ClickHouseCluster(__file__)\n+\n+node = cluster.add_instance(\n+    \"node\",\n+    with_zookeeper=True,\n+    main_configs=[\"configs/encryption_codec.xml\", \"configs/default_compression.xml\"],\n+)\n+\n+\n+@pytest.fixture(scope=\"module\")\n+def start_cluster():\n+    try:\n+        cluster.start()\n+\n+        yield cluster\n+    finally:\n+        cluster.shutdown()\n+\n+\n+def get_compression_codec_byte(node, table_name, part_name, filename):\n+    data_path = node.query(\n+        f\"SELECT arrayElement(data_paths, 1) FROM system.tables WHERE database='default' AND name='{table_name}'\"\n+    ).strip()\n+    cmd = (\n+        \"tail -c +17 {}/{}/{}.bin | od -x -N 1 | head -n 1 | awk '{{print $2}}'\".format(\n+            data_path, part_name, filename\n+        )\n+    )\n+    return node.exec_in_container([\"bash\", \"-c\", cmd]).strip()\n+\n+\n+CODECS_MAPPING = {\n+    \"NONE\": \"0002\",\n+    \"LZ4\": \"0082\",\n+    \"LZ4HC\": \"0082\",  # not an error, same byte\n+    \"ZSTD\": \"0090\",\n+    \"Multiple\": \"0091\",\n+    \"Delta\": \"0092\",\n+    \"T64\": \"0093\",\n+    \"AES_128_GCM_SIV\": \"0096\",\n+}\n+\n+\n+def test_default_compression_codec_in_mergetree_settings(start_cluster):\n+    node.query(\"DROP TABLE IF EXISTS compression_table SYNC\")\n+    node.query(\n+        \"\"\"\n+    CREATE TABLE compression_table (\n+        key UInt64,\n+        column_ok Nullable(UInt64) CODEC(Delta, LZ4),\n+        column_array Array(Array(UInt64)) CODEC(T64, LZ4),\n+        column_default LowCardinality(Int64)\n+    ) ENGINE = ReplicatedMergeTree('/t', '0') ORDER BY tuple() PARTITION BY key\n+    SETTINGS min_rows_for_wide_part = 0, min_bytes_for_wide_part = 0, replace_long_file_name_to_hash = 0, default_compression_codec = 'ZSTD';\n+    \"\"\",\n+        settings={\n+            \"allow_suspicious_codecs\": \"1\",\n+            \"allow_suspicious_low_cardinality_types\": \"1\",\n+        },\n+    )\n+\n+    node.query(\"INSERT INTO compression_table VALUES (1, 1, [[77]], 32)\")\n+\n+    assert (\n+        get_compression_codec_byte(node, \"compression_table\", \"1_0_0_0\", \"column_ok\")\n+        == CODECS_MAPPING[\"Multiple\"]\n+    )\n+    assert (\n+        get_compression_codec_byte(\n+            node, \"compression_table\", \"1_0_0_0\", \"column_ok.null\"\n+        )\n+        == CODECS_MAPPING[\"LZ4\"]\n+    )\n+\n+    assert (\n+        get_compression_codec_byte(node, \"compression_table\", \"1_0_0_0\", \"column_array\")\n+        == CODECS_MAPPING[\"Multiple\"]\n+    )\n+    assert (\n+        get_compression_codec_byte(\n+            node, \"compression_table\", \"1_0_0_0\", \"column_array.size0\"\n+        )\n+        == CODECS_MAPPING[\"LZ4\"]\n+    )\n+    assert (\n+        get_compression_codec_byte(\n+            node, \"compression_table\", \"1_0_0_0\", \"column_array.size1\"\n+        )\n+        == CODECS_MAPPING[\"LZ4\"]\n+    )\n+\n+    assert (\n+        get_compression_codec_byte(\n+            node, \"compression_table\", \"1_0_0_0\", \"column_default.dict\"\n+        )\n+        == CODECS_MAPPING[\"ZSTD\"]\n+    )\n+    assert (\n+        get_compression_codec_byte(\n+            node, \"compression_table\", \"1_0_0_0\", \"column_default\"\n+        )\n+        == CODECS_MAPPING[\"ZSTD\"]\n+    )\n+\n+    assert (\n+        get_compression_codec_byte(node, \"compression_table\", \"1_0_0_0\", \"key\")\n+        == CODECS_MAPPING[\"ZSTD\"]\n+    )\n+\n+    # Modify the default compression codec and check if newly added records use it\n+    node.query(\n+        \"ALTER TABLE compression_table MODIFY SETTING default_compression_codec = 'AES_128_GCM_SIV'\"\n+    )\n+    node.query(\"INSERT INTO compression_table VALUES (2, 1, [[77]], 32)\")\n+\n+    assert (\n+        get_compression_codec_byte(node, \"compression_table\", \"1_0_0_0\", \"key\")\n+        == CODECS_MAPPING[\"ZSTD\"]\n+    )\n+\n+    assert (\n+        get_compression_codec_byte(node, \"compression_table\", \"2_0_0_0\", \"key\")\n+        == CODECS_MAPPING[\"AES_128_GCM_SIV\"]\n+    )\n",
  "problem_statement": "Allow to specify default compression codec in MergeTree SETTINGS.\n**Use case**\r\n\r\n```\r\nCREATE TABLE ... ENGINE = MergeTree ... SETTINGS default_compression_codec = '...'\r\n```\r\n\r\nThe order of the settings (from least to most priority) should be the following:\r\n- global `compression` specification in server config;\r\n- `default_compression_codec` in MergeTree settings;\r\n- `TTL RECOMPRESS`;\r\n- individual column codecs;\r\n\r\nIt will be only practical for general-purpose codecs like `ZSTD(6)`.\n",
  "hints_text": "hello, May I have a stab at this :) \n@kgpjay This will be wonderful!\nHey @alexey-milovidov , I've been looking through the codebase, and I'm having some trouble understanding things. Would greatly appreciate a heads-up, still new to open source. :)\n@nikitamikhaylov This task is available.\nWe need this.",
  "created_at": "2024-07-11T12:39:15Z",
  "modified_files": [
    "ci/jobs/scripts/workflow_hooks/feature_docs.py",
    "src/Core/SettingsChangesHistory.cpp",
    "src/Storages/MergeTree/IMergeTreeDataPartWriter.cpp",
    "src/Storages/MergeTree/MergeTreeSettings.cpp",
    "src/Storages/StorageLog.cpp",
    "src/Storages/StorageSnapshot.cpp",
    "src/Storages/StorageSnapshot.h"
  ],
  "modified_test_files": [
    "b/tests/integration/test_default_compression_in_mergetree_settings/configs/default_compression.xml",
    "b/tests/integration/test_default_compression_in_mergetree_settings/configs/encryption_codec.xml",
    "b/tests/integration/test_default_compression_in_mergetree_settings/test.py"
  ]
}