diff --git a/src/Dictionaries/HTTPDictionarySource.cpp b/src/Dictionaries/HTTPDictionarySource.cpp
index cf8b60f3681e..17592a8d9da9 100644
--- a/src/Dictionaries/HTTPDictionarySource.cpp
+++ b/src/Dictionaries/HTTPDictionarySource.cpp
@@ -8,6 +8,7 @@
 #include <IO/WriteHelpers.h>
 #include <Processors/Formats/IInputFormat.h>
 #include <Interpreters/Context.h>
+#include <Storages/ExternalDataSourceConfiguration.h>
 #include <Poco/Net/HTTPRequest.h>
 #include <Common/logger_useful.h>
 #include "DictionarySourceFactory.h"
@@ -228,45 +229,80 @@ void registerDictionarySourceHTTP(DictionarySourceFactory & factory)
         if (dict_struct.has_expressions)
             throw Exception(ErrorCodes::LOGICAL_ERROR, "Dictionary source of type `http` does not support attribute expressions");
 
-        auto context = copyContextAndApplySettingsFromDictionaryConfig(global_context, config, config_prefix);
-
-        const auto & settings_config_prefix = config_prefix + ".http";
-        const auto & credentials_prefix = settings_config_prefix + ".credentials";
-
+        auto settings_config_prefix = config_prefix + ".http";
         Poco::Net::HTTPBasicCredentials credentials;
-
-        if (config.has(credentials_prefix))
+        ReadWriteBufferFromHTTP::HTTPHeaderEntries header_entries;
+        String url;
+        String endpoint;
+        String format;
+
+        auto named_collection = created_from_ddl
+                            ? getURLBasedDataSourceConfiguration(config, settings_config_prefix, global_context)
+                            : std::nullopt;
+        if (named_collection)
         {
-            credentials.setUsername(config.getString(credentials_prefix + ".user", ""));
-            credentials.setPassword(config.getString(credentials_prefix + ".password", ""));
-        }
+            url = named_collection->configuration.url;
+            endpoint = named_collection->configuration.endpoint;
+            format = named_collection->configuration.format;
 
-        const auto & headers_prefix = settings_config_prefix + ".headers";
-        ReadWriteBufferFromHTTP::HTTPHeaderEntries header_entries;
+            credentials.setUsername(named_collection->configuration.user);
+            credentials.setPassword(named_collection->configuration.password);
 
-        if (config.has(headers_prefix))
+            header_entries.reserve(named_collection->configuration.headers.size());
+            for (const auto & header : named_collection->configuration.headers)
+                header_entries.emplace_back(std::make_tuple(header.first, header.second.get<String>()));
+        }
+        else
         {
-            Poco::Util::AbstractConfiguration::Keys config_keys;
-            config.keys(headers_prefix, config_keys);
+            const auto & credentials_prefix = settings_config_prefix + ".credentials";
 
-            header_entries.reserve(config_keys.size());
-            for (const auto & key : config_keys)
+            if (config.has(credentials_prefix))
             {
-                const auto header_key = config.getString(headers_prefix + "." + key + ".name", "");
-                const auto header_value = config.getString(headers_prefix + "." + key + ".value", "");
-                header_entries.emplace_back(std::make_tuple(header_key, header_value));
+                credentials.setUsername(config.getString(credentials_prefix + ".user", ""));
+                credentials.setPassword(config.getString(credentials_prefix + ".password", ""));
             }
+
+            const auto & headers_prefix = settings_config_prefix + ".headers";
+
+
+            if (config.has(headers_prefix))
+            {
+                Poco::Util::AbstractConfiguration::Keys config_keys;
+                config.keys(headers_prefix, config_keys);
+
+                header_entries.reserve(config_keys.size());
+                for (const auto & key : config_keys)
+                {
+                    const auto header_key = config.getString(headers_prefix + "." + key + ".name", "");
+                    const auto header_value = config.getString(headers_prefix + "." + key + ".value", "");
+                    header_entries.emplace_back(std::make_tuple(header_key, header_value));
+                }
+            }
+
+            url = config.getString(settings_config_prefix + ".url", "");
+            endpoint = config.getString(settings_config_prefix + ".endpoint", "");
+            format =config.getString(settings_config_prefix + ".format", "");
         }
 
+        if (url.ends_with('/'))
+        {
+            if (endpoint.starts_with('/'))
+                url.pop_back();
+        }
+        else if (!endpoint.empty() && !endpoint.starts_with('/'))
+            url.push_back('/');
+
         auto configuration = HTTPDictionarySource::Configuration
         {
-            .url = config.getString(settings_config_prefix + ".url", ""),
-            .format =config.getString(settings_config_prefix + ".format", ""),
+            .url = url + endpoint,
+            .format = format,
             .update_field = config.getString(settings_config_prefix + ".update_field", ""),
             .update_lag = config.getUInt64(settings_config_prefix + ".update_lag", 1),
             .header_entries = std::move(header_entries) //-V1030
         };
 
+        auto context = copyContextAndApplySettingsFromDictionaryConfig(global_context, config, config_prefix);
+
         return std::make_unique<HTTPDictionarySource>(dict_struct, configuration, credentials, sample_block, context, created_from_ddl);
     };
     factory.registerSource("http", create_table_source);
diff --git a/src/Storages/ExternalDataSourceConfiguration.cpp b/src/Storages/ExternalDataSourceConfiguration.cpp
index abd20e6e5fdb..f916ac8c2af0 100644
--- a/src/Storages/ExternalDataSourceConfiguration.cpp
+++ b/src/Storages/ExternalDataSourceConfiguration.cpp
@@ -248,6 +248,65 @@ std::optional<ExternalDataSourceInfo> getExternalDataSourceConfiguration(
     return std::nullopt;
 }
 
+std::optional<URLBasedDataSourceConfig> getURLBasedDataSourceConfiguration(
+    const Poco::Util::AbstractConfiguration & dict_config, const String & dict_config_prefix, ContextPtr context)
+{
+    URLBasedDataSourceConfiguration configuration;
+    auto collection_name = dict_config.getString(dict_config_prefix + ".name", "");
+    if (!collection_name.empty())
+    {
+        const auto & config = context->getConfigRef();
+        const auto & collection_prefix = fmt::format("named_collections.{}", collection_name);
+
+        if (!config.has(collection_prefix))
+            throw Exception(ErrorCodes::BAD_ARGUMENTS, "There is no collection named `{}` in config", collection_name);
+
+        configuration.url =
+            dict_config.getString(dict_config_prefix + ".url", config.getString(collection_prefix + ".url", ""));
+        configuration.endpoint =
+            dict_config.getString(dict_config_prefix + ".endpoint", config.getString(collection_prefix + ".endpoint", ""));
+        configuration.format =
+            dict_config.getString(dict_config_prefix + ".format", config.getString(collection_prefix + ".format", ""));
+        configuration.compression_method =
+            dict_config.getString(dict_config_prefix + ".compression", config.getString(collection_prefix + ".compression_method", ""));
+        configuration.structure =
+            dict_config.getString(dict_config_prefix + ".structure", config.getString(collection_prefix + ".structure", ""));
+        configuration.user =
+            dict_config.getString(dict_config_prefix + ".credentials.user", config.getString(collection_prefix + ".credentials.user", ""));
+        configuration.password =
+            dict_config.getString(dict_config_prefix + ".credentials.password", config.getString(collection_prefix + ".credentials.password", ""));
+
+        String headers_prefix;
+        const Poco::Util::AbstractConfiguration *headers_config = nullptr;
+        if (dict_config.has(dict_config_prefix + ".headers"))
+        {
+            headers_prefix = dict_config_prefix + ".headers";
+            headers_config = &dict_config;
+        }
+        else
+        {
+            headers_prefix = collection_prefix + ".headers";
+            headers_config = &config;
+        }
+
+        if (headers_config)
+        {
+            Poco::Util::AbstractConfiguration::Keys header_keys;
+            headers_config->keys(headers_prefix, header_keys);
+            headers_prefix += ".";
+            for (const auto & header : header_keys)
+            {
+                const auto header_prefix = headers_prefix + header;
+                configuration.headers.emplace_back(
+                    std::make_pair(headers_config->getString(header_prefix + ".name"), headers_config->getString(header_prefix + ".value")));
+            }
+        }
+
+        return URLBasedDataSourceConfig{ .configuration = configuration };
+    }
+
+    return std::nullopt;
+}
 
 ExternalDataSourcesByPriority getExternalDataSourceConfigurationByPriority(
     const Poco::Util::AbstractConfiguration & dict_config, const String & dict_config_prefix, ContextPtr context, HasConfigKeyFunc has_config_key)
diff --git a/src/Storages/ExternalDataSourceConfiguration.h b/src/Storages/ExternalDataSourceConfiguration.h
index dfac101e22d1..4ed46e1b26c0 100644
--- a/src/Storages/ExternalDataSourceConfiguration.h
+++ b/src/Storages/ExternalDataSourceConfiguration.h
@@ -99,10 +99,14 @@ getExternalDataSourceConfigurationByPriority(const Poco::Util::AbstractConfigura
 struct URLBasedDataSourceConfiguration
 {
     String url;
+    String endpoint;
     String format = "auto";
     String compression_method = "auto";
     String structure = "auto";
 
+    String user;
+    String password;
+
     std::vector<std::pair<String, Field>> headers;
     String http_method;
 
@@ -129,6 +133,9 @@ struct URLBasedDataSourceConfig
 
 std::optional<URLBasedDataSourceConfig> getURLBasedDataSourceConfiguration(const ASTs & args, ContextPtr context);
 
+std::optional<URLBasedDataSourceConfig> getURLBasedDataSourceConfiguration(
+    const Poco::Util::AbstractConfiguration & dict_config, const String & dict_config_prefix, ContextPtr context);
+
 template<typename T>
 bool getExternalDataSourceConfiguration(const ASTs & args, BaseSettings<T> & settings, ContextPtr context);
 
