diff --git a/dbms/programs/server/CMakeLists.txt b/dbms/programs/server/CMakeLists.txt
index 1ebf227c3da8..e36307198b40 100644
--- a/dbms/programs/server/CMakeLists.txt
+++ b/dbms/programs/server/CMakeLists.txt
@@ -1,9 +1,12 @@
 set(CLICKHOUSE_SERVER_SOURCES
     ${CMAKE_CURRENT_SOURCE_DIR}/HTTPHandler.cpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/HTTPHandlerFactory.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/InterserverIOHTTPHandler.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/MetricsTransmitter.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/NotFoundHandler.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/PingRequestHandler.cpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/PrometheusMetricsWriter.cpp
+    ${CMAKE_CURRENT_SOURCE_DIR}/PrometheusRequestHandler.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/ReplicasStatusHandler.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/RootRequestHandler.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/Server.cpp
diff --git a/dbms/programs/server/HTTPHandlerFactory.cpp b/dbms/programs/server/HTTPHandlerFactory.cpp
new file mode 100644
index 000000000000..ab8fb4f73362
--- /dev/null
+++ b/dbms/programs/server/HTTPHandlerFactory.cpp
@@ -0,0 +1,43 @@
+#include "HTTPHandlerFactory.h"
+
+
+namespace DB
+{
+
+HTTPRequestHandlerFactoryMain::HTTPRequestHandlerFactoryMain(IServer & server_, const std::string & name_)
+    : server(server_), log(&Logger::get(name_)), name(name_)
+{
+}
+
+Poco::Net::HTTPRequestHandler * HTTPRequestHandlerFactoryMain::createRequestHandler(
+    const Poco::Net::HTTPServerRequest & request) // override
+{
+    LOG_TRACE(log, "HTTP Request for " << name << ". "
+        << "Method: "
+        << request.getMethod()
+        << ", Address: "
+        << request.clientAddress().toString()
+        << ", User-Agent: "
+        << (request.has("User-Agent") ? request.get("User-Agent") : "none")
+        << (request.hasContentLength() ? (", Length: " + std::to_string(request.getContentLength())) : (""))
+        << ", Content Type: " << request.getContentType()
+        << ", Transfer Encoding: " << request.getTransferEncoding());
+
+    for (auto & handlerFactory: child_handler_factories)
+    {
+        auto handler = handlerFactory->createRequestHandler(request);
+        if (handler != nullptr)
+            return handler;
+    }
+
+    if (request.getMethod() == Poco::Net::HTTPRequest::HTTP_GET
+        || request.getMethod() == Poco::Net::HTTPRequest::HTTP_HEAD
+        || request.getMethod() == Poco::Net::HTTPRequest::HTTP_POST)
+    {
+        return new NotFoundHandler;
+    }
+
+    return nullptr;
+}
+
+}
diff --git a/dbms/programs/server/HTTPHandlerFactory.h b/dbms/programs/server/HTTPHandlerFactory.h
index ce65f4476c0f..fcd7fb5d4a2f 100644
--- a/dbms/programs/server/HTTPHandlerFactory.h
+++ b/dbms/programs/server/HTTPHandlerFactory.h
@@ -9,6 +9,7 @@
 #include "InterserverIOHTTPHandler.h"
 #include "NotFoundHandler.h"
 #include "PingRequestHandler.h"
+#include "PrometheusRequestHandler.h"
 #include "ReplicasStatusHandler.h"
 #include "RootRequestHandler.h"
 
@@ -16,60 +17,111 @@
 namespace DB
 {
 
-template <typename HandlerType>
-class HTTPRequestHandlerFactory : public Poco::Net::HTTPRequestHandlerFactory
+/// Handle request using child handlers
+class HTTPRequestHandlerFactoryMain : public Poco::Net::HTTPRequestHandlerFactory
 {
 private:
+    using TThis = HTTPRequestHandlerFactoryMain;
+
     IServer & server;
     Logger * log;
     std::string name;
 
+    std::vector<std::unique_ptr<Poco::Net::HTTPRequestHandlerFactory>> child_handler_factories;
+
 public:
-    HTTPRequestHandlerFactory(IServer & server_, const std::string & name_) : server(server_), log(&Logger::get(name_)), name(name_)
+    HTTPRequestHandlerFactoryMain(IServer & server_, const std::string & name_);
+
+    Poco::Net::HTTPRequestHandler * createRequestHandler(const Poco::Net::HTTPServerRequest & request) override;
+
+    template <typename T, typename... TArgs>
+    TThis * addHandler(TArgs &&... args)
     {
+        child_handler_factories.emplace_back(std::make_unique<T>(server, std::forward<TArgs>(args)...));
+        return this;
     }
+};
+
+
+/// Handle POST or GET with params
+template <typename HandleType>
+class HTTPQueryRequestHandlerFactory : public Poco::Net::HTTPRequestHandlerFactory
+{
+private:
+    IServer & server;
+
+public:
+    HTTPQueryRequestHandlerFactory(IServer & server_) : server(server_) {}
 
     Poco::Net::HTTPRequestHandler * createRequestHandler(const Poco::Net::HTTPServerRequest & request) override
     {
-        LOG_TRACE(log, "HTTP Request for " << name << ". "
-            << "Method: "
-            << request.getMethod()
-            << ", Address: "
-            << request.clientAddress().toString()
-            << ", User-Agent: "
-            << (request.has("User-Agent") ? request.get("User-Agent") : "none")
-            << (request.hasContentLength() ? (", Length: " + std::to_string(request.getContentLength())) : (""))
-            << ", Content Type: " << request.getContentType()
-            << ", Transfer Encoding: " << request.getTransferEncoding());
-
-        const auto & uri = request.getURI();
-
-        if (request.getMethod() == Poco::Net::HTTPRequest::HTTP_GET || request.getMethod() == Poco::Net::HTTPRequest::HTTP_HEAD)
-        {
-            if (uri == "/")
-                return new RootRequestHandler(server);
-            if (uri == "/ping")
-                return new PingRequestHandler(server);
-            else if (startsWith(uri, "/replicas_status"))
-                return new ReplicasStatusHandler(server.context());
-        }
-
-        if (uri.find('?') != std::string::npos || request.getMethod() == Poco::Net::HTTPRequest::HTTP_POST)
-        {
-            return new HandlerType(server);
-        }
-
-        if (request.getMethod() == Poco::Net::HTTPRequest::HTTP_GET || request.getMethod() == Poco::Net::HTTPRequest::HTTP_HEAD
-            || request.getMethod() == Poco::Net::HTTPRequest::HTTP_POST)
-        {
-            return new NotFoundHandler;
-        }
+        if (request.getURI().find('?') != std::string::npos || request.getMethod() == Poco::Net::HTTPRequest::HTTP_POST)
+            return new HandleType(server);
+        return nullptr;
+    }
+};
+
+
+/// Handle GET or HEAD endpoint on specified path
+template <typename TGetEndpoint>
+class HTTPGetRequestHandlerFactory : public Poco::Net::HTTPRequestHandlerFactory
+{
+private:
+    IServer & server;
+public:
+    HTTPGetRequestHandlerFactory(IServer & server_) : server(server_) {}
+
+    Poco::Net::HTTPRequestHandler * createRequestHandler(const Poco::Net::HTTPServerRequest & request) override
+    {
+        auto & method = request.getMethod();
+        if (!(method == Poco::Net::HTTPRequest::HTTP_GET || method == Poco::Net::HTTPRequest::HTTP_HEAD))
+            return nullptr;
+
+        auto & uri = request.getURI();
+        bool uri_match = TGetEndpoint::strict_path ? uri == TGetEndpoint::path : startsWith(uri, TGetEndpoint::path);
+        if (uri_match)
+            return new typename TGetEndpoint::HandleType(server);
 
         return nullptr;
     }
 };
 
-using HTTPHandlerFactory = HTTPRequestHandlerFactory<HTTPHandler>;
-using InterserverIOHTTPHandlerFactory = HTTPRequestHandlerFactory<InterserverIOHTTPHandler>;
+
+struct RootEndpoint
+{
+    static constexpr auto path = "/";
+    static constexpr auto strict_path = true;
+    using HandleType = RootRequestHandler;
+};
+
+struct PingEndpoint
+{
+    static constexpr auto path = "/ping";
+    static constexpr auto strict_path = true;
+    using HandleType = PingRequestHandler;
+};
+
+struct ReplicasStatusEndpoint
+{
+    static constexpr auto path = "/replicas_status";
+    static constexpr auto strict_path = false;
+    using HandleType = ReplicasStatusHandler;
+};
+
+using HTTPRootRequestHandlerFactory = HTTPGetRequestHandlerFactory<RootEndpoint>;
+using HTTPPingRequestHandlerFactory = HTTPGetRequestHandlerFactory<PingEndpoint>;
+using HTTPReplicasStatusRequestHandlerFactory = HTTPGetRequestHandlerFactory<ReplicasStatusEndpoint>;
+
+template <typename HandleType>
+HTTPRequestHandlerFactoryMain * createDefaultHandlerFatory(IServer & server, const std::string & name)
+{
+    auto handlerFactory = new HTTPRequestHandlerFactoryMain(server, name);
+    handlerFactory->addHandler<HTTPRootRequestHandlerFactory>()
+                  ->addHandler<HTTPPingRequestHandlerFactory>()
+                  ->addHandler<HTTPReplicasStatusRequestHandlerFactory>()
+                  ->addHandler<HTTPQueryRequestHandlerFactory<HandleType>>();
+    return handlerFactory;
+}
+
 
 }
diff --git a/dbms/programs/server/PrometheusMetricsWriter.cpp b/dbms/programs/server/PrometheusMetricsWriter.cpp
new file mode 100644
index 000000000000..b45e66f70562
--- /dev/null
+++ b/dbms/programs/server/PrometheusMetricsWriter.cpp
@@ -0,0 +1,90 @@
+#include "PrometheusMetricsWriter.h"
+
+#include <IO/WriteHelpers.h>
+
+namespace
+{
+
+template <typename T>
+void writeOutLine(DB::WriteBuffer & wb, T && val)
+{
+    DB::writeText(std::forward<T>(val), wb);
+    DB::writeChar('
', wb);
+}
+
+template <typename T, typename... TArgs>
+void writeOutLine(DB::WriteBuffer & wb, T && val, TArgs &&... args)
+{
+    DB::writeText(std::forward<T>(val), wb);
+    DB::writeChar(' ', wb);
+    writeOutLine(wb, std::forward<TArgs>(args)...);
+}
+
+}
+
+
+namespace DB
+{
+
+PrometheusMetricsWriter::PrometheusMetricsWriter(
+    const Poco::Util::AbstractConfiguration & config, const std::string & config_name,
+    const AsynchronousMetrics & async_metrics_)
+    : async_metrics(async_metrics_)
+    , send_events(config.getBool(config_name + ".events", true))
+    , send_metrics(config.getBool(config_name + ".metrics", true))
+    , send_asynchronous_metrics(config.getBool(config_name + ".asynchronous_metrics", true))
+{
+}
+
+void PrometheusMetricsWriter::write(WriteBuffer & wb) const
+{
+    if (send_events)
+    {
+        for (size_t i = 0, end = ProfileEvents::end(); i < end; ++i)
+        {
+            const auto counter = ProfileEvents::global_counters[i].load(std::memory_order_relaxed);
+
+            std::string metric_name{ProfileEvents::getName(static_cast<ProfileEvents::Event>(i))};
+            std::string metric_doc{ProfileEvents::getDocumentation(static_cast<ProfileEvents::Event>(i))};
+
+            std::string key{profile_events_prefix + metric_name};
+
+            writeOutLine(wb, "# HELP", key, metric_doc);
+            writeOutLine(wb, "# TYPE", key, "counter");
+            writeOutLine(wb, key, counter);
+        }
+    }
+
+    if (send_metrics)
+    {
+        for (size_t i = 0, end = CurrentMetrics::end(); i < end; ++i)
+        {
+            const auto value = CurrentMetrics::values[i].load(std::memory_order_relaxed);
+
+            std::string metric_name{CurrentMetrics::getName(static_cast<CurrentMetrics::Metric>(i))};
+            std::string metric_doc{CurrentMetrics::getDocumentation(static_cast<CurrentMetrics::Metric>(i))};
+
+            std::string key{current_metrics_prefix + metric_name};
+
+            writeOutLine(wb, "# HELP", key, metric_doc);
+            writeOutLine(wb, "# TYPE", key, "gauge");
+            writeOutLine(wb, key, value);
+        }
+    }
+
+    if (send_asynchronous_metrics)
+    {
+        auto async_metrics_values = async_metrics.getValues();
+        for (const auto & name_value : async_metrics_values)
+        {
+            std::string key{asynchronous_metrics_prefix + name_value.first};
+            auto value = name_value.second;
+
+            // TODO: add HELP section? asynchronous_metrics contains only key and value
+            writeOutLine(wb, "# TYPE", key, "gauge");
+            writeOutLine(wb, key, value);
+        }
+    }
+}
+
+}
diff --git a/dbms/programs/server/PrometheusMetricsWriter.h b/dbms/programs/server/PrometheusMetricsWriter.h
new file mode 100644
index 000000000000..1b253b2b954a
--- /dev/null
+++ b/dbms/programs/server/PrometheusMetricsWriter.h
@@ -0,0 +1,36 @@
+#pragma once
+
+#include <string>
+
+#include <Interpreters/AsynchronousMetrics.h>
+
+#include <IO/WriteBuffer.h>
+
+#include <Poco/Util/AbstractConfiguration.h>
+
+namespace DB
+{
+
+/// Write metrics in Prometheus format
+class PrometheusMetricsWriter
+{
+public:
+    PrometheusMetricsWriter(
+        const Poco::Util::AbstractConfiguration & config, const std::string & config_name,
+        const AsynchronousMetrics & async_metrics_);
+
+    void write(WriteBuffer & wb) const;
+
+private:
+    const AsynchronousMetrics & async_metrics;
+
+    const bool send_events;
+    const bool send_metrics;
+    const bool send_asynchronous_metrics;
+
+    static inline constexpr auto profile_events_prefix = "ClickHouseProfileEvents";
+    static inline constexpr auto current_metrics_prefix = "ClickHouseMetrics";
+    static inline constexpr auto asynchronous_metrics_prefix = "ClickHouseAsyncMetrics";
+};
+
+}
diff --git a/dbms/programs/server/PrometheusRequestHandler.cpp b/dbms/programs/server/PrometheusRequestHandler.cpp
new file mode 100644
index 000000000000..b5a48d13b647
--- /dev/null
+++ b/dbms/programs/server/PrometheusRequestHandler.cpp
@@ -0,0 +1,42 @@
+#include "PrometheusRequestHandler.h"
+
+#include <IO/HTTPCommon.h>
+
+#include <Common/Exception.h>
+
+#include <Poco/Net/HTTPServerRequest.h>
+#include <Poco/Net/HTTPServerResponse.h>
+
+#include <Common/ProfileEvents.h>
+#include <Common/CurrentMetrics.h>
+
+#include <IO/WriteBufferFromHTTPServerResponse.h>
+
+
+namespace DB
+{
+
+void PrometheusRequestHandler::handleRequest(
+    Poco::Net::HTTPServerRequest & request,
+    Poco::Net::HTTPServerResponse & response)
+{
+    try
+    {
+        const auto & config = server.config();
+        unsigned keep_alive_timeout = config.getUInt("keep_alive_timeout", 10);
+
+        setResponseDefaultHeaders(response, keep_alive_timeout);
+
+        response.setContentType("text/plain; version=0.0.4; charset=UTF-8");
+
+        auto wb = WriteBufferFromHTTPServerResponse(request, response, keep_alive_timeout);
+        metrics_writer.write(wb);
+        wb.finalize();
+    }
+    catch (...)
+    {
+        tryLogCurrentException("PrometheusRequestHandler");
+    }
+}
+
+}
diff --git a/dbms/programs/server/PrometheusRequestHandler.h b/dbms/programs/server/PrometheusRequestHandler.h
new file mode 100644
index 000000000000..439a01c7d6f9
--- /dev/null
+++ b/dbms/programs/server/PrometheusRequestHandler.h
@@ -0,0 +1,61 @@
+#pragma once
+
+#include "IServer.h"
+#include "PrometheusMetricsWriter.h"
+
+#include <Poco/Net/HTTPServerRequest.h>
+#include <Poco/Net/HTTPServerResponse.h>
+#include <Poco/Net/HTTPRequestHandler.h>
+#include <Poco/Net/HTTPRequestHandlerFactory.h>
+
+namespace DB
+{
+
+class PrometheusRequestHandler : public Poco::Net::HTTPRequestHandler
+{
+private:
+    IServer & server;
+    const PrometheusMetricsWriter & metrics_writer;
+
+public:
+    explicit PrometheusRequestHandler(IServer & server_, PrometheusMetricsWriter & metrics_writer_)
+        : server(server_)
+        , metrics_writer(metrics_writer_)
+    {
+    }
+
+    void handleRequest(
+        Poco::Net::HTTPServerRequest & request,
+        Poco::Net::HTTPServerResponse & response) override;
+};
+
+
+template <typename HandlerType>
+class PrometeusRequestHandlerFactory : public Poco::Net::HTTPRequestHandlerFactory
+{
+private:
+    IServer & server;
+    std::string endpoint_path;
+    PrometheusMetricsWriter metrics_writer;
+
+public:
+    PrometeusRequestHandlerFactory(IServer & server_, const AsynchronousMetrics & async_metrics_)
+        : server(server_)
+        , endpoint_path(server_.config().getString("prometheus.endpoint", "/metrics"))
+        , metrics_writer(server_.config(), "prometheus", async_metrics_)
+    {
+    }
+
+    Poco::Net::HTTPRequestHandler * createRequestHandler(const Poco::Net::HTTPServerRequest & request) override
+    {
+        if (request.getMethod() == Poco::Net::HTTPRequest::HTTP_GET
+            && request.getURI() == endpoint_path)
+            return new HandlerType(server, metrics_writer);
+
+        return nullptr;
+    }
+};
+
+using PrometeusHandlerFactory = PrometeusRequestHandlerFactory<PrometheusRequestHandler>;
+
+}
diff --git a/dbms/programs/server/ReplicasStatusHandler.cpp b/dbms/programs/server/ReplicasStatusHandler.cpp
index 22e059d9cccf..4d72c6da3cfa 100644
--- a/dbms/programs/server/ReplicasStatusHandler.cpp
+++ b/dbms/programs/server/ReplicasStatusHandler.cpp
@@ -15,8 +15,8 @@ namespace DB
 {
 
 
-ReplicasStatusHandler::ReplicasStatusHandler(Context & context_)
-    : context(context_)
+ReplicasStatusHandler::ReplicasStatusHandler(IServer & server)
+    : context(server.context())
 {
 }
 
diff --git a/dbms/programs/server/ReplicasStatusHandler.h b/dbms/programs/server/ReplicasStatusHandler.h
index 02759bbc8ac3..479b013cfe8c 100644
--- a/dbms/programs/server/ReplicasStatusHandler.h
+++ b/dbms/programs/server/ReplicasStatusHandler.h
@@ -1,5 +1,7 @@
 #pragma once
 
+#include "IServer.h"
+
 #include <Poco/Net/HTTPRequestHandler.h>
 
 
@@ -15,7 +17,7 @@ class ReplicasStatusHandler : public Poco::Net::HTTPRequestHandler
     Context & context;
 
 public:
-    explicit ReplicasStatusHandler(Context & context_);
+    explicit ReplicasStatusHandler(IServer & server);
 
     void handleRequest(Poco::Net::HTTPServerRequest & request, Poco::Net::HTTPServerResponse & response) override;
 };
diff --git a/dbms/programs/server/Server.cpp b/dbms/programs/server/Server.cpp
index bd820e5eb0ae..f53e7b825a89 100644
--- a/dbms/programs/server/Server.cpp
+++ b/dbms/programs/server/Server.cpp
@@ -668,6 +668,10 @@ int Server::main(const std::vector<std::string> & /*args*/)
                return address;
         };
 
+        /// This object will periodically calculate some metrics.
+        AsynchronousMetrics async_metrics(*global_context);
+        attachSystemTablesAsync(*global_context->getDatabase("system"), async_metrics);
+
         for (const auto & listen_host : listen_hosts)
         {
             auto create_server = [&](const char * port_name, auto && func)
@@ -707,8 +711,12 @@ int Server::main(const std::vector<std::string> & /*args*/)
                 auto address = socket_bind_listen(socket, listen_host, port);
                 socket.setReceiveTimeout(settings.http_receive_timeout);
                 socket.setSendTimeout(settings.http_send_timeout);
+                auto handler_factory = createDefaultHandlerFatory<HTTPHandler>(*this, "HTTPHandler-factory");
+                if (config().has("prometheus") && config().getInt("prometheus.port", 0) == 0)
+                    handler_factory->addHandler<PrometeusHandlerFactory>(async_metrics);
+
                 servers.emplace_back(std::make_unique<Poco::Net::HTTPServer>(
-                    new HTTPHandlerFactory(*this, "HTTPHandler-factory"),
+                    handler_factory,
                     server_pool,
                     socket,
                     http_params));
@@ -725,7 +733,7 @@ int Server::main(const std::vector<std::string> & /*args*/)
                 socket.setReceiveTimeout(settings.http_receive_timeout);
                 socket.setSendTimeout(settings.http_send_timeout);
                 servers.emplace_back(std::make_unique<Poco::Net::HTTPServer>(
-                    new HTTPHandlerFactory(*this, "HTTPSHandler-factory"),
+                    createDefaultHandlerFatory<HTTPHandler>(*this, "HTTPSHandler-factory"),
                     server_pool,
                     socket,
                     http_params));
@@ -783,7 +791,7 @@ int Server::main(const std::vector<std::string> & /*args*/)
                 socket.setReceiveTimeout(settings.http_receive_timeout);
                 socket.setSendTimeout(settings.http_send_timeout);
                 servers.emplace_back(std::make_unique<Poco::Net::HTTPServer>(
-                    new InterserverIOHTTPHandlerFactory(*this, "InterserverIOHTTPHandler-factory"),
+                    createDefaultHandlerFatory<InterserverIOHTTPHandler>(*this, "InterserverIOHTTPHandler-factory"),
                     server_pool,
                     socket,
                     http_params));
@@ -799,7 +807,7 @@ int Server::main(const std::vector<std::string> & /*args*/)
                 socket.setReceiveTimeout(settings.http_receive_timeout);
                 socket.setSendTimeout(settings.http_send_timeout);
                 servers.emplace_back(std::make_unique<Poco::Net::HTTPServer>(
-                    new InterserverIOHTTPHandlerFactory(*this, "InterserverIOHTTPHandler-factory"),
+                    createDefaultHandlerFatory<InterserverIOHTTPHandler>(*this, "InterserverIOHTTPHandler-factory"),
                     server_pool,
                     socket,
                     http_params));
@@ -826,6 +834,24 @@ int Server::main(const std::vector<std::string> & /*args*/)
 
                 LOG_INFO(log, "Listening for MySQL compatibility protocol: " + address.toString());
             });
+
+            /// Prometheus (if defined and not setup yet with http_port)
+            create_server("prometheus.port", [&](UInt16 port)
+            {
+                Poco::Net::ServerSocket socket;
+                auto address = socket_bind_listen(socket, listen_host, port);
+                socket.setReceiveTimeout(settings.http_receive_timeout);
+                socket.setSendTimeout(settings.http_send_timeout);
+                auto handler_factory = new HTTPRequestHandlerFactoryMain(*this, "PrometheusHandler-factory");
+                handler_factory->addHandler<PrometeusHandlerFactory>(async_metrics);
+                servers.emplace_back(std::make_unique<Poco::Net::HTTPServer>(
+                    handler_factory,
+                    server_pool,
+                    socket,
+                    http_params));
+
+                LOG_INFO(log, "Listening http://" + address.toString());
+            });
         }
 
         if (servers.empty())
@@ -928,10 +954,6 @@ int Server::main(const std::vector<std::string> & /*args*/)
             throw;
         }
 
-        /// This object will periodically calculate some metrics.
-        AsynchronousMetrics async_metrics(*global_context);
-        attachSystemTablesAsync(*global_context->getDatabase("system"), async_metrics);
-
         std::vector<std::unique_ptr<MetricsTransmitter>> metrics_transmitters;
         for (const auto & graphite_key : DB::getMultipleKeysFromConfig(config(), "", "graphite"))
         {
diff --git a/dbms/programs/server/config.xml b/dbms/programs/server/config.xml
index 6e9bb527c973..d49a6a76f3c1 100644
--- a/dbms/programs/server/config.xml
+++ b/dbms/programs/server/config.xml
@@ -289,6 +289,24 @@
     </graphite>
     -->
 
+    <!-- Serve endpoint fot Prometheus monitoring. -->
+    <!--
+        endpoint - mertics path (relative to root, statring with "/")
+        port - port to setup server. If not defined or 0 than http_port used
+        metrics - send data from table system.metrics
+        events - send data from table system.events
+        asynchronous_metrics - send data from table system.asynchronous_metrics
+    -->
+    <!--
+    <prometheus>
+        <endpoint>/metrics</endpoint>
+        <port>8001</port>
+
+        <metrics>true</metrics>
+        <events>true</events>
+        <asynchronous_metrics>true</asynchronous_metrics>
+    </prometheus>
+    -->
 
     <!-- Query log. Used only for queries with setting log_queries = 1. -->
     <query_log>
