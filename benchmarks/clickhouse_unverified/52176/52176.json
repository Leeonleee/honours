{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52176,
  "instance_id": "ClickHouse__ClickHouse-52176",
  "issue_numbers": [
    "52153"
  ],
  "base_commit": "60908ac269a2fa73f0dedd0ab5a844da660211c6",
  "patch": "diff --git a/docs/en/sql-reference/functions/array-functions.md b/docs/en/sql-reference/functions/array-functions.md\nindex 7f2b8f3c6055..7aeb1af8f6bf 100644\n--- a/docs/en/sql-reference/functions/array-functions.md\n+++ b/docs/en/sql-reference/functions/array-functions.md\n@@ -102,6 +102,8 @@ The function also works for strings.\n \n Can be optimized by enabling the [optimize_functions_to_subcolumns](../../operations/settings/settings.md#optimize-functions-to-subcolumns) setting. With `optimize_functions_to_subcolumns = 1` the function reads only [size0](../../sql-reference/data-types/array.md#array-size) subcolumn instead of reading and processing the whole array column. The query `SELECT length(arr) FROM table` transforms to `SELECT arr.size0 FROM TABLE`.\n \n+Alias: `OCTET_LENGTH`\n+\n ## emptyArrayUInt8, emptyArrayUInt16, emptyArrayUInt32, emptyArrayUInt64\n \n ## emptyArrayInt8, emptyArrayInt16, emptyArrayInt32, emptyArrayInt64\ndiff --git a/docs/en/sql-reference/functions/string-functions.md b/docs/en/sql-reference/functions/string-functions.md\nindex 5175bbf0615f..28dcf1c6b77c 100644\n--- a/docs/en/sql-reference/functions/string-functions.md\n+++ b/docs/en/sql-reference/functions/string-functions.md\n@@ -90,6 +90,8 @@ Returns the length of a string in bytes (not: in characters or Unicode code poin\n \n The function also works for arrays.\n \n+Alias: `OCTET_LENGTH`\n+\n ## lengthUTF8\n \n Returns the length of a string in Unicode code points (not: in bytes or characters). It assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.\ndiff --git a/src/Functions/array/length.cpp b/src/Functions/array/length.cpp\nindex f09ad17892b3..91a5e5fdec2d 100644\n--- a/src/Functions/array/length.cpp\n+++ b/src/Functions/array/length.cpp\n@@ -101,6 +101,7 @@ It is ok to have ASCII NUL bytes in strings, and they will be counted as well.\n             .categories{\"String\", \"Array\"}\n         },\n         FunctionFactory::CaseInsensitive);\n+    factory.registerAlias(\"OCTET_LENGTH\", \"length\", FunctionFactory::CaseInsensitive);\n }\n \n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02815_alias_to_length.reference b/tests/queries/0_stateless/02815_alias_to_length.reference\nnew file mode 100644\nindex 000000000000..de958a364ef9\n--- /dev/null\n+++ b/tests/queries/0_stateless/02815_alias_to_length.reference\n@@ -0,0 +1,4 @@\n+4\n+4\n+15\n+4\ndiff --git a/tests/queries/0_stateless/02815_alias_to_length.sql b/tests/queries/0_stateless/02815_alias_to_length.sql\nnew file mode 100644\nindex 000000000000..780ac7dac6dd\n--- /dev/null\n+++ b/tests/queries/0_stateless/02815_alias_to_length.sql\n@@ -0,0 +1,6 @@\n+SELECT OCTET_LENGTH('1234');\n+SELECT OcTet_lenGtH('1234');\n+SELECT OCTET_LENGTH('\u4f60\u597d\uff0c\u4e16\u754c');\n+\n+-- This is a implementation-specific behavior of getting the length of an array.\n+SELECT OCTET_LENGTH([1,2,3,4]);\n",
  "problem_statement": "Add `OCTET_LENGTH` as an alias to `length`\n**Use case**\r\n\r\nSQL standard compatibility.\r\n\r\n**Describe the solution you'd like**\r\n\r\nAdd an alias, case insensitive.\n",
  "hints_text": "",
  "created_at": "2023-07-17T02:44:23Z",
  "modified_files": [
    "docs/en/sql-reference/functions/array-functions.md",
    "docs/en/sql-reference/functions/string-functions.md",
    "src/Functions/array/length.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02815_alias_to_length.reference",
    "b/tests/queries/0_stateless/02815_alias_to_length.sql"
  ]
}