diff --git a/tests/queries/0_stateless/02981_vertical_merges_memory_usage.reference b/tests/queries/0_stateless/02981_vertical_merges_memory_usage.reference
new file mode 100644
index 000000000000..60c254e152bc
--- /dev/null
+++ b/tests/queries/0_stateless/02981_vertical_merges_memory_usage.reference
@@ -0,0 +1,1 @@
+Vertical	OK
diff --git a/tests/queries/0_stateless/02981_vertical_merges_memory_usage.sql b/tests/queries/0_stateless/02981_vertical_merges_memory_usage.sql
new file mode 100644
index 000000000000..1305f02c0444
--- /dev/null
+++ b/tests/queries/0_stateless/02981_vertical_merges_memory_usage.sql
@@ -0,0 +1,35 @@
+-- Tags: long
+
+DROP TABLE IF EXISTS t_vertical_merge_memory;
+
+CREATE TABLE t_vertical_merge_memory (id UInt64, arr Array(String))
+ENGINE = MergeTree ORDER BY id
+SETTINGS
+    min_bytes_for_wide_part = 0,
+    vertical_merge_algorithm_min_rows_to_activate = 1,
+    vertical_merge_algorithm_min_columns_to_activate = 1,
+    index_granularity = 8192,
+    index_granularity_bytes = '10M',
+    merge_max_block_size = 8192,
+    merge_max_block_size_bytes = '10M';
+
+INSERT INTO t_vertical_merge_memory SELECT number, arrayMap(x -> repeat('a', 50), range(1000)) FROM numbers(30000);
+INSERT INTO t_vertical_merge_memory SELECT number, arrayMap(x -> repeat('a', 50), range(1000)) FROM numbers(30000);
+
+OPTIMIZE TABLE t_vertical_merge_memory FINAL;
+
+SYSTEM FLUSH LOGS;
+
+SELECT
+    merge_algorithm,
+    peak_memory_usage < 500 * 1024 * 1024
+        ? 'OK'
+        : format('FAIL: memory usage: {}', formatReadableSize(peak_memory_usage))
+FROM system.part_log
+WHERE
+    database = currentDatabase()
+    AND table = 't_vertical_merge_memory'
+    AND event_type = 'MergeParts'
+    AND length(merged_from) = 2;
+
+DROP TABLE IF EXISTS t_vertical_merge_memory;
