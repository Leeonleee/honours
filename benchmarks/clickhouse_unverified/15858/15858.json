{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 15858,
  "instance_id": "ClickHouse__ClickHouse-15858",
  "issue_numbers": [
    "15854"
  ],
  "base_commit": "38c7132c0f580547a72e3cc1fa18a091abf46221",
  "patch": "diff --git a/src/Storages/AlterCommands.cpp b/src/Storages/AlterCommands.cpp\nindex 3b062c2d6899..7beb0a4d7069 100644\n--- a/src/Storages/AlterCommands.cpp\n+++ b/src/Storages/AlterCommands.cpp\n@@ -1109,24 +1109,21 @@ void AlterCommands::validate(const StorageInMemoryMetadata & metadata, const Con\n         {\n             if (command.default_expression)\n             {\n-                /// If we modify default, but not type\n-                if (!command.data_type)\n-                {\n-                    default_expr_list->children.emplace_back(setAlias(command.default_expression->clone(), column_name));\n-                }\n+                DataTypePtr data_type_ptr;\n+                /// If we modify default, but not type.\n+                if (!command.data_type) /// it's not ADD COLUMN, because we cannot add column without type\n+                    data_type_ptr = all_columns.get(column_name).type;\n                 else\n-                {\n-                    const auto & final_column_name = column_name;\n-                    const auto tmp_column_name = final_column_name + \"_tmp\";\n-                    const auto data_type_ptr = command.data_type;\n+                    data_type_ptr = command.data_type;\n \n+                const auto & final_column_name = column_name;\n+                const auto tmp_column_name = final_column_name + \"_tmp\";\n \n-                    default_expr_list->children.emplace_back(setAlias(\n-                        addTypeConversionToAST(std::make_shared<ASTIdentifier>(tmp_column_name), data_type_ptr->getName()),\n-                        final_column_name));\n+                default_expr_list->children.emplace_back(setAlias(\n+                    addTypeConversionToAST(std::make_shared<ASTIdentifier>(tmp_column_name), data_type_ptr->getName()),\n+                    final_column_name));\n \n-                    default_expr_list->children.emplace_back(setAlias(command.default_expression->clone(), tmp_column_name));\n-                }\n+                default_expr_list->children.emplace_back(setAlias(command.default_expression->clone(), tmp_column_name));\n             } /// if we change data type for column with default\n             else if (all_columns.has(column_name) && command.data_type)\n             {\n@@ -1139,7 +1136,6 @@ void AlterCommands::validate(const StorageInMemoryMetadata & metadata, const Con\n                 const auto tmp_column_name = final_column_name + \"_tmp\";\n                 const auto data_type_ptr = command.data_type;\n \n-\n                 default_expr_list->children.emplace_back(setAlias(\n                     addTypeConversionToAST(std::make_shared<ASTIdentifier>(tmp_column_name), data_type_ptr->getName()), final_column_name));\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01522_validate_alter_default.reference b/tests/queries/0_stateless/01522_validate_alter_default.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01522_validate_alter_default.sql b/tests/queries/0_stateless/01522_validate_alter_default.sql\nnew file mode 100644\nindex 000000000000..dbddffe369e7\n--- /dev/null\n+++ b/tests/queries/0_stateless/01522_validate_alter_default.sql\n@@ -0,0 +1,16 @@\n+DROP TABLE IF EXISTS table2;\n+CREATE TABLE table2\n+(\n+        EventDate Date,\n+        Id Int32,\n+        Value Int32\n+)\n+Engine = MergeTree()\n+PARTITION BY toYYYYMM(EventDate)\n+ORDER BY Id;\n+\n+ALTER TABLE table2 MODIFY COLUMN `Value` DEFAULT 'some_string'; --{serverError 6}\n+\n+ALTER TABLE table2 ADD COLUMN `Value2` DEFAULT 'some_string'; --{serverError 36}\n+\n+DROP TABLE IF EXISTS table2;\n",
  "problem_statement": "Clickhouse does not validate DEFAULT value on MODIFY COLUMN for type compability\n**Describe the bug**\r\nHere's my table:\r\n```sql\r\nCREATE TABLE table2\r\n(\r\n        EventDate Date,\r\n        Id Int32,\r\n        Value Int32\r\n)\r\nEngine = MergeTree()\r\nPARTITION BY toYYYYMM(EventDate)\r\nORDER BY Id;\r\n```\r\n\r\nModify default value (intentionally wrong):\r\n```\r\n>>> alter table table2 modify column Value default 'some_string';\r\n\r\nALTER TABLE table2\r\n    MODIFY COLUMN `Value` DEFAULT 'some_string'\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.007 sec. \r\n```\r\n\r\nNow you obviously cannot insert anything to this table, because:\r\n```\r\n>>> insert into table2 (EventDate, Id) values (1234567890, 2)\r\n\r\nINSERT INTO table2 (EventDate, Id) VALUES\r\n\r\nReceived exception from server (version 20.9.3):\r\nCode: 6. DB::Exception: Received from localhost:9000. DB::Exception: Cannot parse string 'some_string' as Int32: syntax error at begin of string. Note: there are toInt32OrZero and toInt32OrNull functions, which returns zero/NULL instead of throwing exception.. \r\n\r\n1 rows in set. Elapsed: 0.002 sec. \r\n```\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use: 20.9.3\r\n* Which interface to use, if matters: I used standard CLI\r\n\r\n**Expected behavior**\r\nCurrently ClickHouse doesn't check types compability while setting a DEFAULT value for a column. Maybe ClickHouse should validate DEFAULT values for type compability?\r\n\n",
  "hints_text": "",
  "created_at": "2020-10-12T11:04:12Z",
  "modified_files": [
    "src/Storages/AlterCommands.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01522_validate_alter_default.sql"
  ]
}