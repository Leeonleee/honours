{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 39874,
  "instance_id": "ClickHouse__ClickHouse-39874",
  "issue_numbers": [
    "34217"
  ],
  "base_commit": "a34a9b581c5305073948a44eba048dac4b323458",
  "patch": "diff --git a/programs/benchmark/Benchmark.cpp b/programs/benchmark/Benchmark.cpp\nindex 5b77883c7b0c..5d82386e2c80 100644\n--- a/programs/benchmark/Benchmark.cpp\n+++ b/programs/benchmark/Benchmark.cpp\n@@ -61,7 +61,7 @@ class Benchmark : public Poco::Util::Application\n     Benchmark(unsigned concurrency_, double delay_,\n             Strings && hosts_, Ports && ports_, bool round_robin_,\n             bool cumulative_, bool secure_, const String & default_database_,\n-            const String & user_, const String & password_, const String & stage,\n+            const String & user_, const String & password_, const String & quota_key_, const String & stage,\n             bool randomize_, size_t max_iterations_, double max_time_,\n             const String & json_path_, size_t confidence_,\n             const String & query_id_, const String & query_to_execute_, bool continue_on_errors_,\n@@ -90,7 +90,7 @@ class Benchmark : public Poco::Util::Application\n             connections.emplace_back(std::make_unique<ConnectionPool>(\n                 concurrency,\n                 cur_host, cur_port,\n-                default_database_, user_, password_,\n+                default_database_, user_, password_, quota_key_,\n                 /* cluster_= */ \"\",\n                 /* cluster_secret_= */ \"\",\n                 /* client_name_= */ \"benchmark\",\n@@ -607,6 +607,7 @@ int mainEntryClickHouseBenchmark(int argc, char ** argv)\n         /// So we copy the results to std::string.\n         std::optional<std::string> env_user_str;\n         std::optional<std::string> env_password_str;\n+        std::optional<std::string> env_quota_key_str;\n \n         const char * env_user = getenv(\"CLICKHOUSE_USER\");\n         if (env_user != nullptr)\n@@ -616,6 +617,10 @@ int mainEntryClickHouseBenchmark(int argc, char ** argv)\n         if (env_password != nullptr)\n             env_password_str.emplace(std::string(env_password));\n \n+        const char * env_quota_key = getenv(\"CLICKHOUSE_QUOTA_KEY\");\n+        if (env_quota_key != nullptr)\n+            env_quota_key_str.emplace(std::string(env_quota_key));\n+\n         boost::program_options::options_description desc = createOptionsDescription(\"Allowed options\", getTerminalWidth());\n         desc.add_options()\n             (\"help\",                                                            \"produce help message\")\n@@ -634,6 +639,7 @@ int mainEntryClickHouseBenchmark(int argc, char ** argv)\n             (\"secure,s\",                                                        \"Use TLS connection\")\n             (\"user,u\",        value<std::string>()->default_value(env_user_str.value_or(\"default\")), \"\")\n             (\"password\",      value<std::string>()->default_value(env_password_str.value_or(\"\")), \"\")\n+            (\"quota_key\",      value<std::string>()->default_value(env_quota_key_str.value_or(\"\")), \"\")\n             (\"database\",      value<std::string>()->default_value(\"default\"),   \"\")\n             (\"stacktrace\",                                                      \"print stack traces of exceptions\")\n             (\"confidence\",    value<size_t>()->default_value(5), \"set the level of confidence for T-test [0=80%, 1=90%, 2=95%, 3=98%, 4=99%, 5=99.5%(default)\")\n@@ -682,6 +688,7 @@ int mainEntryClickHouseBenchmark(int argc, char ** argv)\n             options[\"database\"].as<std::string>(),\n             options[\"user\"].as<std::string>(),\n             options[\"password\"].as<std::string>(),\n+            options[\"quota_key\"].as<std::string>(),\n             options[\"stage\"].as<std::string>(),\n             options[\"randomize\"].as<bool>(),\n             options[\"iterations\"].as<size_t>(),\ndiff --git a/programs/copier/ClusterCopier.cpp b/programs/copier/ClusterCopier.cpp\nindex f3609902fcbf..2e7d81617fa1 100644\n--- a/programs/copier/ClusterCopier.cpp\n+++ b/programs/copier/ClusterCopier.cpp\n@@ -2010,7 +2010,7 @@ UInt64 ClusterCopier::executeQueryOnCluster(\n             {\n                 connections.emplace_back(std::make_shared<Connection>(\n                     node.host_name, node.port, node.default_database,\n-                    node.user, node.password, node.cluster, node.cluster_secret,\n+                    node.user, node.password, node.quota_key, node.cluster, node.cluster_secret,\n                     \"ClusterCopier\", node.compression, node.secure\n                 ));\n \ndiff --git a/src/Client/Connection.cpp b/src/Client/Connection.cpp\nindex df37d1c98a41..bbd4c380831e 100644\n--- a/src/Client/Connection.cpp\n+++ b/src/Client/Connection.cpp\n@@ -64,6 +64,7 @@ Connection::~Connection() = default;\n Connection::Connection(const String & host_, UInt16 port_,\n     const String & default_database_,\n     const String & user_, const String & password_,\n+    const String & quota_key_,\n     const String & cluster_,\n     const String & cluster_secret_,\n     const String & client_name_,\n@@ -71,7 +72,7 @@ Connection::Connection(const String & host_, UInt16 port_,\n     Protocol::Secure secure_,\n     Poco::Timespan sync_request_timeout_)\n     : host(host_), port(port_), default_database(default_database_)\n-    , user(user_), password(password_)\n+    , user(user_), password(password_), quota_key(quota_key_)\n     , cluster(cluster_)\n     , cluster_secret(cluster_secret_)\n     , client_name(client_name_)\n@@ -169,6 +170,8 @@ void Connection::connect(const ConnectionTimeouts & timeouts)\n \n         sendHello();\n         receiveHello();\n+        if (server_revision >= DBMS_MIN_PROTOCOL_VERSION_WITH_ADDENDUM)\n+            sendAddendum();\n \n         LOG_TRACE(log_wrapper.get(), \"Connected to {} server version {}.{}.{}.\",\n             server_name, server_version_major, server_version_minor, server_version_patch);\n@@ -266,6 +269,14 @@ void Connection::sendHello()\n }\n \n \n+void Connection::sendAddendum()\n+{\n+    if (server_revision >= DBMS_MIN_PROTOCOL_VERSION_WITH_QUOTA_KEY)\n+        writeStringBinary(quota_key, *out);\n+    out->next();\n+}\n+\n+\n void Connection::receiveHello()\n {\n     /// Receive hello packet.\n@@ -1083,6 +1094,7 @@ ServerConnectionPtr Connection::createConnection(const ConnectionParameters & pa\n         parameters.default_database,\n         parameters.user,\n         parameters.password,\n+        parameters.quota_key,\n         \"\", /* cluster */\n         \"\", /* cluster_secret */\n         \"client\",\ndiff --git a/src/Client/Connection.h b/src/Client/Connection.h\nindex d00a5760a8dd..c712fd730ddd 100644\n--- a/src/Client/Connection.h\n+++ b/src/Client/Connection.h\n@@ -51,6 +51,7 @@ class Connection : public IServerConnection\n     Connection(const String & host_, UInt16 port_,\n         const String & default_database_,\n         const String & user_, const String & password_,\n+        const String & quota_key_,\n         const String & cluster_,\n         const String & cluster_secret_,\n         const String & client_name_,\n@@ -159,6 +160,7 @@ class Connection : public IServerConnection\n     String default_database;\n     String user;\n     String password;\n+    String quota_key;\n \n     /// For inter-server authorization\n     String cluster;\n@@ -245,6 +247,7 @@ class Connection : public IServerConnection\n \n     void connect(const ConnectionTimeouts & timeouts);\n     void sendHello();\n+    void sendAddendum();\n     void receiveHello();\n \n #if USE_SSL\ndiff --git a/src/Client/ConnectionParameters.cpp b/src/Client/ConnectionParameters.cpp\nindex 3101176101b5..f6720405eb05 100644\n--- a/src/Client/ConnectionParameters.cpp\n+++ b/src/Client/ConnectionParameters.cpp\n@@ -58,6 +58,7 @@ ConnectionParameters::ConnectionParameters(const Poco::Util::AbstractConfigurati\n         if (auto * result = readpassphrase(prompt.c_str(), buf, sizeof(buf), 0))\n             password = result;\n     }\n+    quota_key = config.getString(\"quota_key\", \"\");\n \n     /// By default compression is disabled if address looks like localhost.\n     compression = config.getBool(\"compression\", !isLocalAddress(DNSResolver::instance().resolveHost(host)))\ndiff --git a/src/Client/ConnectionParameters.h b/src/Client/ConnectionParameters.h\nindex ae204296fbf4..0ccd6b922905 100644\n--- a/src/Client/ConnectionParameters.h\n+++ b/src/Client/ConnectionParameters.h\n@@ -18,6 +18,7 @@ struct ConnectionParameters\n     std::string default_database;\n     std::string user;\n     std::string password;\n+    std::string quota_key;\n     Protocol::Secure security = Protocol::Secure::Disable;\n     Protocol::Compression compression = Protocol::Compression::Enable;\n     ConnectionTimeouts timeouts;\ndiff --git a/src/Client/ConnectionPool.cpp b/src/Client/ConnectionPool.cpp\nindex 4ec87127318b..8433b0833faf 100644\n--- a/src/Client/ConnectionPool.cpp\n+++ b/src/Client/ConnectionPool.cpp\n@@ -12,6 +12,7 @@ ConnectionPoolPtr ConnectionPoolFactory::get(\n     String default_database,\n     String user,\n     String password,\n+    String quota_key,\n     String cluster,\n     String cluster_secret,\n     String client_name,\n@@ -20,7 +21,7 @@ ConnectionPoolPtr ConnectionPoolFactory::get(\n     Int64 priority)\n {\n     Key key{\n-        max_connections, host, port, default_database, user, password, cluster, cluster_secret, client_name, compression, secure, priority};\n+        max_connections, host, port, default_database, user, password, quota_key, cluster, cluster_secret, client_name, compression, secure, priority};\n \n     std::lock_guard lock(mutex);\n     auto [it, inserted] = pools.emplace(key, ConnectionPoolPtr{});\n@@ -37,6 +38,7 @@ ConnectionPoolPtr ConnectionPoolFactory::get(\n             default_database,\n             user,\n             password,\n+            quota_key,\n             cluster,\n             cluster_secret,\n             client_name,\ndiff --git a/src/Client/ConnectionPool.h b/src/Client/ConnectionPool.h\nindex d1ee844358b5..c3d0955019e7 100644\n--- a/src/Client/ConnectionPool.h\n+++ b/src/Client/ConnectionPool.h\n@@ -54,6 +54,7 @@ class ConnectionPool : public IConnectionPool, private PoolBase<Connection>\n             const String & default_database_,\n             const String & user_,\n             const String & password_,\n+            const String & quota_key_,\n             const String & cluster_,\n             const String & cluster_secret_,\n             const String & client_name_,\n@@ -67,6 +68,7 @@ class ConnectionPool : public IConnectionPool, private PoolBase<Connection>\n         default_database(default_database_),\n         user(user_),\n         password(password_),\n+        quota_key(quota_key_),\n         cluster(cluster_),\n         cluster_secret(cluster_secret_),\n         client_name(client_name_),\n@@ -112,7 +114,7 @@ class ConnectionPool : public IConnectionPool, private PoolBase<Connection>\n     {\n         return std::make_shared<Connection>(\n             host, port,\n-            default_database, user, password,\n+            default_database, user, password, quota_key,\n             cluster, cluster_secret,\n             client_name, compression, secure);\n     }\n@@ -123,6 +125,7 @@ class ConnectionPool : public IConnectionPool, private PoolBase<Connection>\n     String default_database;\n     String user;\n     String password;\n+    String quota_key;\n \n     /// For inter-server authorization\n     String cluster;\n@@ -149,6 +152,7 @@ class ConnectionPoolFactory final : private boost::noncopyable\n         String default_database;\n         String user;\n         String password;\n+        String quota_key;\n         String cluster;\n         String cluster_secret;\n         String client_name;\n@@ -171,6 +175,7 @@ class ConnectionPoolFactory final : private boost::noncopyable\n         String default_database,\n         String user,\n         String password,\n+        String quota_key,\n         String cluster,\n         String cluster_secret,\n         String client_name,\ndiff --git a/src/Core/ProtocolDefines.h b/src/Core/ProtocolDefines.h\nindex 584720694d70..cf0a9d8b887e 100644\n--- a/src/Core/ProtocolDefines.h\n+++ b/src/Core/ProtocolDefines.h\n@@ -52,10 +52,14 @@\n /// NOTE: DBMS_TCP_PROTOCOL_VERSION has nothing common with VERSION_REVISION,\n /// later is just a number for server version (one number instead of commit SHA)\n /// for simplicity (sometimes it may be more convenient in some use cases).\n-#define DBMS_TCP_PROTOCOL_VERSION 54457\n+#define DBMS_TCP_PROTOCOL_VERSION 54458\n \n #define DBMS_MIN_PROTOCOL_VERSION_WITH_INITIAL_QUERY_START_TIME 54449\n \n #define DBMS_MIN_PROTOCOL_VERSION_WITH_PROFILE_EVENTS_IN_INSERT 54456\n \n #define DBMS_MIN_PROTOCOL_VERSION_WITH_VIEW_IF_PERMITTED 54457\n+\n+#define DBMS_MIN_PROTOCOL_VERSION_WITH_ADDENDUM 54458\n+\n+#define DBMS_MIN_PROTOCOL_VERSION_WITH_QUOTA_KEY 54458\ndiff --git a/src/Dictionaries/ClickHouseDictionarySource.cpp b/src/Dictionaries/ClickHouseDictionarySource.cpp\nindex b616979ba2ee..b1c475619482 100644\n--- a/src/Dictionaries/ClickHouseDictionarySource.cpp\n+++ b/src/Dictionaries/ClickHouseDictionarySource.cpp\n@@ -29,7 +29,7 @@ namespace ErrorCodes\n }\n \n static const std::unordered_set<std::string_view> dictionary_allowed_keys = {\n-    \"host\", \"port\", \"user\", \"password\", \"db\", \"database\", \"table\",\n+    \"host\", \"port\", \"user\", \"password\", \"quota_key\", \"db\", \"database\", \"table\",\n     \"update_field\", \"update_lag\", \"invalidate_query\", \"query\", \"where\", \"name\", \"secure\"};\n \n namespace\n@@ -54,6 +54,7 @@ namespace\n             configuration.db,\n             configuration.user,\n             configuration.password,\n+            configuration.quota_key,\n             \"\", /* cluster */\n             \"\", /* cluster_secret */\n             \"ClickHouseDictionarySource\",\n@@ -237,6 +238,7 @@ void registerDictionarySourceClickHouse(DictionarySourceFactory & factory)\n         std::string host = config.getString(settings_config_prefix + \".host\", \"localhost\");\n         std::string user = config.getString(settings_config_prefix + \".user\", \"default\");\n         std::string password =  config.getString(settings_config_prefix + \".password\", \"\");\n+        std::string quota_key =  config.getString(settings_config_prefix + \".quota_key\", \"\");\n         std::string db = config.getString(settings_config_prefix + \".db\", default_database);\n         std::string table = config.getString(settings_config_prefix + \".table\", \"\");\n         UInt16 port = static_cast<UInt16>(config.getUInt(settings_config_prefix + \".port\", default_port));\n@@ -252,6 +254,7 @@ void registerDictionarySourceClickHouse(DictionarySourceFactory & factory)\n             host = configuration.host;\n             user = configuration.username;\n             password = configuration.password;\n+            quota_key = configuration.quota_key;\n             db = configuration.database;\n             table = configuration.table;\n             port = configuration.port;\n@@ -261,6 +264,7 @@ void registerDictionarySourceClickHouse(DictionarySourceFactory & factory)\n             .host = host,\n             .user = user,\n             .password = password,\n+            .quota_key = quota_key,\n             .db = db,\n             .table = table,\n             .query = config.getString(settings_config_prefix + \".query\", \"\"),\ndiff --git a/src/Dictionaries/ClickHouseDictionarySource.h b/src/Dictionaries/ClickHouseDictionarySource.h\nindex 007e3e8b29dd..7bf6b805c03b 100644\n--- a/src/Dictionaries/ClickHouseDictionarySource.h\n+++ b/src/Dictionaries/ClickHouseDictionarySource.h\n@@ -23,6 +23,7 @@ class ClickHouseDictionarySource final : public IDictionarySource\n         const std::string host;\n         const std::string user;\n         const std::string password;\n+        const std::string quota_key;\n         const std::string db;\n         const std::string table;\n         const std::string query;\ndiff --git a/src/Interpreters/Cluster.cpp b/src/Interpreters/Cluster.cpp\nindex ddf3b46f1020..6877c0ece069 100644\n--- a/src/Interpreters/Cluster.cpp\n+++ b/src/Interpreters/Cluster.cpp\n@@ -425,7 +425,7 @@ Cluster::Cluster(const Poco::Util::AbstractConfiguration & config,\n             auto pool = ConnectionPoolFactory::instance().get(\n                 settings.distributed_connections_pool_size,\n                 address.host_name, address.port,\n-                address.default_database, address.user, address.password,\n+                address.default_database, address.user, address.password, address.quota_key,\n                 address.cluster, address.cluster_secret,\n                 \"server\", address.compression,\n                 address.secure, address.priority);\n@@ -499,7 +499,7 @@ Cluster::Cluster(const Poco::Util::AbstractConfiguration & config,\n                 auto replica_pool = ConnectionPoolFactory::instance().get(\n                     settings.distributed_connections_pool_size,\n                     replica.host_name, replica.port,\n-                    replica.default_database, replica.user, replica.password,\n+                    replica.default_database, replica.user, replica.password, replica.quota_key,\n                     replica.cluster, replica.cluster_secret,\n                     \"server\", replica.compression,\n                     replica.secure, replica.priority);\n@@ -587,7 +587,7 @@ Cluster::Cluster(\n             auto replica_pool = ConnectionPoolFactory::instance().get(\n                         settings.distributed_connections_pool_size,\n                         replica.host_name, replica.port,\n-                        replica.default_database, replica.user, replica.password,\n+                        replica.default_database, replica.user, replica.password, replica.quota_key,\n                         replica.cluster, replica.cluster_secret,\n                         \"server\", replica.compression, replica.secure, replica.priority);\n             all_replicas.emplace_back(replica_pool);\n@@ -699,6 +699,7 @@ Cluster::Cluster(Cluster::ReplicasAsShardsTag, const Cluster & from, const Setti\n                 address.default_database,\n                 address.user,\n                 address.password,\n+                address.quota_key,\n                 address.cluster,\n                 address.cluster_secret,\n                 \"server\",\ndiff --git a/src/Interpreters/Cluster.h b/src/Interpreters/Cluster.h\nindex 72958703d0ec..ada04aa1cae6 100644\n--- a/src/Interpreters/Cluster.h\n+++ b/src/Interpreters/Cluster.h\n@@ -93,6 +93,7 @@ class Cluster\n         UInt16 port{0};\n         String user;\n         String password;\n+        String quota_key;\n \n         /// For inter-server authorization\n         String cluster;\ndiff --git a/src/Server/TCPHandler.cpp b/src/Server/TCPHandler.cpp\nindex 1011524e0579..2f16148e0a2d 100644\n--- a/src/Server/TCPHandler.cpp\n+++ b/src/Server/TCPHandler.cpp\n@@ -134,6 +134,8 @@ void TCPHandler::runImpl()\n     {\n         receiveHello();\n         sendHello();\n+        if (client_tcp_protocol_version >= DBMS_MIN_PROTOCOL_VERSION_WITH_ADDENDUM)\n+            receiveAddendum();\n \n         if (!is_interserver_mode) /// In interserver mode queries are executed without a session context.\n         {\n@@ -1039,6 +1041,7 @@ std::unique_ptr<Session> TCPHandler::makeSession()\n     client_info.connection_client_version_patch = client_version_patch;\n     client_info.connection_tcp_protocol_version = client_tcp_protocol_version;\n \n+    client_info.quota_key = quota_key;\n     client_info.interface = interface;\n \n     return res;\n@@ -1097,6 +1100,16 @@ void TCPHandler::receiveHello()\n     session->authenticate(user, password, socket().peerAddress());\n }\n \n+void TCPHandler::receiveAddendum()\n+{\n+    if (client_tcp_protocol_version >= DBMS_MIN_PROTOCOL_VERSION_WITH_QUOTA_KEY)\n+    {\n+        readStringBinary(quota_key, *in);\n+        if (!is_interserver_mode)\n+            session->getClientInfo().quota_key = quota_key;\n+    }\n+}\n+\n \n void TCPHandler::receiveUnexpectedHello()\n {\ndiff --git a/src/Server/TCPHandler.h b/src/Server/TCPHandler.h\nindex bea00c815c88..cee3cf448d69 100644\n--- a/src/Server/TCPHandler.h\n+++ b/src/Server/TCPHandler.h\n@@ -155,6 +155,7 @@ class TCPHandler : public Poco::Net::TCPServerConnection\n     UInt64 client_version_minor = 0;\n     UInt64 client_version_patch = 0;\n     UInt64 client_tcp_protocol_version = 0;\n+    String quota_key;\n \n     /// Connection settings, which are extracted from a context.\n     bool send_exception_with_stack_trace = true;\n@@ -211,6 +212,7 @@ class TCPHandler : public Poco::Net::TCPServerConnection\n \n     bool receiveProxyHeader();\n     void receiveHello();\n+    void receiveAddendum();\n     bool receivePacket();\n     void receiveQuery();\n     void receiveIgnoredPartUUIDs();\ndiff --git a/src/Storages/Distributed/DirectoryMonitor.cpp b/src/Storages/Distributed/DirectoryMonitor.cpp\nindex 21b4e20a26f1..ff5a38fcc52c 100644\n--- a/src/Storages/Distributed/DirectoryMonitor.cpp\n+++ b/src/Storages/Distributed/DirectoryMonitor.cpp\n@@ -538,6 +538,7 @@ ConnectionPoolPtr StorageDistributedDirectoryMonitor::createPool(const std::stri\n             address.default_database,\n             address.user,\n             address.password,\n+            address.quota_key,\n             address.cluster,\n             address.cluster_secret,\n             storage.getName() + '_' + address.user, /* client */\ndiff --git a/src/Storages/ExternalDataSourceConfiguration.cpp b/src/Storages/ExternalDataSourceConfiguration.cpp\nindex 0d6beb1733bc..5710aa6cd6ab 100644\n--- a/src/Storages/ExternalDataSourceConfiguration.cpp\n+++ b/src/Storages/ExternalDataSourceConfiguration.cpp\n@@ -35,7 +35,7 @@ namespace ErrorCodes\n IMPLEMENT_SETTINGS_TRAITS(EmptySettingsTraits, EMPTY_SETTINGS)\n \n static const std::unordered_set<std::string_view> dictionary_allowed_keys = {\n-    \"host\", \"port\", \"user\", \"password\", \"db\",\n+    \"host\", \"port\", \"user\", \"password\", \"quota_key\", \"db\",\n     \"database\", \"table\", \"schema\", \"replica\",\n     \"update_field\", \"update_lag\", \"invalidate_query\", \"query\",\n     \"where\", \"name\", \"secure\", \"uri\", \"collection\"};\n@@ -84,6 +84,7 @@ void ExternalDataSourceConfiguration::set(const ExternalDataSourceConfiguration\n     port = conf.port;\n     username = conf.username;\n     password = conf.password;\n+    quota_key = conf.quota_key;\n     database = conf.database;\n     table = conf.table;\n     schema = conf.schema;\n@@ -123,6 +124,7 @@ std::optional<ExternalDataSourceInfo> getExternalDataSourceConfiguration(\n         configuration.port = config.getInt(collection_prefix + \".port\", 0);\n         configuration.username = config.getString(collection_prefix + \".user\", \"\");\n         configuration.password = config.getString(collection_prefix + \".password\", \"\");\n+        configuration.quota_key = config.getString(collection_prefix + \".quota_key\", \"\");\n         configuration.database = config.getString(collection_prefix + \".database\", \"\");\n         configuration.table = config.getString(collection_prefix + \".table\", config.getString(collection_prefix + \".collection\", \"\"));\n         configuration.schema = config.getString(collection_prefix + \".schema\", \"\");\n@@ -169,6 +171,8 @@ std::optional<ExternalDataSourceInfo> getExternalDataSourceConfiguration(\n                         configuration.username = arg_value.safeGet<String>();\n                     else if (arg_name == \"password\")\n                         configuration.password = arg_value.safeGet<String>();\n+                    else if (arg_name == \"quota_key\")\n+                        configuration.quota_key = arg_value.safeGet<String>();\n                     else if (arg_name == \"database\")\n                         configuration.database = arg_value.safeGet<String>();\n                     else if (arg_name == \"table\")\n@@ -236,6 +240,7 @@ std::optional<ExternalDataSourceInfo> getExternalDataSourceConfiguration(\n         configuration.port = dict_config.getInt(dict_config_prefix + \".port\", config.getUInt(collection_prefix + \".port\", 0));\n         configuration.username = dict_config.getString(dict_config_prefix + \".user\", config.getString(collection_prefix + \".user\", \"\"));\n         configuration.password = dict_config.getString(dict_config_prefix + \".password\", config.getString(collection_prefix + \".password\", \"\"));\n+        configuration.quota_key = dict_config.getString(dict_config_prefix + \".quota_key\", config.getString(collection_prefix + \".quota_key\", \"\"));\n         configuration.database = dict_config.getString(dict_config_prefix + \".db\", config.getString(dict_config_prefix + \".database\",\n             config.getString(collection_prefix + \".db\", config.getString(collection_prefix + \".database\", \"\"))));\n         configuration.table = dict_config.getString(dict_config_prefix + \".table\", config.getString(collection_prefix + \".table\", \"\"));\n@@ -328,6 +333,7 @@ ExternalDataSourcesByPriority getExternalDataSourceConfigurationByPriority(\n         common_configuration.port = dict_config.getUInt(dict_config_prefix + \".port\", 0);\n         common_configuration.username = dict_config.getString(dict_config_prefix + \".user\", \"\");\n         common_configuration.password = dict_config.getString(dict_config_prefix + \".password\", \"\");\n+        common_configuration.quota_key = dict_config.getString(dict_config_prefix + \".quota_key\", \"\");\n         common_configuration.database = dict_config.getString(dict_config_prefix + \".db\", dict_config.getString(dict_config_prefix + \".database\", \"\"));\n         common_configuration.table = dict_config.getString(fmt::format(\"{}.table\", dict_config_prefix), \"\");\n         common_configuration.schema = dict_config.getString(fmt::format(\"{}.schema\", dict_config_prefix), \"\");\n@@ -359,6 +365,7 @@ ExternalDataSourcesByPriority getExternalDataSourceConfigurationByPriority(\n                 replica_configuration.port = dict_config.getUInt(replica_name + \".port\", common_configuration.port);\n                 replica_configuration.username = dict_config.getString(replica_name + \".user\", common_configuration.username);\n                 replica_configuration.password = dict_config.getString(replica_name + \".password\", common_configuration.password);\n+                replica_configuration.quota_key = dict_config.getString(replica_name + \".quota_key\", common_configuration.quota_key);\n \n                 if (replica_configuration.host.empty() || replica_configuration.port == 0\n                     || replica_configuration.username.empty() || replica_configuration.password.empty())\ndiff --git a/src/Storages/ExternalDataSourceConfiguration.h b/src/Storages/ExternalDataSourceConfiguration.h\nindex 4ed46e1b26c0..719fceb7df11 100644\n--- a/src/Storages/ExternalDataSourceConfiguration.h\n+++ b/src/Storages/ExternalDataSourceConfiguration.h\n@@ -19,6 +19,7 @@ struct ExternalDataSourceConfiguration\n     UInt16 port = 0;\n     String username = \"default\";\n     String password;\n+    String quota_key;\n     String database;\n     String table;\n     String schema;\ndiff --git a/src/Storages/HDFS/StorageHDFSCluster.cpp b/src/Storages/HDFS/StorageHDFSCluster.cpp\nindex 08dabfccf556..47a6fbf5eaa2 100644\n--- a/src/Storages/HDFS/StorageHDFSCluster.cpp\n+++ b/src/Storages/HDFS/StorageHDFSCluster.cpp\n@@ -99,7 +99,7 @@ Pipe StorageHDFSCluster::read(\n         {\n             auto connection = std::make_shared<Connection>(\n                 node.host_name, node.port, context->getGlobalContext()->getCurrentDatabase(),\n-                node.user, node.password, node.cluster, node.cluster_secret,\n+                node.user, node.password, node.quota_key, node.cluster, node.cluster_secret,\n                 \"HDFSClusterInititiator\",\n                 node.compression,\n                 node.secure\ndiff --git a/src/Storages/StorageS3Cluster.cpp b/src/Storages/StorageS3Cluster.cpp\nindex 297f806d0866..a3f368effa7e 100644\n--- a/src/Storages/StorageS3Cluster.cpp\n+++ b/src/Storages/StorageS3Cluster.cpp\n@@ -129,7 +129,7 @@ Pipe StorageS3Cluster::read(\n         {\n             auto connection = std::make_shared<Connection>(\n                 node.host_name, node.port, context->getGlobalContext()->getCurrentDatabase(),\n-                node.user, node.password, node.cluster, node.cluster_secret,\n+                node.user, node.password, node.quota_key, node.cluster, node.cluster_secret,\n                 \"S3ClusterInititiator\",\n                 node.compression,\n                 node.secure\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02377_quota_key.reference b/tests/queries/0_stateless/02377_quota_key.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02377_quota_key.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/02377_quota_key.sh b/tests/queries/0_stateless/02377_quota_key.sh\nnew file mode 100755\nindex 000000000000..8aa6797dc2c4\n--- /dev/null\n+++ b/tests/queries/0_stateless/02377_quota_key.sh\n@@ -0,0 +1,16 @@\n+#!/usr/bin/env bash\n+# Tags: no-parallel\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+${CLICKHOUSE_CLIENT} -q \"DROP USER IF EXISTS u_02377\"\n+${CLICKHOUSE_CLIENT} -q \"drop quota if exists q_02377\"\n+${CLICKHOUSE_CLIENT} -q \"CREATE USER u_02377 IDENTIFIED WITH plaintext_password BY 'password';\"\n+${CLICKHOUSE_CLIENT} -q \"CREATE QUOTA q_02377 KEYED BY client_key FOR INTERVAL 1 month MAX queries = 100 TO u_02377;\"\n+\n+${CLICKHOUSE_CLIENT} --user=u_02377 --password=password --quota_key=q_02377 --query=\"select 1\"\n+\n+${CLICKHOUSE_CLIENT} -q \"DROP USER IF EXISTS u_02377\"\n+${CLICKHOUSE_CLIENT} -q \"drop quota if exists q_02377\"\ndiff --git a/tests/queries/0_stateless/02377_quota_key_http.reference b/tests/queries/0_stateless/02377_quota_key_http.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02377_quota_key_http.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/02377_quota_key_http.sh b/tests/queries/0_stateless/02377_quota_key_http.sh\nnew file mode 100755\nindex 000000000000..45e09e1fead2\n--- /dev/null\n+++ b/tests/queries/0_stateless/02377_quota_key_http.sh\n@@ -0,0 +1,16 @@\n+#!/usr/bin/env bash\n+# Tags: no-parallel\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+curl -sS \"${CLICKHOUSE_URL}\" --data \"DROP USER IF EXISTS u_02377\"\n+curl -sS \"${CLICKHOUSE_URL}\" --data \"drop quota if exists q_02377\"\n+curl -sS \"${CLICKHOUSE_URL}\" --data \"CREATE USER u_02377 IDENTIFIED WITH plaintext_password BY 'password'\"\n+curl -sS \"${CLICKHOUSE_URL}\" --data \"CREATE QUOTA q_02377 KEYED BY client_key FOR INTERVAL 1 month MAX queries = 100 TO u_02377\"\n+\n+curl -sS -G \"${CLICKHOUSE_URL}&user=u_02377&password=password&quota_key=q_02377&query=SELECT%201\"\n+\n+curl -sS \"${CLICKHOUSE_URL}\" --data \"DROP USER IF EXISTS u_02377\"\n+curl -sS \"${CLICKHOUSE_URL}\" --data \"drop quota if exists q_02377\"\n",
  "problem_statement": "Quota key not set in the TCPHandler \n**Describe what's wrong**\r\n\r\nThe quota key is not properly set when the clickhouse-client is being used\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nYes it reproduce on the latest relesase: 22.2.1 \r\n\r\n**How to reproduce**:\r\n\r\n```\r\nCREATE USER editor_api IDENTIFIED WITH plaintext_password BY 'password';\r\n\r\nCREATE QUOTA editor_api KEYED BY client_key FOR INTERVAL 1 month MAX queries = 100 TO editor_api;\r\n```\r\n\r\nTry to log in:\r\n\r\n```\r\n ./clickhouse client -u editor_api --password password --quota_key editor_api\r\n ```\r\n \r\n You wll see the following error:\r\n \r\n ```\r\nClickHouse client version 22.2.1.1.\r\nConnecting to localhost:9000 as user editor_api.\r\nConnected to ClickHouse server version 22.2.1 revision 54455.\r\n\r\nCannot load data for command line suggestions: Code: 496. DB::Exception: Received from localhost:9000. DB::Exception: Quota editor_api (for user editor_api) requires a client supplied key.. (QUOTA_REQUIRES_CLIENT_KEY) (version 22.2.1.1)\r\n```\r\n\r\n**Expected behavior**\r\n\r\nIt should log in as the user and also use the provided quota_key\r\n\r\n**Error message and/or stacktrace**:\r\n\r\n```\r\nLog:\r\n2022.01.31 13:44:52.296605 [ 2258835 ] {} <Error> ServerErrorHandler\r\n: Code: 496, e.displayText() = DB::Exception: Quota editor_api (for user editor_api) requires a client supplied key., Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::QuotaCache::QuotaInfo::calculateKey(DB::EnabledQuota const&) const @ 0xe466558 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n1. DB::QuotaCache::chooseQuotaToConsumeFor(DB::EnabledQuota&) @ 0xe468694 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n2. DB::QuotaCache::getEnabledQuota(StrongTypedef<DB::UInt128, DB::UUIDTag> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, boost::container::flat_set<StrongTypedef<DB::UInt128, DB::UUIDTag>, std::__1::less<StrongTypedef<DB::UInt128, DB::UUIDTag> >, void> const&, Poco::Net::IPAddress const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xe467be2 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n3. DB::ContextAccess::setRolesInfo(std::__1::shared_ptr<DB::EnabledRolesInfo const> const&) const @ 0xe3d2eb1 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n4. DB::ContextAccess::setUser(std::__1::shared_ptr<DB::User const> const&) const @ 0xe3d2a17 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n5. DB::ContextAccess::ContextAccess(DB::AccessControlManager const&, DB::ContextAccessParams const&) @ 0xe3d1a0e in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n6. DB::AccessControlManager::ContextAccessCache::getContextAccess(DB::ContextAccessParams const&) @ 0xe3aea89 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n7. DB::AccessControlManager::getContextAccess(StrongTypedef<DB::UInt128, DB::UUIDTag> const&, boost::container::flat_set<StrongTypedef<DB::UInt128, DB::UUIDTag>, std::__1::less<StrongTypedef<DB::UInt128, DB::UUIDTag> >, void> const&, bool, DB::Settings const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ClientInfo const&) const @ 0xe3ae42a in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n8. DB::Context::setUserImpl(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::optional<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > const&, Poco::Net::SocketAddress const&) @ 0xe8521ca in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n9. DB::Context::setUser(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Poco::Net::SocketAddress const&) @ 0xe8526b6 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n10. DB::TCPHandler::receiveHello() @ 0xf694610 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n11. DB::TCPHandler::runImpl() @ 0xf68d8e9 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n12. DB::TCPHandler::run() @ 0xf6a08c9 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n13. Poco::Net::TCPServerConnection::start() @ 0x11d56f1f in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n14. Poco::Net::TCPServerDispatcher::run() @ 0x11d58931 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n15. Poco::PooledThread::run() @ 0x11e8f059 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n16. Poco::ThreadImpl::runnableEntry(void*) @ 0x11e8aeba in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug\r\n17. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n18. clone @ 0x12171f in /lib/x86_64-linux-gnu/libc-2.27.so\r\n (version 21.3.19.1 (official build))\r\n```\r\n\r\n**Additional context**\r\n\r\nAs you can see in the trace log the receiveHello() ClientInfo instance is not provided with the quota_key and also the function\r\n\r\n```\r\nvoid Context::setQuotaKey(String quota_key_)\r\n{\r\n    auto lock = getLock();\r\n    client_info.quota_key = std::move(quota_key_);\r\n}\r\n```\r\n\r\nSeems to never be called.\r\n\n",
  "hints_text": "",
  "created_at": "2022-08-03T19:52:20Z",
  "modified_files": [
    "programs/benchmark/Benchmark.cpp",
    "programs/copier/ClusterCopier.cpp",
    "src/Client/Connection.cpp",
    "src/Client/Connection.h",
    "src/Client/ConnectionParameters.cpp",
    "src/Client/ConnectionParameters.h",
    "src/Client/ConnectionPool.cpp",
    "src/Client/ConnectionPool.h",
    "src/Core/ProtocolDefines.h",
    "src/Dictionaries/ClickHouseDictionarySource.cpp",
    "src/Dictionaries/ClickHouseDictionarySource.h",
    "src/Interpreters/Cluster.cpp",
    "src/Interpreters/Cluster.h",
    "src/Server/TCPHandler.cpp",
    "src/Server/TCPHandler.h",
    "src/Storages/Distributed/DirectoryMonitor.cpp",
    "src/Storages/ExternalDataSourceConfiguration.cpp",
    "src/Storages/ExternalDataSourceConfiguration.h",
    "src/Storages/HDFS/StorageHDFSCluster.cpp",
    "src/Storages/StorageS3Cluster.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02377_quota_key.reference",
    "b/tests/queries/0_stateless/02377_quota_key.sh",
    "b/tests/queries/0_stateless/02377_quota_key_http.reference",
    "b/tests/queries/0_stateless/02377_quota_key_http.sh"
  ]
}