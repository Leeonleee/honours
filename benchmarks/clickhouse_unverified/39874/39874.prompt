You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Quota key not set in the TCPHandler 
**Describe what's wrong**

The quota key is not properly set when the clickhouse-client is being used

**Does it reproduce on recent release?**

Yes it reproduce on the latest relesase: 22.2.1 

**How to reproduce**:

```
CREATE USER editor_api IDENTIFIED WITH plaintext_password BY 'password';

CREATE QUOTA editor_api KEYED BY client_key FOR INTERVAL 1 month MAX queries = 100 TO editor_api;
```

Try to log in:

```
 ./clickhouse client -u editor_api --password password --quota_key editor_api
 ```
 
 You wll see the following error:
 
 ```
ClickHouse client version 22.2.1.1.
Connecting to localhost:9000 as user editor_api.
Connected to ClickHouse server version 22.2.1 revision 54455.

Cannot load data for command line suggestions: Code: 496. DB::Exception: Received from localhost:9000. DB::Exception: Quota editor_api (for user editor_api) requires a client supplied key.. (QUOTA_REQUIRES_CLIENT_KEY) (version 22.2.1.1)
```

**Expected behavior**

It should log in as the user and also use the provided quota_key

**Error message and/or stacktrace**:

```
Log:
2022.01.31 13:44:52.296605 [ 2258835 ] {} <Error> ServerErrorHandler
: Code: 496, e.displayText() = DB::Exception: Quota editor_api (for user editor_api) requires a client supplied key., Stack trace (when copying this message, always include the lines below):

0. DB::QuotaCache::QuotaInfo::calculateKey(DB::EnabledQuota const&) const @ 0xe466558 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
1. DB::QuotaCache::chooseQuotaToConsumeFor(DB::EnabledQuota&) @ 0xe468694 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
2. DB::QuotaCache::getEnabledQuota(StrongTypedef<DB::UInt128, DB::UUIDTag> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, boost::container::flat_set<StrongTypedef<DB::UInt128, DB::UUIDTag>, std::__1::less<StrongTypedef<DB::UInt128, DB::UUIDTag> >, void> const&, Poco::Net::IPAddress const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xe467be2 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
3. DB::ContextAccess::setRolesInfo(std::__1::shared_ptr<DB::EnabledRolesInfo const> const&) const @ 0xe3d2eb1 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
4. DB::ContextAccess::setUser(std::__1::shared_ptr<DB::User const> const&) const @ 0xe3d2a17 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
5. DB::ContextAccess::ContextAccess(DB::AccessControlManager const&, DB::ContextAccessParams const&) @ 0xe3d1a0e in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
6. DB::AccessControlManager::ContextAccessCache::getContextAccess(DB::ContextAccessParams const&) @ 0xe3aea89 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
7. DB::AccessControlManager::getContextAccess(StrongTypedef<DB::UInt128, DB::UUIDTag> const&, boost::container::flat_set<StrongTypedef<DB::UInt128, DB::UUIDTag>, std::__1::less<StrongTypedef<DB::UInt128, DB::UUIDTag> >, void> const&, bool, DB::Settings const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::ClientInfo const&) const @ 0xe3ae42a in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
8. DB::Context::setUserImpl(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::optional<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > const&, Poco::Net::SocketAddress const&) @ 0xe8521ca in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
9. DB::Context::setUser(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, Poco::Net::SocketAddress const&) @ 0xe8526b6 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
10. DB::TCPHandler::receiveHello() @ 0xf694610 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
11. DB::TCPHandler::runImpl() @ 0xf68d8e9 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
12. DB::TCPHandler::run() @ 0xf6a08c9 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
13. Poco::Net::TCPServerConnection::start() @ 0x11d56f1f in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
14. Poco::Net::TCPServerDispatcher::run() @ 0x11d58931 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
15. Poco::PooledThread::run() @ 0x11e8f059 in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
16. Poco::ThreadImpl::runnableEntry(void*) @ 0x11e8aeba in /usr/lib/debug/.build-id/bf/484a6e39f28125643e272a239dd9eabc5906e7.debug
17. start_thread @ 0x76db in /lib/x86_64-linux-gnu/libpthread-2.27.so
18. clone @ 0x12171f in /lib/x86_64-linux-gnu/libc-2.27.so
 (version 21.3.19.1 (official build))
```

**Additional context**

As you can see in the trace log the receiveHello() ClientInfo instance is not provided with the quota_key and also the function

```
void Context::setQuotaKey(String quota_key_)
{
    auto lock = getLock();
    client_info.quota_key = std::move(quota_key_);
}
```

Seems to never be called.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
