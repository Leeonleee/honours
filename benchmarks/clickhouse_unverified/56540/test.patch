diff --git a/tests/queries/0_stateless/00727_concat.reference b/tests/queries/0_stateless/00727_concat.reference
index af5626b4a114..1e102051fd0f 100644
--- a/tests/queries/0_stateless/00727_concat.reference
+++ b/tests/queries/0_stateless/00727_concat.reference
@@ -1,1 +1,67 @@
-Hello, world!
+-- Const string + non-const arbitrary type
+With 42
+With 43
+With 44
+With 45
+With 46
+With 47
+With 48
+With 49
+With 50
+With 51
+With 52
+With 53
+With 42.42
+With 43.43
+With 44
+With true
+With false
+With foo
+With bar
+With foo
+With bar
+With foo
+With bar
+With foo
+With bar
+With 42
+With 42
+With fae310ca-d52a-4923-9e9b-02bf67f4b009
+With 2023-11-14
+With 2123-11-14
+With 2023-11-14 05:50:12
+With 2023-11-14 05:50:12.123
+With hallo
+With [\'foo\',\'bar\']
+With {"foo":"bar"}
+With (42,\'foo\')
+With {42:\'foo\'}
+With 122.233.64.201
+With 2001:1:130f:2:3:9c0:876a:130b
+With (42,43)
+With [(0,0),(10,0),(10,10),(0,10)]
+With [[(20,20),(50,20),(50,50),(20,50)],[(30,30),(50,50),(50,30)]]
+With [[[(0,0),(10,0),(10,10),(0,10)]],[[(20,20),(50,20),(50,50),(20,50)],[(30,30),(50,50),(50,30)]]]
+-- SimpleAggregateFunction
+With 42
+With 4
+-- Nested
+With [\'foo\',\'bar\'][\'qaz\',\'qux\']
+-- NULL arguments
+\N
+\N
+\N
+\N
+\N
+\N
+\N
+-- Various arguments tests
+Non-const strings
+Two arguments test
+Three arguments test
+3 arguments test with int type
+42144
+42144255
+42144
+42144255
+Testing the alias
diff --git a/tests/queries/0_stateless/00727_concat.sql b/tests/queries/0_stateless/00727_concat.sql
index 800ebd5ec539..edeaf9340ddc 100644
--- a/tests/queries/0_stateless/00727_concat.sql
+++ b/tests/queries/0_stateless/00727_concat.sql
@@ -1,1 +1,89 @@
-SELECT CONCAT('Hello', ', ', 'world!');
+-- Tags: no-fasttest
+-- no-fasttest: json type needs rapidjson library, geo types need s2 geometry
+
+SET allow_experimental_object_type = 1;
+SET allow_suspicious_low_cardinality_types=1;
+
+SELECT '-- Const string + non-const arbitrary type';
+SELECT concat('With ', materialize(42 :: Int8));
+SELECT concat('With ', materialize(43 :: Int16));
+SELECT concat('With ', materialize(44 :: Int32));
+SELECT concat('With ', materialize(45 :: Int64));
+SELECT concat('With ', materialize(46 :: Int128));
+SELECT concat('With ', materialize(47 :: Int256));
+SELECT concat('With ', materialize(48 :: UInt8));
+SELECT concat('With ', materialize(49 :: UInt16));
+SELECT concat('With ', materialize(50 :: UInt32));
+SELECT concat('With ', materialize(51 :: UInt64));
+SELECT concat('With ', materialize(52 :: UInt128));
+SELECT concat('With ', materialize(53 :: UInt256));
+SELECT concat('With ', materialize(42.42 :: Float32));
+SELECT concat('With ', materialize(43.43 :: Float64));
+SELECT concat('With ', materialize(44.44 :: Decimal(2)));
+SELECT concat('With ', materialize(true :: Bool));
+SELECT concat('With ', materialize(false :: Bool));
+SELECT concat('With ', materialize('foo' :: String));
+SELECT concat('With ', materialize('bar' :: FixedString(3)));
+SELECT concat('With ', materialize('foo' :: Nullable(String)));
+SELECT concat('With ', materialize('bar' :: Nullable(FixedString(3))));
+SELECT concat('With ', materialize('foo' :: LowCardinality(String)));
+SELECT concat('With ', materialize('bar' :: LowCardinality(FixedString(3))));
+SELECT concat('With ', materialize('foo' :: LowCardinality(Nullable(String))));
+SELECT concat('With ', materialize('bar' :: LowCardinality(Nullable(FixedString(3)))));
+SELECT concat('With ', materialize(42 :: LowCardinality(Nullable(UInt32))));
+SELECT concat('With ', materialize(42 :: LowCardinality(UInt32)));
+SELECT concat('With ', materialize('fae310ca-d52a-4923-9e9b-02bf67f4b009' :: UUID));
+SELECT concat('With ', materialize('2023-11-14' :: Date));
+SELECT concat('With ', materialize('2123-11-14' :: Date32));
+SELECT concat('With ', materialize('2023-11-14 05:50:12' :: DateTime('Europe/Amsterdam')));
+SELECT concat('With ', materialize('2023-11-14 05:50:12.123' :: DateTime64(3, 'Europe/Amsterdam')));
+SELECT concat('With ', materialize('hallo' :: Enum('hallo' = 1)));
+SELECT concat('With ', materialize(['foo', 'bar'] :: Array(String)));
+SELECT concat('With ', materialize('{"foo": "bar"}' :: JSON));
+SELECT concat('With ', materialize((42, 'foo') :: Tuple(Int32, String)));
+SELECT concat('With ', materialize(map(42, 'foo') :: Map(Int32, String)));
+SELECT concat('With ', materialize('122.233.64.201' :: IPv4));
+SELECT concat('With ', materialize('2001:0001:130F:0002:0003:09C0:876A:130B' :: IPv6));
+SELECT concat('With ', materialize((42, 43) :: Point));
+SELECT concat('With ', materialize([(0,0),(10,0),(10,10),(0,10)] :: Ring));
+SELECT concat('With ', materialize([[(20, 20), (50, 20), (50, 50), (20, 50)], [(30, 30), (50, 50), (50, 30)]] :: Polygon));
+SELECT concat('With ', materialize([[[(0, 0), (10, 0), (10, 10), (0, 10)]], [[(20, 20), (50, 20), (50, 50), (20, 50)],[(30, 30), (50, 50), (50, 30)]]] :: MultiPolygon));
+
+SELECT '-- SimpleAggregateFunction';
+DROP TABLE IF EXISTS concat_saf_test;
+CREATE TABLE concat_saf_test(x SimpleAggregateFunction(max, Int32)) ENGINE=MergeTree ORDER BY tuple();
+INSERT INTO concat_saf_test VALUES (42);
+INSERT INTO concat_saf_test SELECT max(number) FROM numbers(5);
+SELECT concat('With ', x) FROM concat_saf_test ORDER BY x DESC;
+DROP TABLE concat_saf_test;
+
+SELECT '-- Nested';
+DROP TABLE IF EXISTS concat_nested_test;
+CREATE TABLE concat_nested_test(attrs Nested(k String, v String)) ENGINE = MergeTree ORDER BY tuple();
+INSERT INTO concat_nested_test VALUES (['foo', 'bar'], ['qaz', 'qux']);
+SELECT concat('With ', attrs.k, attrs.v) FROM concat_nested_test;
+DROP TABLE concat_nested_test;
+
+SELECT '-- NULL arguments';
+SELECT concat(NULL, NULL);
+SELECT concat(NULL, materialize(NULL :: Nullable(UInt64)));
+SELECT concat(materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));
+SELECT concat(42, materialize(NULL :: Nullable(UInt64)));
+SELECT concat('42', materialize(NULL :: Nullable(UInt64)));
+SELECT concat(42, materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));
+SELECT concat('42', materialize(NULL :: Nullable(UInt64)), materialize(NULL :: Nullable(UInt64)));
+
+SELECT '-- Various arguments tests';
+SELECT concat(materialize('Non-const'), materialize(' strings'));
+SELECT concat('Two arguments ', 'test');
+SELECT concat('Three ', 'arguments', ' test');
+SELECT concat(materialize(3 :: Int64), ' arguments test', ' with int type');
+SELECT concat(materialize(42 :: Int32), materialize(144 :: UInt64));
+SELECT concat(materialize(42 :: Int32), materialize(144 :: UInt64), materialize(255 :: UInt32));
+SELECT concat(42, 144);
+SELECT concat(42, 144, 255);
+
+SELECT CONCAT('Testing the ', 'alias');
+
+SELECT concat();  -- { serverError 42 }
+SELECT concat(1); -- { serverError 42 }
diff --git a/tests/queries/0_stateless/02233_interpolate_1.sql b/tests/queries/0_stateless/02233_interpolate_1.sql
index 3d416b27f452..d589a18421be 100644
--- a/tests/queries/0_stateless/02233_interpolate_1.sql
+++ b/tests/queries/0_stateless/02233_interpolate_1.sql
@@ -26,7 +26,7 @@ SELECT n, source, inter FROM (
 # Test INTERPOLATE with incompatible expression - should produce error
 SELECT n, source, inter FROM (
    SELECT toFloat32(number % 10) AS n, 'original' AS source, number as inter FROM numbers(10) WHERE number % 3 = 1
-) ORDER BY n WITH FILL FROM 0 TO 11.51 STEP 0.5 INTERPOLATE (inter AS inter||'inter'); -- { serverError 44 }
+) ORDER BY n WITH FILL FROM 0 TO 11.51 STEP 0.5 INTERPOLATE (inter AS reverse(inter)); -- { serverError 44 }
 
 # Test INTERPOLATE with column from WITH FILL expression - should produce error
 SELECT n, source, inter FROM (
diff --git a/tests/queries/0_stateless/02389_analyzer_nested_lambda.reference b/tests/queries/0_stateless/02389_analyzer_nested_lambda.reference
index 935c53358c05..68eb282a6a1b 100644
--- a/tests/queries/0_stateless/02389_analyzer_nested_lambda.reference
+++ b/tests/queries/0_stateless/02389_analyzer_nested_lambda.reference
@@ -117,5 +117,5 @@ SELECT arrayMap(x -> concat(concat(concat(concat(concat(toString(id), '___\0____
 FROM test_table WHERE concat(concat(concat(toString(id), '___\0_______\0____'), toString(id)), concat(toString(id), NULL), toString(id));
 SELECT '--';
 --
-SELECT arrayMap(x -> concat(toString(id), arrayMap(x -> toString(1), [NULL])), [NULL]) FROM test_table; -- { serverError 44 };
+SELECT arrayMap(x -> splitByChar(toString(id), arrayMap(x -> toString(1), [NULL])), [NULL]) FROM test_table; -- { serverError 44 };
 DROP TABLE test_table;
diff --git a/tests/queries/0_stateless/02389_analyzer_nested_lambda.sql b/tests/queries/0_stateless/02389_analyzer_nested_lambda.sql
index 8f8b5537da90..48e84246d1c9 100644
--- a/tests/queries/0_stateless/02389_analyzer_nested_lambda.sql
+++ b/tests/queries/0_stateless/02389_analyzer_nested_lambda.sql
@@ -122,7 +122,7 @@ FROM test_table WHERE concat(concat(concat(toString(id), '___\0_______\0____'),
 
 SELECT '--';
 
-SELECT arrayMap(x -> concat(toString(id), arrayMap(x -> toString(1), [NULL])), [NULL]) FROM test_table; -- { serverError 44 };
+SELECT arrayMap(x -> splitByChar(toString(id), arrayMap(x -> toString(1), [NULL])), [NULL]) FROM test_table; -- { serverError 44 };
 
 DROP TABLE test_table;
 
diff --git a/tests/queries/0_stateless/02521_analyzer_array_join_crash.reference b/tests/queries/0_stateless/02521_analyzer_array_join_crash.reference
index 59da8ccad1a7..5e7728e05908 100644
--- a/tests/queries/0_stateless/02521_analyzer_array_join_crash.reference
+++ b/tests/queries/0_stateless/02521_analyzer_array_join_crash.reference
@@ -8,4 +8,4 @@ SELECT id, value_element, value FROM test_table ARRAY JOIN [[1,2,3]] AS value_el
 0	[1,2,3]	3
 SELECT value_element, value FROM test_table ARRAY JOIN [1048577] AS value_element, arrayMap(x -> value_element, ['']) AS value;
 1048577	[1048577]
-SELECT arrayFilter(x -> notEmpty(concat(x)), [NULL, NULL]) FROM system.one ARRAY JOIN [1048577] AS elem, arrayMap(x -> concat(x, elem, ''), ['']) AS unused; -- { serverError 44 }
+SELECT arrayFilter(x -> notEmpty(concat(x)), [NULL, NULL]) FROM system.one ARRAY JOIN [1048577] AS elem, arrayMap(x -> splitByChar(x, elem), ['']) AS unused; -- { serverError 44 }
diff --git a/tests/queries/0_stateless/02521_analyzer_array_join_crash.sql b/tests/queries/0_stateless/02521_analyzer_array_join_crash.sql
index c7641a3bee04..53606e01ab7b 100644
--- a/tests/queries/0_stateless/02521_analyzer_array_join_crash.sql
+++ b/tests/queries/0_stateless/02521_analyzer_array_join_crash.sql
@@ -17,7 +17,7 @@ SELECT id, value_element, value FROM test_table ARRAY JOIN [[1,2,3]] AS value_el
 
 SELECT value_element, value FROM test_table ARRAY JOIN [1048577] AS value_element, arrayMap(x -> value_element, ['']) AS value;
 
-SELECT arrayFilter(x -> notEmpty(concat(x)), [NULL, NULL]) FROM system.one ARRAY JOIN [1048577] AS elem, arrayMap(x -> concat(x, elem, ''), ['']) AS unused; -- { serverError 44 }
+SELECT arrayFilter(x -> notEmpty(concat(x)), [NULL, NULL]) FROM system.one ARRAY JOIN [1048577] AS elem, arrayMap(x -> splitByChar(x, elem), ['']) AS unused; -- { serverError 44 }
 
 -- { echoOff }
 
diff --git a/tests/queries/0_stateless/02775_show_columns_called_from_clickhouse.sql b/tests/queries/0_stateless/02775_show_columns_called_from_clickhouse.sql
index 89073bd2943d..3bbcbb1a535c 100644
--- a/tests/queries/0_stateless/02775_show_columns_called_from_clickhouse.sql
+++ b/tests/queries/0_stateless/02775_show_columns_called_from_clickhouse.sql
@@ -5,7 +5,7 @@
 -- Tests the output of SHOW COLUMNS when called through the ClickHouse protocol.
 
 -- -----------------------------------------------------------------------------------
--- Please keep this test in-sync with 02775_show_columns_called_through_mysql.sql
+-- Please keep this test in-sync with 02775_show_columns_called_from_clickhouse.expect
 -- -----------------------------------------------------------------------------------
 
 DROP TABLE IF EXISTS tab;
diff --git a/tests/queries/0_stateless/02775_show_columns_called_from_mysql.expect b/tests/queries/0_stateless/02775_show_columns_called_from_mysql.expect
index bef5bd10ff31..8ba5774820e3 100755
--- a/tests/queries/0_stateless/02775_show_columns_called_from_mysql.expect
+++ b/tests/queries/0_stateless/02775_show_columns_called_from_mysql.expect
@@ -6,7 +6,7 @@
 # Tests the output of SHOW COLUMNS when called through the MySQL protocol.
 
 # -----------------------------------------------------------------------------------
-# Please keep this test in-sync with 02775_show_columns_called_through_clickhouse.sql
+# Please keep this test in-sync with 02775_show_columns_called_from_clickhouse.sql
 # -----------------------------------------------------------------------------------
 
 set basedir [file dirname $argv0]
