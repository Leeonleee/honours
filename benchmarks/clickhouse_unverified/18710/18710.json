{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 18710,
  "instance_id": "ClickHouse__ClickHouse-18710",
  "issue_numbers": [
    "18363",
    "15091"
  ],
  "base_commit": "2a37f5f6878267444adef030a8d7402ff819354d",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionSumMap.cpp b/src/AggregateFunctions/AggregateFunctionSumMap.cpp\nindex ebae17a8a07d..2d4e6dfaf32e 100644\n--- a/src/AggregateFunctions/AggregateFunctionSumMap.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionSumMap.cpp\n@@ -66,8 +66,7 @@ auto parseArguments(const std::string & name, const DataTypes & arguments)\n         values_types.push_back(array_type->getNestedType());\n     }\n \n-    return  std::tuple{std::move(keys_type), std::move(values_types),\n-                tuple_argument};\n+    return std::tuple{std::move(keys_type), std::move(values_types), tuple_argument};\n }\n \n // This function instantiates a particular overload of the sumMap family of\ndiff --git a/src/AggregateFunctions/AggregateFunctionSumMap.h b/src/AggregateFunctions/AggregateFunctionSumMap.h\nindex c991474d0e65..6c8155f967ca 100644\n--- a/src/AggregateFunctions/AggregateFunctionSumMap.h\n+++ b/src/AggregateFunctions/AggregateFunctionSumMap.h\n@@ -54,6 +54,8 @@ struct AggregateFunctionMapData\n   *  ([1,2,3,4,5,6,7,8,9,10],[10,10,45,20,35,20,15,30,20,20])\n   *\n   * minMap and maxMap share the same idea, but calculate min and max correspondingly.\n+  *\n+  * NOTE: The implementation of these functions are \"amateur grade\" - not efficient and low quality.\n   */\n \n template <typename T, typename Derived, typename Visitor, bool overflow, bool tuple_argument, bool compact>\n@@ -72,7 +74,8 @@ class AggregateFunctionMapBase : public IAggregateFunctionDataHelper<\n             const DataTypes & values_types_, const DataTypes & argument_types_)\n         : Base(argument_types_, {} /* parameters */), keys_type(keys_type_),\n           values_types(values_types_)\n-    {}\n+    {\n+    }\n \n     DataTypePtr getReturnType() const override\n     {\n@@ -81,13 +84,26 @@ class AggregateFunctionMapBase : public IAggregateFunctionDataHelper<\n \n         for (const auto & value_type : values_types)\n         {\n+            if constexpr (std::is_same_v<Visitor, FieldVisitorSum>)\n+            {\n+                if (!value_type->isSummable())\n+                    throw Exception{ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                        \"Values for {} cannot be summed, passed type {}\",\n+                        getName(), value_type->getName()};\n+            }\n+\n             DataTypePtr result_type;\n \n             if constexpr (overflow)\n             {\n+                if (value_type->onlyNull())\n+                    throw Exception{ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n+                        \"Cannot calculate {} of type {}\",\n+                        getName(), value_type->getName()};\n+\n                 // Overflow, meaning that the returned type is the same as\n-                // the input type.\n-                result_type = value_type;\n+                // the input type. Nulls are skipped.\n+                result_type = removeNullable(value_type);\n             }\n             else\n             {\n@@ -120,9 +136,9 @@ class AggregateFunctionMapBase : public IAggregateFunctionDataHelper<\n         }\n     }\n \n-    void add(AggregateDataPtr place, const IColumn** _columns, const size_t row_num, Arena *) const override\n+    void add(AggregateDataPtr place, const IColumn ** columns_, const size_t row_num, Arena *) const override\n     {\n-        const auto & columns = getArgumentColumns(_columns);\n+        const auto & columns = getArgumentColumns(columns_);\n \n         // Column 0 contains array of keys of known type\n         const ColumnArray & array_column0 = assert_cast<const ColumnArray &>(*columns[0]);\n@@ -148,16 +164,13 @@ class AggregateFunctionMapBase : public IAggregateFunctionDataHelper<\n             // Insert column values for all keys\n             for (size_t i = 0; i < keys_vec_size; ++i)\n             {\n-                auto value = value_column.operator[](values_vec_offset + i);\n-                auto key = key_column.operator[](keys_vec_offset + i).get<T>();\n+                auto value = value_column[values_vec_offset + i];\n+                auto key = key_column[keys_vec_offset + i].get<T>();\n \n                 if (!keepKey(key))\n                     continue;\n \n-                if (value.isNull())\n-                    continue;\n-\n-                typename std::decay_t<decltype(merged_maps)>::iterator it;\n+                decltype(merged_maps.begin()) it;\n                 if constexpr (IsDecimalNumber<T>)\n                 {\n                     // FIXME why is storing NearestFieldType not enough, and we\n@@ -170,17 +183,20 @@ class AggregateFunctionMapBase : public IAggregateFunctionDataHelper<\n \n                 if (it != merged_maps.end())\n                 {\n-                    applyVisitor(Visitor(value), it->second[col]);\n+                    if (!value.isNull())\n+                    {\n+                        if (it->second[col].isNull())\n+                            it->second[col] = value;\n+                        else\n+                            applyVisitor(Visitor(value), it->second[col]);\n+                    }\n                 }\n                 else\n                 {\n                     // Create a value array for this key\n                     Array new_values;\n-                    new_values.resize(values_types.size());\n-                    for (size_t k = 0; k < new_values.size(); ++k)\n-                    {\n-                        new_values[k] = (k == col) ? value : values_types[k]->getDefault();\n-                    }\n+                    new_values.resize(size);\n+                    new_values[col] = value;\n \n                     if constexpr (IsDecimalNumber<T>)\n                     {\n@@ -207,7 +223,8 @@ class AggregateFunctionMapBase : public IAggregateFunctionDataHelper<\n             if (it != merged_maps.end())\n             {\n                 for (size_t col = 0; col < values_types.size(); ++col)\n-                    applyVisitor(Visitor(elem.second[col]), it->second[col]);\n+                    if (!elem.second[col].isNull())\n+                        applyVisitor(Visitor(elem.second[col]), it->second[col]);\n             }\n             else\n                 merged_maps[elem.first] = elem.second;\n@@ -253,6 +270,8 @@ class AggregateFunctionMapBase : public IAggregateFunctionDataHelper<\n \n     void insertResultInto(AggregateDataPtr place, IColumn & to, Arena *) const override\n     {\n+        size_t num_columns = values_types.size();\n+\n         // Final step does compaction of keys that have zero values, this mutates the state\n         auto & merged_maps = this->data(place).merged_maps;\n \n@@ -263,9 +282,9 @@ class AggregateFunctionMapBase : public IAggregateFunctionDataHelper<\n             {\n                 // Key is not compacted if it has at least one non-zero value\n                 bool erase = true;\n-                for (size_t col = 0; col < values_types.size(); ++col)\n+                for (size_t col = 0; col < num_columns; ++col)\n                 {\n-                    if (it->second[col] != values_types[col]->getDefault())\n+                    if (!it->second[col].isNull() && it->second[col] != values_types[col]->getDefault())\n                     {\n                         erase = false;\n                         break;\n@@ -290,7 +309,7 @@ class AggregateFunctionMapBase : public IAggregateFunctionDataHelper<\n         to_keys_offsets.push_back(to_keys_offsets.back() + size);\n         to_keys_col.reserve(size);\n \n-        for (size_t col = 0; col < values_types.size(); ++col)\n+        for (size_t col = 0; col < num_columns; ++col)\n         {\n             auto & to_values_arr = assert_cast<ColumnArray &>(to_tuple.getColumn(col + 1));\n             auto & to_values_offsets = to_values_arr.getOffsets();\n@@ -305,10 +324,13 @@ class AggregateFunctionMapBase : public IAggregateFunctionDataHelper<\n             to_keys_col.insert(elem.first);\n \n             // Write 0..n arrays of values\n-            for (size_t col = 0; col < values_types.size(); ++col)\n+            for (size_t col = 0; col < num_columns; ++col)\n             {\n                 auto & to_values_col = assert_cast<ColumnArray &>(to_tuple.getColumn(col + 1)).getData();\n-                to_values_col.insert(elem.second[col]);\n+                if (elem.second[col].isNull())\n+                    to_values_col.insertDefault();\n+                else\n+                    to_values_col.insert(elem.second[col]);\n             }\n         }\n     }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01422_map_skip_null.reference b/tests/queries/0_stateless/01422_map_skip_null.reference\nindex 7211e0ac75dc..834561262789 100644\n--- a/tests/queries/0_stateless/01422_map_skip_null.reference\n+++ b/tests/queries/0_stateless/01422_map_skip_null.reference\n@@ -1,7 +1,4 @@\n-([],[])\n-([],[])\n-([],[])\n-([2],[11])\n-([2],[22])\n+([1,2],[0,11])\n+([1,2],[0,22])\n ([2],[33])\n ([2],[33])\ndiff --git a/tests/queries/0_stateless/01422_map_skip_null.sql b/tests/queries/0_stateless/01422_map_skip_null.sql\nindex 9af46758289e..683757a473b0 100644\n--- a/tests/queries/0_stateless/01422_map_skip_null.sql\n+++ b/tests/queries/0_stateless/01422_map_skip_null.sql\n@@ -1,7 +1,7 @@\n-select minMap(arrayJoin([([1], [null]), ([1], [null])]));\n-select maxMap(arrayJoin([([1], [null]), ([1], [null])]));\n+select minMap(arrayJoin([([1], [null]), ([1], [null])])); -- { serverError 43 }\n+select maxMap(arrayJoin([([1], [null]), ([1], [null])])); -- { serverError 43 }\n select sumMap(arrayJoin([([1], [null]), ([1], [null])])); -- { serverError 43 }\n-select sumMapWithOverflow(arrayJoin([([1], [null]), ([1], [null])]));\n+select sumMapWithOverflow(arrayJoin([([1], [null]), ([1], [null])])); -- { serverError 43 }\n \n select minMap(arrayJoin([([1, 2], [null, 11]), ([1, 2], [null, 22])]));\n select maxMap(arrayJoin([([1, 2], [null, 11]), ([1, 2], [null, 22])]));\ndiff --git a/tests/queries/0_stateless/01621_summap_check_types.reference b/tests/queries/0_stateless/01621_summap_check_types.reference\nnew file mode 100644\nindex 000000000000..1aeb897d4d0c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01621_summap_check_types.reference\n@@ -0,0 +1,1 @@\n+([1,2],[1,2],[1,0])\ndiff --git a/tests/queries/0_stateless/01621_summap_check_types.sql b/tests/queries/0_stateless/01621_summap_check_types.sql\nnew file mode 100644\nindex 000000000000..a950f3ea094b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01621_summap_check_types.sql\n@@ -0,0 +1,5 @@\n+select initializeAggregation('sumMap', [1, 2], [1, 2], [1, null]);\n+\n+CREATE TEMPORARY TABLE sum_map_overflow (events Array(UInt8), counts Array(UInt8));\n+INSERT INTO sum_map_overflow VALUES ([1], [255]), ([1], [2]);\n+SELECT [NULL], sumMapWithOverflow(events, [NULL], [[(NULL)]], counts) FROM sum_map_overflow; -- { serverError 43 }\ndiff --git a/tests/queries/0_stateless/01634_sum_map_nulls.reference b/tests/queries/0_stateless/01634_sum_map_nulls.reference\nnew file mode 100644\nindex 000000000000..cba3db5eb236\n--- /dev/null\n+++ b/tests/queries/0_stateless/01634_sum_map_nulls.reference\n@@ -0,0 +1,4 @@\n+([1,2],[2,1],[9,0])\n+([1,2],[2,1],[-1,0])\n+([1,2],[2,1],[9,10])\n+([1,2],[2,1],[-1,10])\ndiff --git a/tests/queries/0_stateless/01634_sum_map_nulls.sql b/tests/queries/0_stateless/01634_sum_map_nulls.sql\nnew file mode 100644\nindex 000000000000..a0b892f98030\n--- /dev/null\n+++ b/tests/queries/0_stateless/01634_sum_map_nulls.sql\n@@ -0,0 +1,5 @@\n+SELECT initializeAggregation('sumMap', [1, 2, 1], [1, 1, 1], [-1, null, 10]);\n+SELECT initializeAggregation('sumMap', [1, 2, 1], [1, 1, 1], [-1, null, null]);\n+SELECT initializeAggregation('sumMap', [1, 2, 1], [1, 1, 1], [null, null, null]); -- { serverError 43 }\n+SELECT initializeAggregation('sumMap', [1, 2, 1], [1, 1, 1], [-1, 10, 10]);\n+SELECT initializeAggregation('sumMap', [1, 2, 1], [1, 1, 1], [-1, 10, null]);\ndiff --git a/tests/queries/0_stateless/01635_sum_map_fuzz.reference b/tests/queries/0_stateless/01635_sum_map_fuzz.reference\nnew file mode 100644\nindex 000000000000..1aeb897d4d0c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01635_sum_map_fuzz.reference\n@@ -0,0 +1,1 @@\n+([1,2],[1,2],[1,0])\ndiff --git a/tests/queries/0_stateless/01635_sum_map_fuzz.sql b/tests/queries/0_stateless/01635_sum_map_fuzz.sql\nnew file mode 100644\nindex 000000000000..0749e6e6be63\n--- /dev/null\n+++ b/tests/queries/0_stateless/01635_sum_map_fuzz.sql\n@@ -0,0 +1,6 @@\n+SELECT finalizeAggregation(*) FROM (select initializeAggregation('sumMapState', [1, 2], [1, 2], [1, null]));\n+\n+DROP TABLE IF EXISTS sum_map_overflow;\n+CREATE TABLE sum_map_overflow(events Array(UInt8), counts Array(UInt8)) ENGINE = Log;\n+SELECT [NULL], sumMapWithOverflow(events, [NULL], [[(NULL)]], counts) FROM sum_map_overflow; -- { serverError 43 }\n+DROP TABLE sum_map_overflow;\n",
  "problem_statement": "Debug assertion: 'Cannot sum Arrays'.\n**Describe the bug**\r\nA problem with algorithm of `sumMap/sumMapWithOverflow` functions - correctly check that arguments can be added.\r\n\r\n**How to reproduce**\r\n* ClickHouse v20.13.1\r\n* `CREATE TABLE sum_map_overflow(events Array(UInt8), counts Array(UInt8)) ENGINE = Log` from `00502_sum_map.sql`\r\n* `SELECT [NULL], sumMapWithOverflow(events, [NULL], [[(NULL)]], counts) FROM sum_map_overflow`\r\n\r\n**Expected behavior**\r\nA message with indication of error.\r\n\r\n**Error message and/or stacktrace**\r\n<details>\r\n<summary>See the stacktrace</summary>\r\n\r\n```\r\n2020.12.21 23:04:20.426324 [ 65 ] {72e632f4-781a-4c0e-9be3-1566d94fcdb3} <Debug> executeQuery: (from [::1]:35918, using old parser) SELECT [NULL], sumMapWithOverflow(events, [NULL], [[(NULL)]], counts) FROM sum_map_overflow\r\n2020.12.21 23:04:20.429444 [ 65 ] {72e632f4-781a-4c0e-9be3-1566d94fcdb3} <Trace> ContextAccess (default): Access granted: SELECT(events, counts) ON default.sum_map_overflow\r\n2020.12.21 23:04:20.429930 [ 65 ] {72e632f4-781a-4c0e-9be3-1566d94fcdb3} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2020.12.21 23:04:20.436074 [ 222 ] {72e632f4-781a-4c0e-9be3-1566d94fcdb3} <Trace> AggregatingTransform: Aggregating\r\n2020.12.21 23:04:20.436191 [ 222 ] {72e632f4-781a-4c0e-9be3-1566d94fcdb3} <Trace> Aggregator: Aggregation method: without_key\r\n2020.12.21 23:04:20.436599 [ 222 ] {72e632f4-781a-4c0e-9be3-1566d94fcdb3} <Fatal> : Logical error: 'Cannot sum Arrays'.\r\n2020.12.21 23:04:20.437478 [ 63 ] {} <Trace> BaseDaemon: Received signal 6\r\n2020.12.21 23:04:20.437843 [ 233 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.12.21 23:04:20.438133 [ 233 ] {} <Fatal> BaseDaemon: (version 20.13.1.5483, build id: 059BFB189EBC637B) (from thread 222) (query_id: 72e632f4-781a-4c0e-9be3-1566d94fcdb3) Received signal Aborted (6)\r\n2020.12.21 23:04:20.438457 [ 233 ] {} <Fatal> BaseDaemon: \r\n2020.12.21 23:04:20.438781 [ 233 ] {} <Fatal> BaseDaemon: Stack trace: 0x7f332c18ffb7 0x7f332c191921 0x112e52ac 0x112e5351 0x11953caf 0x11953747 0x11952ff2 0x11a0e85a 0x11a0f7e6 0x1a5e5551 0x1a5e6777 0x1b927c1b 0x1b926041 0x1b65c6cc 0x1b65c62f 0x1b65c5ed 0x1b65c59d 0x1b65c56d 0x1b65b6ce 0x1130b785 0x1130aa15 0x1b659fe5 0x1b65a7d9 0x1b658d2c 0x1b658246 0x1b672b77 0x1b672ac2 0x1b672a4d\r\n2020.12.21 23:04:20.439305 [ 233 ] {} <Fatal> BaseDaemon: 4. /build/glibc-S7xCS9/glibc-2.27/signal/../sysdeps/unix/sysv/linux/raise.c:51: raise @ 0x3efb7 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so\r\n2020.12.21 23:04:20.439522 [ 233 ] {} <Fatal> BaseDaemon: 5. /build/glibc-S7xCS9/glibc-2.27/stdlib/abort.c:81: abort @ 0x40921 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so\r\n2020.12.21 23:04:20.439993 [ 233 ] {} <Fatal> BaseDaemon: 6. /build/obj-x86_64-linux-gnu/../src/Common/Exception.cpp:50: DB::handle_error_code(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x112e52ac in /workspace/clickhouse\r\n2020.12.21 23:04:20.440460 [ 233 ] {} <Fatal> BaseDaemon: 7. /build/obj-x86_64-linux-gnu/../src/Common/Exception.cpp:56: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x112e5351 in /workspace/clickhouse\r\n2020.12.21 23:04:20.443736 [ 233 ] {} <Fatal> BaseDaemon: 8. /build/obj-x86_64-linux-gnu/../src/Common/FieldVisitors.h:301: DB::FieldVisitorSum::operator()(DB::Array&) const @ 0x11953caf in /workspace/clickhouse\r\n2020.12.21 23:04:20.446855 [ 233 ] {} <Fatal> BaseDaemon: 9. /build/obj-x86_64-linux-gnu/../src/Core/Field.h:585: auto DB::Field::dispatch<DB::FieldVisitorSum, DB::Field&>(DB::FieldVisitorSum&&, DB::Field&) @ 0x11953747 in /workspace/clickhouse\r\n2020.12.21 23:04:20.449663 [ 233 ] {} <Fatal> BaseDaemon: 10. /build/obj-x86_64-linux-gnu/../src/Common/FieldVisitors.h:46: auto DB::applyVisitor<DB::FieldVisitorSum, DB::Field&>(DB::FieldVisitorSum&&, DB::Field&) @ 0x11952ff2 in /workspace/clickhouse\r\n2020.12.21 23:04:20.459945 [ 233 ] {} <Fatal> BaseDaemon: 11. /build/obj-x86_64-linux-gnu/../src/AggregateFunctions/AggregateFunctionSumMap.h:173: DB::AggregateFunctionMapBase<char8_t, DB::AggregateFunctionSumMap<char8_t, true, false>, DB::FieldVisitorSum, true, false, true>::add(char*, DB::IColumn const**, unsigned long, DB::Arena*) const @ 0x11a0e85a in /workspace/clickhouse\r\n2020.12.21 23:04:20.470616 [ 233 ] {} <Fatal> BaseDaemon: 12. /build/obj-x86_64-linux-gnu/../src/AggregateFunctions/IAggregateFunction.h:228: DB::IAggregateFunctionHelper<DB::AggregateFunctionSumMap<char8_t, true, false> >::addBatchSinglePlace(unsigned long, char*, DB::IColumn const**, DB::Arena*) const @ 0x11a0f7e6 in /workspace/clickhouse\r\n2020.12.21 23:04:20.510447 [ 233 ] {} <Fatal> BaseDaemon: 13. /build/obj-x86_64-linux-gnu/../src/Interpreters/Aggregator.cpp:624: DB::Aggregator::executeWithoutKeyImpl(char*&, unsigned long, DB::Aggregator::AggregateFunctionInstruction*, DB::Arena*) @ 0x1a5e5551 in /workspace/clickhouse\r\n2020.12.21 23:04:20.549930 [ 233 ] {} <Fatal> BaseDaemon: 14. /build/obj-x86_64-linux-gnu/../src/Interpreters/Aggregator.cpp:767: DB::Aggregator::executeOnBlock(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >, unsigned long, DB::AggregatedDataVariants&, std::__1::vector<DB::IColumn const*, std::__1::allocator<DB::IColumn const*> >&, std::__1::vector<std::__1::vector<DB::IColumn const*, std::__1::allocator<DB::IColumn const*> >, std::__1::allocator<std::__1::vector<DB::IColumn const*, std::__1::allocator<DB::IColumn const*> > > >&, bool&) @ 0x1a5e6777 in /workspace/clickhouse\r\n2020.12.21 23:04:20.599929 [ 233 ] {} <Fatal> BaseDaemon: 15. /build/obj-x86_64-linux-gnu/../src/Processors/Transforms/AggregatingTransform.cpp:524: DB::AggregatingTransform::consume(DB::Chunk) @ 0x1b927c1b in /workspace/clickhouse\r\n2020.12.21 23:04:20.606517 [ 70 ] {} <Trace> SystemLog (system.query_log): Flushing system log, 288 entries to flush\r\n2020.12.21 23:04:20.651332 [ 233 ] {} <Fatal> BaseDaemon: 16. /build/obj-x86_64-linux-gnu/../src/Processors/Transforms/AggregatingTransform.cpp:494: DB::AggregatingTransform::work() @ 0x1b926041 in /workspace/clickhouse\r\n2020.12.21 23:04:20.654534 [ 70 ] {} <Debug> DiskLocal: Reserving 1.00 MiB on disk `default`, having unreserved 1.74 TiB.\r\n2020.12.21 23:04:20.691238 [ 70 ] {} <Trace> system.query_log (1c1e427e-f867-4efe-94d9-9f18ce855ac2): Renaming temporary part tmp_insert_202012_50_50_0 to 202012_50_50_0.\r\n2020.12.21 23:04:20.693717 [ 70 ] {} <Trace> SystemLog (system.query_log): Flushed system log\r\n2020.12.21 23:04:20.700893 [ 233 ] {} <Fatal> BaseDaemon: 17. /build/obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:79: DB::executeJob(DB::IProcessor*) @ 0x1b65c6cc in /workspace/clickhouse\r\n2020.12.21 23:04:20.749573 [ 233 ] {} <Fatal> BaseDaemon: 18. /build/obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:96: DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0::operator()() const @ 0x1b65c62f in /workspace/clickhouse\r\n2020.12.21 23:04:20.798132 [ 233 ] {} <Fatal> BaseDaemon: 19. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3519: decltype(std::__1::forward<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(fp)()) std::__1::__invoke<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&) @ 0x1b65c5ed in /workspace/clickhouse\r\n2020.12.21 23:04:20.846187 [ 233 ] {} <Fatal> BaseDaemon: 20. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/__functional_base:349: void std::__1::__invoke_void_return_wrapper<void>::__call<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&) @ 0x1b65c59d in /workspace/clickhouse\r\n2020.12.21 23:04:20.894228 [ 233 ] {} <Fatal> BaseDaemon: 21. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:1540: std::__1::__function::__alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, std::__1::allocator<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0>, void ()>::operator()() @ 0x1b65c56d in /workspace/clickhouse\r\n2020.12.21 23:04:20.942330 [ 233 ] {} <Fatal> BaseDaemon: 22. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:1714: std::__1::__function::__func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, std::__1::allocator<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0>, void ()>::operator()() @ 0x1b65b6ce in /workspace/clickhouse\r\n2020.12.21 23:04:20.942864 [ 233 ] {} <Fatal> BaseDaemon: 23. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:1867: std::__1::__function::__value_func<void ()>::operator()() const @ 0x1130b785 in /workspace/clickhouse\r\n2020.12.21 23:04:20.943243 [ 233 ] {} <Fatal> BaseDaemon: 24. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2473: std::__1::function<void ()>::operator()() const @ 0x1130aa15 in /workspace/clickhouse\r\n2020.12.21 23:04:20.991598 [ 233 ] {} <Fatal> BaseDaemon: 25. /build/obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:565: DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x1b659fe5 in /workspace/clickhouse\r\n2020.12.21 23:04:21.039934 [ 233 ] {} <Fatal> BaseDaemon: 26. /build/obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:478: DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) @ 0x1b65a7d9 in /workspace/clickhouse\r\n2020.12.21 23:04:21.088388 [ 233 ] {} <Fatal> BaseDaemon: 27. /build/obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:755: DB::PipelineExecutor::executeImpl(unsigned long) @ 0x1b658d2c in /workspace/clickhouse\r\n2020.12.21 23:04:21.136495 [ 233 ] {} <Fatal> BaseDaemon: 28. /build/obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:400: DB::PipelineExecutor::execute(unsigned long) @ 0x1b658246 in /workspace/clickhouse\r\n2020.12.21 23:04:21.187331 [ 233 ] {} <Fatal> BaseDaemon: 29. /build/obj-x86_64-linux-gnu/../src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:79: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long) @ 0x1b672b77 in /workspace/clickhouse\r\n2020.12.21 23:04:21.238629 [ 233 ] {} <Fatal> BaseDaemon: 30. /build/obj-x86_64-linux-gnu/../src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:101: DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0::operator()() const @ 0x1b672ac2 in /workspace/clickhouse\r\n2020.12.21 23:04:21.250680 [ 75 ] {} <Debug> DiskLocal: Reserving 1.34 MiB on disk `default`, having unreserved 1.74 TiB.\r\n2020.12.21 23:04:21.264091 [ 75 ] {} <Trace> system.text_log (8ba52c3e-fce0-49ca-967b-2e1be72ad2d4): Renaming temporary part tmp_insert_202012_53_53_0 to 202012_53_53_0.\r\n2020.12.21 23:04:21.288295 [ 233 ] {} <Fatal> BaseDaemon: 31. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/type_traits:3525: decltype(std::__1::forward<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(fp)()) std::__1::__invoke_constexpr<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&) @ 0x1b672a4d in /workspace/clickhouse\r\n```\r\n</details>\r\n\r\n[Full server log with Crash StackTrace](https://clickhouse-test-reports.s3.yandex.net/17639/a6bcd4d54e9ff16dc7dbd4f7657a1ce0284e1c65/fuzzer/server.log)\r\n\nDebug assertion: sumMap: cannot sum Nulls\n```\r\nselect initializeAggregation('sumMapState', [1, 2], [1, 2], [1, null])\r\n\r\n\r\n\r\n2020.09.21 20:35:42.144442 [ 1312410 ] {6dcf02ac-c157-4548-8f69-67f146de3f1c} <Error> : Logical error: 'Cannot sum Nulls'.\r\nclickhouse-server: /home/akuzm/ch2/ch/src/Common/Exception.cpp:45: DB::Exception::Exception(const std::string &, int): Assertion `false' failed.\r\n2020.09.21 20:35:42.144773 [ 1312346 ] {} <Trace> BaseDaemon: Received signal 6\r\n2020.09.21 20:35:42.145108 [ 1312420 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.09.21 20:35:42.145650 [ 1312420 ] {} <Fatal> BaseDaemon: (version 20.10.1.1, build id: 2B558334E2794B91) (from thread 1312410) (query_id: 6dcf02ac-c157-4548-8f69-67f146de3f1c) Received signal Aborted (6)\r\n2020.09.21 20:35:42.145773 [ 1312420 ] {} <Fatal> BaseDaemon: \r\n2020.09.21 20:35:42.145972 [ 1312420 ] {} <Fatal> BaseDaemon: Stack trace: 0x7f2bdc36b18b 0x7f2bdc34a859 0x7f2bdc34a729 0x7f2bdc35bf36 0x7f2be02af505 0x7f2bdb4606f4 0x7f2bdb4603c1 0x7f2bdb45fb12 0x7f2bdb4b2653 0x7f2bdb4b3571 0x7f2bd4aef0cb 0x7f2bd2964581 0x7f2bd2963a8f 0x7f2bd3522c83 0x7f2bd352285e 0x7f2bd3522c00 0x7f2bd3523d8d 0x7f2bcb0667f6 0x7f2bcb06a034 0x7f2bcb069a33 0x7f2bcac400c2 0x7f2bcac49fa6 0x7f2bcac4370a 0x7f2bcac40697 0x7f2bcb08a58d 0x7f2bcb098876 0x7f2bcb08a59f 0x7f2bcb08113d\r\n2020.09.21 20:35:42.146326 [ 1312420 ] {} <Fatal> BaseDaemon: 4. /build/glibc-YYA7BZ/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51: __GI_raise @ 0x4618b in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.09.21 20:35:42.146483 [ 1312420 ] {} <Fatal> BaseDaemon: 5. /build/glibc-YYA7BZ/glibc-2.31/stdlib/abort.c:81: abort @ 0x25859 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.09.21 20:35:42.146692 [ 1312420 ] {} <Fatal> BaseDaemon: 6. /build/glibc-YYA7BZ/glibc-2.31/intl/loadmsgcat.c:509: _nl_load_domain.cold @ 0x25729 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.09.21 20:35:42.146956 [ 1312420 ] {} <Fatal> BaseDaemon: 7. ? @ 0x36f36 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.09.21 20:35:42.147243 [ 1312420 ] {} <Fatal> BaseDaemon: 8. /home/akuzm/ch2/ch/src/Common/Exception.cpp:48: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x2b4505 in /home/akuzm/ch2/build-clang10/src/libclickhouse_common_iod.so\r\n2020.09.21 20:35:42.151546 [ 1312420 ] {} <Fatal> BaseDaemon: 9. /home/akuzm/ch2/ch/src/Common/FieldVisitors.h:253: DB::FieldVisitorSum::operator()(DB::Null&) const @ 0x4f276f4 in /home/akuzm/ch2/build-clang10/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so\r\n2020.09.21 20:35:42.155755 [ 1312420 ] {} <Fatal> BaseDaemon: 10. /home/akuzm/ch2/ch/src/Core/Field.h:563: auto DB::Field::dispatch<DB::FieldVisitorSum, DB::Field&>(DB::FieldVisitorSum&&, DB::Field&) @ 0x4f273c1 in /home/akuzm/ch2/build-clang10/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so\r\n2020.09.21 20:35:42.159981 [ 1312420 ] {} <Fatal> BaseDaemon: 11. /home/akuzm/ch2/ch/src/Common/FieldVisitors.h:45: auto DB::applyVisitor<DB::FieldVisitorSum, DB::Field&>(DB::FieldVisitorSum&&, DB::Field&) @ 0x4f26b12 in /home/akuzm/ch2/build-clang10/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so\r\n2020.09.21 20:35:42.167089 [ 1312420 ] {} <Fatal> BaseDaemon: 12. /home/akuzm/ch2/ch/src/AggregateFunctions/AggregateFunctionSumMap.h:173: DB::AggregateFunctionMapBase<char8_t, DB::AggregateFunctionSumMap<char8_t, false, false>, DB::FieldVisitorSum, false, false>::add(char*, DB::IColumn const**, unsigned long, DB::Arena*) const @ 0x4f79653 in /home/akuzm/ch2/build-clang10/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so\r\n2020.09.21 20:35:42.174250 [ 1312420 ] {} <Fatal> BaseDaemon: 13. /home/akuzm/ch2/ch/src/AggregateFunctions/IAggregateFunction.h:223: DB::IAggregateFunctionHelper<DB::AggregateFunctionSumMap<char8_t, false, false> >::addBatch(unsigned long, char**, unsigned long, DB::IColumn const**, DB::Arena*) const @ 0x4f7a571 in /home/akuzm/ch2/build-clang10/src/AggregateFunctions/libclickhouse_aggregate_functionsd.so\r\n2020.09.21 20:35:42.180593 [ 1312420 ] {} <Fatal> BaseDaemon: 14. /home/akuzm/ch2/ch/src/Functions/initializeAggregation.cpp:145: DB::(anonymous namespace)::FunctionInitializeAggregation::executeImpl(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long) const @ 0x4cd00cb in /home/akuzm/ch2/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.09.21 20:35:42.181058 [ 1312420 ] {} <Fatal> BaseDaemon: 15. /home/akuzm/ch2/ch/src/Functions/IFunctionImpl.h:202: DB::IFunction::executeImplDryRun(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long) const @ 0x2b45581 in /home/akuzm/ch2/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.09.21 20:35:42.181477 [ 1312420 ] {} <Fatal> BaseDaemon: 16. /home/akuzm/ch2/ch/src/Functions/IFunctionAdaptors.h:156: DB::DefaultExecutable::executeDryRun(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long) @ 0x2b44a8f in /home/akuzm/ch2/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.09.21 20:35:42.183019 [ 1312420 ] {} <Fatal> BaseDaemon: 17. /home/akuzm/ch2/ch/src/Functions/IFunction.cpp:323: DB::ExecutableFunctionAdaptor::executeWithoutLowCardinalityColumns(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) @ 0x3703c83 in /home/akuzm/ch2/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.09.21 20:35:42.184584 [ 1312420 ] {} <Fatal> BaseDaemon: 18. /home/akuzm/ch2/ch/src/Functions/IFunction.cpp:266: DB::ExecutableFunctionAdaptor::defaultImplementationForConstantArguments(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) @ 0x370385e in /home/akuzm/ch2/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.09.21 20:35:42.186387 [ 1312420 ] {} <Fatal> BaseDaemon: 19. /home/akuzm/ch2/ch/src/Functions/IFunction.cpp:316: DB::ExecutableFunctionAdaptor::executeWithoutLowCardinalityColumns(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) @ 0x3703c00 in /home/akuzm/ch2/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.09.21 20:35:42.188607 [ 1312420 ] {} <Fatal> BaseDaemon: 20. /home/akuzm/ch2/ch/src/Functions/IFunction.cpp:486: DB::ExecutableFunctionAdaptor::execute(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) @ 0x3704d8d in /home/akuzm/ch2/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.09.21 20:35:42.190592 [ 1312420 ] {} <Fatal> BaseDaemon: 21. /home/akuzm/ch2/ch/src/Interpreters/ExpressionActions.cpp:201: DB::ExpressionAction::prepare(DB::Block&, DB::Settings const&, std::__1::unordered_set<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&) @ 0x13aa7f6 in /home/akuzm/ch2/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.09.21 20:35:42.192425 [ 1312420 ] {} <Fatal> BaseDaemon: 22. /home/akuzm/ch2/ch/src/Interpreters/ExpressionActions.cpp:597: DB::ExpressionActions::addImpl(DB::ExpressionAction, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&) @ 0x13ae034 in /home/akuzm/ch2/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.09.21 20:35:42.193804 [ 1312420 ] {} <Fatal> BaseDaemon: 23. /home/akuzm/ch2/ch/src/Interpreters/ExpressionActions.cpp:561: DB::ExpressionActions::add(DB::ExpressionAction const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&) @ 0x13ada33 in /home/akuzm/ch2/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.09.21 20:35:42.194196 [ 1312420 ] {} <Fatal> BaseDaemon: 24. /home/akuzm/ch2/ch/src/Interpreters/ActionsVisitor.cpp:438: DB::ScopeStack::addAction(DB::ExpressionAction const&) @ 0xf840c2 in /home/akuzm/ch2/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.09.21 20:35:42.194669 [ 1312420 ] {} <Fatal> BaseDaemon: 25. /home/akuzm/ch2/ch/src/Interpreters/ActionsVisitor.h:120: DB::ActionsMatcher::Data::addAction(DB::ExpressionAction const&) @ 0xf8dfa6 in /home/akuzm/ch2/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.09.21 20:35:42.194958 [ 1312420 ] {} <Fatal> BaseDaemon: 26. /home/akuzm/ch2/ch/src/Interpreters/ActionsVisitor.cpp:790: DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0xf8770a in /home/akuzm/ch2/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.09.21 20:35:42.195206 [ 1312420 ] {} <Fatal> BaseDaemon: 27. /home/akuzm/ch2/ch/src/Interpreters/ActionsVisitor.cpp:508: DB::ActionsMatcher::visit(std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0xf84697 in /home/akuzm/ch2/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.09.21 20:35:42.196457 [ 1312420 ] {} <Fatal> BaseDaemon: 28. /home/akuzm/ch2/ch/src/Interpreters/InDepthNodeVisitor.h:32: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) @ 0x13ce58d in /home/akuzm/ch2/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.09.21 20:35:42.200321 [ 1312420 ] {} <Fatal> BaseDaemon: 29. /home/akuzm/ch2/ch/src/Interpreters/InDepthNodeVisitor.h:45: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, std::__1::shared_ptr<DB::IAST> const>::visitChildren(std::__1::shared_ptr<DB::IAST> const&) @ 0x13dc876 in /home/akuzm/ch2/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.09.21 20:35:42.201857 [ 1312420 ] {} <Fatal> BaseDaemon: 30. /home/akuzm/ch2/ch/src/Interpreters/InDepthNodeVisitor.h:35: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) @ 0x13ce59f in /home/akuzm/ch2/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.09.21 20:35:42.203536 [ 1312420 ] {} <Fatal> BaseDaemon: 31. /home/akuzm/ch2/ch/src/Interpreters/ExpressionAnalyzer.cpp:384: DB::ExpressionAnalyzer::getRootActions(std::__1::shared_ptr<DB::IAST> const&, bool, std::__1::shared_ptr<DB::ExpressionActions>&, bool) @ 0x13c513d in /home/akuzm/ch2/build-clang10/src/libclickhouse_interpretersd.so\r\n```\n",
  "hints_text": "\n",
  "created_at": "2021-01-04T01:55:34Z",
  "modified_files": [
    "src/AggregateFunctions/AggregateFunctionSumMap.cpp",
    "src/AggregateFunctions/AggregateFunctionSumMap.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01422_map_skip_null.reference",
    "tests/queries/0_stateless/01422_map_skip_null.sql",
    "b/tests/queries/0_stateless/01621_summap_check_types.reference",
    "b/tests/queries/0_stateless/01621_summap_check_types.sql",
    "b/tests/queries/0_stateless/01634_sum_map_nulls.reference",
    "b/tests/queries/0_stateless/01634_sum_map_nulls.sql",
    "b/tests/queries/0_stateless/01635_sum_map_fuzz.reference",
    "b/tests/queries/0_stateless/01635_sum_map_fuzz.sql"
  ]
}