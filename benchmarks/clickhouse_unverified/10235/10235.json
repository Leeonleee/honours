{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 10235,
  "instance_id": "ClickHouse__ClickHouse-10235",
  "issue_numbers": [
    "10093"
  ],
  "base_commit": "396360cd9001d52012578f432fca9f98e2224f92",
  "patch": "diff --git a/src/Storages/StorageDictionary.cpp b/src/Storages/StorageDictionary.cpp\nindex 396e83cc293b..86831593d54f 100644\n--- a/src/Storages/StorageDictionary.cpp\n+++ b/src/Storages/StorageDictionary.cpp\n@@ -75,16 +75,30 @@ NamesAndTypesList StorageDictionary::getNamesAndTypes(const DictionaryStructure\n \n     if (dictionary_structure.id)\n         dictionary_names_and_types.emplace_back(dictionary_structure.id->name, std::make_shared<DataTypeUInt64>());\n+\n+    /// In old-style (XML) configuration we don't have this attributes in the\n+    /// main attribute list, so we have to add them to columns list explicitly.\n+    /// In the new configuration (DDL) we have them both in range_* nodes and\n+    /// main attribute list, but for compatibility we add them before main\n+    /// attributes list.\n     if (dictionary_structure.range_min)\n         dictionary_names_and_types.emplace_back(dictionary_structure.range_min->name, dictionary_structure.range_min->type);\n+\n     if (dictionary_structure.range_max)\n         dictionary_names_and_types.emplace_back(dictionary_structure.range_max->name, dictionary_structure.range_max->type);\n+\n     if (dictionary_structure.key)\n+    {\n         for (const auto & attribute : *dictionary_structure.key)\n             dictionary_names_and_types.emplace_back(attribute.name, attribute.type);\n+    }\n \n     for (const auto & attribute : dictionary_structure.attributes)\n-        dictionary_names_and_types.emplace_back(attribute.name, attribute.type);\n+    {\n+        /// Some attributes can be already added (range_min and range_max)\n+        if (!dictionary_names_and_types.contains(attribute.name))\n+            dictionary_names_and_types.emplace_back(attribute.name, attribute.type);\n+    }\n \n     return dictionary_names_and_types;\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01125_dict_ddl_cannot_add_column.reference b/tests/queries/0_stateless/01125_dict_ddl_cannot_add_column.reference\nnew file mode 100644\nindex 000000000000..1a9e5685a6a5\n--- /dev/null\n+++ b/tests/queries/0_stateless/01125_dict_ddl_cannot_add_column.reference\n@@ -0,0 +1,3 @@\n+1\t2019-01-05\t2020-01-10\t1\n+date_table\n+somedict\ndiff --git a/tests/queries/0_stateless/01125_dict_ddl_cannot_add_column.sql b/tests/queries/0_stateless/01125_dict_ddl_cannot_add_column.sql\nnew file mode 100644\nindex 000000000000..3f87235bdf4b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01125_dict_ddl_cannot_add_column.sql\n@@ -0,0 +1,34 @@\n+DROP DATABASE IF EXISTS database_for_dict;\n+\n+CREATE DATABASE database_for_dict;\n+\n+use database_for_dict;\n+\n+CREATE TABLE date_table\n+(\n+  id UInt32,\n+  val String,\n+  start Date,\n+  end Date\n+) Engine = Memory();\n+\n+INSERT INTO date_table VALUES(1, '1', toDate('2019-01-05'), toDate('2020-01-10'));\n+\n+CREATE DICTIONARY somedict\n+(\n+  id UInt32,\n+  val String,\n+  start Date,\n+  end Date\n+)\n+PRIMARY KEY id\n+SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 'date_table' DB 'database_for_dict'))\n+LAYOUT(RANGE_HASHED())\n+RANGE (MIN start MAX end)\n+LIFETIME(MIN 300 MAX 360);\n+\n+SELECT * from somedict;\n+\n+SHOW TABLES;\n+\n+DROP DATABASE IF EXISTS database_for_dict;\n",
  "problem_statement": "Error when using RANGE_HASHED dictionary\n**How to reproduce**\r\n```\r\nCREATE DICTIONARY testDict\r\n(\r\n    id UInt32,\r\n    val String,\r\n    start Date,\r\n    end Date\r\n)\r\nPRIMARY KEY id\r\nSOURCE(MYSQL(\r\n    host 'mysql'\r\n    port 3306\r\n    user 'root'\r\n    password 'root'\r\n    db 'test'\r\n    table 'test'    \r\n))\r\nLAYOUT(RANGE_HASHED())\r\nRANGE (MIN start MAX end)\r\nLIFETIME(MIN 300 MAX 360)\r\n```\r\n\r\nAfter creating such a dictionary, SHOW TABLES stops working\r\n\r\n```\r\nSHOW TABLES\r\n\u2192 Progress: 0.00 rows, 0.00 B (0.00 rows/s., 0.00 B/s.) Received exception from server (version 20.3.5):\r\nCode: 44. DB::Exception: Received from localhost:9000. DB::Exception: Cannot add column start: column with this name already exists: While executing Tables. \r\n\r\n0 rows in set. Elapsed: 0.105 sec.  \r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2020-04-13T14:35:31Z",
  "modified_files": [
    "src/Storages/StorageDictionary.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01125_dict_ddl_cannot_add_column.reference",
    "b/tests/queries/0_stateless/01125_dict_ddl_cannot_add_column.sql"
  ]
}