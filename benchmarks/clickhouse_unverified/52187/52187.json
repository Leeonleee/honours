{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52187,
  "instance_id": "ClickHouse__ClickHouse-52187",
  "issue_numbers": [
    "52186"
  ],
  "base_commit": "f8f9f86ec6d73eb7a49260c56cca36fa06cae63a",
  "patch": "diff --git a/src/Interpreters/JoinedTables.cpp b/src/Interpreters/JoinedTables.cpp\nindex ee5c288afbb5..29add31fd5d9 100644\n--- a/src/Interpreters/JoinedTables.cpp\n+++ b/src/Interpreters/JoinedTables.cpp\n@@ -337,6 +337,11 @@ std::shared_ptr<TableJoin> JoinedTables::makeTableJoin(const ASTSelectQuery & se\n                     LOG_TRACE(&Poco::Logger::get(\"JoinedTables\"), \"Can't use dictionary join: dictionary '{}' was not found\", dictionary_name);\n                     return nullptr;\n                 }\n+                if (dictionary->getSpecialKeyType() == DictionarySpecialKeyType::Range)\n+                {\n+                    LOG_TRACE(&Poco::Logger::get(\"JoinedTables\"), \"Can't use dictionary join: dictionary '{}' is a range dictionary\", dictionary_name);\n+                    return nullptr;\n+                }\n \n                 auto dictionary_kv = std::dynamic_pointer_cast<const IKeyValueEntity>(dictionary);\n                 table_join->setStorageJoin(dictionary_kv);\ndiff --git a/src/Interpreters/TableJoin.h b/src/Interpreters/TableJoin.h\nindex ba3befab59bb..5d14a57759f6 100644\n--- a/src/Interpreters/TableJoin.h\n+++ b/src/Interpreters/TableJoin.h\n@@ -223,10 +223,10 @@ class TableJoin\n     {\n         /// When join_algorithm = 'default' (not specified by user) we use hash or direct algorithm.\n         /// It's behaviour that was initially supported by clickhouse.\n-        bool is_enbaled_by_default = val == JoinAlgorithm::DEFAULT\n+        bool is_enabled_by_default = val == JoinAlgorithm::DEFAULT\n                                   || val == JoinAlgorithm::HASH\n                                   || val == JoinAlgorithm::DIRECT;\n-        if (join_algorithm.isSet(JoinAlgorithm::DEFAULT) && is_enbaled_by_default)\n+        if (join_algorithm.isSet(JoinAlgorithm::DEFAULT) && is_enabled_by_default)\n             return true;\n         return join_algorithm.isSet(val);\n     }\ndiff --git a/src/Planner/PlannerJoins.cpp b/src/Planner/PlannerJoins.cpp\nindex 7da10a8523b1..e495b0967e99 100644\n--- a/src/Planner/PlannerJoins.cpp\n+++ b/src/Planner/PlannerJoins.cpp\n@@ -542,7 +542,8 @@ void trySetStorageInTableJoin(const QueryTreeNodePtr & table_expression, std::sh\n     if (!table_join->isEnabledAlgorithm(JoinAlgorithm::DIRECT))\n         return;\n \n-    if (auto storage_dictionary = std::dynamic_pointer_cast<StorageDictionary>(storage); storage_dictionary)\n+    if (auto storage_dictionary = std::dynamic_pointer_cast<StorageDictionary>(storage);\n+        storage_dictionary && storage_dictionary->getDictionary()->getSpecialKeyType() != DictionarySpecialKeyType::Range)\n         table_join->setStorageJoin(std::dynamic_pointer_cast<const IKeyValueEntity>(storage_dictionary->getDictionary()));\n     else if (auto storage_key_value = std::dynamic_pointer_cast<IKeyValueEntity>(storage); storage_key_value)\n         table_join->setStorageJoin(storage_key_value);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02815_range_dict_no_direct_join.reference b/tests/queries/0_stateless/02815_range_dict_no_direct_join.reference\nnew file mode 100644\nindex 000000000000..051716a791eb\n--- /dev/null\n+++ b/tests/queries/0_stateless/02815_range_dict_no_direct_join.reference\n@@ -0,0 +1,12 @@\n+1\t0.1\n+1\t0.2\n+2\t0.3\n+2\t0.4\n+3\t0.5\n+3\t0.6\n+1\t0.1\n+1\t0.2\n+2\t0.3\n+2\t0.4\n+3\t0.5\n+3\t0.6\ndiff --git a/tests/queries/0_stateless/02815_range_dict_no_direct_join.sql b/tests/queries/0_stateless/02815_range_dict_no_direct_join.sql\nnew file mode 100644\nindex 000000000000..e3af53fa335c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02815_range_dict_no_direct_join.sql\n@@ -0,0 +1,34 @@\n+CREATE TABLE discounts\n+(\n+    advertiser_id UInt64,\n+    discount_start_date Date,\n+    discount_end_date Nullable(Date),\n+    amount Float64\n+)\n+ENGINE = Memory;\n+\n+INSERT INTO discounts VALUES (1, '2015-01-01', Null, 0.1);\n+INSERT INTO discounts VALUES (1, '2015-01-15', Null, 0.2);\n+INSERT INTO discounts VALUES (2, '2015-01-01', '2015-01-15', 0.3);\n+INSERT INTO discounts VALUES (2, '2015-01-04', '2015-01-10', 0.4);\n+INSERT INTO discounts VALUES (3, '1970-01-01', '2015-01-15', 0.5);\n+INSERT INTO discounts VALUES (3, '1970-01-01', '2015-01-10', 0.6);\n+\n+CREATE DICTIONARY discounts_dict\n+(\n+    advertiser_id UInt64,\n+    discount_start_date Date,\n+    discount_end_date Nullable(Date),\n+    amount Float64\n+)\n+PRIMARY KEY advertiser_id\n+SOURCE(CLICKHOUSE(TABLE discounts))\n+LIFETIME(MIN 600 MAX 900)\n+LAYOUT(RANGE_HASHED(RANGE_LOOKUP_STRATEGY 'max'))\n+RANGE(MIN discount_start_date MAX discount_end_date);\n+\n+CREATE TABLE ids (id UInt64) ENGINE = Memory;\n+INSERT INTO ids SELECT * FROM numbers(10);\n+\n+SELECT id, amount FROM ids INNER JOIN discounts_dict ON id = advertiser_id ORDER BY id, amount SETTINGS join_algorithm = 'direct';\n+SELECT id, amount FROM ids INNER JOIN discounts_dict ON id = advertiser_id ORDER BY id, amount SETTINGS allow_experimental_analyzer = 1;\n",
  "problem_statement": "Crash when using direct join when right table is range dictionary\n> You have to provide the following information whenever possible.\r\n\r\nReproduce: https://fiddle.clickhouse.com/d4e1257f-0671-4470-9563-214cdd6635e8\r\n\r\n\r\n```\r\n[a1b9834a6416] 2023.07.17 07:26:47.600997 [ 319 ] <Fatal> BaseDaemon: ########################################\r\n[a1b9834a6416] 2023.07.17 07:26:47.601063 [ 319 ] <Fatal> BaseDaemon: (version 23.6.2.18 (official build), build id: D0E83BD1974B9B4B1FE300F9D23222CFF56067E2, git hash: 89f39a7ccfe0c068c03555d44036042fc1c09d22) (from thread 47) (query_id: 6cf44ab4-ed16-4172-bb1b-d39c32f965c4) (query: SELECT id, amount FROM ids INNER JOIN discounts_dict ON id = advertiser_id SETTINGS join_algorithm = 'direct';) Received signal Segmentation fault (11)\r\n[a1b9834a6416] 2023.07.17 07:26:47.601096 [ 319 ] <Fatal> BaseDaemon: Address: 0x20. Access: read. Address not mapped to object.\r\n[a1b9834a6416] 2023.07.17 07:26:47.601112 [ 319 ] <Fatal> BaseDaemon: Stack trace: 0x0000000010de1443 0x0000000008268716 0x0000000010dbd6a6 0x0000000010dbeccd 0x00000000134242a4 0x0000000014ef3c43 0x000000001505eb6e 0x0000000013a7d9b8 0x0000000013a7c3f4 0x0000000013b1a696 0x0000000013b1b5a4 0x0000000013e47e53 0x0000000013e43f2e 0x0000000014c6e9c4 0x0000000014c84c59 0x0000000017bf8a34 0x0000000017bf9c51 0x0000000017d7c0a7 0x0000000017d79adc 0x00007f7158c88609 0x00007f7158bad133\r\n[a1b9834a6416] 2023.07.17 07:26:47.601164 [ 319 ] <Fatal> BaseDaemon: 2. ? @ 0x0000000010de1443 in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601204 [ 319 ] <Fatal> BaseDaemon: 3. DB::RangeHashedDictionary<(DB::DictionaryKeyType)0>::hasKeys(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, std::vector<std::shared_ptr<DB::IDataType const>, std::allocator<std::shared_ptr<DB::IDataType const>>> const&) const @ 0x0000000008268716 in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601220 [ 319 ] <Fatal> BaseDaemon: 4. ? @ 0x0000000010dbd6a6 in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601239 [ 319 ] <Fatal> BaseDaemon: 5. ? @ 0x0000000010dbeccd in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601262 [ 319 ] <Fatal> BaseDaemon: 6. DB::DirectKeyValueJoin::joinBlock(DB::Block&, std::shared_ptr<DB::ExtraBlock>&) @ 0x00000000134242a4 in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601291 [ 319 ] <Fatal> BaseDaemon: 7. DB::JoiningTransform::transformHeader(DB::Block, std::shared_ptr<DB::IJoin> const&) @ 0x0000000014ef3c43 in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601313 [ 319 ] <Fatal> BaseDaemon: 8. DB::FilledJoinStep::FilledJoinStep(DB::DataStream const&, std::shared_ptr<DB::IJoin>, unsigned long) @ 0x000000001505eb6e in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601331 [ 319 ] <Fatal> BaseDaemon: 9. DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::optional<DB::Pipe>) @ 0x0000000013a7d9b8 in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601353 [ 319 ] <Fatal> BaseDaemon: 10. DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x0000000013a7c3f4 in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601374 [ 319 ] <Fatal> BaseDaemon: 11. DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x0000000013b1a696 in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601394 [ 319 ] <Fatal> BaseDaemon: 12. DB::InterpreterSelectWithUnionQuery::execute() @ 0x0000000013b1b5a4 in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601414 [ 319 ] <Fatal> BaseDaemon: 13. ? @ 0x0000000013e47e53 in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601432 [ 319 ] <Fatal> BaseDaemon: 14. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000013e43f2e in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601458 [ 319 ] <Fatal> BaseDaemon: 15. DB::TCPHandler::runImpl() @ 0x0000000014c6e9c4 in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601479 [ 319 ] <Fatal> BaseDaemon: 16. DB::TCPHandler::run() @ 0x0000000014c84c59 in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601503 [ 319 ] <Fatal> BaseDaemon: 17. Poco::Net::TCPServerConnection::start() @ 0x0000000017bf8a34 in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601531 [ 319 ] <Fatal> BaseDaemon: 18. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017bf9c51 in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601551 [ 319 ] <Fatal> BaseDaemon: 19. Poco::PooledThread::run() @ 0x0000000017d7c0a7 in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601574 [ 319 ] <Fatal> BaseDaemon: 20. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017d79adc in /usr/bin/clickhouse\r\n[a1b9834a6416] 2023.07.17 07:26:47.601597 [ 319 ] <Fatal> BaseDaemon: 21. ? @ 0x00007f7158c88609 in ?\r\n[a1b9834a6416] 2023.07.17 07:26:47.601624 [ 319 ] <Fatal> BaseDaemon: 22. __clone @ 0x00007f7158bad133 in ?\r\n[a1b9834a6416] 2023.07.17 07:26:47.729113 [ 319 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: AD6642440A13FE688E9E670BB288E827)\r\n[a1b9834a6416] 2023.07.17 07:26:47.729312 [ 319 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues\r\n[a1b9834a6416] 2023.07.17 07:26:47.729441 [ 319 ] <Fatal> BaseDaemon: Changed settings: join_algorithm = 'direct', output_format_pretty_color = false, output_format_pretty_grid_charset = 'ASCII'\r\n```\r\n\r\n`getByKeys` with range dictionary is tricky, probably we should disable direct join for range dictionary.\n",
  "hints_text": "",
  "created_at": "2023-07-17T08:20:14Z",
  "modified_files": [
    "src/Interpreters/JoinedTables.cpp",
    "src/Interpreters/TableJoin.h",
    "src/Planner/PlannerJoins.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02815_range_dict_no_direct_join.reference",
    "b/tests/queries/0_stateless/02815_range_dict_no_direct_join.sql"
  ]
}