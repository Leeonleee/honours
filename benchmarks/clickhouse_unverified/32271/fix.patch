diff --git a/src/Core/ExternalTable.cpp b/src/Core/ExternalTable.cpp
index b4adbcc06624..3b515fab5c9c 100644
--- a/src/Core/ExternalTable.cpp
+++ b/src/Core/ExternalTable.cpp
@@ -169,7 +169,7 @@ void ExternalTablesHandler::handlePart(const Poco::Net::MessageHeader & header,
     processors.push_back(std::move(sink));
     processors.push_back(std::move(exception_handling));
 
-    auto executor = std::make_shared<PipelineExecutor>(processors);
+    auto executor = std::make_shared<PipelineExecutor>(processors, getContext()->getProcessListElement());
     executor->execute(/*num_threads = */ 1);
 
     /// We are ready to receive the next file, for this we clear all the information received
diff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp
index d292bbf551c8..cf2cdd6c547b 100644
--- a/src/Formats/FormatFactory.cpp
+++ b/src/Formats/FormatFactory.cpp
@@ -1,17 +1,18 @@
 #include <Formats/FormatFactory.h>
 
 #include <algorithm>
-#include <Common/Exception.h>
-#include <Interpreters/Context.h>
 #include <Core/Settings.h>
 #include <Formats/FormatSettings.h>
+#include <Interpreters/Context.h>
+#include <Interpreters/ProcessList.h>
 #include <Processors/Formats/IRowInputFormat.h>
 #include <Processors/Formats/IRowOutputFormat.h>
-#include <Processors/Formats/Impl/ValuesBlockInputFormat.h>
 #include <Processors/Formats/Impl/MySQLOutputFormat.h>
-#include <Processors/Formats/Impl/ParallelParsingInputFormat.h>
 #include <Processors/Formats/Impl/ParallelFormattingOutputFormat.h>
+#include <Processors/Formats/Impl/ParallelParsingInputFormat.h>
+#include <Processors/Formats/Impl/ValuesBlockInputFormat.h>
 #include <Poco/URI.h>
+#include <Common/Exception.h>
 
 #include <IO/BufferWithOwnMemory.h>
 #include <IO/ReadHelpers.h>
@@ -235,6 +236,18 @@ InputFormatPtr FormatFactory::getInputFormat(
     return format;
 }
 
+static void addExistingProgressToOutputFormat(OutputFormatPtr format, ContextPtr context)
+{
+    auto element_id = context->getProcessListElement();
+    if (element_id)
+    {
+        /// While preparing the query there might have been progress (for example in subscalar subqueries) so add it here
+        auto current_progress = element_id->getProgressIn();
+        Progress read_progress{current_progress.read_rows, current_progress.read_bytes, current_progress.total_rows_to_read};
+        format->onProgress(read_progress);
+    }
+}
+
 OutputFormatPtr FormatFactory::getOutputFormatParallelIfPossible(
     const String & name,
     WriteBuffer & buf,
@@ -263,7 +276,9 @@ OutputFormatPtr FormatFactory::getOutputFormatParallelIfPossible(
         if (context->hasQueryContext() && settings.log_queries)
             context->getQueryContext()->addQueryFactoriesInfo(Context::QueryLogFactories::Format, name);
 
-        return std::make_shared<ParallelFormattingOutputFormat>(builder);
+        auto format = std::make_shared<ParallelFormattingOutputFormat>(builder);
+        addExistingProgressToOutputFormat(format, context);
+        return format;
     }
 
     return getOutputFormat(name, buf, sample, context, callback, _format_settings);
@@ -303,6 +318,8 @@ OutputFormatPtr FormatFactory::getOutputFormat(
     if (auto * mysql = typeid_cast<MySQLOutputFormat *>(format.get()))
         mysql->setContext(context);
 
+    addExistingProgressToOutputFormat(format, context);
+
     return format;
 }
 
diff --git a/src/Interpreters/ProcessList.cpp b/src/Interpreters/ProcessList.cpp
index a4583685a90e..67871c630d85 100644
--- a/src/Interpreters/ProcessList.cpp
+++ b/src/Interpreters/ProcessList.cpp
@@ -411,9 +411,8 @@ QueryStatusInfo QueryStatus::getInfo(bool get_thread_list, bool get_profile_even
     res.read_bytes        = progress_in.read_bytes;
     res.total_rows        = progress_in.total_rows_to_read;
 
-    /// TODO: Use written_rows and written_bytes when real time progress is implemented
-    res.written_rows      = progress_out.read_rows;
-    res.written_bytes     = progress_out.read_bytes;
+    res.written_rows      = progress_out.written_rows;
+    res.written_bytes     = progress_out.written_bytes;
 
     if (thread_group)
     {
diff --git a/src/Interpreters/ProcessList.h b/src/Interpreters/ProcessList.h
index 9c826bde0614..0b17874836fc 100644
--- a/src/Interpreters/ProcessList.h
+++ b/src/Interpreters/ProcessList.h
@@ -94,7 +94,7 @@ class QueryStatus : public WithContext
     ExecutionSpeedLimits limits;
     OverflowMode overflow_mode;
 
-    QueryPriorities::Handle priority_handle;
+    QueryPriorities::Handle priority_handle = nullptr;
 
     std::atomic<bool> is_killed { false };
 
diff --git a/src/Interpreters/ThreadStatusExt.cpp b/src/Interpreters/ThreadStatusExt.cpp
index fc6aa15a1e89..b3720b89eaa2 100644
--- a/src/Interpreters/ThreadStatusExt.cpp
+++ b/src/Interpreters/ThreadStatusExt.cpp
@@ -24,12 +24,6 @@
 #   include <sys/resource.h>
 #endif
 
-namespace ProfileEvents
-{
-    extern const Event InsertedRows;
-    extern const Event InsertedBytes;
-}
-
 
 /// Implement some methods of ThreadStatus and CurrentThread here to avoid extra linking dependencies in clickhouse_common_io
 /// TODO It doesn't make sense.
@@ -447,9 +441,8 @@ void ThreadStatus::logToQueryThreadLog(QueryThreadLog & thread_log, const String
     elem.read_rows = progress_in.read_rows.load(std::memory_order_relaxed);
     elem.read_bytes = progress_in.read_bytes.load(std::memory_order_relaxed);
 
-    /// TODO: Use written_rows and written_bytes when run time progress is implemented
-    elem.written_rows = progress_out.read_rows.load(std::memory_order_relaxed);
-    elem.written_bytes = progress_out.read_bytes.load(std::memory_order_relaxed);
+    elem.written_rows = progress_out.written_rows.load(std::memory_order_relaxed);
+    elem.written_bytes = progress_out.written_bytes.load(std::memory_order_relaxed);
     elem.memory_usage = memory_tracker.get();
     elem.peak_memory_usage = memory_tracker.getPeak();
 
@@ -520,8 +513,8 @@ void ThreadStatus::logToQueryViewsLog(const ViewRuntimeData & vinfo)
     auto events = std::make_shared<ProfileEvents::Counters::Snapshot>(performance_counters.getPartiallyAtomicSnapshot());
     element.read_rows = progress_in.read_rows.load(std::memory_order_relaxed);
     element.read_bytes = progress_in.read_bytes.load(std::memory_order_relaxed);
-    element.written_rows = (*events)[ProfileEvents::InsertedRows];
-    element.written_bytes = (*events)[ProfileEvents::InsertedBytes];
+    element.written_rows = progress_out.written_rows.load(std::memory_order_relaxed);
+    element.written_bytes = progress_out.written_bytes.load(std::memory_order_relaxed);
     element.peak_memory_usage = memory_tracker.getPeak() > 0 ? memory_tracker.getPeak() : 0;
     if (query_context_ptr->getSettingsRef().log_profile_events != 0)
     {
diff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp
index e177fd8e6b3b..65238da7d2ef 100644
--- a/src/Interpreters/executeQuery.cpp
+++ b/src/Interpreters/executeQuery.cpp
@@ -819,8 +819,8 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(
                 else /// will be used only for ordinary INSERT queries
                 {
                     auto progress_out = process_list_elem->getProgressOut();
-                    elem.result_rows = progress_out.read_rows;
-                    elem.result_bytes = progress_out.read_bytes;
+                    elem.result_rows = progress_out.written_rows;
+                    elem.result_bytes = progress_out.written_rows;
                 }
 
                 if (elem.read_rows != 0)
diff --git a/src/Processors/Executors/PipelineExecutor.h b/src/Processors/Executors/PipelineExecutor.h
index 12f2bd8b75bc..0b1fe5dedf6e 100644
--- a/src/Processors/Executors/PipelineExecutor.h
+++ b/src/Processors/Executors/PipelineExecutor.h
@@ -26,7 +26,7 @@ class PipelineExecutor
     /// During pipeline execution new processors can appear. They will be added to existing set.
     ///
     /// Explicit graph representation is built in constructor. Throws if graph is not correct.
-    explicit PipelineExecutor(Processors & processors, QueryStatus * elem = nullptr);
+    explicit PipelineExecutor(Processors & processors, QueryStatus * elem);
     ~PipelineExecutor();
 
     /// Execute pipeline in multiple threads. Must be called once.
diff --git a/src/Processors/QueryPlan/BuildQueryPipelineSettings.cpp b/src/Processors/QueryPlan/BuildQueryPipelineSettings.cpp
index 2480673d65ed..fb3ed7f80fc8 100644
--- a/src/Processors/QueryPlan/BuildQueryPipelineSettings.cpp
+++ b/src/Processors/QueryPlan/BuildQueryPipelineSettings.cpp
@@ -6,16 +6,13 @@
 namespace DB
 {
 
-BuildQueryPipelineSettings BuildQueryPipelineSettings::fromSettings(const Settings & from)
+BuildQueryPipelineSettings BuildQueryPipelineSettings::fromContext(ContextPtr from)
 {
     BuildQueryPipelineSettings settings;
-    settings.actions_settings = ExpressionActionsSettings::fromSettings(from, CompileExpressions::yes);
+    settings.actions_settings = ExpressionActionsSettings::fromSettings(from->getSettingsRef(), CompileExpressions::yes);
+    settings.process_list_element = from->getProcessListElement();
+    settings.progress_callback = from->getProgressCallback();
     return settings;
 }
 
-BuildQueryPipelineSettings BuildQueryPipelineSettings::fromContext(ContextPtr from)
-{
-    return fromSettings(from->getSettingsRef());
-}
-
 }
diff --git a/src/Processors/QueryPlan/BuildQueryPipelineSettings.h b/src/Processors/QueryPlan/BuildQueryPipelineSettings.h
index c3282d43778e..fadbd061fbd5 100644
--- a/src/Processors/QueryPlan/BuildQueryPipelineSettings.h
+++ b/src/Processors/QueryPlan/BuildQueryPipelineSettings.h
@@ -1,5 +1,6 @@
 #pragma once
 
+#include <IO/Progress.h>
 #include <Interpreters/ExpressionActionsSettings.h>
 
 #include <cstddef>
@@ -8,14 +9,15 @@ namespace DB
 {
 
 struct Settings;
+class QueryStatus;
 
 struct BuildQueryPipelineSettings
 {
     ExpressionActionsSettings actions_settings;
+    QueryStatus * process_list_element = nullptr;
+    ProgressCallback progress_callback = nullptr;
 
     const ExpressionActionsSettings & getActionsSettings() const { return actions_settings; }
-
-    static BuildQueryPipelineSettings fromSettings(const Settings & from);
     static BuildQueryPipelineSettings fromContext(ContextPtr from);
 };
 
diff --git a/src/Processors/QueryPlan/QueryPlan.cpp b/src/Processors/QueryPlan/QueryPlan.cpp
index f319e562bfbd..a271ef78dfaa 100644
--- a/src/Processors/QueryPlan/QueryPlan.cpp
+++ b/src/Processors/QueryPlan/QueryPlan.cpp
@@ -180,6 +180,9 @@ QueryPipelineBuilderPtr QueryPlan::buildQueryPipeline(
     for (auto & context : interpreter_context)
         last_pipeline->addInterpreterContext(std::move(context));
 
+    last_pipeline->setProgressCallback(build_pipeline_settings.progress_callback);
+    last_pipeline->setProcessListElement(build_pipeline_settings.process_list_element);
+
     return last_pipeline;
 }
 
diff --git a/src/Processors/Sources/SourceWithProgress.cpp b/src/Processors/Sources/SourceWithProgress.cpp
index 9b7a5c6a762c..60c39c919f64 100644
--- a/src/Processors/Sources/SourceWithProgress.cpp
+++ b/src/Processors/Sources/SourceWithProgress.cpp
@@ -26,6 +26,8 @@ SourceWithProgress::SourceWithProgress(Block header, bool enable_auto_progress)
 void SourceWithProgress::setProcessListElement(QueryStatus * elem)
 {
     process_list_elem = elem;
+    if (!elem)
+        return;
 
     /// Update total_rows_approx as soon as possible.
     ///
diff --git a/src/Processors/Transforms/CountingTransform.cpp b/src/Processors/Transforms/CountingTransform.cpp
index 79b6360f22e5..eb191b36586a 100644
--- a/src/Processors/Transforms/CountingTransform.cpp
+++ b/src/Processors/Transforms/CountingTransform.cpp
@@ -18,20 +18,21 @@ namespace DB
 
 void CountingTransform::onConsume(Chunk chunk)
 {
-    Progress local_progress(chunk.getNumRows(), chunk.bytes(), 0);
+    Progress local_progress{WriteProgress(chunk.getNumRows(), chunk.bytes())};
     progress.incrementPiecewiseAtomically(local_progress);
 
     //std::cerr << "============ counting adding progress for " << static_cast<const void *>(thread_status) << ' ' << chunk.getNumRows() << " rows
";
 
     if (thread_status)
     {
-        thread_status->performance_counters.increment(ProfileEvents::InsertedRows, local_progress.read_rows);
-        thread_status->performance_counters.increment(ProfileEvents::InsertedBytes, local_progress.read_bytes);
+        thread_status->performance_counters.increment(ProfileEvents::InsertedRows, local_progress.written_rows);
+        thread_status->performance_counters.increment(ProfileEvents::InsertedBytes, local_progress.written_bytes);
+        thread_status->progress_out.incrementPiecewiseAtomically(local_progress);
     }
     else
     {
-        ProfileEvents::increment(ProfileEvents::InsertedRows, local_progress.read_rows);
-        ProfileEvents::increment(ProfileEvents::InsertedBytes, local_progress.read_bytes);
+        ProfileEvents::increment(ProfileEvents::InsertedRows, local_progress.written_rows);
+        ProfileEvents::increment(ProfileEvents::InsertedBytes, local_progress.written_bytes);
     }
 
     if (process_elem)
diff --git a/src/Processors/Transforms/buildPushingToViewsChain.cpp b/src/Processors/Transforms/buildPushingToViewsChain.cpp
index 82c2a337a451..fdd0150536a9 100644
--- a/src/Processors/Transforms/buildPushingToViewsChain.cpp
+++ b/src/Processors/Transforms/buildPushingToViewsChain.cpp
@@ -3,6 +3,7 @@
 #include <Interpreters/Context.h>
 #include <Interpreters/InterpreterInsertQuery.h>
 #include <Interpreters/InterpreterSelectQuery.h>
+#include <Interpreters/ProcessList.h>
 #include <Parsers/ASTInsertQuery.h>
 #include <Processors/Transforms/SquashingChunksTransform.h>
 #include <Processors/Transforms/ExpressionTransform.h>
@@ -14,6 +15,7 @@
 #include <Storages/StorageValues.h>
 #include <Common/CurrentThread.h>
 #include <Common/MemoryTracker.h>
+#include <Common/ProfileEvents.h>
 #include <Common/ThreadProfileEvents.h>
 #include <Common/ThreadStatus.h>
 #include <Common/checkStackSize.h>
@@ -23,6 +25,12 @@
 #include <atomic>
 #include <chrono>
 
+namespace ProfileEvents
+{
+    extern const Event SelectedBytes;
+    extern const Event SelectedRows;
+}
+
 namespace DB
 {
 
@@ -451,13 +459,6 @@ static QueryPipeline process(Block block, ViewRuntimeData & view, const ViewsDat
         pipeline.getHeader(),
         std::make_shared<ExpressionActions>(std::move(converting))));
 
-    pipeline.setProgressCallback([context](const Progress & progress)
-    {
-        CurrentThread::updateProgressIn(progress);
-        if (auto callback = context->getProgressCallback())
-            callback(progress);
-    });
-
     return QueryPipelineBuilder::getPipeline(std::move(pipeline));
 }
 
@@ -595,7 +596,11 @@ void PushingToLiveViewSink::consume(Chunk chunk)
 {
     Progress local_progress(chunk.getNumRows(), chunk.bytes(), 0);
     StorageLiveView::writeIntoLiveView(live_view, getHeader().cloneWithColumns(chunk.detachColumns()), context);
-    CurrentThread::updateProgressIn(local_progress);
+    auto process = context->getProcessListElement();
+    if (process)
+        process->updateProgressIn(local_progress);
+    ProfileEvents::increment(ProfileEvents::SelectedRows, local_progress.read_rows);
+    ProfileEvents::increment(ProfileEvents::SelectedBytes, local_progress.read_bytes);
 }
 
 
@@ -614,7 +619,11 @@ void PushingToWindowViewSink::consume(Chunk chunk)
     Progress local_progress(chunk.getNumRows(), chunk.bytes(), 0);
     StorageWindowView::writeIntoWindowView(
         window_view, getHeader().cloneWithColumns(chunk.detachColumns()), context);
-    CurrentThread::updateProgressIn(local_progress);
+    auto process = context->getProcessListElement();
+    if (process)
+        process->updateProgressIn(local_progress);
+    ProfileEvents::increment(ProfileEvents::SelectedRows, local_progress.read_rows);
+    ProfileEvents::increment(ProfileEvents::SelectedBytes, local_progress.read_bytes);
 }
 
 
diff --git a/src/QueryPipeline/QueryPipelineBuilder.cpp b/src/QueryPipeline/QueryPipelineBuilder.cpp
index 40c640465609..dba7c7cb8f74 100644
--- a/src/QueryPipeline/QueryPipelineBuilder.cpp
+++ b/src/QueryPipeline/QueryPipelineBuilder.cpp
@@ -560,6 +560,7 @@ QueryPipeline QueryPipelineBuilder::getPipeline(QueryPipelineBuilder builder)
 {
     QueryPipeline res(std::move(builder.pipe));
     res.setNumThreads(builder.getNumThreads());
+    res.setProcessListElement(builder.process_list_element);
     return res;
 }
 
