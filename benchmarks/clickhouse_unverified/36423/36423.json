{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 36423,
  "instance_id": "ClickHouse__ClickHouse-36423",
  "issue_numbers": [
    "35890"
  ],
  "base_commit": "5801de7f723bf06ca3156554a5ea2105b054bf40",
  "patch": "diff --git a/src/DataTypes/DataTypeFactory.cpp b/src/DataTypes/DataTypeFactory.cpp\nindex ce501f4333dd..dd08656dcccc 100644\n--- a/src/DataTypes/DataTypeFactory.cpp\n+++ b/src/DataTypes/DataTypeFactory.cpp\n@@ -33,7 +33,12 @@ DataTypePtr DataTypeFactory::get(const String & full_name) const\n     /// Value 315 is known to cause stack overflow in some test configurations (debug build, sanitizers)\n     /// let's make the threshold significantly lower.\n     /// It is impractical for user to have complex data types with this depth.\n-    static constexpr size_t data_type_max_parse_depth = 200;\n+\n+#if defined(SANITIZER) || !defined(NDEBUG)\n+    static constexpr size_t data_type_max_parse_depth = 150;\n+#else\n+    static constexpr size_t data_type_max_parse_depth = 300;\n+#endif\n \n     ParserDataType parser;\n     ASTPtr ast = parseQuery(parser, full_name.data(), full_name.data() + full_name.size(), \"data type\", 0, data_type_max_parse_depth);\ndiff --git a/src/Parsers/ParserDataType.cpp b/src/Parsers/ParserDataType.cpp\nindex 9baf6555d57f..a1a24c40ac28 100644\n--- a/src/Parsers/ParserDataType.cpp\n+++ b/src/Parsers/ParserDataType.cpp\n@@ -92,11 +92,25 @@ bool ParserDataType::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n     }\n     else if (type_name_upper.find(\"INT\") != std::string::npos)\n     {\n-        /// Support SIGNED and UNSIGNED integer type modifiers for compatibility with MySQL.\n+        /// Support SIGNED and UNSIGNED integer type modifiers for compatibility with MySQL\n         if (ParserKeyword(\"SIGNED\").ignore(pos))\n             type_name_suffix = \"SIGNED\";\n         else if (ParserKeyword(\"UNSIGNED\").ignore(pos))\n             type_name_suffix = \"UNSIGNED\";\n+        else if (pos->type == TokenType::OpeningRoundBracket)\n+        {\n+            ++pos;\n+            if (pos->type == TokenType::Number)\n+                ++pos;\n+            if (pos->type != TokenType::ClosingRoundBracket)\n+               return false;\n+            ++pos;\n+            if (ParserKeyword(\"SIGNED\").ignore(pos))\n+                type_name_suffix = \"SIGNED\";\n+            else if (ParserKeyword(\"UNSIGNED\").ignore(pos))\n+                type_name_suffix = \"UNSIGNED\";\n+        }\n+\n     }\n \n     if (!type_name_suffix.empty())\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02271_int_sql_compatibility.reference b/tests/queries/0_stateless/02271_int_sql_compatibility.reference\nnew file mode 100644\nindex 000000000000..4144e0906eb6\n--- /dev/null\n+++ b/tests/queries/0_stateless/02271_int_sql_compatibility.reference\n@@ -0,0 +1,10 @@\n+CREATE TEMPORARY TABLE t1_02271\\n(\\n    `x` Int32\\n)\\nENGINE = Memory\n+CREATE TEMPORARY TABLE t2_02271\\n(\\n    `x` Int32 DEFAULT 1\\n)\\nENGINE = Memory\n+CREATE TEMPORARY TABLE t3_02271\\n(\\n    `x` UInt32\\n)\\nENGINE = Memory\n+CREATE TEMPORARY TABLE t4_02271\\n(\\n    `x` Int32\\n)\\nENGINE = Memory\n+CREATE TEMPORARY TABLE t5_02271\\n(\\n    `x` Int32 DEFAULT 1\\n)\\nENGINE = Memory\n+CREATE TEMPORARY TABLE t6_02271\\n(\\n    `x` Int32\\n)\\nENGINE = Memory\n+CREATE TEMPORARY TABLE t7_02271\\n(\\n    `x` Int32 DEFAULT 1\\n)\\nENGINE = Memory\n+CREATE TEMPORARY TABLE t8_02271\\n(\\n    `x` UInt32\\n)\\nENGINE = Memory\n+CREATE TEMPORARY TABLE t9_02271\\n(\\n    `x` Int32\\n)\\nENGINE = Memory\n+CREATE TEMPORARY TABLE t10_02271\\n(\\n    `x` Int32 DEFAULT 1\\n)\\nENGINE = Memory\ndiff --git a/tests/queries/0_stateless/02271_int_sql_compatibility.sql b/tests/queries/0_stateless/02271_int_sql_compatibility.sql\nnew file mode 100644\nindex 000000000000..e0944b71f6fa\n--- /dev/null\n+++ b/tests/queries/0_stateless/02271_int_sql_compatibility.sql\n@@ -0,0 +1,29 @@\n+CREATE TEMPORARY TABLE t1_02271 (x INT(11));\n+SHOW CREATE TEMPORARY TABLE t1_02271;\n+\n+CREATE TEMPORARY TABLE t2_02271 (x INT(11) DEFAULT 1);\n+SHOW CREATE TEMPORARY TABLE t2_02271;\n+\n+CREATE TEMPORARY TABLE t3_02271 (x INT(11) UNSIGNED);\n+SHOW CREATE TEMPORARY TABLE t3_02271;\n+\n+CREATE TEMPORARY TABLE t4_02271 (x INT(11) SIGNED);\n+SHOW CREATE TEMPORARY TABLE t4_02271;\n+\n+CREATE TEMPORARY TABLE t5_02271 (x INT(11) SIGNED DEFAULT 1);\n+SHOW CREATE TEMPORARY TABLE t5_02271;\n+\n+CREATE TEMPORARY TABLE t6_02271 (x INT());\n+SHOW CREATE TEMPORARY TABLE t6_02271;\n+\n+CREATE TEMPORARY TABLE t7_02271 (x INT() DEFAULT 1);\n+SHOW CREATE TEMPORARY TABLE t7_02271;\n+\n+CREATE TEMPORARY TABLE t8_02271 (x INT() UNSIGNED);\n+SHOW CREATE TEMPORARY TABLE t8_02271;\n+\n+CREATE TEMPORARY TABLE t9_02271 (x INT() SIGNED);\n+SHOW CREATE TEMPORARY TABLE t9_02271;\n+\n+CREATE TEMPORARY TABLE t10_02271 (x INT() SIGNED DEFAULT 1);\n+SHOW CREATE TEMPORARY TABLE t10_02271;\n",
  "problem_statement": "UNSIGNED modifier does not work with unused parameters of INT\n**Describe the unexpected behaviour**\r\n\r\n```\r\n:) CREATE TEMPORARY TABLE test (x INT UNSIGNED)\r\n\r\nCREATE TEMPORARY TABLE test\r\n(\r\n    `x` INT UNSIGNED\r\n)\r\n\r\nQuery id: f4fa2663-3a8a-445d-a9cb-de759ac191de\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.002 sec. \r\n\r\n:) DROP TABLE test\r\n\r\nDROP TABLE test\r\n\r\nQuery id: 32fee2e0-78c4-4fed-8c34-78c5aaab2781\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.001 sec. \r\n\r\nubuntu-4gb-nbg1-2 :) CREATE TEMPORARY TABLE test (x INT(11) UNSIGNED)\r\n\r\nSyntax error: failed at position 40 ('UNSIGNED')\r\n```\n",
  "hints_text": "I'll take it. PR: https://github.com/ClickHouse/ClickHouse/pull/36126",
  "created_at": "2022-04-19T13:33:43Z",
  "modified_files": [
    "src/DataTypes/DataTypeFactory.cpp",
    "src/Parsers/ParserDataType.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02271_int_sql_compatibility.reference",
    "b/tests/queries/0_stateless/02271_int_sql_compatibility.sql"
  ]
}