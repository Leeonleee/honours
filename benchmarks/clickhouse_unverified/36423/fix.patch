diff --git a/src/DataTypes/DataTypeFactory.cpp b/src/DataTypes/DataTypeFactory.cpp
index ce501f4333dd..dd08656dcccc 100644
--- a/src/DataTypes/DataTypeFactory.cpp
+++ b/src/DataTypes/DataTypeFactory.cpp
@@ -33,7 +33,12 @@ DataTypePtr DataTypeFactory::get(const String & full_name) const
     /// Value 315 is known to cause stack overflow in some test configurations (debug build, sanitizers)
     /// let's make the threshold significantly lower.
     /// It is impractical for user to have complex data types with this depth.
-    static constexpr size_t data_type_max_parse_depth = 200;
+
+#if defined(SANITIZER) || !defined(NDEBUG)
+    static constexpr size_t data_type_max_parse_depth = 150;
+#else
+    static constexpr size_t data_type_max_parse_depth = 300;
+#endif
 
     ParserDataType parser;
     ASTPtr ast = parseQuery(parser, full_name.data(), full_name.data() + full_name.size(), "data type", 0, data_type_max_parse_depth);
diff --git a/src/Parsers/ParserDataType.cpp b/src/Parsers/ParserDataType.cpp
index 9baf6555d57f..a1a24c40ac28 100644
--- a/src/Parsers/ParserDataType.cpp
+++ b/src/Parsers/ParserDataType.cpp
@@ -92,11 +92,25 @@ bool ParserDataType::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)
     }
     else if (type_name_upper.find("INT") != std::string::npos)
     {
-        /// Support SIGNED and UNSIGNED integer type modifiers for compatibility with MySQL.
+        /// Support SIGNED and UNSIGNED integer type modifiers for compatibility with MySQL
         if (ParserKeyword("SIGNED").ignore(pos))
             type_name_suffix = "SIGNED";
         else if (ParserKeyword("UNSIGNED").ignore(pos))
             type_name_suffix = "UNSIGNED";
+        else if (pos->type == TokenType::OpeningRoundBracket)
+        {
+            ++pos;
+            if (pos->type == TokenType::Number)
+                ++pos;
+            if (pos->type != TokenType::ClosingRoundBracket)
+               return false;
+            ++pos;
+            if (ParserKeyword("SIGNED").ignore(pos))
+                type_name_suffix = "SIGNED";
+            else if (ParserKeyword("UNSIGNED").ignore(pos))
+                type_name_suffix = "UNSIGNED";
+        }
+
     }
 
     if (!type_name_suffix.empty())
