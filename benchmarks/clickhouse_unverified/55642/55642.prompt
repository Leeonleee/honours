You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Indexing by space-filling curves.
This task consists of two parts:

## 1. Implement one or a few functions for space-filling curves in SQL.

`zCurve` or `mortonCode` (choose the name more pleasant for you).

It takes an arbitrary number of integer arguments of arbitrary size, and returns UInt64 using the following algorithm:

If the argument is a signed number, convert it to unsigned number of the same width, using zigzag encoding.

If the argument width is less than 32 bits, convert it to UInt32 and shift left, so it will be aligned to the most significant bit.

Iterate over bits of the arguments, starting with the most significant bit. For every bit position, iterate over the arguments, extract the corresponding bit and put it as the bit of the result, starting with the most significant bit of the result.

If all 64 bits of the results were filled, finish the operation.


### Example 1:

Two UInt32 numbers:

```
           bits, <-- most significant -------------- least significant -->
x, UInt32: a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f
y, UInt32: A B C D E F G H I J K L M N O P Q R S T U V W X Y Z A B C D E F

Result:
r, UInt64: a A b B c C d D e E f F g G h H i I j J k K l L m M n N o O p P q Q r R s S t T u U v V w W x X y Y z Z a A b B c C d D e E f F
```

### Example 2: numbers of different width:

```
x, UInt32: a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f
y, UInt8:  A B C D E F G H

Result:
r, UInt64: a A b B c C d D e E f F g G h H i 0 j 0 k 0 l 0 m 0 n 0 o 0 p 0 q 0 r 0 s 0 t 0 u 0 v 0 w 0 x 0 y 0 z 0 a 0 b 0 c 0 d 0 e 0 f 0
```

### Example 3: more than two arguments:

```
x, UInt16: a b c d e f g h i j k l m n o p
y, UInt16: q r s t u v w x y z a b c d e f
z, UInt16: g h i j k l m n o p q r s t u v

r, UInt64: a q g b r h c s i d t j e u k f v l g w m h x n i y o j z p k a q l b r m c s n d t o e u p v f 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
```

The special case of two numbers can be additionally optimized.
Note that Geo Hash is a special case of Z-order curve, and it can be reviewed as well.

You can also implement Hilbert Curve and Peano Curve if needed.


## 2. Implement index analysis to support ordering by space filling curves.

Let's suppose the user has created a table ordered by some function of multiple arguments:

```
CREATE TABLE t ... ORDER BY f(x1, x2, ...)
```

Let's suppose the function `f` allows to obtain a *preimage of a result range as a union of hyperrectangles in the space of its arguments*.

So, for example, 
if `a <= f(x, y) <= b` (this represents a granule in MergeTree)
then an expression of form `(xa1 <= x <= xb1 AND ya1 <= y <= yb1) OR (xa2 <= x <= xb2 AND ya2 <= y <= yb2) OR ...` can be derived.

(The boundaries can be infinities; the comparison can be strict or non-strict, see `forAnyHyperrectangle` in `KeyCondition.cpp`)

Z-order curve is an example of a function of this kind.
See the picture: https://en.wikipedia.org/wiki/Z-order_curve#/media/File:BIGMIN_search_in_a_Z-order_curve.svg

Add a method to `IFunction` to obtain this preimage. 
Add a method to `IFunction` to check if the function allows to obtain this preimage.

Then simply use these methods in KeyCondition.
See `forAnyHyperrectangle` in `KeyCondition.cpp`

Note: when this index analysis will work, the user will not have to use `zCurve` function in the SELECT query. The user will write a query with conditions on the arguments (x, y) as usual, and the analysis of the space-filling curve will happen under the hood, and automatically skip the granules; while the granules determine the boundaries of the values of `zCurve` on the arguments.

Note: it may sound complicated but it isn't. In fact, we already do this "range preimage" operation on the `tuple` function, by reversing the range of tuple values in lexicographic order.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
