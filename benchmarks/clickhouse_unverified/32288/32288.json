{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 32288,
  "instance_id": "ClickHouse__ClickHouse-32288",
  "issue_numbers": [
    "31315"
  ],
  "base_commit": "f064f2cdaaae09bfcad5d5f7b161dd36dfe040cd",
  "patch": "diff --git a/src/Databases/DDLDependencyVisitor.cpp b/src/Databases/DDLDependencyVisitor.cpp\nindex 09d3752b180b..532691f79782 100644\n--- a/src/Databases/DDLDependencyVisitor.cpp\n+++ b/src/Databases/DDLDependencyVisitor.cpp\n@@ -11,7 +11,7 @@\n namespace DB\n {\n \n-TableNamesSet getDependenciesSetFromCreateQuery(ContextPtr global_context, const ASTPtr & ast)\n+TableNamesSet getDependenciesSetFromCreateQuery(ContextPtr global_context, const QualifiedTableName & table, const ASTPtr & ast)\n {\n     assert(global_context == global_context->getGlobalContext());\n     TableLoadingDependenciesVisitor::Data data;\n@@ -20,6 +20,7 @@ TableNamesSet getDependenciesSetFromCreateQuery(ContextPtr global_context, const\n     data.global_context = global_context;\n     TableLoadingDependenciesVisitor visitor{data};\n     visitor.visit(ast);\n+    data.dependencies.erase(table);\n     return data.dependencies;\n }\n \n@@ -132,7 +133,10 @@ void DDLDependencyVisitor::extractTableNameFromArgument(const ASTFunction & func\n     }\n \n     if (qualified_name.database.empty())\n+    {\n+        /// It can be table/dictionary from default database or XML dictionary, but we cannot distinguish it here.\n         qualified_name.database = data.default_database;\n+    }\n     data.dependencies.emplace(std::move(qualified_name));\n }\n \ndiff --git a/src/Databases/DDLDependencyVisitor.h b/src/Databases/DDLDependencyVisitor.h\nindex b5ca976f6653..ae7f7aa94d9e 100644\n--- a/src/Databases/DDLDependencyVisitor.h\n+++ b/src/Databases/DDLDependencyVisitor.h\n@@ -12,7 +12,7 @@ class ASTStorage;\n \n using TableNamesSet = std::unordered_set<QualifiedTableName>;\n \n-TableNamesSet getDependenciesSetFromCreateQuery(ContextPtr global_context, const ASTPtr & ast);\n+TableNamesSet getDependenciesSetFromCreateQuery(ContextPtr global_context, const QualifiedTableName & table, const ASTPtr & ast);\n \n /// Visits ASTCreateQuery and extracts names of table (or dictionary) dependencies\n /// from column default expressions (joinGet, dictGet, etc)\ndiff --git a/src/Databases/DatabaseMemory.cpp b/src/Databases/DatabaseMemory.cpp\nindex 50e568857438..3309d25b1c28 100644\n--- a/src/Databases/DatabaseMemory.cpp\n+++ b/src/Databases/DatabaseMemory.cpp\n@@ -121,7 +121,7 @@ void DatabaseMemory::alterTable(ContextPtr local_context, const StorageID & tabl\n         throw Exception(ErrorCodes::UNKNOWN_TABLE, \"Cannot alter: There is no metadata of table {}\", table_id.getNameForLogs());\n \n     applyMetadataChangesToCreateQuery(it->second, metadata);\n-    TableNamesSet new_dependencies = getDependenciesSetFromCreateQuery(local_context->getGlobalContext(), it->second);\n+    TableNamesSet new_dependencies = getDependenciesSetFromCreateQuery(local_context->getGlobalContext(), table_id.getQualifiedName(), it->second);\n     DatabaseCatalog::instance().updateLoadingDependencies(table_id, std::move(new_dependencies));\n }\n \ndiff --git a/src/Databases/DatabaseOrdinary.cpp b/src/Databases/DatabaseOrdinary.cpp\nindex b7a0aff24d67..b5557d9a08d9 100644\n--- a/src/Databases/DatabaseOrdinary.cpp\n+++ b/src/Databases/DatabaseOrdinary.cpp\n@@ -181,8 +181,8 @@ void DatabaseOrdinary::loadTablesMetadata(ContextPtr local_context, ParsedTables\n                     return;\n                 }\n \n-                TableNamesSet loading_dependencies = getDependenciesSetFromCreateQuery(getContext(), ast);\n                 QualifiedTableName qualified_name{database_name, create_query->getTable()};\n+                TableNamesSet loading_dependencies = getDependenciesSetFromCreateQuery(getContext(), qualified_name, ast);\n \n                 std::lock_guard lock{metadata.mutex};\n                 metadata.parsed_tables[qualified_name] = ParsedTableMetadata{full_path.string(), ast};\n@@ -297,7 +297,7 @@ void DatabaseOrdinary::alterTable(ContextPtr local_context, const StorageID & ta\n         out.close();\n     }\n \n-    TableNamesSet new_dependencies = getDependenciesSetFromCreateQuery(local_context->getGlobalContext(), ast);\n+    TableNamesSet new_dependencies = getDependenciesSetFromCreateQuery(local_context->getGlobalContext(), table_id.getQualifiedName(), ast);\n     DatabaseCatalog::instance().updateLoadingDependencies(table_id, std::move(new_dependencies));\n \n     commitAlterTable(table_id, table_metadata_tmp_path, table_metadata_path, statement, local_context);\ndiff --git a/src/Databases/TablesLoader.cpp b/src/Databases/TablesLoader.cpp\nindex b8c380b7be19..4ce719279f38 100644\n--- a/src/Databases/TablesLoader.cpp\n+++ b/src/Databases/TablesLoader.cpp\n@@ -133,10 +133,14 @@ void TablesLoader::removeUnresolvableDependencies(bool remove_loaded)\n         /// Table exists and it's already loaded\n         if (DatabaseCatalog::instance().isTableExist(StorageID(dependency_name.database, dependency_name.table), global_context))\n             return remove_loaded;\n-        /// It's XML dictionary. It was loaded before tables and DDL dictionaries.\n+        /// It's XML dictionary.\n         if (dependency_name.database == metadata.default_database &&\n             global_context->getExternalDictionariesLoader().has(dependency_name.table))\n-            return remove_loaded;\n+        {\n+            LOG_WARNING(log, \"Tables {} depend on XML dictionary {}, but XML dictionaries are loaded independently.\"\n+                        \"Consider converting it to DDL dictionary.\", fmt::join(info.dependent_database_objects, \", \"), dependency_name);\n+            return true;\n+        }\n \n         /// Some tables depends on table \"dependency_name\", but there is no such table in DatabaseCatalog and we don't have its metadata.\n         /// We will ignore it and try to load dependent tables without \"dependency_name\"\ndiff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 0d9cad345454..8f003e75a073 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -981,9 +981,10 @@ BlockIO InterpreterCreateQuery::createTable(ASTCreateQuery & create)\n         return {};\n \n     /// If table has dependencies - add them to the graph\n-    TableNamesSet loading_dependencies = getDependenciesSetFromCreateQuery(getContext()->getGlobalContext(), query_ptr);\n+    QualifiedTableName qualified_name{database_name, create.getTable()};\n+    TableNamesSet loading_dependencies = getDependenciesSetFromCreateQuery(getContext()->getGlobalContext(), qualified_name, query_ptr);\n     if (!loading_dependencies.empty())\n-        DatabaseCatalog::instance().addLoadingDependencies(QualifiedTableName{database_name, create.getTable()}, std::move(loading_dependencies));\n+        DatabaseCatalog::instance().addLoadingDependencies(std::move(qualified_name), std::move(loading_dependencies));\n \n     return fillTableIfNeeded(create);\n }\n",
  "test_patch": "diff --git a/tests/integration/test_dictionaries_dependency_xml/configs/dictionaries/node.xml b/tests/integration/test_dictionaries_dependency_xml/configs/dictionaries/node.xml\nnew file mode 100644\nindex 000000000000..2cd957a37209\n--- /dev/null\n+++ b/tests/integration/test_dictionaries_dependency_xml/configs/dictionaries/node.xml\n@@ -0,0 +1,25 @@\n+<clickhouse>\n+    <dictionary>\n+        <name>node</name>\n+        <source>\n+            <clickhouse>\n+                <host>localhost</host>\n+                <port>9000</port>\n+                <user>default</user>\n+                <password></password>\n+                <db>system</db>\n+                <query>select dummy, toString(dummy) from system.one</query>\n+            </clickhouse>\n+        </source>\n+        <lifetime>0</lifetime>\n+        <layout><flat /></layout>\n+        <structure>\n+            <id><name>key</name></id>\n+            <attribute>\n+                <name>name</name>\n+                <type>String</type>\n+                <null_value></null_value>\n+            </attribute>\n+        </structure>\n+    </dictionary>\n+</clickhouse>\ndiff --git a/tests/integration/test_dictionaries_dependency_xml/test.py b/tests/integration/test_dictionaries_dependency_xml/test.py\nindex 1b3ea32d09c7..13635c7b9698 100644\n--- a/tests/integration/test_dictionaries_dependency_xml/test.py\n+++ b/tests/integration/test_dictionaries_dependency_xml/test.py\n@@ -3,7 +3,7 @@\n from helpers.test_tools import assert_eq_with_retry\n \n DICTIONARY_FILES = ['configs/dictionaries/dep_x.xml', 'configs/dictionaries/dep_y.xml',\n-                    'configs/dictionaries/dep_z.xml']\n+                    'configs/dictionaries/dep_z.xml', 'configs/dictionaries/node.xml']\n \n cluster = ClickHouseCluster(__file__)\n instance = cluster.add_instance('instance', dictionaries=DICTIONARY_FILES, stay_alive=True)\n@@ -117,3 +117,10 @@ def test_dependent_tables(started_cluster):\n     query(\"drop table system.join\")\n     query(\"drop database a\")\n     query(\"drop database lazy\")\n+\n+\n+def test_xml_dict_same_name(started_cluster):\n+    instance.query(\"create table default.node ( key UInt64, name String ) Engine=Dictionary(node);\")\n+    instance.restart_clickhouse()\n+    assert \"node\" in instance.query(\"show tables from default\")\n+    instance.query(\"drop table default.node\")\n",
  "problem_statement": "21.11 unable to start: Cannot attach 1 tables due to cyclic dependencies\n21.11.3.6\r\n```\r\ncat /etc/clickhouse-server/node.tsv\r\n1,test\r\n\r\ncat /etc/clickhouse-server/node_dictionary.xml\r\n<dictionaries>\r\n    <dictionary>\r\n        <name>node</name>\r\n        <source>\r\n            <file>\r\n                <path>/etc/clickhouse-server/node.tsv</path>\r\n                <format>CSV</format>\r\n            </file>\r\n        </source>\r\n        <lifetime>0</lifetime>\r\n        <layout><flat /></layout>\r\n        <structure>\r\n            <id><name>key</name></id>\r\n            <attribute>\r\n                <name>name</name>\r\n                <type>String</type>\r\n                <null_value></null_value>\r\n            </attribute>\r\n        </structure>\r\n    </dictionary>\r\n</dictionaries>\r\n\r\ncreate table default.node ( key UInt64, name String ) Engine=Dictionary(node);\r\n\r\nselect * from default.node;\r\n\u250c\u2500key\u2500\u252c\u2500name\u2500\u2510\r\n\u2502   1 \u2502 test \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n/etc/init.d/clickhouse-server restart\r\n\r\n<Error> Application: DB::Exception: Cannot attach 1 tables due to cyclic dependencies. See server log for details.\r\n<Information> Application: shutting down\r\n```\n",
  "hints_text": "Workaround:\r\nadd `<ignore_table_dependencies_on_metadata_loading>` to the config.xml, it will disable dependencies check",
  "created_at": "2021-12-06T13:41:20Z",
  "modified_files": [
    "src/Databases/DDLDependencyVisitor.cpp",
    "src/Databases/DDLDependencyVisitor.h",
    "src/Databases/DatabaseMemory.cpp",
    "src/Databases/DatabaseOrdinary.cpp",
    "src/Databases/TablesLoader.cpp",
    "src/Interpreters/InterpreterCreateQuery.cpp"
  ],
  "modified_test_files": [
    "b/tests/integration/test_dictionaries_dependency_xml/configs/dictionaries/node.xml",
    "tests/integration/test_dictionaries_dependency_xml/test.py"
  ]
}