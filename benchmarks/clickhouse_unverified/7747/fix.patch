diff --git a/dbms/src/Columns/ColumnConst.h b/dbms/src/Columns/ColumnConst.h
index 5da6cc595278..5fdf9db1ab23 100644
--- a/dbms/src/Columns/ColumnConst.h
+++ b/dbms/src/Columns/ColumnConst.h
@@ -219,6 +219,7 @@ class ColumnConst final : public COWHelper<IColumn, ColumnConst>
 
     Field getField() const { return getDataColumn()[0]; }
 
+    /// The constant value. It is valid even if the size of the column is 0.
     template <typename T>
     T getValue() const { return getField().safeGet<NearestFieldType<T>>(); }
 };
diff --git a/dbms/src/Functions/array/arraySplit.cpp b/dbms/src/Functions/array/arraySplit.cpp
index 19bc599f856b..c23f3b0af21b 100644
--- a/dbms/src/Functions/array/arraySplit.cpp
+++ b/dbms/src/Functions/array/arraySplit.cpp
@@ -37,20 +37,24 @@ struct ArraySplitImpl
 
             size_t pos = 0;
 
-            out_offsets_2.reserve(in_offsets.size()); // the actual size would be equal or larger
+            out_offsets_2.reserve(in_offsets.size()); // assume the actual size to be equal or larger
             out_offsets_1.reserve(in_offsets.size());
 
             for (size_t i = 0; i < in_offsets.size(); ++i)
             {
-                pos += !reverse;
-                for (; pos < in_offsets[i] - reverse; ++pos)
+                if (pos < in_offsets[i])
                 {
-                    if (cut[pos])
-                        out_offsets_2.push_back(pos + reverse);
+                    pos += !reverse;
+                    for (; pos < in_offsets[i] - reverse; ++pos)
+                    {
+                        if (cut[pos])
+                            out_offsets_2.push_back(pos + reverse);
+                    }
+                    pos += reverse;
+
+                    out_offsets_2.push_back(pos);
                 }
-                pos += reverse;
 
-                out_offsets_2.push_back(pos);
                 out_offsets_1.push_back(out_offsets_2.size());
             }
         }
@@ -73,13 +77,21 @@ struct ArraySplitImpl
             }
             else
             {
+                size_t pos = 0;
+
                 out_offsets_2.reserve(in_offsets.size());
                 out_offsets_1.reserve(in_offsets.size());
 
                 for (size_t i = 0; i < in_offsets.size(); ++i)
                 {
-                    out_offsets_2.push_back(in_offsets[i]);
-                    out_offsets_1.push_back(i + 1);
+                    if (pos < in_offsets[i])
+                    {
+                        pos = in_offsets[i];
+
+                        out_offsets_2.push_back(pos);
+                    }
+
+                    out_offsets_1.push_back(out_offsets_2.size());
                 }
             }
         }
