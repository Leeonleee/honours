{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 7747,
  "instance_id": "ClickHouse__ClickHouse-7747",
  "issue_numbers": [
    "7708"
  ],
  "base_commit": "30acb1b653cbc21fbd8b873023a9f9ace0715e1a",
  "patch": "diff --git a/dbms/src/Columns/ColumnConst.h b/dbms/src/Columns/ColumnConst.h\nindex 5da6cc595278..5fdf9db1ab23 100644\n--- a/dbms/src/Columns/ColumnConst.h\n+++ b/dbms/src/Columns/ColumnConst.h\n@@ -219,6 +219,7 @@ class ColumnConst final : public COWHelper<IColumn, ColumnConst>\n \n     Field getField() const { return getDataColumn()[0]; }\n \n+    /// The constant value. It is valid even if the size of the column is 0.\n     template <typename T>\n     T getValue() const { return getField().safeGet<NearestFieldType<T>>(); }\n };\ndiff --git a/dbms/src/Functions/array/arraySplit.cpp b/dbms/src/Functions/array/arraySplit.cpp\nindex 19bc599f856b..c23f3b0af21b 100644\n--- a/dbms/src/Functions/array/arraySplit.cpp\n+++ b/dbms/src/Functions/array/arraySplit.cpp\n@@ -37,20 +37,24 @@ struct ArraySplitImpl\n \n             size_t pos = 0;\n \n-            out_offsets_2.reserve(in_offsets.size()); // the actual size would be equal or larger\n+            out_offsets_2.reserve(in_offsets.size()); // assume the actual size to be equal or larger\n             out_offsets_1.reserve(in_offsets.size());\n \n             for (size_t i = 0; i < in_offsets.size(); ++i)\n             {\n-                pos += !reverse;\n-                for (; pos < in_offsets[i] - reverse; ++pos)\n+                if (pos < in_offsets[i])\n                 {\n-                    if (cut[pos])\n-                        out_offsets_2.push_back(pos + reverse);\n+                    pos += !reverse;\n+                    for (; pos < in_offsets[i] - reverse; ++pos)\n+                    {\n+                        if (cut[pos])\n+                            out_offsets_2.push_back(pos + reverse);\n+                    }\n+                    pos += reverse;\n+\n+                    out_offsets_2.push_back(pos);\n                 }\n-                pos += reverse;\n \n-                out_offsets_2.push_back(pos);\n                 out_offsets_1.push_back(out_offsets_2.size());\n             }\n         }\n@@ -73,13 +77,21 @@ struct ArraySplitImpl\n             }\n             else\n             {\n+                size_t pos = 0;\n+\n                 out_offsets_2.reserve(in_offsets.size());\n                 out_offsets_1.reserve(in_offsets.size());\n \n                 for (size_t i = 0; i < in_offsets.size(); ++i)\n                 {\n-                    out_offsets_2.push_back(in_offsets[i]);\n-                    out_offsets_1.push_back(i + 1);\n+                    if (pos < in_offsets[i])\n+                    {\n+                        pos = in_offsets[i];\n+\n+                        out_offsets_2.push_back(pos);\n+                    }\n+\n+                    out_offsets_1.push_back(out_offsets_2.size());\n                 }\n             }\n         }\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/01015_array_split.reference b/dbms/tests/queries/0_stateless/01015_array_split.reference\nindex ea9d36a95b21..652e7ccc43c7 100644\n--- a/dbms/tests/queries/0_stateless/01015_array_split.reference\n+++ b/dbms/tests/queries/0_stateless/01015_array_split.reference\n@@ -6,8 +6,10 @@\n [[1],[2],[3],[4],[5]]\n [[1,2],[3,4],[5]]\n [[1],[2,3],[4,5]]\n-[[]]\n-[[]]\n+[]\n+[]\n+[]\n+[]\n []\n []\n [[1]]\ndiff --git a/dbms/tests/queries/0_stateless/01015_array_split.sql b/dbms/tests/queries/0_stateless/01015_array_split.sql\nindex 64d456ed7247..8ae96ba01e69 100644\n--- a/dbms/tests/queries/0_stateless/01015_array_split.sql\n+++ b/dbms/tests/queries/0_stateless/01015_array_split.sql\n@@ -12,6 +12,8 @@ SELECT arraySplit(x -> 0, []);\n SELECT arrayReverseSplit(x -> 0, []);\n SELECT arraySplit(x -> 1, []);\n SELECT arrayReverseSplit(x -> 1, []);\n+SELECT arraySplit(x -> x, emptyArrayUInt8());\n+SELECT arrayReverseSplit(x -> x, emptyArrayUInt8());\n \n SELECT arraySplit(x -> x % 2 = 1, [1]);\n SELECT arrayReverseSplit(x -> x % 2 = 1, [1]);\n",
  "problem_statement": "arraySplit usage lead to: Data compressed with different methods exception\n```\r\nException on client:\r\nCode: 271. DB::Exception: Data compressed with different methods, given method byte 00, previous method byte 82: while receiving packet from localhost:9000\r\n```\n",
  "hints_text": "Provide trace from clickhouse-server.log file, please. \n> Provide trace from clickhouse-server.log file, please.\r\n\r\n```\r\nWITH arrayFilter(x -> (x > 3), [0, 1, 2]) AS arr\r\nSELECT arraySplit(x -> (x < 0), arr) AS sp\r\n\r\n\u2193 Progress: 0.00 rows, 0.00 B (0.00 rows/s., 0.00 B/s.)\r\nException on client:\r\nCode: 271. DB::Exception: Data compressed with different methods, given method byte 83, previous method byte 82: while receiving packet from localhost:9000\r\n\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 19.16.2 revision 54427.\r\n```\r\n\r\nmaybe you can reproduce, very simple. when `arr` is null, arraySplit error\nTrace looks like this:\r\n```\r\n2019.11.11 15:56:14.150567 [ 116 ] {7c5a3220-80d7-4495-a171-6d53331fb08e} <Error> executeQuery: Code: 47, e.displayText() = DB::Exception: Missing columns: 'arr' while processing query: 'SELECT arraySplit(x -> (x < 0), arr) AS sp', required columns: 'arr', source columns: 'dummy' (version 19.15.1.1) (from [::1]:42930) (in query: SELECT arraySplit(x -> (x < 0), arr) AS sp), Stack t\r\nrace:\r\n\r\n0. 0x67f00b7 StackTrace::StackTrace() /home/alesap/code/cpp/ClickHouse/dbms/src/Common/StackTrace.cpp:228\r\n1. 0x9f8cb2d DB::SyntaxAnalyzerResult::collectUsedColumns(std::__1::shared_ptr<DB::IAST> const&, DB::NamesAndTypesList const&) /home/alesap/code/cpp/ClickHouse/dbms/src/Common/Exception.h:0\r\n2. 0x9f91ef1 DB::SyntaxAnalyzer::analyze(std::__1::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::IStorage>, DB::NamesAndTypesList\r\n const&) const /home/alesap/code/cpp/ClickHouse/contrib/libcxx/include/new:238\r\n3. 0x9d3fbee DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::\r\nbasic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)::$_1::operator()() const /home/alesap/code/cpp/ClickHouse/contrib/libcxx/include/memory:4215\r\n4. 0x9d3e1a8 DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::\r\nbasic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) /home/alesap/code/cpp/ClickHouse/dbms/src/Interpreters/InterpreterSelectQuery.cpp:399\r\n5. 0x9d3da87 DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) /home/a\r\nlesap/code/cpp/ClickHouse/dbms/src/Interpreters/InterpreterSelectQuery.cpp:176\r\n6. 0x9ea2f75 DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >\r\n > const&) /home/alesap/code/cpp/ClickHouse/contrib/libcxx/include/memory:2147\r\n7. 0x9d2118e std::__1::__unique_if<DB::InterpreterSelectWithUnionQuery>::__unique_single std::__1::make_unique<DB::InterpreterSelectWithUnionQuery, std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::SelectQueryOptions>(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::SelectQueryOptions&&) /home/alesap/code/cpp/ClickHouse/contrib/libcxx/include/memory:2147\r\n8. 0x9d207e6 DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::QueryProcessingStage::Enum) /home/alesap/code/cpp/ClickHouse/dbms/src/Interpreters/InterpreterFactory.cpp:0\r\n9. 0x9fd97a9 DB::executeQueryImpl(char const*, char const*, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*, bool) /home/alesap/code/cpp/ClickHouse/dbms/src/Interpreters/executeQuery.cpp:0\r\n10. 0x9fd8d74 DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, bool) /home/alesap/code/cpp/ClickHouse/dbms/src/Interpreters/executeQuery.cpp:568\r\n11. 0x68a6986 DB::TCPHandler::runImpl() /home/alesap/code/cpp/ClickHouse/dbms/programs/server/TCPHandler.cpp:0\r\n12. 0x68af89c DB::TCPHandler::run() /home/alesap/code/cpp/ClickHouse/dbms/programs/server/TCPHandler.cpp:0\r\n13. 0xa6f6e0c Poco::Net::TCPServerConnection::start() /home/alesap/code/cpp/ClickHouse/contrib/poco/Net/src/TCPServerConnection.cpp:57\r\n14. 0xa6f72b6 Poco::Net::TCPServerDispatcher::run() /home/alesap/code/cpp/ClickHouse/contrib/libcxx/include/atomic:1036\r\n15. 0xac8b43a Poco::PooledThread::run() /home/alesap/code/cpp/ClickHouse/contrib/poco/Foundation/include/Poco/Mutex_STD.h:132\r\n16. 0xac8905b Poco::ThreadImpl::runnableEntry(void*) /home/alesap/code/cpp/ClickHouse/contrib/poco/Foundation/include/Poco/SharedPtr.h:156\r\n17. 0xac8a8ab void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void* (*)(void*), Poco::ThreadImpl*> >(void*) /home/alesap/code/cpp/ClickHouse/contrib/libcxx/include/memory:2648\r\n18. 0x7f1dd18c96db start_thread /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n19. 0x7f1dd13ee88f clone /build/glibc-OTsEL5/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n```\n> Trace looks like this:\r\n> \r\n> ```\r\n> 2019.11.11 15:56:14.150567 [ 116 ] {7c5a3220-80d7-4495-a171-6d53331fb08e} <Error> executeQuery: Code: 47, e.displayText() = DB::Exception: Missing columns: 'arr' while processing query: 'SELECT arraySplit(x -> (x < 0), arr) AS sp', required columns: 'arr', source columns: 'dummy' (version 19.15.1.1) (from [::1]:42930) (in query: SELECT arraySplit(x -> (x < 0), arr) AS sp), Stack t\r\n> race:\r\n> \r\n> 0. 0x67f00b7 StackTrace::StackTrace() /home/alesap/code/cpp/ClickHouse/dbms/src/Common/StackTrace.cpp:228\r\n> 1. 0x9f8cb2d DB::SyntaxAnalyzerResult::collectUsedColumns(std::__1::shared_ptr<DB::IAST> const&, DB::NamesAndTypesList const&) /home/alesap/code/cpp/ClickHouse/dbms/src/Common/Exception.h:0\r\n> 2. 0x9f91ef1 DB::SyntaxAnalyzer::analyze(std::__1::shared_ptr<DB::IAST>&, DB::NamesAndTypesList const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::IStorage>, DB::NamesAndTypesList\r\n>  const&) const /home/alesap/code/cpp/ClickHouse/contrib/libcxx/include/new:238\r\n> 3. 0x9d3fbee DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::\r\n> basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&)::$_1::operator()() const /home/alesap/code/cpp/ClickHouse/contrib/libcxx/include/memory:4215\r\n> 4. 0x9d3e1a8 DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::\r\n> basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) /home/alesap/code/cpp/ClickHouse/dbms/src/Interpreters/InterpreterSelectQuery.cpp:399\r\n> 5. 0x9d3da87 DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) /home/a\r\n> lesap/code/cpp/ClickHouse/dbms/src/Interpreters/InterpreterSelectQuery.cpp:176\r\n> 6. 0x9ea2f75 DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >\r\n>  > const&) /home/alesap/code/cpp/ClickHouse/contrib/libcxx/include/memory:2147\r\n> 7. 0x9d2118e std::__1::__unique_if<DB::InterpreterSelectWithUnionQuery>::__unique_single std::__1::make_unique<DB::InterpreterSelectWithUnionQuery, std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::SelectQueryOptions>(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::SelectQueryOptions&&) /home/alesap/code/cpp/ClickHouse/contrib/libcxx/include/memory:2147\r\n> 8. 0x9d207e6 DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, DB::Context&, DB::QueryProcessingStage::Enum) /home/alesap/code/cpp/ClickHouse/dbms/src/Interpreters/InterpreterFactory.cpp:0\r\n> 9. 0x9fd97a9 DB::executeQueryImpl(char const*, char const*, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*, bool) /home/alesap/code/cpp/ClickHouse/dbms/src/Interpreters/executeQuery.cpp:0\r\n> 10. 0x9fd8d74 DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, bool) /home/alesap/code/cpp/ClickHouse/dbms/src/Interpreters/executeQuery.cpp:568\r\n> 11. 0x68a6986 DB::TCPHandler::runImpl() /home/alesap/code/cpp/ClickHouse/dbms/programs/server/TCPHandler.cpp:0\r\n> 12. 0x68af89c DB::TCPHandler::run() /home/alesap/code/cpp/ClickHouse/dbms/programs/server/TCPHandler.cpp:0\r\n> 13. 0xa6f6e0c Poco::Net::TCPServerConnection::start() /home/alesap/code/cpp/ClickHouse/contrib/poco/Net/src/TCPServerConnection.cpp:57\r\n> 14. 0xa6f72b6 Poco::Net::TCPServerDispatcher::run() /home/alesap/code/cpp/ClickHouse/contrib/libcxx/include/atomic:1036\r\n> 15. 0xac8b43a Poco::PooledThread::run() /home/alesap/code/cpp/ClickHouse/contrib/poco/Foundation/include/Poco/Mutex_STD.h:132\r\n> 16. 0xac8905b Poco::ThreadImpl::runnableEntry(void*) /home/alesap/code/cpp/ClickHouse/contrib/poco/Foundation/include/Poco/SharedPtr.h:156\r\n> 17. 0xac8a8ab void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void* (*)(void*), Poco::ThreadImpl*> >(void*) /home/alesap/code/cpp/ClickHouse/contrib/libcxx/include/memory:2648\r\n> 18. 0x7f1dd18c96db start_thread /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n> 19. 0x7f1dd13ee88f clone /build/glibc-OTsEL5/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97\r\n> ```\r\n\r\nadd `\\` as below:\r\n```\r\nWITH arrayFilter(x -> (x > 3), [0, 1, 2]) AS arr \\\r\nSELECT arraySplit(x -> (x < 0), arr) AS sp\r\n```\n@alesapin there is no exception on the server side. But it do some wierd stuff.\r\n```\r\necho 'WITH arrayFilter(x -> (x > 3), [0, 1, 2]) AS arr SELECT arraySplit(x -> (x < 0), arr) AS sp' | curl 'http://localhost:8123/' --data-binary @-\r\n[[208]]\r\necho 'WITH arrayFilter(x -> (x > 3), [0, 1, 2]) AS arr SELECT arraySplit(x -> (x < 0), arr) AS sp' | curl 'http://localhost:8123/' --data-binary @-\r\n[[224]]\r\n```\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/pull/7294\r\n/cc @hczhcz \nBit simpler example \r\n```\r\necho 'SELECT arraySplit(x -> (x < 0),  emptyArrayUInt8() ) AS sp' | curl 'http://localhost:8123/' --data-binary @-\r\n```",
  "created_at": "2019-11-13T02:43:27Z",
  "modified_files": [
    "dbms/src/Columns/ColumnConst.h",
    "dbms/src/Functions/array/arraySplit.cpp"
  ],
  "modified_test_files": [
    "dbms/tests/queries/0_stateless/01015_array_split.reference",
    "dbms/tests/queries/0_stateless/01015_array_split.sql"
  ]
}