{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 46087,
  "instance_id": "ClickHouse__ClickHouse-46087",
  "issue_numbers": [
    "46059"
  ],
  "base_commit": "af655eb7dcadd54d19b5c1934cbfc1e9c2aad7da",
  "patch": "diff --git a/src/Interpreters/BloomFilterHash.h b/src/Interpreters/BloomFilterHash.h\nindex 88feeb5b3df0..a340fe29ab40 100644\n--- a/src/Interpreters/BloomFilterHash.h\n+++ b/src/Interpreters/BloomFilterHash.h\n@@ -94,6 +94,8 @@ struct BloomFilterHash\n         else if (which.isFloat32()) return build_hash_column(getNumberTypeHash<Float64, Float64>(field));\n         else if (which.isFloat64()) return build_hash_column(getNumberTypeHash<Float64, Float64>(field));\n         else if (which.isUUID()) return build_hash_column(getNumberTypeHash<UUID, UUID>(field));\n+        else if (which.isIPv4()) return build_hash_column(getNumberTypeHash<IPv4, IPv4>(field));\n+        else if (which.isIPv6()) return build_hash_column(getNumberTypeHash<IPv6, IPv6>(field));\n         else if (which.isString()) return build_hash_column(getStringTypeHash(field));\n         else if (which.isFixedString()) return build_hash_column(getFixedStringTypeHash(field, data_type));\n         else throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Unexpected type {} of bloom filter index.\", data_type->getName());\n@@ -156,6 +158,8 @@ struct BloomFilterHash\n         else if (which.isFloat32()) getNumberTypeHash<Float32, is_first>(column, vec, pos);\n         else if (which.isFloat64()) getNumberTypeHash<Float64, is_first>(column, vec, pos);\n         else if (which.isUUID()) getNumberTypeHash<UUID, is_first>(column, vec, pos);\n+        else if (which.isIPv4()) getNumberTypeHash<IPv4, is_first>(column, vec, pos);\n+        else if (which.isIPv6()) getNumberTypeHash<IPv6, is_first>(column, vec, pos);\n         else if (which.isString()) getStringTypeHash<is_first>(column, vec, pos);\n         else if (which.isFixedString()) getStringTypeHash<is_first>(column, vec, pos);\n         else throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Unexpected type {} of bloom filter index.\", data_type->getName());\ndiff --git a/src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp b/src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp\nindex 7a8a28b24aaf..b3e6ec6ec10b 100644\n--- a/src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp\n+++ b/src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp\n@@ -88,7 +88,8 @@ static void assertIndexColumnsType(const Block & header)\n         WhichDataType which(actual_type);\n \n         if (!which.isUInt() && !which.isInt() && !which.isString() && !which.isFixedString() && !which.isFloat() &&\n-            !which.isDate() && !which.isDateTime() && !which.isDateTime64() && !which.isEnum() && !which.isUUID())\n+            !which.isDate() && !which.isDateTime() && !which.isDateTime64() && !which.isEnum() && !which.isUUID() &&\n+            !which.isIPv4() && !which.isIPv6())\n             throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Unexpected type {} of bloom filter index.\", type->getName());\n     }\n }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02559_ip_types_bloom.reference b/tests/queries/0_stateless/02559_ip_types_bloom.reference\nnew file mode 100644\nindex 000000000000..7a76aeeff8ef\n--- /dev/null\n+++ b/tests/queries/0_stateless/02559_ip_types_bloom.reference\n@@ -0,0 +1,1 @@\n+1\t1.1.1.1\t::1\ndiff --git a/tests/queries/0_stateless/02559_ip_types_bloom.sql b/tests/queries/0_stateless/02559_ip_types_bloom.sql\nnew file mode 100644\nindex 000000000000..b3fc16debd91\n--- /dev/null\n+++ b/tests/queries/0_stateless/02559_ip_types_bloom.sql\n@@ -0,0 +1,18 @@\n+DROP TABLE IF EXISTS ip_bloom;\n+\n+CREATE TABLE ip_bloom\n+(\n+    `a` UInt32,\n+    `ip4` Nullable(IPv4),\n+    `ip6` Nullable(IPv6),\n+    INDEX x4 ip4 TYPE bloom_filter(0.1) GRANULARITY 3,\n+    INDEX x6 ip6 TYPE bloom_filter(0.1) GRANULARITY 3\n+)\n+ENGINE = MergeTree\n+ORDER BY a;\n+\n+INSERT INTO ip_bloom VALUES (1, '1.1.1.1', '::1');\n+\n+SELECT * FROM ip_bloom;\n+\n+DROP TABLE ip_bloom;\n",
  "problem_statement": "DB::Exception: Unexpected type Nullable(IPv6) of bloom filter index\n**Describe the unexpected behaviour**\r\nCH 23.1.29. we got a \"DB::Exception: Unexpected type Nullable(IPv6) of bloom filter index\" error when creating table with Nullable(IPv6) of bloom filter index.\r\nCH 22.3.2.2 no such issue.\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use\r\n23.1.2.9\r\n* `CREATE TABLE` statements for all tables involved\r\ncreate TABLE test (`adom_oid` UInt32 CODEC(LZ4), `itime` DateTime CODEC(LZ4), `host_ip` Nullable(IPv6) CODEC(LZ4), INDEX sidx_host_ip host_ip TYPE bloom_filter(0.1) GRANULARITY 3) ENGINE = MergeTree PARTITION BY toYYYYMMDD(itime) ORDER BY (adom_oid, itime)  SETTINGS index_granularity = 8192\r\n\r\n**Error message and/or stacktrace**\r\n2023.02.05 10:24:22.995672 [ 1470001 ] {7bdc22e2-653b-40a5-bb05-582de1a36c82} <Error> TCPHandler: Code: 44. DB::Exception: Unexpected type Nullable(IPv6) of bloom filter index. (ILLEGAL_COLUMN), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. /home/yxu/code/ClickHouse/contrib/llvm-project/libcxx/include/exception:134: std::exception::capture() @ 0x188d0942 in /usr/bin/clickhouse\r\n1. /home/yxu/code/ClickHouse/contrib/llvm-project/libcxx/include/exception:112: std::exception::exception[abi:v15000]() @ 0x188d090d in /usr/bin/clickhouse\r\n2. /home/yxu/code/ClickHouse/contrib/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, int) @ 0x2fab91a0 in /usr/bin/clickhouse\r\n3. /home/yxu/code/ClickHouse/src/Common/Exception.cpp:89: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x21003ace in /usr/bin/clickhouse\r\n4. /home/yxu/code/ClickHouse/src/Common/Exception.h:64: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&, int, bool) @ 0x188c7c4a in /usr/bin/clickhouse\r\n5. /home/yxu/code/ClickHouse/src/Common/Exception.h:84: DB::Exception::Exception<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>(int, FormatStringHelperImpl<std::__1::type_identity<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>>::type>, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>&&) @ 0x188c4133 in /usr/bin/clickhouse\r\n6. /home/yxu/code/ClickHouse/src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp:92: DB::assertIndexColumnsType(DB::Block const&) @ 0x2a87e916 in /usr/bin/clickhouse\r\n7. /home/yxu/code/ClickHouse/src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp:117: DB::bloomFilterIndexValidatorNew(DB::IndexDescription const&, bool) @ 0x2a87e3e4 in /usr/bin/clickhouse\r\n8. /home/yxu/code/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394: decltype(std::declval<void (*&)(DB::IndexDescription const&, bool)>()(std::declval<DB::IndexDescription const&>(), std::declval<bool>())) std::__1::__invoke[abi:v15000]<void (*&)(DB::IndexDescription const&, bool), DB::IndexDescription const&, bool>(void (*&)(DB::IndexDescription const&, bool), DB::IndexDescription const&, bool&&) @ 0x2a84998d in /usr/bin/clickhouse\r\n9. /home/yxu/code/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:480: void std::__1::__invoke_void_return_wrapper<void, true>::__call<void (*&)(DB::IndexDescription const&, bool), DB::IndexDescription const&, bool>(void (*&)(DB::IndexDescription const&, bool), DB::IndexDescription const&, bool&&) @ 0x2a849945 in /usr/bin/clickhouse\r\n10. /home/yxu/code/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:235: std::__1::__function::__default_alloc_func<void (*)(DB::IndexDescription const&, bool), void (DB::IndexDescription const&, bool)>::operator()[abi:v15000](DB::IndexDescription const&, bool&&) @ 0x2a849905 in /usr/bin/clickhouse\r\n11. /home/yxu/code/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:716: void std::__1::__function::__policy_invoker<void (DB::IndexDescription const&, bool)>::__call_impl<std::__1::__function::__default_alloc_func<void (*)(DB::IndexDescription const&, bool), void (DB::IndexDescription const&, bool)>>(std::__1::__function::__policy_storage const*, DB::IndexDescription const&, bool) @ 0x2a8498b0 in /usr/bin/clickhouse\r\n\r\n\r\n**Additional context**\r\nit is related to this commit:\r\nhttps://github.com/ClickHouse/ClickHouse/commit/4d144be39ca7ff81c2570c68485eb06f03d28529\r\n\n",
  "hints_text": "```sql\r\ncreate TABLE test(\r\n   a UInt32, \r\n   ip Nullable(IPv6), \r\n   INDEX x1 ip TYPE bloom_filter(0.1) GRANULARITY 3\r\n)ENGINE = MergeTree ORDER BY (a);\r\n```",
  "created_at": "2023-02-06T16:35:47Z",
  "modified_files": [
    "src/Interpreters/BloomFilterHash.h",
    "src/Storages/MergeTree/MergeTreeIndexBloomFilter.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02559_ip_types_bloom.reference",
    "b/tests/queries/0_stateless/02559_ip_types_bloom.sql"
  ]
}