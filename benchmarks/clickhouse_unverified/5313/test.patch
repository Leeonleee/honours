diff --git a/dbms/src/Storages/tests/gtest_transform_query_for_external_database.cpp b/dbms/src/Storages/tests/gtest_transform_query_for_external_database.cpp
new file mode 100644
index 000000000000..4a25bff5d87d
--- /dev/null
+++ b/dbms/src/Storages/tests/gtest_transform_query_for_external_database.cpp
@@ -0,0 +1,75 @@
+#pragma GCC diagnostic ignored "-Wsign-compare"
+#ifdef __clang__
+    #pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"
+    #pragma clang diagnostic ignored "-Wundef"
+#endif
+#include <gtest/gtest.h>
+
+#include <Storages/transformQueryForExternalDatabase.h>
+#include <Parsers/ParserSelectQuery.h>
+#include <Parsers/parseQuery.h>
+#include <DataTypes/DataTypesNumber.h>
+#include <Interpreters/Context.h>
+#include <Databases/DatabaseMemory.h>
+#include <Storages/StorageMemory.h>
+#include <Functions/registerFunctions.h>
+
+
+using namespace DB;
+
+
+/// NOTE How to do better?
+struct State
+{
+    Context context{Context::createGlobal()};
+    NamesAndTypesList columns{{"column", std::make_shared<DataTypeUInt8>()}};
+
+    State()
+    {
+        registerFunctions();
+        DatabasePtr database = std::make_shared<DatabaseMemory>("test");
+        database->attachTable("table", StorageMemory::create("table", ColumnsDescription{columns}));
+        context.addDatabase("test", database);
+        context.setCurrentDatabase("test");
+    }
+};
+
+State & state()
+{
+    static State res;
+    return res;
+}
+
+
+void check(const std::string & query, const std::string & expected, const Context & context, const NamesAndTypesList & columns)
+{
+    ParserSelectQuery parser;
+    ASTPtr ast = parseQuery(parser, query, 1000);
+    std::string transformed_query = transformQueryForExternalDatabase(*ast, columns, IdentifierQuotingStyle::DoubleQuotes, "test", "table", context);
+
+    EXPECT_EQ(transformed_query, expected);
+}
+
+
+TEST(TransformQueryForExternalDatabase, InWithSingleElement)
+{
+    check("SELECT column FROM test.table WHERE 1 IN (1)",
+          "SELECT \"column\" FROM \"test\".\"table\"  WHERE 1 IN (1)",
+          state().context, state().columns);
+    check("SELECT column FROM test.table WHERE column IN (1, 2)",
+          "SELECT \"column\" FROM \"test\".\"table\"  WHERE \"column\" IN (1, 2)",
+          state().context, state().columns);
+    check("SELECT column FROM test.table WHERE column NOT IN ('hello', 'world')",
+          "SELECT \"column\" FROM \"test\".\"table\"  WHERE \"column\" NOT IN ('hello', 'world')",
+          state().context, state().columns);
+}
+
+TEST(TransformQueryForExternalDatabase, Like)
+{
+    check("SELECT column FROM test.table WHERE column LIKE '%hello%'",
+          "SELECT \"column\" FROM \"test\".\"table\"  WHERE \"column\" LIKE '%hello%'",
+          state().context, state().columns);
+    check("SELECT column FROM test.table WHERE column NOT LIKE 'w%rld'",
+          "SELECT \"column\" FROM \"test\".\"table\"  WHERE \"column\" NOT LIKE 'w%rld'",
+          state().context, state().columns);
+}
diff --git a/dbms/tests/queries/0_stateless/00948_format_in_with_single_element.reference b/dbms/tests/queries/0_stateless/00948_format_in_with_single_element.reference
new file mode 100644
index 000000000000..91f53ffadb02
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00948_format_in_with_single_element.reference
@@ -0,0 +1,13 @@
+SELECT 1 IN (1)
+SELECT 1 IN (1)
+SELECT 1 IN (1, 2)
+SELECT 1 IN (f(1))
+SELECT 1 IN (f(1))
+SELECT 1 IN (f(1), f(2))
+SELECT 1 IN (f(1, 2))
+SELECT 1 IN (1 + 1)
+SELECT 1 IN ('hello')
+SELECT 1 IN (f('hello'))
+SELECT 1 IN ('hello', 'world')
+SELECT 1 IN (f('hello', 'world'))
+SELECT 1 IN (SELECT 1)
diff --git a/dbms/tests/queries/0_stateless/00948_format_in_with_single_element.sh b/dbms/tests/queries/0_stateless/00948_format_in_with_single_element.sh
new file mode 100755
index 000000000000..c0a2f167ec57
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00948_format_in_with_single_element.sh
@@ -0,0 +1,22 @@
+#!/usr/bin/env bash
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+. $CURDIR/../shell_config.sh
+
+set -e
+
+format="$CLICKHOUSE_FORMAT --oneline"
+
+echo "SELECT 1 IN 1" | $format
+echo "SELECT 1 IN (1)" | $format
+echo "SELECT 1 IN (1, 2)" | $format
+echo "SELECT 1 IN f(1)" | $format
+echo "SELECT 1 IN (f(1))" | $format
+echo "SELECT 1 IN (f(1), f(2))" | $format
+echo "SELECT 1 IN f(1, 2)" | $format
+echo "SELECT 1 IN 1 + 1" | $format
+echo "SELECT 1 IN 'hello'" | $format
+echo "SELECT 1 IN f('hello')" | $format
+echo "SELECT 1 IN ('hello', 'world')" | $format
+echo "SELECT 1 IN f('hello', 'world')" | $format
+echo "SELECT 1 IN (SELECT 1)" | $format
diff --git a/dbms/tests/queries/shell_config.sh b/dbms/tests/queries/shell_config.sh
index ec65f148b01a..af222fc95310 100644
--- a/dbms/tests/queries/shell_config.sh
+++ b/dbms/tests/queries/shell_config.sh
@@ -22,6 +22,10 @@ export CLICKHOUSE_CONFIG_CLIENT=${CLICKHOUSE_CONFIG_CLIENT:="/etc/clickhouse-cli
 [ -x "${CLICKHOUSE_BINARY}" ] && CLICKHOUSE_EXTRACT_CONFIG=${CLICKHOUSE_EXTRACT_CONFIG:="$CLICKHOUSE_BINARY extract-from-config --config=$CLICKHOUSE_CONFIG"}
 export CLICKHOUSE_EXTRACT_CONFIG=${CLICKHOUSE_EXTRACT_CONFIG:="$CLICKHOUSE_BINARY-extract-from-config --config=$CLICKHOUSE_CONFIG"}
 
+[ -x "${CLICKHOUSE_BINARY}-format" ] && CLICKHOUSE_FORMAT=${CLICKHOUSE_FORMAT=:="$CLICKHOUSE_BINARY-format"}
+[ -x "${CLICKHOUSE_BINARY}" ] && CLICKHOUSE_FORMAT=${CLICKHOUSE_FORMAT:="$CLICKHOUSE_BINARY format"}
+export CLICKHOUSE_FORMAT=${CLICKHOUSE_FORMAT:="$CLICKHOUSE_BINARY-format"}
+
 export CLICKHOUSE_CONFIG_GREP=${CLICKHOUSE_CONFIG_GREP:="/etc/clickhouse-server/preprocessed/config.xml"}
 
 export CLICKHOUSE_HOST=${CLICKHOUSE_HOST:="localhost"}
