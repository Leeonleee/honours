{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 76985,
  "instance_id": "ClickHouse__ClickHouse-76985",
  "issue_numbers": [
    "76939"
  ],
  "base_commit": "0fde67049b30e5bcee198cf1e783f3758dba3f3f",
  "patch": "diff --git a/src/Storages/MergeTree/IMergeTreeDataPartWriter.cpp b/src/Storages/MergeTree/IMergeTreeDataPartWriter.cpp\nindex 45fec44c5f2f..d9a31a8f0fc7 100644\n--- a/src/Storages/MergeTree/IMergeTreeDataPartWriter.cpp\n+++ b/src/Storages/MergeTree/IMergeTreeDataPartWriter.cpp\n@@ -20,6 +20,7 @@ Block getIndexBlockAndPermute(const Block & block, const Names & names, const IC\n     {\n         auto src_column = block.getColumnOrSubcolumnByName(names[i]);\n         src_column.column = recursiveRemoveSparse(src_column.column);\n+        src_column.column = src_column.column->convertToFullColumnIfConst();\n         result.insert(i, src_column);\n \n         /// Reorder primary key columns in advance and add them to `primary_key_columns`.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03363_constant_nullable_key.reference b/tests/queries/0_stateless/03363_constant_nullable_key.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03363_constant_nullable_key.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/03363_constant_nullable_key.sql b/tests/queries/0_stateless/03363_constant_nullable_key.sql\nnew file mode 100644\nindex 000000000000..e84814be86b8\n--- /dev/null\n+++ b/tests/queries/0_stateless/03363_constant_nullable_key.sql\n@@ -0,0 +1,7 @@\n+DROP TABLE IF EXISTS t0;\n+\n+CREATE TABLE t0 (c0 Int) ENGINE = MergeTree() ORDER BY (c0 * NULL) SETTINGS allow_nullable_key = 1;\n+INSERT INTO TABLE t0 (c0) VALUES (1);\n+SELECT * FROM t0;\n+\n+DROP TABLE t0;\n",
  "problem_statement": "`allow_nullable_key = 1`: SEGV on MergeTree table with NULL in ordering\n### Describe the bug\n\nThis is regression since v25.1\n\n### How to reproduce\n\nRun Fiddle: https://fiddle.clickhouse.com/a6fc455c-fc59-4766-b34c-3eb60c3ce688\n\n### Error message and/or stacktrace\n\nStack trace on debug build:\n\n```\n<Fatal> : Logical error: 'Bad cast from type DB::ColumnConst to DB::ColumnNullable'.\n<Fatal> : Stack trace (when copying this message, always include the lines below):\n\n0. contrib/llvm-project/libcxx/include/__exception/exception.h:106: Poco::Exception::Exception(String const&, int) @ 0x000000001a713cb2\n1. src/Common/Exception.cpp:108: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000f8698d9\n2. src/Common/Exception.h:114: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000009e828ac\n3. src/Common/Exception.h:132: DB::Exception::Exception<String, String>(int, FormatStringHelperImpl<std::type_identity<String>::type, std::type_identity<String>::type>, String&&, String&&) @ 0x0000000009e8190b\n4. src/Common/assert_cast.h:48: DB::ColumnNullable const& assert_cast<DB::ColumnNullable const&, DB::IColumn const&>(DB::IColumn const&) @ 0x000000000a8ad26e\n5. src/DataTypes/Serializations/SerializationNullable.cpp:172: DB::SerializationNullable::serializeBinary(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const @ 0x0000000013896221\n6. src/Storages/MergeTree/MergeTreeDataPartWriterOnDisk.cpp:321: DB::MergeTreeDataPartWriterOnDisk::calculateAndSerializePrimaryIndexRow(DB::Block const&, unsigned long) @ 0x0000000015f8eef1\n7. src/Storages/MergeTree/MergeTreeDataPartWriterOnDisk.cpp:351: DB::MergeTreeDataPartWriterOnDisk::calculateAndSerializePrimaryIndex(DB::Block const&, std::vector<DB::Granule, std::allocator<DB::Granule>> const&) @ 0x0000000015f8f3e0\n8. src/Storages/MergeTree/MergeTreeDataPartWriterCompact.cpp:214: DB::MergeTreeDataPartWriterCompact::writeDataBlockPrimaryIndexAndSkipIndices(DB::Block const&, std::vector<DB::Granule, std::allocator<DB::Granule>> const&) @ 0x0000000015f88738\n9. src/Storages/MergeTree/MergeTreeDataPartWriterCompact.cpp:285: DB::MergeTreeDataPartWriterCompact::fillDataChecksums(DB::MergeTreeDataPartChecksums&) @ 0x0000000015f88fc4\n10. src/Storages/MergeTree/MergeTreeDataPartWriterCompact.cpp:453: DB::MergeTreeDataPartWriterCompact::fillChecksums(DB::MergeTreeDataPartChecksums&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>>&) @ 0x0000000015f899df\n11. src/Storages/MergeTree/MergedBlockOutputStream.cpp:214: DB::MergedBlockOutputStream::finalizePartAsync(std::shared_ptr<DB::IMergeTreeDataPart> const&, bool, DB::NamesAndTypesList const*, DB::MergeTreeDataPartChecksums*, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>*) @ 0x00000000160dc432\n12. src/Storages/MergeTree/MergeTreeDataWriter.cpp:783: DB::MergeTreeDataWriter::writeTempPartImpl(DB::BlockWithPartition&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::Context const>, long, bool) @ 0x0000000015fc6ea5\n13. src/Storages/MergeTree/MergeTreeDataWriter.cpp:484: DB::MergeTreeDataWriter::writeTempPart(DB::BlockWithPartition&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::Context const>) @ 0x0000000015fc34bf\n14. src/Storages/MergeTree/MergeTreeSink.cpp:127: DB::MergeTreeSink::consume(DB::Chunk&) @ 0x000000001622fcd4\n15. src/Processors/Sinks/SinkToStorage.cpp:10: DB::SinkToStorage::onConsume(DB::Chunk) @ 0x00000000168a3f73\n16. src/Processors/Transforms/ExceptionKeepingTransform.cpp:151: void std::__function::__policy_invoker<void ()>::__call_impl[abi:se190107]<std::__function::__default_alloc_func<DB::ExceptionKeepingTransform::work()::$_1, void ()>>(std::__function::__policy_storage const*) @ 0x00000000167c0549\n17. contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x00000000167c03b5\n18. src/Processors/Transforms/ExceptionKeepingTransform.cpp:151: DB::ExceptionKeepingTransform::work() @ 0x00000000167bfebe\n19. src/Processors/Executors/ExecutionThreadContext.cpp:53: DB::ExecutionThreadContext::executeTask() @ 0x000000001657082f\n20. src/Processors/Executors/PipelineExecutor.cpp:296: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x0000000016565925\n21. src/Processors/Executors/PipelineExecutor.cpp:170: DB::PipelineExecutor::executeStep(std::atomic<bool>*) @ 0x0000000016564ec7\n22. src/Processors/Executors/PushingPipelineExecutor.cpp:131: DB::PushingPipelineExecutor::finish() @ 0x000000001657703f\n23. src/Server/TCPHandler.cpp:1128: DB::TCPHandler::processInsertQuery(DB::QueryState&) @ 0x00000000164b28cc\n24. src/Server/TCPHandler.cpp:673: DB::TCPHandler::runImpl() @ 0x00000000164a845c\n25. src/Server/TCPHandler.cpp:2629: DB::TCPHandler::run() @ 0x00000000164c04b9\n26. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000001a7b3667\n27. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000001a7b3b3e\n28. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000001a7611d2\n29. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001a75ee0f\n30. ? @ 0x00007ffff7ca1e2e\n31. ? @ 0x00007ffff7d33a4\n```\n",
  "hints_text": "",
  "created_at": "2025-02-28T16:29:39Z",
  "modified_files": [
    "src/Storages/MergeTree/IMergeTreeDataPartWriter.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03363_constant_nullable_key.reference",
    "b/tests/queries/0_stateless/03363_constant_nullable_key.sql"
  ]
}