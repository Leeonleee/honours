diff --git a/tests/queries/0_stateless/02477_logical_expressions_optimizer_low_cardinality.reference b/tests/queries/0_stateless/02477_logical_expressions_optimizer_low_cardinality.reference
index 84589668d64a..ff5f7e5a6877 100644
--- a/tests/queries/0_stateless/02477_logical_expressions_optimizer_low_cardinality.reference
+++ b/tests/queries/0_stateless/02477_logical_expressions_optimizer_low_cardinality.reference
@@ -36,6 +36,42 @@ QUERY id: 0
   SETTINGS allow_experimental_analyzer=1
 SELECT a
 FROM t_logical_expressions_optimizer_low_cardinality
+WHERE (a != \'x\') AND (a != \'y\')
+QUERY id: 0
+  PROJECTION COLUMNS
+    a LowCardinality(String)
+  PROJECTION
+    LIST id: 1, nodes: 1
+      COLUMN id: 2, column_name: a, result_type: LowCardinality(String), source_id: 3
+  JOIN TREE
+    TABLE id: 3, table_name: default.t_logical_expressions_optimizer_low_cardinality
+  WHERE
+    FUNCTION id: 4, function_name: notIn, function_type: ordinary, result_type: UInt8
+      ARGUMENTS
+        LIST id: 5, nodes: 2
+          COLUMN id: 2, column_name: a, result_type: LowCardinality(String), source_id: 3
+          CONSTANT id: 6, constant_value: Tuple_(\'x\', \'y\'), constant_value_type: Tuple(String, String)
+  SETTINGS allow_experimental_analyzer=1
+SELECT a
+FROM t_logical_expressions_optimizer_low_cardinality
+WHERE (a != \'x\') AND (\'y\' != a)
+QUERY id: 0
+  PROJECTION COLUMNS
+    a LowCardinality(String)
+  PROJECTION
+    LIST id: 1, nodes: 1
+      COLUMN id: 2, column_name: a, result_type: LowCardinality(String), source_id: 3
+  JOIN TREE
+    TABLE id: 3, table_name: default.t_logical_expressions_optimizer_low_cardinality
+  WHERE
+    FUNCTION id: 4, function_name: notIn, function_type: ordinary, result_type: UInt8
+      ARGUMENTS
+        LIST id: 5, nodes: 2
+          COLUMN id: 2, column_name: a, result_type: LowCardinality(String), source_id: 3
+          CONSTANT id: 6, constant_value: Tuple_(\'x\', \'y\'), constant_value_type: Tuple(String, String)
+  SETTINGS allow_experimental_analyzer=1
+SELECT a
+FROM t_logical_expressions_optimizer_low_cardinality
 WHERE (b = 0) OR (b = 1)
 QUERY id: 0
   PROJECTION COLUMNS
@@ -60,3 +96,29 @@ QUERY id: 0
                 COLUMN id: 8, column_name: b, result_type: UInt32, source_id: 3
                 CONSTANT id: 12, constant_value: UInt64_1, constant_value_type: UInt8
   SETTINGS allow_experimental_analyzer=1
+SELECT a
+FROM t_logical_expressions_optimizer_low_cardinality
+WHERE (b != 0) AND (b != 1)
+QUERY id: 0
+  PROJECTION COLUMNS
+    a LowCardinality(String)
+  PROJECTION
+    LIST id: 1, nodes: 1
+      COLUMN id: 2, column_name: a, result_type: LowCardinality(String), source_id: 3
+  JOIN TREE
+    TABLE id: 3, table_name: default.t_logical_expressions_optimizer_low_cardinality
+  WHERE
+    FUNCTION id: 4, function_name: and, function_type: ordinary, result_type: UInt8
+      ARGUMENTS
+        LIST id: 5, nodes: 2
+          FUNCTION id: 6, function_name: notEquals, function_type: ordinary, result_type: UInt8
+            ARGUMENTS
+              LIST id: 7, nodes: 2
+                COLUMN id: 8, column_name: b, result_type: UInt32, source_id: 3
+                CONSTANT id: 9, constant_value: UInt64_0, constant_value_type: UInt8
+          FUNCTION id: 10, function_name: notEquals, function_type: ordinary, result_type: UInt8
+            ARGUMENTS
+              LIST id: 11, nodes: 2
+                COLUMN id: 8, column_name: b, result_type: UInt32, source_id: 3
+                CONSTANT id: 12, constant_value: UInt64_1, constant_value_type: UInt8
+  SETTINGS allow_experimental_analyzer=1
diff --git a/tests/queries/0_stateless/02477_logical_expressions_optimizer_low_cardinality.sql b/tests/queries/0_stateless/02477_logical_expressions_optimizer_low_cardinality.sql
index 14f8ad830e75..976b21a7e29d 100644
--- a/tests/queries/0_stateless/02477_logical_expressions_optimizer_low_cardinality.sql
+++ b/tests/queries/0_stateless/02477_logical_expressions_optimizer_low_cardinality.sql
@@ -2,13 +2,24 @@ DROP TABLE IF EXISTS t_logical_expressions_optimizer_low_cardinality;
 set optimize_min_equality_disjunction_chain_length=3;
 CREATE TABLE t_logical_expressions_optimizer_low_cardinality (a LowCardinality(String), b UInt32) ENGINE = Memory;
 
--- LowCardinality case, ignore optimize_min_equality_disjunction_chain_length limit, optimzer applied
+-- LowCardinality case, ignore optimize_min_equality_disjunction_chain_length limit, optimizer applied
+-- Chain of OR equals
 EXPLAIN SYNTAX SELECT a FROM t_logical_expressions_optimizer_low_cardinality WHERE a = 'x' OR a = 'y';
 EXPLAIN QUERY TREE SELECT a FROM t_logical_expressions_optimizer_low_cardinality WHERE a = 'x' OR a = 'y' SETTINGS allow_experimental_analyzer = 1;
 EXPLAIN SYNTAX SELECT a FROM t_logical_expressions_optimizer_low_cardinality WHERE a = 'x' OR 'y' = a;
 EXPLAIN QUERY TREE SELECT a FROM t_logical_expressions_optimizer_low_cardinality WHERE a = 'x' OR 'y' = a SETTINGS allow_experimental_analyzer = 1;
+-- Chain of AND notEquals
+EXPLAIN SYNTAX SELECT a FROM t_logical_expressions_optimizer_low_cardinality WHERE a <> 'x' AND a <> 'y';
+EXPLAIN QUERY TREE SELECT a FROM t_logical_expressions_optimizer_low_cardinality WHERE a <> 'x' AND a <> 'y' SETTINGS allow_experimental_analyzer = 1;
+EXPLAIN SYNTAX SELECT a FROM t_logical_expressions_optimizer_low_cardinality WHERE a <> 'x' AND 'y' <> a;
+EXPLAIN QUERY TREE SELECT a FROM t_logical_expressions_optimizer_low_cardinality WHERE a <> 'x' AND 'y' <> a SETTINGS allow_experimental_analyzer = 1;
+
 -- Non-LowCardinality case, optimizer not applied for short chains
+-- Chain of OR equals
 EXPLAIN SYNTAX SELECT a FROM t_logical_expressions_optimizer_low_cardinality WHERE b = 0 OR b = 1;
 EXPLAIN QUERY TREE SELECT a FROM t_logical_expressions_optimizer_low_cardinality WHERE b = 0 OR b = 1 SETTINGS allow_experimental_analyzer = 1;
+-- Chain of AND notEquals
+EXPLAIN SYNTAX SELECT a FROM t_logical_expressions_optimizer_low_cardinality WHERE b <> 0 AND b <> 1;
+EXPLAIN QUERY TREE SELECT a FROM t_logical_expressions_optimizer_low_cardinality WHERE b <> 0 AND b <> 1 SETTINGS allow_experimental_analyzer = 1;
 
 DROP TABLE t_logical_expressions_optimizer_low_cardinality;
diff --git a/tests/queries/0_stateless/02668_logical_optimizer_removing_redundant_checks.reference b/tests/queries/0_stateless/02668_logical_optimizer_removing_redundant_checks.reference
index cc74b0237fee..089d1849eb4a 100644
--- a/tests/queries/0_stateless/02668_logical_optimizer_removing_redundant_checks.reference
+++ b/tests/queries/0_stateless/02668_logical_optimizer_removing_redundant_checks.reference
@@ -87,5 +87,40 @@ QUERY id: 0
         LIST id: 6, nodes: 2
           COLUMN id: 7, column_name: a, result_type: Int32, source_id: 3
           CONSTANT id: 8, constant_value: UInt64_2, constant_value_type: UInt8
+2	test2
+QUERY id: 0
+  PROJECTION COLUMNS
+    a Int32
+    b LowCardinality(String)
+  PROJECTION
+    LIST id: 1, nodes: 2
+      COLUMN id: 2, column_name: a, result_type: Int32, source_id: 3
+      COLUMN id: 4, column_name: b, result_type: LowCardinality(String), source_id: 3
+  JOIN TREE
+    TABLE id: 3, table_name: default.02668_logical_optimizer
+  WHERE
+    FUNCTION id: 5, function_name: notIn, function_type: ordinary, result_type: UInt8
+      ARGUMENTS
+        LIST id: 6, nodes: 2
+          COLUMN id: 7, column_name: a, result_type: Int32, source_id: 3
+          CONSTANT id: 8, constant_value: Tuple_(UInt64_1, UInt64_3), constant_value_type: Tuple(UInt8, UInt8)
+2	test2
+3	another
+QUERY id: 0
+  PROJECTION COLUMNS
+    a Int32
+    b LowCardinality(String)
+  PROJECTION
+    LIST id: 1, nodes: 2
+      COLUMN id: 2, column_name: a, result_type: Int32, source_id: 3
+      COLUMN id: 4, column_name: b, result_type: LowCardinality(String), source_id: 3
+  JOIN TREE
+    TABLE id: 3, table_name: default.02668_logical_optimizer
+  WHERE
+    FUNCTION id: 5, function_name: notEquals, function_type: ordinary, result_type: UInt8
+      ARGUMENTS
+        LIST id: 6, nodes: 2
+          COLUMN id: 7, column_name: a, result_type: Int32, source_id: 3
+          CONSTANT id: 8, constant_value: UInt64_1, constant_value_type: UInt8
 1
 1
diff --git a/tests/queries/0_stateless/02668_logical_optimizer_removing_redundant_checks.sql b/tests/queries/0_stateless/02668_logical_optimizer_removing_redundant_checks.sql
index 5dee450086c0..7d624195df9b 100644
--- a/tests/queries/0_stateless/02668_logical_optimizer_removing_redundant_checks.sql
+++ b/tests/queries/0_stateless/02668_logical_optimizer_removing_redundant_checks.sql
@@ -8,6 +8,7 @@ ENGINE=Memory;
 
 INSERT INTO 02668_logical_optimizer VALUES (1, 'test'), (2, 'test2'), (3, 'another');
 
+-- Chain of OR equals
 SET optimize_min_equality_disjunction_chain_length = 2;
 
 SELECT * FROM 02668_logical_optimizer WHERE a = 1 OR 3 = a OR 1 = a;
@@ -16,6 +17,7 @@ EXPLAIN QUERY TREE SELECT * FROM 02668_logical_optimizer WHERE a = 1 OR 3 = a OR
 SELECT * FROM 02668_logical_optimizer WHERE a = 1 OR 1 = a;
 EXPLAIN QUERY TREE SELECT * FROM 02668_logical_optimizer WHERE a = 1 OR 1 = a;
 
+-- Chain of AND equals
 SELECT * FROM 02668_logical_optimizer WHERE a = 1 AND 2 = a;
 EXPLAIN QUERY TREE SELECT * FROM 02668_logical_optimizer WHERE a = 1 AND 2 = a;
 
@@ -25,6 +27,15 @@ EXPLAIN QUERY TREE SELECT * FROM 02668_logical_optimizer WHERE a = 3 AND b = 'an
 SELECT * FROM 02668_logical_optimizer WHERE a = 2 AND 2 = a;
 EXPLAIN QUERY TREE SELECT * FROM 02668_logical_optimizer WHERE a = 2 AND 2 = a;
 
+-- Chain of AND notEquals
+SET optimize_min_inequality_conjunction_chain_length = 2;
+
+SELECT * FROM 02668_logical_optimizer WHERE a <> 1 AND 3 <> a AND 1 <> a;
+EXPLAIN QUERY TREE SELECT * FROM 02668_logical_optimizer WHERE a <> 1 AND 3 <> a AND 1 <> a;
+
+SELECT * FROM 02668_logical_optimizer WHERE a <> 1 AND 1 <> a;
+EXPLAIN QUERY TREE SELECT * FROM 02668_logical_optimizer WHERE a <> 1 AND 1 <> a;
+
 SELECT a FROM 02668_logical_optimizer WHERE (b = 'test') AND ('test' = b);
 
 SELECT (k = 3) OR ( (k = 1) OR (k = 2) OR ( (NULL OR 1) = k ) ) FROM ( SELECT materialize(1) AS k );
diff --git a/tests/queries/0_stateless/02952_conjunction_optimization.reference b/tests/queries/0_stateless/02952_conjunction_optimization.reference
new file mode 100644
index 000000000000..64663cea6620
--- /dev/null
+++ b/tests/queries/0_stateless/02952_conjunction_optimization.reference
@@ -0,0 +1,117 @@
+3	another
+3	
+QUERY id: 0
+  PROJECTION COLUMNS
+    a Int32
+    b String
+  PROJECTION
+    LIST id: 1, nodes: 2
+      COLUMN id: 2, column_name: a, result_type: Int32, source_id: 3
+      COLUMN id: 4, column_name: b, result_type: String, source_id: 3
+  JOIN TREE
+    TABLE id: 3, table_name: default.02952_disjunction_optimization
+  WHERE
+    FUNCTION id: 5, function_name: notIn, function_type: ordinary, result_type: UInt8
+      ARGUMENTS
+        LIST id: 6, nodes: 2
+          COLUMN id: 7, column_name: a, result_type: Int32, source_id: 3
+          CONSTANT id: 8, constant_value: Tuple_(UInt64_1, UInt64_2, UInt64_4), constant_value_type: Tuple(UInt8, UInt8, UInt8)
+3	another
+3	
+QUERY id: 0
+  PROJECTION COLUMNS
+    a Int32
+    b String
+  PROJECTION
+    LIST id: 1, nodes: 2
+      COLUMN id: 2, column_name: a, result_type: Int32, source_id: 3
+      COLUMN id: 4, column_name: b, result_type: String, source_id: 3
+  JOIN TREE
+    TABLE id: 3, table_name: default.02952_disjunction_optimization
+  WHERE
+    FUNCTION id: 5, function_name: and, function_type: ordinary, result_type: Bool
+      ARGUMENTS
+        LIST id: 6, nodes: 2
+          CONSTANT id: 7, constant_value: UInt64_1, constant_value_type: Bool
+          FUNCTION id: 8, function_name: notIn, function_type: ordinary, result_type: UInt8
+            ARGUMENTS
+              LIST id: 9, nodes: 2
+                COLUMN id: 10, column_name: a, result_type: Int32, source_id: 3
+                CONSTANT id: 11, constant_value: Tuple_(UInt64_1, UInt64_2, UInt64_4), constant_value_type: Tuple(UInt8, UInt8, UInt8)
+3	another
+QUERY id: 0
+  PROJECTION COLUMNS
+    a Int32
+    b String
+  PROJECTION
+    LIST id: 1, nodes: 2
+      COLUMN id: 2, column_name: a, result_type: Int32, source_id: 3
+      COLUMN id: 4, column_name: b, result_type: String, source_id: 3
+  JOIN TREE
+    TABLE id: 3, table_name: default.02952_disjunction_optimization
+  WHERE
+    FUNCTION id: 5, function_name: and, function_type: ordinary, result_type: UInt8
+      ARGUMENTS
+        LIST id: 6, nodes: 2
+          FUNCTION id: 7, function_name: notEquals, function_type: ordinary, result_type: UInt8
+            ARGUMENTS
+              LIST id: 8, nodes: 2
+                COLUMN id: 9, column_name: b, result_type: String, source_id: 3
+                CONSTANT id: 10, constant_value: \'\', constant_value_type: String
+          FUNCTION id: 11, function_name: notIn, function_type: ordinary, result_type: UInt8
+            ARGUMENTS
+              LIST id: 12, nodes: 2
+                COLUMN id: 13, column_name: a, result_type: Int32, source_id: 3
+                CONSTANT id: 14, constant_value: Tuple_(UInt64_1, UInt64_2, UInt64_4), constant_value_type: Tuple(UInt8, UInt8, UInt8)
+3	
+QUERY id: 0
+  PROJECTION COLUMNS
+    a Int32
+    b String
+  PROJECTION
+    LIST id: 1, nodes: 2
+      COLUMN id: 2, column_name: a, result_type: Int32, source_id: 3
+      COLUMN id: 4, column_name: b, result_type: String, source_id: 3
+  JOIN TREE
+    TABLE id: 3, table_name: default.02952_disjunction_optimization
+  WHERE
+    FUNCTION id: 5, function_name: and, function_type: ordinary, result_type: UInt8
+      ARGUMENTS
+        LIST id: 6, nodes: 2
+          FUNCTION id: 7, function_name: equals, function_type: ordinary, result_type: UInt8
+            ARGUMENTS
+              LIST id: 8, nodes: 2
+                COLUMN id: 9, column_name: b, result_type: String, source_id: 3
+                CONSTANT id: 10, constant_value: \'\', constant_value_type: String
+          FUNCTION id: 11, function_name: notIn, function_type: ordinary, result_type: UInt8
+            ARGUMENTS
+              LIST id: 12, nodes: 2
+                COLUMN id: 13, column_name: a, result_type: Int32, source_id: 3
+                CONSTANT id: 14, constant_value: Tuple_(UInt64_1, UInt64_2, UInt64_4), constant_value_type: Tuple(UInt8, UInt8, UInt8)
+3	another
+3	
+4	
+QUERY id: 0
+  PROJECTION COLUMNS
+    a Int32
+    b String
+  PROJECTION
+    LIST id: 1, nodes: 2
+      COLUMN id: 2, column_name: a, result_type: Int32, source_id: 3
+      COLUMN id: 4, column_name: b, result_type: String, source_id: 3
+  JOIN TREE
+    TABLE id: 3, table_name: default.02952_disjunction_optimization
+  WHERE
+    FUNCTION id: 5, function_name: or, function_type: ordinary, result_type: UInt8
+      ARGUMENTS
+        LIST id: 6, nodes: 2
+          FUNCTION id: 7, function_name: notIn, function_type: ordinary, result_type: UInt8
+            ARGUMENTS
+              LIST id: 8, nodes: 2
+                COLUMN id: 9, column_name: a, result_type: Int32, source_id: 3
+                CONSTANT id: 10, constant_value: Tuple_(UInt64_1, UInt64_2, UInt64_4), constant_value_type: Tuple(UInt8, UInt8, UInt8)
+          FUNCTION id: 11, function_name: equals, function_type: ordinary, result_type: UInt8
+            ARGUMENTS
+              LIST id: 12, nodes: 2
+                COLUMN id: 13, column_name: b, result_type: String, source_id: 3
+                CONSTANT id: 14, constant_value: \'\', constant_value_type: String
diff --git a/tests/queries/0_stateless/02952_conjunction_optimization.sql b/tests/queries/0_stateless/02952_conjunction_optimization.sql
new file mode 100644
index 000000000000..94bc352e4c5b
--- /dev/null
+++ b/tests/queries/0_stateless/02952_conjunction_optimization.sql
@@ -0,0 +1,26 @@
+SET allow_experimental_analyzer = 1;
+
+DROP TABLE IF EXISTS 02952_disjunction_optimization;
+
+CREATE TABLE 02952_disjunction_optimization
+(a Int32, b String)
+ENGINE=Memory;
+
+INSERT INTO 02952_disjunction_optimization VALUES (1, 'test'), (2, 'test2'), (3, 'another'), (3, ''), (4, '');
+
+SELECT * FROM 02952_disjunction_optimization WHERE a <> 1 AND a <> 2 AND a <> 4;
+EXPLAIN QUERY TREE SELECT * FROM 02952_disjunction_optimization WHERE a <> 1 AND a <> 2 AND a <> 4;
+
+SELECT * FROM 02952_disjunction_optimization WHERE a <> 1 AND a <> 2 AND a <> 4 AND true;
+EXPLAIN QUERY TREE SELECT * FROM 02952_disjunction_optimization WHERE a <> 1 AND a <> 2 AND a <> 4 AND true;
+
+SELECT * FROM 02952_disjunction_optimization WHERE a <> 1 AND a <> 2 AND a <> 4 AND b <> '';
+EXPLAIN QUERY TREE SELECT * FROM 02952_disjunction_optimization WHERE a <> 1 AND a <> 2 AND a <> 4 AND b <> '';
+
+SELECT * FROM 02952_disjunction_optimization WHERE a <> 1 AND a <> 2 AND b = '' AND a <> 4;
+EXPLAIN QUERY TREE SELECT * FROM 02952_disjunction_optimization WHERE a <> 1 AND a <> 2 AND b = '' AND a <> 4;
+
+SELECT * FROM 02952_disjunction_optimization WHERE (a <> 1 AND a <> 2 AND a <> 4) OR b = '';
+EXPLAIN QUERY TREE SELECT * FROM 02952_disjunction_optimization WHERE (a <> 1 AND a <> 2 AND a <> 4) OR b = '';
+
+DROP TABLE 02952_disjunction_optimization;
