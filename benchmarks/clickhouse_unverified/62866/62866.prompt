You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
`... IS NULL` & `(... IS NULL) > 0` WHERE clauses return different results
**Describe what's wrong**

`SELECT COUNT(*) FROM foo WHERE bar IS NULL` gives different results than `SELECT COUNT(*) FROM foo WHERE (bar IS NULL) > 0` when `bar` is `LowCardinality(Nullable(string))`.

I have two tables with exact data each:

```sql
CREATE TABLE tmp.small
(
    `dt` DateTime('UTC') DEFAULT now() CODEC(Delta(4), ZSTD(1)),
    `user_email` LowCardinality(Nullable(String))
)
ENGINE = MergeTree
PARTITION BY toStartOfInterval(dt, toIntervalHour(6))
ORDER BY (dt, user_email)
TTL toDateTime(dt) + toIntervalDay(180)
SETTINGS storage_policy = 'default', allow_nullable_key = 1, index_granularity = 8192
```

```sql
CREATE TABLE tmp.small_no_low_cardinality
(
    `dt` DateTime('UTC') DEFAULT now() CODEC(Delta(4), ZSTD(1)),
    `user_email` Nullable(String)
)
ENGINE = MergeTree
PARTITION BY toStartOfInterval(dt, toIntervalHour(6))
ORDER BY (dt, user_email)
TTL toDateTime(dt) + toIntervalDay(180)
SETTINGS storage_policy = 'default', allow_nullable_key = 1, index_granularity = 8192
```

Count of rows in each:

```
SELECT COUNT(*)
FROM tmp.small

Query id: 000dc867-ab9a-46e4-b193-96401a1bbbc5

┌──count()─┐
│ 20926837 │
└──────────┘

1 row in set. Elapsed: 0.052 sec. Processed 20.93 million rows, 83.71 MB (404.16 million rows/s., 1.62 GB/s.)
Peak memory usage: 15.67 MiB.
```

```
SELECT COUNT(*)
FROM tmp.small_no_low_cardinality

Query id: d08b64a6-b497-4fc6-a155-22f73c7d4dfa

┌──count()─┐
│ 20926837 │
└──────────┘

1 row in set. Elapsed: 0.362 sec. Processed 20.93 million rows, 83.71 MB (57.85 million rows/s., 231.39 MB/s.)
Peak memory usage: 15.80 MiB.
```

On `small_no_low_cardinality` table the counts of `NOT NULL` user_emails are consistent:

```
SELECT COUNT(*)
FROM tmp.small_no_low_cardinality
WHERE user_email IS NULL

Query id: 39d1039b-6000-4345-8c88-dc18b848e87b

┌─count()─┐
│ 8233409 │
└─────────┘

1 row in set. Elapsed: 0.096 sec. Processed 20.93 million rows, 472.06 MB (218.07 million rows/s., 4.92 GB/s.)
Peak memory usage: 15.92 MiB.
```

```
SELECT COUNT(*)
FROM tmp.small_no_low_cardinality
WHERE (user_email IS NULL) > 0

Query id: ba4a8fd8-0f6f-4be3-b39b-94732e71fa7b

┌─count()─┐
│ 8233409 │
└─────────┘

1 row in set. Elapsed: 0.442 sec. Processed 20.93 million rows, 472.06 MB (47.37 million rows/s., 1.07 GB/s.)
Peak memory usage: 15.65 MiB.
```

But on `small` table it's incosistent:

```
SELECT COUNT(*)
FROM tmp.small
WHERE user_email IS NULL

Query id: a29b1877-e1fa-4a29-933b-b852d883448c

┌─count()─┐
│ 7459983 │
└─────────┘

1 row in set. Elapsed: 0.076 sec. Processed 10.82 million rows, 19.59 MB (142.88 million rows/s., 258.74 MB/s.)
Peak memory usage: 10.45 MiB.
```

```
SELECT COUNT(*)
FROM tmp.small
WHERE (user_email IS NULL) > 0

Query id: 9a3ea617-c95c-4222-99e4-179c9b05d70b

┌─count()─┐
│ 8233409 │
└─────────┘

1 row in set. Elapsed: 0.059 sec. Processed 20.93 million rows, 40.49 MB (355.71 million rows/s., 688.27 MB/s.)
Peak memory usage: 15.57 MiB.
```

I'd expect these 2 queries to give the same result - `8233409`.

**Does it reproduce on the most recent release?**

Yes, reproduced on latest version:

```
SELECT version()

Query id: ea01d7cb-99b0-41c4-9c7a-9ad63d8e7cc9

   ┌─version()─┐
1. │ 24.3.2.23 │
   └───────────┘

1 row in set. Elapsed: 0.004 sec.
```

Detected on version 23.11.5.29 too.

**How to reproduce**

Data generating:
```sql
INSERT INTO tmp.small (dt, user_email)
SELECT
    now() - interval (rand() % (100 * 24 * 3600)) second, -- randomize time, not older than 100 days
    if(rand() % 4 = 0, NULL, concat('user', toString(rand()), '@example.com'))
FROM numbers(20926837);
```

**Expected behavior**

The `IS NULL` & `(IS NULL) > 0` WHERE clauses to return the very same results.

**Error message and/or stacktrace**

None
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
