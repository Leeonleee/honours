{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 56490,
  "instance_id": "ClickHouse__ClickHouse-56490",
  "issue_numbers": [
    "35962"
  ],
  "base_commit": "eb6fba9f65812c8cf2c5ad6ba925c635d76cc157",
  "patch": "diff --git a/docs/en/sql-reference/table-functions/fuzzJSON.md b/docs/en/sql-reference/table-functions/fuzzJSON.md\nnew file mode 100644\nindex 000000000000..74ccb0bcb8a0\n--- /dev/null\n+++ b/docs/en/sql-reference/table-functions/fuzzJSON.md\n@@ -0,0 +1,86 @@\n+---\n+slug: /en/sql-reference/table-functions/fuzzJSON\n+sidebar_position: 75\n+sidebar_label: fuzzJSON\n+---\n+\n+# fuzzJSON\n+\n+Perturbs a JSON string with random variations.\n+\n+``` sql\n+fuzzJSON({ named_collection [option=value [,..]] | json_str[, random_seed] })\n+```\n+\n+**Arguments**\n+\n+- `named_collection`- A [NAMED COLLECTION](/docs/en/sql-reference/statements/create/named-collection.md).\n+- `option=value` - Named collection optional parameters and their values.\n+ - `json_str` (String) - The source string representing structured data in JSON format.\n+ - `random_seed` (UInt64) - Manual random seed for producing stable results.\n+ - `reuse_output` (boolean) - Reuse the output from a fuzzing process as input for the next fuzzer.\n+ - `max_output_length` (UInt64) - Maximum allowable length of the generated or perturbed JSON string.\n+ - `probability` (Float64) - The probability to fuzz a JSON field (a key-value pair). Must be within [0, 1] range.\n+ - `max_nesting_level` (UInt64) - The maximum allowed depth of nested structures within the JSON data.\n+ - `max_array_size` (UInt64) - The maximum allowed size of a JSON array.\n+ - `max_object_size` (UInt64) - The maximum allowed number of fields on a single level of a JSON object.\n+ - `max_string_value_length` (UInt64) - The maximum length of a String value.\n+ - `min_key_length` (UInt64) - The minimum key length. Should be at least 1.\n+ - `max_key_length` (UInt64) - The maximum key length. Should be greater or equal than the `min_key_length`, if specified.\n+\n+**Returned Value**\n+\n+A table object with a a single column containing perturbed JSON strings.\n+\n+## Usage Example\n+\n+``` sql\n+CREATE NAMED COLLECTION json_fuzzer AS json_str='{}';\n+SELECT * FROM fuzzJSON(json_fuzzer) LIMIT 3;\n+```\n+\n+``` text\n+{\"52Xz2Zd4vKNcuP2\":true}\n+{\"UPbOhOQAdPKIg91\":3405264103600403024}\n+{\"X0QUWu8yT\":[]}\n+```\n+\n+``` sql\n+SELECT * FROM fuzzJSON(json_fuzzer, json_str='{\"name\" : \"value\"}', random_seed=1234) LIMIT 3;\n+```\n+\n+``` text\n+{\"key\":\"value\", \"mxPG0h1R5\":\"L-YQLv@9hcZbOIGrAn10%GA\"}\n+{\"BRE3\":true}\n+{\"key\":\"value\", \"SWzJdEJZ04nrpSfy\":[{\"3Q23y\":[]}]}\n+```\n+\n+``` sql\n+SELECT * FROM fuzzJSON(json_fuzzer, json_str='{\"students\" : [\"Alice\", \"Bob\"]}', reuse_output=true) LIMIT 3;\n+```\n+\n+``` text\n+{\"students\":[\"Alice\", \"Bob\"], \"nwALnRMc4pyKD9Krv\":[]}\n+{\"students\":[\"1rNY5ZNs0wU&82t_P\", \"Bob\"], \"wLNRGzwDiMKdw\":[{}]}\n+{\"xeEk\":[\"1rNY5ZNs0wU&82t_P\", \"Bob\"], \"wLNRGzwDiMKdw\":[{}, {}]}\n+```\n+\n+``` sql\n+SELECT * FROM fuzzJSON(json_fuzzer, json_str='{\"students\" : [\"Alice\", \"Bob\"]}', max_output_length=512) LIMIT 3;\n+```\n+\n+``` text\n+{\"students\":[\"Alice\", \"Bob\"], \"BREhhXj5\":true}\n+{\"NyEsSWzJdeJZ04s\":[\"Alice\", 5737924650575683711, 5346334167565345826], \"BjVO2X9L\":true}\n+{\"NyEsSWzJdeJZ04s\":[\"Alice\", 5737924650575683711, 5346334167565345826], \"BjVO2X9L\":true, \"k1SXzbSIz\":[{}]}\n+```\n+\n+``` sql\n+SELECT * FROM fuzzJSON('{\"id\":1}', 1234) LIMIT 3;\n+```\n+\n+``` text\n+{\"id\":1, \"mxPG0h1R5\":\"L-YQLv@9hcZbOIGrAn10%GA\"}\n+{\"BRjE\":16137826149911306846}\n+{\"XjKE\":15076727133550123563}\n+```\ndiff --git a/src/Storages/StorageFuzzJSON.cpp b/src/Storages/StorageFuzzJSON.cpp\nnew file mode 100644\nindex 000000000000..b4025f58a461\n--- /dev/null\n+++ b/src/Storages/StorageFuzzJSON.cpp\n@@ -0,0 +1,695 @@\n+#include <optional>\n+#include <random>\n+#include <string_view>\n+#include <unordered_set>\n+#include <Columns/ColumnString.h>\n+#include <Interpreters/evaluateConstantExpression.h>\n+#include <Storages/NamedCollectionsHelpers.h>\n+#include <Storages/StorageFactory.h>\n+#include <Storages/StorageFuzzJSON.h>\n+#include <Storages/checkAndGetLiteralArgument.h>\n+#include <Common/JSONParsers/RapidJSONParser.h>\n+#include <Common/JSONParsers/SimdJSONParser.h>\n+#include <Common/checkStackSize.h>\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+extern const int BAD_ARGUMENTS;\n+extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n+extern const int LOGICAL_ERROR;\n+extern const int INCORRECT_DATA;\n+}\n+\n+namespace\n+{\n+\n+using uniform = std::uniform_int_distribution<size_t>;\n+\n+struct JSONNode;\n+using JSONNodeList = std::list<std::shared_ptr<JSONNode>>;\n+\n+struct JSONValue\n+{\n+    enum class Type : size_t\n+    {\n+        Fixed = 0,\n+        Array = 1,\n+        Object = 2,\n+    };\n+\n+    static Type getType(const JSONValue & v);\n+\n+    // The node value must be one of the following:\n+    // Examples: 5, true, \"abc\"\n+    std::optional<Field> fixed;\n+    // Examples: [], [\"a\"], [1, true]\n+    std::optional<JSONNodeList> array;\n+    // Examples: {}, {\"a\": [1,2], \"b\": \"c\"}\n+    std::optional<JSONNodeList> object;\n+};\n+\n+JSONValue::Type JSONValue::getType(const JSONValue & v)\n+{\n+    if (v.fixed)\n+    {\n+        assert(!v.array);\n+        assert(!v.object);\n+        return JSONValue::Type::Fixed;\n+    }\n+    else if (v.array)\n+    {\n+        assert(!v.fixed);\n+        assert(!v.object);\n+        return JSONValue::Type::Array;\n+    }\n+    else if (v.object)\n+    {\n+        assert(!v.fixed);\n+        assert(!v.array);\n+        return JSONValue::Type::Object;\n+    }\n+    else\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Failed to determine JSON node type.\");\n+}\n+\n+// A node represents either a JSON field (a key-value pair) or a JSON value.\n+// The key is not set for the JSON root and for the array items.\n+struct JSONNode\n+{\n+    std::optional<String> key;\n+    JSONValue value;\n+};\n+\n+#if USE_SIMDJSON\n+using ParserImpl = DB::SimdJSONParser;\n+#elif USE_RAPIDJSON\n+using ParserImpl = DB::RapidJSONParser;\n+#endif\n+\n+std::optional<Field> getFixedValue(const ParserImpl::Element & e)\n+{\n+    return e.isBool()  ? e.getBool()\n+        : e.isInt64()  ? e.getInt64()\n+        : e.isUInt64() ? e.getUInt64()\n+        : e.isDouble() ? e.getDouble()\n+        : e.isString() ? e.getString()\n+        : e.isNull()   ? Field()\n+                       : std::optional<Field>();\n+}\n+\n+void traverse(const ParserImpl::Element & e, std::shared_ptr<JSONNode> node)\n+{\n+    checkStackSize();\n+\n+    assert(node);\n+\n+    auto & val = node->value;\n+    if (e.isObject())\n+    {\n+        const auto & obj = e.getObject();\n+        if (!val.object)\n+            val.object = JSONNodeList{};\n+\n+        for (const auto [k, v] : obj)\n+        {\n+            auto child = std::make_shared<JSONNode>();\n+            child->key = k;\n+            traverse(v, child);\n+            val.object->push_back(child);\n+        }\n+    }\n+    else if (e.isArray())\n+    {\n+        if (!val.array)\n+            val.array = JSONNodeList{};\n+\n+        const auto arr = e.getArray();\n+        for (const auto a : arr)\n+        {\n+            auto child = std::make_shared<JSONNode>();\n+            traverse(a, child);\n+            val.array->push_back(child);\n+        }\n+    }\n+    else\n+    {\n+        auto field = getFixedValue(e);\n+        if (!field)\n+            throw Exception(ErrorCodes::INCORRECT_DATA, \"Failed to parse a fixed JSON value.\");\n+\n+        val.fixed = std::move(field);\n+    }\n+}\n+\n+std::shared_ptr<JSONNode> parseJSON(const String & json)\n+{\n+    std::string_view view{json.begin(), json.end()};\n+    ParserImpl::Element document;\n+    ParserImpl p;\n+\n+    if (!p.parse(json, document))\n+        throw Exception(ErrorCodes::INCORRECT_DATA, \"Failed to parse JSON string.\");\n+\n+    auto root = std::make_shared<JSONNode>();\n+    traverse(document, root);\n+    return root;\n+}\n+\n+char generateRandomCharacter(pcg64 & rnd, const std::string_view & charset)\n+{\n+    assert(!charset.empty());\n+    auto idx = uniform(0, charset.size() - 1)(rnd);\n+    return charset[idx];\n+}\n+\n+char generateRandomKeyCharacter(pcg64 & rnd)\n+{\n+    static constexpr std::string_view charset = \"0123456789\"\n+                                                \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+                                                \"abcdefghijklmnopqrstuvwxyz\";\n+    return generateRandomCharacter(rnd, charset);\n+}\n+\n+char generateRandomStringValueCharacter(pcg64 & rnd)\n+{\n+    static constexpr std::string_view charset = \"0123456789\"\n+                                                \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+                                                \"abcdefghijklmnopqrstuvwxyz\"\n+                                                \"!@#$%^&*-+_\";\n+    return generateRandomCharacter(rnd, charset);\n+}\n+\n+String generateRandomStringValue(UInt64 min_length, UInt64 max_length, pcg64 & rnd)\n+{\n+    size_t size = min_length + rnd() % (max_length - min_length + 1);\n+    String res;\n+    res.reserve(size);\n+    for (size_t i = 0; i < size; ++i)\n+        res.push_back(generateRandomStringValueCharacter(rnd));\n+\n+    return res;\n+}\n+\n+String generateRandomKey(UInt64 min_length, UInt64 max_length, pcg64 & rnd)\n+{\n+    size_t size = min_length + rnd() % (max_length - min_length + 1);\n+    String res;\n+    res.reserve(size);\n+    for (size_t i = 0; i < size; ++i)\n+        res.push_back(generateRandomKeyCharacter(rnd));\n+\n+    return res;\n+}\n+\n+enum class FuzzAction : size_t\n+{\n+    Skip = 0,\n+    Edit = 1,\n+    Add = 2,\n+    Delete = 3,\n+};\n+\n+Field generateRandomFixedValue(const StorageFuzzJSON::Configuration & config, pcg64 & rnd)\n+{\n+    // TODO (@jkartseva): support more field types.\n+    static std::array<Field::Types::Which, 3> possible_types{\n+        Field::Types::Which::UInt64, Field::Types::Which::String, Field::Types::Which::Bool};\n+\n+    Field f;\n+    auto idx = rnd() % possible_types.size();\n+    switch (possible_types[idx])\n+    {\n+        case Field::Types::Which::UInt64: {\n+            f = rnd();\n+            break;\n+        }\n+        case Field::Types::Which::String:\n+            f = generateRandomStringValue(/*min_length*/ 0, config.max_string_value_length, rnd);\n+            break;\n+        case Field::Types::Which::Bool:\n+            f = bool(rnd() % 2);\n+            break;\n+        default:\n+    }\n+    return f;\n+}\n+\n+String fuzzJSONKey(const StorageFuzzJSON::Configuration & config, pcg64 & rnd, const String & source)\n+{\n+    String result;\n+    result.reserve(config.max_key_length);\n+\n+    using FA = FuzzAction;\n+    auto get_action = [&]() -> FuzzAction\n+    {\n+        static constexpr std::array<FuzzAction, 4> actions{FA::Skip, FA::Edit, FA::Add, FA::Delete};\n+        return actions[uniform(0, 3)(rnd)];\n+    };\n+\n+    size_t i = 0;\n+    while (i < source.size() && result.size() < config.max_key_length)\n+    {\n+        auto action = get_action();\n+        switch (action)\n+        {\n+            case FA::Skip: {\n+                result.push_back(source[i++]);\n+            }\n+            break;\n+            case FA::Edit: {\n+                result.push_back(generateRandomKeyCharacter(rnd));\n+                ++i;\n+            }\n+            break;\n+            case FA::Add: {\n+                result.push_back(generateRandomKeyCharacter(rnd));\n+            }\n+            break;\n+            default:\n+                ++i;\n+        }\n+    }\n+\n+    while (result.size() < config.min_key_length)\n+        result.push_back(generateRandomKeyCharacter(rnd));\n+\n+    return result;\n+}\n+\n+std::shared_ptr<JSONNode>\n+generateRandomJSONNode(const StorageFuzzJSON::Configuration & config, pcg64 & rnd, bool with_key, JSONValue::Type type)\n+{\n+    auto node = std::make_shared<JSONNode>();\n+\n+    if (with_key)\n+        node->key = generateRandomKey(config.min_key_length, config.max_key_length, rnd);\n+\n+    auto & val = node->value;\n+    switch (type)\n+\n+    {\n+        case JSONValue::Type::Fixed: {\n+            val.fixed = generateRandomFixedValue(config, rnd);\n+            break;\n+        }\n+        case JSONValue::Type::Array: {\n+            val.array = JSONNodeList{};\n+            break;\n+        }\n+        case JSONValue::Type::Object: {\n+            val.object = JSONNodeList{};\n+            break;\n+        }\n+    }\n+    return node;\n+}\n+\n+template <size_t n>\n+std::shared_ptr<JSONNode> generateRandomJSONNode(\n+    const StorageFuzzJSON::Configuration & config, pcg64 & rnd, bool with_key, const std::array<JSONValue::Type, n> & possible_types)\n+{\n+    auto type = possible_types[uniform(0, possible_types.size() - 1)(rnd)];\n+    return generateRandomJSONNode(config, rnd, with_key, type);\n+}\n+\n+std::shared_ptr<JSONNode> generateRandomJSONNode(const StorageFuzzJSON::Configuration & config, pcg64 & rnd, bool with_key, size_t depth)\n+{\n+    if (depth >= config.max_nesting_level)\n+        return generateRandomJSONNode(config, rnd, with_key, JSONValue::Type::Fixed);\n+\n+    static constexpr std::array<JSONValue::Type, 3> possible_types\n+        = {JSONValue::Type::Fixed, JSONValue::Type::Array, JSONValue::Type::Object};\n+    return generateRandomJSONNode(config, rnd, with_key, possible_types);\n+}\n+\n+JSONNode & fuzzSingleJSONNode(JSONNode & n, const StorageFuzzJSON::Configuration & config, pcg64 & rnd, size_t depth, size_t & node_count)\n+{\n+    auto & val = n.value;\n+\n+    static constexpr size_t update_key = 1;\n+    static constexpr size_t update_value = 2;\n+\n+    auto action = 1 + rnd() % static_cast<size_t>(update_key | update_value);\n+    if (n.key && (action & update_key))\n+        n.key = fuzzJSONKey(config, rnd, *n.key);\n+\n+    if ((action & update_value) == 0)\n+        return n;\n+\n+    if (val.fixed)\n+        val.fixed = generateRandomFixedValue(config, rnd);\n+    else if (val.array && val.array->size() < config.max_array_size && node_count + val.array->size() < config.value_number_limit)\n+    {\n+        if (val.array->empty())\n+            val.array->push_back(generateRandomJSONNode(config, rnd, /*with_key*/ false, depth));\n+        else\n+        {\n+            // Use the type of the preceding element.\n+            const auto & prev = val.array->back();\n+            auto value_type = JSONValue::getType(prev->value);\n+            val.array->push_back(generateRandomJSONNode(config, rnd, /*with_key*/ false, value_type));\n+        }\n+        ++node_count;\n+    }\n+    else if (val.object && val.object->size() < config.max_object_size && node_count + val.object->size() < config.value_number_limit)\n+    {\n+        val.object->push_back(generateRandomJSONNode(config, rnd, /*with_key*/ true, depth));\n+        ++node_count;\n+    }\n+\n+    return n;\n+}\n+\n+\n+void fuzzJSONObject(\n+    const std::shared_ptr<JSONNode> & node,\n+    WriteBuffer & out,\n+    const StorageFuzzJSON::Configuration & config,\n+    pcg64 & rnd,\n+    size_t depth,\n+    size_t & node_count)\n+{\n+    checkStackSize();\n+\n+    ++node_count;\n+\n+    bool should_fuzz = rnd() % 100 < 100 * config.probability;\n+\n+    const auto & next_node = should_fuzz && !config.should_reuse_output ? std::make_shared<JSONNode>(*node) : node;\n+\n+    if (should_fuzz)\n+        fuzzSingleJSONNode(*next_node, config, rnd, depth, node_count);\n+\n+    if (next_node->key)\n+    {\n+        writeDoubleQuoted(*next_node->key, out);\n+        out << \":\";\n+    }\n+\n+    auto & val = next_node->value;\n+\n+    if (val.fixed)\n+    {\n+        if (val.fixed->getType() == Field::Types::Which::String)\n+            writeDoubleQuoted(val.fixed->get<String>(), out);\n+        else\n+            writeFieldText(*val.fixed, out);\n+    }\n+    else\n+    {\n+        if (!val.array && !val.object)\n+            return;\n+\n+        const auto & [op, cl, node_list] = val.array ? std::make_tuple('[', ']', *val.array) : std::make_tuple('{', '}', *val.object);\n+\n+        out << op;\n+\n+        bool first = true;\n+        for (const auto & ptr : node_list)\n+        {\n+            if (node_count >= config.value_number_limit)\n+                break;\n+\n+            WriteBufferFromOwnString child_out;\n+            if (!first)\n+                child_out << \", \";\n+            first = false;\n+\n+            fuzzJSONObject(ptr, child_out, config, rnd, depth + 1, node_count);\n+            // Should not exceed the maximum length of the output string.\n+            if (out.count() + child_out.count() >= config.max_output_length)\n+                break;\n+            out << child_out.str();\n+        }\n+        out << cl;\n+    }\n+}\n+\n+void fuzzJSONObject(std::shared_ptr<JSONNode> n, WriteBuffer & out, const StorageFuzzJSON::Configuration & config, pcg64 & rnd)\n+{\n+    size_t node_count = 0;\n+    return fuzzJSONObject(n, out, config, rnd, /*depth*/ 0, node_count);\n+}\n+\n+class FuzzJSONSource : public ISource\n+{\n+public:\n+    FuzzJSONSource(\n+        UInt64 block_size_, Block block_header_, const StorageFuzzJSON::Configuration & config_, std::shared_ptr<JSONNode> json_root_)\n+        : ISource(block_header_)\n+        , block_size(block_size_)\n+        , block_header(std::move(block_header_))\n+        , config(config_)\n+        , rnd(config.random_seed)\n+        , json_root(json_root_)\n+    {\n+    }\n+    String getName() const override { return \"FuzzJSON\"; }\n+\n+protected:\n+    Chunk generate() override\n+    {\n+        Columns columns;\n+        columns.reserve(block_header.columns());\n+        columns.emplace_back(createColumn());\n+\n+        return {std::move(columns), block_size};\n+    }\n+\n+private:\n+    ColumnPtr createColumn();\n+\n+    UInt64 block_size;\n+    Block block_header;\n+\n+    StorageFuzzJSON::Configuration config;\n+    pcg64 rnd;\n+\n+    std::shared_ptr<JSONNode> json_root;\n+};\n+\n+ColumnPtr FuzzJSONSource::createColumn()\n+{\n+    auto column = ColumnString::create();\n+    ColumnString::Chars & data_to = column->getChars();\n+    ColumnString::Offsets & offsets_to = column->getOffsets();\n+\n+    offsets_to.resize(block_size);\n+    IColumn::Offset offset = 0;\n+\n+    for (size_t row_num = 0; row_num < block_size; ++row_num)\n+    {\n+        WriteBufferFromOwnString out;\n+        fuzzJSONObject(json_root, out, config, rnd);\n+\n+        auto data = out.str();\n+        size_t data_len = data.size();\n+\n+        IColumn::Offset next_offset = offset + data_len + 1;\n+        data_to.resize(next_offset);\n+\n+        std::copy(data.begin(), data.end(), &data_to[offset]);\n+\n+        data_to[offset + data_len] = 0;\n+        offsets_to[row_num] = next_offset;\n+\n+        offset = next_offset;\n+    }\n+\n+    return column;\n+}\n+\n+}\n+\n+StorageFuzzJSON::StorageFuzzJSON(\n+    const StorageID & table_id_, const ColumnsDescription & columns_, const String & comment_, const Configuration & config_)\n+    : IStorage(table_id_), config(config_)\n+{\n+    StorageInMemoryMetadata storage_metadata;\n+    storage_metadata.setColumns(columns_);\n+    storage_metadata.setComment(comment_);\n+    setInMemoryMetadata(storage_metadata);\n+}\n+\n+Pipe StorageFuzzJSON::read(\n+    const Names & column_names,\n+    const StorageSnapshotPtr & storage_snapshot,\n+    SelectQueryInfo & /*query_info*/,\n+    ContextPtr /*context*/,\n+    QueryProcessingStage::Enum /*processed_stage*/,\n+    size_t max_block_size,\n+    size_t num_streams)\n+{\n+    storage_snapshot->check(column_names);\n+\n+    Pipes pipes;\n+    pipes.reserve(num_streams);\n+\n+    const ColumnsDescription & our_columns = storage_snapshot->metadata->getColumns();\n+    Block block_header;\n+    for (const auto & name : column_names)\n+    {\n+        const auto & name_type = our_columns.get(name);\n+        MutableColumnPtr column = name_type.type->createColumn();\n+        block_header.insert({std::move(column), name_type.type, name_type.name});\n+    }\n+\n+    for (UInt64 i = 0; i < num_streams; ++i)\n+        pipes.emplace_back(std::make_shared<FuzzJSONSource>(max_block_size, block_header, config, parseJSON(config.json_str)));\n+\n+    return Pipe::unitePipes(std::move(pipes));\n+}\n+\n+static constexpr std::array<std::string_view, 13> optional_configuration_keys\n+    = {\"json_str\",\n+       \"random_seed\",\n+       \"reuse_output\",\n+       \"probability\",\n+       \"max_output_length\",\n+       \"max_nesting_level\",\n+       \"max_array_size\",\n+       \"max_object_size\",\n+       \"max_string_value_length\",\n+       \"min_key_length\",\n+       \"max_key_length\"};\n+\n+void StorageFuzzJSON::processNamedCollectionResult(Configuration & configuration, const NamedCollection & collection)\n+{\n+    validateNamedCollection(\n+        collection,\n+        std::unordered_set<std::string>(),\n+        std::unordered_set<std::string>(optional_configuration_keys.begin(), optional_configuration_keys.end()));\n+\n+    if (collection.has(\"json_str\"))\n+        configuration.json_str = collection.get<String>(\"json_str\");\n+\n+    if (collection.has(\"random_seed\"))\n+        configuration.random_seed = collection.get<UInt64>(\"random_seed\");\n+\n+    if (collection.has(\"reuse_output\"))\n+        configuration.should_reuse_output = static_cast<bool>(collection.get<UInt64>(\"reuse_output\"));\n+\n+    if (collection.has(\"probability\"))\n+    {\n+        configuration.probability = collection.get<Float64>(\"probability\");\n+\n+        if (configuration.probability < 0.0 || configuration.probability > 1.0)\n+            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"The value of the 'probability' argument must be within the interval [0, 1].\");\n+    }\n+\n+    if (collection.has(\"max_output_length\"))\n+    {\n+        configuration.max_output_length = collection.get<UInt64>(\"max_output_length\");\n+\n+        if (configuration.max_output_length < 2 || configuration.max_output_length > configuration.output_length_limit)\n+            throw Exception(\n+                ErrorCodes::BAD_ARGUMENTS,\n+                \"The value of the 'max_output_length' argument must be within the interval [2, {}.]\",\n+                configuration.output_length_limit);\n+    }\n+\n+    if (collection.has(\"max_nesting_level\"))\n+        configuration.max_nesting_level = collection.get<UInt64>(\"max_nesting_level\");\n+\n+    if (collection.has(\"max_array_size\"))\n+        configuration.max_array_size = collection.get<UInt64>(\"max_array_size\");\n+\n+    if (collection.has(\"max_object_size\"))\n+        configuration.max_object_size = collection.get<UInt64>(\"max_object_size\");\n+\n+    if (collection.has(\"max_string_value_length\"))\n+    {\n+        auto max_string_value_length = collection.get<UInt64>(\"max_string_value_length\");\n+        if (max_string_value_length > configuration.output_length_limit)\n+            throw Exception(\n+                ErrorCodes::BAD_ARGUMENTS,\n+                \"The value of the 'max_string_value_length' argument must be at most {}.\",\n+                configuration.output_length_limit);\n+\n+        configuration.max_string_value_length = std::min(max_string_value_length, configuration.max_output_length);\n+    }\n+\n+    if (collection.has(\"max_key_length\"))\n+    {\n+        auto max_key_length = collection.get<UInt64>(\"max_key_length\");\n+        if (max_key_length > configuration.output_length_limit)\n+            throw Exception(\n+                ErrorCodes::BAD_ARGUMENTS,\n+                \"The value of the 'max_key_length' argument must be less or equal than {}.\",\n+                configuration.output_length_limit);\n+        configuration.max_key_length = std::min(max_key_length, configuration.max_output_length);\n+        configuration.min_key_length = std::min(configuration.min_key_length, configuration.max_key_length);\n+    }\n+\n+    if (collection.has(\"min_key_length\"))\n+    {\n+        auto min_key_length = collection.get<UInt64>(\"min_key_length\");\n+        if (min_key_length == 0)\n+            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"The value of the 'min_key_length' argument must be at least 1.\");\n+\n+        if (collection.has(\"max_key_length\") && collection.get<UInt64>(\"max_key_length\") < min_key_length)\n+            throw Exception(\n+                ErrorCodes::BAD_ARGUMENTS,\n+                \"The value of the 'min_key_length' argument must be less or equal than \"\n+                \"the value of the 'max_key_lenght' argument.\");\n+\n+        configuration.min_key_length = min_key_length;\n+        configuration.max_key_length = std::max(configuration.max_key_length, configuration.min_key_length);\n+    }\n+}\n+\n+StorageFuzzJSON::Configuration StorageFuzzJSON::getConfiguration(ASTs & engine_args, ContextPtr local_context)\n+{\n+    StorageFuzzJSON::Configuration configuration{};\n+\n+    if (auto named_collection = tryGetNamedCollectionWithOverrides(engine_args, local_context))\n+    {\n+        StorageFuzzJSON::processNamedCollectionResult(configuration, *named_collection);\n+    }\n+    else\n+    {\n+        // Supported signatures:\n+        //\n+        // FuzzJSON('json_str')\n+        // FuzzJSON('json_str', 'random_seed')\n+        if (engine_args.empty() || engine_args.size() > 2)\n+            throw Exception(\n+                ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,\n+                \"FuzzJSON requires 1 to 2 arguments: \"\n+                \"json_str, random_seed\");\n+        for (auto & engine_arg : engine_args)\n+            engine_arg = evaluateConstantExpressionOrIdentifierAsLiteral(engine_arg, local_context);\n+\n+        auto first_arg = checkAndGetLiteralArgument<String>(engine_args[0], \"json_str\");\n+        configuration.json_str = std::move(first_arg);\n+\n+        if (engine_args.size() == 2)\n+        {\n+            const auto & literal = engine_args[1]->as<const ASTLiteral &>();\n+            if (!literal.value.isNull())\n+                configuration.random_seed = checkAndGetLiteralArgument<UInt64>(literal, \"random_seed\");\n+        }\n+    }\n+    return configuration;\n+}\n+\n+void registerStorageFuzzJSON(StorageFactory & factory)\n+{\n+    factory.registerStorage(\n+        \"FuzzJSON\",\n+        [](const StorageFactory::Arguments & args) -> std::shared_ptr<StorageFuzzJSON>\n+        {\n+            ASTs & engine_args = args.engine_args;\n+\n+            if (engine_args.empty())\n+                throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Storage FuzzJSON must have arguments.\");\n+\n+            StorageFuzzJSON::Configuration configuration = StorageFuzzJSON::getConfiguration(engine_args, args.getLocalContext());\n+            return std::make_shared<StorageFuzzJSON>(args.table_id, args.columns, args.comment, configuration);\n+        });\n+}\n+\n+}\ndiff --git a/src/Storages/StorageFuzzJSON.h b/src/Storages/StorageFuzzJSON.h\nnew file mode 100644\nindex 000000000000..98cde1e83fdb\n--- /dev/null\n+++ b/src/Storages/StorageFuzzJSON.h\n@@ -0,0 +1,68 @@\n+#pragma once\n+\n+#include <Storages/IStorage.h>\n+#include <Storages/StorageConfiguration.h>\n+#include <Common/randomSeed.h>\n+\n+namespace DB\n+{\n+\n+class NamedCollection;\n+\n+class StorageFuzzJSON final : public IStorage\n+{\n+public:\n+    struct Configuration : public StatelessTableEngineConfiguration\n+    {\n+        // A full N-ary tree may be memory-intensive as it can potentially contain\n+        // up to (B^(D + 1) - 1) / (B - 1) nodes, where B is the number of branches,\n+        // and D is the depth of the tree. Therefore, a value number limit is introduced.\n+        // This limit includes complex values (arrays and nested objects).\n+        static constexpr UInt64 value_number_limit = 1000;\n+        static constexpr UInt64 output_length_limit = 1LU << 16;\n+\n+        String json_str = \"{}\";\n+        UInt64 random_seed = randomSeed();\n+        bool should_reuse_output = false;\n+        Float64 probability = 0.25;\n+\n+        UInt64 max_output_length = 1024;\n+\n+        // Key parameters\n+        UInt64 min_key_length = 4;\n+        UInt64 max_key_length = 20;\n+\n+        // Value parameters\n+        // Maximum number of fields (key-value pairs) at each level of a JSON.\n+        UInt64 max_object_size = 10;\n+        // Maximum number of elements within a JSON array.\n+        UInt64 max_array_size = 10;\n+        // Max depth of nested structures. How deeply objects or arrays can be\n+        // nested within one another.\n+        UInt64 max_nesting_level = 5;\n+        UInt64 max_string_value_length = 32;\n+    };\n+\n+    StorageFuzzJSON(\n+        const StorageID & table_id_, const ColumnsDescription & columns_, const String & comment_, const Configuration & config_);\n+\n+    std::string getName() const override { return \"FuzzJSON\"; }\n+\n+    Pipe read(\n+        const Names & column_names,\n+        const StorageSnapshotPtr & storage_snapshot,\n+        SelectQueryInfo & query_info,\n+        ContextPtr context,\n+        QueryProcessingStage::Enum processed_stage,\n+        size_t max_block_size,\n+        size_t num_streams) override;\n+\n+    static void processNamedCollectionResult(Configuration & configuration, const NamedCollection & collection);\n+\n+    static StorageFuzzJSON::Configuration getConfiguration(ASTs & engine_args, ContextPtr local_context);\n+\n+private:\n+    const Configuration config;\n+};\n+\n+}\ndiff --git a/src/Storages/registerStorages.cpp b/src/Storages/registerStorages.cpp\nindex b971e9b623ad..c05ff7d613c0 100644\n--- a/src/Storages/registerStorages.cpp\n+++ b/src/Storages/registerStorages.cpp\n@@ -25,6 +25,7 @@ void registerStorageLiveView(StorageFactory & factory);\n void registerStorageGenerateRandom(StorageFactory & factory);\n void registerStorageExecutable(StorageFactory & factory);\n void registerStorageWindowView(StorageFactory & factory);\n+void registerStorageFuzzJSON(StorageFactory & factory);\n \n #if USE_AWS_S3\n void registerStorageS3(StorageFactory & factory);\n@@ -123,8 +124,9 @@ void registerStorages()\n     registerStorageGenerateRandom(factory);\n     registerStorageExecutable(factory);\n     registerStorageWindowView(factory);\n+    registerStorageFuzzJSON(factory);\n \n-    #if USE_AWS_S3\n+#if USE_AWS_S3\n     registerStorageS3(factory);\n     registerStorageCOS(factory);\n     registerStorageOSS(factory);\ndiff --git a/src/TableFunctions/CMakeLists.txt b/src/TableFunctions/CMakeLists.txt\nindex b02a0e79f9cb..770990cc405b 100644\n--- a/src/TableFunctions/CMakeLists.txt\n+++ b/src/TableFunctions/CMakeLists.txt\n@@ -28,3 +28,11 @@ endif ()\n if (TARGET ch_contrib::azure_sdk)\n     target_link_libraries(clickhouse_table_functions PRIVATE ch_contrib::azure_sdk)\n endif ()\n+\n+if (TARGET ch_contrib::simdjson)\n+    target_link_libraries(clickhouse_table_functions PRIVATE ch_contrib::simdjson)\n+endif ()\n+\n+if (TARGET ch_contrib::rapidjson)\n+    target_link_libraries(clickhouse_table_functions PRIVATE ch_contrib::rapidjson)\n+endif ()\ndiff --git a/src/TableFunctions/TableFunctionFuzzJSON.cpp b/src/TableFunctions/TableFunctionFuzzJSON.cpp\nnew file mode 100644\nindex 000000000000..629fbd54b62c\n--- /dev/null\n+++ b/src/TableFunctions/TableFunctionFuzzJSON.cpp\n@@ -0,0 +1,59 @@\n+#include <TableFunctions/TableFunctionFuzzJSON.h>\n+\n+#include <DataTypes/DataTypeString.h>\n+#include <Storages/checkAndGetLiteralArgument.h>\n+#include <TableFunctions/TableFunctionFactory.h>\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+\n+extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n+\n+}\n+\n+void TableFunctionFuzzJSON::parseArguments(const ASTPtr & ast_function, ContextPtr context)\n+{\n+    ASTs & args_func = ast_function->children;\n+\n+    if (args_func.size() != 1)\n+        throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, \"Table function '{}' must have arguments\", getName());\n+\n+    auto args = args_func.at(0)->children;\n+    configuration = StorageFuzzJSON::getConfiguration(args, context);\n+}\n+\n+ColumnsDescription TableFunctionFuzzJSON::getActualTableStructure(ContextPtr /*context*/, bool /*is_insert_query*/) const\n+{\n+    return ColumnsDescription{{\"json\", std::make_shared<DataTypeString>()}};\n+}\n+\n+StoragePtr TableFunctionFuzzJSON::executeImpl(\n+    const ASTPtr & /*ast_function*/,\n+    ContextPtr context,\n+    const std::string & table_name,\n+    ColumnsDescription /*cached_columns*/,\n+    bool is_insert_query) const\n+{\n+    ColumnsDescription columns = getActualTableStructure(context, is_insert_query);\n+    auto res = std::make_shared<StorageFuzzJSON>(\n+        StorageID(getDatabaseName(), table_name),\n+        columns,\n+        /* comment */ String{},\n+        configuration);\n+    res->startup();\n+    return res;\n+}\n+\n+void registerTableFunctionFuzzJSON(TableFunctionFactory & factory)\n+{\n+    factory.registerFunction<TableFunctionFuzzJSON>(\n+        {.documentation\n+         = {.description = \"Perturbs a JSON string with random variations.\",\n+            .returned_value = \"A table object with a a single column containing perturbed JSON strings.\"},\n+         .allow_readonly = true});\n+}\n+\n+}\ndiff --git a/src/TableFunctions/TableFunctionFuzzJSON.h b/src/TableFunctions/TableFunctionFuzzJSON.h\nnew file mode 100644\nindex 000000000000..821e58bbf8ae\n--- /dev/null\n+++ b/src/TableFunctions/TableFunctionFuzzJSON.h\n@@ -0,0 +1,39 @@\n+#pragma once\n+\n+#include <optional>\n+\n+#include <Storages/StorageFuzzJSON.h>\n+#include <TableFunctions/ITableFunction.h>\n+\n+namespace DB\n+{\n+\n+class TableFunctionFuzzJSON : public ITableFunction\n+{\n+public:\n+    static constexpr auto name = \"fuzzJSON\";\n+    std::string getName() const override { return name; }\n+\n+    void parseArguments(const ASTPtr & ast_function, ContextPtr context) override;\n+\n+    ColumnsDescription getActualTableStructure(ContextPtr context, bool is_insert_query) const override;\n+\n+private:\n+    StoragePtr executeImpl(\n+        const ASTPtr & ast_function,\n+        ContextPtr context,\n+        const std::string & table_name,\n+        ColumnsDescription cached_columns,\n+        bool is_insert_query) const override;\n+\n+    const char * getStorageTypeName() const override { return \"FuzzJSON\"; }\n+\n+    String source;\n+    std::optional<UInt64> random_seed;\n+    std::optional<bool> should_reuse_output;\n+    std::optional<UInt64> max_output_length;\n+\n+    StorageFuzzJSON::Configuration configuration;\n+};\n+\n+}\ndiff --git a/src/TableFunctions/registerTableFunctions.cpp b/src/TableFunctions/registerTableFunctions.cpp\nindex de29c8074b1e..33029475dac1 100644\n--- a/src/TableFunctions/registerTableFunctions.cpp\n+++ b/src/TableFunctions/registerTableFunctions.cpp\n@@ -22,6 +22,7 @@ void registerTableFunctions()\n     registerTableFunctionGenerate(factory);\n     registerTableFunctionMongoDB(factory);\n     registerTableFunctionRedis(factory);\n+    registerTableFunctionFuzzJSON(factory);\n \n #if USE_AWS_S3\n     registerTableFunctionS3(factory);\ndiff --git a/src/TableFunctions/registerTableFunctions.h b/src/TableFunctions/registerTableFunctions.h\nindex 4e39324aba6f..db9451682824 100644\n--- a/src/TableFunctions/registerTableFunctions.h\n+++ b/src/TableFunctions/registerTableFunctions.h\n@@ -19,6 +19,7 @@ void registerTableFunctionInput(TableFunctionFactory & factory);\n void registerTableFunctionGenerate(TableFunctionFactory & factory);\n void registerTableFunctionMongoDB(TableFunctionFactory & factory);\n void registerTableFunctionRedis(TableFunctionFactory & factory);\n+void registerTableFunctionFuzzJSON(TableFunctionFactory & factory);\n \n #if USE_AWS_S3\n void registerTableFunctionS3(TableFunctionFactory & factory);\ndiff --git a/utils/check-style/aspell-ignore/en/aspell-dict.txt b/utils/check-style/aspell-ignore/en/aspell-dict.txt\nindex 86f59e52482a..2ba72c11e788 100644\n--- a/utils/check-style/aspell-ignore/en/aspell-dict.txt\n+++ b/utils/check-style/aspell-ignore/en/aspell-dict.txt\n@@ -1,4 +1,4 @@\n-personal_ws-1.1 en 2646 \n+personal_ws-1.1 en 2646\n AArch\n ACLs\n ALTERs\n@@ -1512,6 +1512,7 @@ fromUnixTimestampInJodaSyntax\n fsync\n func\n fuzzBits\n+fuzzJSON\n fuzzer\n fuzzers\n gRPC\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02918_fuzzjson_table_function.reference b/tests/queries/0_stateless/02918_fuzzjson_table_function.reference\nnew file mode 100644\nindex 000000000000..1b5c6f46f776\n--- /dev/null\n+++ b/tests/queries/0_stateless/02918_fuzzjson_table_function.reference\n@@ -0,0 +1,152 @@\n+{\"QJC4GhRByEtEAjku\":{}}\n+{}\n+{}\n+{}\n+{}\n+{}\n+{}\n+{}\n+{}\n+{}\n+{\"Cicktxh\":true, \"SpByjZKtr2VAyHCO\":false}\n+{\"ClickHouse\":\"Is Fast\", \"VO7TCIkyu1akvN\":{}}\n+{\"ClickHouse\":\"Is Fast\"}\n+{\"ISlW1DB\":\"Is Fast\", \"5j4ATkq\":{}}\n+{\"ClickHouse\":false}\n+{\"ClickHouse\":\"Is Fast\", \"tRSz\":13522460516091116060}\n+{\"ClickHouse\":\"Is Fast\"}\n+{\"ClickHouse\":\"Is Fast\"}\n+{\"CzTcYkQdSce\":\"Is Fast\"}\n+{\"ClickHouse\":\"Is Fast\"}\n+{\"ClickHouse\":false}\n+{\"ClickHouse\":\"Is Fast\"}\n+{\"ClickHouse\":\"Is Fast\", \"jql0YAY\":[]}\n+{\"ClickHouse\":\"Is Fast\"}\n+{\"ClickHouse\":\"Is Fast\"}\n+{\"ClickHouse\":\"Is Fast\", \"lF2vXus\":false}\n+{\"ClickHouse\":\"Is Fast\"}\n+{\"ClickHouse\":\"Is Fast\"}\n+{\"ClickHouse\":\"Is Fast\"}\n+{\"QJiGcwkonghk\":\"Is Fast\"}\n+{\"sidetx\":[{\"name\":\"Alice\"}, {\"R6Vm\":false}, {}], \"SpByjZKtr2VAyHCO\":false}\n+{\"students\":[{\"name\":\"Alice\"}, {\"name\":\"Bob\"}]}\n+{\"students\":[{\"name\":\"Alice\"}, {\"name\":true}]}\n+{\"students\":[{\"name\":\"Alice\"}, {\"name\":\"Bob\"}]}\n+{\"ISuW1\":[{\"naYmS\":\"Alice\", \"hzTDYZQdScOct0RS\":[]}, {\"name\":\"Bob\"}]}\n+{\"students\":[{\"name\":\"Alice\"}, {\"name\":\"Bob\"}], \"jql0YAY\":[]}\n+{\"students\":[{\"name\":\"Alice\"}, {\"name\":\"Bob\"}], \"lF2vXus\":false}\n+{\"students\":[{\"QJmGe\":\"Alice\"}, {\"name\":\"Bob\"}]}\n+{\"students\":[{\"name\":\"Alice\"}, {\"name\":\"Bob\"}]}\n+{\"kXtdet\":[{\"name\":\"Alice\"}, {\"name\":\"Bob\"}]}\n+{\"students\":[{\"name\":\"Alice\"}, {\"name\":\"Bob\"}], \"Qcm4\":{}}\n+{\"students\":[{\"name\":\"Alice\"}, {\"PmjG\":\"Bob\"}]}\n+{\"students\":[{\"name\":6128974479331836233}, {\"name\":\"Bob\"}]}\n+{\"sGudyet5u\":[{\"name\":\"Alice\"}, {\"name\":\"Bob\"}, {}]}\n+{\"students\":[{\"name\":\"Alice\"}, {\"name\":\"Bob\"}]}\n+{\"students\":[{\"Kamc\":true}, {\"name\":\"rKKN+5#NKEi-uf5U\"}]}\n+{\"students\":[{\"name\":\"Alice\"}, {\"nPL6\":1455900058404521160}]}\n+{\"students\":[{\"name\":\"Alice\", \"dzm5g9aPI21iIP9\":[]}, {\"name\":\"Bob\"}]}\n+{\"students\":[{\"n4z4N\":true, \"uJrCh4ifo\":{}}, {\"name\":\"Bob\", \"kMnsl0BBFk\":[]}], \"kG21YiAcUKpcUS2\":true}\n+{\"students\":[{\"name\":\"Alice\"}, {\"name\":\"Bob\", \"wQCN\":{}}]}\n+{\"schedule\":[{\"breakfast\":\"7am\", \"5ZB35\":{\"nHypO\":[]}}, {\"lunch\":\"12pm\"}]}\n+{\"schedule\":[{\"bdvelrflX\":\"7am\", \"5ZB35\":{\"nHypO\":[]}}, {\"23slh\":\"12pm\"}]}\n+{\"tkdu8hl\":[{\"bdvelrflX\":\"7am\", \"5ZB35\":{\"nHypO\":[]}}, {\"23slh\":\"12pm\"}]}\n+{\"tkdu8hl\":[{\"bdvelrflX\":\"7am\", \"5mkj5\":{\"nHypO\":[]}}, {\"23slh\":\"12pm\"}], \"n8HX5N6DVpBa\":[\"fYOPSVVK*Brv_-AajZwT\"]}\n+{\"tkdu8hl\":[{\"nQ4PePPfX\":16091119822740071899, \"5mkj5\":{\"npOE\":[[]]}}, {\"23slh\":\"12pm\"}], \"nHXa6BVq8E\":[\"fYOPSVVK*Brv_-AajZwT\"], \"BHUNvB8sHk8ts6\":true}\n+{\"tkdu8hl\":[{\"nQ4PePPfX\":16091119822740071899, \"5mkj5\":{\"G71D\":[[], []]}}, {\"23slh\":\"12pm\"}], \"FOIRaJ6VqVCKD0E\":[\"fYOPSVVK*Brv_-AajZwT\", 17244534201851710710], \"BHUNvB8sHk8ts6\":true, \"qnk47QAn0yQ3ESEgO\":true}\n+{\"tkdu8hl\":[{\"nQ4PePPfX\":16091119822740071899, \"5mkj5\":{\"G71D\":[[], []]}}, {\"23slh\":\"-plal2e\"}], \"FOIRaJ6VqVCKD0E\":[\"fYOPSVVK*Brv_-AajZwT\", 17244534201851710710], \"BHUNvB8sHk8ts6\":true, \"qnk47QAn0yQ3ESEgO\":true}\n+{\"tkdu8hl\":[{\"nQ4PePPfX\":16091119822740071899, \"5mkj5\":{\"Gpq7\":[[], [false]]}, \"YgbEtY\":true}, {\"23slh\":false}], \"FOIRaJ6VqVCKD0E\":[\"fYOPSVVK*Brv_-AajZwT\", 17244534201851710710], \"ByRvBC4H0kgydJ\":false, \"zqokAQz8z0KnPOBrs8\":true}\n+{\"kzcUZOl\":[{\"nQ4PePPfX\":16091119822740071899, \"Ekmj\":{\"lBKR\":[[], [false], []], \"dLc32r2f\":{}}, \"xbguW\":\"vGV&bitEteAH%-Eigg_7VlejYuHP\"}, {\"23slh\":false}, {}], \"FOIRaJ6VqVCKD0E\":[\"fYOPSVVK*Brv_-AajZwT\", 17244534201851710710], \"ByRvBC4H0kgydJ\":false, \"zqokAQz8z0KnPOBrs8\":true}\n+{\"kzcUZOl\":[{\"nQ4PePPfX\":16091119822740071899, \"Ekmj\":{\"lBKR\":[[3774015142547830176], [false], []], \"rCmVPvvf\":{\"wU6YWjag\":[]}}, \"xb7uW\":\"pWUTs&ikTCNRQt\"}, {\"23slh\":false}, {}], \"h3IK06PQGfCRQ\":[false, false], \"SyRRLBzEjy8YJ\":false, \"zqokAQz8z0KnPOBrs8\":true}\n+{\"ukrzZl\":[{\"nQ4PePPfX\":16091119822740071899, \"5kmG\":{\"lBKR\":[[14228925827882160318, \"TpCrsW@11Io1sSu1@nFm\"], [true], []], \"rOmNvc\":{\"wU6YWjag\":[], \"pIK6tGXUp1gekWViJ\":{}}, \"igqgnb\":[]}, \"xb7uW\":\"pWUTs&ikTCNRQt\", \"jBT1ImcYb77bl2\":true}, {\"dsyf\":true}, {}, {\"qOElRhbehMXQNrln\":{\"PDoZa8OJHh1al59Ggq\":{}}}], \"h3IK06PQGfCRQ\":[false, false], \"SyRRLBzEjy8YJ\":false, \"zqokAQz8z0KnPOBrs8\":true}\n+{\"ukrzZl\":[{\"nQ4PePPfX\":16091119822740071899, \"5kmG\":{\"lBKR\":[[14228925827882160318, \"TpCrsW@11Io1sSu1@nFm\"], [true], []], \"rOmNvc\":{\"wU6YWjag\":[], \"pIK6tGXUp1gekWViJ\":{}}, \"igqgnb\":[]}, \"xb7uW\":\"pWUTs&ikTCNRQt\", \"jBT1ImcYb77bl2\":true}, {\"dsyf\":18233789955605096603}, {}, {\"qOElRhbehMXQNrln\":{\"PoZngOHXMaWGRJq\":{\"QlnPi9zKoBtW2nGWB\":\"LgFazuGX*CuDy7X%4hkEmykg@6\"}}}], \"h3IK06PQGfCRQ\":[false, false], \"SyRRLBzEjy8YJ\":false, \"zQO8BA7nazqKW7CRP8\":true}\n+{\"ukrzZl\":[{\"nQ4PePPfX\":16091119822740071899, \"5kmG\":{\"lBKR\":[[16730631663303458403, \"TpCrsW@11Io1sSu1@nFm\"], [true], []], \"rOmNvc\":{\"wU6YWjag\":[false], \"pIK6tGXUp1gekWViJ\":{}}, \"igqgnb\":[]}, \"xb7uW\":\"pWUTs&ikTCNRQt\", \"jBT1ImcYb77bl2\":true}, {\"dsyf\":18233789955605096603, \"mmCFLovnBThJPtpQG0Tv\":false}, {}, {\"qOElRhbehMXQNrln\":{\"PoZngOHXMaWGRJq\":{\"QlnPi9zKoBtW2nGWB\":\"LgFazuGX*CuDy7X%4hkEmykg@6\"}}}, {\"sx21nRmS69bXRo\":[]}], \"h3IK06PQGfCRQ\":[false, \"HjPw@G1Icu#dn\"], \"SyRRLBzEjy8YJ\":false, \"zQO8BA7nazqKW7CRP8\":true}\n+{\"ukrzZl\":[{\"nQ4PePPfX\":16091119822740071899, \"5kmG\":{\"lBKR\":[[16730631663303458403, \"eiUmT%F$FQBWtWz^Tt7Ix&D\"], [true], [], []], \"rOmNvc\":{\"wOWxSWQf\":[false], \"pIK6tGXUp1gekWViJ\":{}, \"pFKIzg3HC\":14538916875375166988}, \"igqgnb\":[]}, \"xb7uW\":\"pWUTs&ikTCNRQt\", \"jlT1T35c27wbl2\":true}, {\"dsyf\":18233789955605096603, \"mYikENkiDhPRtQHOr\":true}, {}, {\"qOElRhbehMXQNrln\":{\"4GBqJBrnoOHJW5GA\":{\"QaPSqINbjb7nGx9qz\":8975023301134451623, \"JWOUP4WB1\":14622543266409160782}}}, {\"sx21nRmS69bXRo\":[]}], \"h3IK06PQGfCRQ\":[false, \"HjPw@G1Icu#dn\"], \"S1ncA0ERs8Y9v\":\"@7EShAFjSycp%Wo0gHn\", \"zQO8BA7nazqKW7CRP8\":true}\n+{\"ukrzZl\":[{\"nQ4PePPfX\":11197252787701758701, \"5kmG\":{\"lBKR\":[[16730631663303458403, \"eiUmT%F$FQBWtWz^Tt7Ix&D\", false], [true, true], [], []], \"rOmNvc\":{\"wOWxSWQf\":[false], \"pIK6tGXUp1gekWViJ\":{}, \"pFKIzg3HC\":14538916875375166988}, \"igqgnb\":[], \"pUDeAJw\":\"MN^9hUPKv811Vq!\"}, \"oiU7x8\":false, \"jlT1T35c27wbl2\":false}, {\"dsyf\":18233789955605096603, \"mYikENkiDhPRtQHOr\":true}, {}, {\"qOElRhbehMXQNrln\":{\"4GBqJBrnoOHJW5GA\":{\"QaPSqINbjb7nGx9qz\":8975023301134451623, \"aOUaQBB\":false}}}, {\"x27uem04bX6R87b\":[[]]}, {\"MqSQ5v\":[]}], \"h3IK06PQGfCRQ\":[false, \"7pq+IfdiKeTkTym7AWjlc\"], \"S1ncA0ERs8Y9v\":\"@7EShAFjSycp%Wo0gHn\", \"zQO8BA7nazqKW7CRP8\":true}\n+{\"UkPbWZl\":[{\"nQ4PePPfX\":11197252787701758701, \"5kmG\":{\"lBKR\":[[16730631663303458403, \"eiUmT%F$FQBWtWz^Tt7Ix&D\", false], [true, true], [false], []], \"rvCMyf\":{\"2pnWUuQ6J\":[false, \"q-5Gl5B8uOK\"], \"pIK6tGXUp1gekWViJ\":{}, \"pFKIzg3HC\":14538916875375166988, \"yeNIt3JgSC0K\":1931793149388080066}, \"BVH5PAgEe4b\":[], \"pUDeAJw\":\"LnJMn0D&2lr^k!A\", \"uDl68z\":516601863564431352}, \"oiU7x8\":false, \"jlT1T35c27wbl2\":false}, {\"dsyf\":\"F!*nU1V_WOni8$a9RXBHGob^sg\", \"mYikENkiDhPRtQHOr\":true}, {}, {\"qOURhbeBpKE8qrhC\":{\"4GBqJBrnoOHJW5GA\":{\"QaPSqINbjb7nGx9qz\":8975023301134451623, \"OUlR\":false}}}, {\"x27uem04bX6R87b\":[[]]}, {\"MqSQ5v\":[]}], \"h3IK06PQGfCRQ\":[false, \"7pq+IfdiKeTkTym7AWjlc\", true], \"dlCX4s8LF\":\"@7EShAFjSycp%Wo0gHn\", \"zQO8BA7nazqKW7CRP8\":true, \"XahaweEPjnHUyKsT\":{}}\n+{\"IkkCdvbW8oLK\":[{\"nQ4PePPfX\":11197252787701758701, \"5kmG\":{\"lB3l\":[[16730631663303458403, \"eiUmT%F$FQBWtWz^Tt7Ix&D\", 17822336972471685000], [true, true], [false], [], []], \"rvCMyf\":{\"2pnWUuQ6J\":[false, \"q-5Gl5B8uOK\"], \"pIK6tGXUp1gekWViJ\":{}, \"pFKIzg3HC\":14538916875375166988, \"yeNIt3JgSC0K\":1931793149388080066}, \"BVH5PAgEe4b\":[], \"pUDeAJw\":\"LnJMn0D&2lr^k!A\", \"uDl68z\":\"fDT@hLdFJNXwBfJ__Fok7u2@BWY^t0\"}, \"oiU7x8\":false, \"jlT1T35c27wbl2\":false}, {\"dsyf\":false, \"mYikENkiDhPRtQHOr\":true}, {}, {\"qOURhbeBpKE8qrhC\":{\"7Qf27pQMkchIOBWX\":{\"QaPSqINbjb7nGx9qz\":8975023301134451623, \"OUlR\":false, \"EoEJ7GlbhI0\":[]}}}, {\"x27uem04bX6R87b\":[[[]], []]}, {\"MqSQ5v\":[9304041946960766827]}, {}], \"h3IK06PQGfCRQ\":[false, \"7pq+IfdiKeTkTym7AWjlc\", true], \"dlCX4s8LF\":true, \"zQO8BA7nazqKW7CRP8\":true, \"fOa5rfhNLCiqjrnUrtZ6\":{}}\n+{\"IkkCdvbW8oLK\":[{\"nQ4PePPfX\":11197252787701758701, \"mGJx\":{\"lB3l\":[[16730631663303458403, \"eiUmT%F$FQBWtWz^Tt7Ix&D\", 17822336972471685000], [true, true], [10370853850869029207], [], [\"VaTduwAFH0ahN5xeJU\"]], \"rvCMyf\":{\"2pnWUuQ6J\":[false, \"6J%Orinf%4\"], \"pIK6tGXUp1gekWViJ\":{}, \"pFKIzg3HC\":14538916875375166988, \"yeNIt3JgSC0K\":1931793149388080066}, \"BVH5PAgEe4b\":[], \"pUDeAJw\":\"LnJMn0D&2lr^k!A\", \"uDl68z\":\"fDT@hLdFJNXwBfJ__Fok7u2@BWY^t0\"}, \"oiU7x8\":false, \"jlT1T35c27wbl2\":false}, {\"dsyf\":false, \"mYikENkiDhPRtQHOr\":true}, {}, {\"qOURhbeBpKE8qrhC\":{\"7Qf27pQMkchIOBWX\":{\"aKaShNyxj7Gx9qB\":8975023301134451623, \"OUlR\":false, \"EoEJ7GlbhI0\":[]}}}, {\"x27uem04bX6R87b\":[[[]], []]}, {\"MqSQ5v\":[9304041946960766827, \"T##LF8eDM\"]}, {}], \"h3IK06PQGfCRQ\":[false, 6667769656296380039, true], \"dlCX4s8LF\":true, \"zQO8BA7nazqKW7CRP8\":true, \"fOa5rfhNLCiqjrnUrtZ6\":{}}\n+{\"IkkCdvbW8oLK\":[{\"nQ4PePPfX\":11197252787701758701, \"xGBZx\":{\"lB3l\":[[16730631663303458403, \"eiUmT%F$FQBWtWz^Tt7Ix&D\", \"sFwAP3\"], [true, \"-TBj_T1BS7OJh8^p1qO3!DK_X&CfwetZ\"], [5795439407585677270, false], [], [\"VaTduwAFH0ahN5xeJU\"]], \"OvMy\":{\"2pnWUuQ6J\":[false, \"6J%Orinf%4\"], \"wni3QGXfpgeq\":{\"QF0hiIqRIKp2mp04U\":14287172497490584292}, \"M8pg0INzhg3Hz\":14538916875375166988, \"yeNIt3JgSC0K\":false, \"TeFWw\":[]}, \"BVH5PAgEe4b\":[], \"pUDeAJw\":\"LnJMn0D&2lr^k!A\", \"uDl68z\":\"fDT@hLdFJNXwBfJ__Fok7u2@BWY^t0\"}, \"oiU7x8\":false, \"jlT1T35c27wbl2\":false}, {\"dsyf\":false, \"mYikENkiDhPRtQHOr\":true}, {}, {\"DjYSOeUFNepEK4XvC\":{\"7Qf27pQMkchIOBWX\":{\"aKaShNyxj7Gx9qB\":8975023301134451623, \"OUlR\":false, \"EoEJ7GlbhI0\":[]}}}, {\"x27uem04bX6R87b\":[[[15632688604980432085]], []]}, {\"MqSQ5v\":[9304041946960766827, \"T##LF8eDM\"]}, {}], \"h3IK06PQGfCRQ\":[false, 6667769656296380039, true], \"dlCX4s8LF\":true, \"zQO8BA7nazqKW7CRP8\":true, \"fOa5rfhNLCiqjrnUrtZ6\":{}}\n+{\"IkkCdvbW8oLK\":[{\"nQ4PePPfX\":11197252787701758701, \"xGBZx\":{\"lB3l\":[[\"_#JSXSLdVKXb+c\", \"eiUmT%F$FQBWtWz^Tt7Ix&D\", \"sFwAP3\"], [true, \"-TBj_T1BS7OJh8^p1qO3!DK_X&CfwetZ\"], [5795439407585677270, false], [], [\"VaTduwAFH0ahN5xeJU\"]], \"OvMy\":{\"2pnWUuQ6J\":[false, \"6J%Orinf%4\"], \"wni3QGXfpgeq\":{\"QF0hiIqRIKp2mp04U\":14287172497490584292}, \"M8pg0INzhg3Hz\":14538916875375166988, \"yeNIt3JgSC0K\":false, \"TeFWw\":[]}, \"BVH5PAgEe4b\":[], \"pUDeAJw\":\"LnJMn0D&2lr^k!A\", \"uDl68z\":\"8&VE7\"}, \"oiU7x8\":false, \"jlT1T35c27wbl2\":false}, {\"dsyf\":false, \"mYikENkiDhPRtQHOr\":true, \"lbci\":{}}, {}, {\"DjYSOeUFNepEK4XvC\":{\"QVEsjfQBcsIEbRWBW\":{\"uGYvt33UTmxj7t2B\":8975023301134451623, \"OUlR\":false, \"EoEJ7GlbhI0\":[]}, \"Qya8i\":{\"EMfurslq2KFOCa29od0d\":[]}}}, {\"x27uem04bX6R87b\":[[[15632688604980432085]], [[]]]}, {\"MqSQ5v\":[9304041946960766827, \"T##LF8eDM\"]}, {}], \"sEdwKHDRafKvC\":[false, 6667769656296380039, true], \"dlCX4s8LF\":true, \"zQO8BA7nazqKW7CRP8\":true, \"fOa5rfhNLCiqjrnUrtZ6\":{}}\n+{\"schedule\":[{\"breakfast\":\"7am\", \"5ZB35\":{\"nHypO\":[]}}, {\"lunch\":\"12pm\"}]}\n+{\"schedule\":[{\"bdvelrflX\":\"7am\"}, {\"lunch\":\"12pm\"}]}\n+{\"23sldMp\":[{\"Ob8hrGkHsU8X\":\"7am\"}, {\"lunch\":\"12pm\"}]}\n+{\"schedule\":[{\"bMnamkjsAsat\":\"7am\"}, {\"lunch\":\"12pm\", \"OfmJPaS\":{}}]}\n+{\"snjTZul\":[{\"breakfast\":\"7am\"}, {\"lHkn6N\":1318333088581732761}, {\"bQH4jPs\":{}}], \"Hrv8ZL6\":[]}\n+{\"schedule\":[{\"QrqaD\":\"!uUry9J-#VUCkKD0yyI+xM\", \"3e8EfNin\":\"0_Ny&1pcBzd8YEFq8hn4+Q#y^ESEg*\"}, {\"lunch\":\"12pm\"}], \"hGh8RR\":{}}\n+{\"schedule\":[{\"regEsl2t\":true, \"q5flU9DI7erByRjh\":{}}, {\"lH0h\":\"%yJEbznodCJ8-#KzPNcBHrsr\"}, {\"pPk2zAcfUxDZcO\":{}}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}, {}], \"hZNsEeUmexM\":{}}\n+{\"lhhG\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\", \"OEgZYuhDWP3vGbV4bi\":[]}, {}]}\n+{\"schedule\":[{\"breakfast\":\"kj*RPaKLng*&h4&UBqa-tw%53aE\", \"WtHnb8mVPvvHDUYWaJSB\":[[]]}, {\"lunch\":\"12pm\"}], \"6EigJgc8sxf7VIfMkDl\":[]}\n+{\"schedule\":[{\"breakfast\":false}, {\"lunch\":\"12pm\", \"WikTL\":1724418800345361559}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}]}\n+{\"h3hK0l\":[{\"breakfast\":\"7am\", \"fGNLfAC\":{}}, {\"lETzn6S\":\"12pm\"}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"izEx\":9011753325952200749}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"mY7la\":17408441466865856756, \"yIG0VqnoY1TTMjs\":{\"11BIo1csSuB1n\":10038860187222625751}}]}\n+{\"cSJ8eOuN\":[{\"breakfast\":\"7am\", \"UgpWK\":{\"Wkha9tqdiOefZfAKQcEg\":\"EbhMQNrlngPo\"}}, {\"lunch\":\"12pm\", \"wGWGRJqJlPYzCB0\":[]}, {}]}\n+{\"UBgFuue\":[{\"brrak2st\":\"kEmykg@6-%h-OQ@O_\"}, {\"lunch\":\"12pm\", \"7DnPaGPqi5Wr7\":false}, {}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\", \"LeH3\":{}}]}\n+{\"schedule\":[{\"breakon\":true}, {\"Sx1Rch\":9823913620251756169, \"0TvaWJUmv0Cv\":{}}]}\n+{\"schedule\":[{\"breakfast\":\"7am\", \"5ZB35\":{\"nHypO\":[]}}, {\"lunch\":\"12pm\"}]}\n+{\"schedule\":[{\"bdvelrflX\":\"7am\"}, {\"lunch\":\"12pm\"}]}\n+{\"23sldMp\":[{\"Ob8hrGkHsU8X\":\"7am\"}, {\"lunch\":\"12pm\"}]}\n+{\"schedule\":[{\"bMnamkjsAsat\":\"7am\"}, {\"lunch\":\"12pm\", \"OfmJPaS\":{}}]}\n+{\"snjTZul\":[{\"breakfast\":\"7am\"}, {\"lHkn6N\":1318333088581732761}, {\"bQH4jPs\":{}}], \"Hrv8ZL6\":[]}\n+{\"schedule\":[{\"QrqaD\":\"!uUry9J-#VUCkKD0yyI+xM\", \"3e8EfNin\":\"0_Ny&1pcBzd8YEFq8hn4+Q#y^ESEg*\"}, {\"lunch\":\"12pm\"}], \"hGh8RR\":{}}\n+{\"schedule\":[{\"regEsl2t\":true, \"q5flU9DI7erByRjh\":{}}, {\"lH0h\":\"%yJEbznodCJ8-#KzPNcBHrsr\"}, {\"pPk2zAcfUxDZcO\":{}}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}, {}], \"hZNsEeUmexM\":{}}\n+{\"lhhG\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\", \"OEgZYuhDWP3vGbV4bi\":[]}, {}]}\n+{\"schedule\":[{\"breakfast\":\"kj*RPaKLng*&h4&UBqa-tw%53aE\", \"WtHnb8mVPvvHDUYWaJSB\":[[]]}, {\"lunch\":\"12pm\"}]}\n+{\"schedule\":[{\"breakfast\":false}, {\"lunch\":\"12pm\", \"WikTL\":1724418800345361559}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}]}\n+{\"h3hK0l\":[{\"breakfast\":\"7am\", \"fGNLfAC\":{}}, {\"lETzn6S\":\"12pm\"}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"izEx\":9011753325952200749}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"mY7la\":17408441466865856756, \"yIG0VqnoY1TTMjs\":{\"11BIo1csSuB1n\":10038860187222625751}}]}\n+{\"cSJ8eOuN\":[{\"breakfast\":\"7am\", \"UgpWK\":{\"Wkha9tqdiOefZfAKQcEg\":\"EbhMQNrlngPo\"}}, {\"lunch\":\"12pm\", \"wGWGRJqJlPYzCB0\":[]}, {}]}\n+{\"UBgFuue\":[{\"brrak2st\":\"kEmykg@6-%h-OQ@O_\"}, {\"lunch\":\"12pm\", \"7DnPaGPqi5Wr7\":false}, {}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\", \"LeH3\":{}}]}\n+{\"schedule\":[{\"breakon\":true}, {\"Sx1Rch\":9823913620251756169, \"0TvaWJUmv0Cv\":{}}]}\n+{\"schedule\":[{\"breakfast\":\"7am\", \"5ZB35\":{\"nHypO\":[]}}, {\"lunch\":\"12pm\"}]}\n+{\"schedule\":[{\"bdvelrflX\":\"7am\"}, {\"lunch\":\"12pm\"}]}\n+{\"23sldMp\":[{\"Ob8hrGkHsU8X\":\"7am\"}, {\"lunch\":\"12pm\"}]}\n+{\"schedule\":[{\"bMnamkjsAsat\":\"7am\"}, {\"lunch\":\"12pm\", \"OfmJPaS\":{}}]}\n+{\"snjTZul\":[{\"breakfast\":\"7am\"}, {\"lHkn6N\":1318333088581732761}, {\"bQH4jPs\":{}}], \"Hrv8ZL6\":[]}\n+{\"schedule\":[{\"QrqaD\":\"!uUry9J-#VUCkKD0yyI+xM\", \"3e8EfNin\":\"0_Ny&1pcBzd8YEFq8hn4+Q#y^ESEg*\"}, {\"lunch\":\"12pm\"}], \"hGh8RR\":{}}\n+{\"schedule\":[{\"regEsl2t\":true, \"q5flU9DI7erByRjh\":{}}, {\"lH0h\":\"%yJEbznodCJ8-#KzPNcBHrsr\"}, {\"pPk2zAcfUxDZcO\":{}}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}, {}], \"hZNsEeUmexM\":{}}\n+{\"lhhG\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\", \"OEgZYuhDWP3vGbV4bi\":[]}, {}]}\n+{\"schedule\":[{\"breakfast\":\"kj*RPaKLng*&h4&UBqa-tw%53aE\", \"WtHnb8mVPvvHDUYWaJSB\":[[]]}, {\"lunch\":\"12pm\"}], \"6EigJgc8sxf7VIfMkDl\":[]}\n+{\"schedule\":[{\"breakfast\":false}, {\"lunch\":\"12pm\", \"WikTL\":1724418800345361559}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}]}\n+{\"h3hK0l\":[{\"breakfast\":\"7am\", \"fGNLfAC\":{}}, {\"lETzn6S\":\"12pm\"}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"izEx\":9011753325952200749}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"mY7la\":17408441466865856756, \"yIG0VqnoY1TTMjs\":{\"11BIo1csSuB1n\":10038860187222625751}}]}\n+{\"cSJ8eOuN\":[{\"breakfast\":\"7am\", \"UgpWK\":{\"Wkha9tqdiOefZfAKQcEg\":\"EbhMQNrlngPo\"}}, {\"lunch\":\"12pm\", \"wGWGRJqJlPYzCB0\":[]}, {}]}\n+{\"UBgFuue\":[{\"brrak2st\":\"kEmykg@6-%h-OQ@O_\"}, {\"lunch\":\"12pm\", \"7DnPaGPqi5Wr7\":false}, {}]}\n+{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\", \"LeH3\":{}}]}\n+{\"schedule\":[{\"breakon\":true}, {\"Sx1Rch\":9823913620251756169, \"0TvaWJUmv0Cv\":{}}]}\n+{}\n+{}\n+{}\n+{\"cuNC\":\"j#Q*KbvL\"}\n+{}\n+{}\n+{}\n+{\"e2mZBQPL9f0pgd0sXR\":false}\n+{}\n+{}\n+{}\n+{}\n+{}\n+{}\n+{}\n+{}\n+{}\n+{}\n+{}\n+{}\n+730\n+200\ndiff --git a/tests/queries/0_stateless/02918_fuzzjson_table_function.sql b/tests/queries/0_stateless/02918_fuzzjson_table_function.sql\nnew file mode 100644\nindex 000000000000..6db0c69dbac2\n--- /dev/null\n+++ b/tests/queries/0_stateless/02918_fuzzjson_table_function.sql\n@@ -0,0 +1,106 @@\n+-- Tags: no-parallel, no-replicated-database: Named collection is used\n+\n+SET allow_experimental_object_type = 1;\n+--\n+\n+DROP NAMED COLLECTION IF EXISTS 02918_json_fuzzer;\n+CREATE NAMED COLLECTION 02918_json_fuzzer AS json_str='{}';\n+\n+SELECT * FROM fuzzJSON(02918_json_fuzzer, random_seed=54321) LIMIT 10;\n+SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{\"ClickHouse\":\"Is Fast\"}', random_seed=1337) LIMIT 20;\n+SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{\"students\":[{\"name\":\"Alice\"}, {\"name\":\"Bob\"}]}', random_seed=1337) LIMIT 20;\n+SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}]}', random_seed=123456, reuse_output=true) LIMIT 20;\n+SELECT * FROM fuzzJSON(02918_json_fuzzer, json_str='{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}]}', random_seed=123456, reuse_output=false) LIMIT 20;\n+SELECT * FROM fuzzJSON(02918_json_fuzzer,\n+    json_str='{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}]}',\n+    random_seed=123456,\n+    reuse_output=0,\n+    max_output_length=128) LIMIT 20;\n+\n+SELECT * FROM fuzzJSON(02918_json_fuzzer,\n+    json_str='{\"schedule\":[{\"breakfast\":\"7am\"}, {\"lunch\":\"12pm\"}]}',\n+    random_seed=123456,\n+    reuse_output=0,\n+    max_output_length=65536,\n+    max_nesting_level=10,\n+    max_array_size=20) LIMIT 20;\n+\n+SELECT * FROM fuzzJSON(02918_json_fuzzer,\n+    random_seed=6667,\n+    max_nesting_level=0) LIMIT 10;\n+\n+SELECT * FROM fuzzJSON(02918_json_fuzzer,\n+    random_seed=6667,\n+    max_object_size=0,\n+    max_array_size=0) LIMIT 10;\n+\n+--\n+DROP TABLE IF EXISTS 02918_table_str;\n+CREATE TABLE 02918_table_str (json_str String) Engine=Memory;\n+\n+INSERT INTO 02918_table_str SELECT * FROM fuzzJSON(02918_json_fuzzer) limit 10;\n+INSERT INTO 02918_table_str SELECT * FROM fuzzJSON(02918_json_fuzzer) limit 10;\n+INSERT INTO 02918_table_str SELECT * FROM fuzzJSON(02918_json_fuzzer, random_seed=123, reuse_output=true) limit 10;\n+INSERT INTO 02918_table_str SELECT * FROM fuzzJSON(\n+    02918_json_fuzzer,\n+    json_str='{\"name\": \"John Doe\", \"age\": 30, \"address\": {\"city\": \"Citiville\", \"zip\": \"12345\"}, \"hobbies\": [\"reading\", \"traveling\", \"coding\"]}',\n+    random_seed=6666) LIMIT 200;\n+\n+INSERT INTO 02918_table_str SELECT * FROM fuzzJSON(\n+    02918_json_fuzzer,\n+    json_str='{\"name\": \"John Doe\", \"age\": 30, \"address\": {\"city\": \"Citiville\", \"zip\": \"12345\"}, \"hobbies\": [\"reading\", \"traveling\", \"coding\"]}',\n+    random_seed=6666,\n+    min_key_length=1,\n+    max_key_length=5) LIMIT 200;\n+\n+INSERT INTO 02918_table_str SELECT * FROM fuzzJSON(\n+    02918_json_fuzzer,\n+    json_str='{\"name\": \"John Doe\", \"age\": 30, \"address\": {\"city\": \"Citiville\", \"zip\": \"12345\"}, \"hobbies\": [\"reading\", \"traveling\", \"coding\"]}',\n+    max_nesting_level=128,\n+    reuse_output=true,\n+    random_seed=6666,\n+    min_key_length=5,\n+    max_key_length=5) LIMIT 200;\n+\n+INSERT INTO 02918_table_str SELECT * FROM fuzzJSON(\n+    02918_json_fuzzer,\n+    json_str='{\"name\": \"John Doe\", \"age\": 30, \"address\": {\"city\": \"Citiville\", \"zip\": \"12345\"}, \"hobbies\": [\"reading\", \"traveling\", \"coding\"]}',\n+    random_seed=6666,\n+    reuse_output=1,\n+    probability=0.5,\n+    max_output_length=65536,\n+    max_nesting_level=18446744073709551615,\n+    max_array_size=18446744073709551615,\n+    max_object_size=18446744073709551615,\n+    max_key_length=65536,\n+    max_string_value_length=65536) LIMIT 100;\n+\n+SELECT count() FROM 02918_table_str;\n+\n+DROP TABLE IF EXISTS 02918_table_str;\n+\n+--\n+SELECT * FROM fuzzJSON(02918_json_fuzzer, max_output_length=\"Hello\") LIMIT 10; -- { serverError BAD_ARGUMENTS }\n+SELECT * FROM fuzzJSON(02918_json_fuzzer, max_output_length=65537) LIMIT 10; -- { serverError BAD_ARGUMENTS }\n+SELECT * FROM fuzzJSON(02918_json_fuzzer, probability=10) LIMIT 10; -- { serverError BAD_ARGUMENTS }\n+SELECT * FROM fuzzJSON(02918_json_fuzzer, probability=-0.1) LIMIT 10; -- { serverError BAD_ARGUMENTS }\n+SELECT * FROM fuzzJSON(02918_json_fuzzer, probability=1.1) LIMIT 10; -- { serverError BAD_ARGUMENTS }\n+SELECT * FROM fuzzJSON(02918_json_fuzzer, probability=1.1) LIMIT 10; -- { serverError BAD_ARGUMENTS }\n+SELECT * FROM fuzzJSON(02918_json_fuzzer, max_string_value_length=65537) LIMIT 10; -- { serverError BAD_ARGUMENTS }\n+SELECT * FROM fuzzJSON(02918_json_fuzzer, max_key_length=65537) LIMIT 10; -- { serverError BAD_ARGUMENTS }\n+SELECT * FROM fuzzJSON(02918_json_fuzzer, max_key_length=10, min_key_length=0) LIMIT 10; -- { serverError BAD_ARGUMENTS }\n+SELECT * FROM fuzzJSON(02918_json_fuzzer, max_key_length=10, min_key_length=11) LIMIT 10; -- { serverError BAD_ARGUMENTS }\n+\n+--\n+DROP TABLE IF EXISTS 02918_table_obj;\n+CREATE TABLE 02918_table_obj (json_obj Object('json')) Engine=Memory;\n+\n+INSERT INTO 02918_table_obj SELECT * FROM fuzzJSON(\n+    02918_json_fuzzer,\n+    json_str='{\"name\": \"John Doe\", \"age\": 27, \"address\": {\"city\": \"Citiville\", \"zip\": \"12345\"}, \"hobbies\": [\"reading\", \"traveling\", \"coding\"]}',\n+    random_seed=12345) LIMIT 200;\n+SELECT count() FROM 02918_table_obj;\n+\n+DROP TABLE IF EXISTS 02918_table_obj;\n+\n+DROP NAMED COLLECTION IF EXISTS 02918_json_fuzzer;\ndiff --git a/tests/queries/0_stateless/02919_storage_fuzzjson.reference b/tests/queries/0_stateless/02919_storage_fuzzjson.reference\nnew file mode 100644\nindex 000000000000..a134ce52c11a\n--- /dev/null\n+++ b/tests/queries/0_stateless/02919_storage_fuzzjson.reference\n@@ -0,0 +1,3 @@\n+100\n+100\n+100\ndiff --git a/tests/queries/0_stateless/02919_storage_fuzzjson.sql b/tests/queries/0_stateless/02919_storage_fuzzjson.sql\nnew file mode 100644\nindex 000000000000..80b4a406a089\n--- /dev/null\n+++ b/tests/queries/0_stateless/02919_storage_fuzzjson.sql\n@@ -0,0 +1,44 @@\n+DROP TABLE IF EXISTS 02919_test_table_noarg;\n+CREATE TABLE 02919_test_table_noarg(str String) ENGINE = FuzzJSON('{}');\n+\n+SELECT count() FROM (SELECT * FROM 02919_test_table_noarg LIMIT 100);\n+\n+DROP TABLE IF EXISTS 02919_test_table_noarg;\n+\n+--\n+DROP TABLE IF EXISTS 02919_test_table_valid_args;\n+CREATE TABLE 02919_test_table_valid_args(str String) ENGINE = FuzzJSON(\n+    '{\"pet\":\"rat\"}', NULL);\n+\n+SELECT count() FROM (SELECT * FROM 02919_test_table_valid_args LIMIT 100);\n+\n+DROP TABLE IF EXISTS 02919_test_table_valid_args;\n+\n+--\n+DROP TABLE IF EXISTS 02919_test_table_reuse_args;\n+CREATE TABLE 02919_test_table_reuse_args(str String) ENGINE = FuzzJSON(\n+    '{\n+      \"name\": \"Jane Doe\",\n+      \"age\": 30,\n+      \"city\": \"New York\",\n+      \"contacts\": {\n+        \"email\": \"jane@example.com\",\n+        \"phone\": \"+1234567890\"\n+      },\n+      \"skills\": [\n+        \"JavaScript\",\n+        \"Python\",\n+        {\n+          \"frameworks\": [\"React\", \"Django\"]\n+        }\n+      ],\n+      \"projects\": [\n+        {\"name\": \"Project A\", \"status\": \"completed\"},\n+        {\"name\": \"Project B\", \"status\": \"in-progress\"}\n+      ]\n+    }',\n+    12345);\n+\n+SELECT count() FROM (SELECT * FROM 02919_test_table_reuse_args LIMIT 100);\n+\n+DROP TABLE IF EXISTS 02919_test_table_reuse_args;\n",
  "problem_statement": "Add JSON fuzzer\n### Changelog category (leave one):\r\n- Build/Testing/Packaging Improvement\r\n\r\n### Changelog entry (a user-readable short description of the changes that goes to CHANGELOG.md):\r\nAdded simple JSON fuzzer, which fuzzes the structure of json documents: randomly adds, removes and renames keys and changes types of the values and the  values themselves. It's intended to be used to generates data for testing recently added type `Object`.\n",
  "hints_text": "The fuzzer still requires some work on it, but one bug has been already found with its help #35960.\nProbably it is good to merge it already?\n>Probably it is good to merge it already?\r\n\r\nHow about to do it this year @CurtizJ? :) \nIt's mostly useless now. Maybe it's worth to merge it when I'll continue working on JSON type.",
  "created_at": "2023-11-09T05:23:23Z",
  "modified_files": [
    "b/docs/en/sql-reference/table-functions/fuzzJSON.md",
    "b/src/Storages/StorageFuzzJSON.cpp",
    "b/src/Storages/StorageFuzzJSON.h",
    "src/Storages/registerStorages.cpp",
    "src/TableFunctions/CMakeLists.txt",
    "b/src/TableFunctions/TableFunctionFuzzJSON.cpp",
    "b/src/TableFunctions/TableFunctionFuzzJSON.h",
    "src/TableFunctions/registerTableFunctions.cpp",
    "src/TableFunctions/registerTableFunctions.h",
    "utils/check-style/aspell-ignore/en/aspell-dict.txt"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02918_fuzzjson_table_function.reference",
    "b/tests/queries/0_stateless/02918_fuzzjson_table_function.sql",
    "b/tests/queries/0_stateless/02919_storage_fuzzjson.reference",
    "b/tests/queries/0_stateless/02919_storage_fuzzjson.sql"
  ]
}