diff --git a/src/Interpreters/join_common.cpp b/src/Interpreters/join_common.cpp
index 9890a130c331..b097a8f61929 100644
--- a/src/Interpreters/join_common.cpp
+++ b/src/Interpreters/join_common.cpp
@@ -9,7 +9,6 @@
 #include <DataTypes/DataTypeLowCardinality.h>
 #include <DataTypes/DataTypeNullable.h>
 #include <DataTypes/DataTypesNumber.h>
-#include <DataTypes/getLeastSupertype.h>
 
 #include <IO/WriteHelpers.h>
 
@@ -30,12 +29,41 @@ namespace ErrorCodes
 namespace
 {
 
+void insertFromNullableOrDefault(MutableColumnPtr & dst, const ColumnNullable * nullable_col)
+{
+    const auto & nested = nullable_col->getNestedColumn();
+    const auto & nullmap = nullable_col->getNullMapColumn().getData();
+    if (auto * lc = typeid_cast<ColumnLowCardinality *>(dst.get()); lc && !nested.lowCardinality())
+    {
+        for (size_t i = 0; i < nullable_col->size(); ++i)
+        {
+            if (nullmap[i])
+                lc->insertDefault();
+            else
+                lc->insertRangeFromFullColumn(nested, i, 1);
+        }
+    }
+    else
+    {
+        for (size_t i = 0; i < nullable_col->size(); ++i)
+        {
+            if (nullmap[i])
+                dst->insertDefault();
+            else
+                dst->insertFrom(nested, i);
+        }
+    }
+}
+
 ColumnPtr changeLowCardinality(const ColumnPtr & column, const ColumnPtr & dst_sample)
 {
     if (dst_sample->lowCardinality())
     {
         MutableColumnPtr lc = dst_sample->cloneEmpty();
-        typeid_cast<ColumnLowCardinality &>(*lc).insertRangeFromFullColumn(*column, 0, column->size());
+        if (const auto * nullable_col = typeid_cast<const ColumnNullable *>(column.get()))
+            insertFromNullableOrDefault(lc, nullable_col);
+        else
+            typeid_cast<ColumnLowCardinality &>(*lc).insertRangeFromFullColumn(*column, 0, column->size());
         return lc;
     }
 
@@ -190,9 +218,9 @@ void removeColumnNullability(ColumnWithTypeAndName & column)
 
         if (column.column && column.column->isNullable())
         {
-            const auto * nullable_column = checkAndGetColumn<ColumnNullable>(*column.column);
-            ColumnPtr nested_column = nullable_column->getNestedColumnPtr();
-            MutableColumnPtr mutable_column = IColumn::mutate(std::move(nested_column));
+            const auto * nullable_col = checkAndGetColumn<ColumnNullable>(*column.column);
+            MutableColumnPtr mutable_column = nullable_col->getNestedColumn().cloneEmpty();
+            insertFromNullableOrDefault(mutable_column, nullable_col);
             column.column = std::move(mutable_column);
         }
     }
diff --git a/src/Processors/Transforms/JoiningTransform.cpp b/src/Processors/Transforms/JoiningTransform.cpp
index 95a12e2291d5..f099f41f4722 100644
--- a/src/Processors/Transforms/JoiningTransform.cpp
+++ b/src/Processors/Transforms/JoiningTransform.cpp
@@ -1,8 +1,8 @@
 #include <Processors/Transforms/JoiningTransform.h>
 #include <Interpreters/ExpressionAnalyzer.h>
 #include <Interpreters/join_common.h>
-#include <DataStreams/IBlockInputStream.h>
 
+#include <common/logger_useful.h>
 
 namespace DB
 {
@@ -15,7 +15,9 @@ namespace ErrorCodes
 Block JoiningTransform::transformHeader(Block header, const JoinPtr & join)
 {
     ExtraBlockPtr tmp;
+    LOG_DEBUG(&Poco::Logger::get("JoiningTransform"), "Before join block: '{}'", header.dumpStructure());
     join->joinBlock(header, tmp);
+    LOG_DEBUG(&Poco::Logger::get("JoiningTransform"), "After join block: '{}'", header.dumpStructure());
     return header;
 }
 
