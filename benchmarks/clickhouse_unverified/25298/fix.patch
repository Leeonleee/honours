diff --git a/src/AggregateFunctions/AggregateFunctionSumMap.h b/src/AggregateFunctions/AggregateFunctionSumMap.h
index ec2f24d12cbd..a4b6f3c967b2 100644
--- a/src/AggregateFunctions/AggregateFunctionSumMap.h
+++ b/src/AggregateFunctions/AggregateFunctionSumMap.h
@@ -441,18 +441,11 @@ class FieldVisitorMax : public StaticVisitor<bool>
 {
 private:
     const Field & rhs;
-public:
-    explicit FieldVisitorMax(const Field & rhs_) : rhs(rhs_) {}
-
-    bool operator() (Null &) const { throw Exception("Cannot compare Nulls", ErrorCodes::LOGICAL_ERROR); }
-    bool operator() (Array &) const { throw Exception("Cannot compare Arrays", ErrorCodes::LOGICAL_ERROR); }
-    bool operator() (Tuple &) const { throw Exception("Cannot compare Tuples", ErrorCodes::LOGICAL_ERROR); }
-    bool operator() (AggregateFunctionStateData &) const { throw Exception("Cannot compare AggregateFunctionStates", ErrorCodes::LOGICAL_ERROR); }
 
-    template <typename T>
-    bool operator() (DecimalField<T> & x) const
+    template <typename FieldType>
+    bool compareImpl(FieldType & x) const
     {
-        auto val = get<DecimalField<T>>(rhs);
+        auto val = get<FieldType>(rhs);
         if (val > x)
         {
             x = val;
@@ -462,18 +455,18 @@ class FieldVisitorMax : public StaticVisitor<bool>
         return false;
     }
 
-    template <typename T>
-    bool operator() (T & x) const
-    {
-        auto val = get<T>(rhs);
-        if (val > x)
-        {
-            x = val;
-            return true;
-        }
+public:
+    explicit FieldVisitorMax(const Field & rhs_) : rhs(rhs_) {}
 
-        return false;
-    }
+    bool operator() (Null &) const { throw Exception("Cannot compare Nulls", ErrorCodes::LOGICAL_ERROR); }
+    bool operator() (AggregateFunctionStateData &) const { throw Exception("Cannot compare AggregateFunctionStates", ErrorCodes::LOGICAL_ERROR); }
+
+    bool operator() (Array & x) const { return compareImpl<Array>(x); }
+    bool operator() (Tuple & x) const { return compareImpl<Tuple>(x); }
+    template <typename T>
+    bool operator() (DecimalField<T> & x) const { return compareImpl<DecimalField<T>>(x); }
+    template <typename T>
+    bool operator() (T & x) const { return compareImpl<T>(x); }
 };
 
 /** Implements `Min` operation.
@@ -483,18 +476,11 @@ class FieldVisitorMin : public StaticVisitor<bool>
 {
 private:
     const Field & rhs;
-public:
-    explicit FieldVisitorMin(const Field & rhs_) : rhs(rhs_) {}
-
-    bool operator() (Null &) const { throw Exception("Cannot compare Nulls", ErrorCodes::LOGICAL_ERROR); }
-    bool operator() (Array &) const { throw Exception("Cannot sum Arrays", ErrorCodes::LOGICAL_ERROR); }
-    bool operator() (Tuple &) const { throw Exception("Cannot sum Tuples", ErrorCodes::LOGICAL_ERROR); }
-    bool operator() (AggregateFunctionStateData &) const { throw Exception("Cannot sum AggregateFunctionStates", ErrorCodes::LOGICAL_ERROR); }
 
-    template <typename T>
-    bool operator() (DecimalField<T> & x) const
+    template <typename FieldType>
+    bool compareImpl(FieldType & x) const
     {
-        auto val = get<DecimalField<T>>(rhs);
+        auto val = get<FieldType>(rhs);
         if (val < x)
         {
             x = val;
@@ -504,18 +490,18 @@ class FieldVisitorMin : public StaticVisitor<bool>
         return false;
     }
 
-    template <typename T>
-    bool operator() (T & x) const
-    {
-        auto val = get<T>(rhs);
-        if (val < x)
-        {
-            x = val;
-            return true;
-        }
+public:
+    explicit FieldVisitorMin(const Field & rhs_) : rhs(rhs_) {}
 
-        return false;
-    }
+    bool operator() (Null &) const { throw Exception("Cannot compare Nulls", ErrorCodes::LOGICAL_ERROR); }
+    bool operator() (AggregateFunctionStateData &) const { throw Exception("Cannot sum AggregateFunctionStates", ErrorCodes::LOGICAL_ERROR); }
+
+    bool operator() (Array & x) const { return compareImpl<Array>(x); }
+    bool operator() (Tuple & x) const { return compareImpl<Tuple>(x); }
+    template <typename T>
+    bool operator() (DecimalField<T> & x) const { return compareImpl<DecimalField<T>>(x); }
+    template <typename T>
+    bool operator() (T & x) const { return compareImpl<T>(x); }
 };
 
 
