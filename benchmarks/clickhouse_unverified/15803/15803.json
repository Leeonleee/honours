{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 15803,
  "instance_id": "ClickHouse__ClickHouse-15803",
  "issue_numbers": [
    "9434"
  ],
  "base_commit": "d42ffa02bd9ec0d2ba241c9e4781533ad7217c36",
  "patch": "diff --git a/src/Functions/logTrace.cpp b/src/Functions/logTrace.cpp\nnew file mode 100644\nindex 000000000000..f89786b9bda7\n--- /dev/null\n+++ b/src/Functions/logTrace.cpp\n@@ -0,0 +1,62 @@\n+#include <Columns/ColumnConst.h>\n+#include <Columns/ColumnString.h>\n+#include <DataTypes/DataTypeString.h>\n+#include <DataTypes/DataTypesNumber.h>\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/FunctionHelpers.h>\n+#include <Functions/IFunctionImpl.h>\n+\n+#include <common/logger_useful.h>\n+\n+namespace DB\n+{\n+namespace ErrorCodes\n+{\n+    extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n+}\n+\n+namespace\n+{\n+    class FunctionLogTrace : public IFunction\n+    {\n+    public:\n+        static constexpr auto name = \"logTrace\";\n+        static FunctionPtr create(const Context &) { return std::make_shared<FunctionLogTrace>(); }\n+\n+        String getName() const override { return name; }\n+\n+        size_t getNumberOfArguments() const override { return 1; }\n+\n+        DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override\n+        {\n+            if (!isString(arguments[0]))\n+                throw Exception(\n+                    \"Illegal type \" + arguments[0]->getName() + \" of argument of function \" + getName(),\n+                    ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+            return std::make_shared<DataTypeUInt8>();\n+        }\n+\n+        void executeImpl(Block & block, const ColumnNumbers & arguments, size_t result, size_t input_rows_count) const override\n+        {\n+            String message;\n+            if (const ColumnConst * col = checkAndGetColumnConst<ColumnString>(block.getByPosition(arguments[0]).column.get()))\n+                message = col->getDataAt(0).data;\n+            else\n+                throw Exception(\n+                    \"First argument for function \" + getName() + \" must be Constant string\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+\n+            static auto * log = &Poco::Logger::get(\"FunctionLogTrace\");\n+            LOG_TRACE(log, message);\n+\n+            block.getByPosition(result).column = DataTypeUInt8().createColumnConst(input_rows_count, 0);\n+        }\n+    };\n+\n+}\n+\n+void registerFunctionLogTrace(FunctionFactory & factory)\n+{\n+    factory.registerFunction<FunctionLogTrace>();\n+}\n+\n+}\ndiff --git a/src/Functions/registerFunctions.cpp b/src/Functions/registerFunctions.cpp\nindex 804ceb4d309a..f70b712564f0 100644\n--- a/src/Functions/registerFunctions.cpp\n+++ b/src/Functions/registerFunctions.cpp\n@@ -3,7 +3,6 @@\n \n namespace DB\n {\n-\n void registerFunctionsArithmetic(FunctionFactory &);\n void registerFunctionsArray(FunctionFactory &);\n void registerFunctionsTuple(FunctionFactory &);\n@@ -41,6 +40,8 @@ void registerFunctionsUnixTimestamp64(FunctionFactory & factory);\n #if !defined(ARCADIA_BUILD)\n void registerFunctionBayesAB(FunctionFactory &);\n #endif\n+void registerFunctionTid(FunctionFactory & factory);\n+void registerFunctionLogTrace(FunctionFactory & factory);\n \n \n void registerFunctions()\n@@ -86,6 +87,8 @@ void registerFunctions()\n #if !defined(ARCADIA_BUILD)\n     registerFunctionBayesAB(factory);\n #endif\n+    registerFunctionTid(factory);\n+    registerFunctionLogTrace(factory);\n }\n \n }\ndiff --git a/src/Functions/tid.cpp b/src/Functions/tid.cpp\nnew file mode 100644\nindex 000000000000..1f41f959b2ad\n--- /dev/null\n+++ b/src/Functions/tid.cpp\n@@ -0,0 +1,38 @@\n+#include <DataTypes/DataTypesNumber.h>\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/FunctionHelpers.h>\n+#include <Functions/IFunctionImpl.h>\n+\n+#include <common/getThreadId.h>\n+\n+namespace DB\n+{\n+namespace\n+{\n+    class FunctionTid : public IFunction\n+    {\n+    public:\n+        static constexpr auto name = \"tid\";\n+        static FunctionPtr create(const Context &) { return std::make_shared<FunctionTid>(); }\n+\n+        String getName() const override { return name; }\n+\n+        size_t getNumberOfArguments() const override { return 0; }\n+\n+        DataTypePtr getReturnTypeImpl(const DataTypes &) const override { return std::make_shared<DataTypeUInt64>(); }\n+\n+        void executeImpl(Block & block, const ColumnNumbers &, size_t result, size_t input_rows_count) const override\n+        {\n+            auto current_tid = getThreadId();\n+            block.getByPosition(result).column = DataTypeUInt64().createColumnConst(input_rows_count, current_tid);\n+        }\n+    };\n+\n+}\n+\n+void registerFunctionTid(FunctionFactory & factory)\n+{\n+    factory.registerFunction<FunctionTid>();\n+}\n+\n+}\ndiff --git a/src/Functions/ya.make b/src/Functions/ya.make\nindex 97847b99bf67..f694b722a70d 100644\n--- a/src/Functions/ya.make\n+++ b/src/Functions/ya.make\n@@ -267,6 +267,7 @@ SRCS(\n     log10.cpp\n     log2.cpp\n     log.cpp\n+    logTrace.cpp\n     lowCardinalityIndices.cpp\n     lowCardinalityKeys.cpp\n     lower.cpp\n@@ -388,6 +389,7 @@ SRCS(\n     TargetSpecific.cpp\n     tgamma.cpp\n     throwIf.cpp\n+    tid.cpp\n     timeSlot.cpp\n     timeSlots.cpp\n     timezone.cpp\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01514_tid_function.reference b/tests/queries/0_stateless/01514_tid_function.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01514_tid_function.sql b/tests/queries/0_stateless/01514_tid_function.sql\nnew file mode 100644\nindex 000000000000..3415eff4b074\n--- /dev/null\n+++ b/tests/queries/0_stateless/01514_tid_function.sql\n@@ -0,0 +1,1 @@\n+SELECT tid() FORMAT Null\ndiff --git a/tests/queries/0_stateless/01515_logtrace_function.reference b/tests/queries/0_stateless/01515_logtrace_function.reference\nnew file mode 100644\nindex 000000000000..d86bac9de59a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01515_logtrace_function.reference\n@@ -0,0 +1,1 @@\n+OK\ndiff --git a/tests/queries/0_stateless/01515_logtrace_function.sh b/tests/queries/0_stateless/01515_logtrace_function.sh\nnew file mode 100755\nindex 000000000000..c536c90e74b8\n--- /dev/null\n+++ b/tests/queries/0_stateless/01515_logtrace_function.sh\n@@ -0,0 +1,8 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. \"$CURDIR\"/../shell_config.sh\n+\n+CLICKHOUSE_CLIENT=$(echo ${CLICKHOUSE_CLIENT} | sed 's/'\"--send_logs_level=${CLICKHOUSE_CLIENT_SERVER_LOGS_LEVEL}\"'/--send_logs_level=debug/g')\n+\n+${CLICKHOUSE_CLIENT} --query=\"SELECT logTrace('logTrace Function Test');\" 2>&1 | grep -q \"logTrace Function Test\" && echo \"OK\" || echo \"FAIL\"\n",
  "problem_statement": "Add `logTrace` and `tid` function.\nIt will emit a log message for each block.\r\n\r\n**Use case**\r\n```\r\nAlexey Milovidov, [28.02.20 13:41]\r\n[In reply to Alexander Kuzmenkov]\r\n\u0418 \u043f\u0440\u0430\u0432\u0434\u0430, \u0442\u0430\u043c \u043a\u0440\u0430\u0441\u0438\u0432\u044b\u0439 \u043e\u0442\u0447\u0451\u0442.\r\n\r\n\u0418\u043d\u0442\u0435\u0440\u0435\u0441\u043d\u043e, \u043f\u043e\u0447\u0435\u043c\u0443 \u0442\u0435\u0441\u0442 exp2 \u0442\u0430\u043a\u043e\u0439 \u043e\u0442\u0441\u0442\u043e\u0439\u043d\u044b\u0439? \u0415\u0441\u0442\u044c \u0433\u0438\u043f\u043e\u0442\u0435\u0437\u0430 - \u0442\u0430\u043a \u043a\u0430\u043a \u043e\u043d \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u043e\u0434\u0438\u043d \u043f\u043e\u0442\u043e\u043a, \u0442\u043e \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e \u043f\u043e\u043f\u0430\u0434\u0430\u0442\u044c \u043d\u0430 \u0431\u043e\u043b\u0435\u0435 \u0443\u0434\u0430\u0447\u043d\u043e\u0435 \u044f\u0434\u0440\u043e. \u0417\u0430\u043c\u0435\u043d\u0438 numbers \u043d\u0430 numbers_mt \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c, \u0444\u043b\u0430\u043f\u043e\u0432 \u0431\u043e\u043b\u044c\u0448\u0435 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442.\r\n\r\nAlexey Milovidov, [28.02.20 13:42]\r\n\u0422\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0443\u043c\u0430\u0439, \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u043e\u0432 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043d\u0443\u0436\u043d\u043e \u0434\u0435\u043b\u0430\u0442\u044c random CPU affinity \u043f\u0440\u0438 \u043d\u0430\u0447\u0430\u043b\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0432 \u043f\u043e\u0442\u043e\u043a\u0435.\r\n\r\nAlexander Kuzmenkov, [28.02.20 13:50]\r\n[In reply to Alexey Milovidov]\r\n\u042d\u0442\u043e \u0442\u044b \u0433\u0434\u0435 \u043d\u0430 \u043d\u0435\u0433\u043e \u0441\u043c\u043e\u0442\u0440\u0438\u0448\u044c? \u042f \u043e\u0442\u043a\u0440\u044b\u043b \u043f\u0430\u0440\u0443 \u043e\u0442\u0447\u0451\u0442\u043e\u0432 \u0441 \u043c\u0430\u0441\u0442\u0435\u0440\u0430, \u0442\u0430\u043c \u0432\u0440\u043e\u0434\u0435 \u043d\u0435 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f.\r\n\r\n\u041c\u043e\u0436\u043d\u043e \u0441\u043a\u0430\u0447\u0430\u0442\u044c test output \u0432\u043d\u0438\u0437\u0443 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b, \u0442\u0430\u043c \u0435\u0441\u0442\u044c svg-\u0444\u0430\u0439\u043b\u044b \u0441 \u0444\u043b\u0435\u0439\u043c\u0433\u0440\u0430\u0444\u0430\u043c\u0438 \u0434\u043b\u044f \u0444\u043b\u0430\u043f\u0430\u044e\u0449\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 (\u0434\u0443\u043c\u0430\u044e, \u0447\u0442\u043e \u043d\u0430\u0434\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u043e\u043e\u0431\u0449\u0435 \u0434\u043b\u044f \u0432\u0441\u0435\u0445). \u0418 \u0435\u0441\u0442\u044c \u0444\u0430\u0439\u043b metric-deviation.rep, \u0442\u0430\u043c \u0434\u043b\u044f \u0444\u043b\u0430\u043f\u0430\u044e\u0449\u0438\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0440\u0430\u0437\u0431\u0440\u043e\u0441 \u043f\u043e \u0440\u0430\u0437\u043d\u044b\u043c \u043c\u0435\u0442\u0440\u0438\u043a\u0430\u043c \u0442\u0438\u043f\u0430 SoftPageFaults. \u041d\u0430\u0434\u043e \u043d\u0435 \u0437\u0430\u0431\u044b\u0442\u044c \u0432\u043d\u0435\u0441\u0442\u0438 \u044d\u0442\u043e \u0442\u0430\u0439\u043d\u043e\u0435 \u0437\u043d\u0430\u043d\u0438\u0435 \u0432 readme.\r\n\r\nAlexander Kuzmenkov, [28.02.20 13:57]\r\n[In reply to Alexey Milovidov]\r\n\u0410 \u043a\u0430\u043a\u0430\u044f \u0443 \u043d\u0430\u0441 \u0441\u0438\u0441\u0442\u0435\u043c\u0430, \u0435\u0441\u043b\u0438 \u0432 \u043e\u0434\u043d\u043e\u043c \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0438 \u0434\u0435\u043b\u0430\u0435\u0448\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u043e\u0434\u0440\u044f\u0434, \u043e\u043d\u0438 \u0432 \u043e\u0434\u043d\u043e\u043c \u0438 \u0442\u043e\u043c \u0436\u0435 \u043f\u043e\u0442\u043e\u043a\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u0441\u044f, \u0438\u043b\u0438 \u0432 \u043a\u0430\u043a\u0438\u0445 \u043f\u043e\u043f\u0430\u043b\u043e? \u041c\u043e\u0436\u043d\u043e \u043f\u043e\u0440\u0430\u043d\u0434\u043e\u043c\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0430\u0434\u0438 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u0430, \u0438\u043b\u0438 \u043a\u0430\u043a \u0441\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u2014 \u043f\u0435\u0440\u0435\u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0442\u044c\u0441\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437.\r\n```\n",
  "hints_text": "Hi, I'm not very clear about what these two functions do? @alexey-milovidov \n`tid()` - simply returns current thread id.\r\n`logTrace('message')` - emits trace log message for each block (`LOG_TRACE`), message argument must be constant expression.\n> `logTrace('message')` - emits trace log message for each block (`LOG_TRACE`), message argument must be constant expression.\r\n\r\nThe message emits to server log and no return value? @alexey-milovidov \nYes. It can return constant UInt8 column with value zero.",
  "created_at": "2020-10-10T02:52:07Z",
  "modified_files": [
    "b/src/Functions/logTrace.cpp",
    "src/Functions/registerFunctions.cpp",
    "b/src/Functions/tid.cpp",
    "src/Functions/ya.make"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01514_tid_function.sql",
    "b/tests/queries/0_stateless/01515_logtrace_function.reference",
    "b/tests/queries/0_stateless/01515_logtrace_function.sh"
  ]
}