diff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp
index 0938a9cfee59..747603d0e6db 100644
--- a/src/Client/ClientBase.cpp
+++ b/src/Client/ClientBase.cpp
@@ -463,12 +463,13 @@ void ClientBase::initBlockOutputStream(const Block & block, ASTPtr parsed_query)
         /// The query can specify output format or output file.
         if (const auto * query_with_output = dynamic_cast<const ASTQueryWithOutput *>(parsed_query.get()))
         {
+            String out_file;
             if (query_with_output->out_file)
             {
                 select_into_file = true;
 
                 const auto & out_file_node = query_with_output->out_file->as<ASTLiteral &>();
-                const auto & out_file = out_file_node.value.safeGet<std::string>();
+                out_file = out_file_node.value.safeGet<std::string>();
 
                 std::string compression_method;
                 if (query_with_output->compression)
@@ -494,6 +495,12 @@ void ClientBase::initBlockOutputStream(const Block & block, ASTPtr parsed_query)
                 const auto & id = query_with_output->format->as<ASTIdentifier &>();
                 current_format = id.name();
             }
+            else if (query_with_output->out_file)
+            {
+                const auto & format_name = FormatFactory::instance().getFormatFromFileName(out_file);
+                if (!format_name.empty())
+                    current_format = format_name;
+            }
         }
 
         if (has_vertical_output_suffix)
@@ -1008,11 +1015,15 @@ void ClientBase::sendData(Block & sample, const ColumnsDescription & columns_des
             compression_method = compression_method_node.value.safeGet<std::string>();
         }
 
+        String current_format = parsed_insert_query->format;
+        if (current_format.empty())
+            current_format = FormatFactory::instance().getFormatFromFileName(in_file);
+
         /// Create temporary storage file, to support globs and parallel reading
         StorageFile::CommonArguments args{
             WithContext(global_context),
             parsed_insert_query->table_id,
-            parsed_insert_query->format,
+            current_format,
             getFormatSettings(global_context),
             compression_method,
             columns_description_for_query,
diff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp
index 2068de0d01cd..ae554e62651a 100644
--- a/src/Formats/FormatFactory.cpp
+++ b/src/Formats/FormatFactory.cpp
@@ -14,6 +14,8 @@
 #include <Poco/URI.h>
 #include <Common/Exception.h>
 
+#include <boost/algorithm/string/case_conv.hpp>
+
 namespace DB
 {
 
@@ -391,6 +393,30 @@ void FormatFactory::registerOutputFormat(const String & name, OutputCreator outp
     target = std::move(output_creator);
 }
 
+void FormatFactory::registerFileExtension(const String & extension, const String & format_name)
+{
+    file_extension_formats[extension] = format_name;
+}
+
+String FormatFactory::getFormatFromFileName(String file_name)
+{
+    CompressionMethod compression_method = chooseCompressionMethod(file_name, "");
+    if (CompressionMethod::None != compression_method)
+    {
+        auto pos = file_name.find_last_of('.');
+        if (pos != String::npos)
+            file_name = file_name.substr(0, pos);
+    }
+
+    auto pos = file_name.find_last_of('.');
+    if (pos == String::npos)
+        return "";
+
+    String file_extension = file_name.substr(pos + 1, String::npos);
+    boost::algorithm::to_lower(file_extension);
+    return file_extension_formats[file_extension];
+}
+
 void FormatFactory::registerFileSegmentationEngine(const String & name, FileSegmentationEngine file_segmentation_engine)
 {
     auto & target = dict[name].file_segmentation_engine;
diff --git a/src/Formats/FormatFactory.h b/src/Formats/FormatFactory.h
index a62b32da0cc0..229adbbb2631 100644
--- a/src/Formats/FormatFactory.h
+++ b/src/Formats/FormatFactory.h
@@ -5,6 +5,7 @@
 #include <Formats/FormatSettings.h>
 #include <Interpreters/Context_fwd.h>
 #include <IO/BufferWithOwnMemory.h>
+#include <IO/CompressionMethod.h>
 #include <base/types.h>
 #include <Core/NamesAndTypes.h>
 
@@ -108,6 +109,7 @@ class FormatFactory final : private boost::noncopyable
     };
 
     using FormatsDictionary = std::unordered_map<String, Creators>;
+    using FileExtensionFormats = std::unordered_map<String, String>;
 
 public:
     static FormatFactory & instance();
@@ -169,6 +171,10 @@ class FormatFactory final : private boost::noncopyable
     void registerInputFormat(const String & name, InputCreator input_creator);
     void registerOutputFormat(const String & name, OutputCreator output_creator);
 
+    /// Register file extension for format
+    void registerFileExtension(const String & extension, const String & format_name);
+    String getFormatFromFileName(String file_name);
+
     /// Register schema readers for format its name.
     void registerSchemaReader(const String & name, SchemaReaderCreator schema_reader_creator);
     void registerExternalSchemaReader(const String & name, ExternalSchemaReaderCreator external_schema_reader_creator);
@@ -192,6 +198,7 @@ class FormatFactory final : private boost::noncopyable
 
 private:
     FormatsDictionary dict;
+    FileExtensionFormats file_extension_formats;
 
     const Creators & getCreators(const String & name) const;
 
diff --git a/src/Formats/registerFormats.cpp b/src/Formats/registerFormats.cpp
index 1349c9e33238..289b59654555 100644
--- a/src/Formats/registerFormats.cpp
+++ b/src/Formats/registerFormats.cpp
@@ -196,6 +196,16 @@ void registerFormats()
     registerTSKVSchemaReader(factory);
     registerValuesSchemaReader(factory);
     registerTemplateSchemaReader(factory);
+
+    factory.registerFileExtension("csv", "CSV");
+    factory.registerFileExtension("tsv", "TSV");
+    factory.registerFileExtension("parquet", "Parquet");
+    factory.registerFileExtension("orc", "ORC");
+    factory.registerFileExtension("native", "Native");
+    factory.registerFileExtension("json", "JSON");
+    factory.registerFileExtension("ndjson", "JSONEachRow");
+    factory.registerFileExtension("xml", "XML");
+    factory.registerFileExtension("avro", "Avro");
 }
 
 }
diff --git a/src/Parsers/ParserInsertQuery.cpp b/src/Parsers/ParserInsertQuery.cpp
index a968e159a5e6..fc606b15e9f2 100644
--- a/src/Parsers/ParserInsertQuery.cpp
+++ b/src/Parsers/ParserInsertQuery.cpp
@@ -132,11 +132,14 @@ bool ParserInsertQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)
                 return false;
         }
 
-        /// Read format name
-        if (!s_format.ignore(pos, expected) || !name_p.parse(pos, format, expected))
-            return false;
+        /// Check if we have FORMAT statement
+        if (s_format.ignore(pos, expected))
+        {
+            if (!name_p.parse(pos, format, expected))
+                return false;
 
-        tryGetIdentifierNameInto(format, format_str);
+            tryGetIdentifierNameInto(format, format_str);
+        }
     }
     else if (s_values.ignore(pos, expected))
     {
