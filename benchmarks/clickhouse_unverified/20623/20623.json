{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 20623,
  "instance_id": "ClickHouse__ClickHouse-20623",
  "issue_numbers": [
    "20619"
  ],
  "base_commit": "0de1535b2312fecd14a10e2504434d14ca740931",
  "patch": "diff --git a/src/Dictionaries/getDictionaryConfigurationFromAST.cpp b/src/Dictionaries/getDictionaryConfigurationFromAST.cpp\nindex 2d4f971ef582..04ba1db09fcc 100644\n--- a/src/Dictionaries/getDictionaryConfigurationFromAST.cpp\n+++ b/src/Dictionaries/getDictionaryConfigurationFromAST.cpp\n@@ -401,10 +401,16 @@ void buildConfigurationFromFunctionWithKeyValueArguments(\n         {\n             auto builder = FunctionFactory::instance().tryGet(func->name, context);\n             auto function = builder->build({});\n-            auto result = function->execute({}, {}, 0);\n+            function->prepare({});\n+\n+            /// We assume that function will not take arguments and will return constant value like tcpPort or hostName\n+            /// Such functions will return column with size equal to input_rows_count.\n+            size_t input_rows_count = 1;\n+            auto result = function->execute({}, function->getResultType(), input_rows_count);\n \n             Field value;\n             result->get(0, value);\n+\n             AutoPtr<Text> text_value(doc->createTextNode(getFieldAsString(value)));\n             current_xml_element->appendChild(text_value);\n         }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01720_dictionary_create_source_with_functions.reference b/tests/queries/0_stateless/01720_dictionary_create_source_with_functions.reference\nnew file mode 100644\nindex 000000000000..38abe3c9f525\n--- /dev/null\n+++ b/tests/queries/0_stateless/01720_dictionary_create_source_with_functions.reference\n@@ -0,0 +1,1 @@\n+1\tFirst\ndiff --git a/tests/queries/0_stateless/01720_dictionary_create_source_with_functions.sql b/tests/queries/0_stateless/01720_dictionary_create_source_with_functions.sql\nnew file mode 100644\nindex 000000000000..a0a4fbbfab9a\n--- /dev/null\n+++ b/tests/queries/0_stateless/01720_dictionary_create_source_with_functions.sql\n@@ -0,0 +1,28 @@\n+DROP DATABASE IF EXISTS 01720_dictionary_db;\n+CREATE DATABASE 01720_dictionary_db;\n+\n+CREATE TABLE 01720_dictionary_db.dictionary_source_table\n+(\n+\tkey UInt8,\n+    value String\n+)\n+ENGINE = TinyLog;\n+\n+INSERT INTO 01720_dictionary_db.dictionary_source_table VALUES (1, 'First');\n+\n+CREATE DICTIONARY 01720_dictionary_db.dictionary\n+(\n+    key UInt64,\n+    value String\n+)\n+PRIMARY KEY key\n+SOURCE(CLICKHOUSE(DB '01720_dictionary_db' TABLE 'dictionary_source_table' HOST hostName() PORT tcpPort()))\n+LIFETIME(0)\n+LAYOUT(FLAT());\n+\n+SELECT * FROM 01720_dictionary_db.dictionary;\n+\n+DROP DICTIONARY 01720_dictionary_db.dictionary;\n+DROP TABLE 01720_dictionary_db.dictionary_source_table;\n+\n+DROP DATABASE 01720_dictionary_db;\n",
  "problem_statement": "Signal 11 Crash on CREATE DICTIONARY SOURCE CLICKHOUSE\n(you don't have to strictly follow this form)\r\n\r\n**Describe the bug**\r\nClickhouse server crashes with `signal 11` message after executing following:\r\n\r\n**Does it reproduce on recent release?**\r\nReproducible on `yandex/clickhouse-server:20.12.6.29` Docker image from dockerhub.\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use\r\n`20.12.6.29`\r\n\r\n* Which interface to use, if matters\r\nclickhouse client\r\n* Non-default settings, if any\r\n`none`\r\n* `CREATE TABLE` statements for all tables involved\r\n`see below`\r\n* Queries to run that lead to unexpected result\r\n``` SQL\r\nCREATE DATABASE ch_crash_test;\r\n\r\nCREATE TABLE ch_crash_test.table\r\n(\r\n\ti UInt8, s String\r\n)\r\nENGINE = MergeTree PARTITION BY tuple() ORDER BY tuple();\r\n\r\nCREATE DICTIONARY ch_crash_test.dictionary (key UInt64, value UInt64) PRIMARY KEY key SOURCE(CLICKHOUSE(DB 'ch_crash_test' TABLE 'table' HOST hostName() PORT tcpPort())) LIFETIME(0) LAYOUT(FLAT());\r\n```\r\n\r\n\r\n**Expected behavior**\r\nCH gives an error message or creates a dictionary.\r\n\r\n**Error message and/or stacktrace**\r\n```\r\n[3d980a87c6db] 2021.02.17 10:27:10.046906 [ 104 ] <Fatal> BaseDaemon: ########################################\r\n[3d980a87c6db] 2021.02.17 10:27:10.047020 [ 104 ] <Fatal> BaseDaemon: (version 20.12.6.29 (official build), build id: 3EBB7402D1E5864D) (from thread 74) (query_id: 7ecb645a-e37b-478e-bcd1-c49fb6c066a1) Received signal Segmentation fault (11)\r\n[3d980a87c6db] 2021.02.17 10:27:10.047078 [ 104 ] <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n[3d980a87c6db] 2021.02.17 10:27:10.047150 [ 104 ] <Fatal> BaseDaemon: Stack trace: 0xd92e4b2 0xba40111 0x93efd5e 0x941bbb0 0x941c251 0x94238dd 0xd5ed41d 0xd5e9bb0 0xda66115 0xdc3f2e4 0xdc400af 0xe01ffe7 0xe01ebbd 0xe6f7f46 0xe704447 0x10eaec1f 0x10eb0631 0x10fddc09 0x10fd9b9a 0x7fe33d652609 0x7fe33d568293\r\n[3d980a87c6db] 2021.02.17 10:27:10.047244 [ 104 ] <Fatal> BaseDaemon: 2. DB::IDataType::createColumnConst(unsigned long, DB::Field const&) const @ 0xd92e4b2 in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.047305 [ 104 ] <Fatal> BaseDaemon: 3. ? @ 0xba40111 in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.047374 [ 104 ] <Fatal> BaseDaemon: 4. DB::DefaultExecutable::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x93efd5e in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.047439 [ 104 ] <Fatal> BaseDaemon: 5. DB::ExecutableFunctionAdaptor::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x941bbb0 in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.047510 [ 104 ] <Fatal> BaseDaemon: 6. DB::ExecutableFunctionAdaptor::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x941c251 in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.047581 [ 104 ] <Fatal> BaseDaemon: 7. DB::IFunctionBase::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x94238dd in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.047633 [ 104 ] <Fatal> BaseDaemon: 8. ? @ 0xd5ed41d in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.047683 [ 104 ] <Fatal> BaseDaemon: 9. DB::getDictionaryConfigurationFromAST(DB::ASTCreateQuery const&, DB::Context const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xd5e9bb0 in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.047746 [ 104 ] <Fatal> BaseDaemon: 10. DB::DatabaseWithDictionaries::createDictionary(DB::Context const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::IAST> const&) @ 0xda66115 in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.047809 [ 104 ] <Fatal> BaseDaemon: 11. DB::InterpreterCreateQuery::createDictionary(DB::ASTCreateQuery&) @ 0xdc3f2e4 in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.047864 [ 104 ] <Fatal> BaseDaemon: 12. DB::InterpreterCreateQuery::execute() @ 0xdc400af in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.047921 [ 104 ] <Fatal> BaseDaemon: 13. ? @ 0xe01ffe7 in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.047969 [ 104 ] <Fatal> BaseDaemon: 14. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0xe01ebbd in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.048030 [ 104 ] <Fatal> BaseDaemon: 15. DB::TCPHandler::runImpl() @ 0xe6f7f46 in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.048091 [ 104 ] <Fatal> BaseDaemon: 16. DB::TCPHandler::run() @ 0xe704447 in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.048150 [ 104 ] <Fatal> BaseDaemon: 17. Poco::Net::TCPServerConnection::start() @ 0x10eaec1f in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.048212 [ 104 ] <Fatal> BaseDaemon: 18. Poco::Net::TCPServerDispatcher::run() @ 0x10eb0631 in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.048252 [ 104 ] <Fatal> BaseDaemon: 19. Poco::PooledThread::run() @ 0x10fddc09 in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.048311 [ 104 ] <Fatal> BaseDaemon: 20. Poco::ThreadImpl::runnableEntry(void*) @ 0x10fd9b9a in /usr/bin/clickhouse\r\n[3d980a87c6db] 2021.02.17 10:27:10.048367 [ 104 ] <Fatal> BaseDaemon: 21. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n[3d980a87c6db] 2021.02.17 10:27:10.048424 [ 104 ] <Fatal> BaseDaemon: 22. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n```\r\n\r\n**Additional context**\r\nLooks like related to `hostName()` function, since both queries without it work just fine:\r\n``` SQL\r\nCREATE DICTIONARY ch_crash_test.dictionary (key UInt64, value UInt64) PRIMARY KEY key SOURCE(CLICKHOUSE(DB 'ch_crash_test' TABLE 'table' HOST 'localhost' PORT 9001)) LIFETIME(0) LAYOUT(FLAT());\r\nCREATE DICTIONARY ch_crash_test.dictionary (key UInt64, value UInt64) PRIMARY KEY key SOURCE(CLICKHOUSE(DB 'ch_crash_test' TABLE 'table' HOST 'localhost' PORT tcpPort())) LIFETIME(0) LAYOUT(FLAT());\r\n```\r\n\r\n\n",
  "hints_text": "@kitaisreal interested?\nNot reproducible on `20.11.6.6` Docker image:\r\n```\r\n# clickhouse client\r\nClickHouse client version 20.11.6.6 (official build).\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 20.11.6 revision 54442.\r\n\r\n02a1d090ddc9 :) CREATE DATABASE ch_crash_test;\r\n\r\nCREATE DATABASE ch_crash_test\r\n\r\nQuery id: fcb2007a-3506-4adc-8b6b-2414fbff688c\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.007 sec. \r\n\r\n02a1d090ddc9 :) CREATE TABLE ch_crash_test.table\r\n:-] (\r\n:-] i UInt8, s String\r\n:-] )\r\n:-] ENGINE = MergeTree PARTITION BY tuple() ORDER BY tuple();\r\n\r\nCREATE TABLE ch_crash_test.table\r\n(\r\n    `i` UInt8,\r\n    `s` String\r\n)\r\nENGINE = MergeTree\r\nPARTITION BY tuple()\r\nORDER BY tuple()\r\n\r\nQuery id: 447905c8-1871-4422-92c7-ea4b6abe01e0\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.009 sec. \r\n\r\n02a1d090ddc9 :) CREATE DICTIONARY ch_crash_test.dictionary (key UInt64, value UInt64) PRIMARY KEY key SOURCE(CLICKHOUSE(DB 'ch_crash_test' TABLE 'table' HOST hostName() PORT tcpPort())) LIFETIME(0) LAYOUT(FLAT());\r\n\r\nSyntax error: failed at position 151 ('('):\r\n\r\nCREATE DICTIONARY ch_crash_test.dictionary (key UInt64, value UInt64) PRIMARY KEY key SOURCE(CLICKHOUSE(DB 'ch_crash_test' TABLE 'table' HOST hostName() PORT tcpPort())) LIFETIME(0) LAYOUT(FLAT());\r\n\r\nExpected one of: identifier, nothing, key-value pair\r\n\r\n02a1d090ddc9 :) CREATE DICTIONARY ch_crash_test.dictionary (key UInt64, value UInt64) PRIMARY KEY key SOURCE(CLICKHOUSE(DB 'ch_crash_test' TABLE 'table' HOST 'localhost' PORT tcpPort())) LIFETIME(0) LAYOUT(FLAT());\r\n\r\nSyntax error: failed at position 167 ('('):\r\n\r\nCREATE DICTIONARY ch_crash_test.dictionary (key UInt64, value UInt64) PRIMARY KEY key SOURCE(CLICKHOUSE(DB 'ch_crash_test' TABLE 'table' HOST 'localhost' PORT tcpPort())) LIFETIME(0) LAYOUT(FLAT());\r\n\r\nExpected one of: identifier, nothing, key-value pair\r\n\r\n02a1d090ddc9 :) CREATE DICTIONARY ch_crash_test.dictionary (key UInt64, value UInt64) PRIMARY KEY key SOURCE(CLICKHOUSE(DB 'ch_crash_test' TABLE 'table' HOST 'localhost' PORT 9001)) LIFETIME(0) LAYOUT(FLAT());\r\n\r\nCREATE DICTIONARY ch_crash_test.dictionary\r\n(\r\n    `key` UInt64,\r\n    `value` UInt64\r\n)\r\nPRIMARY KEY key\r\nSOURCE(CLICKHOUSE(DB 'ch_crash_test' TABLE 'table' HOST 'localhost' PORT 9001))\r\nLIFETIME(MIN 0 MAX 0)\r\nLAYOUT(FLAT())\r\n\r\nQuery id: 00201a12-bf79-4c5b-8314-a932e8a6b73c\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.008 sec. \r\n\r\n02a1d090ddc9 :) \r\n```\nReproduces on 21.1, 21.2, 21.3.1.5944-testing\n@qoega as current dictionaries maintainer I will took this one.",
  "created_at": "2021-02-17T12:26:46Z",
  "modified_files": [
    "src/Dictionaries/getDictionaryConfigurationFromAST.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01720_dictionary_create_source_with_functions.reference",
    "b/tests/queries/0_stateless/01720_dictionary_create_source_with_functions.sql"
  ]
}