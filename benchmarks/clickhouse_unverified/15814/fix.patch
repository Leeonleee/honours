diff --git a/src/DataStreams/FilterBlockInputStream.cpp b/src/DataStreams/FilterBlockInputStream.cpp
deleted file mode 100644
index 83b36c97db77..000000000000
--- a/src/DataStreams/FilterBlockInputStream.cpp
+++ /dev/null
@@ -1,192 +0,0 @@
-#include <Columns/ColumnsNumber.h>
-#include <Columns/ColumnsCommon.h>
-#include <Columns/ColumnConst.h>
-#include <Columns/FilterDescription.h>
-#include <Interpreters/ExpressionActions.h>
-#include <Common/typeid_cast.h>
-
-#include <DataStreams/FilterBlockInputStream.h>
-
-
-namespace DB
-{
-
-namespace ErrorCodes
-{
-}
-
-
-FilterBlockInputStream::FilterBlockInputStream(const BlockInputStreamPtr & input, ExpressionActionsPtr expression_,
-                                               String filter_column_name_, bool remove_filter_)
-    : remove_filter(remove_filter_)
-    , expression(std::move(expression_))
-    , filter_column_name(std::move(filter_column_name_))
-{
-    children.push_back(input);
-
-    /// Determine position of filter column.
-    header = input->getHeader();
-    expression->execute(header);
-
-    filter_column = header.getPositionByName(filter_column_name);
-    auto & column_elem = header.safeGetByPosition(filter_column);
-
-    /// Isn't the filter already constant?
-    if (column_elem.column)
-        constant_filter_description = ConstantFilterDescription(*column_elem.column);
-
-    if (!constant_filter_description.always_false
-        && !constant_filter_description.always_true)
-    {
-        /// Replace the filter column to a constant with value 1.
-        FilterDescription filter_description_check(*column_elem.column);
-        column_elem.column = column_elem.type->createColumnConst(header.rows(), 1u);
-    }
-
-    if (remove_filter)
-        header.erase(filter_column_name);
-}
-
-
-String FilterBlockInputStream::getName() const { return "Filter"; }
-
-
-Block FilterBlockInputStream::getTotals()
-{
-    totals = children.back()->getTotals();
-    expression->execute(totals);
-
-    return totals;
-}
-
-
-Block FilterBlockInputStream::getHeader() const
-{
-    return header;
-}
-
-
-Block FilterBlockInputStream::readImpl()
-{
-    Block res;
-
-    if (constant_filter_description.always_false)
-        return removeFilterIfNeed(std::move(res));
-
-    if (expression->checkColumnIsAlwaysFalse(filter_column_name))
-        return {};
-
-    /// Until non-empty block after filtering or end of stream.
-    while (true)
-    {
-        res = children.back()->read();
-        if (!res)
-            return res;
-
-        expression->execute(res);
-
-        if (constant_filter_description.always_true)
-            return removeFilterIfNeed(std::move(res));
-
-        size_t columns = res.columns();
-        ColumnPtr column = res.safeGetByPosition(filter_column).column;
-
-        /** It happens that at the stage of analysis of expressions (in sample_block) the columns-constants have not been calculated yet,
-            *  and now - are calculated. That is, not all cases are covered by the code above.
-            * This happens if the function returns a constant for a non-constant argument.
-            * For example, `ignore` function.
-            */
-        constant_filter_description = ConstantFilterDescription(*column);
-
-        if (constant_filter_description.always_false)
-        {
-            res.clear();
-            return res;
-        }
-
-        if (constant_filter_description.always_true)
-            return removeFilterIfNeed(std::move(res));
-
-        FilterDescription filter_and_holder(*column);
-
-        /** Let's find out how many rows will be in result.
-          * To do this, we filter out the first non-constant column
-          *  or calculate number of set bytes in the filter.
-          */
-        size_t first_non_constant_column = 0;
-        for (size_t i = 0; i < columns; ++i)
-        {
-            if (!isColumnConst(*res.safeGetByPosition(i).column))
-            {
-                first_non_constant_column = i;
-
-                if (first_non_constant_column != static_cast<size_t>(filter_column))
-                    break;
-            }
-        }
-
-        size_t filtered_rows = 0;
-        if (first_non_constant_column != static_cast<size_t>(filter_column))
-        {
-            ColumnWithTypeAndName & current_column = res.safeGetByPosition(first_non_constant_column);
-            current_column.column = current_column.column->filter(*filter_and_holder.data, -1);
-            filtered_rows = current_column.column->size();
-        }
-        else
-        {
-            filtered_rows = countBytesInFilter(*filter_and_holder.data);
-        }
-
-        /// If the current block is completely filtered out, let's move on to the next one.
-        if (filtered_rows == 0)
-            continue;
-
-        /// If all the rows pass through the filter.
-        if (filtered_rows == filter_and_holder.data->size())
-        {
-            /// Replace the column with the filter by a constant.
-            res.safeGetByPosition(filter_column).column = res.safeGetByPosition(filter_column).type->createColumnConst(filtered_rows, 1u);
-            /// No need to touch the rest of the columns.
-            return removeFilterIfNeed(std::move(res));
-        }
-
-        /// Filter the rest of the columns.
-        for (size_t i = 0; i < columns; ++i)
-        {
-            ColumnWithTypeAndName & current_column = res.safeGetByPosition(i);
-
-            if (i == static_cast<size_t>(filter_column))
-            {
-                /// The column with filter itself is replaced with a column with a constant `1`, since after filtering, nothing else will remain.
-                /// NOTE User could pass column with something different than 0 and 1 for filter.
-                /// Example:
-                ///  SELECT materialize(100) AS x WHERE x
-                /// will work incorrectly.
-                current_column.column = current_column.type->createColumnConst(filtered_rows, 1u);
-                continue;
-            }
-
-            if (i == first_non_constant_column)
-                continue;
-
-            if (isColumnConst(*current_column.column))
-                current_column.column = current_column.column->cut(0, filtered_rows);
-            else
-                current_column.column = current_column.column->filter(*filter_and_holder.data, -1);
-        }
-
-        return removeFilterIfNeed(std::move(res));
-    }
-}
-
-
-Block FilterBlockInputStream::removeFilterIfNeed(Block && block) const
-{
-    if (block && remove_filter)
-        block.erase(static_cast<size_t>(filter_column));
-
-    return std::move(block);
-}
-
-
-}
diff --git a/src/DataStreams/FilterBlockInputStream.h b/src/DataStreams/FilterBlockInputStream.h
deleted file mode 100644
index a60f8e8d6990..000000000000
--- a/src/DataStreams/FilterBlockInputStream.h
+++ /dev/null
@@ -1,46 +0,0 @@
-#pragma once
-
-#include <DataStreams/IBlockInputStream.h>
-#include <Columns/FilterDescription.h>
-
-
-namespace DB
-{
-
-class ExpressionActions;
-
-
-/** Implements WHERE, HAVING operations.
-  * A stream of blocks and an expression, which adds to the block one ColumnUInt8 column containing the filtering conditions, are passed as input.
-  * The expression is evaluated and a stream of blocks is returned, which contains only the filtered rows.
-  */
-class FilterBlockInputStream : public IBlockInputStream
-{
-private:
-    using ExpressionActionsPtr = std::shared_ptr<ExpressionActions>;
-
-public:
-    FilterBlockInputStream(const BlockInputStreamPtr & input, ExpressionActionsPtr expression_,
-                           String filter_column_name_, bool remove_filter_ = false);
-
-    String getName() const override;
-    Block getTotals() override;
-    Block getHeader() const override;
-
-protected:
-    Block readImpl() override;
-
-    bool remove_filter;
-
-private:
-    ExpressionActionsPtr expression;
-    Block header;
-    String filter_column_name;
-    ssize_t filter_column;
-
-    ConstantFilterDescription constant_filter_description;
-
-    Block removeFilterIfNeed(Block && block) const;
-};
-
-}
diff --git a/src/DataStreams/OneBlockInputStream.h b/src/DataStreams/OneBlockInputStream.h
index 06f945b58038..d401082ce623 100644
--- a/src/DataStreams/OneBlockInputStream.h
+++ b/src/DataStreams/OneBlockInputStream.h
@@ -7,7 +7,6 @@ namespace DB
 {
 
 /** A stream of blocks from which you can read one block.
-  * Also see BlocksListBlockInputStream.
   */
 class OneBlockInputStream : public IBlockInputStream
 {
diff --git a/src/DataStreams/PushingToViewsBlockOutputStream.cpp b/src/DataStreams/PushingToViewsBlockOutputStream.cpp
index dc28d59b5324..3baa2b30c3fe 100644
--- a/src/DataStreams/PushingToViewsBlockOutputStream.cpp
+++ b/src/DataStreams/PushingToViewsBlockOutputStream.cpp
@@ -1,6 +1,7 @@
 #include <DataStreams/ConvertingBlockInputStream.h>
 #include <DataStreams/PushingToViewsBlockOutputStream.h>
 #include <DataStreams/SquashingBlockInputStream.h>
+#include <DataStreams/OneBlockInputStream.h>
 #include <DataTypes/NestedUtils.h>
 #include <Interpreters/InterpreterSelectQuery.h>
 #include <Interpreters/InterpreterInsertQuery.h>
diff --git a/src/DataStreams/PushingToViewsBlockOutputStream.h b/src/DataStreams/PushingToViewsBlockOutputStream.h
index ca09126a5612..18dc3ffd8009 100644
--- a/src/DataStreams/PushingToViewsBlockOutputStream.h
+++ b/src/DataStreams/PushingToViewsBlockOutputStream.h
@@ -2,7 +2,6 @@
 
 #include <DataStreams/copyData.h>
 #include <DataStreams/IBlockOutputStream.h>
-#include <DataStreams/OneBlockInputStream.h>
 #include <DataStreams/MaterializingBlockInputStream.h>
 #include <Storages/StorageMaterializedView.h>
 
diff --git a/src/DataStreams/ya.make b/src/DataStreams/ya.make
index 636224678d77..0c46e42d4565 100644
--- a/src/DataStreams/ya.make
+++ b/src/DataStreams/ya.make
@@ -25,7 +25,6 @@ SRCS(
     DistinctSortedBlockInputStream.cpp
     ExecutionSpeedLimits.cpp
     ExpressionBlockInputStream.cpp
-    FilterBlockInputStream.cpp
     finalizeBlock.cpp
     IBlockInputStream.cpp
     InputStreamFromASTInsertQuery.cpp
diff --git a/src/Interpreters/ActionsVisitor.cpp b/src/Interpreters/ActionsVisitor.cpp
index 344107366054..e0e921b003bb 100644
--- a/src/Interpreters/ActionsVisitor.cpp
+++ b/src/Interpreters/ActionsVisitor.cpp
@@ -15,8 +15,6 @@
 #include <DataTypes/DataTypeLowCardinality.h>
 #include <DataTypes/FieldToDataType.h>
 
-#include <DataStreams/LazyBlockInputStream.h>
-
 #include <Columns/ColumnSet.h>
 #include <Columns/ColumnConst.h>
 
diff --git a/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp b/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp
index ed7bd2cf71fc..c642b84afca8 100644
--- a/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp
+++ b/src/Interpreters/ClusterProxy/SelectStreamFactory.cpp
@@ -97,7 +97,6 @@ auto createLocalPipe(
     /* Now we don't need to materialize constants, because RemoteBlockInputStream will ignore constant and take it from header.
      * So, streams from different threads will always have the same header.
      */
-    /// return std::make_shared<MaterializingBlockInputStream>(stream);
 
     pipeline.setMaxThreads(1);
     return QueryPipeline::getPipe(std::move(pipeline));
diff --git a/src/Interpreters/InterpreterWatchQuery.cpp b/src/Interpreters/InterpreterWatchQuery.cpp
index 30316a2dd791..757a2d1738b4 100644
--- a/src/Interpreters/InterpreterWatchQuery.cpp
+++ b/src/Interpreters/InterpreterWatchQuery.cpp
@@ -16,7 +16,6 @@ limitations under the License. */
 #include <Interpreters/Context.h>
 #include <Access/AccessFlags.h>
 #include <DataStreams/IBlockInputStream.h>
-#include <DataStreams/OneBlockInputStream.h>
 #include <DataStreams/StreamLocalLimits.h>
 
 
diff --git a/src/Interpreters/JoinSwitcher.h b/src/Interpreters/JoinSwitcher.h
index 23f5dff54d7a..1fd719cd5dc9 100644
--- a/src/Interpreters/JoinSwitcher.h
+++ b/src/Interpreters/JoinSwitcher.h
@@ -5,7 +5,8 @@
 #include <Core/Block.h>
 #include <Interpreters/IJoin.h>
 #include <Interpreters/TableJoin.h>
-#include <DataStreams/OneBlockInputStream.h>
+#include <DataStreams/IBlockInputStream.h>
+
 
 namespace DB
 {
diff --git a/src/Interpreters/MergeJoin.cpp b/src/Interpreters/MergeJoin.cpp
index c9072ec34804..665ec4d60f3b 100644
--- a/src/Interpreters/MergeJoin.cpp
+++ b/src/Interpreters/MergeJoin.cpp
@@ -10,12 +10,12 @@
 #include <DataStreams/materializeBlock.h>
 #include <DataStreams/TemporaryFileStream.h>
 #include <Processors/Sources/SourceFromInputStream.h>
-#include <DataStreams/OneBlockInputStream.h>
 #include <Processors/QueryPipeline.h>
 #include <Processors/Transforms/MergeSortingTransform.h>
 #include <Processors/Executors/PipelineExecutingBlockInputStream.h>
 #include <DataStreams/BlocksListBlockInputStream.h>
 
+
 namespace DB
 {
 
diff --git a/src/Interpreters/SubqueryForSet.cpp b/src/Interpreters/SubqueryForSet.cpp
index 17ea813c545c..6ca0ecc50c82 100644
--- a/src/Interpreters/SubqueryForSet.cpp
+++ b/src/Interpreters/SubqueryForSet.cpp
@@ -3,7 +3,7 @@
 #include <Interpreters/IJoin.h>
 #include <Interpreters/MergeJoin.h>
 #include <Interpreters/ExpressionActions.h>
-#include <DataStreams/LazyBlockInputStream.h>
+
 
 namespace DB
 {
diff --git a/src/Processors/Merges/Algorithms/SummingSortedAlgorithm.cpp b/src/Processors/Merges/Algorithms/SummingSortedAlgorithm.cpp
index 080dbc00c2c0..17e5e4364ffd 100644
--- a/src/Processors/Merges/Algorithms/SummingSortedAlgorithm.cpp
+++ b/src/Processors/Merges/Algorithms/SummingSortedAlgorithm.cpp
@@ -440,7 +440,7 @@ static void setRow(Row & row, const ColumnRawPtrs & raw_columns, size_t row_num,
             if (i < column_names.size())
                 column_name = column_names[i];
 
-            throw Exception("MergingSortedBlockInputStream failed to read row " + toString(row_num)
+            throw Exception("SummingSortedAlgorithm failed to read row " + toString(row_num)
                             + " of column " + toString(i) + (column_name.empty() ? "" : " (" + column_name + ")"),
                             ErrorCodes::CORRUPTED_DATA);
         }
diff --git a/src/Storages/Kafka/StorageKafka.cpp b/src/Storages/Kafka/StorageKafka.cpp
index 02b34c6b3f26..a63a43097753 100644
--- a/src/Storages/Kafka/StorageKafka.cpp
+++ b/src/Storages/Kafka/StorageKafka.cpp
@@ -2,7 +2,6 @@
 #include <Storages/Kafka/parseSyslogLevel.h>
 
 #include <DataStreams/IBlockInputStream.h>
-#include <DataStreams/LimitBlockInputStream.h>
 #include <DataStreams/UnionBlockInputStream.h>
 #include <DataStreams/copyData.h>
 #include <DataTypes/DataTypeDateTime.h>
diff --git a/src/Storages/LiveView/LiveViewEventsBlockInputStream.h b/src/Storages/LiveView/LiveViewEventsBlockInputStream.h
index 4060b17c1ede..0df78b981b97 100644
--- a/src/Storages/LiveView/LiveViewEventsBlockInputStream.h
+++ b/src/Storages/LiveView/LiveViewEventsBlockInputStream.h
@@ -16,7 +16,6 @@ limitations under the License. */
 #include <DataTypes/DataTypeString.h>
 #include <Columns/ColumnString.h>
 #include <Columns/ColumnsNumber.h>
-#include <DataStreams/OneBlockInputStream.h>
 #include <DataStreams/IBlockInputStream.h>
 #include <Storages/LiveView/StorageLiveView.h>
 
diff --git a/src/Storages/LiveView/StorageLiveView.cpp b/src/Storages/LiveView/StorageLiveView.cpp
index 7095357a161e..33fb1f4e2fab 100644
--- a/src/Storages/LiveView/StorageLiveView.cpp
+++ b/src/Storages/LiveView/StorageLiveView.cpp
@@ -16,7 +16,6 @@ limitations under the License. */
 #include <Interpreters/Context.h>
 #include <Interpreters/InterpreterSelectQuery.h>
 #include <DataStreams/IBlockOutputStream.h>
-#include <DataStreams/OneBlockInputStream.h>
 #include <DataStreams/BlocksSource.h>
 #include <DataStreams/MaterializingBlockInputStream.h>
 #include <DataStreams/SquashingBlockInputStream.h>
diff --git a/src/Storages/RabbitMQ/StorageRabbitMQ.cpp b/src/Storages/RabbitMQ/StorageRabbitMQ.cpp
index 78aad9e6a2d6..6565afeb32de 100644
--- a/src/Storages/RabbitMQ/StorageRabbitMQ.cpp
+++ b/src/Storages/RabbitMQ/StorageRabbitMQ.cpp
@@ -1,7 +1,6 @@
 #include <Storages/RabbitMQ/StorageRabbitMQ.h>
 #include <DataStreams/IBlockInputStream.h>
 #include <DataStreams/ConvertingBlockInputStream.h>
-#include <DataStreams/LimitBlockInputStream.h>
 #include <DataStreams/UnionBlockInputStream.h>
 #include <DataStreams/copyData.h>
 #include <DataTypes/DataTypeDateTime.h>
diff --git a/src/Storages/StorageDistributed.cpp b/src/Storages/StorageDistributed.cpp
index b06434b63172..81815be7afb9 100644
--- a/src/Storages/StorageDistributed.cpp
+++ b/src/Storages/StorageDistributed.cpp
@@ -1,7 +1,5 @@
 #include <Storages/StorageDistributed.h>
 
-#include <DataStreams/OneBlockInputStream.h>
-
 #include <Databases/IDatabase.h>
 #include <Disks/StoragePolicy.h>
 #include <Disks/DiskLocal.h>
diff --git a/src/Storages/StorageFile.cpp b/src/Storages/StorageFile.cpp
index 8f7e1563a629..63b38a6e0260 100644
--- a/src/Storages/StorageFile.cpp
+++ b/src/Storages/StorageFile.cpp
@@ -17,7 +17,6 @@
 #include <DataStreams/IBlockInputStream.h>
 #include <DataStreams/IBlockOutputStream.h>
 #include <DataStreams/AddingDefaultsBlockInputStream.h>
-#include <DataStreams/narrowBlockInputStreams.h>
 
 #include <Common/escapeForFileName.h>
 #include <Common/typeid_cast.h>
diff --git a/src/Storages/StorageHDFS.cpp b/src/Storages/StorageHDFS.cpp
index 65b1eed7793b..1d72107bc7bf 100644
--- a/src/Storages/StorageHDFS.cpp
+++ b/src/Storages/StorageHDFS.cpp
@@ -17,7 +17,6 @@
 #include <DataStreams/IBlockOutputStream.h>
 #include <DataStreams/OwningBlockInputStream.h>
 #include <DataStreams/IBlockInputStream.h>
-#include <DataStreams/narrowBlockInputStreams.h>
 
 #include <Common/parseGlobs.h>
 #include <Poco/URI.h>
diff --git a/src/Storages/StorageNull.h b/src/Storages/StorageNull.h
index b5387c6b924c..44dbda3b15df 100644
--- a/src/Storages/StorageNull.h
+++ b/src/Storages/StorageNull.h
@@ -4,7 +4,6 @@
 
 #include <Core/NamesAndTypes.h>
 #include <Storages/IStorage.h>
-#include <DataStreams/NullBlockInputStream.h>
 #include <DataStreams/NullBlockOutputStream.h>
 #include <Processors/Sources/NullSource.h>
 #include <Processors/Pipe.h>
diff --git a/src/Storages/StorageReplicatedMergeTree.cpp b/src/Storages/StorageReplicatedMergeTree.cpp
index bfb61f163eeb..2ac8ddb7846c 100644
--- a/src/Storages/StorageReplicatedMergeTree.cpp
+++ b/src/Storages/StorageReplicatedMergeTree.cpp
@@ -47,7 +47,6 @@
 #include <Interpreters/Context.h>
 
 #include <DataStreams/RemoteBlockInputStream.h>
-#include <DataStreams/NullBlockOutputStream.h>
 #include <DataStreams/copyData.h>
 
 #include <Poco/DirectoryIterator.h>
diff --git a/src/Storages/StorageStripeLog.cpp b/src/Storages/StorageStripeLog.cpp
index c4344cf6f1fd..d24c171caa57 100644
--- a/src/Storages/StorageStripeLog.cpp
+++ b/src/Storages/StorageStripeLog.cpp
@@ -18,7 +18,6 @@
 #include <DataStreams/IBlockOutputStream.h>
 #include <DataStreams/NativeBlockInputStream.h>
 #include <DataStreams/NativeBlockOutputStream.h>
-#include <DataStreams/NullBlockInputStream.h>
 
 #include <DataTypes/DataTypeFactory.h>
 
diff --git a/src/Storages/StorageValues.cpp b/src/Storages/StorageValues.cpp
index a07d49fd3f82..140a3c62eae5 100644
--- a/src/Storages/StorageValues.cpp
+++ b/src/Storages/StorageValues.cpp
@@ -1,7 +1,6 @@
 #include <Storages/IStorage.h>
 #include <Storages/ColumnsDescription.h>
 #include <Storages/StorageValues.h>
-#include <DataStreams/OneBlockInputStream.h>
 #include <Processors/Sources/SourceFromSingleChunk.h>
 #include <Processors/Pipe.h>
 
diff --git a/src/Storages/System/StorageSystemColumns.cpp b/src/Storages/System/StorageSystemColumns.cpp
index 8a7368d5ace7..17378f8d6bf9 100644
--- a/src/Storages/System/StorageSystemColumns.cpp
+++ b/src/Storages/System/StorageSystemColumns.cpp
@@ -5,7 +5,6 @@
 #include <Columns/ColumnString.h>
 #include <DataTypes/DataTypeString.h>
 #include <DataTypes/DataTypesNumber.h>
-#include <DataStreams/NullBlockInputStream.h>
 #include <Storages/VirtualColumnUtils.h>
 #include <Parsers/queryToString.h>
 #include <Parsers/ASTSelectQuery.h>
diff --git a/src/Storages/System/StorageSystemDetachedParts.cpp b/src/Storages/System/StorageSystemDetachedParts.cpp
index 5a233ed7a33b..bc5b3593991a 100644
--- a/src/Storages/System/StorageSystemDetachedParts.cpp
+++ b/src/Storages/System/StorageSystemDetachedParts.cpp
@@ -3,7 +3,6 @@
 #include <DataTypes/DataTypeString.h>
 #include <DataTypes/DataTypesNumber.h>
 #include <DataTypes/DataTypeNullable.h>
-#include <DataStreams/OneBlockInputStream.h>
 #include <ext/shared_ptr_helper.h>
 #include <Storages/IStorage.h>
 #include <Storages/System/StorageSystemPartsBase.h>
diff --git a/src/Storages/System/StorageSystemDisks.cpp b/src/Storages/System/StorageSystemDisks.cpp
index ed831927f161..4e9a654025af 100644
--- a/src/Storages/System/StorageSystemDisks.cpp
+++ b/src/Storages/System/StorageSystemDisks.cpp
@@ -1,4 +1,3 @@
-#include <DataStreams/OneBlockInputStream.h>
 #include <Storages/System/StorageSystemDisks.h>
 #include <Processors/Sources/SourceFromSingleChunk.h>
 #include <Interpreters/Context.h>
diff --git a/src/Storages/System/StorageSystemMutations.cpp b/src/Storages/System/StorageSystemMutations.cpp
index 04dc8f1024ae..32f672b84017 100644
--- a/src/Storages/System/StorageSystemMutations.cpp
+++ b/src/Storages/System/StorageSystemMutations.cpp
@@ -3,7 +3,6 @@
 #include <DataTypes/DataTypesNumber.h>
 #include <DataTypes/DataTypeDateTime.h>
 #include <DataTypes/DataTypeArray.h>
-#include <DataStreams/OneBlockInputStream.h>
 #include <Storages/MergeTree/MergeTreeData.h>
 #include <Storages/MergeTree/MergeTreeMutationStatus.h>
 #include <Storages/VirtualColumnUtils.h>
diff --git a/src/Storages/System/StorageSystemParts.cpp b/src/Storages/System/StorageSystemParts.cpp
index 06171fc39ba9..757aea661e2d 100644
--- a/src/Storages/System/StorageSystemParts.cpp
+++ b/src/Storages/System/StorageSystemParts.cpp
@@ -7,7 +7,6 @@
 #include <DataTypes/DataTypesNumber.h>
 #include <DataTypes/DataTypeDateTime.h>
 #include <DataTypes/DataTypeDate.h>
-#include <DataStreams/OneBlockInputStream.h>
 #include <Storages/VirtualColumnUtils.h>
 #include <Databases/IDatabase.h>
 #include <Parsers/queryToString.h>
diff --git a/src/Storages/System/StorageSystemPartsBase.cpp b/src/Storages/System/StorageSystemPartsBase.cpp
index f590244116d7..faa2ec0e1c33 100644
--- a/src/Storages/System/StorageSystemPartsBase.cpp
+++ b/src/Storages/System/StorageSystemPartsBase.cpp
@@ -6,7 +6,6 @@
 #include <DataTypes/DataTypesNumber.h>
 #include <DataTypes/DataTypeDateTime.h>
 #include <DataTypes/DataTypeDate.h>
-#include <DataStreams/OneBlockInputStream.h>
 #include <Storages/MergeTree/MergeTreeData.h>
 #include <Storages/VirtualColumnUtils.h>
 #include <Access/ContextAccess.h>
diff --git a/src/Storages/System/StorageSystemPartsColumns.cpp b/src/Storages/System/StorageSystemPartsColumns.cpp
index 0851e389e4fd..c570cc85e8bb 100644
--- a/src/Storages/System/StorageSystemPartsColumns.cpp
+++ b/src/Storages/System/StorageSystemPartsColumns.cpp
@@ -6,7 +6,6 @@
 #include <DataTypes/DataTypesNumber.h>
 #include <DataTypes/DataTypeDateTime.h>
 #include <DataTypes/DataTypeDate.h>
-#include <DataStreams/OneBlockInputStream.h>
 #include <Storages/VirtualColumnUtils.h>
 #include <Databases/IDatabase.h>
 #include <Parsers/queryToString.h>
diff --git a/src/Storages/System/StorageSystemReplicas.cpp b/src/Storages/System/StorageSystemReplicas.cpp
index f28ecdb7f653..7ab6e939815d 100644
--- a/src/Storages/System/StorageSystemReplicas.cpp
+++ b/src/Storages/System/StorageSystemReplicas.cpp
@@ -2,7 +2,6 @@
 #include <DataTypes/DataTypeString.h>
 #include <DataTypes/DataTypesNumber.h>
 #include <DataTypes/DataTypeDateTime.h>
-#include <DataStreams/OneBlockInputStream.h>
 #include <Storages/System/StorageSystemReplicas.h>
 #include <Storages/StorageReplicatedMergeTree.h>
 #include <Storages/VirtualColumnUtils.h>
diff --git a/src/Storages/System/StorageSystemStoragePolicies.cpp b/src/Storages/System/StorageSystemStoragePolicies.cpp
index c8d266644ebe..415e7ce2c783 100644
--- a/src/Storages/System/StorageSystemStoragePolicies.cpp
+++ b/src/Storages/System/StorageSystemStoragePolicies.cpp
@@ -2,7 +2,6 @@
 
 #include <Columns/ColumnArray.h>
 #include <Columns/ColumnNullable.h>
-#include <DataStreams/OneBlockInputStream.h>
 #include <DataTypes/DataTypeArray.h>
 #include <DataTypes/DataTypeNullable.h>
 #include <Processors/Sources/SourceFromSingleChunk.h>
diff --git a/src/Storages/System/StorageSystemTables.cpp b/src/Storages/System/StorageSystemTables.cpp
index 0ad961ad7d86..78a6ef9b1e0c 100644
--- a/src/Storages/System/StorageSystemTables.cpp
+++ b/src/Storages/System/StorageSystemTables.cpp
@@ -3,7 +3,6 @@
 #include <DataTypes/DataTypeString.h>
 #include <DataTypes/DataTypeDateTime.h>
 #include <DataTypes/DataTypeNullable.h>
-#include <DataStreams/OneBlockInputStream.h>
 #include <Storages/System/StorageSystemTables.h>
 #include <Storages/VirtualColumnUtils.h>
 #include <Databases/IDatabase.h>
