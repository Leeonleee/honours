You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Memory limit exceeded with new analyzer
Hello!
I prepared a minimal reproducible example of the problem (tested on 24.3.1.2672):
```sql
WITH
    groupArray(count) AS counts,
    arrayMap(x -> (x + 1), counts) AS some_metric,
    arrayMap(x -> (x / arraySum(some_metric)), some_metric) AS res
SELECT arrayJoin(res) AS result
FROM
(
    SELECT *
    FROM generateRandom('count UInt8')
    LIMIT 1000000
)
FORMAT `Null`
SETTINGS allow_experimental_analyzer = 0
```
```
0 rows in set. Elapsed: 0.045 sec. Processed 1.31 million rows, 1.31 MB (29.08 million rows/s., 29.08 MB/s.)
Peak memory usage: 16.75 MiB.
```

But new analyzer needs a way more RAM to handle the same query:
```sql
WITH
    groupArray(count) AS counts,
    arrayMap(x -> (x + 1), counts) AS some_metric,
    arrayMap(x -> (x / arraySum(some_metric)), some_metric) AS res
SELECT arrayJoin(res) AS result
FROM
(
    SELECT *
    FROM generateRandom('count UInt8')
    LIMIT 1000000
)
FORMAT `Null`
SETTINGS allow_experimental_analyzer = 1
```
```
Elapsed: 0.023 sec. 

Received exception from server (version 24.3.1):
Code: 241. DB::Exception: Received from localhost:9000. DB::Exception:
Memory limit (total) exceeded: would use 932.93 GiB (attempt to allocate chunk of 1000003273111 bytes), maximum: 27.93 GiB. OvercommitTracker decision: Query was selected to stop by OvercommitTracker.: while executing 'FUNCTION arrayMap(__lambda_8141180715573801285_17054877471657376131 :: 2, arrayMap(__lambda_14042983518542017256_6366473326654511736, groupArray(__table1.count)) :: 1) -> arrayMap(__lambda_8141180715573801285_17054877471657376131, arrayMap(__lambda_14042983518542017256_6366473326654511736, groupArray(__table1.count))) Array(Float64) : 0'. (MEMORY_LIMIT_EXCEEDED)
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
