diff --git a/tests/integration/helpers/proxy1.py b/tests/integration/helpers/proxy1.py
new file mode 100644
index 000000000000..f6ccc7b677ab
--- /dev/null
+++ b/tests/integration/helpers/proxy1.py
@@ -0,0 +1,82 @@
+import socket
+import threading
+
+
+# simple one-connection proxy with PROXY v1 protocol
+# https://www.haproxy.org/download/1.8/doc/proxy-protocol.txt
+class Proxy1:
+    def __init__(self, proxy_string=""):
+        self._proxy_string = proxy_string
+
+    def _run(self):
+        self._server, addr = self._sock.accept()
+        self._sock.close()
+        self._client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+        self._client.bind(("", 0))
+        self._client.connect(self._address)
+        self._client.send("PROXY ".encode("utf-8"))
+        if self._proxy_string == "":
+            self._client.send(
+                (
+                    "TCP4 "
+                    + addr[0]
+                    + " "
+                    + self._address[0]
+                    + " "
+                    + str(addr[1])
+                    + " "
+                    + str(self._address[1])
+                ).encode("utf-8")
+            )
+        else:
+            self._client.send(self._proxy_string.encode("utf-8"))
+        self._client.send("\r
".encode("utf-8"))
+
+        def forward(source: socket.socket, destination: socket.socket):
+            while True:
+                try:
+                    data = source.recv(4096)
+                    if not data:
+                        destination.shutdown(socket.SHUT_WR)
+                        source.shutdown(socket.SHUT_RD)
+                        break
+                    destination.sendall(data)
+                except Exception:
+                    break
+
+        client_to_server_thread = threading.Thread(
+            target=forward, args=(self._client, self._server)
+        )
+        server_to_client_thread = threading.Thread(
+            target=forward, args=(self._server, self._client)
+        )
+
+        client_to_server_thread.start()
+        server_to_client_thread.start()
+        client_to_server_thread.join()
+        server_to_client_thread.join()
+
+        self._client.close()
+        self._server.close()
+
+    def start(self, address):
+        self._address = address
+        self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+        self._sock.bind(("", 0))
+        self._sock.listen(1)
+        self._runner = threading.Thread(target=self._run)
+        self._runner.start()
+        return self._sock.getsockname()[1]
+
+    def wait(self):
+        if self._runner:
+            self._runner.join()
+
+    def stop(self):
+        if self._sock:
+            self._sock.close()
+        if self._client:
+            self._client.close()
+        if self._server:
+            self._server.close()
+        self.wait()
diff --git a/tests/integration/test_composable_protocols/configs/config.xml b/tests/integration/test_composable_protocols/configs/config.xml
index 7d39363bc621..c292df912cfb 100644
--- a/tests/integration/test_composable_protocols/configs/config.xml
+++ b/tests/integration/test_composable_protocols/configs/config.xml
@@ -83,4 +83,9 @@
     <!--tcp_port>9010</tcp_port--> 
 
     <validate_tcp_client_information>true</validate_tcp_client_information>
+
+    <query_log>
+        <database>system</database>
+        <table>query_log</table>
+    </query_log>
 </clickhouse>
diff --git a/tests/integration/test_composable_protocols/test.py b/tests/integration/test_composable_protocols/test.py
index 5748f22b8452..cd791c586640 100644
--- a/tests/integration/test_composable_protocols/test.py
+++ b/tests/integration/test_composable_protocols/test.py
@@ -11,6 +11,7 @@
 
 from helpers.client import Client
 from helpers.cluster import ClickHouseCluster
+from helpers.proxy1 import Proxy1
 
 SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
 
@@ -147,26 +148,54 @@ def test_connections():
         == "1
"
     )
 
-    data = "PROXY TCP4 255.255.255.255 255.255.255.255 65535 65535\r
\0\021ClickHouse client\024\r\253\251\003\0\007default\0\004\001\0\001\0\0\t0.0.0.0:0\001\tmilovidov\021milovidov-desktop\21ClickHouse client\024\r\253\251\003\0\001\0\0\0\002\001\025SELECT 'Hello, world'\002\0\247\203\254l\325\\z|\265\254F\275\333\206\342\024\202\024\0\0\0
\0\0\0\240\01\0\02\377\377\377\377\0\0\0"
+
+# tests when using PROXYv1 with enabled auth_use_forwarded_address that forwarded address is used for authentication and query's source address
+def test_proxy_1():
+
+    # default user
+    proxy = Proxy1("TCP4 123.231.132.213 255.255.255.255 12345 65535")
+    proxy_client = Client(
+        "localhost",
+        proxy.start((server.ip_address, 9100)),
+        command=cluster.client_bin_path,
+    )
+    query_id = proxy_client.query("SELECT currentQueryID()")[:-1]
+    cluster.instances["server"].query("SYSTEM FLUSH LOGS")
+    client = Client(server.ip_address, 9000, command=cluster.client_bin_path)
     assert (
-        netcat(server.ip_address, 9100, bytearray(data, "latin-1")).find(
-            bytearray("Hello, world", "latin-1")
+        client.query(
+            f"SELECT forwarded_for, address, port, initial_address, initial_port FROM system.query_log WHERE query_id = '{query_id}' AND type = 'QueryStart'"
         )
-        >= 0
+        == "123.231.132.213:12345\t::ffff:123.231.132.213\t12345\t::ffff:123.231.132.213\t12345
"
     )
 
-    data_user_allowed = "PROXY TCP4 123.123.123.123 255.255.255.255 65535 65535\r
\0\021ClickHouse client\024\r\253\251\003\0\007user123\0\004\001\0\001\0\0\t0.0.0.0:0\001\tmilovidov\021milovidov-desktop\21ClickHouse client\024\r\253\251\003\0\001\0\0\0\002\001\025SELECT 'Hello, world'\002\0\247\203\254l\325\\z|\265\254F\275\333\206\342\024\202\024\0\0\0
\0\0\0\240\01\0\02\377\377\377\377\0\0\0"
+    # user123 only allowed from 123.123.123.123
+    proxy = Proxy1("TCP4 123.123.123.123 255.255.255.255 12345 65535")
+    proxy_client = Client(
+        "localhost",
+        proxy.start((server.ip_address, 9100)),
+        command=cluster.client_bin_path,
+    )
+    query_id = proxy_client.query("SELECT currentQueryID()", user="user123")[:-1]
+    cluster.instances["server"].query("SYSTEM FLUSH LOGS")
+    client = Client(server.ip_address, 9000, command=cluster.client_bin_path)
     assert (
-        netcat(server.ip_address, 9100, bytearray(data_user_allowed, "latin-1")).find(
-            bytearray("Hello, world", "latin-1")
+        client.query(
+            f"SELECT forwarded_for, address, port, initial_address, initial_port FROM system.query_log WHERE query_id = '{query_id}' AND type = 'QueryStart'"
         )
-        >= 0
+        == "123.123.123.123:12345\t::ffff:123.123.123.123\t12345\t::ffff:123.123.123.123\t12345
"
     )
 
-    data_user_restricted = "PROXY TCP4 127.0.0.1 255.255.255.255 65535 65535\r
\0\021ClickHouse client\024\r\253\251\003\0\007user123\0\004\001\0\001\0\0\t0.0.0.0:0\001\tmilovidov\021milovidov-desktop\21ClickHouse client\024\r\253\251\003\0\001\0\0\0\002\001\025SELECT 'Hello, world'\002\0\247\203\254l\325\\z|\265\254F\275\333\206\342\024\202\024\0\0\0
\0\0\0\240\01\0\02\377\377\377\377\0\0\0"
-    assert (
-        netcat(
-            server.ip_address, 9100, bytearray(data_user_restricted, "latin-1")
-        ).find(bytearray("Exception: user123: Authentication failed", "latin-1"))
-        >= 0
+    # user123 is not allowed from other than 123.123.123.123
+    proxy = Proxy1("TCP4 127.0.0.1 255.255.255.255 12345 65535")
+    proxy_client = Client(
+        "localhost",
+        proxy.start((server.ip_address, 9100)),
+        command=cluster.client_bin_path,
     )
+    try:
+        proxy_client.query("SELECT currentQueryID()", user="user123")
+    except Exception as e:
+        assert str(e).find("Exception: user123: Authentication failed") >= 0
+    else:
+        assert False, "Expected 'Exception: user123: Authentication failed'"
