{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 82877,
  "instance_id": "ClickHouse__ClickHouse-82877",
  "issue_numbers": [
    "82599"
  ],
  "base_commit": "9e0f0440f5fa9de3e09c35e40941f174a4c65cac",
  "patch": "diff --git a/src/Planner/PlannerWindowFunctions.cpp b/src/Planner/PlannerWindowFunctions.cpp\nindex 29c190b45ad2..4d8584e1f37e 100644\n--- a/src/Planner/PlannerWindowFunctions.cpp\n+++ b/src/Planner/PlannerWindowFunctions.cpp\n@@ -139,7 +139,7 @@ extractWindowDescriptions(const QueryTreeNodes & window_function_nodes, const Pl\n \n void sortWindowDescriptions(std::vector<WindowDescription> & window_descriptions)\n {\n-    auto window_description_comparator = [](const WindowDescription & lhs, const WindowDescription & rhs)\n+    auto window_description_comparator = [](const WindowDescription & lhs, const WindowDescription & rhs) -> bool\n     {\n         const auto & left = lhs.full_sort_description;\n         const auto & right = rhs.full_sort_description;\n@@ -159,6 +159,18 @@ void sortWindowDescriptions(std::vector<WindowDescription> & window_descriptions\n             if (left[i].nulls_direction > right[i].nulls_direction)\n                 return false;\n \n+            if (left[i].collator || right[i].collator)\n+            {\n+                if (!left[i].collator)\n+                    return true;\n+                if (!right[i].collator)\n+                    return false;\n+                if (left[i].collator->getLocale() < right[i].collator->getLocale())\n+                    return true;\n+                if (left[i].collator->getLocale() > right[i].collator->getLocale())\n+                    return false;\n+            }\n+\n             assert(left[i] == right[i]);\n         }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03549_window_collation.reference b/tests/queries/0_stateless/03549_window_collation.reference\nnew file mode 100644\nindex 000000000000..98fb6a686563\n--- /dev/null\n+++ b/tests/queries/0_stateless/03549_window_collation.reference\n@@ -0,0 +1,4 @@\n+1\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/03549_window_collation.sql b/tests/queries/0_stateless/03549_window_collation.sql\nnew file mode 100644\nindex 000000000000..6567d4ca993b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03549_window_collation.sql\n@@ -0,0 +1,9 @@\n+-- Tags: no-fasttest\n+-- no-fasttest - collations support is disabled for fasttest build\n+\n+set enable_analyzer = 1;\n+\n+SELECT rank() OVER (ORDER BY c0) FROM (SELECT '1' c0) v0 QUALIFY rank() OVER (ORDER BY c0 COLLATE 'vi') > 0;\n+SELECT rank() OVER (ORDER BY c0 COLLATE 'vi') FROM (SELECT '1' c0) v0 QUALIFY rank() OVER (ORDER BY c0 COLLATE 'vi') > 0;\n+SELECT rank() OVER (ORDER BY c0) FROM (SELECT '1' c0) v0 QUALIFY rank() OVER (ORDER BY c0) > 0;\n+SELECT rank() OVER (ORDER BY c0 DESC COLLATE 'vi') FROM (SELECT '1' c0) v0 QUALIFY rank() OVER (ORDER BY c0 ASC COLLATE 'vi') > 0;\n",
  "problem_statement": "Window function planning assertion failure\n### Describe the bug\n\nEasy to reproduce. The collation seems to be the root cause of the issue. The `QUALIFY` clause is available only in the new analyzer, so is it related to it?\n\n### How to reproduce\n\nOn a debug build with assertions enabled, run:\n\n```sql\nSELECT rank() OVER (ORDER BY c0) FROM (SELECT '1' c0) v0 QUALIFY rank() OVER (ORDER BY c0 COLLATE 'vi') > 0;\n/*\nsrc/Planner/PlannerWindowFunctions.cpp:162:\nauto DB::sortWindowDescriptions(std::vector<WindowDescription> &)::(anonymous class)::operator()(const WindowDescription &, const WindowDescription &) const:\nAssertion `left[i] == right[i]' failed\n*/\n```\n\n### Error message and/or stacktrace\n\nStack trace:\n\n```\n2025.06.25 14:45:07.624573 [ 436418 ] {} <Fatal> BaseDaemon: ########################################\n2025.06.25 14:45:07.624640 [ 436418 ] {} <Fatal> BaseDaemon: (version 25.7.1.1172 (official build), build id: B3EF0CBFD10F919CE1CE4080288532677F7E2387, git hash: d9934019911191bb4ad612b4fc12afbdea0ea1f0) (from thread 435705) (query_id: f42f81ef-4926-4ee3-9c13-ba55487c1efd) (query: SELECT rank() OVER (ORDER BY c0) FROM (SELECT '1' c0) v0 QUALIFY rank() OVER (ORDER BY c0 COLLATE 'vi') > 0;) Received signal Aborted (6)\n2025.06.25 14:45:07.624681 [ 436418 ] {} <Fatal> BaseDaemon: \n2025.06.25 14:45:07.624708 [ 436418 ] {} <Fatal> BaseDaemon: Stack trace: 0x00007f0d400a50bd 0x00007f0d400456de 0x00007f0d400288cd 0x00007f0d40028830 0x00005783169cdce7 0x00005783169cc809 0x0000578316966a95 0x00005783169614f3 0x000057831726e2ed 0x00005783175479b9 0x0000578317542371 0x0000578319304b52 0x000057831931e184 0x000057831d642f27 0x000057831d643425 0x000057831d5eb91f 0x000057831d5e94d1 0x00007f0d400a2ef1 0x00007f0d4013445c\n2025.06.25 14:45:07.624760 [ 436418 ] {} <Fatal> BaseDaemon: 3. pthread_kill@@GLIBC_2.34 @ 0x00000000000a50bd\n2025.06.25 14:45:07.624792 [ 436418 ] {} <Fatal> BaseDaemon: 4. gsignal @ 0x00000000000456de\n2025.06.25 14:45:07.624822 [ 436418 ] {} <Fatal> BaseDaemon: 5. __GI_abort @ 0x00000000000288cd\n2025.06.25 14:45:07.624854 [ 436418 ] {} <Fatal> BaseDaemon: 6. __assert_perror_fail @ 0x0000000000028830\n2025.06.25 14:45:07.648114 [ 436418 ] {} <Fatal> BaseDaemon: 7. src/Planner/PlannerWindowFunctions.cpp:162: DB::sortWindowDescriptions(std::vector<DB::WindowDescription, std::allocator<DB::WindowDescription>>&)::$_0::operator()(DB::WindowDescription const&, DB::WindowDescription const&) const @ 0x0000000019801ce7\n2025.06.25 14:45:07.668132 [ 436418 ] {} <Fatal> BaseDaemon: 8.0. inlined from base/base/../base/sort.h:34: bool DebugLessComparator<DB::sortWindowDescriptions(std::vector<DB::WindowDescription, std::allocator<DB::WindowDescription>>&)::$_0>::operator()<DB::WindowDescription, DB::WindowDescription>(DB::WindowDescription&, DB::WindowDescription&)\n2025.06.25 14:45:07.668186 [ 436418 ] {} <Fatal> BaseDaemon: 8.1. inlined from contrib/pdqsort/pdqsort.h:88: void pdqsort_detail::insertion_sort<std::__wrap_iter<DB::WindowDescription*>, DebugLessComparator<DB::sortWindowDescriptions(std::vector<DB::WindowDescription, std::allocator<DB::WindowDescription>>&)::$_0>>(std::__wrap_iter<DB::WindowDescription*>, std::__wrap_iter<DB::WindowDescription*>, DebugLessComparator<DB::sortWindowDescriptions(std::vector<DB::WindowDescription, std::allocator<DB::WindowDescription>>&)::$_0>)\n2025.06.25 14:45:07.668228 [ 436418 ] {} <Fatal> BaseDaemon: 8. contrib/pdqsort/pdqsort.h:423: void pdqsort_detail::pdqsort_loop<std::__wrap_iter<DB::WindowDescription*>, DebugLessComparator<DB::sortWindowDescriptions(std::vector<DB::WindowDescription, std::allocator<DB::WindowDescription>>&)::$_0>, false>(std::__wrap_iter<DB::WindowDescription*>, std::__wrap_iter<DB::WindowDescription*>, DebugLessComparator<DB::sortWindowDescriptions(std::vector<DB::WindowDescription, std::allocator<DB::WindowDescription>>&)::$_0>, int, bool) @ 0x0000000019800809\n2025.06.25 14:45:07.716607 [ 436418 ] {} <Fatal> BaseDaemon: 9.0. inlined from src/Planner/Planner.cpp:1086: DB::(anonymous namespace)::addWindowSteps(DB::QueryPlan&, std::shared_ptr<DB::PlannerContext> const&, DB::WindowAnalysisResult&)\n2025.06.25 14:45:07.716664 [ 436418 ] {} <Fatal> BaseDaemon: 9. src/Planner/Planner.cpp:1811: DB::Planner::buildPlanForQueryNode() @ 0x000000001979aa95\n2025.06.25 14:45:07.758405 [ 436418 ] {} <Fatal> BaseDaemon: 10. src/Planner/Planner.cpp:1377: DB::Planner::buildQueryPlanIfNeeded() @ 0x00000000197954f3\n2025.06.25 14:45:07.778698 [ 436418 ] {} <Fatal> BaseDaemon: 11. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:269: DB::InterpreterSelectQueryAnalyzer::getQueryPlan() @ 0x000000001a0a22ed\n2025.06.25 14:45:07.817745 [ 436418 ] {} <Fatal> BaseDaemon: 12. src/Interpreters/executeQuery.cpp:1470: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x000000001a37b9b9\n2025.06.25 14:45:07.864370 [ 436418 ] {} <Fatal> BaseDaemon: 13. src/Interpreters/executeQuery.cpp:1715: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001a376371\n2025.06.25 14:45:07.901113 [ 436418 ] {} <Fatal> BaseDaemon: 14. src/Server/TCPHandler.cpp:722: DB::TCPHandler::runImpl() @ 0x000000001c138b52\n2025.06.25 14:45:07.960260 [ 436418 ] {} <Fatal> BaseDaemon: 15. src/Server/TCPHandler.cpp:2729: DB::TCPHandler::run() @ 0x000000001c152184\n2025.06.25 14:45:07.963635 [ 436418 ] {} <Fatal> BaseDaemon: 16. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000020476f27\n2025.06.25 14:45:07.967894 [ 436418 ] {} <Fatal> BaseDaemon: 17. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000020477425\n2025.06.25 14:45:07.971868 [ 436418 ] {} <Fatal> BaseDaemon: 18. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000002041f91f\n2025.06.25 14:45:07.975662 [ 436418 ] {} <Fatal> BaseDaemon: 19. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000002041d4d1\n2025.06.25 14:45:07.975704 [ 436418 ] {} <Fatal> BaseDaemon: 20. start_thread @ 0x00000000000a2ef1\n2025.06.25 14:45:07.975735 [ 436418 ] {} <Fatal> BaseDaemon: 21. __clone3 @ 0x000000000013445c\n2025.06.25 14:45:08.168966 [ 436418 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 97B3750633FE9570795C3D19CEBE4E59)\n```\n",
  "hints_text": "",
  "created_at": "2025-06-30T03:31:01Z",
  "modified_files": [
    "src/Planner/PlannerWindowFunctions.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03549_window_collation.reference",
    "b/tests/queries/0_stateless/03549_window_collation.sql"
  ]
}