You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Window function planning assertion failure
### Describe the bug

Easy to reproduce. The collation seems to be the root cause of the issue. The `QUALIFY` clause is available only in the new analyzer, so is it related to it?

### How to reproduce

On a debug build with assertions enabled, run:

```sql
SELECT rank() OVER (ORDER BY c0) FROM (SELECT '1' c0) v0 QUALIFY rank() OVER (ORDER BY c0 COLLATE 'vi') > 0;
/*
src/Planner/PlannerWindowFunctions.cpp:162:
auto DB::sortWindowDescriptions(std::vector<WindowDescription> &)::(anonymous class)::operator()(const WindowDescription &, const WindowDescription &) const:
Assertion `left[i] == right[i]' failed
*/
```

### Error message and/or stacktrace

Stack trace:

```
2025.06.25 14:45:07.624573 [ 436418 ] {} <Fatal> BaseDaemon: ########################################
2025.06.25 14:45:07.624640 [ 436418 ] {} <Fatal> BaseDaemon: (version 25.7.1.1172 (official build), build id: B3EF0CBFD10F919CE1CE4080288532677F7E2387, git hash: d9934019911191bb4ad612b4fc12afbdea0ea1f0) (from thread 435705) (query_id: f42f81ef-4926-4ee3-9c13-ba55487c1efd) (query: SELECT rank() OVER (ORDER BY c0) FROM (SELECT '1' c0) v0 QUALIFY rank() OVER (ORDER BY c0 COLLATE 'vi') > 0;) Received signal Aborted (6)
2025.06.25 14:45:07.624681 [ 436418 ] {} <Fatal> BaseDaemon: 
2025.06.25 14:45:07.624708 [ 436418 ] {} <Fatal> BaseDaemon: Stack trace: 0x00007f0d400a50bd 0x00007f0d400456de 0x00007f0d400288cd 0x00007f0d40028830 0x00005783169cdce7 0x00005783169cc809 0x0000578316966a95 0x00005783169614f3 0x000057831726e2ed 0x00005783175479b9 0x0000578317542371 0x0000578319304b52 0x000057831931e184 0x000057831d642f27 0x000057831d643425 0x000057831d5eb91f 0x000057831d5e94d1 0x00007f0d400a2ef1 0x00007f0d4013445c
2025.06.25 14:45:07.624760 [ 436418 ] {} <Fatal> BaseDaemon: 3. pthread_kill@@GLIBC_2.34 @ 0x00000000000a50bd
2025.06.25 14:45:07.624792 [ 436418 ] {} <Fatal> BaseDaemon: 4. gsignal @ 0x00000000000456de
2025.06.25 14:45:07.624822 [ 436418 ] {} <Fatal> BaseDaemon: 5. __GI_abort @ 0x00000000000288cd
2025.06.25 14:45:07.624854 [ 436418 ] {} <Fatal> BaseDaemon: 6. __assert_perror_fail @ 0x0000000000028830
2025.06.25 14:45:07.648114 [ 436418 ] {} <Fatal> BaseDaemon: 7. src/Planner/PlannerWindowFunctions.cpp:162: DB::sortWindowDescriptions(std::vector<DB::WindowDescription, std::allocator<DB::WindowDescription>>&)::$_0::operator()(DB::WindowDescription const&, DB::WindowDescription const&) const @ 0x0000000019801ce7
2025.06.25 14:45:07.668132 [ 436418 ] {} <Fatal> BaseDaemon: 8.0. inlined from base/base/../base/sort.h:34: bool DebugLessComparator<DB::sortWindowDescriptions(std::vector<DB::WindowDescription, std::allocator<DB::WindowDescription>>&)::$_0>::operator()<DB::WindowDescription, DB::WindowDescription>(DB::WindowDescription&, DB::WindowDescription&)
2025.06.25 14:45:07.668186 [ 436418 ] {} <Fatal> BaseDaemon: 8.1. inlined from contrib/pdqsort/pdqsort.h:88: void pdqsort_detail::insertion_sort<std::__wrap_iter<DB::WindowDescription*>, DebugLessComparator<DB::sortWindowDescriptions(std::vector<DB::WindowDescription, std::allocator<DB::WindowDescription>>&)::$_0>>(std::__wrap_iter<DB::WindowDescription*>, std::__wrap_iter<DB::WindowDescription*>, DebugLessComparator<DB::sortWindowDescriptions(std::vector<DB::WindowDescription, std::allocator<DB::WindowDescription>>&)::$_0>)
2025.06.25 14:45:07.668228 [ 436418 ] {} <Fatal> BaseDaemon: 8. contrib/pdqsort/pdqsort.h:423: void pdqsort_detail::pdqsort_loop<std::__wrap_iter<DB::WindowDescription*>, DebugLessComparator<DB::sortWindowDescriptions(std::vector<DB::WindowDescription, std::allocator<DB::WindowDescription>>&)::$_0>, false>(std::__wrap_iter<DB::WindowDescription*>, std::__wrap_iter<DB::WindowDescription*>, DebugLessComparator<DB::sortWindowDescriptions(std::vector<DB::WindowDescription, std::allocator<DB::WindowDescription>>&)::$_0>, int, bool) @ 0x0000000019800809
2025.06.25 14:45:07.716607 [ 436418 ] {} <Fatal> BaseDaemon: 9.0. inlined from src/Planner/Planner.cpp:1086: DB::(anonymous namespace)::addWindowSteps(DB::QueryPlan&, std::shared_ptr<DB::PlannerContext> const&, DB::WindowAnalysisResult&)
2025.06.25 14:45:07.716664 [ 436418 ] {} <Fatal> BaseDaemon: 9. src/Planner/Planner.cpp:1811: DB::Planner::buildPlanForQueryNode() @ 0x000000001979aa95
2025.06.25 14:45:07.758405 [ 436418 ] {} <Fatal> BaseDaemon: 10. src/Planner/Planner.cpp:1377: DB::Planner::buildQueryPlanIfNeeded() @ 0x00000000197954f3
2025.06.25 14:45:07.778698 [ 436418 ] {} <Fatal> BaseDaemon: 11. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:269: DB::InterpreterSelectQueryAnalyzer::getQueryPlan() @ 0x000000001a0a22ed
2025.06.25 14:45:07.817745 [ 436418 ] {} <Fatal> BaseDaemon: 12. src/Interpreters/executeQuery.cpp:1470: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x000000001a37b9b9
2025.06.25 14:45:07.864370 [ 436418 ] {} <Fatal> BaseDaemon: 13. src/Interpreters/executeQuery.cpp:1715: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001a376371
2025.06.25 14:45:07.901113 [ 436418 ] {} <Fatal> BaseDaemon: 14. src/Server/TCPHandler.cpp:722: DB::TCPHandler::runImpl() @ 0x000000001c138b52
2025.06.25 14:45:07.960260 [ 436418 ] {} <Fatal> BaseDaemon: 15. src/Server/TCPHandler.cpp:2729: DB::TCPHandler::run() @ 0x000000001c152184
2025.06.25 14:45:07.963635 [ 436418 ] {} <Fatal> BaseDaemon: 16. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000020476f27
2025.06.25 14:45:07.967894 [ 436418 ] {} <Fatal> BaseDaemon: 17. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000020477425
2025.06.25 14:45:07.971868 [ 436418 ] {} <Fatal> BaseDaemon: 18. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000002041f91f
2025.06.25 14:45:07.975662 [ 436418 ] {} <Fatal> BaseDaemon: 19. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000002041d4d1
2025.06.25 14:45:07.975704 [ 436418 ] {} <Fatal> BaseDaemon: 20. start_thread @ 0x00000000000a2ef1
2025.06.25 14:45:07.975735 [ 436418 ] {} <Fatal> BaseDaemon: 21. __clone3 @ 0x000000000013445c
2025.06.25 14:45:08.168966 [ 436418 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 97B3750633FE9570795C3D19CEBE4E59)
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
