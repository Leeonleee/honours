diff --git a/docker/test/base/Dockerfile b/docker/test/base/Dockerfile
index 506e32c18b35..61a40673a967 100644
--- a/docker/test/base/Dockerfile
+++ b/docker/test/base/Dockerfile
@@ -52,6 +52,7 @@ RUN apt-get update \
 RUN echo "TSAN_OPTIONS='verbosity=1000 halt_on_error=1 history_size=7'" >> /etc/environment; \
   echo "UBSAN_OPTIONS='print_stacktrace=1'" >> /etc/environment; \
   echo "MSAN_OPTIONS='abort_on_error=1'" >> /etc/environment; \
+  echo "LSAN_OPTIONS='suppressions=/usr/share/clickhouse-test/config/lsan_suppressions.txt'" >> /etc/environment; \
   ln -s /usr/lib/llvm-${LLVM_VERSION}/bin/llvm-symbolizer /usr/bin/llvm-symbolizer;
 # Sanitizer options for current shell (not current, but the one that will be spawned on "docker run")
 # (but w/o verbosity for TSAN, otherwise test.reference will not match)
diff --git a/tests/config/lsan_suppressions.txt b/tests/config/lsan_suppressions.txt
new file mode 100644
index 000000000000..39eb40560d7e
--- /dev/null
+++ b/tests/config/lsan_suppressions.txt
@@ -0,0 +1,2 @@
+# See https://bugs.llvm.org/show_bug.cgi?id=47418
+# leak:getActualTableStructure
diff --git a/tests/integration/test_distributed_format/test.py b/tests/integration/test_distributed_format/test.py
index 7e9d740c171e..607154e37f1a 100644
--- a/tests/integration/test_distributed_format/test.py
+++ b/tests/integration/test_distributed_format/test.py
@@ -34,7 +34,7 @@ def test_single_file(started_cluster, cluster):
 
     assert out == '1\ta
2\tbb
3\tccc
'
 
-    query = "create table t (dummy UInt32) engine = File('Distributed', '/var/lib/clickhouse/data/test/distr_1/shard1_replica1/1.bin');" \
+    query = "create table t (x UInt64, s String) engine = File('Distributed', '/var/lib/clickhouse/data/test/distr_1/shard1_replica1/1.bin');" \
             "select * from t"
     out = node.exec_in_container(['/usr/bin/clickhouse', 'local', '--stacktrace', '-q', query])
 
@@ -57,7 +57,7 @@ def test_two_files(started_cluster, cluster):
 
     assert out == '0\t_
1\ta
2\tbb
3\tccc
'
 
-    query = "create table t (dummy UInt32) engine = File('Distributed', '/var/lib/clickhouse/data/test/distr_2/shard1_replica1/{1,2,3,4}.bin');" \
+    query = "create table t (x UInt64, s String) engine = File('Distributed', '/var/lib/clickhouse/data/test/distr_2/shard1_replica1/{1,2,3,4}.bin');" \
             "select * from t order by x"
     out = node.exec_in_container(['/usr/bin/clickhouse', 'local', '--stacktrace', '-q', query])
 
@@ -77,7 +77,7 @@ def test_single_file_old(started_cluster, cluster):
 
     assert out == '1\ta
2\tbb
3\tccc
'
 
-    query = "create table t (dummy UInt32) engine = File('Distributed', '/var/lib/clickhouse/data/test/distr_3/default@not_existing:9000/1.bin');" \
+    query = "create table t (x UInt64, s String) engine = File('Distributed', '/var/lib/clickhouse/data/test/distr_3/default@not_existing:9000/1.bin');" \
             "select * from t"
     out = node.exec_in_container(['/usr/bin/clickhouse', 'local', '--stacktrace', '-q', query])
 
diff --git a/tests/queries/0_stateless/01083_expressions_in_engine_arguments.reference b/tests/queries/0_stateless/01083_expressions_in_engine_arguments.reference
index 933fda604d7b..2a5d7e6da32e 100644
--- a/tests/queries/0_stateless/01083_expressions_in_engine_arguments.reference
+++ b/tests/queries/0_stateless/01083_expressions_in_engine_arguments.reference
@@ -1,11 +1,11 @@
 CREATE TABLE default.file
(
    `n` Int8
)
ENGINE = File(\'TSVWithNamesAndTypes\')
 CREATE TABLE default.buffer
(
    `n` Int8
)
ENGINE = Buffer(\'default\', \'file\', 16, 10, 200, 10000, 1000000, 10000000, 1000000000)
 CREATE TABLE default.merge
(
    `n` Int8
)
ENGINE = Merge(\'default\', \'distributed\')
-CREATE TABLE default.merge_tf AS merge(\'default\', \'.*\')
+CREATE TABLE default.merge_tf
(
    `n` Int8
) AS merge(\'default\', \'.*\')
 CREATE TABLE default.distributed
(
    `n` Int8
)
ENGINE = Distributed(\'test_shard_localhost\', \'default\', \'file\')
-CREATE TABLE default.distributed_tf AS cluster(\'test_shard_localhost\', \'default\', \'buffer\')
+CREATE TABLE default.distributed_tf
(
    `n` Int8
) AS cluster(\'test_shard_localhost\', \'default\', \'buffer\')
 CREATE TABLE default.url
(
    `n` UInt64,
    `col` String
)
ENGINE = URL(\'https://localhost:8443/?query=select+n,+_table+from+default.merge+format+CSV\', \'CSV\')
-CREATE TABLE default.rich_syntax AS remote(\'localhos{x|y|t}\', cluster(\'test_shard_localhost\', remote(\'127.0.0.{1..4}\', \'default\', \'view\')))
+CREATE TABLE default.rich_syntax
(
    `n` Int64
) AS remote(\'localhos{x|y|t}\', cluster(\'test_shard_localhost\', remote(\'127.0.0.{1..4}\', \'default\', \'view\')))
 CREATE VIEW default.view
(
    `n` Int64
) AS
SELECT toInt64(n) AS n
FROM 
(
    SELECT toString(n) AS n
    FROM default.merge
    WHERE _table != \'qwerty\'
    ORDER BY _table ASC
)
UNION ALL
SELECT *
FROM default.file
 CREATE DICTIONARY default.dict
(
    `n` UInt64,
    `col` String DEFAULT \'42\'
)
PRIMARY KEY n
SOURCE(CLICKHOUSE(HOST \'localhost\' PORT 9440 SECURE 1 USER \'default\' TABLE \'url\'))
LIFETIME(MIN 0 MAX 1)
LAYOUT(CACHE(SIZE_IN_CELLS 1))
 16
diff --git a/tests/queries/0_stateless/01457_create_as_table_function_structure.reference b/tests/queries/0_stateless/01457_create_as_table_function_structure.reference
new file mode 100644
index 000000000000..0deaa20171a3
--- /dev/null
+++ b/tests/queries/0_stateless/01457_create_as_table_function_structure.reference
@@ -0,0 +1,10 @@
+CREATE TABLE test_01457.tf_remote
(
    `n` Int8
) AS remote(\'localhost\', \'default\', \'tmp\')
+CREATE TABLE test_01457.tf_remote_explicit_structure
(
    `n` UInt64
) AS remote(\'localhost\', \'default\', \'tmp\')
+CREATE TABLE test_01457.tf_numbers
(
    `number` String
) AS numbers(1)
+CREATE TABLE test_01457.tf_merge
(
    `n` Int8
) AS merge(\'default\', \'tmp\')
+42
+0	Int8
+0	Int8
+0	UInt64
+0	String
+0	Int8
diff --git a/tests/queries/0_stateless/01457_create_as_table_function_structure.sql b/tests/queries/0_stateless/01457_create_as_table_function_structure.sql
new file mode 100644
index 000000000000..edfab747fc46
--- /dev/null
+++ b/tests/queries/0_stateless/01457_create_as_table_function_structure.sql
@@ -0,0 +1,33 @@
+DROP DATABASE IF EXISTS test_01457;
+
+CREATE DATABASE test_01457;
+
+CREATE TABLE tmp (n Int8) ENGINE=Memory;
+
+CREATE TABLE test_01457.tf_remote AS remote('localhost', currentDatabase(), 'tmp');
+SHOW CREATE TABLE test_01457.tf_remote;
+CREATE TABLE test_01457.tf_remote_explicit_structure (n UInt64) AS remote('localhost', currentDatabase(), 'tmp');
+SHOW CREATE TABLE test_01457.tf_remote_explicit_structure;
+CREATE TABLE test_01457.tf_numbers (number String) AS numbers(1);
+SHOW CREATE TABLE test_01457.tf_numbers;
+CREATE TABLE test_01457.tf_merge AS merge(currentDatabase(), 'tmp');
+SHOW CREATE TABLE test_01457.tf_merge;
+
+DROP TABLE tmp;
+
+DETACH DATABASE test_01457;
+ATTACH DATABASE test_01457;
+
+CREATE TABLE tmp (n Int8) ENGINE=Memory;
+INSERT INTO test_01457.tf_remote_explicit_structure VALUES ('42');
+SELECT * FROM tmp;
+TRUNCATE TABLE tmp;
+INSERT INTO test_01457.tf_remote VALUES (0);
+
+SELECT (*,).1 AS c, toTypeName(c) FROM tmp;
+SELECT (*,).1 AS c, toTypeName(c) FROM test_01457.tf_remote;
+SELECT (*,).1 AS c, toTypeName(c) FROM test_01457.tf_remote_explicit_structure;
+SELECT (*,).1 AS c, toTypeName(c) FROM test_01457.tf_numbers;
+SELECT (*,).1 AS c, toTypeName(c) FROM test_01457.tf_merge;
+
+DROP DATABASE test_01457;
diff --git a/tests/queries/0_stateless/01461_alter_table_function.reference b/tests/queries/0_stateless/01461_alter_table_function.reference
index 395155967a97..b552dd81b770 100644
--- a/tests/queries/0_stateless/01461_alter_table_function.reference
+++ b/tests/queries/0_stateless/01461_alter_table_function.reference
@@ -1,7 +1,6 @@
-CREATE TABLE default.table_from_remote AS remote(\'localhost\', \'system\', \'numbers\')
-CREATE TABLE default.table_from_remote AS remote(\'localhost\', \'system\', \'numbers\')
-CREATE TABLE default.table_from_numbers AS numbers(1000)
-CREATE TABLE default.table_from_numbers AS numbers(1000)
+CREATE TABLE default.table_from_remote
(
    `number` UInt64
) AS remote(\'localhost\', \'system\', \'numbers\')
+CREATE TABLE default.table_from_remote
(
    `number` UInt64,
    `col` UInt8
) AS remote(\'localhost\', \'system\', \'numbers\')
+CREATE TABLE default.table_from_numbers
(
    `number` UInt64
) AS numbers(1000)
+CREATE TABLE default.table_from_numbers
(
    `number` UInt64
) AS numbers(1000)
 CREATE TABLE default.table_from_select
(
    `number` UInt64
)
ENGINE = MergeTree()
ORDER BY tuple()
SETTINGS index_granularity = 8192
 CREATE TABLE default.table_from_select
(
    `number` UInt64,
    `col` UInt8
)
ENGINE = MergeTree()
ORDER BY tuple()
SETTINGS index_granularity = 8192
-1
diff --git a/tests/queries/0_stateless/01461_alter_table_function.sql b/tests/queries/0_stateless/01461_alter_table_function.sql
index e242d1f0b7b3..11f643f1e3ed 100644
--- a/tests/queries/0_stateless/01461_alter_table_function.sql
+++ b/tests/queries/0_stateless/01461_alter_table_function.sql
@@ -6,7 +6,7 @@ CREATE TABLE table_from_remote AS remote('localhost', 'system', 'numbers');
 
 SHOW CREATE TABLE table_from_remote;
 
-ALTER TABLE table_from_remote ADD COLUMN col UInt8; --{serverError 48}
+ALTER TABLE table_from_remote ADD COLUMN col UInt8;
 
 SHOW CREATE TABLE table_from_remote;
 
@@ -26,8 +26,6 @@ ALTER TABLE table_from_select ADD COLUMN col UInt8;
 
 SHOW CREATE TABLE table_from_select;
 
-SELECT 1;
-
 DROP TABLE IF EXISTS table_from_remote;
 DROP TABLE IF EXISTS table_from_select;
 DROP TABLE IF EXISTS table_from_numbers;
diff --git a/tests/queries/0_stateless/arcadia_skip_list.txt b/tests/queries/0_stateless/arcadia_skip_list.txt
index e59a2634d0cd..d7ac6709e905 100644
--- a/tests/queries/0_stateless/arcadia_skip_list.txt
+++ b/tests/queries/0_stateless/arcadia_skip_list.txt
@@ -141,6 +141,7 @@
 01460_DistributedFilesToInsert
 01474_executable_dictionary
 01474_bad_global_join
+01457_create_as_table_function_structure
 01473_event_time_microseconds
 01461_query_start_time_microseconds
 01455_shard_leaf_max_rows_bytes_to_read
