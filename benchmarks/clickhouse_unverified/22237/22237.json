{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 22237,
  "instance_id": "ClickHouse__ClickHouse-22237",
  "issue_numbers": [
    "22234"
  ],
  "base_commit": "786f34025629534790154005d388e557347f6013",
  "patch": "diff --git a/programs/client/ConnectionParameters.cpp b/programs/client/ConnectionParameters.cpp\nindex 19734dd5ffa1..6faf43759df6 100644\n--- a/programs/client/ConnectionParameters.cpp\n+++ b/programs/client/ConnectionParameters.cpp\n@@ -7,6 +7,8 @@\n #include <IO/ConnectionTimeouts.h>\n #include <Poco/Util/AbstractConfiguration.h>\n #include <Common/Exception.h>\n+#include <Common/isLocalAddress.h>\n+#include <Common/DNSResolver.h>\n #include <common/setTerminalEcho.h>\n #include <ext/scope_guard.h>\n \n@@ -60,7 +62,9 @@ ConnectionParameters::ConnectionParameters(const Poco::Util::AbstractConfigurati\n #endif\n     }\n \n-    compression = config.getBool(\"compression\", true) ? Protocol::Compression::Enable : Protocol::Compression::Disable;\n+    /// By default compression is disabled if address looks like localhost.\n+    compression = config.getBool(\"compression\", !isLocalAddress(DNSResolver::instance().resolveHost(host)))\n+        ? Protocol::Compression::Enable : Protocol::Compression::Disable;\n \n     timeouts = ConnectionTimeouts(\n         Poco::Timespan(config.getInt(\"connect_timeout\", DBMS_DEFAULT_CONNECT_TIMEOUT_SEC), 0),\ndiff --git a/src/Client/Connection.h b/src/Client/Connection.h\nindex b4b0d36fb1f2..6c7edfb2761d 100644\n--- a/src/Client/Connection.h\n+++ b/src/Client/Connection.h\n@@ -139,6 +139,8 @@ class Connection : private boost::noncopyable\n     UInt16 getPort() const;\n     const String & getDefaultDatabase() const;\n \n+    Protocol::Compression getCompression() const { return compression; }\n+\n     /// If last flag is true, you need to call sendExternalTablesData after.\n     void sendQuery(\n         const ConnectionTimeouts & timeouts,\ndiff --git a/src/Interpreters/Cluster.cpp b/src/Interpreters/Cluster.cpp\nindex bac688fe81e3..48b335890876 100644\n--- a/src/Interpreters/Cluster.cpp\n+++ b/src/Interpreters/Cluster.cpp\n@@ -103,10 +103,14 @@ Cluster::Address::Address(\n     password = config.getString(config_prefix + \".password\", \"\");\n     default_database = config.getString(config_prefix + \".default_database\", \"\");\n     secure = config.getBool(config_prefix + \".secure\", false) ? Protocol::Secure::Enable : Protocol::Secure::Disable;\n-    compression = config.getBool(config_prefix + \".compression\", true) ? Protocol::Compression::Enable : Protocol::Compression::Disable;\n     priority = config.getInt(config_prefix + \".priority\", 1);\n     const char * port_type = secure == Protocol::Secure::Enable ? \"tcp_port_secure\" : \"tcp_port\";\n     is_local = isLocal(config.getInt(port_type, 0));\n+\n+    /// By default compression is disabled if address looks like localhost.\n+    /// NOTE: it's still enabled when interacting with servers on different port, but we don't want to complicate the logic.\n+    compression = config.getBool(config_prefix + \".compression\", !is_local)\n+        ? Protocol::Compression::Enable : Protocol::Compression::Disable;\n }\n \n \ndiff --git a/src/Storages/Distributed/DirectoryMonitor.cpp b/src/Storages/Distributed/DirectoryMonitor.cpp\nindex 29b69209253f..e3b0b0d581cd 100644\n--- a/src/Storages/Distributed/DirectoryMonitor.cpp\n+++ b/src/Storages/Distributed/DirectoryMonitor.cpp\n@@ -231,7 +231,12 @@ namespace\n         block_in.readSuffix();\n     }\n \n-    void writeRemoteConvert(const DistributedHeader & distributed_header, RemoteBlockOutputStream & remote, ReadBufferFromFile & in, Poco::Logger * log)\n+    void writeRemoteConvert(\n+        const DistributedHeader & distributed_header,\n+        RemoteBlockOutputStream & remote,\n+        bool compression_expected,\n+        ReadBufferFromFile & in,\n+        Poco::Logger * log)\n     {\n         if (!remote.getHeader())\n         {\n@@ -262,6 +267,14 @@ namespace\n             return;\n         }\n \n+        /// If connection does not use compression, we have to uncompress the data.\n+        if (!compression_expected)\n+        {\n+            writeAndConvert(remote, in);\n+            return;\n+        }\n+\n+        /// Otherwise write data as it was already prepared (more efficient path).\n         CheckingCompressedReadBuffer checking_in(in);\n         remote.writePrepared(checking_in);\n     }\n@@ -545,7 +558,8 @@ void StorageDistributedDirectoryMonitor::processFile(const std::string & file_pa\n             distributed_header.insert_settings,\n             distributed_header.client_info};\n         remote.writePrefix();\n-        writeRemoteConvert(distributed_header, remote, in, log);\n+        bool compression_expected = connection->getCompression() == Protocol::Compression::Enable;\n+        writeRemoteConvert(distributed_header, remote, compression_expected, in, log);\n         remote.writeSuffix();\n     }\n     catch (const Exception & e)\n@@ -690,7 +704,8 @@ struct StorageDistributedDirectoryMonitor::Batch\n                         distributed_header.client_info);\n                     remote->writePrefix();\n                 }\n-                writeRemoteConvert(distributed_header, *remote, in, parent.log);\n+                bool compression_expected = connection->getCompression() == Protocol::Compression::Enable;\n+                writeRemoteConvert(distributed_header, *remote, compression_expected, in, parent.log);\n             }\n \n             if (remote)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00933_test_fix_extra_seek_on_compressed_cache.reference b/tests/queries/0_stateless/00933_test_fix_extra_seek_on_compressed_cache.reference\nindex 7a08495654cb..f1839bae2594 100644\n--- a/tests/queries/0_stateless/00933_test_fix_extra_seek_on_compressed_cache.reference\n+++ b/tests/queries/0_stateless/00933_test_fix_extra_seek_on_compressed_cache.reference\n@@ -1,1 +1,1 @@\n-0\t36\t13\n+0\t0\t13\ndiff --git a/tests/queries/0_stateless/01598_memory_limit_zeros.sql b/tests/queries/0_stateless/01598_memory_limit_zeros.sql\nindex e90d7bbccb79..a07ce0bcca34 100644\n--- a/tests/queries/0_stateless/01598_memory_limit_zeros.sql\n+++ b/tests/queries/0_stateless/01598_memory_limit_zeros.sql\n@@ -1,2 +1,2 @@\n-SET max_memory_usage = 1;\n+SET max_memory_usage = 1, max_untracked_memory = 1000000;\n select 'test', count(*) from zeros_mt(1000000) where not ignore(zero); -- { serverError 241 }\n",
  "problem_statement": "Network compression should be disabled when interacting via localhost.\n**Describe the situation**\r\n```\r\n$ ./clickhouse-21.3.3 client --query \"SELECT * FROM system.numbers_mt FORMAT Native\" | pv > /dev/null\r\n^C,1GiB 0:00:45 [ 710MiB/s] [                                                                                                                                                                                               <=>                      ]\r\n\r\n$ ./clickhouse-21.3.3 client --compress 0 --query \"SELECT * FROM system.numbers_mt FORMAT Native\" | pv > /dev/null\r\n^C,2GiB 0:00:12 [1,48GiB/s] [                                                   <=>                                                                                                                                                                  ]\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2021-03-29T01:06:57Z",
  "modified_files": [
    "programs/client/ConnectionParameters.cpp",
    "src/Client/Connection.h",
    "src/Interpreters/Cluster.cpp",
    "src/Storages/Distributed/DirectoryMonitor.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00933_test_fix_extra_seek_on_compressed_cache.reference",
    "tests/queries/0_stateless/01598_memory_limit_zeros.sql"
  ]
}