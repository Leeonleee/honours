{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 22527,
  "instance_id": "ClickHouse__ClickHouse-22527",
  "issue_numbers": [
    "20244"
  ],
  "base_commit": "c3a9cbe01c1c07d21cd1f89b31291a194fc21b25",
  "patch": "diff --git a/src/DataTypes/Serializations/SerializationNullable.cpp b/src/DataTypes/Serializations/SerializationNullable.cpp\nindex 87805c53aa92..4de2b08c0439 100644\n--- a/src/DataTypes/Serializations/SerializationNullable.cpp\n+++ b/src/DataTypes/Serializations/SerializationNullable.cpp\n@@ -224,12 +224,9 @@ ReturnType SerializationNullable::deserializeTextEscapedImpl(IColumn & column, R\n {\n     /// Little tricky, because we cannot discriminate null from first character.\n \n-    if (istr.eof())\n-        throw ParsingException(\"Unexpected end of stream, while parsing value of Nullable type\", ErrorCodes::CANNOT_READ_ALL_DATA);\n-\n-    /// This is not null, surely.\n-    if (*istr.position() != '\\\\')\n+    if (istr.eof() || *istr.position() != '\\\\') /// Some data types can deserialize absence of data (e.g. empty string), so eof is ok.\n     {\n+        /// This is not null, surely.\n         return safeDeserialize<ReturnType>(column, *nested,\n             [] { return false; },\n             [&nested, &istr, &settings] (IColumn & nested_column) { nested->deserializeTextEscaped(nested_column, istr, settings); });\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01786_nullable_string_tsv_at_eof.reference b/tests/queries/0_stateless/01786_nullable_string_tsv_at_eof.reference\nnew file mode 100644\nindex 000000000000..35b388bbafbe\n--- /dev/null\n+++ b/tests/queries/0_stateless/01786_nullable_string_tsv_at_eof.reference\n@@ -0,0 +1,6 @@\n+1\t\n+1\t\n+1\t\n+1\t\n+1\t\n+1\t\ndiff --git a/tests/queries/0_stateless/01786_nullable_string_tsv_at_eof.sh b/tests/queries/0_stateless/01786_nullable_string_tsv_at_eof.sh\nnew file mode 100755\nindex 000000000000..f0a663ae4092\n--- /dev/null\n+++ b/tests/queries/0_stateless/01786_nullable_string_tsv_at_eof.sh\n@@ -0,0 +1,12 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+printf '1\\t' | $CLICKHOUSE_LOCAL --query=\"SELECT * FROM table\" --structure='a String, b String'\n+printf '1\\t' | $CLICKHOUSE_LOCAL --input_format_null_as_default 0 --query=\"SELECT * FROM table\" --structure='a String, b String'\n+printf '1\\t' | $CLICKHOUSE_LOCAL --input_format_null_as_default 1 --query=\"SELECT * FROM table\" --structure='a String, b String'\n+printf '1\\t' | $CLICKHOUSE_LOCAL --query=\"SELECT * FROM table\" --structure='a String, b Nullable(String)'\n+printf '1\\t' | $CLICKHOUSE_LOCAL --input_format_null_as_default 0 --query=\"SELECT * FROM table\" --structure='a String, b Nullable(String)'\n+printf '1\\t' | $CLICKHOUSE_LOCAL --input_format_null_as_default 1 --query=\"SELECT * FROM table\" --structure='a Nullable(String), b Nullable(String)'\n",
  "problem_statement": "\"Unexpected end of stream\" with text formats without new line at the end\n*Update by @alexey-milovidov: to fix the issue, set `input_format_null_as_default` to 0 as it was in older versions.*\r\n\r\n---\r\n\r\n\r\nClickhouse reports this when external dictionary not ends with \"\\n\" and last column is empty:\r\n\r\n```\r\nroot@clickhouse1:~# cat ~/passwd\r\nmetrika:x:1000:1000::/home/metrika:/bin/bash\r\nclickhouse:x:106:108:Clickhouse server,,,:/nonexistent:\r\n```\r\n\r\nremove \"\\n\" at the end of file, and then run query from documentation\r\n\r\n```\r\n# cat ~/passwd | sed 's/:/\\t/g' | clickhouse-client --query=\"SELECT shell, count() AS c FROM passwd GROUP BY shell ORDER BY c DESC\" --external --file=- --name=passwd --structure='login String, unused String, uid UInt16, gid UInt16, comment String, home String, shell String'\r\nCode: 33, e.displayText() = DB::ParsingException: Unexpected end of stream, while parsing value of Nullable type: (at row 2)\r\n: Buffer has gone, cannot extract information about what has been parsed., Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::ParsingException::ParsingException(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x84dad27 in /usr/bin/clickhouse\r\n1. bool DB::DataTypeNullable::deserializeTextEscaped<bool>(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&, std::__1::shared_ptr<DB::IDataType const> const&) @ 0xe74d65f in /usr/bin/clickhouse\r\n2. DB::TabSeparatedRowInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&) @ 0xf71dae9 in /usr/bin/clickhouse\r\n3. DB::IRowInputFormat::generate() @ 0xf6904e8 in /usr/bin/clickhouse\r\n4. DB::ISource::tryGenerate() @ 0xf61e8f5 in /usr/bin/clickhouse\r\n5. DB::ISource::work() @ 0xf61e60a in /usr/bin/clickhouse\r\n6. DB::ParallelParsingInputFormat::InternalParser::getChunk() @ 0xf6e6bee in /usr/bin/clickhouse\r\n7. DB::ParallelParsingInputFormat::parserThreadFunction(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long) @ 0xf6e624e in /usr/bin/clickhouse\r\n8. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x8513fb8 in /usr/bin/clickhouse\r\n9. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() @ 0x8515f6f in /usr/bin/clickhouse\r\n10. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x851158f in /usr/bin/clickhouse\r\n11. ? @ 0x8515023 in /usr/bin/clickhouse\r\n12. start_thread @ 0x76ba in /lib/x86_64-linux-gnu/libpthread-2.23.so\r\n13. clone @ 0x10741d in /lib/x86_64-linux-gnu/libc-2.23.so\r\n (version 21.2.2.8 (official build))\r\nCode: 33, e.displayText() = DB::ParsingException: Unexpected end of stream, while parsing value of Nullable type: (at row 2)\r\n: Buffer has gone, cannot extract information about what has been parsed., Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::ParsingException::ParsingException(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x84dad27 in /usr/bin/clickhouse\r\n1. bool DB::DataTypeNullable::deserializeTextEscaped<bool>(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&, std::__1::shared_ptr<DB::IDataType const> const&) @ 0xe74d65f in /usr/bin/clickhouse\r\n2. DB::TabSeparatedRowInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&) @ 0xf71dae9 in /usr/bin/clickhouse\r\n3. DB::IRowInputFormat::generate() @ 0xf6904e8 in /usr/bin/clickhouse\r\n4. DB::ISource::tryGenerate() @ 0xf61e8f5 in /usr/bin/clickhouse\r\n5. DB::ISource::work() @ 0xf61e60a in /usr/bin/clickhouse\r\n6. DB::ParallelParsingInputFormat::InternalParser::getChunk() @ 0xf6e6bee in /usr/bin/clickhouse\r\n7. DB::ParallelParsingInputFormat::parserThreadFunction(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long) @ 0xf6e624e in /usr/bin/clickhouse\r\n8. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x8513fb8 in /usr/bin/clickhouse\r\n9. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() @ 0x8515f6f in /usr/bin/clickhouse\r\n10. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x851158f in /usr/bin/clickhouse\r\n11. ? @ 0x8515023 in /usr/bin/clickhouse\r\n12. start_thread @ 0x76ba in /lib/x86_64-linux-gnu/libpthread-2.23.so\r\n13. clone @ 0x10741d in /lib/x86_64-linux-gnu/libc-2.23.so\r\n (version 21.2.2.8 (official build))\r\nCode: 33. DB::ParsingException: Unexpected end of stream, while parsing value of Nullable type: (at row 2)\r\n: Buffer has gone, cannot extract information about what has been parsed.: While executing SourceFromInputStream\r\n```\r\n\n",
  "hints_text": "Minimal example:\r\n\r\n```\r\nprintf '1\\t' | clickhouse-local --query=\"SELECT * FROM table\"  --structure='a String, b String'\r\n```\r\n\r\n20.12 and before - works, 21.1 and newer - fails. \nOne more example:\r\n```\r\nclickhouse-client --query=\"create table a (a String, b String) engine=Null\"\r\nprintf '1\\t' | clickhouse-client --query=\"INSERT INTO a FORMAT TSV\"\r\n```\r\n\r\n```\r\nCode: 33, e.displayText() = DB::ParsingException: Unexpected end of stream, while parsing value of Nullable type: (at row 1)\r\n: Buffer has gone, cannot extract information about what has been parsed., Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::ParsingException::ParsingException(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x84ef707 in /usr/bin/clickhouse\r\n1. bool DB::DataTypeNullable::deserializeTextEscaped<bool>(DB::IColumn&, DB::ReadBuffer&, DB::FormatSettings const&, std::__1::shared_ptr<DB::IDataType const> const&) @ 0xe7c6d9b in /usr/bin/clickhouse\r\n2. DB::TabSeparatedRowInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, DB::RowReadExtension&) @ 0xf7de219 in /usr/bin/clickhouse\r\n3. DB::IRowInputFormat::generate() @ 0xf750518 in /usr/bin/clickhouse\r\n4. DB::ISource::tryGenerate() @ 0xf6df1b5 in /usr/bin/clickhouse\r\n5. DB::ISource::work() @ 0xf6deeca in /usr/bin/clickhouse\r\n6. DB::ParallelParsingInputFormat::InternalParser::getChunk() @ 0xf7a70fe in /usr/bin/clickhouse\r\n7. DB::ParallelParsingInputFormat::parserThreadFunction(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long) @ 0xf7a675e in /usr/bin/clickhouse\r\n8. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x8528a48 in /usr/bin/clickhouse\r\n9. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() @ 0x852a9ff in /usr/bin/clickhouse\r\n10. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x852601f in /usr/bin/clickhouse\r\n11. ? @ 0x8529ab3 in /usr/bin/clickhouse\r\n12. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n13. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n (version 21.3.1.5944 (official build))\r\n```\r\n\nAdditional diagnostic from my side. I found an issue when the ssl is used.\r\n\r\nSadly I can't reproduce the issue in the wild, since I can't decode the ssl message. And when `curl`, `nc` or `openssl s_client` is used to send the message, it works.\r\n\r\n```\r\n2021.03.15 16:08:30.587272 [ 28790 ] {} <Error> void DB::ParallelParsingInputFormat::onBackgroundException(size_t): Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = HTML Form Exception: No CRLF found, Stack trace (when c\r\nopying this message, always include the lines below):\r\n\r\n0. DB::HTMLForm::MultipartReadBuffer::readLine(bool) @ 0xf8d0c1a in /usr/bin/clickhouse\r\n1. DB::HTMLForm::MultipartReadBuffer::nextImpl() @ 0xf8d0d54 in /usr/bin/clickhouse\r\n2. DB::LimitReadBuffer::nextImpl() @ 0x86a7fcc in /usr/bin/clickhouse\r\n3. DB::loadAtPosition(DB::ReadBuffer&, DB::Memory<Allocator<false, false> >&, char*&) @ 0x866cbc8 in /usr/bin/clickhouse\r\n4. ? @ 0xfa3d2de in /usr/bin/clickhouse\r\n5. DB::ParallelParsingInputFormat::segmentatorThreadFunction(std::__1::shared_ptr<DB::ThreadGroupStatus>) @ 0xf9be9cc in /usr/bin/clickhouse\r\n6. ThreadFromGlobalPool::ThreadFromGlobalPool<void (DB::ParallelParsingInputFormat::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*, std::__1::shared_ptr<DB::ThreadGroupStatus> >(void (DB::ParallelPa\r\nrsingInputFormat::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&)::'lambda'()::operator()() @ 0xf8e7b68 in /usr/bin/clickhouse\r\n7. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x864f9df in /usr/bin/clickhouse\r\n8. ? @ 0x8653473 in /usr/bin/clickhouse\r\n9. start_thread @ 0x7fa3 in /lib/x86_64-linux-gnu/libpthread-2.28.so\r\n10. clone @ 0xf94cf in /lib/x86_64-linux-gnu/libc-2.28.so\r\n (version 21.3.2.5 (official build))\r\n2021.03.15 16:08:30.587462 [ 28790 ] {} <Error> void DB::ParallelParsingInputFormat::onBackgroundException(size_t): Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = HTML Form Exception: No CRLF found, Stack trace (when c\r\nopying this message, always include the lines below):\r\n\r\n0. DB::HTMLForm::MultipartReadBuffer::readLine(bool) @ 0xf8d0c1a in /usr/bin/clickhouse\r\n1. DB::HTMLForm::MultipartReadBuffer::nextImpl() @ 0xf8d0d54 in /usr/bin/clickhouse\r\n2. DB::LimitReadBuffer::nextImpl() @ 0x86a7fcc in /usr/bin/clickhouse\r\n3. DB::loadAtPosition(DB::ReadBuffer&, DB::Memory<Allocator<false, false> >&, char*&) @ 0x866cbc8 in /usr/bin/clickhouse\r\n4. ? @ 0xfa3d2de in /usr/bin/clickhouse\r\n5. DB::ParallelParsingInputFormat::segmentatorThreadFunction(std::__1::shared_ptr<DB::ThreadGroupStatus>) @ 0xf9be9cc in /usr/bin/clickhouse\r\n6. ThreadFromGlobalPool::ThreadFromGlobalPool<void (DB::ParallelParsingInputFormat::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*, std::__1::shared_ptr<DB::ThreadGroupStatus> >(void (DB::ParallelParsingInputFormat::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&)::'lambda'()::operator()() @ 0xf8e7b68 in /usr/bin/clickhouse\r\n7. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x864f9df in /usr/bin/clickhouse\r\n8. ? @ 0x8653473 in /usr/bin/clickhouse\r\n9. start_thread @ 0x7fa3 in /lib/x86_64-linux-gnu/libpthread-2.28.so\r\n10. clone @ 0xf94cf in /lib/x86_64-linux-gnu/libc-2.28.so\r\n (version 21.3.2.5 (official build))\r\n2021.03.15 16:08:30.588258 [ 14629 ] {} <Error> DynamicQueryHandler: Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = HTML Form Exception: No CRLF found, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::HTMLForm::MultipartReadBuffer::readLine(bool) @ 0xf8d0c1a in /usr/bin/clickhouse\r\n1. DB::HTMLForm::MultipartReadBuffer::nextImpl() @ 0xf8d0d54 in /usr/bin/clickhouse\r\n2. DB::LimitReadBuffer::nextImpl() @ 0x86a7fcc in /usr/bin/clickhouse\r\n3. DB::loadAtPosition(DB::ReadBuffer&, DB::Memory<Allocator<false, false> >&, char*&) @ 0x866cbc8 in /usr/bin/clickhouse\r\n4. ? @ 0xfa3d2de in /usr/bin/clickhouse\r\n5. DB::ParallelParsingInputFormat::segmentatorThreadFunction(std::__1::shared_ptr<DB::ThreadGroupStatus>) @ 0xf9be9cc in /usr/bin/clickhouse\r\n6. ThreadFromGlobalPool::ThreadFromGlobalPool<void (DB::ParallelParsingInputFormat::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*, std::__1::shared_ptr<DB::ThreadGroupStatus> >(void (DB::ParallelParsingInputFormat::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>), DB::ParallelParsingInputFormat*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&)::'lambda'()::operator()() @ 0xf8e7b68 in /usr/bin/clickhouse\r\n7. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x864f9df in /usr/bin/clickhouse\r\n8. ? @ 0x8653473 in /usr/bin/clickhouse\r\n9. start_thread @ 0x7fa3 in /lib/x86_64-linux-gnu/libpthread-2.28.so\r\n10. clone @ 0xf94cf in /lib/x86_64-linux-gnu/libc-2.28.so\r\n (version 21.3.2.5 (official build))\r\n```\r\n\r\nHere are requests generated in go application, they both work with raw requests via `nc` and `openssl s_client`, but fails in application:\r\n\r\n```\r\n\"POST /?cancel_http_readonly_queries_on_client_close=1&metrics_list_format=TSV&metrics_list_structure=Path+String&query=SELECT+Path%2C%0A%09arrayFilter%28x-%3EisNotNull%28x%29%2C+anyOrNullResample%281615811640%2C+1615822439%2C+60%29%28toUInt32%28intDiv%28Time%2C+60%29%2A60%29%2C+Time%29%29%2C%0A%09arrayFilter%28x-%3EisNotNull%28x%29%2C+avgOrNullResample%281615811640%2C+1615822439%2C+60%29%28Value%2C+Time%29%29%0AFROM+graphite.data%0APREWHERE+Date+%3E%3D%272021-03-15%27+AND+Date+%3C%3D+%272021-03-15%27%0AWHERE+%28Path+in+metrics_list%29+AND+%28Time+%3E%3D+1615811640+AND+Time+%3C%3D+1615822439%29%0AGROUP+BY+Path%0AFORMAT+RowBinary&query_id=9bd097d96f50dce27e5bd7e8775255a3%3A%3A2bcba305a11a6610 HTTP/1.1\\r\\nHost: st-ch.innogames.de:8443\\r\\nUser-Agent: Graphite-Clickhouse/0.12.0 (table:graphite.data)\\r\\nContent-Length: 691\\r\\nContent-Type: multipart/form-data; boundary=f8fc934ea5cdb0ac4456ec1adffa90ff15bb8012b833357ae3cdc3a15061\\r\\nAccept-Encoding: gzip\\r\\n\\r\\n--f8fc934ea5cdb0ac4456ec1adffa90ff15bb8012b833357ae3cdc3a15061\\r\\nContent-Disposition: form-data; name=\\\"metrics_list\\\"; filename=\\\"metrics_list\\\"\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\nservers.aw-graphite-carbon02_admin.software.carbon-clickhouse.upload.graphite.uploaded_metrics\\nservers.aw-graphite-carbon02_admin.software.carbon-clickhouse.upload.graphite.unhandled\\nservers.aw-graphite-carbon02_admin.software.carbon-clickhouse.upload.graphite.errors\\nservers.aw-graphite-carbon02_admin.software.carbon-clickhouse.upload.graphite.uploaded\\nservers.aw-graphite-carbon02_admin.software.carbon-clickhouse.upload.graphite.delay\\n\\r\\n--f8fc934ea5cdb0ac4456ec1adffa90ff15bb8012b833357ae3cdc3a15061--\\r\\n\"\r\n\r\n\"POST /?cancel_http_readonly_queries_on_client_close=1&metrics_list_format=TSV&metrics_list_structure=Path+String&query=SELECT+Path%2C%0A%09arrayFilter%28x-%3EisNotNull%28x%29%2C+anyOrNullResample%281615811640%2C+1615822439%2C+60%29%28toUInt32%28intDiv%28Time%2C+60%29%2A60%29%2C+Time%29%29%2C%0A%09arrayFilter%28x-%3EisNotNull%28x%29%2C+avgOrNullResample%281615811640%2C+1615822439%2C+60%29%28Value%2C+Time%29%29%0AFROM+graphite.data%0APREWHERE+Date+%3E%3D%272021-03-15%27+AND+Date+%3C%3D+%272021-03-15%27%0AWHERE+%28Path+in+metrics_list%29+AND+%28Time+%3E%3D+1615811640+AND+Time+%3C%3D+1615822439%29%0AGROUP+BY+Path%0AFORMAT+RowBinary&query_id=791d5fcec1f5c451f1c03ce842631a0c%3A%3Aa6c0e92375c0b253 HTTP/1.1\\r\\nHost: st-ch.innogames.de:8123\\r\\nUser-Agent: Graphite-Clickhouse/0.12.0 (table:graphite.data)\\r\\nContent-Length: 691\\r\\nContent-Type: multipart/form-data; boundary=0b87e5a75e4821137d08e40f6ee5a00e0fc3fc78aaf22fdfaa3b3d67b056\\r\\nAccept-Encoding: gzip\\r\\n\\r\\n--0b87e5a75e4821137d08e40f6ee5a00e0fc3fc78aaf22fdfaa3b3d67b056\\r\\nContent-Disposition: form-data; name=\\\"metrics_list\\\"; filename=\\\"metrics_list\\\"\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\nservers.aw-graphite-carbon02_admin.software.carbon-clickhouse.upload.graphite.delay\\nservers.aw-graphite-carbon02_admin.software.carbon-clickhouse.upload.graphite.uploaded_metrics\\nservers.aw-graphite-carbon02_admin.software.carbon-clickhouse.upload.graphite.unhandled\\nservers.aw-graphite-carbon02_admin.software.carbon-clickhouse.upload.graphite.errors\\nservers.aw-graphite-carbon02_admin.software.carbon-clickhouse.upload.graphite.uploaded\\n\\r\\n--0b87e5a75e4821137d08e40f6ee5a00e0fc3fc78aaf22fdfaa3b3d67b056--\\r\\n\"\r\n```\r\n\r\nThe best way to get them is `echo \"POST....\"`\nAnother thing I can bring for debugging.\r\n\r\nI use [POST.txt](https://github.com/ClickHouse/ClickHouse/files/6150866/POST.txt) file to make requests to ClickHouse servers over the network:\r\n\r\n`cat POST | nc some.long.host.name 8123`\r\n\r\nAnd as results mostly [200.txt](https://github.com/ClickHouse/ClickHouse/files/6150880/200.txt) are returned, but from time to time it's [500.txt](https://github.com/ClickHouse/ClickHouse/files/6150886/500.txt). The server is always the same.\r\n\r\nI can't reproduce it with `ssh -L 8124:localhost:8123 some.long.host.name` and following `cat POST | nc localhost 8124`.\r\n\r\nHere's an approximate statistic of how often requests fail:\r\n\r\n```\r\n$ i=1; while ! cat POST | nc ch-host 8123 | grep '500 Internal Server Error'; do sleep 0.1; i=$((i + 1)); done; echo $i\r\nHTTP/1.1 500 Internal Server Error\r\n2\r\n$ i=1; while ! cat POST | nc ch-host 8123 | grep '500 Internal Server Error'; do sleep 0.1; i=$((i + 1)); done; echo $i\r\nHTTP/1.1 500 Internal Server Error\r\n2\r\n$ i=1; while ! cat POST | nc ch-host 8123 | grep '500 Internal Server Error'; do sleep 0.1; i=$((i + 1)); done; echo $i\r\nHTTP/1.1 500 Internal Server Error\r\n5\r\n$ i=1; while ! cat POST | nc ch-host 8123 | grep '500 Internal Server Error'; do sleep 0.1; i=$((i + 1)); done; echo $i\r\ngrep: (standard input): binary file matches\r\n12\r\n$ i=1; while ! cat POST | nc ch-host 8123 | grep '500 Internal Server Error'; do sleep 0.1; i=$((i + 1)); done; echo $i\r\nHTTP/1.1 500 Internal Server Error\r\n9\r\n$ i=1; while ! cat POST | nc ch-host 8123 | grep '500 Internal Server Error'; do sleep 0.1; i=$((i + 1)); done; echo $i\r\ngrep: (standard input): binary file matches\r\n1\r\n$ i=1; while ! cat POST | nc ch-host 8123 | grep '500 Internal Server Error'; do sleep 0.1; i=$((i + 1)); done; echo $i\r\ngrep: (standard input): binary file matches\r\n1\r\n$ i=1; while ! cat POST | nc ch-host 8123 | grep '500 Internal Server Error'; do sleep 0.1; i=$((i + 1)); done; echo $i\r\nHTTP/1.1 500 Internal Server Error\r\n3\r\n```\r\n\r\nI'd say, it's each 4-5th request\nAs I've mentioned in the dev-chat, I've found the request that fails even on localhost.\r\n\r\n- I run `docker run --rm --net=host --name=clickhouse yandex/clickhouse-server:21.3` in one terminal\r\n- Then in another I run `cat POST.txt | nc localhost 8123 | tail -c 153 | gzip -d`, file [POST.txt](https://github.com/ClickHouse/ClickHouse/files/6156727/POST.txt)\r\n- Sometimes it gives 400 Bad Request, sometimes 500 Internal Server Error, and sometimes its success. But the success rate is very low\r\n\r\nHere's my lo configuration just in case\r\n\r\n```\r\n$ ip a l dev lo\r\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\r\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\r\n    inet 127.0.0.1/8 scope host lo\r\n       valid_lft forever preferred_lft forever\r\n    inet6 ::1/128 scope host\r\n       valid_lft forever preferred_lft forever\r\n```\n@Felixoid I doubt if it's the same issue as the original one (rather sounds like 2 different issues).\r\n\r\nOne more similar is https://github.com/ClickHouse/ClickHouse/issues/21953 \nHighly likely",
  "created_at": "2021-04-02T20:54:29Z",
  "modified_files": [
    "src/DataTypes/Serializations/SerializationNullable.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01786_nullable_string_tsv_at_eof.reference",
    "b/tests/queries/0_stateless/01786_nullable_string_tsv_at_eof.sh"
  ]
}