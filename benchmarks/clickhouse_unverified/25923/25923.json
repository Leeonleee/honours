{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 25923,
  "instance_id": "ClickHouse__ClickHouse-25923",
  "issue_numbers": [
    "25594"
  ],
  "base_commit": "1e9fbdb02c3b670e947e2c78c6533f5cda52edb5",
  "patch": "diff --git a/src/DataTypes/NestedUtils.cpp b/src/DataTypes/NestedUtils.cpp\nindex 6c13eea0a1b7..ed9ea3e1b5c9 100644\n--- a/src/DataTypes/NestedUtils.cpp\n+++ b/src/DataTypes/NestedUtils.cpp\n@@ -34,41 +34,15 @@ std::string concatenateName(const std::string & nested_table_name, const std::st\n }\n \n \n-/** Name can be treated as compound if and only if both parts are simple identifiers.\n+/** Name can be treated as compound if it contains dot (.) in the middle.\n   */\n std::pair<std::string, std::string> splitName(const std::string & name)\n {\n-    const char * begin = name.data();\n-    const char * pos = begin;\n-    const char * end = begin + name.size();\n-\n-    if (pos >= end || !isValidIdentifierBegin(*pos))\n-        return {name, {}};\n-\n-    ++pos;\n-\n-    while (pos < end && isWordCharASCII(*pos))\n-        ++pos;\n-\n-    if (pos >= end || *pos != '.')\n-        return {name, {}};\n-\n-    const char * first_end = pos;\n-    ++pos;\n-    const char * second_begin = pos;\n-\n-    if (pos >= end || !isValidIdentifierBegin(*pos))\n-        return {name, {}};\n-\n-    ++pos;\n-\n-    while (pos < end && isWordCharASCII(*pos))\n-        ++pos;\n-\n-    if (pos != end)\n+    auto idx = name.find_first_of('.');\n+    if (idx == std::string::npos || idx == 0 || idx + 1 == name.size())\n         return {name, {}};\n \n-    return {{ begin, first_end }, { second_begin, end }};\n+    return {name.substr(0, idx), name.substr(idx + 1)};\n }\n \n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01937_nested_chinese.reference b/tests/queries/0_stateless/01937_nested_chinese.reference\nnew file mode 100644\nindex 000000000000..54b6175d7fc6\n--- /dev/null\n+++ b/tests/queries/0_stateless/01937_nested_chinese.reference\n@@ -0,0 +1,12 @@\n+id\tString\t\t\t\t\t\n+products.\u4ea7\u54c1\tArray(Array(String))\t\t\t\t\t\n+products.\u9500\u91cf\tArray(Array(Int32))\t\t\t\t\t\n+id\tString\t\t\t\t\t\n+products.\u4ea7\u54c1\tArray(Array(String))\t\t\t\t\t\n+products.\u9500\u91cf\tArray(Array(Int32))\t\t\t\t\t\n+id\tString\t\t\t\t\t\n+products.\u4ea7\u54c1\tArray(String)\t\t\t\t\t\n+products.\u9500\u91cf\tArray(Int32)\t\t\t\t\t\n+p.\u4ea7\u54c1\tArray(String)\t\t\t\t\t\n+p.\u9500\u91cf\tArray(Int32)\t\t\t\t\t\n+0\ndiff --git a/tests/queries/0_stateless/01937_nested_chinese.sql b/tests/queries/0_stateless/01937_nested_chinese.sql\nnew file mode 100644\nindex 000000000000..94c6598480e3\n--- /dev/null\n+++ b/tests/queries/0_stateless/01937_nested_chinese.sql\n@@ -0,0 +1,8 @@\n+CREATE TEMPORARY TABLE test (`id` String, `products` Nested (`\u4ea7\u54c1` Array(String), `\u9500\u91cf` Array(Int32)));\n+\n+DESCRIBE test;\n+DESCRIBE (SELECT * FROM test);\n+DESCRIBE (SELECT * FROM test ARRAY JOIN products);\n+DESCRIBE (SELECT p.`\u4ea7\u54c1`, p.`\u9500\u91cf` FROM test ARRAY JOIN products AS p);\n+SELECT * FROM test ARRAY JOIN products;\n+SELECT count() FROM (SELECT * FROM test ARRAY JOIN products);\n",
  "problem_statement": "No columns in nested table ERROR in Nested Type with Chinese field names\nYou have to provide the following information whenever possible.\r\n\r\n**Describe the bug**\r\n\r\nWhen use chinese as field name for nested type and query:\r\n\r\n````\r\nSELECT * from table array join `xxxx`;\r\n````\r\n\r\nit will raise error:\r\n\r\nNo columns in nested table xxx\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nClickHouse server version 21.3.5 revision 54447.\r\n\r\n**How to reproduce**\r\n\r\n1. create table\r\n\r\n````\r\nCREATE TABLE tmp.test1 (`id` String, `products` Nested (`\u4ea7\u54c1` Array(String), `\u9500\u91cf` Array(Int32))) ENGINE = ReplacingMergeTree ORDER BY id\r\n````\r\n\r\n2.  query\r\n\r\n````\r\nSELECT * FROM tmp.test2 array join products;\r\n````\r\n\r\nError\uff1a\r\n\r\n````\r\nReceived exception from server (version 21.3.5):\r\nCode: 208. DB::Exception: Received from localhost:9000. DB::Exception: No columns in nested table products. \r\n````\r\n\r\n\r\n**Additional Information**\r\n\r\nI've tried using english character as field name, and it works.\n",
  "hints_text": "Hi, I am fresh on ClickHouse, but I offered an glimpse of the related source code and find out the possible cause:\r\n```c++\r\n// this slice code is defined in TreeRewriter.cpp::getArrayJoinedColumns(...)\r\nbool found = false;\r\nauto split = Nested::splitName(column.name);\r\nif (split.first == source_name && !split.second.empty())\r\n{\r\n   result.array_join_result_to_source[Nested::concatenateName(result_name, split.second)] = column.name;\r\n   found = true;\r\n   break;\r\n}\r\nif (!found)\r\n  throw Exception(\"No columns in nested table \" + source_name, ErrorCodes::EMPTY_NESTED_TABLE);\r\n```\r\nAs we know that the Chinese characters should be represented by GBK/UTF8/Unicode etc., rather than the simple ASCII characters in program, so here the root reason comes:\r\nWhen creating a new table with Chinese named fields, the parser, `ParserIdentifier` defined in `ExpressionElementParsers.h` and implemented in `ExpressionElementParsers.cpp`, could correctly recognize these complex identifiers utilizing `ReaderHelpers::parseComplexEscapeSequence(...)`, but `TreeRewriter` will try to split the complex nested field name, e.g. `products`.`\u4ea7\u54c1`, using `NestedUtils::splitName(const std::string & name)` in which treating  the nested `name` as simple ASCIIs.\r\nFinally, no doubt an exception `No columns in nested table ...` should be thrown.\r\n\r\n_So I recommend you alter `product` table to substitute all the Chinese name with ASCII characters, then after joined, give each of them an alias._\r\n\r\nI hope these is no mistakes in my answer, and someone could give a more decisive advice whether it's worthwhile to fix it or not! \r\n:)",
  "created_at": "2021-07-03T00:14:27Z",
  "modified_files": [
    "src/DataTypes/NestedUtils.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01937_nested_chinese.reference",
    "b/tests/queries/0_stateless/01937_nested_chinese.sql"
  ]
}