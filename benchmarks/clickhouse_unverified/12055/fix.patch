diff --git a/src/Functions/array/FunctionArrayMapped.h b/src/Functions/array/FunctionArrayMapped.h
index 346f2e35555f..2a040f80efef 100644
--- a/src/Functions/array/FunctionArrayMapped.h
+++ b/src/Functions/array/FunctionArrayMapped.h
@@ -73,7 +73,7 @@ class FunctionArrayMapped : public IFunction
             if (!array_type)
                 throw Exception("Argument " + toString(i + 2) + " of function " + getName() + " must be array. Found "
                                 + arguments[i + 1]->getName() + " instead.", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);
-            nested_types[i] = removeLowCardinality(array_type->getNestedType());
+            nested_types[i] = recursiveRemoveLowCardinality(array_type->getNestedType());
         }
 
         const DataTypeFunction * function_type = checkAndGetDataType<DataTypeFunction>(arguments[0].get());
@@ -190,9 +190,7 @@ class FunctionArrayMapped : public IFunction
                     const ColumnConst * column_const_array = checkAndGetColumnConst<ColumnArray>(column_array_ptr.get());
                     if (!column_const_array)
                         throw Exception("Expected array column, found " + column_array_ptr->getName(), ErrorCodes::ILLEGAL_COLUMN);
-                    column_array_ptr = column_const_array->convertToFullColumn();
-                    if (column_array_ptr->lowCardinality())
-                        column_array_ptr = column_array_ptr->convertToFullColumnIfLowCardinality();
+                    column_array_ptr = recursiveRemoveLowCardinality(column_const_array->convertToFullColumn());
                     column_array = checkAndGetColumn<ColumnArray>(column_array_ptr.get());
                 }
 
@@ -218,7 +216,7 @@ class FunctionArrayMapped : public IFunction
                 }
 
                 arrays.emplace_back(ColumnWithTypeAndName(column_array->getDataPtr(),
-                                                          removeLowCardinality(array_type->getNestedType()),
+                                                          recursiveRemoveLowCardinality(array_type->getNestedType()),
                                                           array_with_type_and_name.name));
             }
 
