{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11655,
  "instance_id": "ClickHouse__ClickHouse-11655",
  "issue_numbers": [
    "7744"
  ],
  "base_commit": "f53da4d36b8c3a214567c935caed478edce08363",
  "patch": "diff --git a/src/Storages/System/StorageSystemColumns.cpp b/src/Storages/System/StorageSystemColumns.cpp\nindex b4f5da22c17c..90e52ad373e7 100644\n--- a/src/Storages/System/StorageSystemColumns.cpp\n+++ b/src/Storages/System/StorageSystemColumns.cpp\n@@ -32,6 +32,7 @@ StorageSystemColumns::StorageSystemColumns(const std::string & name_)\n         { \"table\",              std::make_shared<DataTypeString>() },\n         { \"name\",               std::make_shared<DataTypeString>() },\n         { \"type\",               std::make_shared<DataTypeString>() },\n+        { \"position\",           std::make_shared<DataTypeUInt64>() },\n         { \"default_kind\",       std::make_shared<DataTypeString>() },\n         { \"default_expression\", std::make_shared<DataTypeString>() },\n         { \"data_compressed_bytes\",      std::make_shared<DataTypeUInt64>() },\n@@ -131,8 +132,10 @@ class ColumnsSource : public SourceWithProgress\n \n             bool check_access_for_columns = check_access_for_tables && !access->isGranted(AccessType::SHOW_COLUMNS, database_name, table_name);\n \n+            size_t position = 0;\n             for (const auto & column : columns)\n             {\n+                ++position;\n                 if (check_access_for_columns && !access->isGranted(AccessType::SHOW_COLUMNS, database_name, table_name, column.name))\n                     continue;\n \n@@ -147,6 +150,8 @@ class ColumnsSource : public SourceWithProgress\n                     res_columns[res_index++]->insert(column.name);\n                 if (columns_mask[src_index++])\n                     res_columns[res_index++]->insert(column.type->getName());\n+                if (columns_mask[src_index++])\n+                    res_columns[res_index++]->insert(position);\n \n                 if (column.default_desc.expression)\n                 {\ndiff --git a/src/Storages/System/StorageSystemPartsColumns.cpp b/src/Storages/System/StorageSystemPartsColumns.cpp\nindex b8acdc5f9951..479621fd47f6 100644\n--- a/src/Storages/System/StorageSystemPartsColumns.cpp\n+++ b/src/Storages/System/StorageSystemPartsColumns.cpp\n@@ -49,6 +49,7 @@ StorageSystemPartsColumns::StorageSystemPartsColumns(const std::string & name_)\n \n         {\"column\",                                     std::make_shared<DataTypeString>()},\n         {\"type\",                                       std::make_shared<DataTypeString>()},\n+        {\"column_position\",                            std::make_shared<DataTypeUInt64>()},\n         {\"default_kind\",                               std::make_shared<DataTypeString>()},\n         {\"default_expression\",                         std::make_shared<DataTypeString>()},\n         {\"column_bytes_on_disk\",                       std::make_shared<DataTypeUInt64>()},\n@@ -101,9 +102,10 @@ void StorageSystemPartsColumns::processNextStorage(MutableColumns & columns_, co\n \n         using State = IMergeTreeDataPart::State;\n \n+        size_t column_position = 0;\n         for (const auto & column : part->getColumns())\n-\n         {\n+            ++column_position;\n             size_t j = 0;\n             {\n                 WriteBufferFromOwnString out;\n@@ -143,6 +145,7 @@ void StorageSystemPartsColumns::processNextStorage(MutableColumns & columns_, co\n \n             columns_[j++]->insert(column.name);\n             columns_[j++]->insert(column.type->getName());\n+            columns_[j++]->insert(column_position);\n \n             auto column_info_it = columns_info.find(column.name);\n             if (column_info_it != columns_info.end())\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00981_no_virtual_columns.reference b/tests/queries/0_stateless/00981_no_virtual_columns.reference\nindex a7ec77dc0303..587be6b4c3f9 100644\n--- a/tests/queries/0_stateless/00981_no_virtual_columns.reference\n+++ b/tests/queries/0_stateless/00981_no_virtual_columns.reference\n@@ -1,1 +1,1 @@\n-default\tmerge_ab\tx\tUInt8\t\t\t0\t0\t0\t\t0\t0\t0\t0\t\n+x\ndiff --git a/tests/queries/0_stateless/00981_no_virtual_columns.sql b/tests/queries/0_stateless/00981_no_virtual_columns.sql\nindex 476377b4ddf2..b39461545814 100644\n--- a/tests/queries/0_stateless/00981_no_virtual_columns.sql\n+++ b/tests/queries/0_stateless/00981_no_virtual_columns.sql\n@@ -6,7 +6,7 @@ CREATE TABLE merge_a (x UInt8) ENGINE = StripeLog;\n CREATE TABLE merge_b (x UInt8) ENGINE = StripeLog;\n CREATE TABLE merge_ab AS merge(currentDatabase(), '^merge_[ab]$');\n \n-SELECT * FROM system.columns WHERE database = currentDatabase() AND table = 'merge_ab';\n+SELECT name FROM system.columns WHERE database = currentDatabase() AND table = 'merge_ab';\n \n DROP TABLE merge_a;\n DROP TABLE merge_b;\ndiff --git a/tests/queries/0_stateless/01314_position_in_system_columns.reference b/tests/queries/0_stateless/01314_position_in_system_columns.reference\nnew file mode 100644\nindex 000000000000..32e0ae5900ec\n--- /dev/null\n+++ b/tests/queries/0_stateless/01314_position_in_system_columns.reference\n@@ -0,0 +1,6 @@\n+x\tUInt8\t1\n+y\tString\t2\n+z\tArray(String)\t3\n+x\tUInt8\t1\n+y\tString\t2\n+z\tArray(String)\t3\ndiff --git a/tests/queries/0_stateless/01314_position_in_system_columns.sql b/tests/queries/0_stateless/01314_position_in_system_columns.sql\nnew file mode 100644\nindex 000000000000..7bb0f3b5a965\n--- /dev/null\n+++ b/tests/queries/0_stateless/01314_position_in_system_columns.sql\n@@ -0,0 +1,8 @@\n+DROP TABLE IF EXISTS test;\n+CREATE TABLE test (x UInt8, y String, z Array(String)) ENGINE = MergeTree ORDER BY tuple();\n+INSERT INTO test (x) VALUES (1);\n+\n+SELECT name, type, position FROM system.columns WHERE database = currentDatabase() AND table = 'test';\n+SELECT column, type, column_position FROM system.parts_columns WHERE database = currentDatabase() AND table = 'test';\n+\n+DROP TABLE test;\n",
  "problem_statement": "ordinal position in system.columns \nSee https://github.com/ClickHouse/clickhouse-odbc/issues/142\n",
  "hints_text": "",
  "created_at": "2020-06-14T01:57:41Z",
  "modified_files": [
    "src/Storages/System/StorageSystemColumns.cpp",
    "src/Storages/System/StorageSystemPartsColumns.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00981_no_virtual_columns.reference",
    "tests/queries/0_stateless/00981_no_virtual_columns.sql",
    "b/tests/queries/0_stateless/01314_position_in_system_columns.reference",
    "b/tests/queries/0_stateless/01314_position_in_system_columns.sql"
  ]
}