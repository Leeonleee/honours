{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 79907,
  "instance_id": "ClickHouse__ClickHouse-79907",
  "issue_numbers": [
    "51264"
  ],
  "base_commit": "27b618f9bc541bcfbd597466fdecd9d0013df23f",
  "patch": "diff --git a/src/Core/Settings.cpp b/src/Core/Settings.cpp\nindex f64ed0f3566d..63dcab0e493a 100644\n--- a/src/Core/Settings.cpp\n+++ b/src/Core/Settings.cpp\n@@ -917,8 +917,8 @@ Allows or restricts using not comparable types (like JSON/Object/AggregateFuncti\n     DECLARE(Bool, allow_not_comparable_types_in_comparison_functions, false, R\"(\n Allows or restricts using not comparable types (like JSON/Object/AggregateFunction) in comparison functions `equal/less/greater/etc`.\n )\", 0) \\\n-    DECLARE(Bool, compile_expressions, false, R\"(\n-Compile some scalar functions and operators to native code. Due to a bug in the LLVM compiler infrastructure, on AArch64 machines, it is known to lead to a nullptr dereference and, consequently, server crash. Do not enable this setting.\n+    DECLARE(Bool, compile_expressions, true, R\"(\n+Compile some scalar functions and operators to native code.\n )\", 0) \\\n     DECLARE(UInt64, min_count_to_compile_expression, 3, R\"(\n Minimum count of executing same expression before it is get compiled.\ndiff --git a/src/Core/SettingsChangesHistory.cpp b/src/Core/SettingsChangesHistory.cpp\nindex 4d8ccddff2aa..e059f067c1db 100644\n--- a/src/Core/SettingsChangesHistory.cpp\n+++ b/src/Core/SettingsChangesHistory.cpp\n@@ -86,6 +86,7 @@ const VersionToSettingsChangesMap & getSettingsChangesHistory()\n             {\"force_exchange_kind\", \"\", \"\", \"New experimental setting.\"},\n             {\"allow_experimental_delta_kernel_rs\", true, true, \"New setting\"},\n             {\"allow_experimental_database_hms_catalog\", false, false, \"Allow experimental database engine DataLakeCatalog with catalog_type = 'hive'\"},\n+            {\"compile_expressions\", false, true, \"We believe that the LLVM infrastructure behind the JIT compiler is stable enough to enable this setting by default.\"},\n             {\"use_legacy_to_time\", false, false, \"New setting. Allows for user to use the old function logic for toTime, which works as toTimeWithFixedDate.\"},\n         });\n         addSettingsChanges(settings_changes_history, \"25.4\",\n",
  "test_patch": "diff --git a/tests/clickhouse-test b/tests/clickhouse-test\nindex a9b20f5f63fb..b3c255edf5f4 100755\n--- a/tests/clickhouse-test\n+++ b/tests/clickhouse-test\n@@ -1035,7 +1035,7 @@ class SettingsRandomizer:\n         \"filesystem_prefetch_step_bytes\": lambda: random.choice(\n             [0, \"100Mi\"]\n         ),  # 0 means 'auto'\n-        # \"compile_expressions\": lambda: random.randint(0, 1), - this setting has a bug: https://github.com/ClickHouse/ClickHouse/issues/51264\n+        \"compile_expressions\": lambda: random.randint(0, 1),\n         \"compile_aggregate_expressions\": lambda: random.randint(0, 1),\n         \"compile_sort_description\": lambda: random.randint(0, 1),\n         \"merge_tree_coarse_index_granularity\": lambda: random.randint(2, 32),\n",
  "problem_statement": "LLVM: Msan - use of uninitialized value in stress test\n@kitaisreal Do you know if this is a known issue? Thanks.\r\n\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/51132/75b7121759ac4bb1fc12078042d52a445ae319a5/stress_test__msan_.html\r\n\r\n```\r\n==1673==WARNING: MemorySanitizer: use-of-uninitialized-value\r\n    #0 0x55edb962f6b3 in llvm::SelectionDAGBuilder::visitInsertValue(llvm::InsertValueInst const&) (/usr/bin/clickhouse+0x497af6b3) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #1 0x55edb95d913b in llvm::SelectionDAGBuilder::visit(unsigned int, llvm::User const&) (/usr/bin/clickhouse+0x4975913b) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #2 0x55edb95d555d in llvm::SelectionDAGBuilder::visit(llvm::Instruction const&) (/usr/bin/clickhouse+0x4975555d) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #3 0x55edb989ad29 in llvm::SelectionDAGISel::SelectBasicBlock(llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Instruction, false, false, void>, false, true>, llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Instruction, false, false, void>, false, true>, bool&) (/usr/bin/clickhouse+0x49a1ad29) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #4 0x55edb9897e46 in llvm::SelectionDAGISel::SelectAllBasicBlocks(llvm::Function const&) (/usr/bin/clickhouse+0x49a17e46) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #5 0x55edb988cb8d in llvm::SelectionDAGISel::runOnMachineFunction(llvm::MachineFunction&) (/usr/bin/clickhouse+0x49a0cb8d) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #6 0x55edb8b3a598 in (anonymous namespace)::X86DAGToDAGISel::runOnMachineFunction(llvm::MachineFunction&) X86ISelDAGToDAG.cpp\r\n    #7 0x55edba0f321d in llvm::MachineFunctionPass::runOnFunction(llvm::Function&) (/usr/bin/clickhouse+0x4a27321d) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #8 0x55edbdfb7d2f in llvm::FPPassManager::runOnFunction(llvm::Function&) (/usr/bin/clickhouse+0x4e137d2f) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #9 0x55edbdfd9ca9 in llvm::FPPassManager::runOnModule(llvm::Module&) (/usr/bin/clickhouse+0x4e159ca9) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #10 0x55edbdfbba37 in llvm::legacy::PassManagerImpl::run(llvm::Module&) (/usr/bin/clickhouse+0x4e13ba37) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #11 0x55edbdfda6a2 in llvm::legacy::PassManager::run(llvm::Module&) (/usr/bin/clickhouse+0x4e15a6a2) (BuildId: 3c17f40ef79b7d9ad8ce7f0d72e31e5d6c9e65d5)\r\n    #12 0x55edb1634109 in DB::JITCompiler::compile(llvm::Module&) build_docker/./src/Interpreters/JIT/CHJIT.cpp:78:22\r\n    #13 0x55edb162ff82 in DB::CHJIT::compileModule(std::__1::unique_ptr<llvm::Module, std::__1::default_delete<llvm::Module>>) build_docker/./src/Interpreters/JIT/CHJIT.cpp:378:29\r\n    #14 0x55edb162f35e in DB::CHJIT::compileModule(std::__1::function<void (llvm::Module&)>) build_docker/./src/Interpreters/JIT/CHJIT.cpp:359:24\r\n    #15 0x55edb1667671 in DB::compileFunction(DB::CHJIT&, DB::IFunctionBase const&) build_docker/./src/Interpreters/JIT/compileFunction.cpp:169:32\r\n    #16 0x55edaeec1414 in DB::compile(DB::CompileDAG const&, unsigned long)::$_0::operator()() const build_docker/./src/Interpreters/ExpressionJIT.cpp:303:38\r\n    #17 0x55edaeec1414 in std::__1::pair<std::__1::shared_ptr<DB::CompiledExpressionCacheEntry>, bool> DB::CacheBase<wide::integer<128ul, unsigned int>, DB::CompiledExpressionCacheEntry, UInt128Hash, DB::CompiledFunctionWeightFunction>::getOrSet<DB::compile(DB::CompileDAG const&, unsigned long)::$_0>(wide::integer<128ul, unsigned int> const&, DB::compile(DB::CompileDAG const&, unsigned long)::$_0&&) build_docker/./src/Common/CacheBase.h:148:24\r\n    #18 0x55edaeec1414 in DB::compile(DB::CompileDAG const&, unsigned long) build_docker/./src/Interpreters/ExpressionJIT.cpp:300:70\r\n    #19 0x55edaeec1414 in DB::ActionsDAG::compileFunctions(unsigned long, std::__1::unordered_set<DB::ActionsDAG::Node const*, std::__1::hash<DB::ActionsDAG::Node const*>, std::__1::equal_to<DB::ActionsDAG::Node const*>, std::__1::allocator<DB::ActionsDAG::Node const*>> const&) build_docker/./src/Interpreters/ExpressionJIT.cpp:593:23\r\n    #20 0x55edad7d454d in DB::ActionsDAG::compileExpressions(unsigned long, std::__1::unordered_set<DB::ActionsDAG::Node const*, std::__1::hash<DB::ActionsDAG::Node const*>, std::__1::equal_to<DB::ActionsDAG::Node const*>, std::__1::allocator<DB::ActionsDAG::Node const*>> const&) build_docker/./src/Interpreters/ActionsDAG.cpp:1071:5\r\n    #21 0x55edadeb0aaf in DB::ExpressionActions::ExpressionActions(std::__1::shared_ptr<DB::ActionsDAG>, DB::ExpressionActionsSettings const&) build_docker/./src/Interpreters/ExpressionActions.cpp:62:22\r\n    #22 0x55edb3e9d187 in DB::ExpressionActions* std::__1::construct_at[abi:v15000]<DB::ExpressionActions, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&, DB::ExpressionActions*>(DB::ExpressionActions*, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&) build_docker/./contrib/llvm-project/libcxx/include/__memory/construct_at.h:35:48\r\n    #23 0x55edb3e9d187 in void std::__1::allocator_traits<std::__1::allocator<DB::ExpressionActions>>::construct[abi:v15000]<DB::ExpressionActions, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&, void, void>(std::__1::allocator<DB::ExpressionActions>&, DB::ExpressionActions*, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&) build_docker/./contrib/llvm-project/libcxx/include/__memory/allocator_traits.h:298:9\r\n    #24 0x55edb3e9d187 in std::__1::__shared_ptr_emplace<DB::ExpressionActions, std::__1::allocator<DB::ExpressionActions>>::__shared_ptr_emplace[abi:v15000]<std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&>(std::__1::allocator<DB::ExpressionActions>, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&) build_docker/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:292:9\r\n    #25 0x55edb3e9d187 in std::__1::shared_ptr<DB::ExpressionActions> std::__1::allocate_shared[abi:v15000]<DB::ExpressionActions, std::__1::allocator<DB::ExpressionActions>, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&, void>(std::__1::allocator<DB::ExpressionActions> const&, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&) build_docker/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:953:55\r\n    #26 0x55edb57e8c50 in std::__1::shared_ptr<DB::ExpressionActions> std::__1::make_shared[abi:v15000]<DB::ExpressionActions, std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&, void>(std::__1::shared_ptr<DB::ActionsDAG>&, DB::ExpressionActionsSettings const&) build_docker/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:962:12\r\n    #27 0x55edb57e8c50 in DB::ExpressionStep::transformPipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) build_docker/./src/Processors/QueryPlan/ExpressionStep.cpp:39:23\r\n    #28 0x55edb5829baf in DB::ITransformingStep::updatePipeline(std::__1::vector<std::__1::unique_ptr<DB::QueryPipelineBuilder, std::__1::default_delete<DB::QueryPipelineBuilder>>, std::__1::allocator<std::__1::unique_ptr<DB::QueryPipelineBuilder, std::__1::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) build_docker/./src/Processors/QueryPlan/ITransformingStep.cpp:41:9\r\n    #29 0x55edb587feb0 in DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) build_docker/./src/Processors/QueryPlan/QueryPlan.cpp:189:47\r\n    #30 0x55edb083493a in DB::InterpreterSelectWithUnionQuery::execute() build_docker/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:379:31\r\n    #31 0x55edb13d86f1 in DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) build_docker/./src/Interpreters/executeQuery.cpp:746:40\r\n```\n",
  "hints_text": "",
  "created_at": "2025-05-06T23:28:14Z",
  "modified_files": [
    "src/Core/Settings.cpp",
    "src/Core/SettingsChangesHistory.cpp"
  ],
  "modified_test_files": [
    "tests/clickhouse-test"
  ]
}