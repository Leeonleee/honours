diff --git a/src/Analyzer/Passes/UniqInjectiveFunctionsEliminationPass.cpp b/src/Analyzer/Passes/UniqInjectiveFunctionsEliminationPass.cpp
index 6520cb0717d3..1716c37228af 100644
--- a/src/Analyzer/Passes/UniqInjectiveFunctionsEliminationPass.cpp
+++ b/src/Analyzer/Passes/UniqInjectiveFunctionsEliminationPass.cpp
@@ -2,9 +2,13 @@
 
 #include <Functions/IFunction.h>
 
+#include <AggregateFunctions/AggregateFunctionFactory.h>
+#include <AggregateFunctions/IAggregateFunction.h>
+
 #include <Analyzer/InDepthQueryTreeVisitor.h>
 #include <Analyzer/FunctionNode.h>
 
+
 namespace DB
 {
 
@@ -30,7 +34,9 @@ class UniqInjectiveFunctionsEliminationVisitor : public InDepthQueryTreeVisitor<
         if (!function_node || !function_node->isAggregateFunction() || !isUniqFunction(function_node->getFunctionName()))
             return;
 
+        bool replaced_argument = false;
         auto & uniq_function_arguments_nodes = function_node->getArguments().getNodes();
+
         for (auto & uniq_function_argument_node : uniq_function_arguments_nodes)
         {
             auto * uniq_function_argument_node_typed = uniq_function_argument_node->as<FunctionNode>();
@@ -49,7 +55,28 @@ class UniqInjectiveFunctionsEliminationVisitor : public InDepthQueryTreeVisitor<
 
             /// Replace injective function with its single argument
             uniq_function_argument_node = uniq_function_argument_node_argument_nodes[0];
+            replaced_argument = true;
         }
+
+        if (!replaced_argument)
+            return;
+
+        const auto & function_node_argument_nodes = function_node->getArguments().getNodes();
+
+        DataTypes argument_types;
+        argument_types.reserve(function_node_argument_nodes.size());
+
+        for (const auto & function_node_argument : function_node_argument_nodes)
+            argument_types.emplace_back(function_node_argument->getResultType());
+
+        AggregateFunctionProperties properties;
+        auto aggregate_function = AggregateFunctionFactory::instance().get(function_node->getFunctionName(),
+            argument_types,
+            function_node->getAggregateFunction()->getParameters(),
+            properties);
+
+        auto function_result_type = function_node->getResultType();
+        function_node->resolveAsAggregateFunction(std::move(aggregate_function), std::move(function_result_type));
     }
 };
 
