{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 57875,
  "instance_id": "ClickHouse__ClickHouse-57875",
  "issue_numbers": [
    "57765"
  ],
  "base_commit": "787f1e7ab86ab4daee9148fcbea3caa305f67a90",
  "patch": "diff --git a/docs/en/operations/settings/settings.md b/docs/en/operations/settings/settings.md\nindex 5c509058cbb4..7491699bf0de 100644\n--- a/docs/en/operations/settings/settings.md\n+++ b/docs/en/operations/settings/settings.md\n@@ -4152,6 +4152,41 @@ Result:\n \u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n+## enable_order_by_all {#enable-order-by-all}\n+\n+Enables or disables sorting by `ALL` columns, i.e. [ORDER BY](../../sql-reference/statements/select/order-by.md)\n+\n+Possible values:\n+\n+- 0 \u2014 Disable ORDER BY ALL.\n+- 1 \u2014 Enable ORDER BY ALL.\n+\n+Default value: `1`.\n+\n+**Example**\n+\n+Query:\n+\n+```sql\n+CREATE TABLE TAB(C1 Int, C2 Int, ALL Int) ENGINE=Memory();\n+\n+INSERT INTO TAB VALUES (10, 20, 30), (20, 20, 10), (30, 10, 20);\n+\n+SELECT * FROM TAB ORDER BY ALL; -- returns an error that ALL is ambiguous\n+\n+SELECT * FROM TAB ORDER BY ALL SETTINGS enable_order_by_all;\n+```\n+\n+Result:\n+\n+```text\n+\u250c\u2500C1\u2500\u252c\u2500C2\u2500\u252c\u2500ALL\u2500\u2510\n+\u2502 20 \u2502 20 \u2502  10 \u2502\n+\u2502 30 \u2502 10 \u2502  20 \u2502\n+\u2502 10 \u2502 20 \u2502  30 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n ## splitby_max_substrings_includes_remaining_string {#splitby_max_substrings_includes_remaining_string}\n \n Controls whether function [splitBy*()](../../sql-reference/functions/splitting-merging-functions.md) with argument `max_substrings` > 0 will include the remaining string in the last element of the result array.\ndiff --git a/docs/en/sql-reference/statements/select/order-by.md b/docs/en/sql-reference/statements/select/order-by.md\nindex 53bdc9041a1c..13b05e711613 100644\n--- a/docs/en/sql-reference/statements/select/order-by.md\n+++ b/docs/en/sql-reference/statements/select/order-by.md\n@@ -5,12 +5,22 @@ sidebar_label: ORDER BY\n \n # ORDER BY Clause\n \n-The `ORDER BY` clause contains a list of expressions, which can each be attributed with `DESC` (descending) or `ASC` (ascending) modifier which determine the sorting direction. If the direction is not specified, `ASC` is assumed, so it\u2019s usually omitted. The sorting direction applies to a single expression, not to the entire list. Example: `ORDER BY Visits DESC, SearchPhrase`.  Sorting is case-sensitive.\n+The `ORDER BY` clause contains\n \n-If you want to sort by column numbers instead of column names, enable the setting [enable_positional_arguments](../../../operations/settings/settings.md#enable-positional-arguments).\n+- a list of expressions, e.g. `ORDER BY visits, search_phrase`,\n+- a list of numbers referring to columns in the `SELECT` clause, e.g. `ORDER BY 2, 1`, or\n+- `ALL` which means all columns of the `SELECT` clause, e.g. `ORDER BY ALL`.\n \n-Rows that have identical values for the list of sorting expressions are output in an arbitrary order, which can also be non-deterministic (different each time).\n-If the ORDER BY clause is omitted, the order of the rows is also undefined, and may be non-deterministic as well.\n+To disable sorting by column numbers, set setting [enable_positional_arguments](../../../operations/settings/settings.md#enable-positional-arguments) = 0.\n+To disable sorting by `ALL`, set setting [enable_order_by_all](../../../operations/settings/settings.md#enable-order-by-all) = 0.\n+\n+The `ORDER BY` clause can be attributed by a `DESC` (descending) or `ASC` (ascending) modifier which determines the sorting direction.\n+Unless an explicit sort order is specified, `ASC` is used by default.\n+The sorting direction applies to a single expression, not to the entire list, e.g. `ORDER BY Visits DESC, SearchPhrase`.\n+Also, sorting is performed case-sensitively.\n+\n+Rows with identical values for a sort expressions are returned in an arbitrary and non-deterministic order.\n+If the `ORDER BY` clause is omitted in a `SELECT` statement, the row order is also arbitrary and non-deterministic.\n \n ## Sorting of Special Values\n \ndiff --git a/docs/zh/sql-reference/statements/select/order-by.md b/docs/zh/sql-reference/statements/select/order-by.md\nindex 01f702a4b1ed..3286fc9f9e70 100644\n--- a/docs/zh/sql-reference/statements/select/order-by.md\n+++ b/docs/zh/sql-reference/statements/select/order-by.md\n@@ -61,6 +61,22 @@ sidebar_label: ORDER BY\n \n \u6211\u4eec\u53ea\u5efa\u8bae\u4f7f\u7528 `COLLATE` \u5bf9\u4e8e\u5c11\u91cf\u884c\u7684\u6700\u7ec8\u6392\u5e8f\uff0c\u56e0\u4e3a\u6392\u5e8f\u4e0e `COLLATE` \u6bd4\u6b63\u5e38\u7684\u6309\u5b57\u8282\u6392\u5e8f\u6548\u7387\u4f4e\u3002\n \n+## ORDER BY ALL\n+\n+`ORDER BY ALL` \u5bf9\u6240\u6709\u9009\u5b9a\u7684\u5217\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\u3002\n+\n+\u793a\u4f8b:\n+\n+``` sql\n+SELECT a, b, c FROM t ORDER BY ALL\n+```\n+\n+\u7b49\u540c\u4e8e\uff1a\n+\n+``` sql\n+SELECT a, b, c FROM t ORDER BY a, b, c\n+```\n+\n ## \u5b9e\u73b0\u7ec6\u8282 {#implementation-details}\n \n \u66f4\u5c11\u7684RAM\u4f7f\u7528\uff0c\u5982\u679c\u4e00\u4e2a\u8db3\u591f\u5c0f [LIMIT](../../../sql-reference/statements/select/limit.md) \u9664\u4e86\u6307\u5b9a `ORDER BY`. \u5426\u5219\uff0c\u6240\u82b1\u8d39\u7684\u5185\u5b58\u91cf\u4e0e\u7528\u4e8e\u6392\u5e8f\u7684\u6570\u636e\u91cf\u6210\u6b63\u6bd4\u3002 \u5bf9\u4e8e\u5206\u5e03\u5f0f\u67e5\u8be2\u5904\u7406\uff0c\u5982\u679c [GROUP BY](../../../sql-reference/statements/select/group-by.md) \u7701\u7565\u6392\u5e8f\uff0c\u5728\u8fdc\u7a0b\u670d\u52a1\u5668\u4e0a\u90e8\u5206\u5b8c\u6210\u6392\u5e8f\uff0c\u5e76\u5c06\u7ed3\u679c\u5408\u5e76\u5230\u8bf7\u6c42\u8005\u670d\u52a1\u5668\u4e0a\u3002 \u8fd9\u610f\u5473\u7740\u5bf9\u4e8e\u5206\u5e03\u5f0f\u6392\u5e8f\uff0c\u8981\u6392\u5e8f\u7684\u6570\u636e\u91cf\u53ef\u4ee5\u5927\u4e8e\u5355\u4e2a\u670d\u52a1\u5668\u4e0a\u7684\u5185\u5b58\u91cf\u3002\ndiff --git a/src/Analyzer/Passes/QueryAnalysisPass.cpp b/src/Analyzer/Passes/QueryAnalysisPass.cpp\nindex 1e63d5ca8e43..3290d918a8bc 100644\n--- a/src/Analyzer/Passes/QueryAnalysisPass.cpp\n+++ b/src/Analyzer/Passes/QueryAnalysisPass.cpp\n@@ -119,6 +119,7 @@ namespace ErrorCodes\n     extern const int NUMBER_OF_COLUMNS_DOESNT_MATCH;\n     extern const int FUNCTION_CANNOT_HAVE_PARAMETERS;\n     extern const int SYNTAX_ERROR;\n+    extern const int UNEXPECTED_EXPRESSION;\n }\n \n /** Query analyzer implementation overview. Please check documentation in QueryAnalysisPass.h first.\n@@ -1209,6 +1210,8 @@ class QueryAnalyzer\n \n     static void expandGroupByAll(QueryNode & query_tree_node_typed);\n \n+    static void expandOrderByAll(QueryNode & query_tree_node_typed);\n+\n     static std::string\n     rewriteAggregateFunctionNameIfNeeded(const std::string & aggregate_function_name, NullsAction action, const ContextPtr & context);\n \n@@ -2312,6 +2315,35 @@ void QueryAnalyzer::expandGroupByAll(QueryNode & query_tree_node_typed)\n         recursivelyCollectMaxOrdinaryExpressions(node, group_by_nodes);\n }\n \n+void QueryAnalyzer::expandOrderByAll(QueryNode & query_tree_node_typed)\n+{\n+    auto * all_node = query_tree_node_typed.getOrderBy().getNodes()[0]->as<SortNode>();\n+    if (!all_node)\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Select analyze for not sort node.\");\n+\n+    auto & projection_nodes = query_tree_node_typed.getProjection().getNodes();\n+    auto list_node = std::make_shared<ListNode>();\n+    list_node->getNodes().reserve(projection_nodes.size());\n+\n+    for (auto & node : projection_nodes)\n+    {\n+        if (auto * identifier_node = node->as<IdentifierNode>(); identifier_node != nullptr)\n+            if (Poco::toUpper(identifier_node->getIdentifier().getFullName()) == \"ALL\" || Poco::toUpper(identifier_node->getAlias()) == \"ALL\")\n+                throw Exception(ErrorCodes::UNEXPECTED_EXPRESSION,\n+                    \"Cannot use ORDER BY ALL to sort a column with name 'all', please disable setting `enable_order_by_all` and try again\");\n+\n+        if (auto * function_node = node->as<FunctionNode>(); function_node != nullptr)\n+            if (Poco::toUpper(function_node->getAlias()) == \"ALL\")\n+                throw Exception(ErrorCodes::UNEXPECTED_EXPRESSION,\n+                                \"Cannot use ORDER BY ALL to sort a column with name 'all', please disable setting `enable_order_by_all` and try again\");\n+\n+        auto sort_node = std::make_shared<SortNode>(node, all_node->getSortDirection(), all_node->getNullsSortDirection());\n+        list_node->getNodes().push_back(sort_node);\n+    }\n+\n+    query_tree_node_typed.getOrderByNode() = list_node;\n+}\n+\n std::string QueryAnalyzer::rewriteAggregateFunctionNameIfNeeded(\n     const std::string & aggregate_function_name, NullsAction action, const ContextPtr & context)\n {\n@@ -6975,6 +7007,9 @@ void QueryAnalyzer::resolveQuery(const QueryTreeNodePtr & query_node, Identifier\n     if (query_node_typed.hasHaving() && query_node_typed.isGroupByWithTotals() && is_rollup_or_cube)\n         throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"WITH TOTALS and WITH ROLLUP or CUBE are not supported together in presence of HAVING\");\n \n+    if (settings.enable_order_by_all && query_node_typed.isOrderByAll())\n+        expandOrderByAll(query_node_typed);\n+\n     /// Initialize aliases in query node scope\n     QueryExpressionsAliasVisitor visitor(scope);\n \ndiff --git a/src/Analyzer/QueryNode.h b/src/Analyzer/QueryNode.h\nindex 82bc72b74111..d8b8741afb2e 100644\n--- a/src/Analyzer/QueryNode.h\n+++ b/src/Analyzer/QueryNode.h\n@@ -219,6 +219,18 @@ class QueryNode final : public IQueryTreeNode\n         is_group_by_all = is_group_by_all_value;\n     }\n \n+    /// Returns true, if query node has ORDER BY ALL modifier, false otherwise\n+    bool isOrderByAll() const\n+    {\n+        return is_order_by_all;\n+    }\n+\n+    /// Set query node ORDER BY ALL modifier value\n+    void setIsOrderByAll(bool is_order_by_all_value)\n+    {\n+        is_order_by_all = is_order_by_all_value;\n+    }\n+\n     /// Returns true if query node WITH section is not empty, false otherwise\n     bool hasWith() const\n     {\n@@ -590,6 +602,7 @@ class QueryNode final : public IQueryTreeNode\n     bool is_group_by_with_cube = false;\n     bool is_group_by_with_grouping_sets = false;\n     bool is_group_by_all = false;\n+    bool is_order_by_all = false;\n \n     std::string cte_name;\n     NamesAndTypes projection_columns;\ndiff --git a/src/Analyzer/QueryTreeBuilder.cpp b/src/Analyzer/QueryTreeBuilder.cpp\nindex c541888e5b92..4e2d0ad10a8a 100644\n--- a/src/Analyzer/QueryTreeBuilder.cpp\n+++ b/src/Analyzer/QueryTreeBuilder.cpp\n@@ -284,6 +284,7 @@ QueryTreeNodePtr QueryTreeBuilder::buildSelectExpression(const ASTPtr & select_q\n     current_query_tree->setIsGroupByWithRollup(select_query_typed.group_by_with_rollup);\n     current_query_tree->setIsGroupByWithGroupingSets(select_query_typed.group_by_with_grouping_sets);\n     current_query_tree->setIsGroupByAll(select_query_typed.group_by_all);\n+    current_query_tree->setIsOrderByAll(select_query_typed.order_by_all);\n     current_query_tree->setOriginalAST(select_query);\n \n     auto current_context = current_query_tree->getContext();\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex 69efedf5d3e5..9c3dafd257d4 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -845,6 +845,7 @@ class IColumn;\n     M(UInt64, cache_warmer_threads, 4, \"Only available in ClickHouse Cloud\", 0) \\\n     M(Int64, ignore_cold_parts_seconds, 0, \"Only available in ClickHouse Cloud\", 0) \\\n     M(Int64, prefer_warmed_unmerged_parts_seconds, 0, \"Only available in ClickHouse Cloud\", 0) \\\n+    M(Bool, enable_order_by_all, true, \"Enable sorting expression ORDER BY ALL.\", 0)\\\n \n // End of COMMON_SETTINGS\n // Please add settings related to formats into the FORMAT_FACTORY_SETTINGS, move obsolete settings to OBSOLETE_SETTINGS and obsolete format settings to OBSOLETE_FORMAT_SETTINGS.\ndiff --git a/src/Interpreters/TreeRewriter.cpp b/src/Interpreters/TreeRewriter.cpp\nindex c63aae320908..9cbf24091e33 100644\n--- a/src/Interpreters/TreeRewriter.cpp\n+++ b/src/Interpreters/TreeRewriter.cpp\n@@ -73,6 +73,7 @@ namespace ErrorCodes\n     extern const int NOT_IMPLEMENTED;\n     extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n     extern const int UNKNOWN_IDENTIFIER;\n+    extern const int UNEXPECTED_EXPRESSION;\n }\n \n namespace\n@@ -776,6 +777,37 @@ void expandGroupByAll(ASTSelectQuery * select_query)\n     select_query->setExpression(ASTSelectQuery::Expression::GROUP_BY, group_expression_list);\n }\n \n+void expandOrderByAll(ASTSelectQuery * select_query)\n+{\n+    auto * all_elem = select_query->orderBy()->children[0]->as<ASTOrderByElement>();\n+    if (!all_elem)\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Select analyze for not order by asts.\");\n+\n+    auto order_expression_list = std::make_shared<ASTExpressionList>();\n+\n+    for (const auto & expr : select_query->select()->children)\n+    {\n+        if (auto * identifier = expr->as<ASTIdentifier>(); identifier != nullptr)\n+            if (Poco::toUpper(identifier->name()) == \"ALL\" || Poco::toUpper(identifier->alias) == \"ALL\")\n+                throw Exception(ErrorCodes::UNEXPECTED_EXPRESSION,\n+                                \"Cannot use ORDER BY ALL to sort a column with name 'all', please disable setting `enable_order_by_all` and try again\");\n+\n+        if (auto * function = expr->as<ASTFunction>(); function != nullptr)\n+            if (Poco::toUpper(function->alias) == \"ALL\")\n+                throw Exception(ErrorCodes::UNEXPECTED_EXPRESSION,\n+                                \"Cannot use ORDER BY ALL to sort a column with name 'all', please disable setting `enable_order_by_all` and try again\");\n+\n+        auto elem = std::make_shared<ASTOrderByElement>();\n+        elem->direction = all_elem->direction;\n+        elem->nulls_direction = all_elem->nulls_direction;\n+        elem->nulls_direction_was_explicitly_specified = all_elem->nulls_direction_was_explicitly_specified;\n+        elem->children.push_back(expr);\n+        order_expression_list->children.push_back(elem);\n+    }\n+\n+    select_query->setExpression(ASTSelectQuery::Expression::ORDER_BY, order_expression_list);\n+}\n+\n ASTs getAggregates(ASTPtr & query, const ASTSelectQuery & select_query)\n {\n     /// There can not be aggregate functions inside the WHERE and PREWHERE.\n@@ -1292,6 +1324,10 @@ TreeRewriterResultPtr TreeRewriter::analyzeSelect(\n     if (select_query->group_by_all)\n         expandGroupByAll(select_query);\n \n+    // expand ORDER BY ALL\n+    if (settings.enable_order_by_all && select_query->order_by_all)\n+        expandOrderByAll(select_query);\n+\n     /// Remove unneeded columns according to 'required_result_columns'.\n     /// Leave all selected columns in case of DISTINCT; columns that contain arrayJoin function inside.\n     /// Must be after 'normalizeTree' (after expanding aliases, for aliases not get lost)\ndiff --git a/src/Parsers/ASTSelectQuery.cpp b/src/Parsers/ASTSelectQuery.cpp\nindex 7c96db006c4f..2115de1c1246 100644\n--- a/src/Parsers/ASTSelectQuery.cpp\n+++ b/src/Parsers/ASTSelectQuery.cpp\n@@ -144,7 +144,7 @@ void ASTSelectQuery::formatImpl(const FormatSettings & s, FormatState & state, F\n         window()->as<ASTExpressionList &>().formatImplMultiline(s, state, frame);\n     }\n \n-    if (orderBy())\n+    if (!order_by_all && orderBy())\n     {\n         s.ostr << (s.hilite ? hilite_keyword : \"\") << s.nl_or_ws << indent_str << \"ORDER BY\" << (s.hilite ? hilite_none : \"\");\n         s.one_line\n@@ -163,6 +163,24 @@ void ASTSelectQuery::formatImpl(const FormatSettings & s, FormatState & state, F\n         }\n     }\n \n+    if (order_by_all)\n+    {\n+        s.ostr << (s.hilite ? hilite_keyword : \"\") << s.nl_or_ws << indent_str << \"ORDER BY ALL\" << (s.hilite ? hilite_none : \"\");\n+\n+        auto * elem = orderBy()->children[0]->as<ASTOrderByElement>();\n+        s.ostr << (s.hilite ? hilite_keyword : \"\")\n+               << (elem->direction == -1 ? \" DESC\" : \" ASC\")\n+               << (s.hilite ? hilite_none : \"\");\n+\n+        if (elem->nulls_direction_was_explicitly_specified)\n+        {\n+            s.ostr << (s.hilite ? hilite_keyword : \"\")\n+                   << \" NULLS \"\n+                   << (elem->nulls_direction == elem->direction ? \"LAST\" : \"FIRST\")\n+                   << (s.hilite ? hilite_none : \"\");\n+        }\n+    }\n+\n     if (limitByLength())\n     {\n         s.ostr << (s.hilite ? hilite_keyword : \"\") << s.nl_or_ws << indent_str << \"LIMIT \" << (s.hilite ? hilite_none : \"\");\ndiff --git a/src/Parsers/ASTSelectQuery.h b/src/Parsers/ASTSelectQuery.h\nindex 57f45a8aacd9..eb171dc00ee7 100644\n--- a/src/Parsers/ASTSelectQuery.h\n+++ b/src/Parsers/ASTSelectQuery.h\n@@ -87,6 +87,7 @@ class ASTSelectQuery : public IAST\n     bool group_by_with_cube = false;\n     bool group_by_with_constant_keys = false;\n     bool group_by_with_grouping_sets = false;\n+    bool order_by_all = false;\n     bool limit_with_ties = false;\n \n     ASTPtr & refSelect()    { return getExpression(Expression::SELECT); }\ndiff --git a/src/Parsers/ParserSelectQuery.cpp b/src/Parsers/ParserSelectQuery.cpp\nindex 341c1ef60b49..641e74b5f18f 100644\n--- a/src/Parsers/ParserSelectQuery.cpp\n+++ b/src/Parsers/ParserSelectQuery.cpp\n@@ -14,6 +14,7 @@\n #include <Parsers/ASTExpressionList.h>\n #include <Parsers/ASTInterpolateElement.h>\n #include <Parsers/ASTIdentifier.h>\n+#include <Poco/String.h>\n \n \n namespace DB\n@@ -287,6 +288,13 @@ bool ParserSelectQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n                     interpolate_expression_list = std::make_shared<ASTExpressionList>();\n             }\n         }\n+        else if (order_expression_list->children.size() == 1)\n+        {\n+            /// ORDER BY ALL\n+            auto * identifier = order_expression_list->children[0]->as<ASTOrderByElement>()->children[0]->as<ASTIdentifier>();\n+            if (identifier != nullptr && Poco::toUpper(identifier->name()) == \"ALL\")\n+                select_query->order_by_all = true;\n+        }\n     }\n \n     /// This is needed for TOP expression, because it can also use WITH TIES.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02943_order_by_all.reference b/tests/queries/0_stateless/02943_order_by_all.reference\nnew file mode 100644\nindex 000000000000..48d828b69246\n--- /dev/null\n+++ b/tests/queries/0_stateless/02943_order_by_all.reference\n@@ -0,0 +1,84 @@\n+-- no modifiers\n+A\t2\n+B\t3\n+C\t\\N\n+D\t1\n+1\tD\n+2\tA\n+3\tB\n+\\N\tC\n+A\t2\n+B\t3\n+C\t\\N\n+D\t1\n+1\tD\n+2\tA\n+3\tB\n+\\N\tC\n+-- with ASC/DESC modifiers\n+A\t2\n+B\t3\n+C\t\\N\n+D\t1\n+D\t1\n+C\t\\N\n+B\t3\n+A\t2\n+A\t2\n+B\t3\n+C\t\\N\n+D\t1\n+D\t1\n+C\t\\N\n+B\t3\n+A\t2\n+-- with NULLS FIRST/LAST modifiers\n+\\N\tC\n+1\tD\n+2\tA\n+3\tB\n+1\tD\n+2\tA\n+3\tB\n+\\N\tC\n+\\N\tC\n+1\tD\n+2\tA\n+3\tB\n+1\tD\n+2\tA\n+3\tB\n+\\N\tC\n+-- what happens if some column \"all\" already exists?\n+B\t3\t10\n+D\t1\t20\n+A\t2\t30\n+C\t\\N\t40\n+B\t3\t10\n+D\t1\t20\n+A\t2\t30\n+C\t\\N\t40\n+D\t1\n+A\t2\n+B\t3\n+C\t\\N\n+D\t1\n+A\t2\n+B\t3\n+C\t\\N\n+A 2\n+B 3\n+D 1\n+\\N\n+A 2\n+B 3\n+D 1\n+\\N\n+B\t3\t10\n+D\t1\t20\n+A\t2\t30\n+C\t\\N\t40\n+B\t3\t10\n+D\t1\t20\n+A\t2\t30\n+C\t\\N\t40\ndiff --git a/tests/queries/0_stateless/02943_order_by_all.sql b/tests/queries/0_stateless/02943_order_by_all.sql\nnew file mode 100644\nindex 000000000000..0756563946c3\n--- /dev/null\n+++ b/tests/queries/0_stateless/02943_order_by_all.sql\n@@ -0,0 +1,89 @@\n+-- Tests that sort expression ORDER BY ALL\n+\n+DROP TABLE IF EXISTS order_by_all;\n+\n+CREATE TABLE order_by_all\n+(\n+    a String,\n+    b Nullable(Int32),\n+    all UInt64,\n+)\n+ENGINE = Memory;\n+\n+INSERT INTO order_by_all VALUES ('B', 3, 10), ('C', NULL, 40), ('D', 1, 20), ('A', 2, 30);\n+\n+SELECT '-- no modifiers';\n+\n+SET allow_experimental_analyzer = 0;\n+SELECT a, b FROM order_by_all ORDER BY ALL;\n+SELECT b, a FROM order_by_all ORDER BY ALL;\n+\n+SET allow_experimental_analyzer = 1;\n+SELECT a, b FROM order_by_all ORDER BY ALL;\n+SELECT b, a FROM order_by_all ORDER BY ALL;\n+\n+SELECT '-- with ASC/DESC modifiers';\n+\n+SET allow_experimental_analyzer = 0;\n+SELECT a, b FROM order_by_all ORDER BY ALL ASC;\n+SELECT a, b FROM order_by_all ORDER BY ALL DESC;\n+\n+SET allow_experimental_analyzer = 1;\n+SELECT a, b FROM order_by_all ORDER BY ALL ASC;\n+SELECT a, b FROM order_by_all ORDER BY ALL DESC;\n+\n+SELECT '-- with NULLS FIRST/LAST modifiers';\n+\n+SET allow_experimental_analyzer = 0;\n+SELECT b, a FROM order_by_all ORDER BY ALL NULLS FIRST;\n+SELECT b, a FROM order_by_all ORDER BY ALL NULLS LAST;\n+\n+SET allow_experimental_analyzer = 1;\n+SELECT b, a FROM order_by_all ORDER BY ALL NULLS FIRST;\n+SELECT b, a FROM order_by_all ORDER BY ALL NULLS LAST;\n+\n+SELECT '-- what happens if some column \"all\" already exists?';\n+\n+-- columns\n+\n+SET allow_experimental_analyzer = 0;\n+SELECT a, b, all FROM order_by_all ORDER BY all;  -- { serverError UNEXPECTED_EXPRESSION }\n+SELECT a, b, all FROM order_by_all ORDER BY ALL;  -- { serverError UNEXPECTED_EXPRESSION }\n+SELECT a, b, all FROM order_by_all ORDER BY all SETTINGS enable_order_by_all = false;\n+\n+SET allow_experimental_analyzer = 1;\n+SELECT a, b, all FROM order_by_all ORDER BY all;  -- { serverError UNEXPECTED_EXPRESSION }\n+SELECT a, b, all FROM order_by_all ORDER BY ALL;  -- { serverError UNEXPECTED_EXPRESSION }\n+SELECT a, b, all FROM order_by_all ORDER BY all SETTINGS enable_order_by_all = false;\n+\n+-- column aliases\n+\n+SET allow_experimental_analyzer = 0;\n+SELECT a, b AS all FROM order_by_all ORDER BY all;  -- { serverError UNEXPECTED_EXPRESSION }\n+SELECT a, b AS all FROM order_by_all ORDER BY ALL;  -- { serverError UNEXPECTED_EXPRESSION }\n+SELECT a, b AS all FROM order_by_all ORDER BY all SETTINGS enable_order_by_all = false;\n+\n+SET allow_experimental_analyzer = 1;\n+SELECT a, b AS all FROM order_by_all ORDER BY all;  -- { serverError UNEXPECTED_EXPRESSION }\n+SELECT a, b AS all FROM order_by_all ORDER BY ALL;  -- { serverError UNEXPECTED_EXPRESSION }\n+SELECT a, b AS all FROM order_by_all ORDER BY all SETTINGS enable_order_by_all = false;\n+\n+-- expressions\n+\n+SET allow_experimental_analyzer = 0;\n+SELECT format('{} {}', a, b) AS all FROM order_by_all ORDER BY all;  -- { serverError UNEXPECTED_EXPRESSION }\n+SELECT format('{} {}', a, b) AS all FROM order_by_all ORDER BY ALL;  -- { serverError UNEXPECTED_EXPRESSION }\n+SELECT format('{} {}', a, b) AS all FROM order_by_all ORDER BY all SETTINGS enable_order_by_all = false;\n+\n+SET allow_experimental_analyzer = 1;\n+SELECT format('{} {}', a, b) AS all FROM order_by_all ORDER BY all;  -- { serverError UNEXPECTED_EXPRESSION }\n+SELECT format('{} {}', a, b) AS all FROM order_by_all ORDER BY ALL;  -- { serverError UNEXPECTED_EXPRESSION }\n+SELECT format('{} {}', a, b) AS all FROM order_by_all ORDER BY all SETTINGS enable_order_by_all = false;\n+\n+SET allow_experimental_analyzer = 0;\n+SELECT a, b, all FROM order_by_all ORDER BY all, a;\n+\n+SET allow_experimental_analyzer = 1;\n+SELECT a, b, all FROM order_by_all ORDER BY all, a;\n+\n+DROP TABLE order_by_all;\n",
  "problem_statement": "ORDER BY ALL\n**Use case**\r\n\r\nWriting tests, and some other cases when you need a deterministic ordering, but it does not matter what particular one.\r\n\r\n**Describe the solution you'd like**\r\n\r\nIt sorts by all selected columns, ascending.\r\n\n",
  "hints_text": "I'd like to take this task.",
  "created_at": "2023-12-14T16:27:19Z",
  "modified_files": [
    "docs/en/operations/settings/settings.md",
    "docs/en/sql-reference/statements/select/order-by.md",
    "docs/zh/sql-reference/statements/select/order-by.md",
    "src/Analyzer/Passes/QueryAnalysisPass.cpp",
    "src/Analyzer/QueryNode.h",
    "src/Analyzer/QueryTreeBuilder.cpp",
    "src/Core/Settings.h",
    "src/Interpreters/TreeRewriter.cpp",
    "src/Parsers/ASTSelectQuery.cpp",
    "src/Parsers/ASTSelectQuery.h",
    "src/Parsers/ParserSelectQuery.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02943_order_by_all.reference",
    "b/tests/queries/0_stateless/02943_order_by_all.sql"
  ]
}