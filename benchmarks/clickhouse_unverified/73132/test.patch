diff --git a/tests/queries/0_stateless/01861_explain_pipeline.sql b/tests/queries/0_stateless/01861_explain_pipeline.sql
index 99ea52ebfa4e..cd42e4bc5a17 100644
--- a/tests/queries/0_stateless/01861_explain_pipeline.sql
+++ b/tests/queries/0_stateless/01861_explain_pipeline.sql
@@ -1,5 +1,6 @@
 DROP TABLE IF EXISTS test;
 CREATE TABLE test(a Int, b Int) Engine=ReplacingMergeTree order by a SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';
+set optimize_on_insert = 0;
 INSERT INTO test select number, number from numbers(5);
 INSERT INTO test select number, number from numbers(5,2);
 set max_threads =1;
diff --git a/tests/queries/0_stateless/02780_final_streams_data_skipping_index.sql b/tests/queries/0_stateless/02780_final_streams_data_skipping_index.sql
index 7de7a58e2e10..56bc073ecc9e 100644
--- a/tests/queries/0_stateless/02780_final_streams_data_skipping_index.sql
+++ b/tests/queries/0_stateless/02780_final_streams_data_skipping_index.sql
@@ -12,6 +12,7 @@ ORDER BY key
 SETTINGS index_granularity=8192, min_bytes_for_wide_part=0, min_rows_for_wide_part=0;
 
 SYSTEM STOP MERGES data;
+SET optimize_on_insert = 0;
 
 -- generate 50% of marks that cannot be skipped with v1_index
 -- this will create a gap in marks
diff --git a/tests/queries/0_stateless/03283_optimize_on_insert_level.reference b/tests/queries/0_stateless/03283_optimize_on_insert_level.reference
new file mode 100644
index 000000000000..3cac4df7b40b
--- /dev/null
+++ b/tests/queries/0_stateless/03283_optimize_on_insert_level.reference
@@ -0,0 +1,14 @@
+all_1_1_1	1	2
+all_1_1_1	2	3
+all_2_2_1	4	3
+all_2_2_1	5	4
+0
+all_3_3_1
+all_4_4_1
+all_0_0_1	1	2
+all_0_0_1	2	3
+all_1_1_1	4	3
+all_1_1_1	5	4
+0
+all_3_3_1
+all_4_4_1
diff --git a/tests/queries/0_stateless/03283_optimize_on_insert_level.sql b/tests/queries/0_stateless/03283_optimize_on_insert_level.sql
new file mode 100644
index 000000000000..70b758df0768
--- /dev/null
+++ b/tests/queries/0_stateless/03283_optimize_on_insert_level.sql
@@ -0,0 +1,42 @@
+SET insert_keeper_fault_injection_probability = 0;
+SET max_threads = 4;
+
+DROP TABLE IF EXISTS t_optimize_level;
+
+CREATE TABLE t_optimize_level (a UInt64, b UInt64)
+ENGINE = ReplacingMergeTree ORDER BY a
+SETTINGS index_granularity = 1;
+
+SYSTEM STOP MERGES t_optimize_level;
+
+INSERT INTO t_optimize_level VALUES (1, 1) (1, 2) (2, 3);
+INSERT INTO t_optimize_level VALUES (4, 3) (5, 4);
+
+SELECT _part, a, b FROM t_optimize_level ORDER BY a;
+SELECT count() FROM (EXPLAIN PIPELINE SELECT a, b FROM t_optimize_level FINAL) WHERE explain LIKE '%Replacing%';
+
+ALTER TABLE t_optimize_level DETACH PARTITION tuple();
+ALTER TABLE t_optimize_level ATTACH PARTITION tuple();
+
+SELECT name FROM system.parts WHERE database = currentDatabase() AND table = 't_optimize_level' AND active;
+
+DROP TABLE t_optimize_level;
+
+CREATE TABLE t_optimize_level (a UInt64, b UInt64)
+ENGINE = ReplicatedReplacingMergeTree('/clickhouse/tables/{database}/03283_optimize_on_insert_level', '1') ORDER BY a
+SETTINGS index_granularity = 1;
+
+SYSTEM STOP MERGES t_optimize_level;
+
+INSERT INTO t_optimize_level VALUES (1, 1) (1, 2) (2, 3);
+INSERT INTO t_optimize_level VALUES (4, 3) (5, 4);
+
+SELECT _part, a, b FROM t_optimize_level ORDER BY a;
+SELECT count() FROM (EXPLAIN PIPELINE SELECT a, b FROM t_optimize_level FINAL) WHERE explain LIKE '%Replacing%';
+
+ALTER TABLE t_optimize_level DETACH PARTITION tuple();
+ALTER TABLE t_optimize_level ATTACH PARTITION tuple();
+
+SELECT name FROM system.parts WHERE database = currentDatabase() AND table = 't_optimize_level' AND active;
+
+DROP TABLE t_optimize_level;
