{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11389,
  "instance_id": "ClickHouse__ClickHouse-11389",
  "issue_numbers": [
    "11368"
  ],
  "base_commit": "58786f992988a16a8ea787fe624c791529343702",
  "patch": "diff --git a/src/Interpreters/HashJoin.cpp b/src/Interpreters/HashJoin.cpp\nindex 5fd2239d104a..9e2ad6647657 100644\n--- a/src/Interpreters/HashJoin.cpp\n+++ b/src/Interpreters/HashJoin.cpp\n@@ -35,6 +35,8 @@ namespace ErrorCodes\n {\n     extern const int BAD_TYPE_OF_FIELD;\n     extern const int NOT_IMPLEMENTED;\n+    extern const int NO_SUCH_COLUMN_IN_TABLE;\n+    extern const int INCOMPATIBLE_TYPE_OF_JOIN;\n     extern const int UNSUPPORTED_JOIN_KEYS;\n     extern const int LOGICAL_ERROR;\n     extern const int SET_SIZE_LIMIT_EXCEEDED;\n@@ -1230,7 +1232,7 @@ DataTypePtr HashJoin::joinGetReturnType(const String & column_name, bool or_null\n     std::shared_lock lock(data->rwlock);\n \n     if (!sample_block_with_columns_to_add.has(column_name))\n-        throw Exception(\"StorageJoin doesn't contain column \" + column_name, ErrorCodes::LOGICAL_ERROR);\n+        throw Exception(\"StorageJoin doesn't contain column \" + column_name, ErrorCodes::NO_SUCH_COLUMN_IN_TABLE);\n     auto elem = sample_block_with_columns_to_add.getByName(column_name);\n     if (or_null)\n         elem.type = makeNullable(elem.type);\n@@ -1254,7 +1256,7 @@ void HashJoin::joinGet(Block & block, const String & column_name, bool or_null)\n     std::shared_lock lock(data->rwlock);\n \n     if (key_names_right.size() != 1)\n-        throw Exception(\"joinGet only supports StorageJoin containing exactly one key\", ErrorCodes::LOGICAL_ERROR);\n+        throw Exception(\"joinGet only supports StorageJoin containing exactly one key\", ErrorCodes::UNSUPPORTED_JOIN_KEYS);\n \n     checkTypeOfKey(block, right_table_keys);\n \n@@ -1269,7 +1271,7 @@ void HashJoin::joinGet(Block & block, const String & column_name, bool or_null)\n         joinGetImpl(block, {elem}, std::get<MapsOne>(data->maps));\n     }\n     else\n-        throw Exception(\"joinGet only supports StorageJoin of type Left Any\", ErrorCodes::LOGICAL_ERROR);\n+        throw Exception(\"joinGet only supports StorageJoin of type Left Any\", ErrorCodes::INCOMPATIBLE_TYPE_OF_JOIN);\n }\n \n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01141_join_get_negative.reference b/tests/queries/0_stateless/01141_join_get_negative.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01141_join_get_negative.sql b/tests/queries/0_stateless/01141_join_get_negative.sql\nnew file mode 100644\nindex 000000000000..e165d34e4604\n--- /dev/null\n+++ b/tests/queries/0_stateless/01141_join_get_negative.sql\n@@ -0,0 +1,11 @@\n+DROP TABLE IF EXISTS t1;\n+DROP TABLE IF EXISTS t2;\n+\n+CREATE TABLE t1 (`s` String, `x` Array(UInt8), `k` UInt64) ENGINE = Join(ANY, LEFT, k);\n+CREATE TABLE t2 (`s` String, `x` Array(UInt8), `k` UInt64) ENGINE = Join(ANY, INNER, k);\n+\n+SELECT joinGet('t1', '', number) FROM numbers(2); -- { serverError 16 }\n+SELECT joinGet('t2', 's', number) FROM numbers(2); -- { serverError 264 }\n+\n+DROP TABLE t1;\n+DROP TABLE t2;\n",
  "problem_statement": "Logical error: 'StorageJoin doesn't contain column '.\n```\r\nATTACH TABLE join_any_left\r\n(\r\n    `s` String, \r\n    `x` Array(UInt8), \r\n    `k` UInt64\r\n)\r\nENGINE = Join(ANY, LEFT, k);\r\n\r\nSELECT joinGet('join_any_left', '', number) FROM numbers(3);\r\n```\r\n\r\nProbably should be a user error check somewhere above.\r\n\r\n@4ertus2 FYI\n",
  "hints_text": "",
  "created_at": "2020-06-02T20:28:13Z",
  "modified_files": [
    "src/Interpreters/HashJoin.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01141_join_get_negative.sql"
  ]
}