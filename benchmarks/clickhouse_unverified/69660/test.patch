diff --git a/tests/integration/helpers/cluster.py b/tests/integration/helpers/cluster.py
index 3c92df51ac44..cb28cae4c994 100644
--- a/tests/integration/helpers/cluster.py
+++ b/tests/integration/helpers/cluster.py
@@ -3944,11 +3944,11 @@ def wait_start(self, start_wait_sec):
         )
         logging.info(f"PS RESULT:
{ps_clickhouse}")
         pid = self.get_process_pid("clickhouse")
-        if pid is not None:
-            self.exec_in_container(
-                ["bash", "-c", f"gdb -batch -ex 'thread apply all bt full' -p {pid}"],
-                user="root",
-            )
+        # if pid is not None:
+        #     self.exec_in_container(
+        #         ["bash", "-c", f"gdb -batch -ex 'thread apply all bt full' -p {pid}"],
+        #         user="root",
+        #     )
         if last_err is not None:
             raise last_err
 
diff --git a/tests/integration/test_config_corresponding_root/configs/config.xml b/tests/integration/test_config_corresponding_root/configs/config.xml
index 9a38d02a0369..001a98837c4e 100644
--- a/tests/integration/test_config_corresponding_root/configs/config.xml
+++ b/tests/integration/test_config_corresponding_root/configs/config.xml
@@ -291,6 +291,8 @@
     <distributed_ddl>
         <!-- Path in ZooKeeper to queue with DDL queries -->
         <path>/clickhouse/task_queue/ddl</path>
+        <!-- Path in ZooKeeper to store running DDL hosts -->
+        <replicas_path>/clickhouse/task_queue/replicas</replicas_path>
 
         <!-- Settings from this profile will be used to execute DDL queries -->
         <!-- <profile>default</profile> -->
diff --git a/tests/integration/test_config_xml_full/configs/config.xml b/tests/integration/test_config_xml_full/configs/config.xml
index 80b6a702032e..81be2e48122b 100644
--- a/tests/integration/test_config_xml_full/configs/config.xml
+++ b/tests/integration/test_config_xml_full/configs/config.xml
@@ -849,6 +849,8 @@
     <distributed_ddl>
         <!-- Path in ZooKeeper to queue with DDL queries -->
         <path>/clickhouse/task_queue/ddl</path>
+        <!-- Path in ZooKeeper to store running DDL hosts -->
+        <replicas_path>/clickhouse/task_queue/replicas</replicas_path>
 
         <!-- Settings from this profile will be used to execute DDL queries -->
         <!-- <profile>default</profile> -->
diff --git a/tests/integration/test_ddl_on_cluster_stop_waiting_for_offline_hosts/__init__.py b/tests/integration/test_ddl_on_cluster_stop_waiting_for_offline_hosts/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/integration/test_ddl_on_cluster_stop_waiting_for_offline_hosts/configs/remote_servers.xml b/tests/integration/test_ddl_on_cluster_stop_waiting_for_offline_hosts/configs/remote_servers.xml
new file mode 100644
index 000000000000..c505345cf7fc
--- /dev/null
+++ b/tests/integration/test_ddl_on_cluster_stop_waiting_for_offline_hosts/configs/remote_servers.xml
@@ -0,0 +1,30 @@
+<clickhouse>
+    <remote_servers>
+        <test_cluster>
+            <shard>
+                <internal_replication>true</internal_replication>
+                <replica>
+                    <host>node1</host>
+                    <port>9000</port>
+                </replica>
+                <replica>
+                    <host>node2</host>
+                    <port>9000</port>
+                </replica>
+            </shard>
+            <shard>
+                <internal_replication>true</internal_replication>
+                <replica>
+                    <host>node3</host>
+                    <port>9000</port>
+                </replica>
+                <replica>
+                    <host>node4</host>
+                    <port>9000</port>
+                </replica>
+            </shard>
+        </test_cluster>
+    </remote_servers>
+
+    <allow_zookeeper_write>1</allow_zookeeper_write>
+</clickhouse>
diff --git a/tests/integration/test_ddl_on_cluster_stop_waiting_for_offline_hosts/test.py b/tests/integration/test_ddl_on_cluster_stop_waiting_for_offline_hosts/test.py
new file mode 100644
index 000000000000..06bdd6f21980
--- /dev/null
+++ b/tests/integration/test_ddl_on_cluster_stop_waiting_for_offline_hosts/test.py
@@ -0,0 +1,88 @@
+import time
+
+import pytest
+
+from helpers.cluster import ClickHouseCluster
+
+cluster = ClickHouseCluster(__file__)
+
+node1 = cluster.add_instance(
+    "node1",
+    main_configs=["configs/remote_servers.xml"],
+    with_zookeeper=True,
+    stay_alive=True,
+)
+node2 = cluster.add_instance(
+    "node2", main_configs=["configs/remote_servers.xml"], with_zookeeper=True
+)
+node3 = cluster.add_instance(
+    "node3", main_configs=["configs/remote_servers.xml"], with_zookeeper=True
+)
+node4 = cluster.add_instance(
+    "node4",
+    main_configs=["configs/remote_servers.xml"],
+    with_zookeeper=True,
+    stay_alive=True,
+)
+
+
+@pytest.fixture(scope="module")
+def started_cluster():
+    try:
+        cluster.start()
+        yield cluster
+
+    finally:
+        cluster.shutdown()
+
+
+def test_stop_waiting_for_offline_hosts(started_cluster):
+    timeout = 10
+    settings = {"distributed_ddl_task_timeout": timeout}
+
+    node1.query(
+        "DROP TABLE IF EXISTS test_table ON CLUSTER test_cluster SYNC",
+        settings=settings,
+    )
+
+    node1.query(
+        "CREATE TABLE test_table ON CLUSTER test_cluster (x Int) Engine=Memory",
+        settings=settings,
+    )
+
+    try:
+        node4.stop_clickhouse()
+
+        start = time.time()
+        assert "Code: 159. DB::Exception" in node1.query_and_get_error(
+            "DROP TABLE IF EXISTS test_table ON CLUSTER test_cluster SYNC",
+            settings=settings,
+        )
+        assert time.time() - start >= timeout
+
+        start = time.time()
+        assert "Code: 159. DB::Exception" in node1.query_and_get_error(
+            "CREATE TABLE test_table ON CLUSTER test_cluster (x Int) Engine=Memory",
+            settings=settings,
+        )
+        assert time.time() - start >= timeout
+
+        # set `distributed_ddl_output_mode` = `throw_only_active``
+        settings = {
+            "distributed_ddl_task_timeout": timeout,
+            "distributed_ddl_output_mode": "throw_only_active",
+        }
+
+        start = time.time()
+        node1.query(
+            "DROP TABLE IF EXISTS test_table ON CLUSTER test_cluster SYNC",
+            settings=settings,
+        )
+
+        start = time.time()
+        node1.query(
+            "CREATE TABLE test_table ON CLUSTER test_cluster (x Int) Engine=Memory",
+            settings=settings,
+        )
+    finally:
+        node4.start_clickhouse()
diff --git a/tests/integration/test_ddl_worker_replicas/__init__.py b/tests/integration/test_ddl_worker_replicas/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/integration/test_ddl_worker_replicas/configs/remote_servers.xml b/tests/integration/test_ddl_worker_replicas/configs/remote_servers.xml
new file mode 100644
index 000000000000..c505345cf7fc
--- /dev/null
+++ b/tests/integration/test_ddl_worker_replicas/configs/remote_servers.xml
@@ -0,0 +1,30 @@
+<clickhouse>
+    <remote_servers>
+        <test_cluster>
+            <shard>
+                <internal_replication>true</internal_replication>
+                <replica>
+                    <host>node1</host>
+                    <port>9000</port>
+                </replica>
+                <replica>
+                    <host>node2</host>
+                    <port>9000</port>
+                </replica>
+            </shard>
+            <shard>
+                <internal_replication>true</internal_replication>
+                <replica>
+                    <host>node3</host>
+                    <port>9000</port>
+                </replica>
+                <replica>
+                    <host>node4</host>
+                    <port>9000</port>
+                </replica>
+            </shard>
+        </test_cluster>
+    </remote_servers>
+
+    <allow_zookeeper_write>1</allow_zookeeper_write>
+</clickhouse>
diff --git a/tests/integration/test_ddl_worker_replicas/test.py b/tests/integration/test_ddl_worker_replicas/test.py
new file mode 100644
index 000000000000..5ba5f406e4fa
--- /dev/null
+++ b/tests/integration/test_ddl_worker_replicas/test.py
@@ -0,0 +1,77 @@
+import pytest
+
+from helpers.cluster import ClickHouseCluster
+
+cluster = ClickHouseCluster(__file__)
+
+node1 = cluster.add_instance(
+    "node1",
+    main_configs=["configs/remote_servers.xml"],
+    with_zookeeper=True,
+    stay_alive=True,
+)
+node2 = cluster.add_instance(
+    "node2", main_configs=["configs/remote_servers.xml"], with_zookeeper=True
+)
+node3 = cluster.add_instance(
+    "node3", main_configs=["configs/remote_servers.xml"], with_zookeeper=True
+)
+node4 = cluster.add_instance(
+    "node4",
+    main_configs=["configs/remote_servers.xml"],
+    with_zookeeper=True,
+    stay_alive=True,
+)
+
+
+@pytest.fixture(scope="module")
+def started_cluster():
+    try:
+        cluster.start()
+        yield cluster
+
+    finally:
+        cluster.shutdown()
+
+
+def test_ddl_worker_replicas(started_cluster):
+    for replica in ["node1:9000", "node2:9000", "node3:9000", "node4:9000"]:
+        # wait until the replicas path is created
+        node1.query_with_retry(
+            sql=f"SELECT count() FROM system.zookeeper WHERE path='/clickhouse/task_queue/replicas/{replica}'",
+            check_callback=lambda result: result == 1,
+        )
+
+        result = node1.query(
+            f"SELECT name, value, ephemeralOwner FROM system.zookeeper WHERE path='/clickhouse/task_queue/replicas/{replica}'"
+        ).strip()
+        print(f"result: {replica} {result}")
+
+        lines = list(result.split("
"))
+        assert len(lines) == 1
+        parts = list(lines[0].split("\t"))
+        assert len(parts) == 3
+        assert parts[0] == "active"
+        assert len(parts[1]) != 0
+        assert len(parts[2]) != 0
+
+    try:
+        node4.stop_clickhouse()
+
+        # wait for node4 active path is removed
+        node1.query_with_retry(
+            sql=f"SELECT count() FROM system.zookeeper WHERE path='/clickhouse/task_queue/replicas/node4:9000'",
+            check_callback=lambda result: result == 0,
+        )
+
+        result = node1.query_with_retry(
+            f"SELECT name, value, ephemeralOwner FROM system.zookeeper WHERE path='/clickhouse/task_queue/replicas/node4:9000'"
+        ).strip()
+
+        print(f"result: {replica} {result}")
+
+        lines = list(result.split("
"))
+        assert len(lines) == 1
+        assert len(lines[0]) == 0
+    finally:
+        node4.start_clickhouse()
diff --git a/tests/integration/test_https_replication/configs/config.xml b/tests/integration/test_https_replication/configs/config.xml
index 9a7a542b16ed..8c1cd9beeb2e 100644
--- a/tests/integration/test_https_replication/configs/config.xml
+++ b/tests/integration/test_https_replication/configs/config.xml
@@ -256,6 +256,8 @@
     <distributed_ddl>
         <!-- Path in ZooKeeper to queue with DDL queries -->
         <path>/clickhouse/task_queue/ddl</path>
+        <!-- Path in ZooKeeper to store running DDL hosts -->
+        <replicas_path>/clickhouse/task_queue/replicas</replicas_path>
 
         <!-- Settings from this profile will be used to execute DDL queries -->
         <!-- <profile>default</profile> -->
