diff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp
index 288e1e398f14..aa05e5821507 100644
--- a/src/Interpreters/executeQuery.cpp
+++ b/src/Interpreters/executeQuery.cpp
@@ -689,19 +689,7 @@ void executeQuery(
             if (set_result_details)
                 set_result_details(context.getClientInfo().current_query_id, out->getContentType(), format_name, DateLUT::instance().getTimeZone());
 
-            if (ast->as<ASTWatchQuery>())
-            {
-                /// For Watch query, flush data if block is empty (to send data to client).
-                auto flush_callback = [&out](const Block & block)
-                {
-                    if (block.rows() == 0)
-                        out->flush();
-                };
-
-                copyData(*streams.in, *out, [](){ return false; }, std::move(flush_callback));
-            }
-            else
-                copyData(*streams.in, *out);
+            copyData(*streams.in, *out, [](){ return false; }, [&out](const Block &) { out->flush(); });
         }
 
         if (pipeline.initialized())
@@ -733,6 +721,7 @@ void executeQuery(
             });
 
             auto out = context.getOutputFormatProcessor(format_name, *out_buf, pipeline.getHeader());
+            out->setAutoFlush();
 
             /// Save previous progress callback if any. TODO Do it more conveniently.
             auto previous_progress_callback = context.getProgressCallback();
diff --git a/src/Processors/Formats/IOutputFormat.cpp b/src/Processors/Formats/IOutputFormat.cpp
index ff4ac393471c..543a854f75e8 100644
--- a/src/Processors/Formats/IOutputFormat.cpp
+++ b/src/Processors/Formats/IOutputFormat.cpp
@@ -69,6 +69,9 @@ void IOutputFormat::work()
             break;
     }
 
+    if (auto_flush)
+        flush();
+
     has_input = false;
 }
 
diff --git a/src/Processors/Formats/IOutputFormat.h b/src/Processors/Formats/IOutputFormat.h
index 1137dd784465..71a0d2f00665 100644
--- a/src/Processors/Formats/IOutputFormat.h
+++ b/src/Processors/Formats/IOutputFormat.h
@@ -34,6 +34,9 @@ class IOutputFormat : public IProcessor
     bool finished = false;
     bool finalized = false;
 
+    /// Flush data on each consumed chunk. This is intented for interactive applications to output data as soon as it's ready.
+    bool auto_flush = false;
+
     RowsBeforeLimitCounterPtr rows_before_limit_counter;
 
     virtual void consume(Chunk) = 0;
@@ -50,6 +53,8 @@ class IOutputFormat : public IProcessor
     /// Flush output buffers if any.
     virtual void flush();
 
+    void setAutoFlush() { auto_flush = true; }
+
     /// Value for rows_before_limit_at_least field.
     virtual void setRowsBeforeLimit(size_t /*rows_before_limit*/) {}
 
