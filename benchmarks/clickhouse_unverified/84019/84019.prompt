You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Logical Error: Expected single dictionary argument for function
### Describe the bug

From this run: https://s3.amazonaws.com/clickhouse-test-reports/json.html?REF=master&sha=50f1402abbcafe8f84869dc6a61a58948a8a58a1&name_0=MasterCI&name_1=AST%20fuzzer%20%28amd_debug%29 Triggers since v25.2

### How to reproduce

Run Fiddle: https://fiddle.clickhouse.com/6e51f3cc-c7e0-43fe-b475-43ce7354401d

### Error message and/or stacktrace

Stack trace:

```
<Fatal> : Logical error: 'Expected single dictionary argument for function.'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. contrib/llvm-project/libcxx/include/__exception/exception.h:113: Poco::Exception::Exception(String const&, int) @ 0x000000001d4d28d2
1. src/Common/Exception.cpp:110: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x0000000011e6f1c6
2. src/Common/Exception.h:119: DB::Exception::Exception(PreformattedMessage&&, int) @ 0x000000000ba670ac
3. src/Common/Exception.h:137: DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x000000000ba70936
4. src/Functions/IFunction.cpp:83: DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001532bdd0
5. src/Functions/IFunction.cpp:498: DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x000000001532c5c2
6. src/Interpreters/ActionsDAG.cpp:823: DB::ActionsDAG::evaluatePartialResult(std::unordered_map<DB::ActionsDAG::Node const*, DB::ColumnWithTypeAndName, std::hash<DB::ActionsDAG::Node const*>, std::equal_to<DB::ActionsDAG::Node const*>, std::allocator<std::pair<DB::ActionsDAG::Node const* const, DB::ColumnWithTypeAndName>>>&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>> const&, unsigned long, bool) @ 0x00000000165f08ce
7. src/Interpreters/ActionsDAG.cpp:908: DB::ActionsDAG::updateHeader(DB::Block const&) const @ 0x00000000165ef7a1
8. src/Processors/Transforms/FilterTransform.cpp:49: DB::FilterTransform::transformHeader(DB::Block const&, DB::ActionsDAG const*, String const&, bool) @ 0x0000000019448dd8
9. src/Processors/QueryPlan/FilterStep.cpp:135: DB::FilterStep::FilterStep(DB::Block const&, DB::ActionsDAG, String, bool) @ 0x000000001969ee3b
10. contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:634: std::__unique_if<DB::FilterStep>::__unique_single std::make_unique[abi:se190107]<DB::FilterStep, DB::Block const&, DB::ActionsDAG, String const&, bool&>(DB::Block const&, DB::ActionsDAG&&, String const&, bool&) @ 0x00000000197b0a26
11. src/Processors/QueryPlan/Optimizations/optimizeJoin.cpp:318: DB::QueryPlanOptimizations::convertLogicalJoinToPhysical(DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&, DB::QueryPlanOptimizationSettings const&, std::optional<unsigned long>) @ 0x00000000197af3c4
12. src/Processors/QueryPlan/Optimizations/optimizeTree.cpp:165: DB::QueryPlanOptimizations::optimizeTreeSecondPass(DB::QueryPlanOptimizationSettings const&, DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x00000000197a5bd7
13. src/Processors/QueryPlan/QueryPlan.cpp:494: DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&, bool) @ 0x00000000196d5434
14. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:289: DB::InterpreterSelectQueryAnalyzer::buildQueryPipeline() @ 0x000000001709d704
15. src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:256: DB::InterpreterSelectQueryAnalyzer::execute() @ 0x000000001709d47c
16. src/Interpreters/executeQuery.cpp:1523: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*, std::shared_ptr<DB::IAST>&) @ 0x0000000017376c97
17. src/Interpreters/executeQuery.cpp:1715: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000017370ff1
18. src/Server/TCPHandler.cpp:687: DB::TCPHandler::runImpl() @ 0x00000000190fb846
19. src/Server/TCPHandler.cpp:2677: DB::TCPHandler::run() @ 0x0000000019114dc4
20. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000001d577b27
21. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000001d578025
22. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000001d52065f
23. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001d51e211
24. start_thread @ 0x00000000000a2ef1
25. __GI___clone3 @ 0x000000000013445c
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
