diff --git a/tests/queries/0_stateless/02456_async_inserts_logs.sh b/tests/queries/0_stateless/02456_async_inserts_logs.sh
index 43cd73d72313..3251c777dfcc 100755
--- a/tests/queries/0_stateless/02456_async_inserts_logs.sh
+++ b/tests/queries/0_stateless/02456_async_inserts_logs.sh
@@ -33,7 +33,12 @@ ${CLICKHOUSE_CLIENT} -q "
     SELECT table, format, bytes, rows, empty(exception), status,
     status = 'ParsingError' ? flush_time_microseconds = 0 : flush_time_microseconds > event_time_microseconds AS time_ok
     FROM system.asynchronous_insert_log
-    WHERE database = '$CLICKHOUSE_DATABASE' OR query ILIKE 'INSERT INTO FUNCTION%$CLICKHOUSE_DATABASE%'
+    WHERE
+    (
+        database = '$CLICKHOUSE_DATABASE' AND table = 't_async_inserts_logs'
+        OR query ILIKE 'INSERT INTO FUNCTION%$CLICKHOUSE_DATABASE%t_async_inserts_logs%'
+    )
+    AND data_kind = 'Parsed'
     ORDER BY table, status, format"
 
 ${CLICKHOUSE_CLIENT} -q "DROP TABLE t_async_inserts_logs"
diff --git a/tests/queries/0_stateless/02784_disable_async_with_dedup_correctly.reference b/tests/queries/0_stateless/02784_disable_async_with_dedup_correctly.reference
index 014be4ce1a9c..3999dc78a157 100644
--- a/tests/queries/0_stateless/02784_disable_async_with_dedup_correctly.reference
+++ b/tests/queries/0_stateless/02784_disable_async_with_dedup_correctly.reference
@@ -1,6 +1,6 @@
 0
 1
-1
+0
 1
 2
 3
diff --git a/tests/queries/0_stateless/02884_async_insert_native_protocol_1.reference b/tests/queries/0_stateless/02884_async_insert_native_protocol_1.reference
new file mode 100644
index 000000000000..44f4e24d7dfc
--- /dev/null
+++ b/tests/queries/0_stateless/02884_async_insert_native_protocol_1.reference
@@ -0,0 +1,7 @@
+NOT_IMPLEMENTED
+2
+1	aaa
+2	bbb
+3	ccc
+Ok	2	Preprocessed	JSONEachRow
+Ok	1	Parsed	JSONEachRow
diff --git a/tests/queries/0_stateless/02884_async_insert_native_protocol_1.sh b/tests/queries/0_stateless/02884_async_insert_native_protocol_1.sh
new file mode 100755
index 000000000000..82e2bb709f90
--- /dev/null
+++ b/tests/queries/0_stateless/02884_async_insert_native_protocol_1.sh
@@ -0,0 +1,41 @@
+#!/usr/bin/env bash
+# Tags: no-parallel
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+set -e
+
+$CLICKHOUSE_CLIENT -n -q "
+    DROP TABLE IF EXISTS t_async_insert_native_1;
+    CREATE TABLE t_async_insert_native_1 (id UInt64, s String) ENGINE = MergeTree ORDER BY id;
+"
+
+async_insert_options="--async_insert 1 --wait_for_async_insert 0 --async_insert_busy_timeout_ms 1000000"
+
+echo '{"id": 1, "s": "aaa"} {"id": 2, "s": "bbb"}' | $CLICKHOUSE_CLIENT $async_insert_options -q 'INSERT INTO t_async_insert_native_1 FORMAT JSONEachRow'
+$CLICKHOUSE_CLIENT $async_insert_options  -q 'INSERT INTO t_async_insert_native_1 FORMAT JSONEachRow {"id": 3, "s": "ccc"}'
+
+# Mixed inlined and external data is not supported.
+echo '{"id": 1, "s": "aaa"}' \
+    | $CLICKHOUSE_CLIENT $async_insert_options -q 'INSERT INTO t_async_insert_native_1 FORMAT JSONEachRow {"id": 2, "s": "bbb"}' 2>&1 \
+    | grep -o "NOT_IMPLEMENTED"
+
+$CLICKHOUSE_CLIENT -n -q "
+    SELECT sum(length(entries.bytes)) FROM system.asynchronous_inserts
+    WHERE database = '$CLICKHOUSE_DATABASE' AND table = 't_async_insert_native_1';
+
+    SYSTEM FLUSH ASYNC INSERT QUEUE;
+
+    SELECT * FROM t_async_insert_native_1 ORDER BY id;
+
+    SYSTEM FLUSH LOGS;
+
+    SELECT status, rows, data_kind, format
+    FROM system.asynchronous_insert_log
+    WHERE database = '$CLICKHOUSE_DATABASE' AND table = 't_async_insert_native_1'
+    ORDER BY event_time_microseconds;
+
+    DROP TABLE t_async_insert_native_1;
+"
diff --git a/tests/queries/0_stateless/02884_async_insert_native_protocol_2.reference b/tests/queries/0_stateless/02884_async_insert_native_protocol_2.reference
new file mode 100644
index 000000000000..75c015cfab87
--- /dev/null
+++ b/tests/queries/0_stateless/02884_async_insert_native_protocol_2.reference
@@ -0,0 +1,7 @@
+1	aaa
+2	bbb
+3	ccc
+4	ddd
+5	eee
+JSONEachRow	Ok	2	Preprocessed	JSONEachRow
+Values	Ok	3	Preprocessed	Values
diff --git a/tests/queries/0_stateless/02884_async_insert_native_protocol_2.sh b/tests/queries/0_stateless/02884_async_insert_native_protocol_2.sh
new file mode 100755
index 000000000000..b9b1854eaefd
--- /dev/null
+++ b/tests/queries/0_stateless/02884_async_insert_native_protocol_2.sh
@@ -0,0 +1,32 @@
+#!/usr/bin/env bash
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+set -e
+
+$CLICKHOUSE_CLIENT -n -q "
+    DROP TABLE IF EXISTS t_async_insert_native_2;
+    CREATE TABLE t_async_insert_native_2 (id UInt64, s String) ENGINE = MergeTree ORDER BY id;
+"
+
+async_insert_options="--async_insert 1 --wait_for_async_insert 1"
+
+echo '{"id": 1, "s": "aaa"} {"id": 2, "s": "bbb"}' | $CLICKHOUSE_CLIENT $async_insert_options -q 'INSERT INTO t_async_insert_native_2 FORMAT JSONEachRow' &
+echo "(3, 'ccc') (4, 'ddd') (5, 'eee')" | $CLICKHOUSE_CLIENT $async_insert_options -q 'INSERT INTO t_async_insert_native_2 FORMAT Values' &
+
+wait
+
+$CLICKHOUSE_CLIENT -n -q "
+    SELECT * FROM t_async_insert_native_2 ORDER BY id;
+
+    SYSTEM FLUSH LOGS;
+
+    SELECT format, status, rows, data_kind, format
+    FROM system.asynchronous_insert_log
+    WHERE database = '$CLICKHOUSE_DATABASE' AND table = 't_async_insert_native_2'
+    ORDER BY format;
+
+    DROP TABLE t_async_insert_native_2;
+"
diff --git a/tests/queries/0_stateless/02884_async_insert_native_protocol_3.reference b/tests/queries/0_stateless/02884_async_insert_native_protocol_3.reference
new file mode 100644
index 000000000000..8d5d28463083
--- /dev/null
+++ b/tests/queries/0_stateless/02884_async_insert_native_protocol_3.reference
@@ -0,0 +1,13 @@
+Native	3
+Values	1
+1	aaa
+2	bbb
+3	ccc
+4	ddd
+5	eee
+6	fff
+7	ggg
+JSONEachRow	Ok	2	Preprocessed	JSONEachRow
+Values	Ok	3	Preprocessed	Values
+CSV	Ok	1	Preprocessed	CSV
+Values	Ok	1	Parsed	Values
diff --git a/tests/queries/0_stateless/02884_async_insert_native_protocol_3.sh b/tests/queries/0_stateless/02884_async_insert_native_protocol_3.sh
new file mode 100755
index 000000000000..abe6be9e2bc6
--- /dev/null
+++ b/tests/queries/0_stateless/02884_async_insert_native_protocol_3.sh
@@ -0,0 +1,41 @@
+#!/usr/bin/env bash
+# Tags: no-parallel
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+set -e
+
+$CLICKHOUSE_CLIENT -n -q "
+    DROP TABLE IF EXISTS t_async_insert_native_3;
+    CREATE TABLE t_async_insert_native_3 (id UInt64, s String) ENGINE = MergeTree ORDER BY id;
+"
+
+async_insert_options="--async_insert 1 --wait_for_async_insert 0 --async_insert_busy_timeout_ms 1000000"
+
+echo '{"id": 1, "s": "aaa"} {"id": 2, "s": "bbb"}' | $CLICKHOUSE_CLIENT $async_insert_options -q 'INSERT INTO t_async_insert_native_3 FORMAT JSONEachRow'
+echo "(3, 'ccc') (4, 'ddd') (5, 'eee')" | $CLICKHOUSE_CLIENT $async_insert_options -q 'INSERT INTO t_async_insert_native_3 FORMAT Values'
+echo '6,"fff"' | $CLICKHOUSE_CLIENT $async_insert_options -q 'INSERT INTO t_async_insert_native_3 FORMAT CSV'
+$CLICKHOUSE_CLIENT $async_insert_options -q "INSERT INTO t_async_insert_native_3 VALUES (7, 'ggg')"
+
+wait
+
+$CLICKHOUSE_CLIENT -n -q "
+    SELECT format, length(entries.bytes) FROM system.asynchronous_inserts
+    WHERE database = '$CLICKHOUSE_DATABASE' AND table = 't_async_insert_native_3'
+    ORDER BY format;
+
+    SYSTEM FLUSH ASYNC INSERT QUEUE;
+
+    SELECT * FROM t_async_insert_native_3 ORDER BY id;
+
+    SYSTEM FLUSH LOGS;
+
+    SELECT format, status, rows, data_kind, format
+    FROM system.asynchronous_insert_log
+    WHERE database = '$CLICKHOUSE_DATABASE' AND table = 't_async_insert_native_3'
+    ORDER BY event_time_microseconds;
+
+    DROP TABLE t_async_insert_native_3;
+"
diff --git a/tests/queries/0_stateless/02884_async_insert_native_protocol_4.reference b/tests/queries/0_stateless/02884_async_insert_native_protocol_4.reference
new file mode 100644
index 000000000000..aaabca435478
--- /dev/null
+++ b/tests/queries/0_stateless/02884_async_insert_native_protocol_4.reference
@@ -0,0 +1,8 @@
+0
+1
+1
+2
+3
+4
+5
+Values	Ok	1	Preprocessed	Values
diff --git a/tests/queries/0_stateless/02884_async_insert_native_protocol_4.sh b/tests/queries/0_stateless/02884_async_insert_native_protocol_4.sh
new file mode 100755
index 000000000000..9118c11315c2
--- /dev/null
+++ b/tests/queries/0_stateless/02884_async_insert_native_protocol_4.sh
@@ -0,0 +1,34 @@
+#!/usr/bin/env bash
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+$CLICKHOUSE_CLIENT -n -q "
+    DROP TABLE IF EXISTS t_async_insert_native_4;
+    CREATE TABLE t_async_insert_native_4 (id UInt64) ENGINE = MergeTree ORDER BY id;
+"
+
+async_insert_options="--async_insert 1 --wait_for_async_insert 1"
+CLICKHOUSE_CLIENT_WITH_LOG=$(echo ${CLICKHOUSE_CLIENT} | sed 's/'"--send_logs_level=${CLICKHOUSE_CLIENT_SERVER_LOGS_LEVEL}"'/--send_logs_level=trace/g')
+
+echo "(1)" | $CLICKHOUSE_CLIENT_WITH_LOG $async_insert_options --async_insert_max_data_size 10 \
+     -q 'INSERT INTO t_async_insert_native_4 FORMAT Values' 2>&1 \
+     | grep -c "too much data"
+
+echo "(2) (3) (4) (5)" | $CLICKHOUSE_CLIENT_WITH_LOG $async_insert_options --async_insert_max_data_size 10 \
+    -q 'INSERT INTO t_async_insert_native_4 FORMAT Values' 2>&1 \
+    | grep -c "too much data"
+
+$CLICKHOUSE_CLIENT -n -q "
+    SELECT * FROM t_async_insert_native_4 ORDER BY id;
+
+    SYSTEM FLUSH LOGS;
+
+    SELECT format, status, rows, data_kind, format
+    FROM system.asynchronous_insert_log
+    WHERE database = '$CLICKHOUSE_DATABASE' AND table = 't_async_insert_native_4'
+    ORDER BY format;
+
+    DROP TABLE t_async_insert_native_4;
+"
diff --git a/tests/queries/0_stateless/02884_async_insert_skip_settings.reference b/tests/queries/0_stateless/02884_async_insert_skip_settings.reference
new file mode 100644
index 000000000000..318966ce93b4
--- /dev/null
+++ b/tests/queries/0_stateless/02884_async_insert_skip_settings.reference
@@ -0,0 +1,5 @@
+4
+1
+1
+2
+1
diff --git a/tests/queries/0_stateless/02884_async_insert_skip_settings.sql b/tests/queries/0_stateless/02884_async_insert_skip_settings.sql
new file mode 100644
index 000000000000..facd39d10790
--- /dev/null
+++ b/tests/queries/0_stateless/02884_async_insert_skip_settings.sql
@@ -0,0 +1,45 @@
+-- Tags: no-parallel
+
+DROP TABLE IF EXISTS t_async_insert_skip_settings SYNC;
+
+CREATE TABLE t_async_insert_skip_settings (id UInt64)
+ENGINE = ReplicatedMergeTree('/clickhouse/{database}/tables/t_async_insert_skip_settings', '1')
+ORDER BY id;
+
+SET async_insert = 1;
+SET async_insert_deduplicate = 1;
+SET wait_for_async_insert = 0;
+SET async_insert_busy_timeout_ms = 100000;
+
+SET insert_deduplication_token = '1';
+SET log_comment = 'async_insert_skip_settings_1';
+INSERT INTO t_async_insert_skip_settings VALUES (1);
+
+SET insert_deduplication_token = '2';
+SET log_comment = 'async_insert_skip_settings_2';
+INSERT INTO t_async_insert_skip_settings VALUES (1);
+
+SET insert_deduplication_token = '1';
+SET log_comment = 'async_insert_skip_settings_3';
+INSERT INTO t_async_insert_skip_settings VALUES (2);
+
+SET insert_deduplication_token = '3';
+SET log_comment = 'async_insert_skip_settings_4';
+INSERT INTO t_async_insert_skip_settings VALUES (2);
+
+SYSTEM FLUSH LOGS;
+
+SELECT length(entries.bytes) FROM system.asynchronous_inserts
+WHERE database = currentDatabase() AND table = 't_async_insert_skip_settings'
+ORDER BY first_update;
+
+SYSTEM FLUSH ASYNC INSERT QUEUE;
+
+SELECT * FROM t_async_insert_skip_settings ORDER BY id;
+
+SYSTEM FLUSH LOGS;
+
+SELECT uniqExact(flush_query_id) FROM system.asynchronous_insert_log
+WHERE database = currentDatabase() AND table = 't_async_insert_skip_settings';
+
+DROP TABLE t_async_insert_skip_settings SYNC;
