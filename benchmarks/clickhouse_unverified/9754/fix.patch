diff --git a/dbms/src/Interpreters/PartLog.cpp b/dbms/src/Interpreters/PartLog.cpp
index d77bb3fed597..c797ad8a8a9b 100644
--- a/dbms/src/Interpreters/PartLog.cpp
+++ b/dbms/src/Interpreters/PartLog.cpp
@@ -50,6 +50,7 @@ Block PartLogElement::createBlock()
         {ColumnUInt64::create(), std::make_shared<DataTypeUInt64>(),   "bytes_uncompressed"}, // Result bytes
         {ColumnUInt64::create(), std::make_shared<DataTypeUInt64>(),   "read_rows"},
         {ColumnUInt64::create(), std::make_shared<DataTypeUInt64>(),   "read_bytes"},
+        {ColumnUInt64::create(), std::make_shared<DataTypeUInt64>(),   "peak_memory_usage"},
 
         /// Is there an error during the execution or commit
         {ColumnUInt16::create(), std::make_shared<DataTypeUInt16>(),   "error"},
@@ -87,6 +88,7 @@ void PartLogElement::appendToBlock(Block & block) const
     columns[i++]->insert(bytes_uncompressed);
     columns[i++]->insert(rows_read);
     columns[i++]->insert(bytes_read_uncompressed);
+    columns[i++]->insert(peak_memory_usage);
 
     columns[i++]->insert(error);
     columns[i++]->insert(exception);
diff --git a/dbms/src/Interpreters/PartLog.h b/dbms/src/Interpreters/PartLog.h
index 4c4930ccefa6..b84138159a22 100644
--- a/dbms/src/Interpreters/PartLog.h
+++ b/dbms/src/Interpreters/PartLog.h
@@ -40,11 +40,13 @@ struct PartLogElement
     UInt64 bytes_uncompressed = 0;
     UInt64 rows_read = 0;
     UInt64 bytes_read_uncompressed = 0;
+    UInt64 peak_memory_usage = 0;
 
     /// Was the operation successful?
     UInt16 error = 0;
     String exception;
 
+
     static std::string name() { return "PartLog"; }
 
     static Block createBlock();
diff --git a/dbms/src/Storages/MergeTree/MergeTreeData.cpp b/dbms/src/Storages/MergeTree/MergeTreeData.cpp
index f7e9cb801036..4967f0ff2ae6 100644
--- a/dbms/src/Storages/MergeTree/MergeTreeData.cpp
+++ b/dbms/src/Storages/MergeTree/MergeTreeData.cpp
@@ -3755,6 +3755,7 @@ try
 
         part_log_elem.rows = (*merge_entry)->rows_written;
         part_log_elem.bytes_uncompressed = (*merge_entry)->bytes_written_uncompressed;
+        part_log_elem.peak_memory_usage = (*merge_entry)->memory_tracker.getPeak();
     }
 
     part_log->add(part_log_elem);
diff --git a/dbms/src/Storages/MergeTree/StorageFromMergeTreeDataPart.h b/dbms/src/Storages/MergeTree/StorageFromMergeTreeDataPart.h
index c44c744efafc..0b430439aae1 100644
--- a/dbms/src/Storages/MergeTree/StorageFromMergeTreeDataPart.h
+++ b/dbms/src/Storages/MergeTree/StorageFromMergeTreeDataPart.h
@@ -53,6 +53,11 @@ class StorageFromMergeTreeDataPart : public ext::shared_ptr_helper<StorageFromMe
     }
 
 
+    bool hasSortingKey() const { return part->storage.hasSortingKey(); }
+
+    Names getSortingKeyColumns() const override { return part->storage.getSortingKeyColumns(); }
+
+
 protected:
     StorageFromMergeTreeDataPart(const MergeTreeData::DataPartPtr & part_)
         : IStorage(getIDFromPart(part_), part_->storage.getVirtuals())
diff --git a/dbms/src/Storages/ReadInOrderOptimizer.cpp b/dbms/src/Storages/ReadInOrderOptimizer.cpp
index 667ce0959327..c05acfa71ab8 100644
--- a/dbms/src/Storages/ReadInOrderOptimizer.cpp
+++ b/dbms/src/Storages/ReadInOrderOptimizer.cpp
@@ -1,5 +1,6 @@
 #include <Storages/ReadInOrderOptimizer.h>
 #include <Storages/MergeTree/MergeTreeData.h>
+#include <Storages/MergeTree/StorageFromMergeTreeDataPart.h>
 #include <Interpreters/AnalyzedJoin.h>
 #include <Functions/IFunction.h>
 
@@ -31,14 +32,28 @@ ReadInOrderOptimizer::ReadInOrderOptimizer(
 
 InputSortingInfoPtr ReadInOrderOptimizer::getInputOrder(const StoragePtr & storage) const
 {
-    const MergeTreeData * merge_tree = dynamic_cast<const MergeTreeData *>(storage.get());
-    if (!merge_tree || !merge_tree->hasSortingKey())
+    Names sorting_key_columns;
+    if (const auto * merge_tree = dynamic_cast<const MergeTreeData *>(storage.get()))
+    {
+        if (!merge_tree->hasSortingKey())
+            return {};
+        sorting_key_columns = merge_tree->getSortingKeyColumns();
+    }
+    else if (const auto * part = dynamic_cast<const StorageFromMergeTreeDataPart *>(storage.get()))
+    {
+        if (!part->hasSortingKey())
+            return {};
+        sorting_key_columns = part->getSortingKeyColumns();
+    }
+    else /// Inapplicable storage type
+    {
         return {};
+    }
+
 
     SortDescription order_key_prefix_descr;
     int read_direction = required_sort_description.at(0).direction;
 
-    const auto & sorting_key_columns = merge_tree->getSortingKeyColumns();
     size_t prefix_size = std::min(required_sort_description.size(), sorting_key_columns.size());
 
     for (size_t i = 0; i < prefix_size; ++i)
