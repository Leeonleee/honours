diff --git a/src/Core/SettingsCollectionImpl.h b/src/Core/SettingsCollectionImpl.h
index 8210b04e2dac..877567a7caf3 100644
--- a/src/Core/SettingsCollectionImpl.h
+++ b/src/Core/SettingsCollectionImpl.h
@@ -7,6 +7,8 @@
   */
 
 #include <Common/SettingsChanges.h>
+#include <Common/FieldVisitors.h>
+
 
 namespace DB
 {
@@ -91,7 +93,16 @@ Field SettingsCollection<Derived>::const_reference::getValue() const
 template <class Derived>
 Field SettingsCollection<Derived>::valueToCorrespondingType(size_t index, const Field & value)
 {
-    return members()[index].value_to_corresponding_type(value);
+    try
+    {
+        return members()[index].value_to_corresponding_type(value);
+    }
+    catch (Exception & e)
+    {
+        e.addMessage(fmt::format("in attempt to set the value of setting to {}",
+                                 applyVisitor(FieldVisitorToString(), value)));
+        throw;
+    }
 }
 
 
diff --git a/src/Interpreters/Context.cpp b/src/Interpreters/Context.cpp
index 1431f3fd62c6..cb780443e03a 100644
--- a/src/Interpreters/Context.cpp
+++ b/src/Interpreters/Context.cpp
@@ -982,7 +982,16 @@ void Context::setSetting(const StringRef & name, const Field & value)
 
 void Context::applySettingChange(const SettingChange & change)
 {
-    setSetting(change.name, change.value);
+    try
+    {
+        setSetting(change.name, change.value);
+    }
+    catch (Exception & e)
+    {
+        e.addMessage(fmt::format("in attempt to set the value of setting '{}' to {}",
+                                 change.name, applyVisitor(FieldVisitorToString(), change.value)));
+        throw;
+    }
 }
 
 
diff --git a/src/Server/HTTPHandler.cpp b/src/Server/HTTPHandler.cpp
index 84d23f10a55e..e866af2f49be 100644
--- a/src/Server/HTTPHandler.cpp
+++ b/src/Server/HTTPHandler.cpp
@@ -430,6 +430,10 @@ void HTTPHandler::processQuery(
 
     auto param_could_be_skipped = [&] (const String & name)
     {
+        /// Empty parameter appears when URL like ?&a=b or a=b&&c=d. Just skip them for user's convenience.
+        if (name.empty())
+            return true;
+
         if (reserved_param_names.count(name))
             return true;
 
