diff --git a/src/Storages/StorageLog.cpp b/src/Storages/StorageLog.cpp
index 7d445c0d7ec0..f2eca42ed0b8 100644
--- a/src/Storages/StorageLog.cpp
+++ b/src/Storages/StorageLog.cpp
@@ -1104,7 +1104,7 @@ void registerStorageLog(StorageFactory & factory)
             throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, "Engine {} doesn't support any arguments ({} given)",
                 args.engine_name, args.engine_args.size());
 
-        String disk_name = getDiskName(*args.storage_def);
+        String disk_name = getDiskName(*args.storage_def, args.getContext());
         DiskPtr disk = args.getContext()->getDisk(disk_name);
 
         return std::make_shared<StorageLog>(
diff --git a/src/Storages/StorageLogSettings.cpp b/src/Storages/StorageLogSettings.cpp
index 900e1070eacf..71039f0ecd11 100644
--- a/src/Storages/StorageLogSettings.cpp
+++ b/src/Storages/StorageLogSettings.cpp
@@ -1,18 +1,42 @@
 #include "StorageLogSettings.h"
+#include <Disks/StoragePolicy.h>
+#include <Interpreters/Context.h>
 #include <Parsers/ASTCreateQuery.h>
 #include <Parsers/ASTSetQuery.h>
 
 namespace DB
 {
-String getDiskName(ASTStorage & storage_def)
+
+namespace ErrorCodes
+{
+    extern const int INVALID_SETTING_VALUE;
+}
+
+String getDiskName(ASTStorage & storage_def, ContextPtr context)
 {
     if (storage_def.settings)
     {
         SettingsChanges changes = storage_def.settings->changes;
-        for (const auto & change : changes)
-            if (change.name == "disk")
-                return change.value.safeGet<String>();
+
+        const auto disk_change
+            = std::find_if(changes.begin(), changes.end(), [&](const SettingChange & change) { return change.name == "disk"; });
+        const auto storage_policy_change
+            = std::find_if(changes.begin(), changes.end(), [&](const SettingChange & change) { return change.name == "storage_policy"; });
+
+        if (disk_change != changes.end() && storage_policy_change != changes.end())
+            throw Exception(
+                ErrorCodes::INVALID_SETTING_VALUE, "Could not specify `disk` and `storage_policy` at the same time for storage Log Family");
+
+        if (disk_change != changes.end())
+            return disk_change->value.safeGet<String>();
+
+        if (storage_policy_change != changes.end())
+        {
+            auto policy = context->getStoragePolicy(storage_policy_change->value.safeGet<String>());
+            return policy->getDisks()[0]->getName();
+        }
     }
+
     return "default";
 }
 
diff --git a/src/Storages/StorageLogSettings.h b/src/Storages/StorageLogSettings.h
index 0903c034ec66..fa8bb2823600 100644
--- a/src/Storages/StorageLogSettings.h
+++ b/src/Storages/StorageLogSettings.h
@@ -5,6 +5,8 @@
 namespace DB
 {
     class ASTStorage;
+    class Context;
+    using ContextPtr = std::shared_ptr<const Context>;
 
-    String getDiskName(ASTStorage & storage_def);
+    String getDiskName(ASTStorage & storage_def, ContextPtr context);
 }
diff --git a/src/Storages/StorageStripeLog.cpp b/src/Storages/StorageStripeLog.cpp
index be5045b884f8..870f6b96ae66 100644
--- a/src/Storages/StorageStripeLog.cpp
+++ b/src/Storages/StorageStripeLog.cpp
@@ -678,7 +678,7 @@ void registerStorageStripeLog(StorageFactory & factory)
             throw Exception(ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH, "Engine {} doesn't support any arguments ({} given)",
                 args.engine_name, args.engine_args.size());
 
-        String disk_name = getDiskName(*args.storage_def);
+        String disk_name = getDiskName(*args.storage_def, args.getContext());
         DiskPtr disk = args.getContext()->getDisk(disk_name);
 
         return std::make_shared<StorageStripeLog>(
