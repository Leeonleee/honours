diff --git a/src/Planner/Planner.cpp b/src/Planner/Planner.cpp
index d24aebafa181..f165cb1b28e7 100644
--- a/src/Planner/Planner.cpp
+++ b/src/Planner/Planner.cpp
@@ -743,15 +743,17 @@ void addWithFillStepIfNeeded(QueryPlan & query_plan,
     const PlannerContextPtr & planner_context,
     const QueryNode & query_node)
 {
-    const auto & sort_description = query_analysis_result.sort_description;
-
     NameSet column_names_with_fill;
     SortDescription fill_description;
 
-    for (const auto & description : sort_description)
+    const auto & header = query_plan.getCurrentHeader();
+
+    for (const auto & description : query_analysis_result.sort_description)
     {
         if (description.with_fill)
         {
+            if (!header.findByName(description.column_name))
+                throw Exception(ErrorCodes::LOGICAL_ERROR, "Filling column {} is not present in the block {}", description.column_name, header.dumpNames());
             fill_description.push_back(description);
             column_names_with_fill.insert(description.column_name);
         }
@@ -765,7 +767,7 @@ void addWithFillStepIfNeeded(QueryPlan & query_plan,
     if (query_node.hasInterpolate())
     {
         ActionsDAG interpolate_actions_dag;
-        auto query_plan_columns = query_plan.getCurrentHeader().getColumnsWithTypeAndName();
+        auto query_plan_columns = header.getColumnsWithTypeAndName();
         for (auto & query_plan_column : query_plan_columns)
         {
             /// INTERPOLATE actions dag input columns must be non constant
@@ -831,9 +833,15 @@ void addWithFillStepIfNeeded(QueryPlan & query_plan,
                 /// To fix this, we prepend a rename : 'Hello'_String -> s
                 if (const auto * /*constant_node*/ _ = interpolate_node_typed.getExpression()->as<const ConstantNode>())
                 {
+                    const auto & name = interpolate_node_typed.getExpressionName();
                     const auto * node = &rename_dag.addInput(alias_node->result_name, alias_node->result_type);
-                    node = &rename_dag.addAlias(*node, interpolate_node_typed.getExpressionName());
+                    node = &rename_dag.addAlias(*node, name);
                     rename_dag.getOutputs().push_back(node);
+
+                    /// Interpolate DAG should contain INPUT with same name to ensure a proper merging
+                    const auto & inputs = interpolate_actions_dag.getInputs();
+                    if (std::ranges::find_if(inputs, [&name](const auto & input){ return input->result_name == name; }) == inputs.end())
+                        interpolate_actions_dag.addInput(name, interpolate_node_typed.getExpression()->getResultType());
                 }
             }
 
@@ -850,8 +858,8 @@ void addWithFillStepIfNeeded(QueryPlan & query_plan,
     const auto & query_context = planner_context->getQueryContext();
     const Settings & settings = query_context->getSettingsRef();
     auto filling_step = std::make_unique<FillingStep>(
-        query_plan.getCurrentHeader(),
-        sort_description,
+        header,
+        query_analysis_result.sort_description,
         std::move(fill_description),
         interpolate_description,
         settings[Setting::use_with_fill_by_sorting_prefix]);
diff --git a/src/Processors/Transforms/FillingTransform.cpp b/src/Processors/Transforms/FillingTransform.cpp
index 82e5f9b7844a..fd5865dae880 100644
--- a/src/Processors/Transforms/FillingTransform.cpp
+++ b/src/Processors/Transforms/FillingTransform.cpp
@@ -206,12 +206,14 @@ static bool tryConvertFields(FillColumnDescription & descr, const DataTypePtr &
     return true;
 }
 
-SortDescription duduplicateSortDescription(const SortDescription & sort_description)
+SortDescription deduplicateSortDescription(const SortDescription & sort_description, const Block & header)
 {
     SortDescription result;
     std::unordered_set<std::string> unique_columns;
     for (const auto & desc : sort_description)
     {
+        if (header.findByName(desc.column_name) == nullptr)
+            continue;
         const auto & [_, inserted] = unique_columns.insert(desc.column_name);
         if (!inserted)
             continue;
@@ -227,7 +229,7 @@ FillingTransform::FillingTransform(
     InterpolateDescriptionPtr interpolate_description_,
     const bool use_with_fill_by_sorting_prefix_)
     : ISimpleTransform(header_, transformHeader(header_, fill_description_), true)
-    , sort_description(duduplicateSortDescription(sort_description_))
+    , sort_description(deduplicateSortDescription(sort_description_, header_))
     , fill_description(fill_description_)
     , interpolate_description(interpolate_description_)
     , filling_row(fill_description_)
