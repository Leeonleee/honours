diff --git a/dbms/src/Core/Settings.h b/dbms/src/Core/Settings.h
index ffc575e1eb6c..a3b94ad035b7 100644
--- a/dbms/src/Core/Settings.h
+++ b/dbms/src/Core/Settings.h
@@ -397,6 +397,7 @@ struct Settings : public SettingsCollection<Settings>
     \
     M(SettingBool, partial_revokes, false, "Makes it possible to revoke privileges partially.", 0) \
     M(SettingBool, deduplicate_blocks_in_dependent_materialized_views, false, "Should deduplicate blocks for materialized views if the block is not a duplicate for the table. Use true to always deduplicate in dependent tables.", 0) \
+    M(SettingBool, use_compact_format_in_distributed_parts_names, false, "Changes format of directories names for distributed table insert parts.", 0) \
     \
     /** Obsolete settings that do nothing but left for compatibility reasons. Remove each one after half a year of obsolescence. */ \
     \
diff --git a/dbms/src/Interpreters/Cluster.cpp b/dbms/src/Interpreters/Cluster.cpp
index 97e8b7432bf1..f1790249cc02 100644
--- a/dbms/src/Interpreters/Cluster.cpp
+++ b/dbms/src/Interpreters/Cluster.cpp
@@ -135,11 +135,22 @@ std::pair<String, UInt16> Cluster::Address::fromString(const String & host_port_
 }
 
 
-String Cluster::Address::toFullString() const
+String Cluster::Address::toFullString(bool use_compact_format) const
 {
-    return
-        ((shard_index == 0) ? "" : "shard" + std::to_string(shard_index)) +
-        ((replica_index == 0) ? "" : "_replica" + std::to_string(replica_index));
+    if (use_compact_format)
+    {
+        return ((shard_index == 0) ? "" : "shard" + std::to_string(shard_index))
+            + ((replica_index == 0) ? "" : "_replica" + std::to_string(replica_index));
+    }
+    else
+    {
+        return
+            escapeForFileName(user)
+            + (password.empty() ? "" : (':' + escapeForFileName(password))) + '@'
+            + escapeForFileName(host_name) + ':' + std::to_string(port)
+            + (default_database.empty() ? "" : ('#' + escapeForFileName(default_database)))
+            + ((secure == Protocol::Secure::Enable) ? "+secure" : "");
+    }
 }
 
 Cluster::Address Cluster::Address::fromFullString(const String & full_string)
@@ -333,7 +344,7 @@ Cluster::Cluster(const Poco::Util::AbstractConfiguration & config, const Setting
                     {
                         if (internal_replication)
                         {
-                            auto dir_name = replica_addresses.back().toFullString();
+                            auto dir_name = replica_addresses.back().toFullString(settings.use_compact_format_in_distributed_parts_names);
                             if (first)
                                 dir_name_for_internal_replication = dir_name;
                             else
diff --git a/dbms/src/Interpreters/Cluster.h b/dbms/src/Interpreters/Cluster.h
index eba046994eb7..b029580969fd 100644
--- a/dbms/src/Interpreters/Cluster.h
+++ b/dbms/src/Interpreters/Cluster.h
@@ -74,8 +74,17 @@ class Cluster
         Protocol::Secure secure = Protocol::Secure::Disable;
 
         Address() = default;
-        Address(const Poco::Util::AbstractConfiguration & config, const String & config_prefix, UInt32 shard_index_ = 0, UInt32 replica_index_ = 0);
-        Address(const String & host_port_, const String & user_, const String & password_, UInt16 clickhouse_port, bool secure_ = false);
+        Address(
+            const Poco::Util::AbstractConfiguration & config,
+            const String & config_prefix,
+            UInt32 shard_index_ = 0,
+            UInt32 replica_index_ = 0);
+        Address(
+            const String & host_port_,
+            const String & user_,
+            const String & password_,
+            UInt16 clickhouse_port,
+            bool secure_ = false);
 
         /// Returns 'escaped_host_name:port'
         String toString() const;
@@ -87,8 +96,10 @@ class Cluster
 
         static std::pair<String, UInt16> fromString(const String & host_port_string);
 
-        /// Returns escaped shard{shard_index}_replica{replica_index}
-        String toFullString() const;
+        /// Returns escaped shard{shard_index}_replica{replica_index} or escaped
+        /// user:password@resolved_host_address:resolved_host_port#default_database
+        /// depending on use_compact_format flag
+        String toFullString(bool use_compact_format) const;
 
         /// Returns address with only shard index and replica index or full address without shard index and replica index
         static Address fromFullString(const String & address_full_string);
diff --git a/dbms/src/Storages/Distributed/DistributedBlockOutputStream.cpp b/dbms/src/Storages/Distributed/DistributedBlockOutputStream.cpp
index 4430b4d391aa..85fcb3c2766d 100644
--- a/dbms/src/Storages/Distributed/DistributedBlockOutputStream.cpp
+++ b/dbms/src/Storages/Distributed/DistributedBlockOutputStream.cpp
@@ -530,7 +530,7 @@ void DistributedBlockOutputStream::writeAsyncImpl(const Block & block, const siz
         std::vector<std::string> dir_names;
         for (const auto & address : cluster->getShardsAddresses()[shard_id])
             if (!address.is_local)
-                dir_names.push_back(address.toFullString());
+                dir_names.push_back(address.toFullString(context.getSettingsRef().use_compact_format_in_distributed_parts_names));
 
         if (!dir_names.empty())
             writeToShard(block, dir_names);
