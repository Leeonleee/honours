{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 9653,
  "instance_id": "ClickHouse__ClickHouse-9653",
  "issue_numbers": [
    "9647"
  ],
  "base_commit": "e3782d80e392129389d7bac47d83b798c5478500",
  "patch": "diff --git a/dbms/src/Core/Settings.h b/dbms/src/Core/Settings.h\nindex ffc575e1eb6c..a3b94ad035b7 100644\n--- a/dbms/src/Core/Settings.h\n+++ b/dbms/src/Core/Settings.h\n@@ -397,6 +397,7 @@ struct Settings : public SettingsCollection<Settings>\n     \\\n     M(SettingBool, partial_revokes, false, \"Makes it possible to revoke privileges partially.\", 0) \\\n     M(SettingBool, deduplicate_blocks_in_dependent_materialized_views, false, \"Should deduplicate blocks for materialized views if the block is not a duplicate for the table. Use true to always deduplicate in dependent tables.\", 0) \\\n+    M(SettingBool, use_compact_format_in_distributed_parts_names, false, \"Changes format of directories names for distributed table insert parts.\", 0) \\\n     \\\n     /** Obsolete settings that do nothing but left for compatibility reasons. Remove each one after half a year of obsolescence. */ \\\n     \\\ndiff --git a/dbms/src/Interpreters/Cluster.cpp b/dbms/src/Interpreters/Cluster.cpp\nindex 97e8b7432bf1..f1790249cc02 100644\n--- a/dbms/src/Interpreters/Cluster.cpp\n+++ b/dbms/src/Interpreters/Cluster.cpp\n@@ -135,11 +135,22 @@ std::pair<String, UInt16> Cluster::Address::fromString(const String & host_port_\n }\n \n \n-String Cluster::Address::toFullString() const\n+String Cluster::Address::toFullString(bool use_compact_format) const\n {\n-    return\n-        ((shard_index == 0) ? \"\" : \"shard\" + std::to_string(shard_index)) +\n-        ((replica_index == 0) ? \"\" : \"_replica\" + std::to_string(replica_index));\n+    if (use_compact_format)\n+    {\n+        return ((shard_index == 0) ? \"\" : \"shard\" + std::to_string(shard_index))\n+            + ((replica_index == 0) ? \"\" : \"_replica\" + std::to_string(replica_index));\n+    }\n+    else\n+    {\n+        return\n+            escapeForFileName(user)\n+            + (password.empty() ? \"\" : (':' + escapeForFileName(password))) + '@'\n+            + escapeForFileName(host_name) + ':' + std::to_string(port)\n+            + (default_database.empty() ? \"\" : ('#' + escapeForFileName(default_database)))\n+            + ((secure == Protocol::Secure::Enable) ? \"+secure\" : \"\");\n+    }\n }\n \n Cluster::Address Cluster::Address::fromFullString(const String & full_string)\n@@ -333,7 +344,7 @@ Cluster::Cluster(const Poco::Util::AbstractConfiguration & config, const Setting\n                     {\n                         if (internal_replication)\n                         {\n-                            auto dir_name = replica_addresses.back().toFullString();\n+                            auto dir_name = replica_addresses.back().toFullString(settings.use_compact_format_in_distributed_parts_names);\n                             if (first)\n                                 dir_name_for_internal_replication = dir_name;\n                             else\ndiff --git a/dbms/src/Interpreters/Cluster.h b/dbms/src/Interpreters/Cluster.h\nindex eba046994eb7..b029580969fd 100644\n--- a/dbms/src/Interpreters/Cluster.h\n+++ b/dbms/src/Interpreters/Cluster.h\n@@ -74,8 +74,17 @@ class Cluster\n         Protocol::Secure secure = Protocol::Secure::Disable;\n \n         Address() = default;\n-        Address(const Poco::Util::AbstractConfiguration & config, const String & config_prefix, UInt32 shard_index_ = 0, UInt32 replica_index_ = 0);\n-        Address(const String & host_port_, const String & user_, const String & password_, UInt16 clickhouse_port, bool secure_ = false);\n+        Address(\n+            const Poco::Util::AbstractConfiguration & config,\n+            const String & config_prefix,\n+            UInt32 shard_index_ = 0,\n+            UInt32 replica_index_ = 0);\n+        Address(\n+            const String & host_port_,\n+            const String & user_,\n+            const String & password_,\n+            UInt16 clickhouse_port,\n+            bool secure_ = false);\n \n         /// Returns 'escaped_host_name:port'\n         String toString() const;\n@@ -87,8 +96,10 @@ class Cluster\n \n         static std::pair<String, UInt16> fromString(const String & host_port_string);\n \n-        /// Returns escaped shard{shard_index}_replica{replica_index}\n-        String toFullString() const;\n+        /// Returns escaped shard{shard_index}_replica{replica_index} or escaped\n+        /// user:password@resolved_host_address:resolved_host_port#default_database\n+        /// depending on use_compact_format flag\n+        String toFullString(bool use_compact_format) const;\n \n         /// Returns address with only shard index and replica index or full address without shard index and replica index\n         static Address fromFullString(const String & address_full_string);\ndiff --git a/dbms/src/Storages/Distributed/DistributedBlockOutputStream.cpp b/dbms/src/Storages/Distributed/DistributedBlockOutputStream.cpp\nindex 4430b4d391aa..85fcb3c2766d 100644\n--- a/dbms/src/Storages/Distributed/DistributedBlockOutputStream.cpp\n+++ b/dbms/src/Storages/Distributed/DistributedBlockOutputStream.cpp\n@@ -530,7 +530,7 @@ void DistributedBlockOutputStream::writeAsyncImpl(const Block & block, const siz\n         std::vector<std::string> dir_names;\n         for (const auto & address : cluster->getShardsAddresses()[shard_id])\n             if (!address.is_local)\n-                dir_names.push_back(address.toFullString());\n+                dir_names.push_back(address.toFullString(context.getSettingsRef().use_compact_format_in_distributed_parts_names));\n \n         if (!dir_names.empty())\n             writeToShard(block, dir_names);\n",
  "test_patch": "diff --git a/dbms/tests/integration/test_distributed_format/test.py b/dbms/tests/integration/test_distributed_format/test.py\nindex eb296463376a..3f139c8a6eb8 100644\n--- a/dbms/tests/integration/test_distributed_format/test.py\n+++ b/dbms/tests/integration/test_distributed_format/test.py\n@@ -22,9 +22,9 @@ def started_cluster():\n         cluster.shutdown()\n \n \n-def test_single_file(started_cluster):\n+def test_single_file_new(started_cluster):\n     node.query(\"create table distr_1 (x UInt64, s String) engine = Distributed('test_cluster', database, table)\")\n-    node.query(\"insert into distr_1 values (1, 'a'), (2, 'bb'), (3, 'ccc')\")\n+    node.query(\"insert into distr_1 values (1, 'a'), (2, 'bb'), (3, 'ccc')\", settings={\"use_compact_format_in_distributed_parts_names\": \"1\"})\n \n     query = \"select * from file('/var/lib/clickhouse/data/default/distr_1/shard1_replica1/1.bin', 'Distributed')\"\n     out = node.exec_in_container(['/usr/bin/clickhouse', 'local', '--stacktrace', '-q', query])\n@@ -42,8 +42,8 @@ def test_single_file(started_cluster):\n \n def test_two_files(started_cluster):\n     node.query(\"create table distr_2 (x UInt64, s String) engine = Distributed('test_cluster', database, table)\")\n-    node.query(\"insert into distr_2 values (0, '_'), (1, 'a')\")\n-    node.query(\"insert into distr_2 values (2, 'bb'), (3, 'ccc')\")\n+    node.query(\"insert into distr_2 values (0, '_'), (1, 'a')\", settings={\"use_compact_format_in_distributed_parts_names\": \"1\"})\n+    node.query(\"insert into distr_2 values (2, 'bb'), (3, 'ccc')\", settings={\"use_compact_format_in_distributed_parts_names\": \"1\"})\n \n     query = \"select * from file('/var/lib/clickhouse/data/default/distr_2/shard1_replica1/{1,2,3,4}.bin', 'Distributed') order by x\"\n     out = node.exec_in_container(['/usr/bin/clickhouse', 'local', '--stacktrace', '-q', query])\n@@ -57,3 +57,21 @@ def test_two_files(started_cluster):\n     assert out == '0\\t_\\n1\\ta\\n2\\tbb\\n3\\tccc\\n'\n \n     node.query(\"drop table distr_2\")\n+\n+\n+def test_single_file_old(started_cluster):\n+    node.query(\"create table distr_3 (x UInt64, s String) engine = Distributed('test_cluster', database, table)\")\n+    node.query(\"insert into distr_3 values (1, 'a'), (2, 'bb'), (3, 'ccc')\")\n+\n+    query = \"select * from file('/var/lib/clickhouse/data/default/distr_3/default@not_existing:9000/1.bin', 'Distributed')\"\n+    out = node.exec_in_container(['/usr/bin/clickhouse', 'local', '--stacktrace', '-q', query])\n+\n+    assert out == '1\\ta\\n2\\tbb\\n3\\tccc\\n'\n+\n+    query = \"create table t (dummy UInt32) engine = File('Distributed', '/var/lib/clickhouse/data/default/distr_3/default@not_existing:9000/1.bin');\" \\\n+            \"select * from t\"\n+    out = node.exec_in_container(['/usr/bin/clickhouse', 'local', '--stacktrace', '-q', query])\n+\n+    assert out == '1\\ta\\n2\\tbb\\n3\\tccc\\n'\n+\n+    node.query(\"drop table distr_3\")\ndiff --git a/dbms/tests/integration/test_distributed_storage_configuration/test.py b/dbms/tests/integration/test_distributed_storage_configuration/test.py\nindex ad20e28271ab..a7c33b059c33 100644\n--- a/dbms/tests/integration/test_distributed_storage_configuration/test.py\n+++ b/dbms/tests/integration/test_distributed_storage_configuration/test.py\n@@ -25,7 +25,7 @@ def _files_in_dist_mon(node, root, table):\n         'bash',\n         '-c',\n         # `-maxdepth 1` to avoid /tmp/ subdirectory\n-        'find /{root}/data/default/{table}/shard2_replica1 -maxdepth 1 -type f | wc -l'.format(root=root, table=table)\n+        'find /{root}/data/default/{table}/default@127%2E0%2E0%2E2:9000 -maxdepth 1 -type f | wc -l'.format(root=root, table=table)\n     ]).split('\\n')[0])\n \n def test_different_versions(start_cluster):\n",
  "problem_statement": "server won't start after rollback from `20.3.2.1` to `20.1.6.30` \n**Describe the bug or unexpected behaviour**\r\nserver won't start after rollback from `20.3.2.1` to `20.1.6.30` \r\n\r\n* `CREATE TABLE` statements for all tables involved\r\n```sql\r\ncreate table tbl2 on cluster cluster (`eventDate` Date, id String ) ENGINE = Distributed(cluster, default, tbl1, rand());\r\n-- to create files in distributed table\r\ninsert into tbl2 values ('2020-03-13', '8'), ('2020-03-13', '7');\r\n-- check if shardX_replicaY,shardX_replicaY in /var/lib/clickhouse/data/default/tbl2 created\r\n```\r\n\r\ndowngrade version. E.g. `apt install  clickhouse-server=20.1.6.30 clickhouse-common-static=20.1.6.30 clickhouse-client=20.1.6.30 clickhouse-common-static=20.1.6.30`\r\n\r\nrestart server. Look at logs.\r\n\r\n**Error message and/or stacktrace**\r\n```\r\n2020.03.13 13:21:03.795774 [ 1 ] {} <Error> Application: Caught exception while loading metadata: Code: 62, e.displayText() = DB::Exception: Incorrect user[:password]@host:port#default_database format shard2_replica1, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. 0x100ac1bc Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)  in /usr/bin/clickhouse\r\n1. 0x8e74849 DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int)  in /usr/bin/clickhouse\r\n2. 0xcd6444d ?  in /usr/bin/clickhouse\r\n3. 0xd589fe3 DB::StorageDistributedDirectoryMonitor::createPool(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::StorageDistributed const&)  in /usr/bin/clickhouse\r\n4. 0xd3c7cb2 ?  in /usr/bin/clickhouse\r\n5. 0xd3c7d72 DB::StorageDistributed::ClusterNodeData::requireDirectoryMonitor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::StorageDistributed&, DB::ActionBlocker&)  in /usr/bin/clickhouse\r\n6. 0xd3c9ea0 DB::StorageDistributed::requireDirectoryMonitor(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)  in /usr/bin/clickhouse\r\n7. 0xd3cd861 DB::StorageDistributed::createDirectoryMonitors()  in /usr/bin/clickhouse\r\n8. 0xd3cd9ab DB::StorageDistributed::startup()  in /usr/bin/clickhouse\r\n9. 0xce66892 ?  in /usr/bin/clickhouse\r\n10. 0x8e97e27 ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>)  in /usr/bin/clickhouse\r\n11. 0x8e98454 ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() const  in /usr/bin/clickhouse\r\n12. 0x8e97347 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)  in /usr/bin/clickhouse\r\n13. 0x8e9580f ?  in /usr/bin/clickhouse\r\n14. 0x76db start_thread  in /lib/x86_64-linux-gnu/libpthread-2.27.so\r\n15. 0x12188f __clone  in /lib/x86_64-linux-gnu/libc-2.27.so\r\n (version 20.1.6.30 (official build))\r\n2020.03.13 13:21:03.795919 [ 1 ] {} <Information> Application: Shutting down storages.\r\n2020.03.13 13:21:03.797805 [ 1 ] {} <Debug> Application: Shut down storages.\r\n2020.03.13 13:21:03.798873 [ 1 ] {} <Debug> Application: Destroyed global context.\r\n2020.03.13 13:21:03.799846 [ 1 ] {} <Error> Application: DB::Exception: Incorrect user[:password]@host:port#default_database format shard2_replica1\r\n```\r\n**workaround:**\r\nfind and remove directories named like `shardX_replicaX,shardX_replicaX` in any distributed table.\r\n```\r\ncd /var/lib/clickhouse/data/\r\nfind -name '*shard*_replica*'\r\n```\r\n\n",
  "hints_text": "I think it is connected to #8911",
  "created_at": "2020-03-13T18:51:58Z",
  "modified_files": [
    "dbms/src/Core/Settings.h",
    "dbms/src/Interpreters/Cluster.cpp",
    "dbms/src/Interpreters/Cluster.h",
    "dbms/src/Storages/Distributed/DistributedBlockOutputStream.cpp"
  ],
  "modified_test_files": [
    "dbms/tests/integration/test_distributed_format/test.py",
    "dbms/tests/integration/test_distributed_storage_configuration/test.py"
  ]
}