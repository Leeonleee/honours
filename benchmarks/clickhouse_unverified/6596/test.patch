diff --git a/dbms/tests/queries/0_stateless/00990_hasToken.python b/dbms/tests/queries/0_stateless/00990_hasToken.python
new file mode 100755
index 000000000000..217d96dfe52f
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00990_hasToken.python
@@ -0,0 +1,124 @@
+#!/usr/bin/env python
+# encoding: utf-8
+
+import re
+
+HAYSTACKS = [
+    "hay hay hay hay hay hay hay hay hay hay hay hay hay hay hay hay hay hay needle",
+    "needle hay hay hay hay hay hay hay hay hay hay hay hay hay hay hay hay hay hay",
+    "hay hay hay hay hay hay hay hay hay needle hay hay hay hay hay hay hay hay hay",
+]
+
+NEEDLE = "needle"
+
+HAY_RE = re.compile(r'\bhay\b', re.IGNORECASE)
+NEEDLE_RE = re.compile(r'\bneedle\b', re.IGNORECASE)
+
+def replace_follow_case(replacement):
+    def func(match):
+        g = match.group()
+        if g.islower(): return replacement.lower()
+        if g.istitle(): return replacement.title()
+        if g.isupper(): return replacement.upper()
+        return replacement
+    return func
+
+def replace_separators(query, new_sep):
+    SEP_RE = re.compile('\\s+')
+    result = SEP_RE.sub(new_sep, query)
+    return result
+
+def enlarge_haystack(query, times, separator=''):
+    return HAY_RE.sub(replace_follow_case(('hay' + separator) * times), query)
+
+def small_needle(query):
+    return NEEDLE_RE.sub(replace_follow_case('n'), query)
+
+def remove_needle(query):
+    return NEEDLE_RE.sub('', query)
+
+def replace_needle(query, new_needle):
+    return NEEDLE_RE.sub(new_needle, query)
+
+# with str.lower, str.uppert, str.title and such
+def transform_needle(query, string_transformation_func):
+    def replace_with_transformation(match):
+        g = match.group()
+        return string_transformation_func(g)
+
+    return NEEDLE_RE.sub(replace_with_transformation, query)
+
+
+def create_cases(table_row_template, table_query_template, const_query_template):
+    const_queries = []
+    table_rows = []
+    table_queries = set()
+
+    def add_case(haystack, needle, match):
+        match = int(match)
+        const_queries.append(const_query_template.format(haystack=haystack, needle=needle, match=match))
+        table_queries.add(table_query_template.format(haystack=haystack, needle=needle, match=match))
+        table_rows.append(table_row_template.format(haystack=haystack, needle=needle, match=match))
+
+    # Negative cases
+    add_case(remove_needle(HAYSTACKS[0]), NEEDLE, False)
+    for haystack in HAYSTACKS:
+        add_case(transform_needle(haystack, str.title), NEEDLE, False)
+        sep = ''
+        h = replace_separators(haystack, sep)
+        add_case(h, NEEDLE, False)
+        add_case(small_needle(h), small_needle(NEEDLE), False)
+        add_case(enlarge_haystack(h, 10, sep), NEEDLE, False)
+
+    # positive cases
+    for haystack in HAYSTACKS:
+        add_case(transform_needle(haystack, str.title), transform_needle(NEEDLE, str.title), True)
+        add_case(transform_needle(haystack, str.upper), transform_needle(NEEDLE, str.upper), True)
+
+        # Not checking all separators since some (like ' and 
) cause issues when coupled with
+        # re-based replacement and quoting in query
+        # other are rare in practice and checking all separators makes this test too lengthy.
+
+        # r'\\\\' turns into a single '\' in query
+        #separators = list(''' \t`~!@#$%^&*()-=+|]}[{";:/?.>,<''') + [r'\\\\']
+        separators = list(''' \t;:?.,''') + [r'\\\\']
+        for sep in separators:
+            h = replace_separators(haystack, sep)
+            add_case(h, NEEDLE, True)
+            add_case(small_needle(h), small_needle(NEEDLE), True)
+            add_case(enlarge_haystack(h, 200, sep), NEEDLE, True)
+            add_case(replace_needle(h, 'иголка'), replace_needle(NEEDLE, 'иголка'), True)
+            add_case(replace_needle(h, '指针'), replace_needle(NEEDLE, '指针'), True)
+
+    return table_rows, table_queries, const_queries
+
+def main():
+
+    def query(x):
+        print x
+
+    CONST_QUERY = """SELECT hasToken('{haystack}', '{needle}'), ' expecting ', {match};"""
+    #SELECT hasToken(haystack, '{needle}') FROM ht WHERE needle = '{needle}' AND match = {match};"""
+    TABLE_QUERY = """WITH '{needle}' as n SELECT haystack, needle, hasToken(haystack, n) as result FROM ht WHERE needle = n AND result != match;"""
+    TABLE_ROW = """('{haystack}', '{needle}', {match})"""
+
+    rows, table_queries, const_queries = create_cases(TABLE_ROW, TABLE_QUERY, CONST_QUERY)
+    for q in const_queries:
+        query(q)
+
+    query("""DROP TABLE IF EXISTS ht;
+    CREATE TABLE IF NOT EXISTS
+    ht
+(
+    haystack String,
+    needle String,
+    match UInt8
+)
+ENGINE MergeTree()
+ORDER BY haystack;
+INSERT INTO ht VALUES {values};""".format(values=", ".join(rows)))
+    for q in sorted(table_queries):
+        query(q)
+
+if __name__ == '__main__':
+    main()
diff --git a/dbms/tests/queries/0_stateless/00990_hasToken.reference b/dbms/tests/queries/0_stateless/00990_hasToken.reference
new file mode 100644
index 000000000000..867c0c1c691f
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00990_hasToken.reference
@@ -0,0 +1,139 @@
+0	 expecting 	0
+0	 expecting 	0
+0	 expecting 	0
+0	 expecting 	0
+0	 expecting 	0
+0	 expecting 	0
+0	 expecting 	0
+0	 expecting 	0
+0	 expecting 	0
+0	 expecting 	0
+0	 expecting 	0
+0	 expecting 	0
+0	 expecting 	0
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
+1	 expecting 	1
diff --git a/dbms/tests/queries/0_stateless/00990_hasToken.sh b/dbms/tests/queries/0_stateless/00990_hasToken.sh
new file mode 100755
index 000000000000..4ccb77b8ecc9
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00990_hasToken.sh
@@ -0,0 +1,8 @@
+#!/usr/bin/env bash
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+. $CURDIR/../shell_config.sh
+
+# We should have correct env vars from shell_config.sh to run this test
+
+python $CURDIR/00990_hasToken.python | ${CLICKHOUSE_CLIENT} -nm
diff --git a/dbms/tests/queries/0_stateless/00990_hasToken_and_tokenbf.reference b/dbms/tests/queries/0_stateless/00990_hasToken_and_tokenbf.reference
new file mode 100644
index 000000000000..10e8f0d2c592
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00990_hasToken_and_tokenbf.reference
@@ -0,0 +1,3 @@
+2007
+2007
+2007
diff --git a/dbms/tests/queries/0_stateless/00990_hasToken_and_tokenbf.sql b/dbms/tests/queries/0_stateless/00990_hasToken_and_tokenbf.sql
new file mode 100644
index 000000000000..60e4d959417c
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00990_hasToken_and_tokenbf.sql
@@ -0,0 +1,33 @@
+SET allow_experimental_data_skipping_indices = 1;
+
+DROP TABLE IF EXISTS bloom_filter;
+
+CREATE TABLE bloom_filter
+(
+    id UInt64,
+    s String,
+    INDEX tok_bf (s, lower(s)) TYPE tokenbf_v1(512, 3, 0) GRANULARITY 1
+) ENGINE = MergeTree() ORDER BY id SETTINGS index_granularity = 8;
+
+insert into bloom_filter select number, 'yyy,uuu' from numbers(1024);
+insert into bloom_filter select number+2000, 'abc,def,zzz' from numbers(8);
+insert into bloom_filter select number+3000, 'yyy,uuu' from numbers(1024);
+insert into bloom_filter select number+3000, 'abcdefzzz' from numbers(1024);
+
+set max_rows_to_read = 16;
+
+SELECT max(id) FROM bloom_filter WHERE hasToken(s, 'abc');
+SELECT max(id) FROM bloom_filter WHERE hasToken(s, 'def');
+SELECT max(id) FROM bloom_filter WHERE hasToken(s, 'zzz');
+
+-- invert result
+-- this does not work as expected, reading more rows that it should
+-- SELECT max(id) FROM bloom_filter WHERE NOT hasToken(s, 'yyy');
+
+-- accessing to many rows
+SELECT max(id) FROM bloom_filter WHERE hasToken(s, 'yyy'); -- { serverError 158 }
+
+-- this syntax is not supported by tokenbf
+SELECT max(id) FROM bloom_filter WHERE hasToken(s, 'zzz') == 1; -- { serverError 158 }
+
+DROP TABLE bloom_filter;
\ No newline at end of file
