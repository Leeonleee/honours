You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Not found column in block exception
Hello,

We upgraded our Clickhouse version to 22.3.3.44. After ugrade, we get strange exception in the queries. If I include 'n' word to where query, it gives an exception. 

I have a sample query like below:

```
SELECT ts FROM event WHERE ((appkey='n') AND (ecode = 'n')) ORDER BY ts ASC limit 1;
```

It gives below exception:

```
Received exception from server (version 22.3.3):
Code: 10. DB::Exception: Received from localhost:9000. DB::Exception: Not found column ecode in block. There are only columns: appkey, ts, equals(ecode, 'n'). (NOT_FOUND_COLUMN_IN_BLOCK)
```

If I change 'n' with 'a' in the where query, it doesn't give the exception:
```
SELECT ts FROM event WHERE ((appkey='a') AND (ecode = 'a')) ORDER BY ts ASC limit 1;
```

Result:

```
0 rows in set. Elapsed: 0.047 sec.
```

**Affected Version**
22.3.3.44

**show create table event**

```
CREATE TABLE event
(
    `appkey` String,
    `ecode` String,
    `userid` String,
    `iid` String,
    `exid` String,
    `did` String,
    `sid` String,
    `pid` Int32,
    `fid` String,
    `appVersion` String,
    `platform` UInt8,
    `revenue` Float64,
    `ts` DateTime,
    `ea` String,
    `eb` String,
    `ec` Int32,
    `ed` Int32,
    `ee` String,
    `ef` String,
    `eg` String,
    `eh` String,
    `ei` String,
    `ej` String,
    `ek` String,
    `el` Float64,
    `em` String,
    `en` String,
    `eo` Int32,
    `ep` Float64,
    `eq` Float64,
    `er` Float64,
    `es` Float64,
    `et` String,
    `eu` String,
    `ev` String,
    `fc` Float64,
    `fd` Float64,
    `fe` Int32,
    `ff` Int32,
    `fg` UInt8,
    `fh` UInt8,
    `fi` DateTime,
    `fj` DateTime,
    `fk` String,
    `fl` String,
    `fm` Int32,
    `fn` Int32,
    `fo` String,
    `fp` String,
    `fq` Int64,
    `fr` Int64,
    `fs` String,
    `ft` Float64,
    `fu` Int64,
    `fv` String,
    `fw` Float64,
    `fx` String,
    `fy` Int32,
    `fz` Int32,
    `ga` String,
    `gb` Int64,
    `gc` Int64,
    `data` String,
    `txt` String,
    `cmp` String,
    `piid` String,
    `uid` String,
    `gd` String,
    `ge` String,
    `rv` Float64
)
ENGINE = MergeTree
PARTITION BY toYYYYMMDD(ts)
ORDER BY (appkey, ecode, ts)
SETTINGS index_granularity = 8192
```
Exception with optimize_move_to_prewhere = 1
```
select version();
┌─version()───┐
│ 22.5.1.2079 │
└─────────────┘

CREATE TABLE order
(
    `ID` String,
    `Type` Enum8('TYPE_0' = 0, 'TYPE_1' = 1, 'TYPE_2' = 2),
    `Num` UInt64,
    `Data` String,
    `RowCreatedAt` DateTime DEFAULT now()
)
ENGINE = ReplacingMergeTree()
PARTITION BY toYYYYMMDD(RowCreatedAt)
PRIMARY KEY ID
ORDER BY (ID, Type, Num)
TTL RowCreatedAt + toIntervalWeek(6)
SETTINGS index_granularity = 8192;

insert into order (ID, Type, Num, Data, RowCreatedAt) select toString(cityHash64(ID)%2000), case cityHash64(ID)%3 when 0 then 'TYPE_0' when 1 then 'TYPE_1' when 2 then 'TYPE_2' ELSE 'TYPE_0' END, cityHash64(ID), ID, toDateTime(toUInt32(now()) - round(rand32() / 4294967295 * 4100000, 0))  from generateRandom('ID String ', 1, 1000) limit 100000;
insert into order (ID, Type, Num, Data, RowCreatedAt) select toString(cityHash64(ID)%2000), case cityHash64(ID)%3 when 0 then 'TYPE_0' when 1 then 'TYPE_1' when 2 then 'TYPE_2' ELSE 'TYPE_0' END, cityHash64(ID), ID, toDateTime(toUInt32(now()) - round(rand32() / 4294967295 * 4100000, 0))  from generateRandom('ID String ', 1, 1000) limit 100000;
insert into order (ID, Type, Num, Data, RowCreatedAt) select toString(cityHash64(ID)%2000), case cityHash64(ID)%3 when 0 then 'TYPE_0' when 1 then 'TYPE_1' when 2 then 'TYPE_2' ELSE 'TYPE_0' END, cityHash64(ID), ID, toDateTime(toUInt32(now()) - round(rand32() / 4294967295 * 4100000, 0))  from generateRandom('ID String ', 1, 1000) limit 100000;
insert into order (ID, Type, Num, Data, RowCreatedAt) select toString(cityHash64(ID)%2000), case cityHash64(ID)%3 when 0 then 'TYPE_0' when 1 then 'TYPE_1' when 2 then 'TYPE_2' ELSE 'TYPE_0' END, cityHash64(ID), ID, toDateTime(toUInt32(now()) - round(rand32() / 4294967295 * 4100000, 0))  from generateRandom('ID String ', 1, 1000) limit 100000;
insert into order (ID, Type, Num, Data, RowCreatedAt) select toString(cityHash64(ID)%2000), case cityHash64(ID)%3 when 0 then 'TYPE_0' when 1 then 'TYPE_1' when 2 then 'TYPE_2' ELSE 'TYPE_0' END, cityHash64(ID), ID, toDateTime(toUInt32(now()) - round(rand32() / 4294967295 * 4100000, 0))  from generateRandom('ID String ', 1, 1000) limit 100000;
insert into order (ID, Type, Num, Data, RowCreatedAt) select toString(cityHash64(ID)%2000), case cityHash64(ID)%3 when 0 then 'TYPE_0' when 1 then 'TYPE_1' when 2 then 'TYPE_2' ELSE 'TYPE_0' END, cityHash64(ID), ID, toDateTime(toUInt32(now()) - round(rand32() / 4294967295 * 4100000, 0))  from generateRandom('ID String ', 1, 1000) limit 100000;
insert into order (ID, Type, Num, Data, RowCreatedAt) select toString(cityHash64(ID)%2000), case cityHash64(ID)%3 when 0 then 'TYPE_0' when 1 then 'TYPE_1' when 2 then 'TYPE_2' ELSE 'TYPE_0' END, cityHash64(ID), ID, toDateTime(toUInt32(now()) - round(rand32() / 4294967295 * 4100000, 0))  from generateRandom('ID String ', 1, 1000) limit 100000;
insert into order (ID, Type, Num, Data, RowCreatedAt) select toString(cityHash64(ID)%2000), case cityHash64(ID)%3 when 0 then 'TYPE_0' when 1 then 'TYPE_1' when 2 then 'TYPE_2' ELSE 'TYPE_0' END, cityHash64(ID), ID, toDateTime(toUInt32(now()) - round(rand32() / 4294967295 * 4100000, 0))  from generateRandom('ID String ', 1, 1000) limit 100000;
insert into order (ID, Type, Num, Data, RowCreatedAt) select toString(cityHash64(ID)%2000), case cityHash64(ID)%3 when 0 then 'TYPE_0' when 1 then 'TYPE_1' when 2 then 'TYPE_2' ELSE 'TYPE_0' END, cityHash64(ID), ID, toDateTime(toUInt32(now()) - round(rand32() / 4294967295 * 4100000, 0))  from generateRandom('ID String ', 1, 1000) limit 100000;

select count(*) from order;
┌─count()─┐
│  892441 │
└─────────┘

set optimize_move_to_prewhere = 0;
SELECT Data
FROM order
WHERE (ID = '1') AND (Type = 'TYPE_1')
ORDER BY Num ASC
FORMAT `Null`

Ok.

set optimize_move_to_prewhere = 1;
SELECT Data
FROM order
WHERE (ID = '1') AND (Type = 'TYPE_1')
ORDER BY Num ASC
FORMAT `Null`

Received exception from server (version 22.5.1):
Code: 10. DB::Exception: Received from localhost:9000. DB::Exception: Not found column Type in block. There are only columns: ID, Num, equals(Type, 'TYPE_1'), Data. (NOT_FOUND_COLUMN_IN_BLOCK)

```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
