{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 26668,
  "instance_id": "ClickHouse__ClickHouse-26668",
  "issue_numbers": [
    "25276"
  ],
  "base_commit": "f32a2806ee25b0b700b52c706b70ab8d616b60ca",
  "patch": "diff --git a/src/Processors/Transforms/WindowTransform.cpp b/src/Processors/Transforms/WindowTransform.cpp\nindex 43a7e7458423..9c9894a3dc85 100644\n--- a/src/Processors/Transforms/WindowTransform.cpp\n+++ b/src/Processors/Transforms/WindowTransform.cpp\n@@ -4,6 +4,7 @@\n #include <Common/Arena.h>\n #include <Common/FieldVisitorsAccurateComparison.h>\n #include <common/arithmeticOverflow.h>\n+#include <Columns/ColumnConst.h>\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/getLeastSupertype.h>\n #include <Interpreters/ExpressionActions.h>\n@@ -965,10 +966,37 @@ void WindowTransform::writeOutCurrentRow()\n     }\n }\n \n+static void assertSameColumns(const Columns & left_all,\n+    const Columns & right_all)\n+{\n+    assert(left_all.size() == right_all.size());\n+\n+    for (size_t i = 0; i < left_all.size(); ++i)\n+    {\n+        const auto * left_column = left_all[i].get();\n+        const auto * right_column = right_all[i].get();\n+\n+        assert(left_column);\n+        assert(right_column);\n+\n+        assert(typeid(*left_column).hash_code()\n+            == typeid(*right_column).hash_code());\n+\n+        if (isColumnConst(*left_column))\n+        {\n+            Field left_value = assert_cast<const ColumnConst &>(*left_column).getField();\n+            Field right_value = assert_cast<const ColumnConst &>(*right_column).getField();\n+\n+            assert(left_value == right_value);\n+        }\n+    }\n+}\n+\n void WindowTransform::appendChunk(Chunk & chunk)\n {\n //    fmt::print(stderr, \"new chunk, {} rows, finished={}\\n\", chunk.getNumRows(),\n //        input_is_finished);\n+//    fmt::print(stderr, \"chunk structure '{}'\\n\", chunk.dumpStructure());\n \n     // First, prepare the new input block and add it to the queue. We might not\n     // have it if it's end of data, though.\n@@ -984,28 +1012,45 @@ void WindowTransform::appendChunk(Chunk & chunk)\n \n         blocks.push_back({});\n         auto & block = blocks.back();\n+\n         // Use the number of rows from the Chunk, because it is correct even in\n         // the case where the Chunk has no columns. Not sure if this actually\n         // happens, because even in the case of `count() over ()` we have a dummy\n         // input column.\n         block.rows = chunk.getNumRows();\n-        block.input_columns = chunk.detachColumns();\n \n+        // If we have a (logically) constant column, some Chunks will have a\n+        // Const column for it, and some -- materialized. Such difference is\n+        // generated by e.g. MergingSortedAlgorithm, which mostly materializes\n+        // the constant ORDER BY columns, but in some obscure cases passes them\n+        // through, unmaterialized. This mix is a pain to work with in Window\n+        // Transform, because we have to compare columns across blocks, when e.g.\n+        // searching for peer group boundaries, and each of the four combinations\n+        // of const and materialized requires different code.\n+        // Another problem with Const columns is that the aggregate functions\n+        // can't work with them, so we have to materialize them like the\n+        // Aggregator does.\n+        // Just materialize everything.\n+        auto columns = chunk.detachColumns();\n+        for (auto & column : columns)\n+            column = std::move(column)->convertToFullColumnIfConst();\n+        block.input_columns = std::move(columns);\n+\n+        // Initialize output columns.\n         for (auto & ws : workspaces)\n         {\n-            // Aggregate functions can't work with constant columns, so we have to\n-            // materialize them like the Aggregator does.\n-            for (const auto column_index : ws.argument_column_indices)\n-            {\n-                block.input_columns[column_index]\n-                    = std::move(block.input_columns[column_index])\n-                        ->convertToFullColumnIfConst();\n-            }\n-\n             block.output_columns.push_back(ws.aggregate_function->getReturnType()\n                 ->createColumn());\n             block.output_columns.back()->reserve(block.rows);\n         }\n+\n+        // As a debugging aid, assert that chunk have the same C++ type of\n+        // columns, because we often have to work across chunks.\n+        if (blocks.size() > 1)\n+        {\n+            assertSameColumns(blocks.front().input_columns,\n+                blocks.back().input_columns);\n+        }\n     }\n \n     // Start the calculations. First, advance the partition end.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01571_window_functions.reference b/tests/queries/0_stateless/01571_window_functions.reference\nindex bbac8e5ac6d8..d353270cc549 100644\n--- a/tests/queries/0_stateless/01571_window_functions.reference\n+++ b/tests/queries/0_stateless/01571_window_functions.reference\n@@ -1,6 +1,37 @@\n -- { echo }\n -- Another test for window functions because the other one is too long.\n set allow_experimental_window_functions = 1;\n+-- some craziness with a mix of materialized and unmaterialized const columns\n+-- after merging sorted transform, that used to break the peer group detection in\n+-- the window transform.\n+CREATE TABLE order_by_const\n+(\n+    `a` UInt64,\n+    `b` UInt64,\n+    `c` UInt64,\n+    `d` UInt64\n+)\n+ENGINE = MergeTree\n+ORDER BY (a, b)\n+SETTINGS index_granularity = 8192;\n+truncate table order_by_const;\n+system stop merges order_by_const;\n+INSERT INTO order_by_const(a, b, c, d) VALUES (1, 1, 101, 1), (1, 2, 102, 1), (1, 3, 103, 1), (1, 4, 104, 1);\n+INSERT INTO order_by_const(a, b, c, d) VALUES (1, 5, 104, 1), (1, 6, 105, 1), (2, 1, 106, 2), (2, 1, 107, 2);\n+INSERT INTO order_by_const(a, b, c, d) VALUES (2, 2, 107, 2), (2, 3, 108, 2), (2, 4, 109, 2);\n+SELECT row_number() OVER (order by 1, a) FROM order_by_const;\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+10\n+11\n+drop table order_by_const;\n -- expressions in window frame\n select count() over (rows between 1 + 1 preceding and 1 + 1 following) from numbers(10);\n 3\ndiff --git a/tests/queries/0_stateless/01571_window_functions.sql b/tests/queries/0_stateless/01571_window_functions.sql\nindex c6479044b592..6bdd091fa9c7 100644\n--- a/tests/queries/0_stateless/01571_window_functions.sql\n+++ b/tests/queries/0_stateless/01571_window_functions.sql\n@@ -2,6 +2,29 @@\n -- Another test for window functions because the other one is too long.\n set allow_experimental_window_functions = 1;\n \n+-- some craziness with a mix of materialized and unmaterialized const columns\n+-- after merging sorted transform, that used to break the peer group detection in\n+-- the window transform.\n+CREATE TABLE order_by_const\n+(\n+    `a` UInt64,\n+    `b` UInt64,\n+    `c` UInt64,\n+    `d` UInt64\n+)\n+ENGINE = MergeTree\n+ORDER BY (a, b)\n+SETTINGS index_granularity = 8192;\n+\n+truncate table order_by_const;\n+system stop merges order_by_const;\n+INSERT INTO order_by_const(a, b, c, d) VALUES (1, 1, 101, 1), (1, 2, 102, 1), (1, 3, 103, 1), (1, 4, 104, 1);\n+INSERT INTO order_by_const(a, b, c, d) VALUES (1, 5, 104, 1), (1, 6, 105, 1), (2, 1, 106, 2), (2, 1, 107, 2);\n+INSERT INTO order_by_const(a, b, c, d) VALUES (2, 2, 107, 2), (2, 3, 108, 2), (2, 4, 109, 2);\n+SELECT row_number() OVER (order by 1, a) FROM order_by_const;\n+\n+drop table order_by_const;\n+\n -- expressions in window frame\n select count() over (rows between 1 + 1 preceding and 1 + 1 following) from numbers(10);\n \n",
  "problem_statement": "WINDOW functions: nullptr dereference found by fuzzer (TSan)\nhttps://clickhouse-test-reports.s3.yandex.net/25253/01eaaace8b61c15e5f1c3a5aca0f839aa3f97cfe/fuzzer_tsan/report.html#fail1\r\n\r\n`SELECT row_number(NULL) OVER (PARTITION BY NULL ORDER BY 1048577 DESC NULLS LAST, '-9223372036854775807' DESC NULLS LAST, a ASC, NULL + '655.36' DESC NULLS FIRST, 2147483648 + 1025 DESC), a, 9223372036854775807 + 1, b, c FROM pk_order ORDER BY c DESC NULLS FIRST`\r\n\r\n```\r\n2021.06.14 04:12:43.930063 [ 50 ] {ca37d3b3-ef52-42c9-8512-45a4e4625237} <Debug> executeQuery: (from [::1]:46206, using production parser) SELECT row_number(NULL) OVER (PARTITION BY NULL ORDER BY 1048577 DESC NULLS LAST, '-9223372036854775807' DESC NULLS LAST, a ASC, NULL + '655.36' DESC NULLS FIRST, 2147483648 + 1025 DESC), a, 9223372036854775807 + 1, b, c FROM pk_order ORDER BY c DESC NULLS FIRST\r\n2021.06.14 04:12:43.934986 [ 50 ] {ca37d3b3-ef52-42c9-8512-45a4e4625237} <Trace> ContextAccess (default): Access granted: SELECT(a, b, c) ON default.pk_order\r\n2021.06.14 04:12:43.935455 [ 50 ] {ca37d3b3-ef52-42c9-8512-45a4e4625237} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2021.06.14 04:12:43.939678 [ 50 ] {ca37d3b3-ef52-42c9-8512-45a4e4625237} <Debug> default.pk_order (19c7157b-a83c-4a05-99c7-157ba83cba05) (SelectExecutor): Key condition: unknown\r\n2021.06.14 04:12:43.940539 [ 50 ] {ca37d3b3-ef52-42c9-8512-45a4e4625237} <Debug> default.pk_order (19c7157b-a83c-4a05-99c7-157ba83cba05) (SelectExecutor): Selected 3/3 parts by partition key, 3 parts by primary key, 3/3 marks by primary key, 3 marks to read from 3 ranges\r\n2021.06.14 04:12:43.941145 [ 50 ] {ca37d3b3-ef52-42c9-8512-45a4e4625237} <Debug> default.pk_order (19c7157b-a83c-4a05-99c7-157ba83cba05) (SelectExecutor): Reading approx. 11 rows with 3 streams\r\n2021.06.14 04:12:43.952528 [ 45 ] {} <Trace> BaseDaemon: Received signal 11\r\n2021.06.14 04:12:43.953529 [ 273 ] {} <Fatal> BaseDaemon: ########################################\r\n2021.06.14 04:12:43.953833 [ 273 ] {} <Fatal> BaseDaemon: (version 21.7.1.7157, build id: 142C7324F20A327D7CA77F10AE65E4422EA439B4) (from thread 268) (query_id: ca37d3b3-ef52-42c9-8512-45a4e4625237) Received signal Segmentation fault (11)\r\n2021.06.14 04:12:43.954028 [ 273 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Unknown si_code.\r\n2021.06.14 04:12:43.954318 [ 273 ] {} <Fatal> BaseDaemon: Stack trace: 0x9233c17 0x13fe8550 0x13ed9d34 0x14a9f98f 0x14aa0444 0x14aa1339 0x14aa6cc3 0x148c3c05 0x148c1a92 0x148c4185 0x930a016 0x930d419 0x91d5d2d 0x7fccfe79a609 0x7fccfe6c1293\r\n2021.06.14 04:12:52.534477 [ 273 ] {} <Fatal> BaseDaemon: 5. __tsan_read4 @ 0x9233c17 in /workspace/clickhouse\r\n2021.06.14 04:12:53.646499 [ 273 ] {} <Fatal> BaseDaemon: 6.1. inlined from ./obj-x86_64-linux-gnu/../src/Columns/ColumnVector.h:40: DB::CompareHelper<unsigned int, unsigned int>::compare(unsigned int, unsigned int, int)\r\n2021.06.14 04:12:53.646774 [ 273 ] {} <Fatal> BaseDaemon: 6. ../src/Columns/ColumnVector.h:206: DB::ColumnVector<unsigned int>::compareAt(unsigned long, unsigned long, DB::IColumn const&, int) const @ 0x13fe8550 in /workspace/clickhouse\r\n2021.06.14 04:12:53.777172 [ 273 ] {} <Fatal> BaseDaemon: 7. ./obj-x86_64-linux-gnu/../src/Columns/ColumnConst.h:0: DB::ColumnConst::compareAt(unsigned long, unsigned long, DB::IColumn const&, int) const @ 0x13ed9d34 in /workspace/clickhouse\r\n2021.06.14 04:12:54.245159 [ 273 ] {} <Fatal> BaseDaemon: 8.1. inlined from ./obj-x86_64-linux-gnu/../src/Processors/Transforms/WindowTransform.cpp:651: DB::WindowTransform::arePeers(DB::RowNumber const&, DB::RowNumber const&) const\r\n2021.06.14 04:12:54.245383 [ 273 ] {} <Fatal> BaseDaemon: 8. ../src/Processors/Transforms/WindowTransform.cpp:704: DB::WindowTransform::advanceFrameEndCurrentRow() @ 0x14a9f98f in /workspace/clickhouse\r\n2021.06.14 04:12:54.706828 [ 273 ] {} <Fatal> BaseDaemon: 9. ./obj-x86_64-linux-gnu/../src/Processors/Transforms/WindowTransform.cpp:807: DB::WindowTransform::advanceFrameEnd() @ 0x14aa0444 in /workspace/clickhouse\r\n2021.06.14 04:12:55.167169 [ 273 ] {} <Fatal> BaseDaemon: 10. ./obj-x86_64-linux-gnu/../src/Processors/Transforms/WindowTransform.cpp:0: DB::WindowTransform::appendChunk(DB::Chunk&) @ 0x14aa1339 in /workspace/clickhouse\r\n2021.06.14 04:12:55.699331 [ 273 ] {} <Fatal> BaseDaemon: 11. ./obj-x86_64-linux-gnu/../src/Processors/Transforms/WindowTransform.cpp:1321: DB::WindowTransform::work() @ 0x14aa6cc3 in /workspace/clickhouse\r\n2021.06.14 04:12:56.339486 [ 273 ] {} <Fatal> BaseDaemon: 12.1. inlined from ./obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:100: operator()\r\n2021.06.14 04:12:56.339827 [ 273 ] {} <Fatal> BaseDaemon: 12.2. inlined from ../contrib/libcxx/include/type_traits:3676: decltype(std::__1::forward<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(fp)()) std::__1::__invoke<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&)\r\n2021.06.14 04:12:56.340083 [ 273 ] {} <Fatal> BaseDaemon: 12.3. inlined from ../contrib/libcxx/include/__functional_base:348: void std::__1::__invoke_void_return_wrapper<void>::__call<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&)\r\n2021.06.14 04:12:56.340296 [ 273 ] {} <Fatal> BaseDaemon: 12.4. inlined from ../contrib/libcxx/include/functional:1608: std::__1::__function::__default_alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, void ()>::operator()()\r\n2021.06.14 04:12:56.340441 [ 273 ] {} <Fatal> BaseDaemon: 12. ../contrib/libcxx/include/functional:2089: void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, void ()> >(std::__1::__function::__policy_storage const*) @ 0x148c3c05 in /workspace/clickhouse\r\n2021.06.14 04:12:56.925804 [ 273 ] {} <Fatal> BaseDaemon: 13.1. inlined from ./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:0: std::__1::__function::__policy_func<void ()>::operator()() const\r\n2021.06.14 04:12:56.926071 [ 273 ] {} <Fatal> BaseDaemon: 13.2. inlined from ../contrib/libcxx/include/functional:2560: std::__1::function<void ()>::operator()() const\r\n2021.06.14 04:12:56.926235 [ 273 ] {} <Fatal> BaseDaemon: 13. ../src/Processors/Executors/PipelineExecutor.cpp:586: DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x148c1a92 in /workspace/clickhouse\r\n2021.06.14 04:12:57.563417 [ 273 ] {} <Fatal> BaseDaemon: 14.1. inlined from ./obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:2851: operator()\r\n2021.06.14 04:12:57.563695 [ 273 ] {} <Fatal> BaseDaemon: 14.2. inlined from ../base/common/../ext/scope_guard.h:97: ext::basic_scope_guard<DB::PipelineExecutor::executeImpl(unsigned long)::$_4::operator()() const::'lambda'()>::invoke()\r\n2021.06.14 04:12:57.563846 [ 273 ] {} <Fatal> BaseDaemon: 14.3. inlined from ../base/common/../ext/scope_guard.h:47: ~basic_scope_guard\r\n2021.06.14 04:12:57.563992 [ 273 ] {} <Fatal> BaseDaemon: 14.4. inlined from ../src/Processors/Executors/PipelineExecutor.cpp:785: operator()\r\n2021.06.14 04:12:57.564181 [ 273 ] {} <Fatal> BaseDaemon: 14.5. inlined from ../contrib/libcxx/include/type_traits:3682: decltype(std::__1::forward<DB::PipelineExecutor::executeImpl(unsigned long)::$_4&>(fp)()) std::__1::__invoke_constexpr<DB::PipelineExecutor::executeImpl(unsigned long)::$_4&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&)\r\n2021.06.14 04:12:57.564381 [ 273 ] {} <Fatal> BaseDaemon: 14.6. inlined from ../contrib/libcxx/include/tuple:1415: decltype(auto) std::__1::__apply_tuple_impl<DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&, std::__1::__tuple_indices<>)\r\n2021.06.14 04:12:57.564560 [ 273 ] {} <Fatal> BaseDaemon: 14.7. inlined from ../contrib/libcxx/include/tuple:1424: decltype(auto) std::__1::apply<DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&)\r\n2021.06.14 04:12:57.564707 [ 273 ] {} <Fatal> BaseDaemon: 14.8. inlined from ../src/Common/ThreadPool.h:182: operator()\r\n2021.06.14 04:12:57.564937 [ 273 ] {} <Fatal> BaseDaemon: 14.9. inlined from ../contrib/libcxx/include/type_traits:3676: decltype(std::__1::forward<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(fp)()) std::__1::__invoke<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::'lambda'()&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)\r\n2021.06.14 04:12:57.565170 [ 273 ] {} <Fatal> BaseDaemon: 14.10. inlined from ../contrib/libcxx/include/__functional_base:348: void std::__1::__invoke_void_return_wrapper<void>::__call<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::'lambda'()&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&...)\r\n2021.06.14 04:12:57.565381 [ 273 ] {} <Fatal> BaseDaemon: 14.11. inlined from ../contrib/libcxx/include/functional:1608: std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::'lambda'(), void ()>::operator()()\r\n2021.06.14 04:12:57.565541 [ 273 ] {} <Fatal> BaseDaemon: 14. ../contrib/libcxx/include/functional:2089: void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) @ 0x148c4185 in /workspace/clickhouse\r\n2021.06.14 04:12:57.684039 [ 273 ] {} <Fatal> BaseDaemon: 15.1. inlined from ./obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:2210: std::__1::__function::__policy_func<void ()>::operator=(std::nullptr_t)\r\n2021.06.14 04:12:57.684297 [ 273 ] {} <Fatal> BaseDaemon: 15.2. inlined from ../contrib/libcxx/include/functional:2533: std::__1::function<void ()>::operator=(std::nullptr_t)\r\n2021.06.14 04:12:57.684457 [ 273 ] {} <Fatal> BaseDaemon: 15. ../src/Common/ThreadPool.cpp:269: ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x930a016 in /workspace/clickhouse\r\n2021.06.14 04:12:57.816551 [ 273 ] {} <Fatal> BaseDaemon: 16.1. inlined from ./obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:1655: std::__1::unique_ptr<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()>, std::__1::default_delete<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()> > >::reset(std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()>*)\r\n2021.06.14 04:12:57.816808 [ 273 ] {} <Fatal> BaseDaemon: 16.2. inlined from ../contrib/libcxx/include/memory:1612: ~unique_ptr\r\n2021.06.14 04:12:57.816981 [ 273 ] {} <Fatal> BaseDaemon: 16. ../contrib/libcxx/include/thread:293: void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()> >(void*) @ 0x930d419 in /workspace/clickhouse\r\n```\r\n\r\n```\r\nChanged settings: receive_timeout = '10', receive_data_timeout_ms = '10000', join_use_nulls = '1', optimize_read_in_order = '1', allow_experimental_window_functions = '1', max_distributed_depth = '0'\r\n```\n",
  "hints_text": "I can reproduce this. Setup queries:\r\n\r\n```\r\nCREATE TABLE pk_order(a UInt64, b UInt64, c UInt64, d UInt64) ENGINE=MergeTree() ORDER BY (a, b);\r\nINSERT INTO pk_order(a, b, c, d) VALUES (1, 1, 101, 1), (1, 2, 102, 1), (1, 3, 103, 1), (1, 4, 104, 1);\r\nINSERT INTO pk_order(a, b, c, d) VALUES (1, 5, 104, 1), (1, 6, 105, 1), (2, 1, 106, 2), (2, 1, 107, 2);\r\n\r\nINSERT INTO pk_order(a, b, c, d) VALUES (2, 2, 107, 2), (2, 3, 108, 2), (2, 4, 109, 2);\r\n```\n```SELECT row_number() OVER (order by 1, a) FROM pk_order```\nNow it suddenly stopped reproducing. Judging from the call stack, the ORDER BY column has a different type in different blocks -- maybe they switched places somewhere.\n> Now it suddenly stopped reproducing. Judging from the call stack, the ORDER BY column has a different type in different blocks -- maybe they switched places somewhere.\r\n\r\n```\r\n\r\n[akuzm-nix] 2021.07.20 14:39:01.757305 [ 320750 ] {51b6c869-7485-46c7-b333-efebf2c07726} <Fatal> : Logical error: 'Bad cast from type DB::ColumnVector<char8_t> to DB::ColumnConst'.\r\n[akuzm-nix] 2021.07.20 14:39:01.759496 [ 320844 ] <Fatal> BaseDaemon: ########################################\r\n[akuzm-nix] 2021.07.20 14:39:01.760052 [ 320844 ] <Fatal> BaseDaemon: (version 21.8.1.1, build id: 259A10D782EAD918) (from thread 320750) (query_id: 51b6c869-7485-46c7-b333-efebf2c07726) Received signal Aborted (6)\r\n[akuzm-nix] 2021.07.20 14:39:01.760578 [ 320844 ] <Fatal> BaseDaemon: \r\n[akuzm-nix] 2021.07.20 14:39:01.761139 [ 320844 ] <Fatal> BaseDaemon: Stack trace: 0x7f843056e18b 0x7f843054d859 0x7f84327894e5 0x7f84327895f9 0x7f8424ce17ec 0x7f84184cb41b 0x7f8414a58640 0x7f8414a588ca 0x7f8414a58e62 0x7f8414a59e83 0x7f8414a5eccf 0x7f84151ccb5c 0x7f84151ccabf 0x7f84151cca5d 0x7f84151cca1d 0x7f84151cc9f5 0x7f84151cc9bd 0x7f843283c5a9 0x7f8432832e95 0x7f84151cb3b6 0x7f84151cbd99 0x7f84151cdc46 0x7f84151cdb9d 0x7f84151cdb41 0x7f84151cda52 0x7f84151cd92c 0x7f84151cd83d 0x7f84151cd7fd 0x7f84151cd7d5 0x7f84151cd7a0 0x7f843283c5a9 0x7f8432832e95 0x7f84328328d4 0x7f84328393a4 0x7f84328392fd 0x7f8432839225 0x7f8432838b42 0x7f843090d609 0x7f843064a293\r\n[akuzm-nix] 2021.07.20 14:39:01.763861 [ 320844 ] <Fatal> BaseDaemon: 4. /build/glibc-eX1tMB/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51: raise @ 0x4618b in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n[akuzm-nix] 2021.07.20 14:39:01.771400 [ 320844 ] <Fatal> BaseDaemon: 5. /build/glibc-eX1tMB/glibc-2.31/stdlib/abort.c:81: abort @ 0x25859 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n[akuzm-nix] 2021.07.20 14:39:02.153717 [ 320844 ] <Fatal> BaseDaemon: 6. /home/akuzm/ch2/ch/src/Common/Exception.cpp:53: DB::handle_error_code(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool, std::__1::vector<void*, std::__1::allocator<void*> > const&) @ 0x2914e5 in /home/akuzm/ch2/build-clang11/src/libclickhouse_common_iod.so\r\n[akuzm-nix] 2021.07.20 14:39:02.470281 [ 320844 ] <Fatal> BaseDaemon: 7. /home/akuzm/ch2/ch/src/Common/Exception.cpp:60: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0x2915f9 in /home/akuzm/ch2/build-clang11/src/libclickhouse_common_iod.so\r\n[akuzm-nix] 2021.07.20 14:39:03.111527 [ 320844 ] <Fatal> BaseDaemon: 8. /home/akuzm/ch2/ch/src/Common/assert_cast.h:47: DB::ColumnConst const& assert_cast<DB::ColumnConst const&, DB::IColumn const&>(DB::IColumn const&) @ 0x4c9c7ec in /home/akuzm/ch2/build-clang11/src/Functions/libclickhouse_functionsd.so\r\n[akuzm-nix] 2021.07.20 14:39:03.175100 [ 320844 ] <Fatal> BaseDaemon: 9. /home/akuzm/ch2/ch/src/Columns/ColumnConst.h:207: DB::ColumnConst::compareAt(unsigned long, unsigned long, DB::IColumn const&, int) const @ 0x24841b in /home/akuzm/ch2/build-clang11/src/libclickhouse_columnsd.so\r\n[akuzm-nix] 2021.07.20 14:39:03.484497 [ 320844 ] <Fatal> BaseDaemon: 10. /home/akuzm/ch2/ch/src/Processors/Transforms/WindowTransform.cpp:651: DB::WindowTransform::arePeers(DB::RowNumber const&, DB::RowNumber const&) const @ 0x291640 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_transformsd.so\r\n[akuzm-nix] 2021.07.20 14:39:03.789295 [ 320844 ] <Fatal> BaseDaemon: 11. /home/akuzm/ch2/ch/src/Processors/Transforms/WindowTransform.cpp:704: DB::WindowTransform::advanceFrameEndCurrentRow() @ 0x2918ca in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_transformsd.so\r\n[akuzm-nix] 2021.07.20 14:39:04.094688 [ 320844 ] <Fatal> BaseDaemon: 12. /home/akuzm/ch2/ch/src/Processors/Transforms/WindowTransform.cpp:808: DB::WindowTransform::advanceFrameEnd() @ 0x291e62 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_transformsd.so\r\n[akuzm-nix] 2021.07.20 14:39:04.415181 [ 320844 ] <Fatal> BaseDaemon: 13. /home/akuzm/ch2/ch/src/Processors/Transforms/WindowTransform.cpp:1064: DB::WindowTransform::appendChunk(DB::Chunk&) @ 0x292e83 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_transformsd.so\r\n[akuzm-nix] 2021.07.20 14:39:04.720118 [ 320844 ] <Fatal> BaseDaemon: 14. /home/akuzm/ch2/ch/src/Processors/Transforms/WindowTransform.cpp:1306: DB::WindowTransform::work() @ 0x297ccf in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_transformsd.so\r\n^[[200~01798_having_push_down^[[201~[akuzm-nix] 2021.07.20 14:39:05.260999 [ 320844 ] <Fatal> BaseDaemon: 15. /home/akuzm/ch2/ch/src/Processors/Executors/PipelineExecutor.cpp:80: DB::executeJob(DB::IProcessor*) @ 0x98b5c in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:05.778555 [ 320844 ] <Fatal> BaseDaemon: 16. /home/akuzm/ch2/ch/src/Processors/Executors/PipelineExecutor.cpp:97: DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0::operator()() const @ 0x98abf in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:06.307507 [ 320844 ] <Fatal> BaseDaemon: 17. /home/akuzm/ch2/ch/contrib/libcxx/include/type_traits:3676: decltype(std::__1::forward<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(fp)()) std::__1::__invoke<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&) @ 0x98a5d in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:06.835901 [ 320844 ] <Fatal> BaseDaemon: 18. /home/akuzm/ch2/ch/contrib/libcxx/include/__functional_base:349: void std::__1::__invoke_void_return_wrapper<void>::__call<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&>(DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0&) @ 0x98a1d in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:07.357270 [ 320844 ] <Fatal> BaseDaemon: 19. /home/akuzm/ch2/ch/contrib/libcxx/include/functional:1608: std::__1::__function::__default_alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, void ()>::operator()() @ 0x989f5 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:07.872070 [ 320844 ] <Fatal> BaseDaemon: 20. /home/akuzm/ch2/ch/contrib/libcxx/include/functional:2089: void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::PipelineExecutor::addJob(DB::ExecutingGraph::Node*)::$_0, void ()> >(std::__1::__function::__policy_storage const*) @ 0x989bd in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:07.990026 [ 320844 ] <Fatal> BaseDaemon: 21. /home/akuzm/ch2/ch/contrib/libcxx/include/functional:2221: std::__1::__function::__policy_func<void ()>::operator()() const @ 0x3445a9 in /home/akuzm/ch2/build-clang11/src/libclickhouse_common_iod.so\r\n[akuzm-nix] 2021.07.20 14:39:08.095376 [ 320844 ] <Fatal> BaseDaemon: 22. /home/akuzm/ch2/ch/contrib/libcxx/include/functional:2560: std::__1::function<void ()>::operator()() const @ 0x33ae95 in /home/akuzm/ch2/build-clang11/src/libclickhouse_common_iod.so\r\n[akuzm-nix] 2021.07.20 14:39:08.594538 [ 320844 ] <Fatal> BaseDaemon: 23. /home/akuzm/ch2/ch/src/Processors/Executors/PipelineExecutor.cpp:589: DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0x973b6 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:09.110655 [ 320844 ] <Fatal> BaseDaemon: 24. /home/akuzm/ch2/ch/src/Processors/Executors/PipelineExecutor.cpp:474: DB::PipelineExecutor::executeSingleThread(unsigned long, unsigned long) @ 0x97d99 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:09.658755 [ 320844 ] <Fatal> BaseDaemon: 25. /home/akuzm/ch2/ch/src/Processors/Executors/PipelineExecutor.cpp:777: DB::PipelineExecutor::executeImpl(unsigned long)::$_4::operator()() const @ 0x99c46 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:10.195960 [ 320844 ] <Fatal> BaseDaemon: 26. /home/akuzm/ch2/ch/contrib/libcxx/include/type_traits:3682: decltype(std::__1::forward<DB::PipelineExecutor::executeImpl(unsigned long)::$_4&>(fp)()) std::__1::__invoke_constexpr<DB::PipelineExecutor::executeImpl(unsigned long)::$_4&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&) @ 0x99b9d in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:10.738523 [ 320844 ] <Fatal> BaseDaemon: 27. /home/akuzm/ch2/ch/contrib/libcxx/include/tuple:1415: decltype(auto) std::__1::__apply_tuple_impl<DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&, std::__1::__tuple_indices<>) @ 0x99b41 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:11.278937 [ 320844 ] <Fatal> BaseDaemon: 28. /home/akuzm/ch2/ch/contrib/libcxx/include/tuple:1424: decltype(auto) std::__1::apply<DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&, std::__1::tuple<>&) @ 0x99a52 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:11.811674 [ 320844 ] <Fatal> BaseDaemon: 29. /home/akuzm/ch2/ch/src/Common/ThreadPool.h:182: ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::'lambda'()::operator()() @ 0x9992c in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:12.371912 [ 320844 ] <Fatal> BaseDaemon: 30. /home/akuzm/ch2/ch/contrib/libcxx/include/type_traits:3676: decltype(std::__1::forward<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(fp)()) std::__1::__invoke<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::'lambda'()&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&) @ 0x9983d in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:12.904253 [ 320844 ] <Fatal> BaseDaemon: 31. /home/akuzm/ch2/ch/contrib/libcxx/include/__functional_base:349: void std::__1::__invoke_void_return_wrapper<void>::__call<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::'lambda'()&>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&...) @ 0x997fd in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:13.454584 [ 320844 ] <Fatal> BaseDaemon: 32. /home/akuzm/ch2/ch/contrib/libcxx/include/functional:1608: std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::'lambda'(), void ()>::operator()() @ 0x997d5 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:14.029228 [ 320844 ] <Fatal> BaseDaemon: 33. /home/akuzm/ch2/ch/contrib/libcxx/include/functional:2089: void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPool::ThreadFromGlobalPool<DB::PipelineExecutor::executeImpl(unsigned long)::$_4>(DB::PipelineExecutor::executeImpl(unsigned long)::$_4&&)::'lambda'(), void ()> >(std::__1::__function::__policy_storage const*) @ 0x997a0 in /home/akuzm/ch2/build-clang11/src/libclickhouse_processors_executorsd.so\r\n[akuzm-nix] 2021.07.20 14:39:14.167994 [ 320844 ] <Fatal> BaseDaemon: 34. /home/akuzm/ch2/ch/contrib/libcxx/include/functional:2221: std::__1::__function::__policy_func<void ()>::operator()() const @ 0x3445a9 in /home/akuzm/ch2/build-clang11/src/libclickhouse_common_iod.so\r\n[akuzm-nix] 2021.07.20 14:39:14.285947 [ 320844 ] <Fatal> BaseDaemon: 35. /home/akuzm/ch2/ch/contrib/libcxx/include/functional:2560: std::__1::function<void ()>::operator()() const @ 0x33ae95 in /home/akuzm/ch2/build-clang11/src/libclickhouse_common_iod.so\r\n[akuzm-nix] 2021.07.20 14:39:14.414673 [ 320844 ] <Fatal> BaseDaemon: 36. /home/akuzm/ch2/ch/src/Common/ThreadPool.cpp:266: ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x33a8d4 in /home/akuzm/ch2/build-clang11/src/libclickhouse_common_iod.so\r\n[akuzm-nix] 2021.07.20 14:39:14.538144 [ 320844 ] <Fatal> BaseDaemon: 37. /home/akuzm/ch2/ch/src/Common/ThreadPool.cpp:136: void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()::operator()() const @ 0x3413a4 in /home/akuzm/ch2/build-clang11/src/libclickhouse_common_iod.so\r\n[akuzm-nix] 2021.07.20 14:39:14.650713 [ 320844 ] <Fatal> BaseDaemon: 38. /home/akuzm/ch2/ch/contrib/libcxx/include/type_traits:3676: decltype(std::__1::forward<void>(fp)(std::__1::forward<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()>(fp0)...)) std::__1::__invoke<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()>(void&&, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()&&...) @ 0x3412fd in /home/akuzm/ch2/build-clang11/src/libclickhouse_common_iod.so\r\n[akuzm-nix] 2021.07.20 14:39:14.761567 [ 320844 ] <Fatal> BaseDaemon: 39. /home/akuzm/ch2/ch/contrib/libcxx/include/thread:281: void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()>&, std::__1::__tuple_indices<>) @ 0x341225 in /home/akuzm/ch2/build-clang11/src/libclickhouse_common_iod.so\r\n[akuzm-nix] 2021.07.20 14:39:14.876057 [ 320844 ] <Fatal> BaseDaemon: 40. /home/akuzm/ch2/ch/contrib/libcxx/include/thread:291: void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda0'()> >(void*) @ 0x340b42 in /home/akuzm/ch2/build-clang11/src/libclickhouse_common_iod.so\r\n[akuzm-nix] 2021.07.20 14:39:14.876349 [ 320844 ] <Fatal> BaseDaemon: 41. start_thread @ 0x9609 in /lib/x86_64-linux-gnu/libpthread-2.31.so\r\n[akuzm-nix] 2021.07.20 14:39:14.877105 [ 320844 ] <Fatal> BaseDaemon: 42. /build/glibc-eX1tMB/glibc-2.31/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97: clone @ 0x122293 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n[akuzm-nix] 2021.07.20 14:39:14.877451 [ 320844 ] <Fatal> BaseDaemon: Calculated checksum of the binary: CD59BDFB60ADA89EB162E46274D53976. There is no information about the reference checksum.\r\n```\n```\r\nchunk structure ' UInt64(size = 2) Const(size = 2, UInt8(size = 1))'\r\nchunk structure ' UInt64(size = 4) UInt8(size = 4)'\r\n```\r\n\r\nEhh.....\n> Now it suddenly stopped reproducing. Judging from the call stack, the ORDER BY column has a different type in different blocks -- maybe they switched places somewhere.\r\n\r\nThe reason it stopped reproducing was that the table pk_order  got merged into a single part in background, so window transform only got one input block. It reproduces well after truncate + stop merges + insert.",
  "created_at": "2021-07-21T13:08:18Z",
  "modified_files": [
    "src/Processors/Transforms/WindowTransform.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01571_window_functions.reference",
    "tests/queries/0_stateless/01571_window_functions.sql"
  ]
}