diff --git a/tests/integration/test_backward_compatability/test_string_aggregation.py b/tests/integration/test_backward_compatability/test_string_aggregation.py
deleted file mode 100644
index e69de29bb2d1..000000000000
diff --git a/tests/integration/test_backward_compatability/__init__.py b/tests/integration/test_backward_compatibility/__init__.py
similarity index 100%
rename from tests/integration/test_backward_compatability/__init__.py
rename to tests/integration/test_backward_compatibility/__init__.py
diff --git a/tests/integration/test_backward_compatability/test.py b/tests/integration/test_backward_compatibility/test.py
similarity index 100%
rename from tests/integration/test_backward_compatability/test.py
rename to tests/integration/test_backward_compatibility/test.py
diff --git a/tests/integration/test_backward_compatibility/test_aggregate_function_state_avg.py b/tests/integration/test_backward_compatibility/test_aggregate_function_state_avg.py
new file mode 100644
index 000000000000..c9f3acc2e2ea
--- /dev/null
+++ b/tests/integration/test_backward_compatibility/test_aggregate_function_state_avg.py
@@ -0,0 +1,52 @@
+import pytest
+
+import helpers.client as client
+from helpers.cluster import ClickHouseCluster
+
+cluster = ClickHouseCluster(__file__)
+node1 = cluster.add_instance('node1',
+    with_zookeeper=False, image='yandex/clickhouse-server:19.16.9.37', stay_alive=True, with_installed_binary=True)
+node2 = cluster.add_instance('node2',
+    with_zookeeper=False, image='yandex/clickhouse-server:19.16.9.37', stay_alive=True, with_installed_binary=True)
+node3 = cluster.add_instance('node3', with_zookeeper=False)
+node4 = cluster.add_instance('node4', with_zookeeper=False)
+
+@pytest.fixture(scope="module")
+def start_cluster():
+    try:
+        cluster.start()
+        yield cluster
+
+    finally:
+        cluster.shutdown()
+
+# We will test that serialization of internal state of "avg" function is compatible between different versions.
+# TODO Implement versioning of serialization format for aggregate function states.
+# NOTE This test is too ad-hoc.
+
+def test_backward_compatability(start_cluster):
+    node1.query("create table tab (x UInt64) engine = Memory")
+    node2.query("create table tab (x UInt64) engine = Memory")
+    node3.query("create table tab (x UInt64) engine = Memory")
+    node4.query("create table tab (x UInt64) engine = Memory")
+
+    node1.query("INSERT INTO tab VALUES (1)")
+    node2.query("INSERT INTO tab VALUES (2)")
+    node3.query("INSERT INTO tab VALUES (3)")
+    node4.query("INSERT INTO tab VALUES (4)")
+
+    assert(node1.query("SELECT avg(x) FROM remote('node{1..4}', default, tab)") == '2.5
')
+    assert(node2.query("SELECT avg(x) FROM remote('node{1..4}', default, tab)") == '2.5
')
+    assert(node3.query("SELECT avg(x) FROM remote('node{1..4}', default, tab)") == '2.5
')
+    assert(node4.query("SELECT avg(x) FROM remote('node{1..4}', default, tab)") == '2.5
')
+
+    # Also check with persisted aggregate function state
+
+    node1.query("create table state (x AggregateFunction(avg, UInt64)) engine = Log")
+    node1.query("INSERT INTO state SELECT avgState(arrayJoin(CAST([1, 2, 3, 4] AS Array(UInt64))))")
+
+    assert(node1.query("SELECT avgMerge(x) FROM state") == '2.5
')
+
+    node1.restart_with_latest_version()
+
+    assert(node1.query("SELECT avgMerge(x) FROM state") == '2.5
')
diff --git a/tests/integration/test_backward_compatability/test_short_strings_aggregation.py b/tests/integration/test_backward_compatibility/test_short_strings_aggregation.py
similarity index 100%
rename from tests/integration/test_backward_compatability/test_short_strings_aggregation.py
rename to tests/integration/test_backward_compatibility/test_short_strings_aggregation.py
