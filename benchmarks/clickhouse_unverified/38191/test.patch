diff --git a/tests/performance/grace_hash_join.xml b/tests/performance/grace_hash_join.xml
new file mode 100644
index 000000000000..8b28f9d74143
--- /dev/null
+++ b/tests/performance/grace_hash_join.xml
@@ -0,0 +1,21 @@
+<test>
+    <settings>
+        <max_threads>16</max_threads>
+        <max_memory_usage>10G</max_memory_usage>
+    </settings>
+
+    <substitutions>
+        <substitution>
+            <name>settings</name>
+            <values>
+                <value>join_algorithm='hash'</value>
+                <value>join_algorithm='parallel_hash'</value>
+                <value>join_algorithm='partial_merge', max_bytes_in_join='1G'</value>
+                <value>join_algorithm='grace_hash', max_bytes_in_join='100M'</value>
+            </values>
+        </substitution>
+    </substitutions>
+
+    <query short='numbers'>SELECT sum(n) FROM (SELECT number * 2 AS n FROM numbers_mt(10000000)) AS lhs JOIN (SELECT number * 3 AS n FROM numbers_mt(10000000)) AS rhs USING (n) SETTINGS {settings} FORMAT Null</query>
+    <query short='numbers_hashed'>SELECT sum(n) FROM (SELECT intHash64(number * 2) AS n FROM numbers_mt(10000000)) AS lhs JOIN (SELECT intHash64(number * 3) AS n FROM numbers_mt(10000000)) AS rhs USING (n) SETTINGS {settings} FORMAT Null</query>
+</test>
diff --git a/tests/queries/0_stateless/00800_low_cardinality_merge_join.reference.j2 b/tests/queries/0_stateless/00800_low_cardinality_merge_join.reference.j2
index 060012610889..296e0276653b 100644
--- a/tests/queries/0_stateless/00800_low_cardinality_merge_join.reference.j2
+++ b/tests/queries/0_stateless/00800_low_cardinality_merge_join.reference.j2
@@ -1,4 +1,4 @@
-{% for join_algorithm in ['partial_merge', 'full_sorting_merge'] -%}
+{% for join_algorithm in ['partial_merge', 'full_sorting_merge', 'grace_hash'] -%}
 0
 0
 0
diff --git a/tests/queries/0_stateless/00800_low_cardinality_merge_join.sql.j2 b/tests/queries/0_stateless/00800_low_cardinality_merge_join.sql.j2
index d0dd908ae67c..8b7856b7738c 100644
--- a/tests/queries/0_stateless/00800_low_cardinality_merge_join.sql.j2
+++ b/tests/queries/0_stateless/00800_low_cardinality_merge_join.sql.j2
@@ -1,34 +1,34 @@
-{% for join_algorithm in ['partial_merge', 'full_sorting_merge'] -%}
+{% for join_algorithm in ['partial_merge', 'full_sorting_merge', 'grace_hash'] -%}
 
-set join_algorithm = '{{ join_algorithm }}';
+SET join_algorithm = '{{ join_algorithm }}';
 
-select * from (select dummy as val from system.one) s1 any left join (select dummy as val from system.one) s2 using val;
-select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select dummy as val from system.one) s2 using val;
-select * from (select dummy as val from system.one) s1 any left join (select toLowCardinality(dummy) as val from system.one) s2 using val;
-select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select toLowCardinality(dummy) as val from system.one) s2 using val;
-select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select dummy as val from system.one) s2 using val;
-select * from (select dummy as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as val from system.one) s2 using val;
-select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select toLowCardinality(dummy) as val from system.one) s2 using val;
-select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as val from system.one) s2 using val;
-select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as val from system.one) s2 using val;
-select '-';
-select * from (select dummy as val from system.one) s1 any left join (select dummy as val from system.one) s2 on val + 0 = val * 1; -- { serverError 352 }
-select * from (select dummy as val from system.one) s1 any left join (select dummy as rval from system.one) s2 on val + 0 = rval * 1;
-select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select dummy as rval from system.one) s2 on val + 0 = rval * 1;
-select * from (select dummy as val from system.one) s1 any left join (select toLowCardinality(dummy) as rval from system.one) s2 on val + 0 = rval * 1;
-select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select toLowCardinality(dummy) as rval from system.one) s2 on val + 0 = rval * 1;
-select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select dummy as rval from system.one) s2 on val + 0 = rval * 1;
-select * from (select dummy as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as rval from system.one) s2 on val + 0 = rval * 1;
-select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select toLowCardinality(dummy) as rval from system.one) s2 on val + 0 = rval * 1;
-select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as rval from system.one) s2 on val + 0 = rval * 1;
-select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as rval from system.one) s2 on val + 0 = rval * 1;
-select '-';
-select * from (select number as l from system.numbers limit 3) s1 any left join (select number as r from system.numbers limit 3) s2 on l + 1 = r * 1;
-select * from (select toLowCardinality(number) as l from system.numbers limit 3) s1 any left join (select number as r from system.numbers limit 3) s2 on l + 1 = r * 1;
-select * from (select number as l from system.numbers limit 3) s1 any left join (select toLowCardinality(number) as r from system.numbers limit 3) s2 on l + 1 = r * 1;
-select * from (select toLowCardinality(number) as l from system.numbers limit 3) s1 any left join (select toLowCardinality(number) as r from system.numbers limit 3) s2 on l + 1 = r * 1;
-select * from (select toLowCardinality(toNullable(number)) as l from system.numbers limit 3) s1 any left join (select toLowCardinality(number) as r from system.numbers limit 3) s2 on l + 1 = r * 1;
-select * from (select toLowCardinality(number) as l from system.numbers limit 3) s1 any left join (select toLowCardinality(toNullable(number)) as r from system.numbers limit 3) s2 on l + 1 = r * 1;
-select * from (select toLowCardinality(toNullable(number)) as l from system.numbers limit 3) s1 any left join (select toLowCardinality(toNullable(number)) as r from system.numbers limit 3) s2 on l + 1 = r * 1;
+SELECT * FROM (SELECT dummy AS val FROM system.one) s1 ANY LEFT JOIN (SELECT dummy AS val FROM system.one) s2 USING val ORDER BY val;
+SELECT * FROM (SELECT toLowCardinality(dummy) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT dummy AS val FROM system.one) s2 USING val ORDER BY val;
+SELECT * FROM (SELECT dummy AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS val FROM system.one) s2 USING val ORDER BY val;
+SELECT * FROM (SELECT toLowCardinality(dummy) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS val FROM system.one) s2 USING val ORDER BY val;
+SELECT * FROM (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT dummy AS val FROM system.one) s2 USING val ORDER BY val;
+SELECT * FROM (SELECT dummy AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s2 USING val ORDER BY val;
+SELECT * FROM (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS val FROM system.one) s2 USING val ORDER BY val;
+SELECT * FROM (SELECT toLowCardinality(dummy) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s2 USING val ORDER BY val;
+SELECT * FROM (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s2 USING val ORDER BY val;
+SELECT '-';
+SELECT * FROM (SELECT dummy AS val FROM system.one) s1 ANY LEFT JOIN (SELECT dummy AS val FROM system.one) s2 ON val + 0 = val * 1 ORDER BY val; -- { serverError 352 }
+SELECT * FROM (SELECT dummy AS val FROM system.one) s1 ANY LEFT JOIN (SELECT dummy AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;
+SELECT * FROM (SELECT toLowCardinality(dummy) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT dummy AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;
+SELECT * FROM (SELECT dummy AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;
+SELECT * FROM (SELECT toLowCardinality(dummy) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;
+SELECT * FROM (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT dummy AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;
+SELECT * FROM (SELECT dummy AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(dummy)) AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;
+SELECT * FROM (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;
+SELECT * FROM (SELECT toLowCardinality(dummy) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(dummy)) AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;
+SELECT * FROM (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(dummy)) AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;
+SELECT '-';
+SELECT * FROM (SELECT number AS l FROM system.numbers LIMIT 3) s1 ANY LEFT JOIN (SELECT number AS r FROM system.numbers LIMIT 3) s2 ON l + 1 = r * 1 ORDER BY l;
+SELECT * FROM (SELECT toLowCardinality(number) AS l FROM system.numbers LIMIT 3) s1 ANY LEFT JOIN (SELECT number AS r FROM system.numbers LIMIT 3) s2 ON l + 1 = r * 1 ORDER BY l;
+SELECT * FROM (SELECT number AS l FROM system.numbers LIMIT 3) s1 ANY LEFT JOIN (SELECT toLowCardinality(number) AS r FROM system.numbers LIMIT 3) s2 ON l + 1 = r * 1 ORDER BY l;
+SELECT * FROM (SELECT toLowCardinality(number) AS l FROM system.numbers LIMIT 3) s1 ANY LEFT JOIN (SELECT toLowCardinality(number) AS r FROM system.numbers LIMIT 3) s2 ON l + 1 = r * 1 ORDER BY l;
+SELECT * FROM (SELECT toLowCardinality(toNullable(number)) AS l FROM system.numbers LIMIT 3) s1 ANY LEFT JOIN (SELECT toLowCardinality(number) AS r FROM system.numbers LIMIT 3) s2 ON l + 1 = r * 1 ORDER BY l;
+SELECT * FROM (SELECT toLowCardinality(number) AS l FROM system.numbers LIMIT 3) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(number)) AS r FROM system.numbers LIMIT 3) s2 ON l + 1 = r * 1 ORDER BY l;
+SELECT * FROM (SELECT toLowCardinality(toNullable(number)) AS l FROM system.numbers LIMIT 3) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(number)) AS r FROM system.numbers LIMIT 3) s2 ON l + 1 = r * 1 ORDER BY l;
 
 {% endfor -%}
diff --git a/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.reference b/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.reference
index 95859e3e0a43..0ace422adc29 100644
--- a/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.reference
+++ b/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.reference
@@ -8,3 +8,8 @@
 3
 4
 5
+1	1
+2
+3
+4
+5
diff --git a/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.sql b/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.sql
index 9abfc425d83d..515598971209 100644
--- a/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.sql
+++ b/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.sql
@@ -13,3 +13,11 @@ select * from (select materialize(2) as x) s1 left join (select 2 as x) s2 using
 select * from (select 3 as x) s1 left join (select materialize(3) as x) s2 using x;
 select * from (select toLowCardinality(4) as x) s1 left join (select 4 as x) s2 using x;
 select * from (select 5 as x) s1 left join (select toLowCardinality(5) as x) s2 using x;
+
+SET join_algorithm = 'grace_hash';
+
+select s1.x, s2.x from (select 1 as x) s1 left join (select 1 as x) s2 using x;
+select * from (select materialize(2) as x) s1 left join (select 2 as x) s2 using x;
+select * from (select 3 as x) s1 left join (select materialize(3) as x) s2 using x;
+select * from (select toLowCardinality(4) as x) s1 left join (select 4 as x) s2 using x;
+select * from (select 5 as x) s1 left join (select toLowCardinality(5) as x) s2 using x;
diff --git a/tests/queries/0_stateless/01010_pmj_on_disk.reference b/tests/queries/0_stateless/01010_pmj_on_disk.reference
index ba1d03fcc5d2..74f12daa2037 100644
--- a/tests/queries/0_stateless/01010_pmj_on_disk.reference
+++ b/tests/queries/0_stateless/01010_pmj_on_disk.reference
@@ -14,3 +14,7 @@
 1	0
 2	11
 3	0
+0	10
+1	0
+2	11
+3	0
diff --git a/tests/queries/0_stateless/01010_pmj_on_disk.sql b/tests/queries/0_stateless/01010_pmj_on_disk.sql
index 28bc0ced3b74..d4fb91848963 100644
--- a/tests/queries/0_stateless/01010_pmj_on_disk.sql
+++ b/tests/queries/0_stateless/01010_pmj_on_disk.sql
@@ -5,7 +5,8 @@ ANY LEFT JOIN (
     SELECT number * 2 AS n, number + 10 AS j
     FROM numbers(4000)
 ) js2
-USING n;
+USING n
+ORDER BY n;
 
 SET max_rows_in_join = 1000;
 
@@ -14,7 +15,8 @@ ANY LEFT JOIN (
     SELECT number * 2 AS n, number + 10 AS j
     FROM numbers(4000)
 ) js2
-USING n; -- { serverError 191 }
+USING n
+ORDER BY n; -- { serverError 191 }
 
 SET join_algorithm = 'partial_merge';
 
@@ -23,7 +25,8 @@ ANY LEFT JOIN (
     SELECT number * 2 AS n, number + 10 AS j
     FROM numbers(4000)
 ) js2
-USING n;
+USING n
+ORDER BY n;
 
 SET partial_merge_join_optimizations = 1;
 
@@ -32,7 +35,8 @@ ANY LEFT JOIN (
     SELECT number * 2 AS n, number + 10 AS j
     FROM numbers(4000)
 ) js2
-USING n;
+USING n
+ORDER BY n;
 
 SET join_algorithm = 'auto';
 
@@ -41,4 +45,15 @@ ANY LEFT JOIN (
     SELECT number * 2 AS n, number + 10 AS j
     FROM numbers(4000)
 ) js2
-USING n;
+USING n
+ORDER BY n;
+
+SET max_rows_in_join = '10';
+
+SELECT number as n, j FROM numbers(4) nums
+ANY LEFT JOIN (
+    SELECT number * 2 AS n, number + 10 AS j
+    FROM numbers(4000)
+) js2
+USING n
+ORDER BY n;
diff --git a/tests/queries/0_stateless/01120_join_constants.sql b/tests/queries/0_stateless/01120_join_constants.sql
index d6d6a1be43b8..fdf297f5934c 100644
--- a/tests/queries/0_stateless/01120_join_constants.sql
+++ b/tests/queries/0_stateless/01120_join_constants.sql
@@ -14,7 +14,7 @@ LEFT JOIN
     SELECT
         arrayJoin([1, 3]) AS k,
         'world'
-) AS t2 ON t1.k = t2.k;
+) AS t2 ON t1.k = t2.k ORDER BY t1.k;
 
 SELECT
     t1.*,
@@ -32,4 +32,4 @@ LEFT JOIN
     SELECT
         arrayJoin([1, 3]) AS k,
         123
-) AS t2 ON t1.k = t2.k;
+) AS t2 ON t1.k = t2.k ORDER BY t1.k;
diff --git a/tests/queries/0_stateless/01144_join_rewrite_with_ambiguous_column_and_view.sql b/tests/queries/0_stateless/01144_join_rewrite_with_ambiguous_column_and_view.sql
index ae8448884075..d73d438d9da5 100644
--- a/tests/queries/0_stateless/01144_join_rewrite_with_ambiguous_column_and_view.sql
+++ b/tests/queries/0_stateless/01144_join_rewrite_with_ambiguous_column_and_view.sql
@@ -17,7 +17,7 @@ SELECT t1.id, t2.id as id, t3.id as value
 FROM (select number as id, 42 as value from numbers(4)) t1
 LEFT JOIN (select number as id, 42 as value from numbers(3)) t2 ON t1.id = t2.id
 LEFT JOIN (select number as id, 42 as value from numbers(2)) t3 ON t1.id = t3.id
-WHERE id > 0 AND value < 42;
+WHERE id > 0 AND value < 42 ORDER BY id;
 
 CREATE VIEW IF NOT EXISTS view1 AS
     SELECT t1.id AS id, t1.value1 AS value1, t2.value2 AS value2, t3.value3 AS value3
@@ -26,7 +26,7 @@ CREATE VIEW IF NOT EXISTS view1 AS
     LEFT JOIN t3 ON t1.id = t3.id
     WHERE t1.id > 0;
 
-SELECT * FROM view1 WHERE id = 1;
+SELECT * FROM view1 WHERE id = 1 ORDER BY id;
 
 DROP TABLE IF EXISTS t1;
 DROP TABLE IF EXISTS t2;
diff --git a/tests/queries/0_stateless/01710_projection_with_joins.sql b/tests/queries/0_stateless/01710_projection_with_joins.sql
index a54ba21fd279..5dac2f05da94 100644
--- a/tests/queries/0_stateless/01710_projection_with_joins.sql
+++ b/tests/queries/0_stateless/01710_projection_with_joins.sql
@@ -2,20 +2,20 @@ drop table if exists t;
 
 create table t (s UInt16, l UInt16, projection p (select s, l order by l)) engine MergeTree order by s;
 
-select s from t join (select toUInt16(1) as s) x using (s) settings allow_experimental_projection_optimization = 1;
-select s from t join (select toUInt16(1) as s) x using (s) settings allow_experimental_projection_optimization = 0;
+select s from t join (select toUInt16(1) as s) x using (s) order by s settings allow_experimental_projection_optimization = 1;
+select s from t join (select toUInt16(1) as s) x using (s) order by s settings allow_experimental_projection_optimization = 0;
 
 drop table t;
 
 drop table if exists mt;
 create table mt (id1 Int8, id2 Int8) Engine=MergeTree order by tuple();
-select id1 as alias1 from mt all inner join (select id2 as alias1 from mt) as t using (alias1) settings allow_experimental_projection_optimization = 1;
-select id1 from mt all inner join (select id2 as id1 from mt) as t using (id1) settings allow_experimental_projection_optimization = 1;
-select id2 as id1 from mt all inner join (select id1 from mt) as t using (id1) settings allow_experimental_projection_optimization = 1;
+select id1 as alias1 from mt all inner join (select id2 as alias1 from mt) as t using (alias1) order by id1 settings allow_experimental_projection_optimization = 1;
+select id1 from mt all inner join (select id2 as id1 from mt) as t using (id1) order by id1 settings allow_experimental_projection_optimization = 1;
+select id2 as id1 from mt all inner join (select id1 from mt) as t using (id1) order by id1 settings allow_experimental_projection_optimization = 1;
 drop table mt;
 
 drop table if exists j;
 create table j (id1 Int8, id2 Int8, projection p (select id1, id2 order by id2)) Engine=MergeTree order by id1 settings index_granularity = 1;
 insert into j select number, number from numbers(10);
-select id1 as alias1 from j all inner join (select id2 as alias1 from j where id2 in (1, 2, 3)) as t using (alias1) where id2 in (2, 3, 4) settings allow_experimental_projection_optimization = 1;
+select id1 as alias1 from j all inner join (select id2 as alias1 from j where id2 in (1, 2, 3)) as t using (alias1) where id2 in (2, 3, 4) order by id1 settings allow_experimental_projection_optimization = 1;
 drop table j;
diff --git a/tests/queries/0_stateless/01721_join_implicit_cast_long.reference b/tests/queries/0_stateless/01721_join_implicit_cast_long.reference
deleted file mode 100644
index 07c240fa784d..000000000000
--- a/tests/queries/0_stateless/01721_join_implicit_cast_long.reference
+++ /dev/null
@@ -1,1005 +0,0 @@
-=== hash ===
-= full =
--4	0	196
--3	0	197
--2	0	198
--1	0	199
-0	0	200
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-6	106	\N
-7	107	\N
-8	108	\N
-9	109	\N
-10	110	\N
-= left =
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-6	106	\N
-7	107	\N
-8	108	\N
-9	109	\N
-10	110	\N
-= right =
--4	0	196
--3	0	197
--2	0	198
--1	0	199
-0	0	200
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-= inner =
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-= full =
-0	0	-4
-0	0	-3
-0	0	-2
-0	0	-1
-0	0	0
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-6	6	0
-7	7	0
-8	8	0
-9	9	0
-10	10	0
-= left =
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-6	6	0
-7	7	0
-8	8	0
-9	9	0
-10	10	0
-= right =
-0	0	-4
-0	0	-3
-0	0	-2
-0	0	-1
-0	0	0
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-= inner =
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-= join on =
-= full =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= left =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= right =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= inner =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= full =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= left =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= right =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= inner =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= agg =
-1
-1
-1
-1
-1
-1
-0	-10	0
-1	55	1055
-0	0	-10	0	990
-1	55	15	1055	1015
-= types =
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-=== partial_merge ===
-= full =
--4	0	196
--3	0	197
--2	0	198
--1	0	199
-0	0	200
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-6	106	\N
-7	107	\N
-8	108	\N
-9	109	\N
-10	110	\N
-= left =
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-6	106	\N
-7	107	\N
-8	108	\N
-9	109	\N
-10	110	\N
-= right =
--4	0	196
--3	0	197
--2	0	198
--1	0	199
-0	0	200
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-= inner =
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-= full =
-0	0	-4
-0	0	-3
-0	0	-2
-0	0	-1
-0	0	0
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-6	6	0
-7	7	0
-8	8	0
-9	9	0
-10	10	0
-= left =
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-6	6	0
-7	7	0
-8	8	0
-9	9	0
-10	10	0
-= right =
-0	0	-4
-0	0	-3
-0	0	-2
-0	0	-1
-0	0	0
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-= inner =
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-= join on =
-= full =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= left =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= right =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= inner =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= full =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= left =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= right =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= inner =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= agg =
-1
-1
-1
-1
-1
-1
-0	-10	0
-1	55	1055
-0	0	-10	0	990
-1	55	15	1055	1015
-= types =
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-=== full_sorting_merge ===
-= full =
--4	0	196
--3	0	197
--2	0	198
--1	0	199
-0	0	200
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-6	106	\N
-7	107	\N
-8	108	\N
-9	109	\N
-10	110	\N
-= left =
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-6	106	\N
-7	107	\N
-8	108	\N
-9	109	\N
-10	110	\N
-= right =
--4	0	196
--3	0	197
--2	0	198
--1	0	199
-0	0	200
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-= inner =
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-= full =
-0	0	-4
-0	0	-3
-0	0	-2
-0	0	-1
-0	0	0
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-6	6	0
-7	7	0
-8	8	0
-9	9	0
-10	10	0
-= left =
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-6	6	0
-7	7	0
-8	8	0
-9	9	0
-10	10	0
-= right =
-0	0	-4
-0	0	-3
-0	0	-2
-0	0	-1
-0	0	0
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-= inner =
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-= join on =
-= full =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= left =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= right =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= inner =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= full =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= left =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= right =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= inner =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= agg =
-1
-1
-1
-1
-1
-1
-0	-10	0
-1	55	1055
-0	0	-10	0	990
-1	55	15	1055	1015
-= types =
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-=== auto ===
-= full =
--4	0	196
--3	0	197
--2	0	198
--1	0	199
-0	0	200
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-6	106	\N
-7	107	\N
-8	108	\N
-9	109	\N
-10	110	\N
-= left =
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-6	106	\N
-7	107	\N
-8	108	\N
-9	109	\N
-10	110	\N
-= right =
--4	0	196
--3	0	197
--2	0	198
--1	0	199
-0	0	200
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-= inner =
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-= full =
-0	0	-4
-0	0	-3
-0	0	-2
-0	0	-1
-0	0	0
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-6	6	0
-7	7	0
-8	8	0
-9	9	0
-10	10	0
-= left =
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-6	6	0
-7	7	0
-8	8	0
-9	9	0
-10	10	0
-= right =
-0	0	-4
-0	0	-3
-0	0	-2
-0	0	-1
-0	0	0
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-= inner =
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-= join on =
-= full =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= left =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= right =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= inner =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= full =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= left =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	0	\N
-7	107	0	\N
-8	108	0	\N
-9	109	0	\N
-10	110	0	\N
-= right =
-0	0	-4	196
-0	0	-3	197
-0	0	-2	198
-0	0	-1	199
-0	0	0	200
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= inner =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= agg =
-1
-1
-1
-1
-1
-1
-0	-10	0
-1	55	1055
-0	0	-10	0	990
-1	55	15	1055	1015
-= types =
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-=== join use nulls ===
-= full =
--4	\N	196
--3	\N	197
--2	\N	198
--1	\N	199
-0	\N	200
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-6	106	\N
-7	107	\N
-8	108	\N
-9	109	\N
-10	110	\N
-= left =
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-6	106	\N
-7	107	\N
-8	108	\N
-9	109	\N
-10	110	\N
-= right =
--4	\N	196
--3	\N	197
--2	\N	198
--1	\N	199
-0	\N	200
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-= inner =
-1	101	201
-2	102	202
-3	103	203
-4	104	204
-5	105	205
-= full =
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-6	6	\N
-7	7	\N
-8	8	\N
-9	9	\N
-10	10	\N
-\N	\N	-4
-\N	\N	-3
-\N	\N	-2
-\N	\N	-1
-\N	\N	0
-= left =
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-6	6	\N
-7	7	\N
-8	8	\N
-9	9	\N
-10	10	\N
-= right =
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-\N	\N	-4
-\N	\N	-3
-\N	\N	-2
-\N	\N	-1
-\N	\N	0
-= inner =
-1	1	1
-2	2	2
-3	3	3
-4	4	4
-5	5	5
-= join on =
-= full =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	\N	\N
-7	107	\N	\N
-8	108	\N	\N
-9	109	\N	\N
-10	110	\N	\N
-\N	\N	-4	196
-\N	\N	-3	197
-\N	\N	-2	198
-\N	\N	-1	199
-\N	\N	0	200
-= left =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	\N	\N
-7	107	\N	\N
-8	108	\N	\N
-9	109	\N	\N
-10	110	\N	\N
-= right =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-\N	\N	-4	196
-\N	\N	-3	197
-\N	\N	-2	198
-\N	\N	-1	199
-\N	\N	0	200
-= inner =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= full =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	\N	\N
-7	107	\N	\N
-8	108	\N	\N
-9	109	\N	\N
-10	110	\N	\N
-\N	\N	-4	196
-\N	\N	-3	197
-\N	\N	-2	198
-\N	\N	-1	199
-\N	\N	0	200
-= left =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-6	106	\N	\N
-7	107	\N	\N
-8	108	\N	\N
-9	109	\N	\N
-10	110	\N	\N
-= right =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-\N	\N	-4	196
-\N	\N	-3	197
-\N	\N	-2	198
-\N	\N	-1	199
-\N	\N	0	200
-= inner =
-1	101	1	201
-2	102	2	202
-3	103	3	203
-4	104	4	204
-5	105	5	205
-= agg =
-1
-1
-1
-1
-1
-1
-0	-10	\N
-1	55	1055
-1	55	15	1055	1015
-\N	\N	-10	\N	990
-= types =
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
-1
diff --git a/tests/queries/0_stateless/01721_join_implicit_cast_long.reference.j2 b/tests/queries/0_stateless/01721_join_implicit_cast_long.reference.j2
new file mode 100644
index 000000000000..e9f320874399
--- /dev/null
+++ b/tests/queries/0_stateless/01721_join_implicit_cast_long.reference.j2
@@ -0,0 +1,446 @@
+{% for join_algorithm in ['hash', 'partial_merge', 'auto', 'full_sorting_merge', 'grace_hash'] -%}
+=== {{ join_algorithm }} ===
+= full =
+{% if join_algorithm not in ['grace_hash'] -%}
+-4	0	196
+-3	0	197
+-2	0	198
+-1	0	199
+0	0	200
+1	101	201
+2	102	202
+3	103	203
+4	104	204
+5	105	205
+6	106	\N
+7	107	\N
+8	108	\N
+9	109	\N
+10	110	\N
+{% endif -%}
+= left =
+1	101	201
+2	102	202
+3	103	203
+4	104	204
+5	105	205
+6	106	\N
+7	107	\N
+8	108	\N
+9	109	\N
+10	110	\N
+= right =
+{% if join_algorithm not in ['grace_hash'] -%}
+-4	0	196
+-3	0	197
+-2	0	198
+-1	0	199
+0	0	200
+1	101	201
+2	102	202
+3	103	203
+4	104	204
+5	105	205
+{% endif -%}
+= inner =
+1	101	201
+2	102	202
+3	103	203
+4	104	204
+5	105	205
+= full =
+{% if join_algorithm not in ['grace_hash'] -%}
+0	0	-4
+0	0	-3
+0	0	-2
+0	0	-1
+0	0	0
+1	1	1
+2	2	2
+3	3	3
+4	4	4
+5	5	5
+6	6	0
+7	7	0
+8	8	0
+9	9	0
+10	10	0
+{% endif -%}
+= left =
+1	1	1
+2	2	2
+3	3	3
+4	4	4
+5	5	5
+6	6	0
+7	7	0
+8	8	0
+9	9	0
+10	10	0
+= right =
+{% if join_algorithm not in ['grace_hash'] -%}
+0	0	-4
+0	0	-3
+0	0	-2
+0	0	-1
+0	0	0
+1	1	1
+2	2	2
+3	3	3
+4	4	4
+5	5	5
+{% endif -%}
+= inner =
+1	1	1
+2	2	2
+3	3	3
+4	4	4
+5	5	5
+= join on =
+= full =
+{% if join_algorithm not in ['grace_hash'] -%}
+0	0	-4	196
+0	0	-3	197
+0	0	-2	198
+0	0	-1	199
+0	0	0	200
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+6	106	0	\N
+7	107	0	\N
+8	108	0	\N
+9	109	0	\N
+10	110	0	\N
+{% endif -%}
+= left =
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+6	106	0	\N
+7	107	0	\N
+8	108	0	\N
+9	109	0	\N
+10	110	0	\N
+= right =
+{% if join_algorithm not in ['grace_hash'] -%}
+0	0	-4	196
+0	0	-3	197
+0	0	-2	198
+0	0	-1	199
+0	0	0	200
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+{% endif -%}
+= inner =
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+= full =
+{% if join_algorithm not in ['grace_hash'] -%}
+0	0	-4	196
+0	0	-3	197
+0	0	-2	198
+0	0	-1	199
+0	0	0	200
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+6	106	0	\N
+7	107	0	\N
+8	108	0	\N
+9	109	0	\N
+10	110	0	\N
+{% endif -%}
+= left =
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+6	106	0	\N
+7	107	0	\N
+8	108	0	\N
+9	109	0	\N
+10	110	0	\N
+= right =
+{% if join_algorithm not in ['grace_hash'] -%}
+0	0	-4	196
+0	0	-3	197
+0	0	-2	198
+0	0	-1	199
+0	0	0	200
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+{% endif -%}
+= inner =
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+= agg =
+1
+1
+{% if join_algorithm not in ['grace_hash'] -%}
+1
+1
+1
+1
+0	-10	0
+1	55	1055
+0	0	-10	0	990
+1	55	15	1055	1015
+{% endif -%}
+= types =
+1
+1
+1
+1
+{% if join_algorithm not in ['grace_hash'] -%}
+1
+1
+1
+1
+1
+1
+1
+{% endif -%}
+{% if join_algorithm not in ['full_sorting_merge'] -%}
+=== join use nulls ===
+= full =
+{% if join_algorithm not in ['grace_hash'] -%}
+-4	\N	196
+-3	\N	197
+-2	\N	198
+-1	\N	199
+0	\N	200
+1	101	201
+2	102	202
+3	103	203
+4	104	204
+5	105	205
+6	106	\N
+7	107	\N
+8	108	\N
+9	109	\N
+10	110	\N
+{% endif -%}
+= left =
+1	101	201
+2	102	202
+3	103	203
+4	104	204
+5	105	205
+6	106	\N
+7	107	\N
+8	108	\N
+9	109	\N
+10	110	\N
+= right =
+{% if join_algorithm not in ['grace_hash'] -%}
+-4	\N	196
+-3	\N	197
+-2	\N	198
+-1	\N	199
+0	\N	200
+1	101	201
+2	102	202
+3	103	203
+4	104	204
+5	105	205
+{% endif -%}
+= inner =
+1	101	201
+2	102	202
+3	103	203
+4	104	204
+5	105	205
+= full =
+{% if join_algorithm not in ['grace_hash'] -%}
+1	1	1
+2	2	2
+3	3	3
+4	4	4
+5	5	5
+6	6	\N
+7	7	\N
+8	8	\N
+9	9	\N
+10	10	\N
+\N	\N	-4
+\N	\N	-3
+\N	\N	-2
+\N	\N	-1
+\N	\N	0
+{% endif -%}
+= left =
+1	1	1
+2	2	2
+3	3	3
+4	4	4
+5	5	5
+6	6	\N
+7	7	\N
+8	8	\N
+9	9	\N
+10	10	\N
+= right =
+{% if join_algorithm not in ['grace_hash'] -%}
+1	1	1
+2	2	2
+3	3	3
+4	4	4
+5	5	5
+\N	\N	-4
+\N	\N	-3
+\N	\N	-2
+\N	\N	-1
+\N	\N	0
+{% endif -%}
+= inner =
+1	1	1
+2	2	2
+3	3	3
+4	4	4
+5	5	5
+= join on =
+= full =
+{% if join_algorithm not in ['grace_hash'] -%}
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+6	106	\N	\N
+7	107	\N	\N
+8	108	\N	\N
+9	109	\N	\N
+10	110	\N	\N
+\N	\N	-4	196
+\N	\N	-3	197
+\N	\N	-2	198
+\N	\N	-1	199
+\N	\N	0	200
+{% endif -%}
+= left =
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+6	106	\N	\N
+7	107	\N	\N
+8	108	\N	\N
+9	109	\N	\N
+10	110	\N	\N
+= right =
+{% if join_algorithm not in ['grace_hash'] -%}
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+\N	\N	-4	196
+\N	\N	-3	197
+\N	\N	-2	198
+\N	\N	-1	199
+\N	\N	0	200
+{% endif -%}
+= inner =
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+= full =
+{% if join_algorithm not in ['grace_hash'] -%}
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+6	106	\N	\N
+7	107	\N	\N
+8	108	\N	\N
+9	109	\N	\N
+10	110	\N	\N
+\N	\N	-4	196
+\N	\N	-3	197
+\N	\N	-2	198
+\N	\N	-1	199
+\N	\N	0	200
+{% endif -%}
+= left =
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+6	106	\N	\N
+7	107	\N	\N
+8	108	\N	\N
+9	109	\N	\N
+10	110	\N	\N
+= right =
+{% if join_algorithm not in ['grace_hash'] -%}
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+\N	\N	-4	196
+\N	\N	-3	197
+\N	\N	-2	198
+\N	\N	-1	199
+\N	\N	0	200
+{% endif -%}
+= inner =
+1	101	1	201
+2	102	2	202
+3	103	3	203
+4	104	4	204
+5	105	5	205
+= agg =
+1
+1
+{% if join_algorithm not in ['grace_hash'] -%}
+1
+1
+1
+1
+0	-10	\N
+1	55	1055
+1	55	15	1055	1015
+\N	\N	-10	\N	990
+{% endif -%}
+= types =
+1
+1
+1
+1
+{% if join_algorithm not in ['grace_hash'] -%}
+1
+1
+1
+1
+1
+1
+1
+{% endif -%}
+{% endif -%}
+{% endfor -%}
diff --git a/tests/queries/0_stateless/01721_join_implicit_cast_long.sql.j2 b/tests/queries/0_stateless/01721_join_implicit_cast_long.sql.j2
index 3846f527bba0..f5321939f281 100644
--- a/tests/queries/0_stateless/01721_join_implicit_cast_long.sql.j2
+++ b/tests/queries/0_stateless/01721_join_implicit_cast_long.sql.j2
@@ -9,49 +9,55 @@ CREATE TABLE t2 (a Int16, b Nullable(Int64)) ENGINE = TinyLog;
 INSERT INTO t1 SELECT number as a, 100 + number as b FROM system.numbers LIMIT 1, 10;
 INSERT INTO t2 SELECT number - 5 as a, 200 + number - 5 as b FROM system.numbers LIMIT 1, 10;
 
-{% for join_type in ['hash', 'partial_merge', 'full_sorting_merge', 'auto'] -%}
+{% macro is_implemented(join_algorithm) -%}
+{% if join_algorithm == 'grace_hash' %} -- { serverError NOT_IMPLEMENTED } {% endif %}
+{% endmacro -%}
 
-SELECT '=== {{ join_type }} ===';
-SET join_algorithm = '{{ join_type }}';
+{% for join_algorithm in ['hash', 'partial_merge', 'auto', 'full_sorting_merge', 'grace_hash'] -%}
 
-{% if join_type == 'auto' -%}
+SELECT '=== {{ join_algorithm }} ===';
+SET join_algorithm = '{{ join_algorithm }}';
+
+{% if join_algorithm == 'auto' -%}
 SET max_bytes_in_join = 100;
+{% else %}
+SET max_bytes_in_join = '100M';
 {% endif -%}
 
 SELECT '= full =';
-SELECT a, b, t2.b FROM t1 FULL JOIN t2 USING (a) ORDER BY (a);
+SELECT a, b, t2.b FROM t1 FULL JOIN t2 USING (a) ORDER BY (a); {{ is_implemented(join_algorithm) }}
 SELECT '= left =';
 SELECT a, b, t2.b FROM t1 LEFT JOIN t2 USING (a) ORDER BY (a);
 SELECT '= right =';
-SELECT a, b, t2.b FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (a);
+SELECT a, b, t2.b FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (a); {{ is_implemented(join_algorithm) }}
 SELECT '= inner =';
 SELECT a, b, t2.b FROM t1 INNER JOIN t2 USING (a) ORDER BY (a);
 
 SELECT '= full =';
-SELECT a, t1.a, t2.a FROM t1 FULL JOIN t2 USING (a) ORDER BY (t1.a, t2.a);
+SELECT a, t1.a, t2.a FROM t1 FULL JOIN t2 USING (a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}
 SELECT '= left =';
 SELECT a, t1.a, t2.a FROM t1 LEFT JOIN t2 USING (a) ORDER BY (t1.a, t2.a);
 SELECT '= right =';
-SELECT a, t1.a, t2.a FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (t1.a, t2.a);
+SELECT a, t1.a, t2.a FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}
 SELECT '= inner =';
 SELECT a, t1.a, t2.a FROM t1 INNER JOIN t2 USING (a) ORDER BY (t1.a, t2.a);
 
 SELECT '= join on =';
 SELECT '= full =';
-SELECT a, b, t2.a, t2.b FROM t1 FULL JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);
+SELECT a, b, t2.a, t2.b FROM t1 FULL JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}
 SELECT '= left =';
 SELECT a, b, t2.a, t2.b FROM t1 LEFT JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);
 SELECT '= right =';
-SELECT a, b, t2.a, t2.b FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);
+SELECT a, b, t2.a, t2.b FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}
 SELECT '= inner =';
 SELECT a, b, t2.a, t2.b FROM t1 INNER JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);
 
 SELECT '= full =';
-SELECT * FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);
+SELECT * FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}
 SELECT '= left =';
 SELECT * FROM t1 LEFT JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);
 SELECT '= right =';
-SELECT * FROM t1 RIGHT JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);
+SELECT * FROM t1 RIGHT JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}
 SELECT '= inner =';
 SELECT * FROM t1 INNER JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);
 
@@ -62,77 +68,77 @@ SELECT * FROM t1 RIGHT JOIN t2 ON (t1.a + t1.b + 100 = t2.a + t2.b) ORDER BY (t1
 SELECT * FROM t1 INNER JOIN t2 ON (t1.a + t1.b + 100 = t2.a + t2.b) ORDER BY (t1.a, t2.a); -- { serverError 53 }
 
 SELECT '= agg =';
-SELECT sum(a) == 7 FROM t1 FULL JOIN t2 USING (a) WHERE b > 102 AND t2.b <= 204;
+SELECT sum(a) == 7 FROM t1 FULL JOIN t2 USING (a) WHERE b > 102 AND t2.b <= 204; {{ is_implemented(join_algorithm) }}
 SELECT sum(a) == 7 FROM t1 INNER JOIN t2 USING (a) WHERE b > 102 AND t2.b <= 204;
 
 SELECT sum(b) = 103 FROM t1 LEFT JOIN t2 USING (a) WHERE b > 102 AND t2.b < 204;
-SELECT sum(t2.b) = 203 FROM t1 RIGHT JOIN t2 USING (a) WHERE b > 102 AND t2.b < 204;
+SELECT sum(t2.b) = 203 FROM t1 RIGHT JOIN t2 USING (a) WHERE b > 102 AND t2.b < 204; {{ is_implemented(join_algorithm) }}
 
-SELECT sum(a) == 2 + 3 + 4 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE t1.b < 105 AND t2.b > 201;
-SELECT sum(a) == 55 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE 1;
+SELECT sum(a) == 2 + 3 + 4 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE t1.b < 105 AND t2.b > 201; {{ is_implemented(join_algorithm) }}
+SELECT sum(a) == 55 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE 1; {{ is_implemented(join_algorithm) }}
 
-SELECT a > 0, sum(a), sum(b) FROM t1 FULL JOIN t2 USING (a) GROUP BY (a > 0) ORDER BY a > 0;
-SELECT a > 0, sum(a), sum(t2.a), sum(b), sum(t2.b) FROM t1 FULL JOIN t2 ON (t1.a == t2.a) GROUP BY (a > 0) ORDER BY a > 0;
+SELECT a > 0, sum(a), sum(b) FROM t1 FULL JOIN t2 USING (a) GROUP BY (a > 0) ORDER BY a > 0; {{ is_implemented(join_algorithm) }}
+SELECT a > 0, sum(a), sum(t2.a), sum(b), sum(t2.b) FROM t1 FULL JOIN t2 ON (t1.a == t2.a) GROUP BY (a > 0) ORDER BY a > 0; {{ is_implemented(join_algorithm) }}
 
 SELECT '= types =';
-SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 FULL JOIN t2 USING (a);
+SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 FULL JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}
 SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 LEFT JOIN t2 USING (a);
-SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 RIGHT JOIN t2 USING (a);
+SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 RIGHT JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}
 SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 INNER JOIN t2 USING (a);
 
-SELECT toTypeName(any(a)) == 'Int32' AND toTypeName(any(t2.a)) == 'Int32' FROM t1 FULL JOIN t2 USING (a);
-SELECT min(toTypeName(a) == 'Int32' AND toTypeName(t2.a) == 'Int32') FROM t1 FULL JOIN t2 USING (a);
+SELECT toTypeName(any(a)) == 'Int32' AND toTypeName(any(t2.a)) == 'Int32' FROM t1 FULL JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}
+SELECT min(toTypeName(a) == 'Int32' AND toTypeName(t2.a) == 'Int32') FROM t1 FULL JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}
 
-SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 FULL JOIN t2 ON (t1.a == t2.a);
+SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 FULL JOIN t2 ON (t1.a == t2.a); {{ is_implemented(join_algorithm) }}
 SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 LEFT JOIN t2 ON (t1.a == t2.a);
-SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a);
+SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a); {{ is_implemented(join_algorithm) }}
 SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 INNER JOIN t2 ON (t1.a == t2.a);
-SELECT toTypeName(any(a)) == 'UInt16' AND toTypeName(any(t2.a)) == 'Int16' FROM t1 FULL JOIN t2 ON (t1.a == t2.a);
+SELECT toTypeName(any(a)) == 'UInt16' AND toTypeName(any(t2.a)) == 'Int16' FROM t1 FULL JOIN t2 ON (t1.a == t2.a); {{ is_implemented(join_algorithm) }}
 
-{% if join_type == 'auto' -%}
+{% if join_algorithm == 'auto' -%}
 SET max_bytes_in_join = 0;
 {% endif -%}
 
-{% endfor -%}
+{% if join_algorithm not in ['full_sorting_merge'] -%}
 
 SELECT '=== join use nulls ===';
 
 SET join_use_nulls = 1;
 
 SELECT '= full =';
-SELECT a, b, t2.b FROM t1 FULL JOIN t2 USING (a) ORDER BY (a);
+SELECT a, b, t2.b FROM t1 FULL JOIN t2 USING (a) ORDER BY (a); {{ is_implemented(join_algorithm) }}
 SELECT '= left =';
 SELECT a, b, t2.b FROM t1 LEFT JOIN t2 USING (a) ORDER BY (a);
 SELECT '= right =';
-SELECT a, b, t2.b FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (a);
+SELECT a, b, t2.b FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (a); {{ is_implemented(join_algorithm) }}
 SELECT '= inner =';
 SELECT a, b, t2.b FROM t1 INNER JOIN t2 USING (a) ORDER BY (a);
 
 SELECT '= full =';
-SELECT a, t1.a, t2.a FROM t1 FULL JOIN t2 USING (a) ORDER BY (t1.a, t2.a);
+SELECT a, t1.a, t2.a FROM t1 FULL JOIN t2 USING (a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}
 SELECT '= left =';
 SELECT a, t1.a, t2.a FROM t1 LEFT JOIN t2 USING (a) ORDER BY (t1.a, t2.a);
 SELECT '= right =';
-SELECT a, t1.a, t2.a FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (t1.a, t2.a);
+SELECT a, t1.a, t2.a FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}
 SELECT '= inner =';
 SELECT a, t1.a, t2.a FROM t1 INNER JOIN t2 USING (a) ORDER BY (t1.a, t2.a);
 
 SELECT '= join on =';
 SELECT '= full =';
-SELECT a, b, t2.a, t2.b FROM t1 FULL JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);
+SELECT a, b, t2.a, t2.b FROM t1 FULL JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}
 SELECT '= left =';
 SELECT a, b, t2.a, t2.b FROM t1 LEFT JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);
 SELECT '= right =';
-SELECT a, b, t2.a, t2.b FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);
+SELECT a, b, t2.a, t2.b FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}
 SELECT '= inner =';
 SELECT a, b, t2.a, t2.b FROM t1 INNER JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);
 
 SELECT '= full =';
-SELECT * FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);
+SELECT * FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}
 SELECT '= left =';
 SELECT * FROM t1 LEFT JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);
 SELECT '= right =';
-SELECT * FROM t1 RIGHT JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);
+SELECT * FROM t1 RIGHT JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}
 SELECT '= inner =';
 SELECT * FROM t1 INNER JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);
 
@@ -143,34 +149,37 @@ SELECT * FROM t1 RIGHT JOIN t2 ON (t1.a + t1.b + 100 = t2.a + t2.b) ORDER BY (t1
 SELECT * FROM t1 INNER JOIN t2 ON (t1.a + t1.b + 100 = t2.a + t2.b) ORDER BY (t1.a, t2.a); -- { serverError 53 }
 
 SELECT '= agg =';
-SELECT sum(a) == 7 FROM t1 FULL JOIN t2 USING (a) WHERE b > 102 AND t2.b <= 204;
+SELECT sum(a) == 7 FROM t1 FULL JOIN t2 USING (a) WHERE b > 102 AND t2.b <= 204; {{ is_implemented(join_algorithm) }}
 SELECT sum(a) == 7 FROM t1 INNER JOIN t2 USING (a) WHERE b > 102 AND t2.b <= 204;
 
 SELECT sum(b) = 103 FROM t1 LEFT JOIN t2 USING (a) WHERE b > 102 AND t2.b < 204;
-SELECT sum(t2.b) = 203 FROM t1 RIGHT JOIN t2 USING (a) WHERE b > 102 AND t2.b < 204;
+SELECT sum(t2.b) = 203 FROM t1 RIGHT JOIN t2 USING (a) WHERE b > 102 AND t2.b < 204; {{ is_implemented(join_algorithm) }}
 
-SELECT sum(a) == 2 + 3 + 4 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE t1.b < 105 AND t2.b > 201;
-SELECT sum(a) == 55 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE 1;
+SELECT sum(a) == 2 + 3 + 4 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE t1.b < 105 AND t2.b > 201; {{ is_implemented(join_algorithm) }}
+SELECT sum(a) == 55 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE 1; {{ is_implemented(join_algorithm) }}
 
-SELECT a > 0, sum(a), sum(b) FROM t1 FULL JOIN t2 USING (a) GROUP BY (a > 0) ORDER BY a > 0;
-SELECT a > 0, sum(a), sum(t2.a), sum(b), sum(t2.b) FROM t1 FULL JOIN t2 ON (t1.a == t2.a) GROUP BY (a > 0) ORDER BY a > 0;
+SELECT a > 0, sum(a), sum(b) FROM t1 FULL JOIN t2 USING (a) GROUP BY (a > 0) ORDER BY a > 0; {{ is_implemented(join_algorithm) }}
+SELECT a > 0, sum(a), sum(t2.a), sum(b), sum(t2.b) FROM t1 FULL JOIN t2 ON (t1.a == t2.a) GROUP BY (a > 0) ORDER BY a > 0; {{ is_implemented(join_algorithm) }}
 
 SELECT '= types =';
-SELECT any(toTypeName(a)) == 'Nullable(Int32)' AND any(toTypeName(t2.a)) == 'Nullable(Int32)' FROM t1 FULL JOIN t2 USING (a);
+SELECT any(toTypeName(a)) == 'Nullable(Int32)' AND any(toTypeName(t2.a)) == 'Nullable(Int32)' FROM t1 FULL JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}
 SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Nullable(Int32)' FROM t1 LEFT JOIN t2 USING (a);
-SELECT any(toTypeName(a)) == 'Nullable(Int32)' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 RIGHT JOIN t2 USING (a);
+SELECT any(toTypeName(a)) == 'Nullable(Int32)' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 RIGHT JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}
 SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 INNER JOIN t2 USING (a);
 
-SELECT toTypeName(any(a)) == 'Nullable(Int32)' AND toTypeName(any(t2.a)) == 'Nullable(Int32)' FROM t1 FULL JOIN t2 USING (a);
-SELECT min(toTypeName(a) == 'Nullable(Int32)' AND toTypeName(t2.a) == 'Nullable(Int32)') FROM t1 FULL JOIN t2 USING (a);
+SELECT toTypeName(any(a)) == 'Nullable(Int32)' AND toTypeName(any(t2.a)) == 'Nullable(Int32)' FROM t1 FULL JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}
+SELECT min(toTypeName(a) == 'Nullable(Int32)' AND toTypeName(t2.a) == 'Nullable(Int32)') FROM t1 FULL JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}
 
-SELECT any(toTypeName(a)) == 'Nullable(UInt16)' AND any(toTypeName(t2.a)) == 'Nullable(Int16)' FROM t1 FULL JOIN t2 ON (t1.a == t2.a);
+SELECT any(toTypeName(a)) == 'Nullable(UInt16)' AND any(toTypeName(t2.a)) == 'Nullable(Int16)' FROM t1 FULL JOIN t2 ON (t1.a == t2.a); {{ is_implemented(join_algorithm) }}
 SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Nullable(Int16)' FROM t1 LEFT JOIN t2 ON (t1.a == t2.a);
-SELECT any(toTypeName(a)) == 'Nullable(UInt16)' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a);
+SELECT any(toTypeName(a)) == 'Nullable(UInt16)' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a); {{ is_implemented(join_algorithm) }}
 SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 INNER JOIN t2 ON (t1.a == t2.a);
-SELECT toTypeName(any(a)) == 'Nullable(UInt16)' AND toTypeName(any(t2.a)) == 'Nullable(Int16)' FROM t1 FULL JOIN t2 ON (t1.a == t2.a);
+SELECT toTypeName(any(a)) == 'Nullable(UInt16)' AND toTypeName(any(t2.a)) == 'Nullable(Int16)' FROM t1 FULL JOIN t2 ON (t1.a == t2.a); {{ is_implemented(join_algorithm) }}
 
 SET join_use_nulls = 0;
+{% endif -%}
+
+{% endfor -%}
 
 DROP TABLE IF EXISTS t1;
 DROP TABLE IF EXISTS t2;
diff --git a/tests/queries/0_stateless/02273_full_sort_join.reference.j2 b/tests/queries/0_stateless/02273_full_sort_join.reference.j2
index 1059108a03bc..98bfd9d9b2b1 100644
--- a/tests/queries/0_stateless/02273_full_sort_join.reference.j2
+++ b/tests/queries/0_stateless/02273_full_sort_join.reference.j2
@@ -1,4 +1,6 @@
 {% set table_size = 15 -%}
+{% for join_algorithm in ['default', 'full_sorting_merge', 'grace_hash'] -%}
+-- {{ join_algorithm }} --
 {% for block_size in range(1, table_size + 1) -%}
 ALL INNER USING | bs = {{ block_size }}
 4	0	0
@@ -48,6 +50,7 @@ ALL LEFT | bs = {{ block_size }}
 14	14	val9	0
 14	14	val9	0
 ALL RIGHT | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 4	4	0	val10
 5	5	0	val6
 6	6	0	val8
@@ -61,6 +64,7 @@ ALL RIGHT | bs = {{ block_size }}
 13	13	0	val9
 14	14	0	val3
 14	14	0	val7
+{% endif -%}
 ALL INNER | bs = {{ block_size }} | copmosite key
 2	2	2	2	2	2	0	0
 2	2	2	2	2	2	0	0
@@ -81,6 +85,7 @@ ALL LEFT | bs = {{ block_size }} | copmosite key
 2	2	2	2	2	2	val12	0
 2	2	2	2	2	2	val9	0
 ALL RIGHT | bs = {{ block_size }} | copmosite key
+{% if join_algorithm != 'grace_hash' -%}
 0	\N	0	1	1	1	1	val2
 0	\N	0	1	1	1	1	val7
 0	\N	0	1	1	2	1	val5
@@ -94,6 +99,7 @@ ALL RIGHT | bs = {{ block_size }} | copmosite key
 0	\N	0	2	2	\N	1	val9
 2	2	2	2	2	2	0	val4
 2	2	2	2	2	2	0	val4
+{% endif -%}
 ANY INNER USING | bs = {{ block_size }}
 4	0	0
 5	0	0
@@ -131,6 +137,7 @@ ANY LEFT | bs = {{ block_size }}
 13	13	val13	0
 14	14	val9	0
 ANY RIGHT | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 4	4	0	val10
 5	5	0	val6
 6	6	0	val8
@@ -143,6 +150,7 @@ ANY RIGHT | bs = {{ block_size }}
 13	13	0	val9
 14	14	0	val3
 14	14	0	val7
+{% endif -%}
 ANY INNER | bs = {{ block_size }} | copmosite key
 2	2	2	2	2	2	0	0
 ANY LEFT | bs = {{ block_size }} | copmosite key
@@ -162,6 +170,7 @@ ANY LEFT | bs = {{ block_size }} | copmosite key
 2	2	2	2	2	2	val12	0
 2	2	2	2	2	2	val9	0
 ANY RIGHT | bs = {{ block_size }} | copmosite key
+{% if join_algorithm != 'grace_hash' -%}
 0	\N	0	1	1	1	1	val2
 0	\N	0	1	1	1	1	val7
 0	\N	0	1	1	2	1	val5
@@ -174,6 +183,7 @@ ANY RIGHT | bs = {{ block_size }} | copmosite key
 0	\N	0	2	1	\N	1	val3
 0	\N	0	2	2	\N	1	val9
 2	2	2	2	2	2	0	val4
+{% endif -%}
 {% endfor -%}
 ALL INNER | join_use_nulls = 1
 4	4	0	0
@@ -209,6 +219,7 @@ ALL LEFT | join_use_nulls = 1
 14	14	val9	0
 14	14	val9	0
 ALL RIGHT | join_use_nulls = 1
+{% if join_algorithm != 'grace_hash' -%}
 4	4	0	val10
 5	5	0	val6
 6	6	0	val8
@@ -222,6 +233,7 @@ ALL RIGHT | join_use_nulls = 1
 13	13	0	val9
 14	14	0	val3
 14	14	0	val7
+{% endif -%}
 ALL INNER | join_use_nulls = 1 | copmosite key
 2	2	2	2	2	2	0	0
 2	2	2	2	2	2	0	0
@@ -242,6 +254,7 @@ ALL LEFT | join_use_nulls = 1 | copmosite key
 2	2	2	2	2	2	val12	0
 2	2	2	2	2	2	val9	0
 ALL RIGHT | join_use_nulls = 1 | copmosite key
+{% if join_algorithm != 'grace_hash' -%}
 2	2	2	2	2	2	0	val4
 2	2	2	2	2	2	0	val4
 \N	\N	\N	1	1	1	\N	val2
@@ -255,6 +268,7 @@ ALL RIGHT | join_use_nulls = 1 | copmosite key
 \N	\N	\N	2	1	2	\N	val8
 \N	\N	\N	2	1	\N	\N	val3
 \N	\N	\N	2	2	\N	\N	val9
+{% endif -%}
 ANY INNER | join_use_nulls = 1
 4	4	0	0
 5	5	0	0
@@ -282,6 +296,7 @@ ANY LEFT | join_use_nulls = 1
 13	13	val13	0
 14	14	val9	0
 ANY RIGHT | join_use_nulls = 1
+{% if join_algorithm != 'grace_hash' -%}
 4	4	0	val10
 5	5	0	val6
 6	6	0	val8
@@ -294,6 +309,7 @@ ANY RIGHT | join_use_nulls = 1
 13	13	0	val9
 14	14	0	val3
 14	14	0	val7
+{% endif -%}
 ANY INNER | join_use_nulls = 1 | copmosite key
 2	2	2	2	2	2	0	0
 ANY LEFT | join_use_nulls = 1 | copmosite key
@@ -313,6 +329,7 @@ ANY LEFT | join_use_nulls = 1 | copmosite key
 2	2	2	2	2	2	val12	0
 2	2	2	2	2	2	val9	0
 ANY RIGHT | join_use_nulls = 1 | copmosite key
+{% if join_algorithm != 'grace_hash' -%}
 2	2	2	2	2	2	0	val4
 \N	\N	\N	1	1	1	\N	val2
 \N	\N	\N	1	1	1	\N	val7
@@ -325,3 +342,5 @@ ANY RIGHT | join_use_nulls = 1 | copmosite key
 \N	\N	\N	2	1	2	\N	val8
 \N	\N	\N	2	1	\N	\N	val3
 \N	\N	\N	2	2	\N	\N	val9
+{% endif -%}
+{% endfor -%}
diff --git a/tests/queries/0_stateless/02273_full_sort_join.sql.j2 b/tests/queries/0_stateless/02273_full_sort_join.sql.j2
index b70d1e5f55f3..8b739330364c 100644
--- a/tests/queries/0_stateless/02273_full_sort_join.sql.j2
+++ b/tests/queries/0_stateless/02273_full_sort_join.sql.j2
@@ -26,7 +26,17 @@ INSERT INTO t2
         'val' || toString(number) as s
     FROM numbers_mt({{ table_size - 3 }});
 
-SET join_algorithm = 'full_sorting_merge';
+
+{% macro is_implemented(join_algorithm) -%}
+{% if join_algorithm == 'grace_hash' %} -- { serverError NOT_IMPLEMENTED } {% endif %}
+{% endmacro -%}
+
+{% for join_algorithm in ['default', 'full_sorting_merge', 'grace_hash'] -%}
+
+SET max_bytes_in_join = '{% if join_algorithm == 'grace_hash' %}10K{% else %}0{% endif %}';
+
+SELECT '-- {{ join_algorithm }} --';
+SET join_algorithm = '{{ join_algorithm }}';
 
 {% for block_size in range(1, table_size + 1) -%}
 {% for kind in ['ALL', 'ANY'] -%}
@@ -59,7 +69,7 @@ SELECT t1.key, t2.key, empty(t1.s), t2.s FROM t1
 {{ kind }} RIGHT JOIN t2
 ON t1.key == t2.key
 ORDER BY t1.key, t2.key, t2.s
-;
+; {{ is_implemented(join_algorithm) }}
 
 SELECT '{{ kind }} INNER | bs = {{ block_size }} | copmosite key';
 SELECT t1.key1, t1.key2, t1.key3, t2.key1, t2.key2, t2.key3, empty(t1.s), empty(t2.s) FROM t1
@@ -80,7 +90,7 @@ SELECT t1.key1, t1.key2, t1.key3, t2.key1, t2.key2, t2.key3, empty(t1.s), t2.s F
 {{ kind }} RIGHT JOIN t2
 ON t1.key1 == t2.key1 AND t1.key2 == t2.key2 AND t1.key3 == t2.key3 AND t1.key1 == t2.key3
 ORDER BY t1.key1, t1.key2, t1.key3, t2.key1, t2.key2, t2.key3, t2.s
-;
+; {{ is_implemented(join_algorithm) }}
 
 {% endfor -%}
 {% endfor -%}
@@ -108,7 +118,7 @@ SELECT t1.key, t2.key, isNull(t1.s), t2.s FROM t1
 {{ kind }} RIGHT JOIN t2
 ON t1.key == t2.key
 ORDER BY t1.key, t2.key, t2.s
-;
+; {{ is_implemented(join_algorithm) }}
 
 SELECT '{{ kind }} INNER | join_use_nulls = 1 | copmosite key';
 SELECT t1.key1, t1.key2, t1.key3, t2.key1, t2.key2, t2.key3, empty(t1.s), empty(t2.s) FROM t1
@@ -129,8 +139,12 @@ SELECT t1.key1, t1.key2, t1.key3, t2.key1, t2.key2, t2.key3, empty(t1.s), t2.s F
 {{ kind }} RIGHT JOIN t2
 ON t1.key1 == t2.key1 AND t1.key2 == t2.key2 AND t1.key3 == t2.key3 AND t1.key1 == t2.key3
 ORDER BY t1.key1, t1.key2, t1.key3, t2.key1, t2.key2, t2.key3, t2.s
-;
+; {{ is_implemented(join_algorithm) }}
 
+SET join_use_nulls = 0;
+SET max_bytes_in_join = 0;
+
+{% endfor -%}
 {% endfor -%}
 
 DROP TABLE IF EXISTS t1;
diff --git a/tests/queries/0_stateless/02274_full_sort_join_nodistinct.reference.j2 b/tests/queries/0_stateless/02274_full_sort_join_nodistinct.reference.j2
index ca2e47d72089..2cc6c6e85d65 100644
--- a/tests/queries/0_stateless/02274_full_sort_join_nodistinct.reference.j2
+++ b/tests/queries/0_stateless/02274_full_sort_join_nodistinct.reference.j2
@@ -1,3 +1,5 @@
+{% for join_algorithm in ['full_sorting_merge', 'grace_hash'] -%}
+--- {{ join_algorithm }} ---
 {% for block_size in range(1, 11) -%}
 t1 ALL INNER JOIN t2 | bs = {{ block_size }}
 1	1	4	5
@@ -106,6 +108,7 @@ t1 ALL LEFT JOIN t2 | bs = {{ block_size }}
 2	2	val27	5
 3	3	val3	4
 t1 ALL RIGHT JOIN t2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 1	1	4	val11
 1	1	4	val12
 2	2	5	val22
@@ -158,6 +161,7 @@ t1 ALL RIGHT JOIN t2 | bs = {{ block_size }}
 2	2	5	val28
 2	2	5	val28
 3	3	4	val3
+{% endif -%}
 t1 ANY INNER JOIN t2 | bs = {{ block_size }}
 1	1	4	5
 2	2	5	5
@@ -173,6 +177,7 @@ t1 ANY LEFT JOIN t2 | bs = {{ block_size }}
 2	2	val27	5
 3	3	val3	4
 t1 ANY RIGHT JOIN t2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 1	1	4	val11
 1	1	4	val12
 2	2	5	val22
@@ -183,7 +188,9 @@ t1 ANY RIGHT JOIN t2 | bs = {{ block_size }}
 2	2	5	val27
 2	2	5	val28
 3	3	4	val3
+{% endif -%}
 t1 ALL FULL JOIN t2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 1	1	4	5
 1	1	4	5
 2	2	5	5
@@ -236,7 +243,9 @@ t1 ALL FULL JOIN t2 | bs = {{ block_size }}
 2	2	5	5
 2	2	5	5
 3	3	4	4
+{% endif -%}
 t1 ALL FULL JOIN USING t2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 1	4	5
 1	4	5
 2	5	5
@@ -289,6 +298,7 @@ t1 ALL FULL JOIN USING t2 | bs = {{ block_size }}
 2	5	5
 2	5	5
 3	4	4
+{% endif -%}
 t1 ALL INNER JOIN tn2 | bs = {{ block_size }}
 1	1	4	5
 1	1	4	5
@@ -305,6 +315,7 @@ t1 ALL LEFT JOIN tn2 | bs = {{ block_size }}
 2	\N	val27	0
 3	3	val3	4
 t1 ALL RIGHT JOIN tn2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 0	\N	0	val22
 0	\N	0	val23
 0	\N	0	val24
@@ -315,6 +326,7 @@ t1 ALL RIGHT JOIN tn2 | bs = {{ block_size }}
 1	1	4	val11
 1	1	4	val12
 3	3	4	val3
+{% endif -%}
 t1 ANY INNER JOIN tn2 | bs = {{ block_size }}
 1	1	4	5
 3	3	4	4
@@ -329,6 +341,7 @@ t1 ANY LEFT JOIN tn2 | bs = {{ block_size }}
 2	\N	val27	0
 3	3	val3	4
 t1 ANY RIGHT JOIN tn2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 0	\N	0	val22
 0	\N	0	val23
 0	\N	0	val24
@@ -339,7 +352,9 @@ t1 ANY RIGHT JOIN tn2 | bs = {{ block_size }}
 1	1	4	val11
 1	1	4	val12
 3	3	4	val3
+{% endif -%}
 t1 ALL FULL JOIN tn2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 0	\N	0	5
 0	\N	0	5
 0	\N	0	5
@@ -357,7 +372,9 @@ t1 ALL FULL JOIN tn2 | bs = {{ block_size }}
 2	\N	5	0
 2	\N	5	0
 3	3	4	4
+{% endif -%}
 t1 ALL FULL JOIN USING tn2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 1	4	5
 1	4	5
 2	5	0
@@ -375,6 +392,7 @@ t1 ALL FULL JOIN USING tn2 | bs = {{ block_size }}
 \N	0	5
 \N	0	5
 \N	0	5
+{% endif -%}
 tn1 ALL INNER JOIN t2 | bs = {{ block_size }}
 1	1	4	5
 1	1	4	5
@@ -391,6 +409,7 @@ tn1 ALL LEFT JOIN t2 | bs = {{ block_size }}
 \N	0	val26	0
 \N	0	val27	0
 tn1 ALL RIGHT JOIN t2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 1	1	4	val11
 1	1	4	val12
 3	3	4	val3
@@ -401,6 +420,7 @@ tn1 ALL RIGHT JOIN t2 | bs = {{ block_size }}
 \N	2	0	val26
 \N	2	0	val27
 \N	2	0	val28
+{% endif -%}
 tn1 ANY INNER JOIN t2 | bs = {{ block_size }}
 1	1	4	5
 3	3	4	4
@@ -415,6 +435,7 @@ tn1 ANY LEFT JOIN t2 | bs = {{ block_size }}
 \N	0	val26	0
 \N	0	val27	0
 tn1 ANY RIGHT JOIN t2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 1	1	4	val11
 1	1	4	val12
 3	3	4	val3
@@ -425,7 +446,9 @@ tn1 ANY RIGHT JOIN t2 | bs = {{ block_size }}
 \N	2	0	val26
 \N	2	0	val27
 \N	2	0	val28
+{% endif -%}
 tn1 ALL FULL JOIN t2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 1	1	4	5
 1	1	4	5
 3	3	4	4
@@ -443,7 +466,9 @@ tn1 ALL FULL JOIN t2 | bs = {{ block_size }}
 \N	2	0	5
 \N	2	0	5
 \N	2	0	5
+{% endif -%}
 tn1 ALL FULL JOIN USING t2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 1	4	5
 1	4	5
 2	0	5
@@ -461,6 +486,7 @@ tn1 ALL FULL JOIN USING t2 | bs = {{ block_size }}
 \N	5	0
 \N	5	0
 \N	5	0
+{% endif -%}
 tn1 ALL INNER JOIN tn2 | bs = {{ block_size }}
 1	1	4	5
 1	1	4	5
@@ -477,6 +503,7 @@ tn1 ALL LEFT JOIN tn2 | bs = {{ block_size }}
 \N	\N	val26	0
 \N	\N	val27	0
 tn1 ALL RIGHT JOIN tn2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 1	1	4	val11
 1	1	4	val12
 3	3	4	val3
@@ -487,6 +514,7 @@ tn1 ALL RIGHT JOIN tn2 | bs = {{ block_size }}
 \N	\N	0	val26
 \N	\N	0	val27
 \N	\N	0	val28
+{% endif -%}
 tn1 ANY INNER JOIN tn2 | bs = {{ block_size }}
 1	1	4	5
 3	3	4	4
@@ -501,6 +529,7 @@ tn1 ANY LEFT JOIN tn2 | bs = {{ block_size }}
 \N	\N	val26	0
 \N	\N	val27	0
 tn1 ANY RIGHT JOIN tn2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 1	1	4	val11
 1	1	4	val12
 3	3	4	val3
@@ -511,7 +540,9 @@ tn1 ANY RIGHT JOIN tn2 | bs = {{ block_size }}
 \N	\N	0	val26
 \N	\N	0	val27
 \N	\N	0	val28
+{% endif -%}
 tn1 ALL FULL JOIN tn2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 1	1	4	5
 1	1	4	5
 3	3	4	4
@@ -529,7 +560,9 @@ tn1 ALL FULL JOIN tn2 | bs = {{ block_size }}
 \N	\N	5	0
 \N	\N	5	0
 \N	\N	5	0
+{% endif -%}
 tn1 ALL FULL JOIN USING tn2 | bs = {{ block_size }}
+{% if join_algorithm != 'grace_hash' -%}
 1	4	5
 1	4	5
 3	4	4
@@ -547,4 +580,6 @@ tn1 ALL FULL JOIN USING tn2 | bs = {{ block_size }}
 \N	5	0
 \N	5	0
 \N	5	0
+{% endif -%}
+{% endfor -%}
 {% endfor -%}
diff --git a/tests/queries/0_stateless/02274_full_sort_join_nodistinct.sql.j2 b/tests/queries/0_stateless/02274_full_sort_join_nodistinct.sql.j2
index 95d3a5640162..613da65421e5 100644
--- a/tests/queries/0_stateless/02274_full_sort_join_nodistinct.sql.j2
+++ b/tests/queries/0_stateless/02274_full_sort_join_nodistinct.sql.j2
@@ -15,7 +15,17 @@ INSERT INTO tn1 VALUES (1, 'val1'), (NULL, 'val21'), (NULL, 'val22'), (NULL, 'va
 INSERT INTO t2 VALUES (1, 'val11'), (1, 'val12'), (2, 'val22'), (2, 'val23'), (2, 'val24'), (2, 'val25'), (2, 'val26'), (2, 'val27'), (2, 'val28'), (3, 'val3');
 INSERT INTO tn2 VALUES (1, 'val11'), (1, 'val12'), (NULL, 'val22'), (NULL, 'val23'), (NULL, 'val24'), (NULL, 'val25'), (NULL, 'val26'), (NULL, 'val27'), (NULL, 'val28'), (3, 'val3');
 
-SET join_algorithm = 'full_sorting_merge';
+{% macro is_implemented(join_algorithm) -%}
+{% if join_algorithm == 'grace_hash' %} -- { serverError NOT_IMPLEMENTED } {% endif %}
+{% endmacro -%}
+
+{% for join_algorithm in ['full_sorting_merge', 'grace_hash'] -%}
+
+SET max_bytes_in_join = '{% if join_algorithm == 'grace_hash' %}10K{% else %}0{% endif %}';
+
+SET join_algorithm = '{{ join_algorithm }}';
+
+SELECT '--- {{ join_algorithm }} ---';
 
 {% for block_size in range(1, 11) -%}
 SET max_block_size = {{ block_size }};
@@ -30,17 +40,20 @@ SELECT '{{ t1 }} {{ kind }} LEFT JOIN {{ t2 }} | bs = {{ block_size }}';
 SELECT t1.key, t2.key, t1.s, length(t2.s) FROM {{ t1 }} AS t1 {{ kind }} LEFT JOIN {{ t2 }} AS t2 ON t1.key == t2.key ORDER BY t1.key, t2.key, t1.s;
 
 SELECT '{{ t1 }} {{ kind }} RIGHT JOIN {{ t2 }} | bs = {{ block_size }}';
-SELECT t1.key, t2.key, length(t1.s), t2.s FROM {{ t1 }} AS t1 {{ kind }} RIGHT JOIN {{ t2 }} AS t2 ON t1.key == t2.key ORDER BY t1.key, t2.key, t2.s;
+SELECT t1.key, t2.key, length(t1.s), t2.s FROM {{ t1 }} AS t1 {{ kind }} RIGHT JOIN {{ t2 }} AS t2 ON t1.key == t2.key ORDER BY t1.key, t2.key, t2.s; {{ is_implemented(join_algorithm) }}
 
 {% endfor -%}
 
 SELECT '{{ t1 }} ALL FULL JOIN {{ t2 }} | bs = {{ block_size }}';
-SELECT t1.key, t2.key, length(t1.s), length(t2.s) FROM {{ t1 }} AS t1 {{ kind }} FULL JOIN {{ t2 }} AS t2 ON t1.key == t2.key ORDER BY t1.key, t2.key, length(t1.s), length(t2.s);
+SELECT t1.key, t2.key, length(t1.s), length(t2.s) FROM {{ t1 }} AS t1 {{ kind }} FULL JOIN {{ t2 }} AS t2 ON t1.key == t2.key ORDER BY t1.key, t2.key, length(t1.s), length(t2.s); {{ is_implemented(join_algorithm) }}
 
 SELECT '{{ t1 }} ALL FULL JOIN USING {{ t2 }} | bs = {{ block_size }}';
-SELECT key, length(t1.s), length(t2.s) FROM {{ t1 }} AS t1 ALL FULL JOIN {{ t2 }} AS t2 USING (key) ORDER BY key, length(t1.s), length(t2.s);
+SELECT key, length(t1.s), length(t2.s) FROM {{ t1 }} AS t1 ALL FULL JOIN {{ t2 }} AS t2 USING (key) ORDER BY key, length(t1.s), length(t2.s); {{ is_implemented(join_algorithm) }}
 
 {% endfor -%}
+{% endfor -%}
+SET max_bytes_in_join = 0;
+
 {% endfor -%}
 
 DROP TABLE IF EXISTS t1;
diff --git a/tests/queries/0_stateless/02275_full_sort_join_long.reference b/tests/queries/0_stateless/02275_full_sort_join_long.reference
index 91b81d5ab3a4..9ec06aea3e64 100644
--- a/tests/queries/0_stateless/02275_full_sort_join_long.reference
+++ b/tests/queries/0_stateless/02275_full_sort_join_long.reference
@@ -1,3 +1,4 @@
+-- full_sorting_merge --
 ALL INNER
 500353531835	500353531835	1000342	1000342	1000342
 ALL LEFT
@@ -16,18 +17,6 @@ ALL LEFT
 50195752660639	500353531835	10369589	10369589	1000342
 ALL RIGHT
 500353531835	684008812186	1367170	1000342	1367170
-ALL INNER
-500353531835	500353531835	1000342	1000342	1000342
-ALL LEFT
-50195752660639	500353531835	10369589	10369589	1000342
-ALL RIGHT
-500353531835	684008812186	1367170	1000342	1367170
-ANY INNER
-199622811843	199622811843	399458	399458	399458
-ANY LEFT
-50010619420459	315220291655	10000000	10000000	630753
-ANY RIGHT
-316611844056	500267124407	1000000	633172	1000000
 ANY INNER
 199622811843	199622811843	399458	399458	399458
 ANY LEFT
@@ -46,3 +35,22 @@ ANY LEFT
 50010619420459	315220291655	10000000	10000000	630753
 ANY RIGHT
 316611844056	500267124407	1000000	633172	1000000
+-- grace_hash --
+ALL INNER
+500353531835	500353531835	1000342	1000342	1000342
+ALL LEFT
+50195752660639	500353531835	10369589	10369589	1000342
+ALL RIGHT
+skipped
+ALL INNER
+500353531835	500353531835	1000342	1000342	1000342
+ALL LEFT
+50195752660639	500353531835	10369589	10369589	1000342
+ALL RIGHT
+skipped
+ALL INNER
+500353531835	500353531835	1000342	1000342	1000342
+ALL LEFT
+50195752660639	500353531835	10369589	10369589	1000342
+ALL RIGHT
+skipped
diff --git a/tests/queries/0_stateless/02275_full_sort_join_long.sql.j2 b/tests/queries/0_stateless/02275_full_sort_join_long.sql.j2
index 29f1d46e2c81..98cc46c9cb46 100644
--- a/tests/queries/0_stateless/02275_full_sort_join_long.sql.j2
+++ b/tests/queries/0_stateless/02275_full_sort_join_long.sql.j2
@@ -1,4 +1,4 @@
--- Tags: long
+-- Tags: long, no-tsan, no-asan, no-ubsan, no-msan, no-debug
 DROP TABLE IF EXISTS t1;
 DROP TABLE IF EXISTS t2;
 
@@ -22,13 +22,26 @@ INSERT INTO t2
     FROM numbers_mt({{ rtable_size }})
 ;
 
-SET join_algorithm = 'full_sorting_merge';
+{% macro is_implemented(join_algorithm) -%}
+{% if join_algorithm == 'grace_hash' %} -- { serverError NOT_IMPLEMENTED }
+SELECT 'skipped';
+{% endif -%}
+{% endmacro -%}
+
+{% for join_algorithm in ['full_sorting_merge', 'grace_hash'] -%}
+
+SET max_bytes_in_join = '{% if join_algorithm == 'grace_hash' %}1M{% else %}0{% endif %}';
+
+SELECT '-- {{ join_algorithm }} --';
+SET join_algorithm = '{{ join_algorithm }}';
 
 {% for kind in ['ALL', 'ANY'] -%}
-{% for block_size in [32001, 65505, 65536, range(32001, 65536) | random] %}
+{% for block_size in [10240, 32001, 65536] %}
 
 SET max_block_size = {{ block_size }};
 
+{% if not (kind == 'ANY' and join_algorithm == 'grace_hash') -%}
+
 SELECT '{{ kind }} INNER';
 SELECT sum(t1.key), sum(t2.key), count(), countIf(t1.key != 0), countIf(t2.key != 0) FROM t1
 {{ kind }} INNER JOIN t2
@@ -45,7 +58,13 @@ SELECT '{{ kind }} RIGHT';
 SELECT sum(t1.key), sum(t2.key), count(), countIf(t1.key != 0), countIf(t2.key != 0) FROM t1
 {{ kind }} RIGHT JOIN t2
 ON t1.key == t2.key
-;
+; {{ is_implemented(join_algorithm) }}
 
+{% endif -%}
+
+{% endfor -%}
 {% endfor -%}
+
+SET max_bytes_in_join = 0;
+
 {% endfor -%}
diff --git a/tests/queries/0_stateless/02367_join_pushdown_column_not_found.reference b/tests/queries/0_stateless/02367_join_pushdown_column_not_found.reference
index 98fb6a686563..627e1097cda3 100644
--- a/tests/queries/0_stateless/02367_join_pushdown_column_not_found.reference
+++ b/tests/queries/0_stateless/02367_join_pushdown_column_not_found.reference
@@ -2,3 +2,4 @@
 1
 1
 1
+1
diff --git a/tests/queries/0_stateless/02367_join_pushdown_column_not_found.sql.j2 b/tests/queries/0_stateless/02367_join_pushdown_column_not_found.sql.j2
index 95f3c5be7115..86e7bca00a92 100644
--- a/tests/queries/0_stateless/02367_join_pushdown_column_not_found.sql.j2
+++ b/tests/queries/0_stateless/02367_join_pushdown_column_not_found.sql.j2
@@ -1,4 +1,4 @@
-{% for join_algorithm in ['default', 'full_sorting_merge', 'hash', 'partial_merge'] -%}
+{% for join_algorithm in ['default', 'full_sorting_merge', 'hash', 'partial_merge', 'grace_hash'] -%}
 
 SET join_algorithm = '{{ join_algorithm }}';
 
diff --git a/tests/queries/1_stateful/00172_parallel_join.reference.j2 b/tests/queries/1_stateful/00172_parallel_join.reference.j2
index 30088c915005..1a43f1fb6ef3 100644
--- a/tests/queries/1_stateful/00172_parallel_join.reference.j2
+++ b/tests/queries/1_stateful/00172_parallel_join.reference.j2
@@ -1,4 +1,4 @@
-{% for join_algorithm in ['hash', 'parallel_hash', 'full_sorting_merge'] -%}
+{% for join_algorithm in ['hash', 'parallel_hash', 'full_sorting_merge', 'grace_hash'] -%}
 --- {{ join_algorithm }} ---
 2014-03-17	1406958	265108
 2014-03-19	1405797	261624
@@ -24,7 +24,7 @@ mail.ru	87949	22225
 best.ru	58537	55
 korablitz.ru	51844	0
 hurpass.com	49671	1251
-{% if join_algorithm != 'full_sorting_merge' -%}
+{% if join_algorithm not in  ['full_sorting_merge', 'grace_hash'] -%}
 37292	0	35642
 92887	252214	0
 7842	196036	0
diff --git a/tests/queries/1_stateful/00172_parallel_join.sql.j2 b/tests/queries/1_stateful/00172_parallel_join.sql.j2
index 39c981e0d316..ff077f43874f 100644
--- a/tests/queries/1_stateful/00172_parallel_join.sql.j2
+++ b/tests/queries/1_stateful/00172_parallel_join.sql.j2
@@ -1,4 +1,6 @@
-{% for join_algorithm in ['hash', 'parallel_hash', 'full_sorting_merge'] -%}
+{% for join_algorithm in ['hash', 'parallel_hash', 'full_sorting_merge', 'grace_hash'] -%}
+
+SET max_bytes_in_join = '{% if join_algorithm == 'grace_hash' %}20K{% else %}0{% endif %}';
 
 SELECT '--- {{ join_algorithm }} ---';
 
@@ -69,7 +71,7 @@ ORDER BY hits DESC
 LIMIT 10
 SETTINGS joined_subquery_requires_alias = 0;
 
-{% if join_algorithm != 'full_sorting_merge' -%}
+{% if join_algorithm not in ['full_sorting_merge', 'grace_hash'] -%}
 
 SELECT CounterID FROM test.visits ARRAY JOIN Goals.ID WHERE CounterID = 942285 ORDER BY CounterID;
 
@@ -211,4 +213,6 @@ ALL INNER JOIN
 ) AS b
 USING k ORDER BY joined;
 
-{% endfor %}
+SET max_bytes_in_join = 0;
+
+{% endfor -%}
