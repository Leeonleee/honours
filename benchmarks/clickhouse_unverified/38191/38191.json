{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 38191,
  "instance_id": "ClickHouse__ClickHouse-38191",
  "issue_numbers": [
    "11596"
  ],
  "base_commit": "24940ad5bb61945a57c75fc45e615c9e9b6cd5ce",
  "patch": "diff --git a/programs/server/Server.cpp b/programs/server/Server.cpp\nindex 4702985c0ae6..053bfc6bb4e4 100644\n--- a/programs/server/Server.cpp\n+++ b/programs/server/Server.cpp\n@@ -212,6 +212,7 @@ try\n \n     /// Clearing old temporary files.\n     fs::directory_iterator dir_end;\n+    size_t unknown_files = 0;\n     for (fs::directory_iterator it(path); it != dir_end; ++it)\n     {\n         if (it->is_regular_file() && startsWith(it->path().filename(), \"tmp\"))\n@@ -220,8 +221,17 @@ try\n             fs::remove(it->path());\n         }\n         else\n-            LOG_DEBUG(log, \"Found unknown file in temporary path {}\", it->path().string());\n+        {\n+            unknown_files++;\n+            if (unknown_files < 100)\n+                LOG_DEBUG(log, \"Found unknown {} {} in temporary path\",\n+                    it->is_regular_file() ? \"file\" : (it->is_directory() ? \"directory\" : \"element\"),\n+                    it->path().string());\n+        }\n     }\n+\n+    if (unknown_files)\n+        LOG_DEBUG(log, \"Found {} unknown files in temporary path\", unknown_files);\n }\n catch (...)\n {\ndiff --git a/src/Common/BitHelpers.h b/src/Common/BitHelpers.h\nindex 6a3efb58c42d..6356d5b81d5b 100644\n--- a/src/Common/BitHelpers.h\n+++ b/src/Common/BitHelpers.h\n@@ -1,8 +1,9 @@\n #pragma once\n \n+#include <cassert>\n+#include <concepts>\n #include <cstddef>\n #include <cstdint>\n-#include <cassert>\n #include <type_traits>\n #include <base/defines.h>\n \n@@ -117,3 +118,9 @@ inline T maskLowBits(unsigned char bits)\n \n     return result;\n }\n+\n+template <std::integral T>\n+constexpr bool isPowerOf2(T number)\n+{\n+    return number > 0 && (number & (number - 1)) == 0;\n+}\ndiff --git a/src/Common/HashTable/Hash.h b/src/Common/HashTable/Hash.h\nindex 189db68f59af..550eea66a0f3 100644\n--- a/src/Common/HashTable/Hash.h\n+++ b/src/Common/HashTable/Hash.h\n@@ -76,7 +76,7 @@ inline DB::UInt64 intHashCRC32(DB::UInt64 x, DB::UInt64 updated_value)\n }\n \n template <typename T>\n-requires (sizeof(T) > sizeof(DB::UInt64))\n+requires std::has_unique_object_representations_v<T> && (sizeof(T) % sizeof(DB::UInt64) == 0)\n inline DB::UInt64 intHashCRC32(const T & x, DB::UInt64 updated_value)\n {\n     const auto * begin = reinterpret_cast<const char *>(&x);\n@@ -89,6 +89,25 @@ inline DB::UInt64 intHashCRC32(const T & x, DB::UInt64 updated_value)\n     return updated_value;\n }\n \n+template <std::floating_point T>\n+requires(sizeof(T) <= sizeof(UInt64))\n+inline DB::UInt64 intHashCRC32(T x, DB::UInt64 updated_value)\n+{\n+    static_assert(std::numeric_limits<T>::is_iec559);\n+\n+    // In IEEE 754, the only two floating point numbers that compare equal are 0.0 and -0.0.\n+    // See std::hash<float>.\n+    if (x == static_cast<T>(0.0))\n+        return intHashCRC32(0, updated_value);\n+\n+    UInt64 repr;\n+    if constexpr (sizeof(T) == sizeof(UInt32))\n+        repr = std::bit_cast<UInt32>(x);\n+    else\n+        repr = std::bit_cast<UInt64>(x);\n+\n+    return intHashCRC32(repr, updated_value);\n+}\n \n inline UInt32 updateWeakHash32(const DB::UInt8 * pos, size_t size, DB::UInt32 updated_value)\n {\ndiff --git a/src/Common/WeakHash.h b/src/Common/WeakHash.h\nindex bfea75eddf18..b59624e64f24 100644\n--- a/src/Common/WeakHash.h\n+++ b/src/Common/WeakHash.h\n@@ -11,13 +11,16 @@ namespace DB\n /// The main purpose why this class needed is to support data initialization. Initially, every bit is 1.\n class WeakHash32\n {\n+    static constexpr UInt32 kDefaultInitialValue = ~UInt32(0);\n+\n public:\n+\n     using Container = PaddedPODArray<UInt32>;\n \n-    explicit WeakHash32(size_t size) : data(size, ~UInt32(0)) {}\n+    explicit WeakHash32(size_t size, UInt32 initial_value = kDefaultInitialValue) : data(size, initial_value) {}\n     WeakHash32(const WeakHash32 & other) { data.assign(other.data); }\n \n-    void reset(size_t size) { data.assign(size, ~UInt32(0)); }\n+    void reset(size_t size, UInt32 initial_value = kDefaultInitialValue) { data.assign(size, initial_value); }\n \n     const Container & getData() const { return data; }\n     Container & getData() { return data; }\ndiff --git a/src/Core/Joins.cpp b/src/Core/Joins.cpp\nindex 1cd7215335f2..9c8ece822248 100644\n--- a/src/Core/Joins.cpp\n+++ b/src/Core/Joins.cpp\n@@ -64,6 +64,7 @@ const char * toString(JoinAlgorithm join_algorithm)\n         case JoinAlgorithm::PARALLEL_HASH: return \"PARALLEL_HASH\";\n         case JoinAlgorithm::DIRECT: return \"DIRECT\";\n         case JoinAlgorithm::FULL_SORTING_MERGE: return \"FULL_SORTING_MERGE\";\n+        case JoinAlgorithm::GRACE_HASH: return \"GRACE_HASH\";\n     }\n }\n \ndiff --git a/src/Core/Joins.h b/src/Core/Joins.h\nindex 7c91c5a5c162..6884e8dfd9a7 100644\n--- a/src/Core/Joins.h\n+++ b/src/Core/Joins.h\n@@ -102,6 +102,7 @@ enum class JoinAlgorithm\n     PARTIAL_MERGE,\n     PREFER_PARTIAL_MERGE,\n     PARALLEL_HASH,\n+    GRACE_HASH,\n     DIRECT,\n     FULL_SORTING_MERGE,\n };\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex cfc7df6c8539..2830160aa64b 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -661,6 +661,8 @@ static constexpr UInt64 operator\"\"_GiB(unsigned long long value)\n     M(Bool, throw_if_no_data_to_insert, true, \"Enables or disables empty INSERTs, enabled by default\", 0) \\\n     M(Bool, compatibility_ignore_auto_increment_in_create_table, false, \"Ignore AUTO_INCREMENT keyword in column declaration if true, otherwise return error. It simplifies migration from MySQL\", 0) \\\n     M(Bool, multiple_joins_try_to_keep_original_names, false, \"Do not add aliases to top level expression list on multiple joins rewrite\", 0) \\\n+    M(UInt64, grace_hash_join_initial_buckets, 1, \"Initial number of grace hash join buckets\", 0) \\\n+    M(UInt64, grace_hash_join_max_buckets, 1024, \"Limit on the number of grace hash join buckets\", 0) \\\n     M(Bool, optimize_distinct_in_order, true, \"Enable DISTINCT optimization if some columns in DISTINCT form a prefix of sorting. For example, prefix of sorting key in merge tree or ORDER BY statement\", 0) \\\n     M(Bool, optimize_sorting_by_input_stream_properties, true, \"Optimize sorting by sorting properties of input stream\", 0) \\\n     M(UInt64, insert_keeper_max_retries, 0, \"Max retries for keeper operations during insert\", 0) \\\ndiff --git a/src/Core/SettingsEnums.cpp b/src/Core/SettingsEnums.cpp\nindex 2a564ebe6d3c..632587106a1a 100644\n--- a/src/Core/SettingsEnums.cpp\n+++ b/src/Core/SettingsEnums.cpp\n@@ -38,7 +38,8 @@ IMPLEMENT_SETTING_MULTI_ENUM(JoinAlgorithm, ErrorCodes::UNKNOWN_JOIN,\n      {\"prefer_partial_merge\", JoinAlgorithm::PREFER_PARTIAL_MERGE},\n      {\"parallel_hash\",        JoinAlgorithm::PARALLEL_HASH},\n      {\"direct\",               JoinAlgorithm::DIRECT},\n-     {\"full_sorting_merge\",   JoinAlgorithm::FULL_SORTING_MERGE}})\n+     {\"full_sorting_merge\",   JoinAlgorithm::FULL_SORTING_MERGE},\n+     {\"grace_hash\",           JoinAlgorithm::GRACE_HASH}})\n \n \n IMPLEMENT_SETTING_ENUM(TotalsMode, ErrorCodes::UNKNOWN_TOTALS_MODE,\ndiff --git a/src/Interpreters/ConcurrentHashJoin.cpp b/src/Interpreters/ConcurrentHashJoin.cpp\nindex cc79a71245b7..6c77539532fc 100644\n--- a/src/Interpreters/ConcurrentHashJoin.cpp\n+++ b/src/Interpreters/ConcurrentHashJoin.cpp\n@@ -161,15 +161,12 @@ bool ConcurrentHashJoin::alwaysReturnsEmptySet() const\n     return true;\n }\n \n-std::shared_ptr<NotJoinedBlocks> ConcurrentHashJoin::getNonJoinedBlocks(\n+IBlocksStreamPtr ConcurrentHashJoin::getNonJoinedBlocks(\n         const Block & /*left_sample_block*/, const Block & /*result_sample_block*/, UInt64 /*max_block_size*/) const\n {\n-    if (table_join->strictness() == JoinStrictness::Asof ||\n-        table_join->strictness() == JoinStrictness::Semi ||\n-        !isRightOrFull(table_join->kind()))\n-    {\n+    if (!JoinCommon::hasNonJoinedBlocks(*table_join))\n         return {};\n-    }\n+\n     throw Exception(ErrorCodes::LOGICAL_ERROR, \"Invalid join type. join kind: {}, strictness: {}\", table_join->kind(), table_join->strictness());\n }\n \n@@ -204,6 +201,7 @@ IColumn::Selector ConcurrentHashJoin::selectDispatchBlock(const Strings & key_co\n \n Blocks ConcurrentHashJoin::dispatchBlock(const Strings & key_columns_names, const Block & from_block)\n {\n+    /// TODO: use JoinCommon::scatterBlockByHash\n     size_t num_shards = hash_joins.size();\n     size_t num_cols = from_block.columns();\n \ndiff --git a/src/Interpreters/ConcurrentHashJoin.h b/src/Interpreters/ConcurrentHashJoin.h\nindex 705e6ba81b73..a00c3ed13265 100644\n--- a/src/Interpreters/ConcurrentHashJoin.h\n+++ b/src/Interpreters/ConcurrentHashJoin.h\n@@ -47,7 +47,7 @@ class ConcurrentHashJoin : public IJoin\n     size_t getTotalByteCount() const override;\n     bool alwaysReturnsEmptySet() const override;\n     bool supportParallelJoin() const override { return true; }\n-    std::shared_ptr<NotJoinedBlocks>\n+    IBlocksStreamPtr\n     getNonJoinedBlocks(const Block & left_sample_block, const Block & result_sample_block, UInt64 max_block_size) const override;\n \n private:\ndiff --git a/src/Interpreters/DirectJoin.h b/src/Interpreters/DirectJoin.h\nindex 6a6f45054740..bdbd155dc366 100644\n--- a/src/Interpreters/DirectJoin.h\n+++ b/src/Interpreters/DirectJoin.h\n@@ -48,7 +48,7 @@ class DirectKeyValueJoin : public IJoin\n \n     virtual bool isFilled() const override { return true; }\n \n-    virtual std::shared_ptr<NotJoinedBlocks>\n+    virtual IBlocksStreamPtr\n     getNonJoinedBlocks(const Block &, const Block &, UInt64) const override\n     {\n         return nullptr;\ndiff --git a/src/Interpreters/ExpressionAnalyzer.cpp b/src/Interpreters/ExpressionAnalyzer.cpp\nindex b34dbf3128cc..17788fce53f0 100644\n--- a/src/Interpreters/ExpressionAnalyzer.cpp\n+++ b/src/Interpreters/ExpressionAnalyzer.cpp\n@@ -22,6 +22,7 @@\n #include <Interpreters/ExpressionActions.h>\n #include <Interpreters/ExpressionAnalyzer.h>\n #include <Interpreters/ExternalDictionariesLoader.h>\n+#include <Interpreters/GraceHashJoin.h>\n #include <Interpreters/HashJoin.h>\n #include <Interpreters/JoinSwitcher.h>\n #include <Interpreters/MergeJoin.h>\n@@ -1009,12 +1010,26 @@ static ActionsDAGPtr createJoinedBlockActions(ContextPtr context, const TableJoi\n \n std::shared_ptr<DirectKeyValueJoin> tryKeyValueJoin(std::shared_ptr<TableJoin> analyzed_join, const Block & right_sample_block);\n \n-static std::shared_ptr<IJoin> chooseJoinAlgorithm(std::shared_ptr<TableJoin> analyzed_join, std::unique_ptr<QueryPlan> & joined_plan, ContextPtr context)\n+\n+static std::shared_ptr<IJoin> chooseJoinAlgorithm(\n+    std::shared_ptr<TableJoin> analyzed_join, const ColumnsWithTypeAndName & left_sample_columns, std::unique_ptr<QueryPlan> & joined_plan, ContextPtr context)\n {\n+    const auto & settings = context->getSettings();\n+\n+    Block left_sample_block(left_sample_columns);\n+    for (auto & column : left_sample_block)\n+    {\n+        if (!column.column)\n+            column.column = column.type->createColumn();\n+    }\n+\n     Block right_sample_block = joined_plan->getCurrentDataStream().header;\n \n+    std::vector<String> tried_algorithms;\n+\n     if (analyzed_join->isEnabledAlgorithm(JoinAlgorithm::DIRECT))\n     {\n+        tried_algorithms.push_back(toString(JoinAlgorithm::DIRECT));\n         JoinPtr direct_join = tryKeyValueJoin(analyzed_join, right_sample_block);\n         if (direct_join)\n         {\n@@ -1027,6 +1042,7 @@ static std::shared_ptr<IJoin> chooseJoinAlgorithm(std::shared_ptr<TableJoin> ana\n     if (analyzed_join->isEnabledAlgorithm(JoinAlgorithm::PARTIAL_MERGE) ||\n         analyzed_join->isEnabledAlgorithm(JoinAlgorithm::PREFER_PARTIAL_MERGE))\n     {\n+        tried_algorithms.push_back(toString(JoinAlgorithm::PARTIAL_MERGE));\n         if (MergeJoin::isSupported(analyzed_join))\n             return std::make_shared<MergeJoin>(analyzed_join, right_sample_block);\n     }\n@@ -1036,22 +1052,37 @@ static std::shared_ptr<IJoin> chooseJoinAlgorithm(std::shared_ptr<TableJoin> ana\n         analyzed_join->isEnabledAlgorithm(JoinAlgorithm::PREFER_PARTIAL_MERGE) ||\n         analyzed_join->isEnabledAlgorithm(JoinAlgorithm::PARALLEL_HASH))\n     {\n+        tried_algorithms.push_back(toString(JoinAlgorithm::HASH));\n         if (analyzed_join->allowParallelHashJoin())\n-            return std::make_shared<ConcurrentHashJoin>(context, analyzed_join, context->getSettings().max_threads, right_sample_block);\n+            return std::make_shared<ConcurrentHashJoin>(context, analyzed_join, settings.max_threads, right_sample_block);\n         return std::make_shared<HashJoin>(analyzed_join, right_sample_block);\n     }\n \n     if (analyzed_join->isEnabledAlgorithm(JoinAlgorithm::FULL_SORTING_MERGE))\n     {\n+        tried_algorithms.push_back(toString(JoinAlgorithm::FULL_SORTING_MERGE));\n         if (FullSortingMergeJoin::isSupported(analyzed_join))\n             return std::make_shared<FullSortingMergeJoin>(analyzed_join, right_sample_block);\n     }\n \n+    if (analyzed_join->isEnabledAlgorithm(JoinAlgorithm::GRACE_HASH))\n+    {\n+        tried_algorithms.push_back(toString(JoinAlgorithm::GRACE_HASH));\n+        if (GraceHashJoin::isSupported(analyzed_join))\n+            return std::make_shared<GraceHashJoin>(context, analyzed_join, left_sample_block, right_sample_block, context->getTempDataOnDisk());\n+    }\n+\n     if (analyzed_join->isEnabledAlgorithm(JoinAlgorithm::AUTO))\n-        return std::make_shared<JoinSwitcher>(analyzed_join, right_sample_block);\n+    {\n+        tried_algorithms.push_back(toString(JoinAlgorithm::AUTO));\n+\n+        if (MergeJoin::isSupported(analyzed_join))\n+            return std::make_shared<JoinSwitcher>(analyzed_join, right_sample_block);\n+    }\n \n-    throw Exception(\"Can't execute any of specified algorithms for specified strictness/kind and right storage type\",\n-                     ErrorCodes::NOT_IMPLEMENTED);\n+    throw Exception(ErrorCodes::NOT_IMPLEMENTED,\n+        \"Can't execute {} join algorithm for this strictness/kind and right storage type\",\n+        fmt::join(tried_algorithms, \" or \"));\n }\n \n static std::unique_ptr<QueryPlan> buildJoinedPlan(\n@@ -1186,7 +1217,7 @@ JoinPtr SelectQueryExpressionAnalyzer::makeJoin(\n         joined_plan->addStep(std::move(converting_step));\n     }\n \n-    JoinPtr join = chooseJoinAlgorithm(analyzed_join, joined_plan, getContext());\n+    JoinPtr join = chooseJoinAlgorithm(analyzed_join, left_columns, joined_plan, getContext());\n     return join;\n }\n \ndiff --git a/src/Interpreters/FullSortingMergeJoin.h b/src/Interpreters/FullSortingMergeJoin.h\nindex 14c812591591..fa7d0478535e 100644\n--- a/src/Interpreters/FullSortingMergeJoin.h\n+++ b/src/Interpreters/FullSortingMergeJoin.h\n@@ -100,7 +100,7 @@ class FullSortingMergeJoin : public IJoin\n \n     bool alwaysReturnsEmptySet() const override { return false; }\n \n-    std::shared_ptr<NotJoinedBlocks>\n+    IBlocksStreamPtr\n     getNonJoinedBlocks(const Block & /* left_sample_block */, const Block & /* result_sample_block */, UInt64 /* max_block_size */) const override\n     {\n         throw Exception(ErrorCodes::LOGICAL_ERROR, \"FullSortingMergeJoin::getNonJoinedBlocks should not be called\");\ndiff --git a/src/Interpreters/GraceHashJoin.cpp b/src/Interpreters/GraceHashJoin.cpp\nnew file mode 100644\nindex 000000000000..5ef276135917\n--- /dev/null\n+++ b/src/Interpreters/GraceHashJoin.cpp\n@@ -0,0 +1,628 @@\n+#include <Interpreters/GraceHashJoin.h>\n+#include <Interpreters/HashJoin.h>\n+#include <Interpreters/TableJoin.h>\n+#include <Interpreters/Context.h>\n+\n+#include <Formats/NativeWriter.h>\n+#include <Interpreters/TemporaryDataOnDisk.h>\n+\n+#include <Compression/CompressedWriteBuffer.h>\n+#include <Core/ProtocolDefines.h>\n+#include <Disks/IVolume.h>\n+#include <Disks/TemporaryFileOnDisk.h>\n+#include <IO/WriteBufferFromTemporaryFile.h>\n+#include <Common/logger_useful.h>\n+#include <Common/thread_local_rng.h>\n+\n+#include <base/FnTraits.h>\n+#include <fmt/format.h>\n+\n+#include <Formats/formatBlock.h>\n+\n+namespace CurrentMetrics\n+{\n+    extern const Metric TemporaryFilesForJoin;\n+}\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+    extern const int LIMIT_EXCEEDED;\n+    extern const int LOGICAL_ERROR;\n+    extern const int NOT_IMPLEMENTED;\n+}\n+\n+namespace\n+{\n+    class AccumulatedBlockReader\n+    {\n+    public:\n+        AccumulatedBlockReader(TemporaryFileStream & reader_,\n+                               std::mutex & mutex_,\n+                               size_t result_block_size_ = DEFAULT_BLOCK_SIZE * 8)\n+            : reader(reader_)\n+            , mutex(mutex_)\n+            , result_block_size(result_block_size_)\n+        {\n+            if (!reader.isWriteFinished())\n+                throw Exception(ErrorCodes::LOGICAL_ERROR, \"Reading not finished file\");\n+        }\n+\n+        Block read()\n+        {\n+            std::lock_guard<std::mutex> lock(mutex);\n+\n+            if (eof)\n+                return {};\n+\n+            Blocks blocks;\n+            size_t rows_read = 0;\n+            while (rows_read < result_block_size)\n+            {\n+                Block block = reader.read();\n+                rows_read += block.rows();\n+                if (!block)\n+                {\n+                    eof = true;\n+                    return concatenateBlocks(blocks);\n+                }\n+                blocks.push_back(std::move(block));\n+            }\n+\n+            return concatenateBlocks(blocks);\n+        }\n+\n+    private:\n+        TemporaryFileStream & reader;\n+        std::mutex & mutex;\n+\n+        const size_t result_block_size;\n+        bool eof = false;\n+    };\n+\n+    std::deque<size_t> generateRandomPermutation(size_t from, size_t to)\n+    {\n+        size_t size = to - from;\n+        std::deque<size_t> indices(size);\n+        std::iota(indices.begin(), indices.end(), from);\n+        std::shuffle(indices.begin(), indices.end(), thread_local_rng);\n+        return indices;\n+    }\n+\n+    // Try to apply @callback in the order specified in @indices\n+    // Until it returns true for each index in the @indices.\n+    void retryForEach(std::deque<size_t> indices, Fn<bool(size_t)> auto callback)\n+    {\n+        while (!indices.empty())\n+        {\n+            size_t bucket_index = indices.front();\n+            indices.pop_front();\n+\n+            if (!callback(bucket_index))\n+                indices.push_back(bucket_index);\n+        }\n+    }\n+}\n+\n+class GraceHashJoin::FileBucket : boost::noncopyable\n+{\n+    enum class State : int\n+    {\n+        WRITING_BLOCKS,\n+        JOINING_BLOCKS,\n+        FINISHED,\n+    };\n+\n+public:\n+    using BucketLock = std::unique_lock<std::mutex>;\n+\n+    struct Stats\n+    {\n+        TemporaryFileStream::Stat left;\n+        TemporaryFileStream::Stat right;\n+    };\n+\n+    explicit FileBucket(size_t bucket_index_,\n+                        TemporaryFileStream & left_file_,\n+                        TemporaryFileStream & right_file_,\n+                        Poco::Logger * log_)\n+        : idx{bucket_index_}\n+        , left_file{left_file_}\n+        , right_file{right_file_}\n+        , state{State::WRITING_BLOCKS}\n+        , log(log_)\n+    {\n+    }\n+\n+    void addLeftBlock(const Block & block)\n+    {\n+        std::unique_lock<std::mutex> lock(left_file_mutex);\n+        addBlockImpl(block, left_file, lock);\n+    }\n+\n+    void addRightBlock(const Block & block)\n+    {\n+        std::unique_lock<std::mutex> lock(right_file_mutex);\n+        addBlockImpl(block, right_file, lock);\n+    }\n+\n+    bool tryAddLeftBlock(const Block & block)\n+    {\n+        std::unique_lock<std::mutex> lock(left_file_mutex, std::try_to_lock);\n+        return addBlockImpl(block, left_file, lock);\n+    }\n+\n+    bool tryAddRightBlock(const Block & block)\n+    {\n+        std::unique_lock<std::mutex> lock(right_file_mutex, std::try_to_lock);\n+        return addBlockImpl(block, right_file, lock);\n+    }\n+\n+    bool finished() const\n+    {\n+        std::unique_lock<std::mutex> left_lock(left_file_mutex);\n+        return left_file.isEof();\n+    }\n+\n+    bool empty() const { return is_empty.load(); }\n+\n+    Stats getStat() const { return stats; }\n+\n+    AccumulatedBlockReader startJoining()\n+    {\n+        LOG_TRACE(log, \"Joining file bucket {}\", idx);\n+\n+        {\n+            std::unique_lock<std::mutex> left_lock(left_file_mutex);\n+            std::unique_lock<std::mutex> right_lock(right_file_mutex);\n+\n+            stats.left = left_file.finishWriting();\n+            stats.right = right_file.finishWriting();\n+            state = State::JOINING_BLOCKS;\n+        }\n+\n+        return AccumulatedBlockReader(right_file, right_file_mutex);\n+    }\n+\n+    AccumulatedBlockReader getLeftTableReader()\n+    {\n+        ensureState(State::JOINING_BLOCKS);\n+        return AccumulatedBlockReader(left_file, left_file_mutex);\n+    }\n+\n+    const size_t idx;\n+\n+private:\n+    bool addBlockImpl(const Block & block, TemporaryFileStream & writer, std::unique_lock<std::mutex> & lock)\n+    {\n+        ensureState(State::WRITING_BLOCKS);\n+\n+        if (!lock.owns_lock())\n+            return false;\n+\n+        if (block.rows())\n+            is_empty = false;\n+\n+        writer.write(block);\n+        return true;\n+    }\n+\n+    void transition(State expected, State desired)\n+    {\n+        State prev = state.exchange(desired);\n+        if (prev != expected)\n+            throw Exception(ErrorCodes::LOGICAL_ERROR, \"Invalid state transition from {} (got {}) to {}\", expected, prev, desired);\n+    }\n+\n+    void ensureState(State expected) const\n+    {\n+        State cur_state = state.load();\n+        if (cur_state != expected)\n+            throw Exception(ErrorCodes::LOGICAL_ERROR, \"Invalid state transition, expected {}, got {}\", expected, state.load());\n+    }\n+\n+    TemporaryFileStream & left_file;\n+    TemporaryFileStream & right_file;\n+    mutable std::mutex left_file_mutex;\n+    mutable std::mutex right_file_mutex;\n+\n+    std::atomic_bool is_empty = true;\n+\n+    std::atomic<State> state;\n+    Stats stats;\n+\n+    Poco::Logger * log;\n+};\n+\n+\n+static void flushBlocksToBuckets(Blocks & blocks, const GraceHashJoin::Buckets & buckets_snapshot)\n+{\n+    assert(blocks.size() == buckets_snapshot.size());\n+    retryForEach(\n+        generateRandomPermutation(1, buckets_snapshot.size()),\n+        [&](size_t i)\n+        {\n+            if (!blocks[i].rows())\n+                return true;\n+            bool flushed = buckets_snapshot[i]->tryAddRightBlock(blocks[i]);\n+            if (flushed)\n+                blocks[i].clear();\n+            return flushed;\n+        });\n+}\n+\n+GraceHashJoin::GraceHashJoin(\n+    ContextPtr context_, std::shared_ptr<TableJoin> table_join_,\n+    const Block & left_sample_block_,\n+    const Block & right_sample_block_,\n+    TemporaryDataOnDiskScopePtr tmp_data_,\n+    bool any_take_last_row_)\n+    : log{&Poco::Logger::get(\"GraceHashJoin\")}\n+    , context{context_}\n+    , table_join{std::move(table_join_)}\n+    , left_sample_block{left_sample_block_}\n+    , right_sample_block{right_sample_block_}\n+    , any_take_last_row{any_take_last_row_}\n+    , max_num_buckets{context->getSettingsRef().grace_hash_join_max_buckets}\n+    , max_block_size{context->getSettingsRef().max_block_size}\n+    , left_key_names(table_join->getOnlyClause().key_names_left)\n+    , right_key_names(table_join->getOnlyClause().key_names_right)\n+    , tmp_data(std::make_unique<TemporaryDataOnDisk>(tmp_data_, CurrentMetrics::TemporaryFilesForJoin))\n+    , hash_join(makeInMemoryJoin())\n+{\n+    if (!GraceHashJoin::isSupported(table_join))\n+        throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"GraceHashJoin is not supported for this join type\");\n+\n+}\n+\n+void GraceHashJoin::initBuckets()\n+{\n+    const auto & settings = context->getSettingsRef();\n+\n+    size_t initial_num_buckets = roundUpToPowerOfTwoOrZero(std::clamp<size_t>(settings.grace_hash_join_initial_buckets, 1, settings.grace_hash_join_max_buckets));\n+\n+    for (size_t i = 0; i < initial_num_buckets; ++i)\n+    {\n+        addBucket(buckets);\n+    }\n+\n+    if (buckets.empty())\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"No buckets created\");\n+\n+    LOG_TRACE(log, \"Initialize {} buckets\", buckets.size());\n+\n+    current_bucket = buckets.front().get();\n+    current_bucket->startJoining();\n+}\n+\n+bool GraceHashJoin::isSupported(const std::shared_ptr<TableJoin> & table_join)\n+{\n+    bool is_asof = (table_join->strictness() == JoinStrictness::Asof);\n+    return !is_asof && isInnerOrLeft(table_join->kind()) && table_join->oneDisjunct();\n+}\n+\n+GraceHashJoin::~GraceHashJoin() = default;\n+\n+bool GraceHashJoin::addJoinedBlock(const Block & block, bool /*check_limits*/)\n+{\n+    if (current_bucket == nullptr)\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"GraceHashJoin is not initialized\");\n+\n+    Block materialized = materializeBlock(block);\n+    addJoinedBlockImpl(materialized);\n+    return true;\n+}\n+\n+bool GraceHashJoin::fitsInMemory() const\n+{\n+    /// One row can't be split, avoid loop\n+    if (hash_join->getTotalRowCount() < 2)\n+        return true;\n+\n+    return table_join->sizeLimits().softCheck(hash_join->getTotalRowCount(), hash_join->getTotalByteCount());\n+}\n+\n+GraceHashJoin::Buckets GraceHashJoin::rehashBuckets(size_t to_size)\n+{\n+    std::unique_lock lock(rehash_mutex);\n+    size_t current_size = buckets.size();\n+\n+    if (to_size <= current_size)\n+        return buckets;\n+\n+    assert(isPowerOf2(to_size));\n+\n+    if (to_size > max_num_buckets)\n+    {\n+        throw Exception(ErrorCodes::LIMIT_EXCEEDED,\n+            \"Too many grace hash join buckets ({} > {}), consider increasing grace_hash_join_max_buckets or max_rows_in_join/max_bytes_in_join\",\n+            to_size, max_num_buckets);\n+    }\n+\n+    LOG_TRACE(log, \"Rehashing from {} to {}\", current_size, to_size);\n+\n+    buckets.reserve(to_size);\n+    for (size_t i = current_size; i < to_size; ++i)\n+        addBucket(buckets);\n+\n+    return buckets;\n+}\n+\n+void GraceHashJoin::addBucket(Buckets & destination)\n+{\n+    BucketPtr new_bucket = std::make_shared<FileBucket>(\n+        destination.size(), tmp_data->createStream(left_sample_block), tmp_data->createStream(right_sample_block), log);\n+    destination.emplace_back(std::move(new_bucket));\n+}\n+\n+void GraceHashJoin::checkTypesOfKeys(const Block & block) const\n+{\n+    assert(hash_join);\n+    return hash_join->checkTypesOfKeys(block);\n+}\n+\n+void GraceHashJoin::initialize(const Block & sample_block)\n+{\n+    left_sample_block = sample_block.cloneEmpty();\n+    output_sample_block = left_sample_block.cloneEmpty();\n+    ExtraBlockPtr not_processed;\n+    hash_join->joinBlock(output_sample_block, not_processed);\n+    initBuckets();\n+}\n+\n+void GraceHashJoin::joinBlock(Block & block, std::shared_ptr<ExtraBlock> & not_processed)\n+{\n+    if (block.rows() == 0)\n+    {\n+        hash_join->joinBlock(block, not_processed);\n+        return;\n+    }\n+\n+    materializeBlockInplace(block);\n+\n+    Buckets buckets_snapshot = getCurrentBuckets();\n+    size_t num_buckets = buckets_snapshot.size();\n+    Blocks blocks = JoinCommon::scatterBlockByHash(left_key_names, block, num_buckets);\n+\n+    block = std::move(blocks[current_bucket->idx]);\n+\n+    hash_join->joinBlock(block, not_processed);\n+    if (not_processed)\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Unhandled not processed block in GraceHashJoin\");\n+\n+    // We need to skip the first bucket that is already joined in memory, so we start with 1.\n+    retryForEach(\n+        generateRandomPermutation(1, num_buckets),\n+        [&blocks, &buckets_snapshot](size_t idx)\n+        {\n+            if (blocks[idx].rows() == 0)\n+                return true;\n+            return buckets_snapshot[idx]->tryAddLeftBlock(blocks[idx]);\n+        });\n+}\n+\n+void GraceHashJoin::setTotals(const Block & block)\n+{\n+    if (block.rows() > 0)\n+        throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Totals are not supported for GraceHashJoin, got '{}'\", block.dumpStructure());\n+}\n+\n+size_t GraceHashJoin::getTotalRowCount() const\n+{\n+    std::lock_guard lock(hash_join_mutex);\n+    assert(hash_join);\n+    return hash_join->getTotalRowCount();\n+}\n+\n+size_t GraceHashJoin::getTotalByteCount() const\n+{\n+    std::lock_guard lock(hash_join_mutex);\n+    assert(hash_join);\n+    return hash_join->getTotalByteCount();\n+}\n+\n+bool GraceHashJoin::alwaysReturnsEmptySet() const\n+{\n+    if (!isInnerOrRight(table_join->kind()))\n+        return false;\n+\n+    std::shared_lock lock(rehash_mutex);\n+\n+    bool file_buckets_are_empty = std::all_of(buckets.begin(), buckets.end(), [](const auto & bucket) { return bucket->empty(); });\n+    bool hash_join_is_empty = hash_join && hash_join->alwaysReturnsEmptySet();\n+\n+    return hash_join_is_empty && file_buckets_are_empty;\n+}\n+\n+IBlocksStreamPtr GraceHashJoin::getNonJoinedBlocks(const Block &, const Block &, UInt64) const\n+{\n+    /// We do no support returning non joined blocks here.\n+    /// TODO: They _should_ be reported by getDelayedBlocks instead\n+    return nullptr;\n+}\n+\n+class GraceHashJoin::DelayedBlocks : public IBlocksStream\n+{\n+public:\n+    explicit DelayedBlocks(size_t current_bucket_, Buckets buckets_, InMemoryJoinPtr hash_join_, const Names & left_key_names_, const Names & right_key_names_)\n+        : current_bucket(current_bucket_)\n+        , buckets(std::move(buckets_))\n+        , hash_join(std::move(hash_join_))\n+        , left_reader(buckets[current_bucket]->getLeftTableReader())\n+        , left_key_names(left_key_names_)\n+        , right_key_names(right_key_names_)\n+    {\n+    }\n+\n+    Block nextImpl() override\n+    {\n+        Block block;\n+        size_t num_buckets = buckets.size();\n+        size_t current_idx = buckets[current_bucket]->idx;\n+\n+        do\n+        {\n+            block = left_reader.read();\n+            if (!block)\n+            {\n+                return {};\n+            }\n+\n+            Blocks blocks = JoinCommon::scatterBlockByHash(left_key_names, block, num_buckets);\n+            block = std::move(blocks[current_idx]);\n+\n+            /*\n+             * We need to filter out blocks that were written to the current bucket `B_{n}`\n+             * but then virtually moved to another bucket `B_{n+i}` on rehash.\n+             * Bucket `B_{n+i}` is waiting for the buckets with smaller index to be processed,\n+             * and rows can be moved only forward (because we increase hash modulo twice on each rehash),\n+             * so it is safe to add blocks.\n+             */\n+            for (size_t bucket_idx = 0; bucket_idx < num_buckets; ++bucket_idx)\n+            {\n+                if (blocks[bucket_idx].rows() == 0)\n+                    continue;\n+\n+                if (bucket_idx == current_idx) // Rows that are still in our bucket\n+                    continue;\n+\n+                buckets[bucket_idx]->addLeftBlock(blocks[bucket_idx]);\n+            }\n+        } while (block.rows() == 0);\n+\n+        ExtraBlockPtr not_processed;\n+        hash_join->joinBlock(block, not_processed);\n+\n+        if (not_processed)\n+            throw Exception(ErrorCodes::LOGICAL_ERROR, \"Unsupported hash join type\");\n+\n+        return block;\n+    }\n+\n+    size_t current_bucket;\n+    Buckets buckets;\n+    InMemoryJoinPtr hash_join;\n+\n+    AccumulatedBlockReader left_reader;\n+\n+    Names left_key_names;\n+    Names right_key_names;\n+};\n+\n+IBlocksStreamPtr GraceHashJoin::getDelayedBlocks()\n+{\n+    std::lock_guard current_bucket_lock(current_bucket_mutex);\n+\n+    if (current_bucket == nullptr)\n+        return nullptr;\n+\n+    size_t bucket_idx = current_bucket->idx;\n+\n+    if (hash_join)\n+    {\n+        auto right_blocks = hash_join->releaseJoinedBlocks();\n+        Blocks blocks = JoinCommon::scatterBlockByHash(right_key_names, right_blocks, buckets.size());\n+\n+        for (size_t i = 0; i < blocks.size(); ++i)\n+        {\n+            if (blocks[i].rows() == 0 || i == bucket_idx)\n+                continue;\n+\n+            if (i < bucket_idx)\n+                throw Exception(ErrorCodes::LOGICAL_ERROR, \"Unexpected bucket index {} when current bucket is {}\", i, bucket_idx);\n+            buckets[i]->addRightBlock(blocks[i]);\n+        }\n+    }\n+\n+    hash_join = makeInMemoryJoin();\n+\n+    for (bucket_idx = bucket_idx + 1; bucket_idx < buckets.size(); ++bucket_idx)\n+    {\n+        current_bucket = buckets[bucket_idx].get();\n+        if (current_bucket->finished() || current_bucket->empty())\n+        {\n+            LOG_TRACE(log, \"Skipping {} {} bucket {}\",\n+                current_bucket->finished() ? \"finished\" : \"\",\n+                current_bucket->empty() ? \"empty\" : \"\",\n+                bucket_idx);\n+            continue;\n+        }\n+\n+        auto right_reader = current_bucket->startJoining();\n+        size_t num_rows = 0; /// count rows that were written and rehashed\n+        while (Block block = right_reader.read())\n+        {\n+            num_rows += block.rows();\n+            addJoinedBlockImpl(std::move(block));\n+        }\n+\n+        LOG_TRACE(log, \"Loaded bucket {} with {}(/{}) rows\",\n+            bucket_idx, hash_join->getTotalRowCount(), num_rows);\n+\n+        return std::make_unique<DelayedBlocks>(current_bucket->idx, buckets, hash_join, left_key_names, right_key_names);\n+    }\n+\n+    LOG_TRACE(log, \"Finished loading all buckets\");\n+\n+    current_bucket = nullptr;\n+    return nullptr;\n+}\n+\n+GraceHashJoin::InMemoryJoinPtr GraceHashJoin::makeInMemoryJoin()\n+{\n+    return std::make_unique<InMemoryJoin>(table_join, right_sample_block, any_take_last_row);\n+}\n+\n+void GraceHashJoin::addJoinedBlockImpl(Block block)\n+{\n+    Buckets buckets_snapshot = getCurrentBuckets();\n+    Blocks blocks = JoinCommon::scatterBlockByHash(right_key_names, block, buckets_snapshot.size());\n+    size_t bucket_index = current_bucket->idx;\n+\n+    // Add block to the in-memory join\n+    if (blocks[bucket_index].rows() > 0)\n+    {\n+        std::lock_guard lock(hash_join_mutex);\n+\n+        hash_join->addJoinedBlock(blocks[bucket_index], /* check_limits = */ false);\n+        bool overflow = !fitsInMemory();\n+\n+        if (overflow)\n+        {\n+            auto right_blocks = hash_join->releaseJoinedBlocks();\n+            right_blocks.pop_back();\n+\n+            for (const auto & right_block : right_blocks)\n+                blocks.push_back(right_block);\n+        }\n+\n+        while (overflow)\n+        {\n+            buckets_snapshot = rehashBuckets(buckets_snapshot.size() * 2);\n+\n+            blocks = JoinCommon::scatterBlockByHash(right_key_names, blocks, buckets_snapshot.size());\n+            hash_join = makeInMemoryJoin();\n+            hash_join->addJoinedBlock(blocks[bucket_index], /* check_limits = */ false);\n+            overflow = !fitsInMemory();\n+        }\n+        blocks[bucket_index].clear();\n+    }\n+\n+    flushBlocksToBuckets(blocks, buckets_snapshot);\n+}\n+\n+size_t GraceHashJoin::getNumBuckets() const\n+{\n+    std::shared_lock lock(rehash_mutex);\n+    return buckets.size();\n+}\n+\n+GraceHashJoin::Buckets GraceHashJoin::getCurrentBuckets() const\n+{\n+    std::shared_lock lock(rehash_mutex);\n+    return buckets;\n+}\n+\n+}\ndiff --git a/src/Interpreters/GraceHashJoin.h b/src/Interpreters/GraceHashJoin.h\nnew file mode 100644\nindex 000000000000..f4e75f142f3f\n--- /dev/null\n+++ b/src/Interpreters/GraceHashJoin.h\n@@ -0,0 +1,142 @@\n+#pragma once\n+\n+#include <Interpreters/Context_fwd.h>\n+#include <Interpreters/IJoin.h>\n+#include <Interpreters/TemporaryDataOnDisk.h>\n+\n+#include <Core/Block.h>\n+\n+#include <Common/MultiVersion.h>\n+\n+#include <mutex>\n+\n+namespace DB\n+{\n+\n+class TableJoin;\n+class HashJoin;\n+\n+/**\n+ * Efficient and highly parallel implementation of external memory JOIN based on HashJoin.\n+ * Supports most of the JOIN modes, except CROSS and ASOF.\n+ *\n+ * The joining algorithm consists of three stages:\n+ *\n+ * 1) During the first stage we accumulate blocks of the right table via @addJoinedBlock.\n+ * Each input block is split into multiple buckets based on the hash of the row join keys.\n+ * The first bucket is added to the in-memory HashJoin, and the remaining buckets are written to disk for further processing.\n+ * When the size of HashJoin exceeds the limits, we double the number of buckets.\n+ * There can be multiple threads calling addJoinedBlock, just like @ConcurrentHashJoin.\n+ *\n+ * 2) At the second stage we process left table blocks via @joinBlock.\n+ * Again, each input block is split into multiple buckets by hash.\n+ * The first bucket is joined in-memory via HashJoin::joinBlock, and the remaining buckets are written to the disk.\n+ *\n+ * 3) When the last thread reading left table block finishes, the last stage begins.\n+ * Each @DelayedJoinedBlocksTransform calls repeatedly @getDelayedBlocks until there are no more unfinished buckets left.\n+ * Inside @getDelayedBlocks we select the next unprocessed bucket, load right table blocks from disk into in-memory HashJoin,\n+ * And then join them with left table blocks.\n+ *\n+ * After joining the left table blocks, we can load non-joined rows from the right table for RIGHT/FULL JOINs.\n+ * Note that non-joined rows are processed in multiple threads, unlike HashJoin/ConcurrentHashJoin/MergeJoin.\n+ */\n+class GraceHashJoin final : public IJoin\n+{\n+    class FileBucket;\n+    class DelayedBlocks;\n+    using InMemoryJoin = HashJoin;\n+\n+    using InMemoryJoinPtr = std::shared_ptr<InMemoryJoin>;\n+\n+public:\n+    using BucketPtr = std::shared_ptr<FileBucket>;\n+    using Buckets = std::vector<BucketPtr>;\n+\n+    GraceHashJoin(\n+        ContextPtr context_, std::shared_ptr<TableJoin> table_join_,\n+        const Block & left_sample_block_, const Block & right_sample_block_,\n+        TemporaryDataOnDiskScopePtr tmp_data_,\n+        bool any_take_last_row_ = false);\n+\n+    ~GraceHashJoin() override;\n+\n+    const TableJoin & getTableJoin() const override { return *table_join; }\n+\n+    void initialize(const Block & sample_block) override;\n+\n+    bool addJoinedBlock(const Block & block, bool check_limits) override;\n+    void checkTypesOfKeys(const Block & block) const override;\n+    void joinBlock(Block & block, std::shared_ptr<ExtraBlock> & not_processed) override;\n+\n+    void setTotals(const Block & block) override;\n+\n+    size_t getTotalRowCount() const override;\n+    size_t getTotalByteCount() const override;\n+    bool alwaysReturnsEmptySet() const override;\n+\n+    bool supportParallelJoin() const override { return true; }\n+    bool supportTotals() const override { return false; }\n+\n+    IBlocksStreamPtr\n+    getNonJoinedBlocks(const Block & left_sample_block, const Block & result_sample_block, UInt64 max_block_size) const override;\n+\n+    /// Open iterator over joined blocks.\n+    /// Must be called after all @joinBlock calls.\n+    IBlocksStreamPtr getDelayedBlocks() override;\n+    bool hasDelayedBlocks() const override { return true; }\n+\n+    static bool isSupported(const std::shared_ptr<TableJoin> & table_join);\n+\n+private:\n+    void initBuckets();\n+    /// Create empty join for in-memory processing.\n+    InMemoryJoinPtr makeInMemoryJoin();\n+\n+    /// Add right table block to the @join. Calls @rehash on overflow.\n+    void addJoinedBlockImpl(Block block);\n+\n+    /// Check that @join satisifes limits on rows/bytes in @table_join.\n+    bool fitsInMemory() const;\n+\n+    /// Create new bucket at the end of @destination.\n+    void addBucket(Buckets & destination);\n+\n+    /// Increase number of buckets to match desired_size.\n+    /// Called when HashJoin in-memory table for one bucket exceeds the limits.\n+    ///\n+    /// NB: after @rehashBuckets there may be rows that are written to the buckets that they do not belong to.\n+    /// It is fine; these rows will be written to the corresponding buckets during the third stage.\n+    Buckets rehashBuckets(size_t to_size);\n+\n+    /// Perform some bookkeeping after all calls to @joinBlock.\n+    void startReadingDelayedBlocks();\n+\n+    size_t getNumBuckets() const;\n+    Buckets getCurrentBuckets() const;\n+\n+    Poco::Logger * log;\n+    ContextPtr context;\n+    std::shared_ptr<TableJoin> table_join;\n+    Block left_sample_block;\n+    Block right_sample_block;\n+    Block output_sample_block;\n+    bool any_take_last_row;\n+    const size_t max_num_buckets;\n+    size_t max_block_size;\n+\n+    Names left_key_names;\n+    Names right_key_names;\n+\n+    TemporaryDataOnDiskPtr tmp_data;\n+\n+    Buckets buckets;\n+    mutable std::shared_mutex rehash_mutex;\n+\n+    FileBucket * current_bucket = nullptr;\n+    mutable std::mutex current_bucket_mutex;\n+\n+    InMemoryJoinPtr hash_join;\n+    mutable std::mutex hash_join_mutex;\n+};\n+\n+}\ndiff --git a/src/Interpreters/HashJoin.cpp b/src/Interpreters/HashJoin.cpp\nindex 41c7c28a6fa5..6f1634b4e39d 100644\n--- a/src/Interpreters/HashJoin.cpp\n+++ b/src/Interpreters/HashJoin.cpp\n@@ -3,6 +3,7 @@\n #include <unordered_map>\n #include <vector>\n \n+#include <Common/StackTrace.h>\n #include <Common/logger_useful.h>\n \n #include <Columns/ColumnConst.h>\n@@ -225,7 +226,6 @@ HashJoin::HashJoin(std::shared_ptr<TableJoin> table_join_, const Block & right_s\n     , log(&Poco::Logger::get(\"HashJoin\"))\n {\n     LOG_DEBUG(log, \"HashJoin. Datatype: {}, kind: {}, strictness: {}\", data->type, kind, strictness);\n-    LOG_DEBUG(log, \"Right sample block: {}\", right_sample_block.dumpStructure());\n \n     if (isCrossOrComma(kind))\n     {\n@@ -249,15 +249,6 @@ HashJoin::HashJoin(std::shared_ptr<TableJoin> table_join_, const Block & right_s\n         sample_block_with_columns_to_add = right_table_keys = materializeBlock(right_sample_block);\n     }\n \n-    LOG_TRACE(log, \"Columns to add: [{}], required right [{}]\",\n-              sample_block_with_columns_to_add.dumpStructure(), fmt::join(required_right_keys.getNames(), \", \"));\n-    {\n-        std::vector<String> log_text;\n-        for (const auto & clause : table_join->getClauses())\n-            log_text.push_back(clause.formatDebug());\n-        LOG_TRACE(log, \"Joining on: {}\", fmt::join(log_text, \" | \"));\n-    }\n-\n     JoinCommon::convertToFullColumnsInplace(right_table_keys);\n     initRightBlockStructure(data->sample_block);\n \n@@ -644,7 +635,10 @@ void HashJoin::initRightBlockStructure(Block & saved_block_sample)\n \n     bool multiple_disjuncts = !table_join->oneDisjunct();\n     /// We could remove key columns for LEFT | INNER HashJoin but we should keep them for JoinSwitcher (if any).\n-    bool save_key_columns = table_join->isEnabledAlgorithm(JoinAlgorithm::AUTO) || isRightOrFull(kind) || multiple_disjuncts;\n+    bool save_key_columns = table_join->isEnabledAlgorithm(JoinAlgorithm::AUTO) ||\n+                            table_join->isEnabledAlgorithm(JoinAlgorithm::GRACE_HASH) ||\n+                            isRightOrFull(kind) ||\n+                            multiple_disjuncts;\n     if (save_key_columns)\n     {\n         saved_block_sample = right_table_keys.cloneEmpty();\n@@ -887,7 +881,8 @@ class AddedColumns\n     static void assertBlockEqualsStructureUpToLowCard(const Block & lhs_block, const Block & rhs_block)\n     {\n         if (lhs_block.columns() != rhs_block.columns())\n-            throw Exception(\"Different number of columns in blocks\", ErrorCodes::LOGICAL_ERROR);\n+            throw Exception(ErrorCodes::LOGICAL_ERROR, \"Different number of columns in blocks [{}] and [{}]\",\n+                lhs_block.dumpStructure(), rhs_block.dumpStructure());\n \n         for (size_t i = 0; i < lhs_block.columns(); ++i)\n         {\n@@ -1684,6 +1679,9 @@ void HashJoin::checkTypesOfKeys(const Block & block) const\n \n void HashJoin::joinBlock(Block & block, ExtraBlockPtr & not_processed)\n {\n+    if (data->released)\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Cannot join after data has been released\");\n+\n     for (const auto & onexpr : table_join->getClauses())\n     {\n         auto cond_column_name = onexpr.condColumnNames();\n@@ -1951,16 +1949,13 @@ class NotJoinedHash final : public NotJoinedBlocks::RightColumnsFiller\n     }\n };\n \n-std::shared_ptr<NotJoinedBlocks> HashJoin::getNonJoinedBlocks(const Block & left_sample_block,\n+IBlocksStreamPtr HashJoin::getNonJoinedBlocks(const Block & left_sample_block,\n                                                               const Block & result_sample_block,\n                                                               UInt64 max_block_size) const\n {\n-    if (table_join->strictness() == JoinStrictness::Asof ||\n-        table_join->strictness() == JoinStrictness::Semi ||\n-        !isRightOrFull(table_join->kind()))\n-    {\n+    if (!JoinCommon::hasNonJoinedBlocks(*table_join))\n         return {};\n-    }\n+\n     bool multiple_disjuncts = !table_join->oneDisjunct();\n \n     if (multiple_disjuncts)\n@@ -1968,7 +1963,7 @@ std::shared_ptr<NotJoinedBlocks> HashJoin::getNonJoinedBlocks(const Block & left\n         /// ... calculate `left_columns_count` ...\n         size_t left_columns_count = left_sample_block.columns();\n         auto non_joined = std::make_unique<NotJoinedHash<true>>(*this, max_block_size);\n-        return std::make_shared<NotJoinedBlocks>(std::move(non_joined), result_sample_block, left_columns_count, table_join->leftToRightKeyRemap());\n+        return std::make_unique<NotJoinedBlocks>(std::move(non_joined), result_sample_block, left_columns_count, table_join->leftToRightKeyRemap());\n \n     }\n     else\n@@ -1976,7 +1971,7 @@ std::shared_ptr<NotJoinedBlocks> HashJoin::getNonJoinedBlocks(const Block & left\n         size_t left_columns_count = left_sample_block.columns();\n         assert(left_columns_count == result_sample_block.columns() - required_right_keys.columns() - sample_block_with_columns_to_add.columns());\n         auto non_joined = std::make_unique<NotJoinedHash<false>>(*this, max_block_size);\n-        return std::make_shared<NotJoinedBlocks>(std::move(non_joined), result_sample_block, left_columns_count, table_join->leftToRightKeyRemap());\n+        return std::make_unique<NotJoinedBlocks>(std::move(non_joined), result_sample_block, left_columns_count, table_join->leftToRightKeyRemap());\n     }\n }\n \n@@ -1998,6 +1993,41 @@ void HashJoin::reuseJoinedData(const HashJoin & join)\n     }\n }\n \n+BlocksList HashJoin::releaseJoinedBlocks()\n+{\n+    BlocksList right_blocks = std::move(data->blocks);\n+    data->released = true;\n+    BlocksList restored_blocks;\n+\n+    /// names to positions optimization\n+    std::vector<size_t> positions;\n+    std::vector<bool> is_nullable;\n+    if (!right_blocks.empty())\n+    {\n+        positions.reserve(right_sample_block.columns());\n+        const Block & tmp_block = *right_blocks.begin();\n+        for (const auto & sample_column : right_sample_block)\n+        {\n+            positions.emplace_back(tmp_block.getPositionByName(sample_column.name));\n+            is_nullable.emplace_back(JoinCommon::isNullable(sample_column.type));\n+        }\n+    }\n+\n+    for (Block & saved_block : right_blocks)\n+    {\n+        Block restored_block;\n+        for (size_t i = 0; i < positions.size(); ++i)\n+        {\n+            auto & column = saved_block.getByPosition(positions[i]);\n+            restored_block.insert(correctNullability(std::move(column), is_nullable[i]));\n+        }\n+        restored_blocks.emplace_back(std::move(restored_block));\n+    }\n+\n+    return restored_blocks;\n+}\n+\n+\n const ColumnWithTypeAndName & HashJoin::rightAsofKeyColumn() const\n {\n     /// It should be nullable when right side is nullable\ndiff --git a/src/Interpreters/HashJoin.h b/src/Interpreters/HashJoin.h\nindex 587fed9b4a61..5ea47823b69e 100644\n--- a/src/Interpreters/HashJoin.h\n+++ b/src/Interpreters/HashJoin.h\n@@ -2,7 +2,6 @@\n \n #include <variant>\n #include <optional>\n-#include <shared_mutex>\n #include <deque>\n #include <vector>\n \n@@ -187,7 +186,7 @@ class HashJoin : public IJoin\n       * Use only after all calls to joinBlock was done.\n       * left_sample_block is passed without account of 'use_nulls' setting (columns will be converted to Nullable inside).\n       */\n-    std::shared_ptr<NotJoinedBlocks> getNonJoinedBlocks(\n+    IBlocksStreamPtr getNonJoinedBlocks(\n         const Block & left_sample_block, const Block & result_sample_block, UInt64 max_block_size) const override;\n \n     /// Number of keys in all built JOIN maps.\n@@ -336,6 +335,8 @@ class HashJoin : public IJoin\n \n         /// Additional data - strings for string keys and continuation elements of single-linked lists of references to rows.\n         Arena pool;\n+\n+        bool released = false;\n     };\n \n     using RightTableDataPtr = std::shared_ptr<RightTableData>;\n@@ -350,10 +351,13 @@ class HashJoin : public IJoin\n     void reuseJoinedData(const HashJoin & join);\n \n     RightTableDataPtr getJoinedData() const { return data; }\n+    BlocksList releaseJoinedBlocks();\n \n     bool isUsed(size_t off) const { return used_flags.getUsedSafe(off); }\n     bool isUsed(const Block * block_ptr, size_t row_idx) const { return used_flags.getUsedSafe(block_ptr, row_idx); }\n \n+    void debugKeys() const;\n+\n private:\n     template<bool> friend class NotJoinedHash;\n \ndiff --git a/src/Interpreters/IJoin.h b/src/Interpreters/IJoin.h\nindex b699988e926c..69d69ce30a68 100644\n--- a/src/Interpreters/IJoin.h\n+++ b/src/Interpreters/IJoin.h\n@@ -7,17 +7,21 @@\n #include <Core/Block.h>\n #include <Columns/IColumn.h>\n #include <Common/Exception.h>\n+#include <Common/logger_useful.h>\n \n namespace DB\n {\n \n-class Block;\n-\n struct ExtraBlock;\n using ExtraBlockPtr = std::shared_ptr<ExtraBlock>;\n \n class TableJoin;\n class NotJoinedBlocks;\n+class IBlocksStream;\n+using IBlocksStreamPtr = std::shared_ptr<IBlocksStream>;\n+\n+class IJoin;\n+using JoinPtr = std::shared_ptr<IJoin>;\n \n enum class JoinPipelineType\n {\n@@ -51,6 +55,12 @@ class IJoin\n     /// @returns false, if some limit was exceeded and you should not insert more data.\n     virtual bool addJoinedBlock(const Block & block, bool check_limits = true) = 0; /// NOLINT\n \n+    /* Some initialization may be required before joinBlock() call.\n+     * It's better to done in in constructor, but left block exact structure is not known at that moment.\n+     * TODO: pass correct left block sample to the constructor.\n+     */\n+    virtual void initialize(const Block & /* left_sample_block */) {}\n+\n     virtual void checkTypesOfKeys(const Block & block) const = 0;\n \n     /// Join the block with data from left hand of JOIN to the right hand data (that was previously built by calls to addJoinedBlock).\n@@ -77,15 +87,44 @@ class IJoin\n \n     // That can run FillingRightJoinSideTransform parallelly\n     virtual bool supportParallelJoin() const { return false; }\n+    virtual bool supportTotals() const { return true; }\n+\n+    /// Peek next stream of delayed joined blocks.\n+    virtual IBlocksStreamPtr getDelayedBlocks() { return nullptr; }\n+    virtual bool hasDelayedBlocks() const { return false; }\n \n-    virtual std::shared_ptr<NotJoinedBlocks>\n-    getNonJoinedBlocks(const Block & left_sample_block, const Block & result_sample_block, UInt64 max_block_size) const = 0;\n+    virtual IBlocksStreamPtr\n+        getNonJoinedBlocks(const Block & left_sample_block, const Block & result_sample_block, UInt64 max_block_size) const = 0;\n \n private:\n     Block totals;\n };\n \n+class IBlocksStream\n+{\n+public:\n+    /// Returns empty block on EOF\n+    Block next()\n+    {\n+        if (finished)\n+            return {};\n+\n+        if (Block res = nextImpl())\n+            return res;\n \n-using JoinPtr = std::shared_ptr<IJoin>;\n+        finished = true;\n+        return {};\n+    }\n+\n+    virtual ~IBlocksStream() = default;\n+\n+    bool isFinished() const { return finished; }\n+\n+protected:\n+    virtual Block nextImpl() = 0;\n+\n+    std::atomic_bool finished{false};\n+\n+};\n \n }\ndiff --git a/src/Interpreters/JoinSwitcher.cpp b/src/Interpreters/JoinSwitcher.cpp\nindex 5d5a9b278254..996fd1e4ac77 100644\n--- a/src/Interpreters/JoinSwitcher.cpp\n+++ b/src/Interpreters/JoinSwitcher.cpp\n@@ -7,16 +7,6 @@\n namespace DB\n {\n \n-static ColumnWithTypeAndName correctNullability(ColumnWithTypeAndName && column, bool nullable)\n-{\n-    if (nullable)\n-        JoinCommon::convertColumnToNullable(column);\n-    else\n-        JoinCommon::removeColumnNullability(column);\n-\n-    return std::move(column);\n-}\n-\n JoinSwitcher::JoinSwitcher(std::shared_ptr<TableJoin> table_join_, const Block & right_sample_block_)\n     : limits(table_join_->sizeLimits())\n     , switched(false)\n@@ -43,45 +33,25 @@ bool JoinSwitcher::addJoinedBlock(const Block & block, bool)\n     size_t bytes = join->getTotalByteCount();\n \n     if (!limits.softCheck(rows, bytes))\n-        switchJoin();\n+        return switchJoin();\n \n     return true;\n }\n \n-void JoinSwitcher::switchJoin()\n+bool JoinSwitcher::switchJoin()\n {\n-    std::shared_ptr<HashJoin::RightTableData> joined_data = static_cast<const HashJoin &>(*join).getJoinedData();\n-    BlocksList right_blocks = std::move(joined_data->blocks);\n+    HashJoin * hash_join = assert_cast<HashJoin *>(join.get());\n+    BlocksList right_blocks = hash_join->releaseJoinedBlocks();\n \n-    /// Destroy old join & create new one. Early destroy for memory saving.\n+    /// Destroy old join & create new one.\n     join = std::make_shared<MergeJoin>(table_join, right_sample_block);\n \n-    /// names to positions optimization\n-    std::vector<size_t> positions;\n-    std::vector<bool> is_nullable;\n-    if (!right_blocks.empty())\n-    {\n-        positions.reserve(right_sample_block.columns());\n-        const Block & tmp_block = *right_blocks.begin();\n-        for (const auto & sample_column : right_sample_block)\n-        {\n-            positions.emplace_back(tmp_block.getPositionByName(sample_column.name));\n-            is_nullable.emplace_back(JoinCommon::isNullable(sample_column.type));\n-        }\n-    }\n-\n-    for (Block & saved_block : right_blocks)\n-    {\n-        Block restored_block;\n-        for (size_t i = 0; i < positions.size(); ++i)\n-        {\n-            auto & column = saved_block.getByPosition(positions[i]);\n-            restored_block.insert(correctNullability(std::move(column), is_nullable[i]));\n-        }\n-        join->addJoinedBlock(restored_block);\n-    }\n+    bool success = true;\n+    for (const Block & saved_block : right_blocks)\n+        success = success && join->addJoinedBlock(saved_block);\n \n     switched = true;\n+    return success;\n }\n \n }\ndiff --git a/src/Interpreters/JoinSwitcher.h b/src/Interpreters/JoinSwitcher.h\nindex 30115710e225..eec4787037d9 100644\n--- a/src/Interpreters/JoinSwitcher.h\n+++ b/src/Interpreters/JoinSwitcher.h\n@@ -60,12 +60,22 @@ class JoinSwitcher : public IJoin\n         return join->alwaysReturnsEmptySet();\n     }\n \n-    std::shared_ptr<NotJoinedBlocks>\n+    IBlocksStreamPtr\n     getNonJoinedBlocks(const Block & left_sample_block, const Block & result_sample_block, UInt64 max_block_size) const override\n     {\n         return join->getNonJoinedBlocks(left_sample_block, result_sample_block, max_block_size);\n     }\n \n+    IBlocksStreamPtr getDelayedBlocks() override\n+    {\n+        return join->getDelayedBlocks();\n+    }\n+\n+    bool hasDelayedBlocks() const override\n+    {\n+        return join->hasDelayedBlocks();\n+    }\n+\n private:\n     JoinPtr join;\n     SizeLimits limits;\n@@ -76,7 +86,7 @@ class JoinSwitcher : public IJoin\n \n     /// Change join-in-memory to join-on-disk moving right hand JOIN data from one to another.\n     /// Throws an error if join-on-disk do not support JOIN kind or strictness.\n-    void switchJoin();\n+    bool switchJoin();\n };\n \n }\ndiff --git a/src/Interpreters/JoinUtils.cpp b/src/Interpreters/JoinUtils.cpp\nindex 59e2475a9b2a..d17d3c0d44eb 100644\n--- a/src/Interpreters/JoinUtils.cpp\n+++ b/src/Interpreters/JoinUtils.cpp\n@@ -14,6 +14,11 @@\n \n #include <IO/WriteHelpers.h>\n \n+#include <Common/HashTable/Hash.h>\n+#include <Common/WeakHash.h>\n+\n+#include <base/FnTraits.h>\n+\n namespace DB\n {\n \n@@ -573,6 +578,111 @@ void splitAdditionalColumns(const Names & key_names, const Block & sample_block,\n     }\n }\n \n+template <Fn<size_t(size_t)> Sharder>\n+static IColumn::Selector hashToSelector(const WeakHash32 & hash, Sharder sharder)\n+{\n+    const auto & hashes = hash.getData();\n+    size_t num_rows = hashes.size();\n+\n+    IColumn::Selector selector(num_rows);\n+    for (size_t i = 0; i < num_rows; ++i)\n+        selector[i] = sharder(intHashCRC32(hashes[i]));\n+    return selector;\n+}\n+\n+template <Fn<size_t(size_t)> Sharder>\n+static Blocks scatterBlockByHashImpl(const Strings & key_columns_names, const Block & block, size_t num_shards, Sharder sharder)\n+{\n+    size_t num_rows = block.rows();\n+    size_t num_cols = block.columns();\n+\n+    /// Use non-standard initial value so as not to degrade hash map performance inside shard that uses the same CRC32 algorithm.\n+    WeakHash32 hash(num_rows);\n+    for (const auto & key_name : key_columns_names)\n+    {\n+        ColumnPtr key_col = materializeColumn(block, key_name);\n+        key_col->updateWeakHash32(hash);\n+    }\n+    auto selector = hashToSelector(hash, sharder);\n+\n+    Blocks result;\n+    result.reserve(num_shards);\n+    for (size_t i = 0; i < num_shards; ++i)\n+    {\n+        result.emplace_back(block.cloneEmpty());\n+    }\n+\n+    for (size_t i = 0; i < num_cols; ++i)\n+    {\n+        auto dispatched_columns = block.getByPosition(i).column->scatter(num_shards, selector);\n+        assert(result.size() == dispatched_columns.size());\n+        for (size_t block_index = 0; block_index < num_shards; ++block_index)\n+        {\n+            result[block_index].getByPosition(i).column = std::move(dispatched_columns[block_index]);\n+        }\n+    }\n+    return result;\n+}\n+\n+static Blocks scatterBlockByHashPow2(const Strings & key_columns_names, const Block & block, size_t num_shards)\n+{\n+    size_t mask = num_shards - 1;\n+    return scatterBlockByHashImpl(key_columns_names, block, num_shards, [mask](size_t hash) { return hash & mask; });\n+}\n+\n+static Blocks scatterBlockByHashGeneric(const Strings & key_columns_names, const Block & block, size_t num_shards)\n+{\n+    return scatterBlockByHashImpl(key_columns_names, block, num_shards, [num_shards](size_t hash) { return hash % num_shards; });\n+}\n+\n+Blocks scatterBlockByHash(const Strings & key_columns_names, const Block & block, size_t num_shards)\n+{\n+    if (num_shards == 0)\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"Number of shards must be positive\");\n+    UNUSED(scatterBlockByHashPow2);\n+    // if (likely(isPowerOf2(num_shards)))\n+    //     return scatterBlockByHashPow2(key_columns_names, block, num_shards);\n+    return scatterBlockByHashGeneric(key_columns_names, block, num_shards);\n+}\n+\n+template<typename T>\n+static Blocks scatterBlockByHashForList(const Strings & key_columns_names, const T & blocks, size_t num_shards)\n+{\n+    std::vector<Blocks> scattered_blocks(num_shards);\n+    for (const auto & block : blocks)\n+    {\n+        if (block.rows() == 0)\n+            continue;\n+        auto scattered = scatterBlockByHash(key_columns_names, block, num_shards);\n+        for (size_t i = 0; i < num_shards; ++i)\n+            scattered_blocks[i].emplace_back(std::move(scattered[i]));\n+    }\n+\n+    Blocks result;\n+    result.reserve(num_shards);\n+    for (size_t i = 0; i < num_shards; ++i)\n+    {\n+        result.emplace_back(concatenateBlocks(scattered_blocks[i]));\n+    }\n+    return result;\n+}\n+\n+Blocks scatterBlockByHash(const Strings & key_columns_names, const Blocks & blocks, size_t num_shards)\n+{\n+    return scatterBlockByHashForList(key_columns_names, blocks, num_shards);\n+}\n+\n+Blocks scatterBlockByHash(const Strings & key_columns_names, const BlocksList & blocks, size_t num_shards)\n+{\n+    return scatterBlockByHashForList(key_columns_names, blocks, num_shards);\n+}\n+\n+bool hasNonJoinedBlocks(const TableJoin & table_join)\n+{\n+    return table_join.strictness() != JoinStrictness::Asof && table_join.strictness() != JoinStrictness::Semi\n+        && isRightOrFull(table_join.kind());\n+}\n+\n ColumnPtr filterWithBlanks(ColumnPtr src_column, const IColumn::Filter & filter, bool inverse_filter)\n {\n     ColumnPtr column = src_column->convertToFullColumnIfConst();\n@@ -735,7 +845,7 @@ void NotJoinedBlocks::copySameKeys(Block & block) const\n     }\n }\n \n-Block NotJoinedBlocks::read()\n+Block NotJoinedBlocks::nextImpl()\n {\n     Block result_block = result_sample_block.cloneEmpty();\n     {\ndiff --git a/src/Interpreters/JoinUtils.h b/src/Interpreters/JoinUtils.h\nindex 2e26ab782a10..bcff6e60a9ad 100644\n--- a/src/Interpreters/JoinUtils.h\n+++ b/src/Interpreters/JoinUtils.h\n@@ -106,13 +106,19 @@ void splitAdditionalColumns(const Names & key_names, const Block & sample_block,\n \n void changeLowCardinalityInplace(ColumnWithTypeAndName & column);\n \n+Blocks scatterBlockByHash(const Strings & key_columns_names, const Block & block, size_t num_shards);\n+Blocks scatterBlockByHash(const Strings & key_columns_names, const Blocks & blocks, size_t num_shards);\n+Blocks scatterBlockByHash(const Strings & key_columns_names, const BlocksList & blocks, size_t num_shards);\n+\n+bool hasNonJoinedBlocks(const TableJoin & table_join);\n+\n /// Insert default values for rows marked in filter\n ColumnPtr filterWithBlanks(ColumnPtr src_column, const IColumn::Filter & filter, bool inverse_filter = false);\n \n }\n \n /// Creates result from right table data in RIGHT and FULL JOIN when keys are not present in left table.\n-class NotJoinedBlocks final\n+class NotJoinedBlocks final : public IBlocksStream\n {\n public:\n     using LeftToRightKeyRemap = std::unordered_map<String, String>;\n@@ -134,7 +140,7 @@ class NotJoinedBlocks final\n               size_t left_columns_count,\n               const LeftToRightKeyRemap & left_to_right_key_remap);\n \n-    Block read();\n+    Block nextImpl() override;\n \n private:\n     void extractColumnChanges(size_t right_pos, size_t result_pos);\ndiff --git a/src/Interpreters/MergeJoin.cpp b/src/Interpreters/MergeJoin.cpp\nindex bb9c7bf3f906..191372cd5454 100644\n--- a/src/Interpreters/MergeJoin.cpp\n+++ b/src/Interpreters/MergeJoin.cpp\n@@ -1114,7 +1114,7 @@ class NotJoinedMerge final : public NotJoinedBlocks::RightColumnsFiller\n };\n \n \n-std::shared_ptr<NotJoinedBlocks> MergeJoin::getNonJoinedBlocks(\n+IBlocksStreamPtr MergeJoin::getNonJoinedBlocks(\n     const Block & left_sample_block, const Block & result_sample_block, UInt64 max_block_size) const\n {\n     if (table_join->strictness() == JoinStrictness::All && (is_right || is_full))\n@@ -1122,7 +1122,7 @@ std::shared_ptr<NotJoinedBlocks> MergeJoin::getNonJoinedBlocks(\n         size_t left_columns_count = left_sample_block.columns();\n         assert(left_columns_count == result_sample_block.columns() - right_columns_to_add.columns());\n         auto non_joined = std::make_unique<NotJoinedMerge>(*this, max_block_size);\n-        return std::make_shared<NotJoinedBlocks>(std::move(non_joined), result_sample_block, left_columns_count, table_join->leftToRightKeyRemap());\n+        return std::make_unique<NotJoinedBlocks>(std::move(non_joined), result_sample_block, left_columns_count, table_join->leftToRightKeyRemap());\n     }\n     return nullptr;\n }\ndiff --git a/src/Interpreters/MergeJoin.h b/src/Interpreters/MergeJoin.h\nindex 3ea15d142406..770ca0409bf2 100644\n--- a/src/Interpreters/MergeJoin.h\n+++ b/src/Interpreters/MergeJoin.h\n@@ -35,7 +35,7 @@ class MergeJoin : public IJoin\n     /// Has to be called only after setTotals()/mergeRightBlocks()\n     bool alwaysReturnsEmptySet() const override { return (is_right || is_inner) && min_max_right_blocks.empty(); }\n \n-    std::shared_ptr<NotJoinedBlocks> getNonJoinedBlocks(const Block & left_sample_block, const Block & result_sample_block, UInt64 max_block_size) const override;\n+    IBlocksStreamPtr getNonJoinedBlocks(const Block & left_sample_block, const Block & result_sample_block, UInt64 max_block_size) const override;\n \n     static bool isSupported(const std::shared_ptr<TableJoin> & table_join);\n \ndiff --git a/src/Planner/PlannerJoinTree.cpp b/src/Planner/PlannerJoinTree.cpp\nindex 0566b579be12..2fd469986ecf 100644\n--- a/src/Planner/PlannerJoinTree.cpp\n+++ b/src/Planner/PlannerJoinTree.cpp\n@@ -494,7 +494,8 @@ QueryPlan buildQueryPlanForJoinNode(QueryTreeNodePtr join_tree_node,\n         }\n     }\n \n-    auto left_table_names = left_plan.getCurrentDataStream().header.getNames();\n+    const Block & left_header = left_plan.getCurrentDataStream().header;\n+    auto left_table_names = left_header.getNames();\n     NameSet left_table_names_set(left_table_names.begin(), left_table_names.end());\n \n     auto columns_from_joined_table = right_plan.getCurrentDataStream().header.getNamesAndTypesList();\n@@ -506,7 +507,8 @@ QueryPlan buildQueryPlanForJoinNode(QueryTreeNodePtr join_tree_node,\n             table_join->addJoinedColumn(column_from_joined_table);\n     }\n \n-    auto join_algorithm = chooseJoinAlgorithm(table_join, join_node.getRightTableExpression(), right_plan.getCurrentDataStream().header, planner_context);\n+    const Block & right_header = right_plan.getCurrentDataStream().header;\n+    auto join_algorithm = chooseJoinAlgorithm(table_join, join_node.getRightTableExpression(), left_header, right_header, planner_context);\n \n     auto result_plan = QueryPlan();\n \ndiff --git a/src/Planner/PlannerJoins.cpp b/src/Planner/PlannerJoins.cpp\nindex b59dccc92c21..0a10a20b5eb9 100644\n--- a/src/Planner/PlannerJoins.cpp\n+++ b/src/Planner/PlannerJoins.cpp\n@@ -34,6 +34,7 @@\n #include <Interpreters/DirectJoin.h>\n #include <Interpreters/JoinSwitcher.h>\n #include <Interpreters/ArrayJoinAction.h>\n+#include <Interpreters/GraceHashJoin.h>\n \n #include <Planner/PlannerActionsVisitor.h>\n #include <Planner/PlannerContext.h>\n@@ -662,6 +663,7 @@ std::shared_ptr<DirectKeyValueJoin> tryDirectJoin(const std::shared_ptr<TableJoi\n \n std::shared_ptr<IJoin> chooseJoinAlgorithm(std::shared_ptr<TableJoin> & table_join,\n     const QueryTreeNodePtr & right_table_expression,\n+    const Block & left_table_expression_header,\n     const Block & right_table_expression_header,\n     const PlannerContextPtr & planner_context)\n {\n@@ -720,6 +722,20 @@ std::shared_ptr<IJoin> chooseJoinAlgorithm(std::shared_ptr<TableJoin> & table_jo\n             return std::make_shared<FullSortingMergeJoin>(table_join, right_table_expression_header);\n     }\n \n+    if (table_join->isEnabledAlgorithm(JoinAlgorithm::GRACE_HASH))\n+    {\n+        if (GraceHashJoin::isSupported(table_join))\n+        {\n+            auto query_context = planner_context->getQueryContext();\n+            return std::make_shared<GraceHashJoin>(\n+                query_context,\n+                table_join,\n+                left_table_expression_header,\n+                right_table_expression_header,\n+                query_context->getTempDataOnDisk());\n+        }\n+    }\n+\n     if (table_join->isEnabledAlgorithm(JoinAlgorithm::AUTO))\n         return std::make_shared<JoinSwitcher>(table_join, right_table_expression_header);\n \ndiff --git a/src/Planner/PlannerJoins.h b/src/Planner/PlannerJoins.h\nindex d305249e789b..c61bce932e0f 100644\n--- a/src/Planner/PlannerJoins.h\n+++ b/src/Planner/PlannerJoins.h\n@@ -190,6 +190,7 @@ std::optional<bool> tryExtractConstantFromJoinNode(const QueryTreeNodePtr & join\n   */\n std::shared_ptr<IJoin> chooseJoinAlgorithm(std::shared_ptr<TableJoin> & table_join,\n     const QueryTreeNodePtr & right_table_expression,\n+    const Block & left_table_expression_header,\n     const Block & right_table_expression_header,\n     const PlannerContextPtr & planner_context);\n \ndiff --git a/src/Processors/QueryPlan/CreateSetAndFilterOnTheFlyStep.h b/src/Processors/QueryPlan/CreateSetAndFilterOnTheFlyStep.h\nindex 8c2eef00af0f..b363991c2f60 100644\n--- a/src/Processors/QueryPlan/CreateSetAndFilterOnTheFlyStep.h\n+++ b/src/Processors/QueryPlan/CreateSetAndFilterOnTheFlyStep.h\n@@ -1,7 +1,6 @@\n #pragma once\n #include <Processors/QueryPlan/ITransformingStep.h>\n #include <Processors/Transforms/CreateSetAndFilterOnTheFlyTransform.h>\n-#include <Processors/DelayedPortsProcessor.h>\n \n \n namespace DB\ndiff --git a/src/Processors/Transforms/JoiningTransform.cpp b/src/Processors/Transforms/JoiningTransform.cpp\nindex fed28a11ad54..c28a84e9d5d3 100644\n--- a/src/Processors/Transforms/JoiningTransform.cpp\n+++ b/src/Processors/Transforms/JoiningTransform.cpp\n@@ -16,6 +16,7 @@ Block JoiningTransform::transformHeader(Block header, const JoinPtr & join)\n {\n     LOG_DEBUG(&Poco::Logger::get(\"JoiningTransform\"), \"Before join block: '{}'\", header.dumpStructure());\n     join->checkTypesOfKeys(header);\n+    join->initialize(header);\n     ExtraBlockPtr tmp;\n     join->joinBlock(header, tmp);\n     LOG_DEBUG(&Poco::Logger::get(\"JoiningTransform\"), \"After join block: '{}'\", header.dumpStructure());\n@@ -38,17 +39,27 @@ JoiningTransform::JoiningTransform(\n     , max_block_size(max_block_size_)\n {\n     if (!join->isFilled())\n-        inputs.emplace_back(Block(), this);\n+        inputs.emplace_back(Block(), this); // Wait for FillingRightJoinSideTransform\n+}\n+\n+JoiningTransform::~JoiningTransform() = default;\n+\n+OutputPort & JoiningTransform::getFinishedSignal()\n+{\n+    assert(outputs.size() == 2);\n+    return outputs.back();\n }\n \n IProcessor::Status JoiningTransform::prepare()\n {\n     auto & output = outputs.front();\n+    auto & on_finish_output = outputs.back();\n \n     /// Check can output.\n     if (output.isFinished() || stop_reading)\n     {\n         output.finish();\n+        on_finish_output.finish();\n         for (auto & input : inputs)\n             input.close();\n         return Status::Finished;\n@@ -93,6 +104,7 @@ IProcessor::Status JoiningTransform::prepare()\n             return Status::Ready;\n \n         output.finish();\n+        on_finish_output.finish();\n         return Status::Finished;\n     }\n \n@@ -134,7 +146,7 @@ void JoiningTransform::work()\n             }\n         }\n \n-        Block block = non_joined_blocks->read();\n+        Block block = non_joined_blocks->next();\n         if (!block)\n         {\n             process_non_joined = false;\n@@ -298,4 +310,132 @@ void FillingRightJoinSideTransform::work()\n     set_totals = for_totals;\n }\n \n+\n+DelayedJoinedBlocksWorkerTransform::DelayedJoinedBlocksWorkerTransform(Block output_header)\n+    : IProcessor(InputPorts{Block()}, OutputPorts{output_header})\n+{\n+}\n+\n+IProcessor::Status DelayedJoinedBlocksWorkerTransform::prepare()\n+{\n+    if (inputs.size() != 1 && outputs.size() != 1)\n+        throw Exception(ErrorCodes::LOGICAL_ERROR, \"DelayedJoinedBlocksWorkerTransform must have exactly one input port\");\n+\n+    auto & output = outputs.front();\n+\n+    auto & input = inputs.front();\n+\n+    if (output_chunk)\n+    {\n+        input.setNotNeeded();\n+\n+        if (!output.canPush())\n+            return Status::PortFull;\n+\n+        output.push(std::move(output_chunk));\n+        output_chunk.clear();\n+        return Status::PortFull;\n+    }\n+\n+    if (!task)\n+    {\n+        if (!input.hasData())\n+        {\n+            input.setNeeded();\n+            return Status::NeedData;\n+        }\n+\n+        auto data = input.pullData(true);\n+        if (data.exception)\n+        {\n+            output.pushException(data.exception);\n+            return Status::Finished;\n+        }\n+\n+        if (!data.chunk.hasChunkInfo())\n+            throw Exception(ErrorCodes::LOGICAL_ERROR, \"DelayedJoinedBlocksWorkerTransform must have chunk info\");\n+        task = std::dynamic_pointer_cast<const DelayedBlocksTask>(data.chunk.getChunkInfo());\n+    }\n+    else\n+    {\n+        input.setNotNeeded();\n+    }\n+\n+    if (task->finished)\n+    {\n+        input.close();\n+        output.finish();\n+        return Status::Finished;\n+    }\n+\n+    return Status::Ready;\n+}\n+\n+void DelayedJoinedBlocksWorkerTransform::work()\n+{\n+    if (!task)\n+        return;\n+\n+    Block block = task->delayed_blocks->next();\n+\n+    if (!block)\n+    {\n+        task.reset();\n+        return;\n+    }\n+\n+    // Add block to the output\n+    auto rows = block.rows();\n+    output_chunk.setColumns(block.getColumns(), rows);\n+}\n+\n+DelayedJoinedBlocksTransform::DelayedJoinedBlocksTransform(size_t num_streams, JoinPtr join_)\n+    : IProcessor(InputPorts{}, OutputPorts(num_streams, Block()))\n+    , join(std::move(join_))\n+{\n+}\n+\n+void DelayedJoinedBlocksTransform::work()\n+{\n+    delayed_blocks = join->getDelayedBlocks();\n+    finished = finished || delayed_blocks == nullptr;\n+}\n+\n+\n+IProcessor::Status DelayedJoinedBlocksTransform::prepare()\n+{\n+    for (auto & output : outputs)\n+    {\n+        if (!output.canPush())\n+            return Status::PortFull;\n+    }\n+\n+    if (finished)\n+    {\n+        for (auto & output : outputs)\n+        {\n+            Chunk chunk;\n+            chunk.setChunkInfo(std::make_shared<DelayedBlocksTask>());\n+            output.push(std::move(chunk));\n+            output.finish();\n+        }\n+\n+        return Status::Finished;\n+    }\n+\n+    if (delayed_blocks)\n+    {\n+        for (auto & output : outputs)\n+        {\n+            Chunk chunk;\n+            chunk.setChunkInfo(std::make_shared<DelayedBlocksTask>(delayed_blocks));\n+            output.push(std::move(chunk));\n+        }\n+        delayed_blocks = nullptr;\n+        return Status::PortFull;\n+    }\n+\n+    return Status::Ready;\n+}\n+\n }\ndiff --git a/src/Processors/Transforms/JoiningTransform.h b/src/Processors/Transforms/JoiningTransform.h\nindex 0595d0356575..e7edff40c565 100644\n--- a/src/Processors/Transforms/JoiningTransform.h\n+++ b/src/Processors/Transforms/JoiningTransform.h\n@@ -9,6 +9,8 @@ class IJoin;\n using JoinPtr = std::shared_ptr<IJoin>;\n \n class NotJoinedBlocks;\n+class IBlocksStream;\n+using IBlocksStreamPtr = std::shared_ptr<IBlocksStream>;\n \n /// Join rows to chunk form left table.\n /// This transform usually has two input ports and one output.\n@@ -47,10 +49,14 @@ class JoiningTransform : public IProcessor\n         bool default_totals_ = false,\n         FinishCounterPtr finish_counter_ = nullptr);\n \n+    ~JoiningTransform() override;\n+\n     String getName() const override { return \"JoiningTransform\"; }\n \n     static Block transformHeader(Block header, const JoinPtr & join);\n \n+    OutputPort & getFinishedSignal();\n+\n     Status prepare() override;\n     void work() override;\n \n@@ -76,7 +82,7 @@ class JoiningTransform : public IProcessor\n     ExtraBlockPtr not_processed;\n \n     FinishCounterPtr finish_counter;\n-    std::shared_ptr<NotJoinedBlocks> non_joined_blocks;\n+    IBlocksStreamPtr non_joined_blocks;\n     size_t max_block_size;\n \n     Block readExecute(Chunk & chunk);\n@@ -104,4 +110,55 @@ class FillingRightJoinSideTransform : public IProcessor\n     bool set_totals = false;\n };\n \n+\n+class DelayedBlocksTask : public ChunkInfo\n+{\n+public:\n+\n+    explicit DelayedBlocksTask() : finished(true) {}\n+    explicit DelayedBlocksTask(IBlocksStreamPtr delayed_blocks_) : delayed_blocks(std::move(delayed_blocks_)) {}\n+\n+    IBlocksStreamPtr delayed_blocks = nullptr;\n+\n+    bool finished = false;\n+};\n+\n+using DelayedBlocksTaskPtr = std::shared_ptr<const DelayedBlocksTask>;\n+\n+\n+/// Reads delayed joined blocks from Join\n+class DelayedJoinedBlocksTransform : public IProcessor\n+{\n+public:\n+    explicit DelayedJoinedBlocksTransform(size_t num_streams, JoinPtr join_);\n+\n+    String getName() const override { return \"DelayedJoinedBlocksTransform\"; }\n+\n+    Status prepare() override;\n+    void work() override;\n+\n+private:\n+    JoinPtr join;\n+\n+    IBlocksStreamPtr delayed_blocks = nullptr;\n+    bool finished = false;\n+};\n+\n+class DelayedJoinedBlocksWorkerTransform : public IProcessor\n+{\n+public:\n+    explicit DelayedJoinedBlocksWorkerTransform(Block output_header);\n+\n+    String getName() const override { return \"DelayedJoinedBlocksWorkerTransform\"; }\n+\n+    Status prepare() override;\n+    void work() override;\n+\n+private:\n+    DelayedBlocksTaskPtr task;\n+    Chunk output_chunk;\n+\n+    bool finished = false;\n+};\n+\n }\ndiff --git a/src/QueryPipeline/QueryPipelineBuilder.cpp b/src/QueryPipeline/QueryPipelineBuilder.cpp\nindex 812bd155b423..626296834a24 100644\n--- a/src/QueryPipeline/QueryPipelineBuilder.cpp\n+++ b/src/QueryPipeline/QueryPipelineBuilder.cpp\n@@ -22,7 +22,8 @@\n #include <Interpreters/TableJoin.h>\n #include <Common/typeid_cast.h>\n #include <Common/CurrentThread.h>\n-#include \"Core/SortDescription.h\"\n+#include <Processors/ConcatProcessor.h>\n+#include <Core/SortDescription.h>\n #include <QueryPipeline/narrowPipe.h>\n #include <Processors/DelayedPortsProcessor.h>\n #include <Processors/RowsBeforeLimitCounter.h>\n@@ -383,7 +384,7 @@ std::unique_ptr<QueryPipelineBuilder> QueryPipelineBuilder::joinPipelinesRightLe\n     /// Collect the NEW processors for the right pipeline.\n     QueryPipelineProcessorsCollector collector(*right);\n     /// Remember the last step of the right pipeline.\n-    ExpressionStep* step = typeid_cast<ExpressionStep*>(right->pipe.processors->back()->getQueryPlanStep());\n+    ExpressionStep * step = typeid_cast<ExpressionStep *>(right->pipe.processors->back()->getQueryPlanStep());\n     if (!step)\n     {\n         throw Exception(ErrorCodes::LOGICAL_ERROR, \"The top step of the right pipeline should be ExpressionStep\");\n@@ -391,6 +392,10 @@ std::unique_ptr<QueryPipelineBuilder> QueryPipelineBuilder::joinPipelinesRightLe\n \n     /// In case joined subquery has totals, and we don't, add default chunk to totals.\n     bool default_totals = false;\n+\n+    if (!join->supportTotals() && (left->hasTotals() || right->hasTotals()))\n+        throw Exception(ErrorCodes::NOT_IMPLEMENTED, \"Current join algorithm is supported only for pipelines without totals\");\n+\n     if (!left->hasTotals() && right->hasTotals())\n     {\n         left->addDefaultTotals();\n@@ -453,26 +458,94 @@ std::unique_ptr<QueryPipelineBuilder> QueryPipelineBuilder::joinPipelinesRightLe\n     auto lit = left->pipe.output_ports.begin();\n     auto rit = right->pipe.output_ports.begin();\n \n+\n+    std::vector<OutputPort *> joined_output_ports;\n+    std::vector<OutputPort *> delayed_root_output_ports;\n+\n+    std::shared_ptr<DelayedJoinedBlocksTransform> delayed_root = nullptr;\n+    if (join->hasDelayedBlocks())\n+    {\n+        delayed_root = std::make_shared<DelayedJoinedBlocksTransform>(num_streams, join);\n+        if (!delayed_root->getInputs().empty() || delayed_root->getOutputs().size() != num_streams)\n+            throw Exception(ErrorCodes::LOGICAL_ERROR, \"DelayedJoinedBlocksTransform should have no inputs and {} outputs, but has {} inputs and {} outputs\",\n+                            num_streams, delayed_root->getInputs().size(), delayed_root->getOutputs().size());\n+\n+        if (collected_processors)\n+            collected_processors->emplace_back(delayed_root);\n+        left->pipe.processors->emplace_back(delayed_root);\n+\n+        for (auto & outport : delayed_root->getOutputs())\n+            delayed_root_output_ports.emplace_back(&outport);\n+    }\n+\n+\n+    Block left_header = left->getHeader();\n+    Block joined_header = JoiningTransform::transformHeader(left_header, join);\n+\n     for (size_t i = 0; i < num_streams; ++i)\n     {\n         auto joining = std::make_shared<JoiningTransform>(\n-            left->getHeader(), output_header, join, max_block_size, false, default_totals, finish_counter);\n+            left_header, output_header, join, max_block_size, false, default_totals, finish_counter);\n+\n         connect(**lit, joining->getInputs().front());\n         connect(**rit, joining->getInputs().back());\n-        *lit = &joining->getOutputs().front();\n+        if (delayed_root)\n+        {\n+            // Process delayed joined blocks when all JoiningTransform are finished.\n+            auto delayed = std::make_shared<DelayedJoinedBlocksWorkerTransform>(joined_header);\n+            if (delayed->getInputs().size() != 1 || delayed->getOutputs().size() != 1)\n+                throw Exception(\"DelayedJoinedBlocksWorkerTransform should have one input and one output\", ErrorCodes::LOGICAL_ERROR);\n+\n+            connect(*delayed_root_output_ports[i], delayed->getInputs().front());\n+\n+            joined_output_ports.push_back(&joining->getOutputs().front());\n+            joined_output_ports.push_back(&delayed->getOutputs().front());\n+\n+            if (collected_processors)\n+                collected_processors->emplace_back(delayed);\n+            left->pipe.processors->emplace_back(std::move(delayed));\n+        }\n+        else\n+        {\n+            *lit = &joining->getOutputs().front();\n+        }\n+\n \n         ++lit;\n         ++rit;\n-\n         if (collected_processors)\n             collected_processors->emplace_back(joining);\n \n         left->pipe.processors->emplace_back(std::move(joining));\n     }\n \n+    if (delayed_root)\n+    {\n+        // Process DelayedJoinedBlocksTransform after all JoiningTransforms.\n+        DelayedPortsProcessor::PortNumbers delayed_ports_numbers;\n+        delayed_ports_numbers.reserve(joined_output_ports.size() / 2);\n+        for (size_t i = 1; i < joined_output_ports.size(); i += 2)\n+            delayed_ports_numbers.push_back(i);\n+\n+        auto delayed_processor = std::make_shared<DelayedPortsProcessor>(joined_header, 2 * num_streams, delayed_ports_numbers);\n+        if (collected_processors)\n+            collected_processors->emplace_back(delayed_processor);\n+        left->pipe.processors->emplace_back(delayed_processor);\n+\n+        // Connect @delayed_processor ports with inputs (JoiningTransforms & DelayedJoinedBlocksTransforms) / pipe outputs\n+        auto next_delayed_input = delayed_processor->getInputs().begin();\n+        for (OutputPort * port : joined_output_ports)\n+            connect(*port, *next_delayed_input++);\n+        left->pipe.output_ports.clear();\n+        for (OutputPort & port : delayed_processor->getOutputs())\n+            left->pipe.output_ports.push_back(&port);\n+        left->pipe.header = joined_header;\n+        left->resize(num_streams);\n+    }\n+\n     if (left->hasTotals())\n     {\n-        auto joining = std::make_shared<JoiningTransform>(left->getHeader(), output_header, join, max_block_size, true, default_totals);\n+        auto joining = std::make_shared<JoiningTransform>(left_header, output_header, join, max_block_size, true, default_totals);\n         connect(*left->pipe.totals_port, joining->getInputs().front());\n         connect(**rit, joining->getInputs().back());\n         left->pipe.totals_port = &joining->getOutputs().front();\n",
  "test_patch": "diff --git a/tests/performance/grace_hash_join.xml b/tests/performance/grace_hash_join.xml\nnew file mode 100644\nindex 000000000000..8b28f9d74143\n--- /dev/null\n+++ b/tests/performance/grace_hash_join.xml\n@@ -0,0 +1,21 @@\n+<test>\n+    <settings>\n+        <max_threads>16</max_threads>\n+        <max_memory_usage>10G</max_memory_usage>\n+    </settings>\n+\n+    <substitutions>\n+        <substitution>\n+            <name>settings</name>\n+            <values>\n+                <value>join_algorithm='hash'</value>\n+                <value>join_algorithm='parallel_hash'</value>\n+                <value>join_algorithm='partial_merge', max_bytes_in_join='1G'</value>\n+                <value>join_algorithm='grace_hash', max_bytes_in_join='100M'</value>\n+            </values>\n+        </substitution>\n+    </substitutions>\n+\n+    <query short='numbers'>SELECT sum(n) FROM (SELECT number * 2 AS n FROM numbers_mt(10000000)) AS lhs JOIN (SELECT number * 3 AS n FROM numbers_mt(10000000)) AS rhs USING (n) SETTINGS {settings} FORMAT Null</query>\n+    <query short='numbers_hashed'>SELECT sum(n) FROM (SELECT intHash64(number * 2) AS n FROM numbers_mt(10000000)) AS lhs JOIN (SELECT intHash64(number * 3) AS n FROM numbers_mt(10000000)) AS rhs USING (n) SETTINGS {settings} FORMAT Null</query>\n+</test>\ndiff --git a/tests/queries/0_stateless/00800_low_cardinality_merge_join.reference.j2 b/tests/queries/0_stateless/00800_low_cardinality_merge_join.reference.j2\nindex 060012610889..296e0276653b 100644\n--- a/tests/queries/0_stateless/00800_low_cardinality_merge_join.reference.j2\n+++ b/tests/queries/0_stateless/00800_low_cardinality_merge_join.reference.j2\n@@ -1,4 +1,4 @@\n-{% for join_algorithm in ['partial_merge', 'full_sorting_merge'] -%}\n+{% for join_algorithm in ['partial_merge', 'full_sorting_merge', 'grace_hash'] -%}\n 0\n 0\n 0\ndiff --git a/tests/queries/0_stateless/00800_low_cardinality_merge_join.sql.j2 b/tests/queries/0_stateless/00800_low_cardinality_merge_join.sql.j2\nindex d0dd908ae67c..8b7856b7738c 100644\n--- a/tests/queries/0_stateless/00800_low_cardinality_merge_join.sql.j2\n+++ b/tests/queries/0_stateless/00800_low_cardinality_merge_join.sql.j2\n@@ -1,34 +1,34 @@\n-{% for join_algorithm in ['partial_merge', 'full_sorting_merge'] -%}\n+{% for join_algorithm in ['partial_merge', 'full_sorting_merge', 'grace_hash'] -%}\n \n-set join_algorithm = '{{ join_algorithm }}';\n+SET join_algorithm = '{{ join_algorithm }}';\n \n-select * from (select dummy as val from system.one) s1 any left join (select dummy as val from system.one) s2 using val;\n-select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select dummy as val from system.one) s2 using val;\n-select * from (select dummy as val from system.one) s1 any left join (select toLowCardinality(dummy) as val from system.one) s2 using val;\n-select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select toLowCardinality(dummy) as val from system.one) s2 using val;\n-select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select dummy as val from system.one) s2 using val;\n-select * from (select dummy as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as val from system.one) s2 using val;\n-select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select toLowCardinality(dummy) as val from system.one) s2 using val;\n-select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as val from system.one) s2 using val;\n-select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as val from system.one) s2 using val;\n-select '-';\n-select * from (select dummy as val from system.one) s1 any left join (select dummy as val from system.one) s2 on val + 0 = val * 1; -- { serverError 352 }\n-select * from (select dummy as val from system.one) s1 any left join (select dummy as rval from system.one) s2 on val + 0 = rval * 1;\n-select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select dummy as rval from system.one) s2 on val + 0 = rval * 1;\n-select * from (select dummy as val from system.one) s1 any left join (select toLowCardinality(dummy) as rval from system.one) s2 on val + 0 = rval * 1;\n-select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select toLowCardinality(dummy) as rval from system.one) s2 on val + 0 = rval * 1;\n-select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select dummy as rval from system.one) s2 on val + 0 = rval * 1;\n-select * from (select dummy as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as rval from system.one) s2 on val + 0 = rval * 1;\n-select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select toLowCardinality(dummy) as rval from system.one) s2 on val + 0 = rval * 1;\n-select * from (select toLowCardinality(dummy) as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as rval from system.one) s2 on val + 0 = rval * 1;\n-select * from (select toLowCardinality(toNullable(dummy)) as val from system.one) s1 any left join (select toLowCardinality(toNullable(dummy)) as rval from system.one) s2 on val + 0 = rval * 1;\n-select '-';\n-select * from (select number as l from system.numbers limit 3) s1 any left join (select number as r from system.numbers limit 3) s2 on l + 1 = r * 1;\n-select * from (select toLowCardinality(number) as l from system.numbers limit 3) s1 any left join (select number as r from system.numbers limit 3) s2 on l + 1 = r * 1;\n-select * from (select number as l from system.numbers limit 3) s1 any left join (select toLowCardinality(number) as r from system.numbers limit 3) s2 on l + 1 = r * 1;\n-select * from (select toLowCardinality(number) as l from system.numbers limit 3) s1 any left join (select toLowCardinality(number) as r from system.numbers limit 3) s2 on l + 1 = r * 1;\n-select * from (select toLowCardinality(toNullable(number)) as l from system.numbers limit 3) s1 any left join (select toLowCardinality(number) as r from system.numbers limit 3) s2 on l + 1 = r * 1;\n-select * from (select toLowCardinality(number) as l from system.numbers limit 3) s1 any left join (select toLowCardinality(toNullable(number)) as r from system.numbers limit 3) s2 on l + 1 = r * 1;\n-select * from (select toLowCardinality(toNullable(number)) as l from system.numbers limit 3) s1 any left join (select toLowCardinality(toNullable(number)) as r from system.numbers limit 3) s2 on l + 1 = r * 1;\n+SELECT * FROM (SELECT dummy AS val FROM system.one) s1 ANY LEFT JOIN (SELECT dummy AS val FROM system.one) s2 USING val ORDER BY val;\n+SELECT * FROM (SELECT toLowCardinality(dummy) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT dummy AS val FROM system.one) s2 USING val ORDER BY val;\n+SELECT * FROM (SELECT dummy AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS val FROM system.one) s2 USING val ORDER BY val;\n+SELECT * FROM (SELECT toLowCardinality(dummy) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS val FROM system.one) s2 USING val ORDER BY val;\n+SELECT * FROM (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT dummy AS val FROM system.one) s2 USING val ORDER BY val;\n+SELECT * FROM (SELECT dummy AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s2 USING val ORDER BY val;\n+SELECT * FROM (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS val FROM system.one) s2 USING val ORDER BY val;\n+SELECT * FROM (SELECT toLowCardinality(dummy) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s2 USING val ORDER BY val;\n+SELECT * FROM (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s2 USING val ORDER BY val;\n+SELECT '-';\n+SELECT * FROM (SELECT dummy AS val FROM system.one) s1 ANY LEFT JOIN (SELECT dummy AS val FROM system.one) s2 ON val + 0 = val * 1 ORDER BY val; -- { serverError 352 }\n+SELECT * FROM (SELECT dummy AS val FROM system.one) s1 ANY LEFT JOIN (SELECT dummy AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;\n+SELECT * FROM (SELECT toLowCardinality(dummy) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT dummy AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;\n+SELECT * FROM (SELECT dummy AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;\n+SELECT * FROM (SELECT toLowCardinality(dummy) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;\n+SELECT * FROM (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT dummy AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;\n+SELECT * FROM (SELECT dummy AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(dummy)) AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;\n+SELECT * FROM (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(dummy) AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;\n+SELECT * FROM (SELECT toLowCardinality(dummy) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(dummy)) AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;\n+SELECT * FROM (SELECT toLowCardinality(toNullable(dummy)) AS val FROM system.one) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(dummy)) AS rval FROM system.one) s2 ON val + 0 = rval * 1 ORDER BY val;\n+SELECT '-';\n+SELECT * FROM (SELECT number AS l FROM system.numbers LIMIT 3) s1 ANY LEFT JOIN (SELECT number AS r FROM system.numbers LIMIT 3) s2 ON l + 1 = r * 1 ORDER BY l;\n+SELECT * FROM (SELECT toLowCardinality(number) AS l FROM system.numbers LIMIT 3) s1 ANY LEFT JOIN (SELECT number AS r FROM system.numbers LIMIT 3) s2 ON l + 1 = r * 1 ORDER BY l;\n+SELECT * FROM (SELECT number AS l FROM system.numbers LIMIT 3) s1 ANY LEFT JOIN (SELECT toLowCardinality(number) AS r FROM system.numbers LIMIT 3) s2 ON l + 1 = r * 1 ORDER BY l;\n+SELECT * FROM (SELECT toLowCardinality(number) AS l FROM system.numbers LIMIT 3) s1 ANY LEFT JOIN (SELECT toLowCardinality(number) AS r FROM system.numbers LIMIT 3) s2 ON l + 1 = r * 1 ORDER BY l;\n+SELECT * FROM (SELECT toLowCardinality(toNullable(number)) AS l FROM system.numbers LIMIT 3) s1 ANY LEFT JOIN (SELECT toLowCardinality(number) AS r FROM system.numbers LIMIT 3) s2 ON l + 1 = r * 1 ORDER BY l;\n+SELECT * FROM (SELECT toLowCardinality(number) AS l FROM system.numbers LIMIT 3) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(number)) AS r FROM system.numbers LIMIT 3) s2 ON l + 1 = r * 1 ORDER BY l;\n+SELECT * FROM (SELECT toLowCardinality(toNullable(number)) AS l FROM system.numbers LIMIT 3) s1 ANY LEFT JOIN (SELECT toLowCardinality(toNullable(number)) AS r FROM system.numbers LIMIT 3) s2 ON l + 1 = r * 1 ORDER BY l;\n \n {% endfor -%}\ndiff --git a/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.reference b/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.reference\nindex 95859e3e0a43..0ace422adc29 100644\n--- a/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.reference\n+++ b/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.reference\n@@ -8,3 +8,8 @@\n 3\n 4\n 5\n+1\t1\n+2\n+3\n+4\n+5\ndiff --git a/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.sql b/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.sql\nindex 9abfc425d83d..515598971209 100644\n--- a/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.sql\n+++ b/tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.sql\n@@ -13,3 +13,11 @@ select * from (select materialize(2) as x) s1 left join (select 2 as x) s2 using\n select * from (select 3 as x) s1 left join (select materialize(3) as x) s2 using x;\n select * from (select toLowCardinality(4) as x) s1 left join (select 4 as x) s2 using x;\n select * from (select 5 as x) s1 left join (select toLowCardinality(5) as x) s2 using x;\n+\n+SET join_algorithm = 'grace_hash';\n+\n+select s1.x, s2.x from (select 1 as x) s1 left join (select 1 as x) s2 using x;\n+select * from (select materialize(2) as x) s1 left join (select 2 as x) s2 using x;\n+select * from (select 3 as x) s1 left join (select materialize(3) as x) s2 using x;\n+select * from (select toLowCardinality(4) as x) s1 left join (select 4 as x) s2 using x;\n+select * from (select 5 as x) s1 left join (select toLowCardinality(5) as x) s2 using x;\ndiff --git a/tests/queries/0_stateless/01010_pmj_on_disk.reference b/tests/queries/0_stateless/01010_pmj_on_disk.reference\nindex ba1d03fcc5d2..74f12daa2037 100644\n--- a/tests/queries/0_stateless/01010_pmj_on_disk.reference\n+++ b/tests/queries/0_stateless/01010_pmj_on_disk.reference\n@@ -14,3 +14,7 @@\n 1\t0\n 2\t11\n 3\t0\n+0\t10\n+1\t0\n+2\t11\n+3\t0\ndiff --git a/tests/queries/0_stateless/01010_pmj_on_disk.sql b/tests/queries/0_stateless/01010_pmj_on_disk.sql\nindex 28bc0ced3b74..d4fb91848963 100644\n--- a/tests/queries/0_stateless/01010_pmj_on_disk.sql\n+++ b/tests/queries/0_stateless/01010_pmj_on_disk.sql\n@@ -5,7 +5,8 @@ ANY LEFT JOIN (\n     SELECT number * 2 AS n, number + 10 AS j\n     FROM numbers(4000)\n ) js2\n-USING n;\n+USING n\n+ORDER BY n;\n \n SET max_rows_in_join = 1000;\n \n@@ -14,7 +15,8 @@ ANY LEFT JOIN (\n     SELECT number * 2 AS n, number + 10 AS j\n     FROM numbers(4000)\n ) js2\n-USING n; -- { serverError 191 }\n+USING n\n+ORDER BY n; -- { serverError 191 }\n \n SET join_algorithm = 'partial_merge';\n \n@@ -23,7 +25,8 @@ ANY LEFT JOIN (\n     SELECT number * 2 AS n, number + 10 AS j\n     FROM numbers(4000)\n ) js2\n-USING n;\n+USING n\n+ORDER BY n;\n \n SET partial_merge_join_optimizations = 1;\n \n@@ -32,7 +35,8 @@ ANY LEFT JOIN (\n     SELECT number * 2 AS n, number + 10 AS j\n     FROM numbers(4000)\n ) js2\n-USING n;\n+USING n\n+ORDER BY n;\n \n SET join_algorithm = 'auto';\n \n@@ -41,4 +45,15 @@ ANY LEFT JOIN (\n     SELECT number * 2 AS n, number + 10 AS j\n     FROM numbers(4000)\n ) js2\n-USING n;\n+USING n\n+ORDER BY n;\n+\n+SET max_rows_in_join = '10';\n+\n+SELECT number as n, j FROM numbers(4) nums\n+ANY LEFT JOIN (\n+    SELECT number * 2 AS n, number + 10 AS j\n+    FROM numbers(4000)\n+) js2\n+USING n\n+ORDER BY n;\ndiff --git a/tests/queries/0_stateless/01120_join_constants.sql b/tests/queries/0_stateless/01120_join_constants.sql\nindex d6d6a1be43b8..fdf297f5934c 100644\n--- a/tests/queries/0_stateless/01120_join_constants.sql\n+++ b/tests/queries/0_stateless/01120_join_constants.sql\n@@ -14,7 +14,7 @@ LEFT JOIN\n     SELECT\n         arrayJoin([1, 3]) AS k,\n         'world'\n-) AS t2 ON t1.k = t2.k;\n+) AS t2 ON t1.k = t2.k ORDER BY t1.k;\n \n SELECT\n     t1.*,\n@@ -32,4 +32,4 @@ LEFT JOIN\n     SELECT\n         arrayJoin([1, 3]) AS k,\n         123\n-) AS t2 ON t1.k = t2.k;\n+) AS t2 ON t1.k = t2.k ORDER BY t1.k;\ndiff --git a/tests/queries/0_stateless/01144_join_rewrite_with_ambiguous_column_and_view.sql b/tests/queries/0_stateless/01144_join_rewrite_with_ambiguous_column_and_view.sql\nindex ae8448884075..d73d438d9da5 100644\n--- a/tests/queries/0_stateless/01144_join_rewrite_with_ambiguous_column_and_view.sql\n+++ b/tests/queries/0_stateless/01144_join_rewrite_with_ambiguous_column_and_view.sql\n@@ -17,7 +17,7 @@ SELECT t1.id, t2.id as id, t3.id as value\n FROM (select number as id, 42 as value from numbers(4)) t1\n LEFT JOIN (select number as id, 42 as value from numbers(3)) t2 ON t1.id = t2.id\n LEFT JOIN (select number as id, 42 as value from numbers(2)) t3 ON t1.id = t3.id\n-WHERE id > 0 AND value < 42;\n+WHERE id > 0 AND value < 42 ORDER BY id;\n \n CREATE VIEW IF NOT EXISTS view1 AS\n     SELECT t1.id AS id, t1.value1 AS value1, t2.value2 AS value2, t3.value3 AS value3\n@@ -26,7 +26,7 @@ CREATE VIEW IF NOT EXISTS view1 AS\n     LEFT JOIN t3 ON t1.id = t3.id\n     WHERE t1.id > 0;\n \n-SELECT * FROM view1 WHERE id = 1;\n+SELECT * FROM view1 WHERE id = 1 ORDER BY id;\n \n DROP TABLE IF EXISTS t1;\n DROP TABLE IF EXISTS t2;\ndiff --git a/tests/queries/0_stateless/01710_projection_with_joins.sql b/tests/queries/0_stateless/01710_projection_with_joins.sql\nindex a54ba21fd279..5dac2f05da94 100644\n--- a/tests/queries/0_stateless/01710_projection_with_joins.sql\n+++ b/tests/queries/0_stateless/01710_projection_with_joins.sql\n@@ -2,20 +2,20 @@ drop table if exists t;\n \n create table t (s UInt16, l UInt16, projection p (select s, l order by l)) engine MergeTree order by s;\n \n-select s from t join (select toUInt16(1) as s) x using (s) settings allow_experimental_projection_optimization = 1;\n-select s from t join (select toUInt16(1) as s) x using (s) settings allow_experimental_projection_optimization = 0;\n+select s from t join (select toUInt16(1) as s) x using (s) order by s settings allow_experimental_projection_optimization = 1;\n+select s from t join (select toUInt16(1) as s) x using (s) order by s settings allow_experimental_projection_optimization = 0;\n \n drop table t;\n \n drop table if exists mt;\n create table mt (id1 Int8, id2 Int8) Engine=MergeTree order by tuple();\n-select id1 as alias1 from mt all inner join (select id2 as alias1 from mt) as t using (alias1) settings allow_experimental_projection_optimization = 1;\n-select id1 from mt all inner join (select id2 as id1 from mt) as t using (id1) settings allow_experimental_projection_optimization = 1;\n-select id2 as id1 from mt all inner join (select id1 from mt) as t using (id1) settings allow_experimental_projection_optimization = 1;\n+select id1 as alias1 from mt all inner join (select id2 as alias1 from mt) as t using (alias1) order by id1 settings allow_experimental_projection_optimization = 1;\n+select id1 from mt all inner join (select id2 as id1 from mt) as t using (id1) order by id1 settings allow_experimental_projection_optimization = 1;\n+select id2 as id1 from mt all inner join (select id1 from mt) as t using (id1) order by id1 settings allow_experimental_projection_optimization = 1;\n drop table mt;\n \n drop table if exists j;\n create table j (id1 Int8, id2 Int8, projection p (select id1, id2 order by id2)) Engine=MergeTree order by id1 settings index_granularity = 1;\n insert into j select number, number from numbers(10);\n-select id1 as alias1 from j all inner join (select id2 as alias1 from j where id2 in (1, 2, 3)) as t using (alias1) where id2 in (2, 3, 4) settings allow_experimental_projection_optimization = 1;\n+select id1 as alias1 from j all inner join (select id2 as alias1 from j where id2 in (1, 2, 3)) as t using (alias1) where id2 in (2, 3, 4) order by id1 settings allow_experimental_projection_optimization = 1;\n drop table j;\ndiff --git a/tests/queries/0_stateless/01721_join_implicit_cast_long.reference b/tests/queries/0_stateless/01721_join_implicit_cast_long.reference\ndeleted file mode 100644\nindex 07c240fa784d..000000000000\n--- a/tests/queries/0_stateless/01721_join_implicit_cast_long.reference\n+++ /dev/null\n@@ -1,1005 +0,0 @@\n-=== hash ===\n-= full =\n--4\t0\t196\n--3\t0\t197\n--2\t0\t198\n--1\t0\t199\n-0\t0\t200\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-6\t106\t\\N\n-7\t107\t\\N\n-8\t108\t\\N\n-9\t109\t\\N\n-10\t110\t\\N\n-= left =\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-6\t106\t\\N\n-7\t107\t\\N\n-8\t108\t\\N\n-9\t109\t\\N\n-10\t110\t\\N\n-= right =\n--4\t0\t196\n--3\t0\t197\n--2\t0\t198\n--1\t0\t199\n-0\t0\t200\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-= inner =\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-= full =\n-0\t0\t-4\n-0\t0\t-3\n-0\t0\t-2\n-0\t0\t-1\n-0\t0\t0\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-6\t6\t0\n-7\t7\t0\n-8\t8\t0\n-9\t9\t0\n-10\t10\t0\n-= left =\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-6\t6\t0\n-7\t7\t0\n-8\t8\t0\n-9\t9\t0\n-10\t10\t0\n-= right =\n-0\t0\t-4\n-0\t0\t-3\n-0\t0\t-2\n-0\t0\t-1\n-0\t0\t0\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-= inner =\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-= join on =\n-= full =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= left =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= right =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= inner =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= full =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= left =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= right =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= inner =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= agg =\n-1\n-1\n-1\n-1\n-1\n-1\n-0\t-10\t0\n-1\t55\t1055\n-0\t0\t-10\t0\t990\n-1\t55\t15\t1055\t1015\n-= types =\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-=== partial_merge ===\n-= full =\n--4\t0\t196\n--3\t0\t197\n--2\t0\t198\n--1\t0\t199\n-0\t0\t200\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-6\t106\t\\N\n-7\t107\t\\N\n-8\t108\t\\N\n-9\t109\t\\N\n-10\t110\t\\N\n-= left =\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-6\t106\t\\N\n-7\t107\t\\N\n-8\t108\t\\N\n-9\t109\t\\N\n-10\t110\t\\N\n-= right =\n--4\t0\t196\n--3\t0\t197\n--2\t0\t198\n--1\t0\t199\n-0\t0\t200\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-= inner =\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-= full =\n-0\t0\t-4\n-0\t0\t-3\n-0\t0\t-2\n-0\t0\t-1\n-0\t0\t0\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-6\t6\t0\n-7\t7\t0\n-8\t8\t0\n-9\t9\t0\n-10\t10\t0\n-= left =\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-6\t6\t0\n-7\t7\t0\n-8\t8\t0\n-9\t9\t0\n-10\t10\t0\n-= right =\n-0\t0\t-4\n-0\t0\t-3\n-0\t0\t-2\n-0\t0\t-1\n-0\t0\t0\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-= inner =\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-= join on =\n-= full =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= left =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= right =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= inner =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= full =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= left =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= right =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= inner =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= agg =\n-1\n-1\n-1\n-1\n-1\n-1\n-0\t-10\t0\n-1\t55\t1055\n-0\t0\t-10\t0\t990\n-1\t55\t15\t1055\t1015\n-= types =\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-=== full_sorting_merge ===\n-= full =\n--4\t0\t196\n--3\t0\t197\n--2\t0\t198\n--1\t0\t199\n-0\t0\t200\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-6\t106\t\\N\n-7\t107\t\\N\n-8\t108\t\\N\n-9\t109\t\\N\n-10\t110\t\\N\n-= left =\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-6\t106\t\\N\n-7\t107\t\\N\n-8\t108\t\\N\n-9\t109\t\\N\n-10\t110\t\\N\n-= right =\n--4\t0\t196\n--3\t0\t197\n--2\t0\t198\n--1\t0\t199\n-0\t0\t200\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-= inner =\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-= full =\n-0\t0\t-4\n-0\t0\t-3\n-0\t0\t-2\n-0\t0\t-1\n-0\t0\t0\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-6\t6\t0\n-7\t7\t0\n-8\t8\t0\n-9\t9\t0\n-10\t10\t0\n-= left =\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-6\t6\t0\n-7\t7\t0\n-8\t8\t0\n-9\t9\t0\n-10\t10\t0\n-= right =\n-0\t0\t-4\n-0\t0\t-3\n-0\t0\t-2\n-0\t0\t-1\n-0\t0\t0\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-= inner =\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-= join on =\n-= full =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= left =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= right =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= inner =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= full =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= left =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= right =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= inner =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= agg =\n-1\n-1\n-1\n-1\n-1\n-1\n-0\t-10\t0\n-1\t55\t1055\n-0\t0\t-10\t0\t990\n-1\t55\t15\t1055\t1015\n-= types =\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-=== auto ===\n-= full =\n--4\t0\t196\n--3\t0\t197\n--2\t0\t198\n--1\t0\t199\n-0\t0\t200\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-6\t106\t\\N\n-7\t107\t\\N\n-8\t108\t\\N\n-9\t109\t\\N\n-10\t110\t\\N\n-= left =\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-6\t106\t\\N\n-7\t107\t\\N\n-8\t108\t\\N\n-9\t109\t\\N\n-10\t110\t\\N\n-= right =\n--4\t0\t196\n--3\t0\t197\n--2\t0\t198\n--1\t0\t199\n-0\t0\t200\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-= inner =\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-= full =\n-0\t0\t-4\n-0\t0\t-3\n-0\t0\t-2\n-0\t0\t-1\n-0\t0\t0\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-6\t6\t0\n-7\t7\t0\n-8\t8\t0\n-9\t9\t0\n-10\t10\t0\n-= left =\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-6\t6\t0\n-7\t7\t0\n-8\t8\t0\n-9\t9\t0\n-10\t10\t0\n-= right =\n-0\t0\t-4\n-0\t0\t-3\n-0\t0\t-2\n-0\t0\t-1\n-0\t0\t0\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-= inner =\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-= join on =\n-= full =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= left =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= right =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= inner =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= full =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= left =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t0\t\\N\n-7\t107\t0\t\\N\n-8\t108\t0\t\\N\n-9\t109\t0\t\\N\n-10\t110\t0\t\\N\n-= right =\n-0\t0\t-4\t196\n-0\t0\t-3\t197\n-0\t0\t-2\t198\n-0\t0\t-1\t199\n-0\t0\t0\t200\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= inner =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= agg =\n-1\n-1\n-1\n-1\n-1\n-1\n-0\t-10\t0\n-1\t55\t1055\n-0\t0\t-10\t0\t990\n-1\t55\t15\t1055\t1015\n-= types =\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-=== join use nulls ===\n-= full =\n--4\t\\N\t196\n--3\t\\N\t197\n--2\t\\N\t198\n--1\t\\N\t199\n-0\t\\N\t200\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-6\t106\t\\N\n-7\t107\t\\N\n-8\t108\t\\N\n-9\t109\t\\N\n-10\t110\t\\N\n-= left =\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-6\t106\t\\N\n-7\t107\t\\N\n-8\t108\t\\N\n-9\t109\t\\N\n-10\t110\t\\N\n-= right =\n--4\t\\N\t196\n--3\t\\N\t197\n--2\t\\N\t198\n--1\t\\N\t199\n-0\t\\N\t200\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-= inner =\n-1\t101\t201\n-2\t102\t202\n-3\t103\t203\n-4\t104\t204\n-5\t105\t205\n-= full =\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-6\t6\t\\N\n-7\t7\t\\N\n-8\t8\t\\N\n-9\t9\t\\N\n-10\t10\t\\N\n-\\N\t\\N\t-4\n-\\N\t\\N\t-3\n-\\N\t\\N\t-2\n-\\N\t\\N\t-1\n-\\N\t\\N\t0\n-= left =\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-6\t6\t\\N\n-7\t7\t\\N\n-8\t8\t\\N\n-9\t9\t\\N\n-10\t10\t\\N\n-= right =\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-\\N\t\\N\t-4\n-\\N\t\\N\t-3\n-\\N\t\\N\t-2\n-\\N\t\\N\t-1\n-\\N\t\\N\t0\n-= inner =\n-1\t1\t1\n-2\t2\t2\n-3\t3\t3\n-4\t4\t4\n-5\t5\t5\n-= join on =\n-= full =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t\\N\t\\N\n-7\t107\t\\N\t\\N\n-8\t108\t\\N\t\\N\n-9\t109\t\\N\t\\N\n-10\t110\t\\N\t\\N\n-\\N\t\\N\t-4\t196\n-\\N\t\\N\t-3\t197\n-\\N\t\\N\t-2\t198\n-\\N\t\\N\t-1\t199\n-\\N\t\\N\t0\t200\n-= left =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t\\N\t\\N\n-7\t107\t\\N\t\\N\n-8\t108\t\\N\t\\N\n-9\t109\t\\N\t\\N\n-10\t110\t\\N\t\\N\n-= right =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-\\N\t\\N\t-4\t196\n-\\N\t\\N\t-3\t197\n-\\N\t\\N\t-2\t198\n-\\N\t\\N\t-1\t199\n-\\N\t\\N\t0\t200\n-= inner =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= full =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t\\N\t\\N\n-7\t107\t\\N\t\\N\n-8\t108\t\\N\t\\N\n-9\t109\t\\N\t\\N\n-10\t110\t\\N\t\\N\n-\\N\t\\N\t-4\t196\n-\\N\t\\N\t-3\t197\n-\\N\t\\N\t-2\t198\n-\\N\t\\N\t-1\t199\n-\\N\t\\N\t0\t200\n-= left =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-6\t106\t\\N\t\\N\n-7\t107\t\\N\t\\N\n-8\t108\t\\N\t\\N\n-9\t109\t\\N\t\\N\n-10\t110\t\\N\t\\N\n-= right =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-\\N\t\\N\t-4\t196\n-\\N\t\\N\t-3\t197\n-\\N\t\\N\t-2\t198\n-\\N\t\\N\t-1\t199\n-\\N\t\\N\t0\t200\n-= inner =\n-1\t101\t1\t201\n-2\t102\t2\t202\n-3\t103\t3\t203\n-4\t104\t4\t204\n-5\t105\t5\t205\n-= agg =\n-1\n-1\n-1\n-1\n-1\n-1\n-0\t-10\t\\N\n-1\t55\t1055\n-1\t55\t15\t1055\t1015\n-\\N\t\\N\t-10\t\\N\t990\n-= types =\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\n-1\ndiff --git a/tests/queries/0_stateless/01721_join_implicit_cast_long.reference.j2 b/tests/queries/0_stateless/01721_join_implicit_cast_long.reference.j2\nnew file mode 100644\nindex 000000000000..e9f320874399\n--- /dev/null\n+++ b/tests/queries/0_stateless/01721_join_implicit_cast_long.reference.j2\n@@ -0,0 +1,446 @@\n+{% for join_algorithm in ['hash', 'partial_merge', 'auto', 'full_sorting_merge', 'grace_hash'] -%}\n+=== {{ join_algorithm }} ===\n+= full =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+-4\t0\t196\n+-3\t0\t197\n+-2\t0\t198\n+-1\t0\t199\n+0\t0\t200\n+1\t101\t201\n+2\t102\t202\n+3\t103\t203\n+4\t104\t204\n+5\t105\t205\n+6\t106\t\\N\n+7\t107\t\\N\n+8\t108\t\\N\n+9\t109\t\\N\n+10\t110\t\\N\n+{% endif -%}\n+= left =\n+1\t101\t201\n+2\t102\t202\n+3\t103\t203\n+4\t104\t204\n+5\t105\t205\n+6\t106\t\\N\n+7\t107\t\\N\n+8\t108\t\\N\n+9\t109\t\\N\n+10\t110\t\\N\n+= right =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+-4\t0\t196\n+-3\t0\t197\n+-2\t0\t198\n+-1\t0\t199\n+0\t0\t200\n+1\t101\t201\n+2\t102\t202\n+3\t103\t203\n+4\t104\t204\n+5\t105\t205\n+{% endif -%}\n+= inner =\n+1\t101\t201\n+2\t102\t202\n+3\t103\t203\n+4\t104\t204\n+5\t105\t205\n+= full =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+0\t0\t-4\n+0\t0\t-3\n+0\t0\t-2\n+0\t0\t-1\n+0\t0\t0\n+1\t1\t1\n+2\t2\t2\n+3\t3\t3\n+4\t4\t4\n+5\t5\t5\n+6\t6\t0\n+7\t7\t0\n+8\t8\t0\n+9\t9\t0\n+10\t10\t0\n+{% endif -%}\n+= left =\n+1\t1\t1\n+2\t2\t2\n+3\t3\t3\n+4\t4\t4\n+5\t5\t5\n+6\t6\t0\n+7\t7\t0\n+8\t8\t0\n+9\t9\t0\n+10\t10\t0\n+= right =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+0\t0\t-4\n+0\t0\t-3\n+0\t0\t-2\n+0\t0\t-1\n+0\t0\t0\n+1\t1\t1\n+2\t2\t2\n+3\t3\t3\n+4\t4\t4\n+5\t5\t5\n+{% endif -%}\n+= inner =\n+1\t1\t1\n+2\t2\t2\n+3\t3\t3\n+4\t4\t4\n+5\t5\t5\n+= join on =\n+= full =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+0\t0\t-4\t196\n+0\t0\t-3\t197\n+0\t0\t-2\t198\n+0\t0\t-1\t199\n+0\t0\t0\t200\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+6\t106\t0\t\\N\n+7\t107\t0\t\\N\n+8\t108\t0\t\\N\n+9\t109\t0\t\\N\n+10\t110\t0\t\\N\n+{% endif -%}\n+= left =\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+6\t106\t0\t\\N\n+7\t107\t0\t\\N\n+8\t108\t0\t\\N\n+9\t109\t0\t\\N\n+10\t110\t0\t\\N\n+= right =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+0\t0\t-4\t196\n+0\t0\t-3\t197\n+0\t0\t-2\t198\n+0\t0\t-1\t199\n+0\t0\t0\t200\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+{% endif -%}\n+= inner =\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+= full =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+0\t0\t-4\t196\n+0\t0\t-3\t197\n+0\t0\t-2\t198\n+0\t0\t-1\t199\n+0\t0\t0\t200\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+6\t106\t0\t\\N\n+7\t107\t0\t\\N\n+8\t108\t0\t\\N\n+9\t109\t0\t\\N\n+10\t110\t0\t\\N\n+{% endif -%}\n+= left =\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+6\t106\t0\t\\N\n+7\t107\t0\t\\N\n+8\t108\t0\t\\N\n+9\t109\t0\t\\N\n+10\t110\t0\t\\N\n+= right =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+0\t0\t-4\t196\n+0\t0\t-3\t197\n+0\t0\t-2\t198\n+0\t0\t-1\t199\n+0\t0\t0\t200\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+{% endif -%}\n+= inner =\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+= agg =\n+1\n+1\n+{% if join_algorithm not in ['grace_hash'] -%}\n+1\n+1\n+1\n+1\n+0\t-10\t0\n+1\t55\t1055\n+0\t0\t-10\t0\t990\n+1\t55\t15\t1055\t1015\n+{% endif -%}\n+= types =\n+1\n+1\n+1\n+1\n+{% if join_algorithm not in ['grace_hash'] -%}\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+{% endif -%}\n+{% if join_algorithm not in ['full_sorting_merge'] -%}\n+=== join use nulls ===\n+= full =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+-4\t\\N\t196\n+-3\t\\N\t197\n+-2\t\\N\t198\n+-1\t\\N\t199\n+0\t\\N\t200\n+1\t101\t201\n+2\t102\t202\n+3\t103\t203\n+4\t104\t204\n+5\t105\t205\n+6\t106\t\\N\n+7\t107\t\\N\n+8\t108\t\\N\n+9\t109\t\\N\n+10\t110\t\\N\n+{% endif -%}\n+= left =\n+1\t101\t201\n+2\t102\t202\n+3\t103\t203\n+4\t104\t204\n+5\t105\t205\n+6\t106\t\\N\n+7\t107\t\\N\n+8\t108\t\\N\n+9\t109\t\\N\n+10\t110\t\\N\n+= right =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+-4\t\\N\t196\n+-3\t\\N\t197\n+-2\t\\N\t198\n+-1\t\\N\t199\n+0\t\\N\t200\n+1\t101\t201\n+2\t102\t202\n+3\t103\t203\n+4\t104\t204\n+5\t105\t205\n+{% endif -%}\n+= inner =\n+1\t101\t201\n+2\t102\t202\n+3\t103\t203\n+4\t104\t204\n+5\t105\t205\n+= full =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+1\t1\t1\n+2\t2\t2\n+3\t3\t3\n+4\t4\t4\n+5\t5\t5\n+6\t6\t\\N\n+7\t7\t\\N\n+8\t8\t\\N\n+9\t9\t\\N\n+10\t10\t\\N\n+\\N\t\\N\t-4\n+\\N\t\\N\t-3\n+\\N\t\\N\t-2\n+\\N\t\\N\t-1\n+\\N\t\\N\t0\n+{% endif -%}\n+= left =\n+1\t1\t1\n+2\t2\t2\n+3\t3\t3\n+4\t4\t4\n+5\t5\t5\n+6\t6\t\\N\n+7\t7\t\\N\n+8\t8\t\\N\n+9\t9\t\\N\n+10\t10\t\\N\n+= right =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+1\t1\t1\n+2\t2\t2\n+3\t3\t3\n+4\t4\t4\n+5\t5\t5\n+\\N\t\\N\t-4\n+\\N\t\\N\t-3\n+\\N\t\\N\t-2\n+\\N\t\\N\t-1\n+\\N\t\\N\t0\n+{% endif -%}\n+= inner =\n+1\t1\t1\n+2\t2\t2\n+3\t3\t3\n+4\t4\t4\n+5\t5\t5\n+= join on =\n+= full =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+6\t106\t\\N\t\\N\n+7\t107\t\\N\t\\N\n+8\t108\t\\N\t\\N\n+9\t109\t\\N\t\\N\n+10\t110\t\\N\t\\N\n+\\N\t\\N\t-4\t196\n+\\N\t\\N\t-3\t197\n+\\N\t\\N\t-2\t198\n+\\N\t\\N\t-1\t199\n+\\N\t\\N\t0\t200\n+{% endif -%}\n+= left =\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+6\t106\t\\N\t\\N\n+7\t107\t\\N\t\\N\n+8\t108\t\\N\t\\N\n+9\t109\t\\N\t\\N\n+10\t110\t\\N\t\\N\n+= right =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+\\N\t\\N\t-4\t196\n+\\N\t\\N\t-3\t197\n+\\N\t\\N\t-2\t198\n+\\N\t\\N\t-1\t199\n+\\N\t\\N\t0\t200\n+{% endif -%}\n+= inner =\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+= full =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+6\t106\t\\N\t\\N\n+7\t107\t\\N\t\\N\n+8\t108\t\\N\t\\N\n+9\t109\t\\N\t\\N\n+10\t110\t\\N\t\\N\n+\\N\t\\N\t-4\t196\n+\\N\t\\N\t-3\t197\n+\\N\t\\N\t-2\t198\n+\\N\t\\N\t-1\t199\n+\\N\t\\N\t0\t200\n+{% endif -%}\n+= left =\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+6\t106\t\\N\t\\N\n+7\t107\t\\N\t\\N\n+8\t108\t\\N\t\\N\n+9\t109\t\\N\t\\N\n+10\t110\t\\N\t\\N\n+= right =\n+{% if join_algorithm not in ['grace_hash'] -%}\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+\\N\t\\N\t-4\t196\n+\\N\t\\N\t-3\t197\n+\\N\t\\N\t-2\t198\n+\\N\t\\N\t-1\t199\n+\\N\t\\N\t0\t200\n+{% endif -%}\n+= inner =\n+1\t101\t1\t201\n+2\t102\t2\t202\n+3\t103\t3\t203\n+4\t104\t4\t204\n+5\t105\t5\t205\n+= agg =\n+1\n+1\n+{% if join_algorithm not in ['grace_hash'] -%}\n+1\n+1\n+1\n+1\n+0\t-10\t\\N\n+1\t55\t1055\n+1\t55\t15\t1055\t1015\n+\\N\t\\N\t-10\t\\N\t990\n+{% endif -%}\n+= types =\n+1\n+1\n+1\n+1\n+{% if join_algorithm not in ['grace_hash'] -%}\n+1\n+1\n+1\n+1\n+1\n+1\n+1\n+{% endif -%}\n+{% endif -%}\n+{% endfor -%}\ndiff --git a/tests/queries/0_stateless/01721_join_implicit_cast_long.sql.j2 b/tests/queries/0_stateless/01721_join_implicit_cast_long.sql.j2\nindex 3846f527bba0..f5321939f281 100644\n--- a/tests/queries/0_stateless/01721_join_implicit_cast_long.sql.j2\n+++ b/tests/queries/0_stateless/01721_join_implicit_cast_long.sql.j2\n@@ -9,49 +9,55 @@ CREATE TABLE t2 (a Int16, b Nullable(Int64)) ENGINE = TinyLog;\n INSERT INTO t1 SELECT number as a, 100 + number as b FROM system.numbers LIMIT 1, 10;\n INSERT INTO t2 SELECT number - 5 as a, 200 + number - 5 as b FROM system.numbers LIMIT 1, 10;\n \n-{% for join_type in ['hash', 'partial_merge', 'full_sorting_merge', 'auto'] -%}\n+{% macro is_implemented(join_algorithm) -%}\n+{% if join_algorithm == 'grace_hash' %} -- { serverError NOT_IMPLEMENTED } {% endif %}\n+{% endmacro -%}\n \n-SELECT '=== {{ join_type }} ===';\n-SET join_algorithm = '{{ join_type }}';\n+{% for join_algorithm in ['hash', 'partial_merge', 'auto', 'full_sorting_merge', 'grace_hash'] -%}\n \n-{% if join_type == 'auto' -%}\n+SELECT '=== {{ join_algorithm }} ===';\n+SET join_algorithm = '{{ join_algorithm }}';\n+\n+{% if join_algorithm == 'auto' -%}\n SET max_bytes_in_join = 100;\n+{% else %}\n+SET max_bytes_in_join = '100M';\n {% endif -%}\n \n SELECT '= full =';\n-SELECT a, b, t2.b FROM t1 FULL JOIN t2 USING (a) ORDER BY (a);\n+SELECT a, b, t2.b FROM t1 FULL JOIN t2 USING (a) ORDER BY (a); {{ is_implemented(join_algorithm) }}\n SELECT '= left =';\n SELECT a, b, t2.b FROM t1 LEFT JOIN t2 USING (a) ORDER BY (a);\n SELECT '= right =';\n-SELECT a, b, t2.b FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (a);\n+SELECT a, b, t2.b FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (a); {{ is_implemented(join_algorithm) }}\n SELECT '= inner =';\n SELECT a, b, t2.b FROM t1 INNER JOIN t2 USING (a) ORDER BY (a);\n \n SELECT '= full =';\n-SELECT a, t1.a, t2.a FROM t1 FULL JOIN t2 USING (a) ORDER BY (t1.a, t2.a);\n+SELECT a, t1.a, t2.a FROM t1 FULL JOIN t2 USING (a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}\n SELECT '= left =';\n SELECT a, t1.a, t2.a FROM t1 LEFT JOIN t2 USING (a) ORDER BY (t1.a, t2.a);\n SELECT '= right =';\n-SELECT a, t1.a, t2.a FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (t1.a, t2.a);\n+SELECT a, t1.a, t2.a FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}\n SELECT '= inner =';\n SELECT a, t1.a, t2.a FROM t1 INNER JOIN t2 USING (a) ORDER BY (t1.a, t2.a);\n \n SELECT '= join on =';\n SELECT '= full =';\n-SELECT a, b, t2.a, t2.b FROM t1 FULL JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);\n+SELECT a, b, t2.a, t2.b FROM t1 FULL JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}\n SELECT '= left =';\n SELECT a, b, t2.a, t2.b FROM t1 LEFT JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);\n SELECT '= right =';\n-SELECT a, b, t2.a, t2.b FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);\n+SELECT a, b, t2.a, t2.b FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}\n SELECT '= inner =';\n SELECT a, b, t2.a, t2.b FROM t1 INNER JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);\n \n SELECT '= full =';\n-SELECT * FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);\n+SELECT * FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}\n SELECT '= left =';\n SELECT * FROM t1 LEFT JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);\n SELECT '= right =';\n-SELECT * FROM t1 RIGHT JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);\n+SELECT * FROM t1 RIGHT JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}\n SELECT '= inner =';\n SELECT * FROM t1 INNER JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);\n \n@@ -62,77 +68,77 @@ SELECT * FROM t1 RIGHT JOIN t2 ON (t1.a + t1.b + 100 = t2.a + t2.b) ORDER BY (t1\n SELECT * FROM t1 INNER JOIN t2 ON (t1.a + t1.b + 100 = t2.a + t2.b) ORDER BY (t1.a, t2.a); -- { serverError 53 }\n \n SELECT '= agg =';\n-SELECT sum(a) == 7 FROM t1 FULL JOIN t2 USING (a) WHERE b > 102 AND t2.b <= 204;\n+SELECT sum(a) == 7 FROM t1 FULL JOIN t2 USING (a) WHERE b > 102 AND t2.b <= 204; {{ is_implemented(join_algorithm) }}\n SELECT sum(a) == 7 FROM t1 INNER JOIN t2 USING (a) WHERE b > 102 AND t2.b <= 204;\n \n SELECT sum(b) = 103 FROM t1 LEFT JOIN t2 USING (a) WHERE b > 102 AND t2.b < 204;\n-SELECT sum(t2.b) = 203 FROM t1 RIGHT JOIN t2 USING (a) WHERE b > 102 AND t2.b < 204;\n+SELECT sum(t2.b) = 203 FROM t1 RIGHT JOIN t2 USING (a) WHERE b > 102 AND t2.b < 204; {{ is_implemented(join_algorithm) }}\n \n-SELECT sum(a) == 2 + 3 + 4 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE t1.b < 105 AND t2.b > 201;\n-SELECT sum(a) == 55 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE 1;\n+SELECT sum(a) == 2 + 3 + 4 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE t1.b < 105 AND t2.b > 201; {{ is_implemented(join_algorithm) }}\n+SELECT sum(a) == 55 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE 1; {{ is_implemented(join_algorithm) }}\n \n-SELECT a > 0, sum(a), sum(b) FROM t1 FULL JOIN t2 USING (a) GROUP BY (a > 0) ORDER BY a > 0;\n-SELECT a > 0, sum(a), sum(t2.a), sum(b), sum(t2.b) FROM t1 FULL JOIN t2 ON (t1.a == t2.a) GROUP BY (a > 0) ORDER BY a > 0;\n+SELECT a > 0, sum(a), sum(b) FROM t1 FULL JOIN t2 USING (a) GROUP BY (a > 0) ORDER BY a > 0; {{ is_implemented(join_algorithm) }}\n+SELECT a > 0, sum(a), sum(t2.a), sum(b), sum(t2.b) FROM t1 FULL JOIN t2 ON (t1.a == t2.a) GROUP BY (a > 0) ORDER BY a > 0; {{ is_implemented(join_algorithm) }}\n \n SELECT '= types =';\n-SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 FULL JOIN t2 USING (a);\n+SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 FULL JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}\n SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 LEFT JOIN t2 USING (a);\n-SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 RIGHT JOIN t2 USING (a);\n+SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 RIGHT JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}\n SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 INNER JOIN t2 USING (a);\n \n-SELECT toTypeName(any(a)) == 'Int32' AND toTypeName(any(t2.a)) == 'Int32' FROM t1 FULL JOIN t2 USING (a);\n-SELECT min(toTypeName(a) == 'Int32' AND toTypeName(t2.a) == 'Int32') FROM t1 FULL JOIN t2 USING (a);\n+SELECT toTypeName(any(a)) == 'Int32' AND toTypeName(any(t2.a)) == 'Int32' FROM t1 FULL JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}\n+SELECT min(toTypeName(a) == 'Int32' AND toTypeName(t2.a) == 'Int32') FROM t1 FULL JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}\n \n-SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 FULL JOIN t2 ON (t1.a == t2.a);\n+SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 FULL JOIN t2 ON (t1.a == t2.a); {{ is_implemented(join_algorithm) }}\n SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 LEFT JOIN t2 ON (t1.a == t2.a);\n-SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a);\n+SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a); {{ is_implemented(join_algorithm) }}\n SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 INNER JOIN t2 ON (t1.a == t2.a);\n-SELECT toTypeName(any(a)) == 'UInt16' AND toTypeName(any(t2.a)) == 'Int16' FROM t1 FULL JOIN t2 ON (t1.a == t2.a);\n+SELECT toTypeName(any(a)) == 'UInt16' AND toTypeName(any(t2.a)) == 'Int16' FROM t1 FULL JOIN t2 ON (t1.a == t2.a); {{ is_implemented(join_algorithm) }}\n \n-{% if join_type == 'auto' -%}\n+{% if join_algorithm == 'auto' -%}\n SET max_bytes_in_join = 0;\n {% endif -%}\n \n-{% endfor -%}\n+{% if join_algorithm not in ['full_sorting_merge'] -%}\n \n SELECT '=== join use nulls ===';\n \n SET join_use_nulls = 1;\n \n SELECT '= full =';\n-SELECT a, b, t2.b FROM t1 FULL JOIN t2 USING (a) ORDER BY (a);\n+SELECT a, b, t2.b FROM t1 FULL JOIN t2 USING (a) ORDER BY (a); {{ is_implemented(join_algorithm) }}\n SELECT '= left =';\n SELECT a, b, t2.b FROM t1 LEFT JOIN t2 USING (a) ORDER BY (a);\n SELECT '= right =';\n-SELECT a, b, t2.b FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (a);\n+SELECT a, b, t2.b FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (a); {{ is_implemented(join_algorithm) }}\n SELECT '= inner =';\n SELECT a, b, t2.b FROM t1 INNER JOIN t2 USING (a) ORDER BY (a);\n \n SELECT '= full =';\n-SELECT a, t1.a, t2.a FROM t1 FULL JOIN t2 USING (a) ORDER BY (t1.a, t2.a);\n+SELECT a, t1.a, t2.a FROM t1 FULL JOIN t2 USING (a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}\n SELECT '= left =';\n SELECT a, t1.a, t2.a FROM t1 LEFT JOIN t2 USING (a) ORDER BY (t1.a, t2.a);\n SELECT '= right =';\n-SELECT a, t1.a, t2.a FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (t1.a, t2.a);\n+SELECT a, t1.a, t2.a FROM t1 RIGHT JOIN t2 USING (a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}\n SELECT '= inner =';\n SELECT a, t1.a, t2.a FROM t1 INNER JOIN t2 USING (a) ORDER BY (t1.a, t2.a);\n \n SELECT '= join on =';\n SELECT '= full =';\n-SELECT a, b, t2.a, t2.b FROM t1 FULL JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);\n+SELECT a, b, t2.a, t2.b FROM t1 FULL JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}\n SELECT '= left =';\n SELECT a, b, t2.a, t2.b FROM t1 LEFT JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);\n SELECT '= right =';\n-SELECT a, b, t2.a, t2.b FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);\n+SELECT a, b, t2.a, t2.b FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}\n SELECT '= inner =';\n SELECT a, b, t2.a, t2.b FROM t1 INNER JOIN t2 ON (t1.a == t2.a) ORDER BY (t1.a, t2.a);\n \n SELECT '= full =';\n-SELECT * FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);\n+SELECT * FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}\n SELECT '= left =';\n SELECT * FROM t1 LEFT JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);\n SELECT '= right =';\n-SELECT * FROM t1 RIGHT JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);\n+SELECT * FROM t1 RIGHT JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a); {{ is_implemented(join_algorithm) }}\n SELECT '= inner =';\n SELECT * FROM t1 INNER JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) ORDER BY (t1.a, t2.a);\n \n@@ -143,34 +149,37 @@ SELECT * FROM t1 RIGHT JOIN t2 ON (t1.a + t1.b + 100 = t2.a + t2.b) ORDER BY (t1\n SELECT * FROM t1 INNER JOIN t2 ON (t1.a + t1.b + 100 = t2.a + t2.b) ORDER BY (t1.a, t2.a); -- { serverError 53 }\n \n SELECT '= agg =';\n-SELECT sum(a) == 7 FROM t1 FULL JOIN t2 USING (a) WHERE b > 102 AND t2.b <= 204;\n+SELECT sum(a) == 7 FROM t1 FULL JOIN t2 USING (a) WHERE b > 102 AND t2.b <= 204; {{ is_implemented(join_algorithm) }}\n SELECT sum(a) == 7 FROM t1 INNER JOIN t2 USING (a) WHERE b > 102 AND t2.b <= 204;\n \n SELECT sum(b) = 103 FROM t1 LEFT JOIN t2 USING (a) WHERE b > 102 AND t2.b < 204;\n-SELECT sum(t2.b) = 203 FROM t1 RIGHT JOIN t2 USING (a) WHERE b > 102 AND t2.b < 204;\n+SELECT sum(t2.b) = 203 FROM t1 RIGHT JOIN t2 USING (a) WHERE b > 102 AND t2.b < 204; {{ is_implemented(join_algorithm) }}\n \n-SELECT sum(a) == 2 + 3 + 4 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE t1.b < 105 AND t2.b > 201;\n-SELECT sum(a) == 55 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE 1;\n+SELECT sum(a) == 2 + 3 + 4 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE t1.b < 105 AND t2.b > 201; {{ is_implemented(join_algorithm) }}\n+SELECT sum(a) == 55 FROM t1 FULL JOIN t2 ON (t1.a + t1.b = t2.a + t2.b - 100) WHERE 1; {{ is_implemented(join_algorithm) }}\n \n-SELECT a > 0, sum(a), sum(b) FROM t1 FULL JOIN t2 USING (a) GROUP BY (a > 0) ORDER BY a > 0;\n-SELECT a > 0, sum(a), sum(t2.a), sum(b), sum(t2.b) FROM t1 FULL JOIN t2 ON (t1.a == t2.a) GROUP BY (a > 0) ORDER BY a > 0;\n+SELECT a > 0, sum(a), sum(b) FROM t1 FULL JOIN t2 USING (a) GROUP BY (a > 0) ORDER BY a > 0; {{ is_implemented(join_algorithm) }}\n+SELECT a > 0, sum(a), sum(t2.a), sum(b), sum(t2.b) FROM t1 FULL JOIN t2 ON (t1.a == t2.a) GROUP BY (a > 0) ORDER BY a > 0; {{ is_implemented(join_algorithm) }}\n \n SELECT '= types =';\n-SELECT any(toTypeName(a)) == 'Nullable(Int32)' AND any(toTypeName(t2.a)) == 'Nullable(Int32)' FROM t1 FULL JOIN t2 USING (a);\n+SELECT any(toTypeName(a)) == 'Nullable(Int32)' AND any(toTypeName(t2.a)) == 'Nullable(Int32)' FROM t1 FULL JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}\n SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Nullable(Int32)' FROM t1 LEFT JOIN t2 USING (a);\n-SELECT any(toTypeName(a)) == 'Nullable(Int32)' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 RIGHT JOIN t2 USING (a);\n+SELECT any(toTypeName(a)) == 'Nullable(Int32)' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 RIGHT JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}\n SELECT any(toTypeName(a)) == 'Int32' AND any(toTypeName(t2.a)) == 'Int32' FROM t1 INNER JOIN t2 USING (a);\n \n-SELECT toTypeName(any(a)) == 'Nullable(Int32)' AND toTypeName(any(t2.a)) == 'Nullable(Int32)' FROM t1 FULL JOIN t2 USING (a);\n-SELECT min(toTypeName(a) == 'Nullable(Int32)' AND toTypeName(t2.a) == 'Nullable(Int32)') FROM t1 FULL JOIN t2 USING (a);\n+SELECT toTypeName(any(a)) == 'Nullable(Int32)' AND toTypeName(any(t2.a)) == 'Nullable(Int32)' FROM t1 FULL JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}\n+SELECT min(toTypeName(a) == 'Nullable(Int32)' AND toTypeName(t2.a) == 'Nullable(Int32)') FROM t1 FULL JOIN t2 USING (a); {{ is_implemented(join_algorithm) }}\n \n-SELECT any(toTypeName(a)) == 'Nullable(UInt16)' AND any(toTypeName(t2.a)) == 'Nullable(Int16)' FROM t1 FULL JOIN t2 ON (t1.a == t2.a);\n+SELECT any(toTypeName(a)) == 'Nullable(UInt16)' AND any(toTypeName(t2.a)) == 'Nullable(Int16)' FROM t1 FULL JOIN t2 ON (t1.a == t2.a); {{ is_implemented(join_algorithm) }}\n SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Nullable(Int16)' FROM t1 LEFT JOIN t2 ON (t1.a == t2.a);\n-SELECT any(toTypeName(a)) == 'Nullable(UInt16)' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a);\n+SELECT any(toTypeName(a)) == 'Nullable(UInt16)' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 RIGHT JOIN t2 ON (t1.a == t2.a); {{ is_implemented(join_algorithm) }}\n SELECT any(toTypeName(a)) == 'UInt16' AND any(toTypeName(t2.a)) == 'Int16' FROM t1 INNER JOIN t2 ON (t1.a == t2.a);\n-SELECT toTypeName(any(a)) == 'Nullable(UInt16)' AND toTypeName(any(t2.a)) == 'Nullable(Int16)' FROM t1 FULL JOIN t2 ON (t1.a == t2.a);\n+SELECT toTypeName(any(a)) == 'Nullable(UInt16)' AND toTypeName(any(t2.a)) == 'Nullable(Int16)' FROM t1 FULL JOIN t2 ON (t1.a == t2.a); {{ is_implemented(join_algorithm) }}\n \n SET join_use_nulls = 0;\n+{% endif -%}\n+\n+{% endfor -%}\n \n DROP TABLE IF EXISTS t1;\n DROP TABLE IF EXISTS t2;\ndiff --git a/tests/queries/0_stateless/02273_full_sort_join.reference.j2 b/tests/queries/0_stateless/02273_full_sort_join.reference.j2\nindex 1059108a03bc..98bfd9d9b2b1 100644\n--- a/tests/queries/0_stateless/02273_full_sort_join.reference.j2\n+++ b/tests/queries/0_stateless/02273_full_sort_join.reference.j2\n@@ -1,4 +1,6 @@\n {% set table_size = 15 -%}\n+{% for join_algorithm in ['default', 'full_sorting_merge', 'grace_hash'] -%}\n+-- {{ join_algorithm }} --\n {% for block_size in range(1, table_size + 1) -%}\n ALL INNER USING | bs = {{ block_size }}\n 4\t0\t0\n@@ -48,6 +50,7 @@ ALL LEFT | bs = {{ block_size }}\n 14\t14\tval9\t0\n 14\t14\tval9\t0\n ALL RIGHT | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 4\t4\t0\tval10\n 5\t5\t0\tval6\n 6\t6\t0\tval8\n@@ -61,6 +64,7 @@ ALL RIGHT | bs = {{ block_size }}\n 13\t13\t0\tval9\n 14\t14\t0\tval3\n 14\t14\t0\tval7\n+{% endif -%}\n ALL INNER | bs = {{ block_size }} | copmosite key\n 2\t2\t2\t2\t2\t2\t0\t0\n 2\t2\t2\t2\t2\t2\t0\t0\n@@ -81,6 +85,7 @@ ALL LEFT | bs = {{ block_size }} | copmosite key\n 2\t2\t2\t2\t2\t2\tval12\t0\n 2\t2\t2\t2\t2\t2\tval9\t0\n ALL RIGHT | bs = {{ block_size }} | copmosite key\n+{% if join_algorithm != 'grace_hash' -%}\n 0\t\\N\t0\t1\t1\t1\t1\tval2\n 0\t\\N\t0\t1\t1\t1\t1\tval7\n 0\t\\N\t0\t1\t1\t2\t1\tval5\n@@ -94,6 +99,7 @@ ALL RIGHT | bs = {{ block_size }} | copmosite key\n 0\t\\N\t0\t2\t2\t\\N\t1\tval9\n 2\t2\t2\t2\t2\t2\t0\tval4\n 2\t2\t2\t2\t2\t2\t0\tval4\n+{% endif -%}\n ANY INNER USING | bs = {{ block_size }}\n 4\t0\t0\n 5\t0\t0\n@@ -131,6 +137,7 @@ ANY LEFT | bs = {{ block_size }}\n 13\t13\tval13\t0\n 14\t14\tval9\t0\n ANY RIGHT | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 4\t4\t0\tval10\n 5\t5\t0\tval6\n 6\t6\t0\tval8\n@@ -143,6 +150,7 @@ ANY RIGHT | bs = {{ block_size }}\n 13\t13\t0\tval9\n 14\t14\t0\tval3\n 14\t14\t0\tval7\n+{% endif -%}\n ANY INNER | bs = {{ block_size }} | copmosite key\n 2\t2\t2\t2\t2\t2\t0\t0\n ANY LEFT | bs = {{ block_size }} | copmosite key\n@@ -162,6 +170,7 @@ ANY LEFT | bs = {{ block_size }} | copmosite key\n 2\t2\t2\t2\t2\t2\tval12\t0\n 2\t2\t2\t2\t2\t2\tval9\t0\n ANY RIGHT | bs = {{ block_size }} | copmosite key\n+{% if join_algorithm != 'grace_hash' -%}\n 0\t\\N\t0\t1\t1\t1\t1\tval2\n 0\t\\N\t0\t1\t1\t1\t1\tval7\n 0\t\\N\t0\t1\t1\t2\t1\tval5\n@@ -174,6 +183,7 @@ ANY RIGHT | bs = {{ block_size }} | copmosite key\n 0\t\\N\t0\t2\t1\t\\N\t1\tval3\n 0\t\\N\t0\t2\t2\t\\N\t1\tval9\n 2\t2\t2\t2\t2\t2\t0\tval4\n+{% endif -%}\n {% endfor -%}\n ALL INNER | join_use_nulls = 1\n 4\t4\t0\t0\n@@ -209,6 +219,7 @@ ALL LEFT | join_use_nulls = 1\n 14\t14\tval9\t0\n 14\t14\tval9\t0\n ALL RIGHT | join_use_nulls = 1\n+{% if join_algorithm != 'grace_hash' -%}\n 4\t4\t0\tval10\n 5\t5\t0\tval6\n 6\t6\t0\tval8\n@@ -222,6 +233,7 @@ ALL RIGHT | join_use_nulls = 1\n 13\t13\t0\tval9\n 14\t14\t0\tval3\n 14\t14\t0\tval7\n+{% endif -%}\n ALL INNER | join_use_nulls = 1 | copmosite key\n 2\t2\t2\t2\t2\t2\t0\t0\n 2\t2\t2\t2\t2\t2\t0\t0\n@@ -242,6 +254,7 @@ ALL LEFT | join_use_nulls = 1 | copmosite key\n 2\t2\t2\t2\t2\t2\tval12\t0\n 2\t2\t2\t2\t2\t2\tval9\t0\n ALL RIGHT | join_use_nulls = 1 | copmosite key\n+{% if join_algorithm != 'grace_hash' -%}\n 2\t2\t2\t2\t2\t2\t0\tval4\n 2\t2\t2\t2\t2\t2\t0\tval4\n \\N\t\\N\t\\N\t1\t1\t1\t\\N\tval2\n@@ -255,6 +268,7 @@ ALL RIGHT | join_use_nulls = 1 | copmosite key\n \\N\t\\N\t\\N\t2\t1\t2\t\\N\tval8\n \\N\t\\N\t\\N\t2\t1\t\\N\t\\N\tval3\n \\N\t\\N\t\\N\t2\t2\t\\N\t\\N\tval9\n+{% endif -%}\n ANY INNER | join_use_nulls = 1\n 4\t4\t0\t0\n 5\t5\t0\t0\n@@ -282,6 +296,7 @@ ANY LEFT | join_use_nulls = 1\n 13\t13\tval13\t0\n 14\t14\tval9\t0\n ANY RIGHT | join_use_nulls = 1\n+{% if join_algorithm != 'grace_hash' -%}\n 4\t4\t0\tval10\n 5\t5\t0\tval6\n 6\t6\t0\tval8\n@@ -294,6 +309,7 @@ ANY RIGHT | join_use_nulls = 1\n 13\t13\t0\tval9\n 14\t14\t0\tval3\n 14\t14\t0\tval7\n+{% endif -%}\n ANY INNER | join_use_nulls = 1 | copmosite key\n 2\t2\t2\t2\t2\t2\t0\t0\n ANY LEFT | join_use_nulls = 1 | copmosite key\n@@ -313,6 +329,7 @@ ANY LEFT | join_use_nulls = 1 | copmosite key\n 2\t2\t2\t2\t2\t2\tval12\t0\n 2\t2\t2\t2\t2\t2\tval9\t0\n ANY RIGHT | join_use_nulls = 1 | copmosite key\n+{% if join_algorithm != 'grace_hash' -%}\n 2\t2\t2\t2\t2\t2\t0\tval4\n \\N\t\\N\t\\N\t1\t1\t1\t\\N\tval2\n \\N\t\\N\t\\N\t1\t1\t1\t\\N\tval7\n@@ -325,3 +342,5 @@ ANY RIGHT | join_use_nulls = 1 | copmosite key\n \\N\t\\N\t\\N\t2\t1\t2\t\\N\tval8\n \\N\t\\N\t\\N\t2\t1\t\\N\t\\N\tval3\n \\N\t\\N\t\\N\t2\t2\t\\N\t\\N\tval9\n+{% endif -%}\n+{% endfor -%}\ndiff --git a/tests/queries/0_stateless/02273_full_sort_join.sql.j2 b/tests/queries/0_stateless/02273_full_sort_join.sql.j2\nindex b70d1e5f55f3..8b739330364c 100644\n--- a/tests/queries/0_stateless/02273_full_sort_join.sql.j2\n+++ b/tests/queries/0_stateless/02273_full_sort_join.sql.j2\n@@ -26,7 +26,17 @@ INSERT INTO t2\n         'val' || toString(number) as s\n     FROM numbers_mt({{ table_size - 3 }});\n \n-SET join_algorithm = 'full_sorting_merge';\n+\n+{% macro is_implemented(join_algorithm) -%}\n+{% if join_algorithm == 'grace_hash' %} -- { serverError NOT_IMPLEMENTED } {% endif %}\n+{% endmacro -%}\n+\n+{% for join_algorithm in ['default', 'full_sorting_merge', 'grace_hash'] -%}\n+\n+SET max_bytes_in_join = '{% if join_algorithm == 'grace_hash' %}10K{% else %}0{% endif %}';\n+\n+SELECT '-- {{ join_algorithm }} --';\n+SET join_algorithm = '{{ join_algorithm }}';\n \n {% for block_size in range(1, table_size + 1) -%}\n {% for kind in ['ALL', 'ANY'] -%}\n@@ -59,7 +69,7 @@ SELECT t1.key, t2.key, empty(t1.s), t2.s FROM t1\n {{ kind }} RIGHT JOIN t2\n ON t1.key == t2.key\n ORDER BY t1.key, t2.key, t2.s\n-;\n+; {{ is_implemented(join_algorithm) }}\n \n SELECT '{{ kind }} INNER | bs = {{ block_size }} | copmosite key';\n SELECT t1.key1, t1.key2, t1.key3, t2.key1, t2.key2, t2.key3, empty(t1.s), empty(t2.s) FROM t1\n@@ -80,7 +90,7 @@ SELECT t1.key1, t1.key2, t1.key3, t2.key1, t2.key2, t2.key3, empty(t1.s), t2.s F\n {{ kind }} RIGHT JOIN t2\n ON t1.key1 == t2.key1 AND t1.key2 == t2.key2 AND t1.key3 == t2.key3 AND t1.key1 == t2.key3\n ORDER BY t1.key1, t1.key2, t1.key3, t2.key1, t2.key2, t2.key3, t2.s\n-;\n+; {{ is_implemented(join_algorithm) }}\n \n {% endfor -%}\n {% endfor -%}\n@@ -108,7 +118,7 @@ SELECT t1.key, t2.key, isNull(t1.s), t2.s FROM t1\n {{ kind }} RIGHT JOIN t2\n ON t1.key == t2.key\n ORDER BY t1.key, t2.key, t2.s\n-;\n+; {{ is_implemented(join_algorithm) }}\n \n SELECT '{{ kind }} INNER | join_use_nulls = 1 | copmosite key';\n SELECT t1.key1, t1.key2, t1.key3, t2.key1, t2.key2, t2.key3, empty(t1.s), empty(t2.s) FROM t1\n@@ -129,8 +139,12 @@ SELECT t1.key1, t1.key2, t1.key3, t2.key1, t2.key2, t2.key3, empty(t1.s), t2.s F\n {{ kind }} RIGHT JOIN t2\n ON t1.key1 == t2.key1 AND t1.key2 == t2.key2 AND t1.key3 == t2.key3 AND t1.key1 == t2.key3\n ORDER BY t1.key1, t1.key2, t1.key3, t2.key1, t2.key2, t2.key3, t2.s\n-;\n+; {{ is_implemented(join_algorithm) }}\n \n+SET join_use_nulls = 0;\n+SET max_bytes_in_join = 0;\n+\n+{% endfor -%}\n {% endfor -%}\n \n DROP TABLE IF EXISTS t1;\ndiff --git a/tests/queries/0_stateless/02274_full_sort_join_nodistinct.reference.j2 b/tests/queries/0_stateless/02274_full_sort_join_nodistinct.reference.j2\nindex ca2e47d72089..2cc6c6e85d65 100644\n--- a/tests/queries/0_stateless/02274_full_sort_join_nodistinct.reference.j2\n+++ b/tests/queries/0_stateless/02274_full_sort_join_nodistinct.reference.j2\n@@ -1,3 +1,5 @@\n+{% for join_algorithm in ['full_sorting_merge', 'grace_hash'] -%}\n+--- {{ join_algorithm }} ---\n {% for block_size in range(1, 11) -%}\n t1 ALL INNER JOIN t2 | bs = {{ block_size }}\n 1\t1\t4\t5\n@@ -106,6 +108,7 @@ t1 ALL LEFT JOIN t2 | bs = {{ block_size }}\n 2\t2\tval27\t5\n 3\t3\tval3\t4\n t1 ALL RIGHT JOIN t2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 1\t1\t4\tval11\n 1\t1\t4\tval12\n 2\t2\t5\tval22\n@@ -158,6 +161,7 @@ t1 ALL RIGHT JOIN t2 | bs = {{ block_size }}\n 2\t2\t5\tval28\n 2\t2\t5\tval28\n 3\t3\t4\tval3\n+{% endif -%}\n t1 ANY INNER JOIN t2 | bs = {{ block_size }}\n 1\t1\t4\t5\n 2\t2\t5\t5\n@@ -173,6 +177,7 @@ t1 ANY LEFT JOIN t2 | bs = {{ block_size }}\n 2\t2\tval27\t5\n 3\t3\tval3\t4\n t1 ANY RIGHT JOIN t2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 1\t1\t4\tval11\n 1\t1\t4\tval12\n 2\t2\t5\tval22\n@@ -183,7 +188,9 @@ t1 ANY RIGHT JOIN t2 | bs = {{ block_size }}\n 2\t2\t5\tval27\n 2\t2\t5\tval28\n 3\t3\t4\tval3\n+{% endif -%}\n t1 ALL FULL JOIN t2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 1\t1\t4\t5\n 1\t1\t4\t5\n 2\t2\t5\t5\n@@ -236,7 +243,9 @@ t1 ALL FULL JOIN t2 | bs = {{ block_size }}\n 2\t2\t5\t5\n 2\t2\t5\t5\n 3\t3\t4\t4\n+{% endif -%}\n t1 ALL FULL JOIN USING t2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 1\t4\t5\n 1\t4\t5\n 2\t5\t5\n@@ -289,6 +298,7 @@ t1 ALL FULL JOIN USING t2 | bs = {{ block_size }}\n 2\t5\t5\n 2\t5\t5\n 3\t4\t4\n+{% endif -%}\n t1 ALL INNER JOIN tn2 | bs = {{ block_size }}\n 1\t1\t4\t5\n 1\t1\t4\t5\n@@ -305,6 +315,7 @@ t1 ALL LEFT JOIN tn2 | bs = {{ block_size }}\n 2\t\\N\tval27\t0\n 3\t3\tval3\t4\n t1 ALL RIGHT JOIN tn2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 0\t\\N\t0\tval22\n 0\t\\N\t0\tval23\n 0\t\\N\t0\tval24\n@@ -315,6 +326,7 @@ t1 ALL RIGHT JOIN tn2 | bs = {{ block_size }}\n 1\t1\t4\tval11\n 1\t1\t4\tval12\n 3\t3\t4\tval3\n+{% endif -%}\n t1 ANY INNER JOIN tn2 | bs = {{ block_size }}\n 1\t1\t4\t5\n 3\t3\t4\t4\n@@ -329,6 +341,7 @@ t1 ANY LEFT JOIN tn2 | bs = {{ block_size }}\n 2\t\\N\tval27\t0\n 3\t3\tval3\t4\n t1 ANY RIGHT JOIN tn2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 0\t\\N\t0\tval22\n 0\t\\N\t0\tval23\n 0\t\\N\t0\tval24\n@@ -339,7 +352,9 @@ t1 ANY RIGHT JOIN tn2 | bs = {{ block_size }}\n 1\t1\t4\tval11\n 1\t1\t4\tval12\n 3\t3\t4\tval3\n+{% endif -%}\n t1 ALL FULL JOIN tn2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 0\t\\N\t0\t5\n 0\t\\N\t0\t5\n 0\t\\N\t0\t5\n@@ -357,7 +372,9 @@ t1 ALL FULL JOIN tn2 | bs = {{ block_size }}\n 2\t\\N\t5\t0\n 2\t\\N\t5\t0\n 3\t3\t4\t4\n+{% endif -%}\n t1 ALL FULL JOIN USING tn2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 1\t4\t5\n 1\t4\t5\n 2\t5\t0\n@@ -375,6 +392,7 @@ t1 ALL FULL JOIN USING tn2 | bs = {{ block_size }}\n \\N\t0\t5\n \\N\t0\t5\n \\N\t0\t5\n+{% endif -%}\n tn1 ALL INNER JOIN t2 | bs = {{ block_size }}\n 1\t1\t4\t5\n 1\t1\t4\t5\n@@ -391,6 +409,7 @@ tn1 ALL LEFT JOIN t2 | bs = {{ block_size }}\n \\N\t0\tval26\t0\n \\N\t0\tval27\t0\n tn1 ALL RIGHT JOIN t2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 1\t1\t4\tval11\n 1\t1\t4\tval12\n 3\t3\t4\tval3\n@@ -401,6 +420,7 @@ tn1 ALL RIGHT JOIN t2 | bs = {{ block_size }}\n \\N\t2\t0\tval26\n \\N\t2\t0\tval27\n \\N\t2\t0\tval28\n+{% endif -%}\n tn1 ANY INNER JOIN t2 | bs = {{ block_size }}\n 1\t1\t4\t5\n 3\t3\t4\t4\n@@ -415,6 +435,7 @@ tn1 ANY LEFT JOIN t2 | bs = {{ block_size }}\n \\N\t0\tval26\t0\n \\N\t0\tval27\t0\n tn1 ANY RIGHT JOIN t2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 1\t1\t4\tval11\n 1\t1\t4\tval12\n 3\t3\t4\tval3\n@@ -425,7 +446,9 @@ tn1 ANY RIGHT JOIN t2 | bs = {{ block_size }}\n \\N\t2\t0\tval26\n \\N\t2\t0\tval27\n \\N\t2\t0\tval28\n+{% endif -%}\n tn1 ALL FULL JOIN t2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 1\t1\t4\t5\n 1\t1\t4\t5\n 3\t3\t4\t4\n@@ -443,7 +466,9 @@ tn1 ALL FULL JOIN t2 | bs = {{ block_size }}\n \\N\t2\t0\t5\n \\N\t2\t0\t5\n \\N\t2\t0\t5\n+{% endif -%}\n tn1 ALL FULL JOIN USING t2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 1\t4\t5\n 1\t4\t5\n 2\t0\t5\n@@ -461,6 +486,7 @@ tn1 ALL FULL JOIN USING t2 | bs = {{ block_size }}\n \\N\t5\t0\n \\N\t5\t0\n \\N\t5\t0\n+{% endif -%}\n tn1 ALL INNER JOIN tn2 | bs = {{ block_size }}\n 1\t1\t4\t5\n 1\t1\t4\t5\n@@ -477,6 +503,7 @@ tn1 ALL LEFT JOIN tn2 | bs = {{ block_size }}\n \\N\t\\N\tval26\t0\n \\N\t\\N\tval27\t0\n tn1 ALL RIGHT JOIN tn2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 1\t1\t4\tval11\n 1\t1\t4\tval12\n 3\t3\t4\tval3\n@@ -487,6 +514,7 @@ tn1 ALL RIGHT JOIN tn2 | bs = {{ block_size }}\n \\N\t\\N\t0\tval26\n \\N\t\\N\t0\tval27\n \\N\t\\N\t0\tval28\n+{% endif -%}\n tn1 ANY INNER JOIN tn2 | bs = {{ block_size }}\n 1\t1\t4\t5\n 3\t3\t4\t4\n@@ -501,6 +529,7 @@ tn1 ANY LEFT JOIN tn2 | bs = {{ block_size }}\n \\N\t\\N\tval26\t0\n \\N\t\\N\tval27\t0\n tn1 ANY RIGHT JOIN tn2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 1\t1\t4\tval11\n 1\t1\t4\tval12\n 3\t3\t4\tval3\n@@ -511,7 +540,9 @@ tn1 ANY RIGHT JOIN tn2 | bs = {{ block_size }}\n \\N\t\\N\t0\tval26\n \\N\t\\N\t0\tval27\n \\N\t\\N\t0\tval28\n+{% endif -%}\n tn1 ALL FULL JOIN tn2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 1\t1\t4\t5\n 1\t1\t4\t5\n 3\t3\t4\t4\n@@ -529,7 +560,9 @@ tn1 ALL FULL JOIN tn2 | bs = {{ block_size }}\n \\N\t\\N\t5\t0\n \\N\t\\N\t5\t0\n \\N\t\\N\t5\t0\n+{% endif -%}\n tn1 ALL FULL JOIN USING tn2 | bs = {{ block_size }}\n+{% if join_algorithm != 'grace_hash' -%}\n 1\t4\t5\n 1\t4\t5\n 3\t4\t4\n@@ -547,4 +580,6 @@ tn1 ALL FULL JOIN USING tn2 | bs = {{ block_size }}\n \\N\t5\t0\n \\N\t5\t0\n \\N\t5\t0\n+{% endif -%}\n+{% endfor -%}\n {% endfor -%}\ndiff --git a/tests/queries/0_stateless/02274_full_sort_join_nodistinct.sql.j2 b/tests/queries/0_stateless/02274_full_sort_join_nodistinct.sql.j2\nindex 95d3a5640162..613da65421e5 100644\n--- a/tests/queries/0_stateless/02274_full_sort_join_nodistinct.sql.j2\n+++ b/tests/queries/0_stateless/02274_full_sort_join_nodistinct.sql.j2\n@@ -15,7 +15,17 @@ INSERT INTO tn1 VALUES (1, 'val1'), (NULL, 'val21'), (NULL, 'val22'), (NULL, 'va\n INSERT INTO t2 VALUES (1, 'val11'), (1, 'val12'), (2, 'val22'), (2, 'val23'), (2, 'val24'), (2, 'val25'), (2, 'val26'), (2, 'val27'), (2, 'val28'), (3, 'val3');\n INSERT INTO tn2 VALUES (1, 'val11'), (1, 'val12'), (NULL, 'val22'), (NULL, 'val23'), (NULL, 'val24'), (NULL, 'val25'), (NULL, 'val26'), (NULL, 'val27'), (NULL, 'val28'), (3, 'val3');\n \n-SET join_algorithm = 'full_sorting_merge';\n+{% macro is_implemented(join_algorithm) -%}\n+{% if join_algorithm == 'grace_hash' %} -- { serverError NOT_IMPLEMENTED } {% endif %}\n+{% endmacro -%}\n+\n+{% for join_algorithm in ['full_sorting_merge', 'grace_hash'] -%}\n+\n+SET max_bytes_in_join = '{% if join_algorithm == 'grace_hash' %}10K{% else %}0{% endif %}';\n+\n+SET join_algorithm = '{{ join_algorithm }}';\n+\n+SELECT '--- {{ join_algorithm }} ---';\n \n {% for block_size in range(1, 11) -%}\n SET max_block_size = {{ block_size }};\n@@ -30,17 +40,20 @@ SELECT '{{ t1 }} {{ kind }} LEFT JOIN {{ t2 }} | bs = {{ block_size }}';\n SELECT t1.key, t2.key, t1.s, length(t2.s) FROM {{ t1 }} AS t1 {{ kind }} LEFT JOIN {{ t2 }} AS t2 ON t1.key == t2.key ORDER BY t1.key, t2.key, t1.s;\n \n SELECT '{{ t1 }} {{ kind }} RIGHT JOIN {{ t2 }} | bs = {{ block_size }}';\n-SELECT t1.key, t2.key, length(t1.s), t2.s FROM {{ t1 }} AS t1 {{ kind }} RIGHT JOIN {{ t2 }} AS t2 ON t1.key == t2.key ORDER BY t1.key, t2.key, t2.s;\n+SELECT t1.key, t2.key, length(t1.s), t2.s FROM {{ t1 }} AS t1 {{ kind }} RIGHT JOIN {{ t2 }} AS t2 ON t1.key == t2.key ORDER BY t1.key, t2.key, t2.s; {{ is_implemented(join_algorithm) }}\n \n {% endfor -%}\n \n SELECT '{{ t1 }} ALL FULL JOIN {{ t2 }} | bs = {{ block_size }}';\n-SELECT t1.key, t2.key, length(t1.s), length(t2.s) FROM {{ t1 }} AS t1 {{ kind }} FULL JOIN {{ t2 }} AS t2 ON t1.key == t2.key ORDER BY t1.key, t2.key, length(t1.s), length(t2.s);\n+SELECT t1.key, t2.key, length(t1.s), length(t2.s) FROM {{ t1 }} AS t1 {{ kind }} FULL JOIN {{ t2 }} AS t2 ON t1.key == t2.key ORDER BY t1.key, t2.key, length(t1.s), length(t2.s); {{ is_implemented(join_algorithm) }}\n \n SELECT '{{ t1 }} ALL FULL JOIN USING {{ t2 }} | bs = {{ block_size }}';\n-SELECT key, length(t1.s), length(t2.s) FROM {{ t1 }} AS t1 ALL FULL JOIN {{ t2 }} AS t2 USING (key) ORDER BY key, length(t1.s), length(t2.s);\n+SELECT key, length(t1.s), length(t2.s) FROM {{ t1 }} AS t1 ALL FULL JOIN {{ t2 }} AS t2 USING (key) ORDER BY key, length(t1.s), length(t2.s); {{ is_implemented(join_algorithm) }}\n \n {% endfor -%}\n+{% endfor -%}\n+SET max_bytes_in_join = 0;\n+\n {% endfor -%}\n \n DROP TABLE IF EXISTS t1;\ndiff --git a/tests/queries/0_stateless/02275_full_sort_join_long.reference b/tests/queries/0_stateless/02275_full_sort_join_long.reference\nindex 91b81d5ab3a4..9ec06aea3e64 100644\n--- a/tests/queries/0_stateless/02275_full_sort_join_long.reference\n+++ b/tests/queries/0_stateless/02275_full_sort_join_long.reference\n@@ -1,3 +1,4 @@\n+-- full_sorting_merge --\n ALL INNER\n 500353531835\t500353531835\t1000342\t1000342\t1000342\n ALL LEFT\n@@ -16,18 +17,6 @@ ALL LEFT\n 50195752660639\t500353531835\t10369589\t10369589\t1000342\n ALL RIGHT\n 500353531835\t684008812186\t1367170\t1000342\t1367170\n-ALL INNER\n-500353531835\t500353531835\t1000342\t1000342\t1000342\n-ALL LEFT\n-50195752660639\t500353531835\t10369589\t10369589\t1000342\n-ALL RIGHT\n-500353531835\t684008812186\t1367170\t1000342\t1367170\n-ANY INNER\n-199622811843\t199622811843\t399458\t399458\t399458\n-ANY LEFT\n-50010619420459\t315220291655\t10000000\t10000000\t630753\n-ANY RIGHT\n-316611844056\t500267124407\t1000000\t633172\t1000000\n ANY INNER\n 199622811843\t199622811843\t399458\t399458\t399458\n ANY LEFT\n@@ -46,3 +35,22 @@ ANY LEFT\n 50010619420459\t315220291655\t10000000\t10000000\t630753\n ANY RIGHT\n 316611844056\t500267124407\t1000000\t633172\t1000000\n+-- grace_hash --\n+ALL INNER\n+500353531835\t500353531835\t1000342\t1000342\t1000342\n+ALL LEFT\n+50195752660639\t500353531835\t10369589\t10369589\t1000342\n+ALL RIGHT\n+skipped\n+ALL INNER\n+500353531835\t500353531835\t1000342\t1000342\t1000342\n+ALL LEFT\n+50195752660639\t500353531835\t10369589\t10369589\t1000342\n+ALL RIGHT\n+skipped\n+ALL INNER\n+500353531835\t500353531835\t1000342\t1000342\t1000342\n+ALL LEFT\n+50195752660639\t500353531835\t10369589\t10369589\t1000342\n+ALL RIGHT\n+skipped\ndiff --git a/tests/queries/0_stateless/02275_full_sort_join_long.sql.j2 b/tests/queries/0_stateless/02275_full_sort_join_long.sql.j2\nindex 29f1d46e2c81..98cc46c9cb46 100644\n--- a/tests/queries/0_stateless/02275_full_sort_join_long.sql.j2\n+++ b/tests/queries/0_stateless/02275_full_sort_join_long.sql.j2\n@@ -1,4 +1,4 @@\n--- Tags: long\n+-- Tags: long, no-tsan, no-asan, no-ubsan, no-msan, no-debug\n DROP TABLE IF EXISTS t1;\n DROP TABLE IF EXISTS t2;\n \n@@ -22,13 +22,26 @@ INSERT INTO t2\n     FROM numbers_mt({{ rtable_size }})\n ;\n \n-SET join_algorithm = 'full_sorting_merge';\n+{% macro is_implemented(join_algorithm) -%}\n+{% if join_algorithm == 'grace_hash' %} -- { serverError NOT_IMPLEMENTED }\n+SELECT 'skipped';\n+{% endif -%}\n+{% endmacro -%}\n+\n+{% for join_algorithm in ['full_sorting_merge', 'grace_hash'] -%}\n+\n+SET max_bytes_in_join = '{% if join_algorithm == 'grace_hash' %}1M{% else %}0{% endif %}';\n+\n+SELECT '-- {{ join_algorithm }} --';\n+SET join_algorithm = '{{ join_algorithm }}';\n \n {% for kind in ['ALL', 'ANY'] -%}\n-{% for block_size in [32001, 65505, 65536, range(32001, 65536) | random] %}\n+{% for block_size in [10240, 32001, 65536] %}\n \n SET max_block_size = {{ block_size }};\n \n+{% if not (kind == 'ANY' and join_algorithm == 'grace_hash') -%}\n+\n SELECT '{{ kind }} INNER';\n SELECT sum(t1.key), sum(t2.key), count(), countIf(t1.key != 0), countIf(t2.key != 0) FROM t1\n {{ kind }} INNER JOIN t2\n@@ -45,7 +58,13 @@ SELECT '{{ kind }} RIGHT';\n SELECT sum(t1.key), sum(t2.key), count(), countIf(t1.key != 0), countIf(t2.key != 0) FROM t1\n {{ kind }} RIGHT JOIN t2\n ON t1.key == t2.key\n-;\n+; {{ is_implemented(join_algorithm) }}\n \n+{% endif -%}\n+\n+{% endfor -%}\n {% endfor -%}\n+\n+SET max_bytes_in_join = 0;\n+\n {% endfor -%}\ndiff --git a/tests/queries/0_stateless/02367_join_pushdown_column_not_found.reference b/tests/queries/0_stateless/02367_join_pushdown_column_not_found.reference\nindex 98fb6a686563..627e1097cda3 100644\n--- a/tests/queries/0_stateless/02367_join_pushdown_column_not_found.reference\n+++ b/tests/queries/0_stateless/02367_join_pushdown_column_not_found.reference\n@@ -2,3 +2,4 @@\n 1\n 1\n 1\n+1\ndiff --git a/tests/queries/0_stateless/02367_join_pushdown_column_not_found.sql.j2 b/tests/queries/0_stateless/02367_join_pushdown_column_not_found.sql.j2\nindex 95f3c5be7115..86e7bca00a92 100644\n--- a/tests/queries/0_stateless/02367_join_pushdown_column_not_found.sql.j2\n+++ b/tests/queries/0_stateless/02367_join_pushdown_column_not_found.sql.j2\n@@ -1,4 +1,4 @@\n-{% for join_algorithm in ['default', 'full_sorting_merge', 'hash', 'partial_merge'] -%}\n+{% for join_algorithm in ['default', 'full_sorting_merge', 'hash', 'partial_merge', 'grace_hash'] -%}\n \n SET join_algorithm = '{{ join_algorithm }}';\n \ndiff --git a/tests/queries/1_stateful/00172_parallel_join.reference.j2 b/tests/queries/1_stateful/00172_parallel_join.reference.j2\nindex 30088c915005..1a43f1fb6ef3 100644\n--- a/tests/queries/1_stateful/00172_parallel_join.reference.j2\n+++ b/tests/queries/1_stateful/00172_parallel_join.reference.j2\n@@ -1,4 +1,4 @@\n-{% for join_algorithm in ['hash', 'parallel_hash', 'full_sorting_merge'] -%}\n+{% for join_algorithm in ['hash', 'parallel_hash', 'full_sorting_merge', 'grace_hash'] -%}\n --- {{ join_algorithm }} ---\n 2014-03-17\t1406958\t265108\n 2014-03-19\t1405797\t261624\n@@ -24,7 +24,7 @@ mail.ru\t87949\t22225\n best.ru\t58537\t55\n korablitz.ru\t51844\t0\n hurpass.com\t49671\t1251\n-{% if join_algorithm != 'full_sorting_merge' -%}\n+{% if join_algorithm not in  ['full_sorting_merge', 'grace_hash'] -%}\n 37292\t0\t35642\n 92887\t252214\t0\n 7842\t196036\t0\ndiff --git a/tests/queries/1_stateful/00172_parallel_join.sql.j2 b/tests/queries/1_stateful/00172_parallel_join.sql.j2\nindex 39c981e0d316..ff077f43874f 100644\n--- a/tests/queries/1_stateful/00172_parallel_join.sql.j2\n+++ b/tests/queries/1_stateful/00172_parallel_join.sql.j2\n@@ -1,4 +1,6 @@\n-{% for join_algorithm in ['hash', 'parallel_hash', 'full_sorting_merge'] -%}\n+{% for join_algorithm in ['hash', 'parallel_hash', 'full_sorting_merge', 'grace_hash'] -%}\n+\n+SET max_bytes_in_join = '{% if join_algorithm == 'grace_hash' %}20K{% else %}0{% endif %}';\n \n SELECT '--- {{ join_algorithm }} ---';\n \n@@ -69,7 +71,7 @@ ORDER BY hits DESC\n LIMIT 10\n SETTINGS joined_subquery_requires_alias = 0;\n \n-{% if join_algorithm != 'full_sorting_merge' -%}\n+{% if join_algorithm not in ['full_sorting_merge', 'grace_hash'] -%}\n \n SELECT CounterID FROM test.visits ARRAY JOIN Goals.ID WHERE CounterID = 942285 ORDER BY CounterID;\n \n@@ -211,4 +213,6 @@ ALL INNER JOIN\n ) AS b\n USING k ORDER BY joined;\n \n-{% endfor %}\n+SET max_bytes_in_join = 0;\n+\n+{% endfor -%}\n",
  "problem_statement": "Grace hash join\nImplement `grace join`. I.e. we have `T join U`. Grace join splits `T` and `U` in buckets `T0, T1, ..., Tn` `U0, U1, ..., Un` with hash function and then join same hashed buckets `T0 vs U0, T1 vs U1, ..., Tn vs Un` with another join algorithm (generally hash-join).\r\n\r\nWe need inplement `class GraceJoin : public IJoin` that would use HashJoin per bucket inside. Also we need support flush right table buckets on disk. For left table buckets there's 2 general variants: flush buckets on disk or join not full buckets that we have in memory right now.\n",
  "hints_text": "@4ertus2 ,\r\n      When the function \"Grace hash join\" can be implemented?\nI would like call the 'Grace Hash Join' as Hybrid Hash Join, the idea present in http://www.interdb.jp/pg/pgsql03.html, and more useful, CH should have it, maybe i will have a try :)\n@compasses\r\n    If this function can be implemented, it will be very exciting for big data join\n@chang0391 Do you know when this feature will be implemented?",
  "created_at": "2022-06-17T23:47:23Z",
  "modified_files": [
    "programs/server/Server.cpp",
    "src/Common/BitHelpers.h",
    "src/Common/HashTable/Hash.h",
    "src/Common/WeakHash.h",
    "src/Core/Joins.cpp",
    "src/Core/Joins.h",
    "src/Core/Settings.h",
    "src/Core/SettingsEnums.cpp",
    "src/Interpreters/ConcurrentHashJoin.cpp",
    "src/Interpreters/ConcurrentHashJoin.h",
    "src/Interpreters/DirectJoin.h",
    "src/Interpreters/ExpressionAnalyzer.cpp",
    "src/Interpreters/FullSortingMergeJoin.h",
    "b/src/Interpreters/GraceHashJoin.cpp",
    "b/src/Interpreters/GraceHashJoin.h",
    "src/Interpreters/HashJoin.cpp",
    "src/Interpreters/HashJoin.h",
    "src/Interpreters/IJoin.h",
    "src/Interpreters/JoinSwitcher.cpp",
    "src/Interpreters/JoinSwitcher.h",
    "src/Interpreters/JoinUtils.cpp",
    "src/Interpreters/JoinUtils.h",
    "src/Interpreters/MergeJoin.cpp",
    "src/Interpreters/MergeJoin.h",
    "src/Planner/PlannerJoinTree.cpp",
    "src/Planner/PlannerJoins.cpp",
    "src/Planner/PlannerJoins.h",
    "src/Processors/QueryPlan/CreateSetAndFilterOnTheFlyStep.h",
    "src/Processors/Transforms/JoiningTransform.cpp",
    "src/Processors/Transforms/JoiningTransform.h",
    "src/QueryPipeline/QueryPipelineBuilder.cpp"
  ],
  "modified_test_files": [
    "b/tests/performance/grace_hash_join.xml",
    "tests/queries/0_stateless/00800_low_cardinality_merge_join.reference.j2",
    "tests/queries/0_stateless/00800_low_cardinality_merge_join.sql.j2",
    "tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.reference",
    "tests/queries/0_stateless/01010_partial_merge_join_const_and_lc.sql",
    "tests/queries/0_stateless/01010_pmj_on_disk.reference",
    "tests/queries/0_stateless/01010_pmj_on_disk.sql",
    "tests/queries/0_stateless/01120_join_constants.sql",
    "tests/queries/0_stateless/01144_join_rewrite_with_ambiguous_column_and_view.sql",
    "tests/queries/0_stateless/01710_projection_with_joins.sql",
    "tests/queries/0_stateless/01721_join_implicit_cast_long.reference",
    "b/tests/queries/0_stateless/01721_join_implicit_cast_long.reference.j2",
    "tests/queries/0_stateless/01721_join_implicit_cast_long.sql.j2",
    "tests/queries/0_stateless/02273_full_sort_join.reference.j2",
    "tests/queries/0_stateless/02273_full_sort_join.sql.j2",
    "tests/queries/0_stateless/02274_full_sort_join_nodistinct.reference.j2",
    "tests/queries/0_stateless/02274_full_sort_join_nodistinct.sql.j2",
    "tests/queries/0_stateless/02275_full_sort_join_long.reference",
    "tests/queries/0_stateless/02275_full_sort_join_long.sql.j2",
    "tests/queries/0_stateless/02367_join_pushdown_column_not_found.reference",
    "tests/queries/0_stateless/02367_join_pushdown_column_not_found.sql.j2",
    "tests/queries/1_stateful/00172_parallel_join.reference.j2",
    "tests/queries/1_stateful/00172_parallel_join.sql.j2"
  ]
}