diff --git a/libs/libcommon/src/DateLUT.cpp b/libs/libcommon/src/DateLUT.cpp
index cac38634a265..c7dcf5689fff 100644
--- a/libs/libcommon/src/DateLUT.cpp
+++ b/libs/libcommon/src/DateLUT.cpp
@@ -6,6 +6,7 @@
 #include <Poco/DigestStream.h>
 #include <fstream>
 
+
 namespace
 {
 
@@ -22,6 +23,7 @@ Poco::DigestEngine::Digest calcSHA1(const std::string & path)
     return digest_engine.digest();
 }
 
+
 std::string determineDefaultTimeZone()
 {
     namespace fs = boost::filesystem;
@@ -50,22 +52,45 @@ std::string determineDefaultTimeZone()
     else
     {
         error_prefix = "Could not determine local time zone: ";
-        tz_file_path = "/etc/localtime"; /// FIXME: in case of no TZ use the immediate linked file as tz name.
+        tz_file_path = "/etc/localtime";
+
+        /// No TZ variable and no tzdata installed (e.g. Docker)
+        if (!fs::exists(tz_file_path))
+            return "UTC";
+
+        /// Read symlink but not transitive.
+        /// Example:
+        ///  /etc/localtime -> /usr/share/zoneinfo//UTC
+        ///  /usr/share/zoneinfo//UTC -> UCT
+        /// But the preferred time zone name is pointed by the first link (UTC), and the second link is just an internal detail.
+        if (fs::is_symlink(tz_file_path))
+            tz_file_path = fs::read_symlink(tz_file_path);
     }
 
     try
     {
         tz_database_path = fs::canonical(tz_database_path);
-        tz_file_path = fs::canonical(tz_file_path, tz_database_path);
 
         /// The tzdata file exists. If it is inside the tz_database_dir,
         /// then the relative path is the time zone id.
-        fs::path relative_path = tz_file_path.lexically_relative(tz_database_path);
-        if (!relative_path.empty() && *relative_path.begin() != ".." && *relative_path.begin() != ".")
-            return tz_name.empty() ? relative_path.string() : tz_name;
+        {
+            fs::path relative_path = tz_file_path.lexically_relative(tz_database_path);
+
+            if (!relative_path.empty() && *relative_path.begin() != ".." && *relative_path.begin() != ".")
+                return tz_name.empty() ? relative_path.string() : tz_name;
+        }
+
+        /// Try the same with full symlinks resolution
+        {
+            tz_file_path = fs::canonical(tz_file_path, tz_database_path);
+
+            fs::path relative_path = tz_file_path.lexically_relative(tz_database_path);
+            if (!relative_path.empty() && *relative_path.begin() != ".." && *relative_path.begin() != ".")
+                return tz_name.empty() ? relative_path.string() : tz_name;
+        }
 
-        /// The file is not inside the tz_database_dir, so we hope that it was copied and
-        /// try to find the file with exact same contents in the database.
+        /// The file is not inside the tz_database_dir, so we hope that it was copied (not symlinked)
+        /// and try to find the file with exact same contents in the database.
 
         size_t tzfile_size = fs::file_size(tz_file_path);
         Poco::SHA1Engine::Digest tzfile_sha1 = calcSHA1(tz_file_path.string());
