{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 51481,
  "instance_id": "ClickHouse__ClickHouse-51481",
  "issue_numbers": [
    "51660",
    "51211"
  ],
  "base_commit": "60908ac269a2fa73f0dedd0ab5a844da660211c6",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/liftUpFunctions.cpp b/src/Processors/QueryPlan/Optimizations/liftUpFunctions.cpp\nindex c3b03a5385f8..34a1fc2bb882 100644\n--- a/src/Processors/QueryPlan/Optimizations/liftUpFunctions.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/liftUpFunctions.cpp\n@@ -4,6 +4,7 @@\n #include <Processors/QueryPlan/Optimizations/Optimizations.h>\n #include <Processors/QueryPlan/SortingStep.h>\n #include <Common/Exception.h>\n+#include <DataTypes/IDataType.h>\n \n namespace DB\n {\n@@ -28,6 +29,20 @@ const DB::DataStream & getChildOutputStream(DB::QueryPlan::Node & node)\n namespace DB::QueryPlanOptimizations\n {\n \n+/// This is a check that output columns does not have the same name\n+/// This is ok for DAG, but may introduce a bug in a SotringStep cause columns are selected by name.\n+static bool areOutputsConvertableToBlock(const ActionsDAG::NodeRawConstPtrs & outputs)\n+{\n+    std::unordered_set<std::string_view> names;\n+    for (const auto & output : outputs)\n+    {\n+        if (!names.emplace(output->result_name).second)\n+            return false;\n+    }\n+\n+    return true;\n+}\n+\n size_t tryExecuteFunctionsAfterSorting(QueryPlan::Node * parent_node, QueryPlan::Nodes & nodes)\n {\n     if (parent_node->children.size() != 1)\n@@ -57,6 +72,9 @@ size_t tryExecuteFunctionsAfterSorting(QueryPlan::Node * parent_node, QueryPlan:\n     if (unneeded_for_sorting->trivial())\n         return 0;\n \n+    if (!areOutputsConvertableToBlock(needed_for_sorting->getOutputs()))\n+        return 0;\n+\n     // Sorting (parent_node) -> Expression (child_node)\n     auto & node_with_needed = nodes.emplace_back();\n     std::swap(node_with_needed.children, child_node->children);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug.reference b/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug.sql b/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug.sql\nnew file mode 100644\nindex 000000000000..4a9ede363358\n--- /dev/null\n+++ b/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug.sql\n@@ -0,0 +1,133 @@\n+drop table if exists test;\n+drop table if exists test1;\n+\n+CREATE TABLE test\n+(\n+    `pt` String,\n+    `count_distinct_exposure_uv` AggregateFunction(uniqHLL12, Int64)\n+)\n+ENGINE = AggregatingMergeTree\n+ORDER BY pt;\n+\n+SELECT  *\n+FROM\n+(\n+        SELECT  m0.pt                                                                                                                   AS pt\n+               ,m0.`exposure_uv`                                                                                                        AS exposure_uv\n+               ,round(m2.exposure_uv,4)                                                                                                 AS exposure_uv_hb_last_value\n+               ,if(m2.exposure_uv IS NULL OR m2.exposure_uv = 0,NULL,round((m0.exposure_uv - m2.exposure_uv) * 1.0 / m2.exposure_uv,4)) AS exposure_uv_hb_diff_percent\n+               ,round(m1.exposure_uv,4)                                                                                                 AS exposure_uv_tb_last_value\n+               ,if(m1.exposure_uv IS NULL OR m1.exposure_uv = 0,NULL,round((m0.exposure_uv - m1.exposure_uv) * 1.0 / m1.exposure_uv,4)) AS exposure_uv_tb_diff_percent\n+        FROM\n+        (\n+                SELECT  m0.pt                          AS pt\n+                       ,`exposure_uv`                  AS `exposure_uv`\n+                FROM\n+                (\n+                        SELECT  pt                                                                     AS pt\n+                               ,CASE WHEN COUNT(`exposure_uv`) > 0 THEN AVG(`exposure_uv`)  ELSE 0 END AS `exposure_uv`\n+                        FROM\n+                        (\n+                                SELECT  pt                                         AS pt\n+                                       ,uniqHLL12Merge(count_distinct_exposure_uv) AS `exposure_uv`\n+                                FROM test\n+                                GROUP BY  pt\n+                        ) m\n+                        GROUP BY  pt\n+                ) m0\n+        ) m0\n+        LEFT JOIN\n+        (\n+                SELECT  m0.pt                          AS pt\n+                       ,`exposure_uv`                  AS `exposure_uv`\n+                FROM\n+                (\n+                        SELECT  formatDateTime(addYears(parseDateTimeBestEffort(pt),1),'%Y%m%d')       AS pt\n+                               ,CASE WHEN COUNT(`exposure_uv`) > 0 THEN AVG(`exposure_uv`)  ELSE 0 END AS `exposure_uv`\n+                        FROM\n+                        (\n+                                SELECT  pt                                         AS pt\n+                                       ,uniqHLL12Merge(count_distinct_exposure_uv) AS `exposure_uv`\n+                                FROM test\n+                                GROUP BY  pt\n+                        ) m\n+                        GROUP BY  pt\n+                ) m0\n+        ) m1\n+        ON m0.pt = m1.pt\n+        LEFT JOIN\n+        (\n+                SELECT  m0.pt                          AS pt\n+                       ,`exposure_uv`                  AS `exposure_uv`\n+                FROM\n+                (\n+                        SELECT  formatDateTime(addDays(toDate(parseDateTimeBestEffort(pt)),1),'%Y%m%d') AS pt\n+                               ,CASE WHEN COUNT(`exposure_uv`) > 0 THEN AVG(`exposure_uv`)  ELSE 0 END  AS `exposure_uv`\n+                        FROM\n+                        (\n+                                SELECT  pt                                         AS pt\n+                                       ,uniqHLL12Merge(count_distinct_exposure_uv) AS `exposure_uv`\n+                                FROM test\n+                                GROUP BY  pt\n+                        ) m\n+                        GROUP BY  pt\n+                ) m0\n+        ) m2\n+        ON m0.pt = m2.pt\n+) c0\n+ORDER BY pt ASC, exposure_uv DESC\n+settings join_use_nulls = 1;\n+\n+CREATE TABLE test1\n+(\n+    `pt` String,\n+    `exposure_uv` Float64\n+)\n+ENGINE = Memory;\n+\n+SELECT  *\n+FROM\n+(\n+        SELECT  m0.pt\n+               ,m0.exposure_uv AS exposure_uv\n+               ,round(m2.exposure_uv,4)\n+        FROM\n+        (\n+                SELECT  pt\n+                       ,exposure_uv\n+                FROM test1\n+        ) m0\n+        LEFT JOIN\n+        (\n+                SELECT  pt\n+                       ,exposure_uv\n+                FROM test1\n+        ) m1\n+        ON m0.pt = m1.pt\n+        LEFT JOIN\n+        (\n+                SELECT  pt\n+                        ,exposure_uv\n+                FROM test1\n+        ) m2\n+        ON m0.pt = m2.pt\n+) c0\n+ORDER BY exposure_uv\n+settings join_use_nulls = 1;\n+\n+SELECT\n+    pt AS pt,\n+    exposure_uv AS exposure_uv\n+FROM\n+(\n+    SELECT\n+        pt\n+    FROM test1\n+) AS m0\n+FULL OUTER JOIN\n+(\n+    SELECT\n+        pt,\n+        exposure_uv\n+    FROM test1\n+) AS m1 ON m0.pt = m1.pt;\ndiff --git a/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug_2.reference b/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug_2.reference\nnew file mode 100644\nindex 000000000000..bcc55e509583\n--- /dev/null\n+++ b/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug_2.reference\n@@ -0,0 +1,3 @@\n+20230626\t0.3156979034107179\t\\N\t\\N\n+20230626\t0.2624629016490004\t\\N\t\\N\n+20230626\t0.19390556368960468\t\\N\t\\N\ndiff --git a/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug_2.sql b/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug_2.sql\nnew file mode 100644\nindex 000000000000..b0221635fe95\n--- /dev/null\n+++ b/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug_2.sql\n@@ -0,0 +1,107 @@\n+create table test1 (\n+    `pt` String,\n+    `brand_name` String,\n+    `total_indirect_order_cnt` Float64,\n+    `total_indirect_gmv` Float64\n+) ENGINE = Memory;\n+\n+create table test2 (\n+    `pt` String,\n+    `brand_name` String,\n+    `exposure_uv` Float64,\n+    `click_uv` Float64\n+) ENGINE = Memory;\n+\n+INSERT INTO test1 (`pt`, `brand_name`, `total_indirect_order_cnt`, `total_indirect_gmv`) VALUES ('20230625', 'LINING', 2232, 1008710), ('20230625', 'adidas', 125, 58820), ('20230625', 'Nike', 1291, 1033020), ('20230626', 'Nike', 1145, 938926), ('20230626', 'LINING', 1904, 853336), ('20230626', 'adidas', 133, 62546), ('20220626', 'LINING', 3747, 1855203), ('20220626', 'Nike', 2295, 1742665), ('20220626', 'adidas', 302, 122388);\n+\n+INSERT INTO test2 (`pt`, `brand_name`, `exposure_uv`, `click_uv`) VALUES ('20230625', 'Nike', 2012913, 612831),  ('20230625', 'adidas', 480277, 96176), ('20230625', 'LINING', 2474234, 627814), ('20230626', 'Nike', 1934666, 610770), ('20230626', 'adidas', 469904, 91117), ('20230626', 'LINING', 2285142, 599765), ('20220626', 'Nike', 2979656, 937166), ('20220626', 'adidas', 704751, 124250), ('20220626', 'LINING', 3163884, 1010221);\n+\n+SELECT * FROM (\n+        SELECT  m0.pt                                                                                     AS pt\n+               ,m0.`uvctr`                                                                                AS uvctr\n+               ,round(m1.uvctr,4)                                                                         AS uvctr_hb_last_value\n+               ,round(m2.uvctr,4)                                                                         AS uvctr_tb_last_value\n+        FROM\n+        (\n+                SELECT  m0.pt                                                                                                           AS pt\n+                       ,COALESCE(m0.brand_name,m1.brand_name)                                                                           AS brand_name\n+                       ,if(isNaN(`click_uv` / `exposure_uv`) OR isInfinite(`click_uv` / `exposure_uv`),NULL,`click_uv` / `exposure_uv`) AS `uvctr`\n+                FROM\n+                (\n+                                SELECT  pt          AS pt\n+                                       ,brand_name  AS `brand_name`\n+                                       ,exposure_uv AS `exposure_uv`\n+                                       ,click_uv    AS `click_uv`\n+                                FROM test2\n+                                WHERE pt = '20230626'\n+                ) m0\n+                FULL JOIN\n+                (\n+                                SELECT  pt                        AS pt\n+                                       ,brand_name                AS `brand_name`\n+                                       ,total_indirect_order_cnt  AS `total_indirect_order_cnt`\n+                                       ,total_indirect_gmv        AS `total_indirect_gmv`\n+                                FROM test1\n+                                WHERE pt = '20230626'\n+                ) m1\n+                ON m0.brand_name = m1.brand_name AND m0.pt = m1.pt\n+        ) m0\n+        LEFT JOIN\n+        (\n+                SELECT  m0.pt AS pt\n+                       ,if(isNaN(`click_uv` / `exposure_uv`) OR isInfinite(`click_uv` / `exposure_uv`),NULL,`click_uv` / `exposure_uv`) AS `uvctr`\n+                       ,COALESCE(m0.brand_name,m1.brand_name)                                                                 AS brand_name\n+                       ,`exposure_uv`                                                                                         AS `exposure_uv`\n+                       ,`click_uv`\n+                FROM\n+                (\n+                                SELECT  pt          AS pt\n+                                       ,brand_name  AS `brand_name`\n+                                       ,exposure_uv AS `exposure_uv`\n+                                       ,click_uv    AS `click_uv`\n+                                FROM test2\n+                                WHERE pt = '20230625'\n+                ) m0\n+                FULL JOIN\n+                (\n+                                SELECT  pt                       AS pt\n+                                       ,brand_name               AS `brand_name`\n+                                       ,total_indirect_order_cnt AS `total_indirect_order_cnt`\n+                                       ,total_indirect_gmv       AS `total_indirect_gmv`\n+                                FROM test1\n+                                WHERE pt = '20230625'\n+                ) m1\n+                ON m0.brand_name = m1.brand_name AND m0.pt = m1.pt\n+        ) m1\n+        ON m0.brand_name = m1.brand_name AND m0.pt = m1.pt\n+        LEFT JOIN\n+        (\n+                SELECT  m0.pt AS pt\n+                       ,if(isNaN(`click_uv` / `exposure_uv`) OR isInfinite(`click_uv` / `exposure_uv`),NULL,`click_uv` / `exposure_uv`) AS `uvctr`\n+                       ,COALESCE(m0.brand_name,m1.brand_name)                                                                 AS brand_name\n+                       ,`exposure_uv`                                                                                         AS `exposure_uv`\n+                       ,`click_uv`\n+                FROM\n+                (\n+                                SELECT  pt          AS pt\n+                                       ,brand_name  AS `brand_name`\n+                                       ,exposure_uv AS `exposure_uv`\n+                                       ,click_uv    AS `click_uv`\n+                                FROM test2\n+                                WHERE pt = '20220626'\n+                ) m0\n+                FULL JOIN\n+                (\n+                                SELECT  pt                        AS pt\n+                                       ,brand_name                AS `brand_name`\n+                                       ,total_indirect_order_cnt  AS `total_indirect_order_cnt`\n+                                       ,total_indirect_gmv        AS `total_indirect_gmv`\n+                                FROM test1\n+                                WHERE pt = '20220626'\n+                ) m1\n+                ON m0.brand_name = m1.brand_name AND m0.pt = m1.pt\n+        ) m2\n+        ON m0.brand_name = m2.brand_name AND m0.pt = m2.pt\n+) c0\n+ORDER BY pt ASC, uvctr DESC;\n+\n",
  "problem_statement": "Incorrect sort result after join\n> You have to provide the following information whenever possible.\r\n\r\nWe have two tables with data below:\r\n```\r\ncreate table test1 (\r\n    `pt` String,\r\n    `brand_name` String,\r\n    `total_indirect_order_cnt` Float64,\r\n    `total_indirect_gmv` Float64\r\n) ENGINE = Memory\r\n\r\ncreate table test2 (\r\n    `pt` String,\r\n    `brand_name` String,\r\n    `exposure_uv` Float64,\r\n    `click_uv` Float64\r\n) ENGINE = Memory\r\n\r\nINSERT INTO test1 (`pt`, `brand_name`, `total_indirect_order_cnt`, `total_indirect_gmv`) VALUES\r\n('20230625', 'LINING', 2232, 1008710),\r\n('20230625', 'adidas', 125, 58820),\r\n('20230625', 'Nike', 1291, 1033020), \r\n('20230626', 'Nike', 1145, 938926),\r\n('20230626', 'LINING', 1904, 853336),\r\n('20230626', 'adidas', 133, 62546),\r\n('20220626', 'LINING', 3747, 1855203),\r\n('20220626', 'Nike', 2295, 1742665), \r\n('20220626', 'adidas', 302, 122388);\r\n\r\nINSERT INTO test2 (`pt`, `brand_name`, `exposure_uv`, `click_uv`) VALUES \r\n('20230625', 'Nike', 2012913, 612831),\r\n ('20230625', 'adidas', 480277, 96176),\r\n ('20230625', 'LINING', 2474234, 627814),\r\n ('20230626', 'Nike', 1934666, 610770),\r\n ('20230626', 'adidas', 469904, 91117),\r\n ('20230626', 'LINING', 2285142, 599765),\r\n ('20220626', 'Nike', 2979656, 937166),\r\n ('20220626', 'adidas', 704751, 124250),\r\n ('20220626', 'LINING', 3163884, 1010221);\r\n```\r\n\r\nWhen we query using sql below:\r\n```\r\nSELECT * FROM (\r\n        SELECT  m0.pt                                                                                     AS pt\r\n               ,m0.`uvctr`                                                                                AS uvctr\r\n               ,round(m1.uvctr,4)                                                                         AS uvctr_hb_last_value\r\n               ,round(m2.uvctr,4)                                                                         AS uvctr_tb_last_value\r\n        FROM\r\n        (\r\n                SELECT  m0.pt                                                                                                           AS pt\r\n                       ,COALESCE(m0.brand_name,m1.brand_name)                                                                           AS brand_name\r\n                       ,if(isNaN(`click_uv` / `exposure_uv`) OR isInfinite(`click_uv` / `exposure_uv`),NULL,`click_uv` / `exposure_uv`) AS `uvctr`\r\n                FROM\r\n                (\r\n                                SELECT  pt          AS pt\r\n                                       ,brand_name  AS `brand_name`\r\n                                       ,exposure_uv AS `exposure_uv`\r\n                                       ,click_uv    AS `click_uv`\r\n                                FROM test2\r\n                                WHERE pt = '20230626'\r\n                ) m0\r\n                FULL JOIN\r\n                (\r\n                                SELECT  pt                        AS pt\r\n                                       ,brand_name                AS `brand_name`\r\n                                       ,total_indirect_order_cnt  AS `total_indirect_order_cnt`\r\n                                       ,total_indirect_gmv        AS `total_indirect_gmv`\r\n                                FROM test1\r\n                                WHERE pt = '20230626'\r\n                ) m1\r\n                ON m0.brand_name = m1.brand_name AND m0.pt = m1.pt\r\n        ) m0\r\n        LEFT JOIN\r\n        (\r\n                SELECT  m0.pt AS pt\r\n                       ,if(isNaN(`click_uv` / `exposure_uv`) OR isInfinite(`click_uv` / `exposure_uv`),NULL,`click_uv` / `exposure_uv`) AS `uvctr`\r\n                       ,COALESCE(m0.brand_name,m1.brand_name)                                                                 AS brand_name\r\n                       ,`exposure_uv`                                                                                         AS `exposure_uv`\r\n                       ,`click_uv`\r\n                FROM\r\n                (\r\n                                SELECT  pt          AS pt\r\n                                       ,brand_name  AS `brand_name`\r\n                                       ,exposure_uv AS `exposure_uv`\r\n                                       ,click_uv    AS `click_uv`\r\n                                FROM test2\r\n                                WHERE pt = '20230625'\r\n                ) m0\r\n                FULL JOIN\r\n                (\r\n                                SELECT  pt                       AS pt\r\n                                       ,brand_name               AS `brand_name`\r\n                                       ,total_indirect_order_cnt AS `total_indirect_order_cnt`\r\n                                       ,total_indirect_gmv       AS `total_indirect_gmv`\r\n                                FROM test1\r\n                                WHERE pt = '20230625'\r\n                ) m1\r\n                ON m0.brand_name = m1.brand_name AND m0.pt = m1.pt\r\n        ) m1\r\n        ON m0.brand_name = m1.brand_name AND m0.pt = m1.pt\r\n        LEFT JOIN\r\n        (\r\n                SELECT  m0.pt AS pt\r\n                       ,if(isNaN(`click_uv` / `exposure_uv`) OR isInfinite(`click_uv` / `exposure_uv`),NULL,`click_uv` / `exposure_uv`) AS `uvctr`\r\n                       ,COALESCE(m0.brand_name,m1.brand_name)                                                                 AS brand_name\r\n                       ,`exposure_uv`                                                                                         AS `exposure_uv`\r\n                       ,`click_uv`\r\n                FROM\r\n                (\r\n                                SELECT  pt          AS pt\r\n                                       ,brand_name  AS `brand_name`\r\n                                       ,exposure_uv AS `exposure_uv`\r\n                                       ,click_uv    AS `click_uv`\r\n                                FROM test2\r\n                                WHERE pt = '20220626'\r\n                ) m0\r\n                FULL JOIN\r\n                (\r\n                                SELECT  pt                        AS pt\r\n                                       ,brand_name                AS `brand_name`\r\n                                       ,total_indirect_order_cnt  AS `total_indirect_order_cnt`\r\n                                       ,total_indirect_gmv        AS `total_indirect_gmv`\r\n                                FROM test1\r\n                                WHERE pt = '20220626'\r\n                ) m1\r\n                ON m0.brand_name = m1.brand_name AND m0.pt = m1.pt\r\n        ) m2\r\n        ON m0.brand_name = m2.brand_name AND m0.pt = m2.pt\r\n) c0\r\nORDER BY pt ASC, uvctr DESC\r\n```\r\nBut the result is below:\r\n```\r\n20230626        0.3156979034107179      \\N      \\N\r\n20230626        0.19390556368960468     \\N      \\N\r\n20230626        0.2624629016490004      \\N      \\N\r\n```\r\n\nDB::Exception: Block structure mismatch in (columns with identical name must have identical structure) stream: different types\n> You have to provide the following information whenever possible.\r\n\r\nWe have a table and left join query.\r\n```\r\nCREATE TABLE test\r\n(\r\n    `pt` String,\r\n    `count_distinct_exposure_uv` AggregateFunction(uniqHLL12, Int64)\r\n)\r\nENGINE = AggregatingMergeTree\r\nORDER BY pt\r\n```\r\n\r\n```\r\nSELECT  *\r\nFROM\r\n(\r\n        SELECT  m0.pt                                                                                                                   AS pt\r\n               ,m0.`exposure_uv`                                                                                                        AS exposure_uv\r\n               ,round(m2.exposure_uv,4)                                                                                                 AS exposure_uv_hb_last_value\r\n               ,if(m2.exposure_uv IS NULL OR m2.exposure_uv = 0,NULL,round((m0.exposure_uv - m2.exposure_uv) * 1.0 / m2.exposure_uv,4)) AS exposure_uv_hb_diff_percent\r\n               ,round(m1.exposure_uv,4)                                                                                                 AS exposure_uv_tb_last_value\r\n               ,if(m1.exposure_uv IS NULL OR m1.exposure_uv = 0,NULL,round((m0.exposure_uv - m1.exposure_uv) * 1.0 / m1.exposure_uv,4)) AS exposure_uv_tb_diff_percent\r\n        FROM\r\n        (\r\n                SELECT  m0.pt                          AS pt\r\n                       ,`exposure_uv`                  AS `exposure_uv`\r\n                FROM\r\n                (\r\n                        SELECT  pt                                                                     AS pt\r\n                               ,CASE WHEN COUNT(`exposure_uv`) > 0 THEN AVG(`exposure_uv`)  ELSE 0 END AS `exposure_uv`\r\n                        FROM\r\n                        (\r\n                                SELECT  pt                                         AS pt\r\n                                       ,uniqHLL12Merge(count_distinct_exposure_uv) AS `exposure_uv`\r\n                                FROM test\r\n                                GROUP BY  pt\r\n                        ) m\r\n                        GROUP BY  pt\r\n                ) m0\r\n        ) m0\r\n        LEFT JOIN\r\n        (\r\n                SELECT  m0.pt                          AS pt\r\n                       ,`exposure_uv`                  AS `exposure_uv`\r\n                FROM\r\n                (\r\n                        SELECT  formatDateTime(addYears(parseDateTimeBestEffort(pt),1),'%Y%m%d')       AS pt\r\n                               ,CASE WHEN COUNT(`exposure_uv`) > 0 THEN AVG(`exposure_uv`)  ELSE 0 END AS `exposure_uv`\r\n                        FROM\r\n                        (\r\n                                SELECT  pt                                         AS pt\r\n                                       ,uniqHLL12Merge(count_distinct_exposure_uv) AS `exposure_uv`\r\n                                FROM test\r\n                                GROUP BY  pt\r\n                        ) m\r\n                        GROUP BY  pt\r\n                ) m0\r\n        ) m1\r\n        ON m0.pt = m1.pt\r\n        LEFT JOIN\r\n        (\r\n                SELECT  m0.pt                          AS pt\r\n                       ,`exposure_uv`                  AS `exposure_uv`\r\n                FROM\r\n                (\r\n                        SELECT  formatDateTime(addDays(toDate(parseDateTimeBestEffort(pt)),1),'%Y%m%d') AS pt\r\n                               ,CASE WHEN COUNT(`exposure_uv`) > 0 THEN AVG(`exposure_uv`)  ELSE 0 END  AS `exposure_uv`\r\n                        FROM\r\n                        (\r\n                                SELECT  pt                                         AS pt\r\n                                       ,uniqHLL12Merge(count_distinct_exposure_uv) AS `exposure_uv`\r\n                                FROM test\r\n                                GROUP BY  pt\r\n                        ) m\r\n                        GROUP BY  pt\r\n                ) m0\r\n        ) m2\r\n        ON m0.pt = m2.pt\r\n) c0\r\nORDER BY pt ASC\r\n, exposure_uv DESC\r\nsettings join_use_nulls = 1\r\n```\r\n\r\nWe received the exception:\r\n```\r\nReceived exception from server (version 23.6.1):\r\nCode: 352. DB::Exception: Received from localhost:9996. DB::Exception: Block structure mismatch in (columns with identical name must have identical structure) stream: different types:\r\nexposure_uv Nullable(Float64) Nullable(size = 0, Float64(size = 0), UInt8(size = 0))\r\nexposure_uv Float64 Float64(size = 0). (AMBIGUOUS_COLUMN_NAME)\r\n``` \r\n\r\n\n",
  "hints_text": "\nThe case can be simplified like this:\r\n```\r\nCREATE TABLE default.test1\r\n(\r\n    `pt` String,\r\n    `exposure_uv` Float64\r\n)\r\nENGINE = Memory\r\n```\r\n```\r\nSELECT  *\r\nFROM\r\n(\r\n        SELECT  m0.pt\r\n               ,m0.exposure_uv AS exposure_uv\r\n               ,round(m2.exposure_uv,4)\r\n        FROM\r\n        (\r\n                SELECT  pt\r\n                       ,exposure_uv\r\n                FROM test1\r\n        ) m0\r\n        LEFT JOIN\r\n        (\r\n                SELECT  pt\r\n                       ,exposure_uv\r\n                FROM test1\r\n        ) m1\r\n        ON m0.pt = m1.pt\r\n        LEFT JOIN\r\n        (\r\n                SELECT  pt\r\n                        ,exposure_uv\r\n                FROM test1\r\n        ) m2\r\n        ON m0.pt = m2.pt\r\n) c0\r\nORDER BY exposure_uv\r\nsettings join_use_nulls = 1\r\n```\r\nWe will get the same exception.\r\nFrom the log,  I found that the right table `m2` not use alias name:\r\n```\r\n2023.06.25 00:32:55.929426 [ 101448 ] {fb0fa3ef-c711-4072-b476-817557ff05ec} <Debug> JoiningTransform: Before join block: 'pt String String(size = 0), exposure_uv Float64 Float64(size = 0)'\r\n2023.06.25 00:32:55.930135 [ 101448 ] {fb0fa3ef-c711-4072-b476-817557ff05ec} <Debug> JoiningTransform: After join block: 'pt String String(size = 0), exposure_uv Float64 Float64(size = 0), m1.pt Nullable(String) Nullable(size = 0, String(size = 0), UInt8(size = 0))'\r\n2023.06.25 00:32:55.930812 [ 101448 ] {fb0fa3ef-c711-4072-b476-817557ff05ec} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2023.06.25 00:32:55.931351 [ 101448 ] {fb0fa3ef-c711-4072-b476-817557ff05ec} <Debug> JoiningTransform: Before join block: '--m0.exposure_uv Float64 Float64(size = 0), --m0.pt String String(size = 0)'\r\n2023.06.25 00:32:55.931972 [ 101448 ] {fb0fa3ef-c711-4072-b476-817557ff05ec} <Debug> JoiningTransform: After join block: '--m0.exposure_uv Float64 Float64(size = 0), --m0.pt String String(size = 0), exposure_uv Nullable(Float64) Nullable(size = 0, Float64(size = 0), UInt8(size = 0))'\r\n```",
  "created_at": "2023-06-27T13:22:22Z",
  "modified_files": [
    "src/Processors/QueryPlan/Optimizations/liftUpFunctions.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug.sql",
    "b/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug_2.reference",
    "b/tests/queries/0_stateless/02789_functions_after_sorting_and_columns_with_same_names_bug_2.sql"
  ]
}