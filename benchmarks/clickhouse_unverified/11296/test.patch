diff --git a/tests/queries/0_stateless/01287_max_execution_speed.reference b/tests/queries/0_stateless/01287_max_execution_speed.reference
new file mode 100644
index 000000000000..2e85f1f53355
--- /dev/null
+++ b/tests/queries/0_stateless/01287_max_execution_speed.reference
@@ -0,0 +1,8 @@
+Ok (1)
+Ok (2)
+2000000
+1
+Ok (3)
+2000000
+1
+Ok (4)
diff --git a/tests/queries/0_stateless/01287_max_execution_speed.sql b/tests/queries/0_stateless/01287_max_execution_speed.sql
new file mode 100644
index 000000000000..7e8f6681c84f
--- /dev/null
+++ b/tests/queries/0_stateless/01287_max_execution_speed.sql
@@ -0,0 +1,44 @@
+SET min_execution_speed = 100000000000, timeout_before_checking_execution_speed = 0.1;
+SELECT count() FROM system.numbers; -- { serverError 160 }
+SELECT 'Ok (1)';
+SET min_execution_speed = 0;
+
+SET min_execution_speed_bytes = 800000000000, timeout_before_checking_execution_speed = 0.1;
+SELECT count() FROM system.numbers; -- { serverError 160 }
+SELECT 'Ok (2)';
+SET min_execution_speed_bytes = 0;
+
+SET max_execution_speed = 1000000;
+SET max_block_size = 100;
+
+CREATE TEMPORARY TABLE times (t DateTime);
+
+INSERT INTO times SELECT now();
+SELECT count() FROM numbers(2000000);
+INSERT INTO times SELECT now();
+
+SELECT max(t) - min(t) >= 1 FROM times;
+SELECT 'Ok (3)';
+SET max_execution_speed = 0;
+
+SET max_execution_speed_bytes = 8000000;
+TRUNCATE TABLE times;
+
+INSERT INTO times SELECT now();
+SELECT count() FROM numbers(2000000);
+INSERT INTO times SELECT now();
+
+SELECT max(t) - min(t) >= 1 FROM times;
+SELECT 'Ok (4)';
+SET max_execution_speed_bytes = 0;
+
+-- Note that 'min_execution_speed' does not count sleeping due to throttling
+-- with 'max_execution_speed' and similar limits like 'priority' and 'max_network_bandwidth'
+
+-- Note: I have to disable this part of the test because it actually can work slower under sanitizers,
+-- with debug builds and in presense of random system hickups in our CI environment.
+
+--SET max_execution_speed = 1000000, min_execution_speed = 2000000;
+-- And this query will work despite the fact that the above settings look contradictory.
+--SELECT count() FROM numbers(1000000);
+--SELECT 'Ok (5)';
diff --git a/tests/queries/0_stateless/01288_shard_max_network_bandwidth.reference b/tests/queries/0_stateless/01288_shard_max_network_bandwidth.reference
new file mode 100644
index 000000000000..0d66ea1aee95
--- /dev/null
+++ b/tests/queries/0_stateless/01288_shard_max_network_bandwidth.reference
@@ -0,0 +1,2 @@
+0
+1
diff --git a/tests/queries/0_stateless/01288_shard_max_network_bandwidth.sql b/tests/queries/0_stateless/01288_shard_max_network_bandwidth.sql
new file mode 100644
index 000000000000..09c043784bbb
--- /dev/null
+++ b/tests/queries/0_stateless/01288_shard_max_network_bandwidth.sql
@@ -0,0 +1,15 @@
+-- Limit to 10 MB/sec
+SET max_network_bandwidth = 10000000;
+
+-- Lower max_block_size, so we can start throttling sooner. Otherwise query will be executed too quickly.
+SET max_block_size = 100;
+
+CREATE TEMPORARY TABLE times (t DateTime);
+
+-- rand64 is uncompressable data. Each number will take 8 bytes of bandwidth.
+-- This query should execute in no less than 1.6 seconds if throttled.
+INSERT INTO times SELECT now();
+SELECT sum(ignore(*)) FROM (SELECT rand64() FROM remote('127.0.0.{2,3}', numbers(2000000)));
+INSERT INTO times SELECT now();
+
+SELECT max(t) - min(t) >= 1 FROM times;
diff --git a/tests/queries/0_stateless/01289_min_execution_speed_not_too_early.reference b/tests/queries/0_stateless/01289_min_execution_speed_not_too_early.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/01289_min_execution_speed_not_too_early.sql b/tests/queries/0_stateless/01289_min_execution_speed_not_too_early.sql
new file mode 100644
index 000000000000..e3a18d0c5157
--- /dev/null
+++ b/tests/queries/0_stateless/01289_min_execution_speed_not_too_early.sql
@@ -0,0 +1,19 @@
+DROP TABLE IF EXISTS ES;
+
+create table ES(A String) Engine=MergeTree order by tuple();
+insert into ES select toString(number) from numbers(10000000);
+
+SET max_execution_time = 100, max_execution_speed = 1000000;
+SET max_threads = 1;
+SET max_block_size = 1000000;
+
+-- Exception about execution speed is not thrown from these queries.
+SELECT * FROM ES LIMIT 1 format Null;
+SELECT * FROM ES LIMIT 10 format Null;
+SELECT * FROM ES LIMIT 100 format Null;
+SELECT * FROM ES LIMIT 1000 format Null;
+SELECT * FROM ES LIMIT 10000 format Null;
+SELECT * FROM ES LIMIT 100000 format Null;
+SELECT * FROM ES LIMIT 1000000 format Null;
+
+DROP TABLE ES;
diff --git a/tests/queries/0_stateless/01290_max_execution_speed_distributed.reference b/tests/queries/0_stateless/01290_max_execution_speed_distributed.reference
new file mode 100644
index 000000000000..ad0e80d8e690
--- /dev/null
+++ b/tests/queries/0_stateless/01290_max_execution_speed_distributed.reference
@@ -0,0 +1,3 @@
+2000000
+1
+1
diff --git a/tests/queries/0_stateless/01290_max_execution_speed_distributed.sql b/tests/queries/0_stateless/01290_max_execution_speed_distributed.sql
new file mode 100644
index 000000000000..8282390ca90b
--- /dev/null
+++ b/tests/queries/0_stateless/01290_max_execution_speed_distributed.sql
@@ -0,0 +1,13 @@
+SET max_execution_speed = 1000000, timeout_before_checking_execution_speed = 0.001, max_block_size = 100;
+
+CREATE TEMPORARY TABLE times (t DateTime);
+
+INSERT INTO times SELECT now();
+SELECT count('special query for 01290_max_execution_speed_distributed') FROM remote('127.0.0.{2,3}', numbers(1000000));
+INSERT INTO times SELECT now();
+
+SELECT max(t) - min(t) >= 1 FROM times;
+
+-- Check that the query was also throttled on "remote" servers.
+SYSTEM FLUSH LOGS;
+SELECT DISTINCT query_duration_ms >= 500 FROM system.query_log WHERE event_date >= yesterday() AND query LIKE '%special query for 01290_max_execution_speed_distributed%' AND type = 2;
diff --git a/tests/queries/1_stateful/00156_max_execution_speed_sample_merge.reference b/tests/queries/1_stateful/00156_max_execution_speed_sample_merge.reference
new file mode 100644
index 000000000000..53bb58224b96
--- /dev/null
+++ b/tests/queries/1_stateful/00156_max_execution_speed_sample_merge.reference
@@ -0,0 +1,4 @@
+4392010
+1
+4392010
+1
diff --git a/tests/queries/1_stateful/00156_max_execution_speed_sample_merge.sql b/tests/queries/1_stateful/00156_max_execution_speed_sample_merge.sql
new file mode 100644
index 000000000000..37e91296f14c
--- /dev/null
+++ b/tests/queries/1_stateful/00156_max_execution_speed_sample_merge.sql
@@ -0,0 +1,16 @@
+SET max_execution_speed = 4000000, timeout_before_checking_execution_speed = 0.001;
+
+CREATE TEMPORARY TABLE times (t DateTime);
+
+INSERT INTO times SELECT now();
+SELECT count() FROM test.hits SAMPLE 1 / 2;
+INSERT INTO times SELECT now();
+
+SELECT max(t) - min(t) >= 1 FROM times;
+TRUNCATE TABLE times;
+
+INSERT INTO times SELECT now();
+SELECT count() FROM merge(test, '^hits$') SAMPLE 1 / 2;
+INSERT INTO times SELECT now();
+
+SELECT max(t) - min(t) >= 1 FROM times;
