You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Query from a view derived from a distributed table does not work when CTE is used in subquery
### Company or project name

_No response_

### Describe what's wrong

Looks like since 25.1, if I use a CTE in a sub query it returns Unknown table expression identifier. 

### Does it reproduce on the most recent release?

Yes

### How to reproduce


- Create a local table:

```
    CREATE TABLE default.t1
    (
        `a` String
    )
    ENGINE = MergeTree
    ORDER BY a;
```

- Create a distributed table
```
  CREATE TABLE default.t1_all
  (
      `a` String
  )
  ENGINE = Distributed('my_cluster', 'default', 't1', rand());

```
- Create a view based on the distributed table

```
  CREATE VIEW t1_view
  (
      `a` String
  )
  AS SELECT *
  FROM t1_all;
```

- Run a query with CTE

```
  WITH subquery AS
      (
          SELECT a
          FROM default.t1_view
      )
  SELECT *
  FROM default.t1_view
  WHERE a GLOBAL IN (
      SELECT a
      FROM subquery
  );
```


### Expected behavior

The query should run without error.

### Error message and/or stacktrace

You will see below error:
Code: 60. DB::Exception: Received from localhost:9000. DB::Exception: Received from 172.30.58.214:9000. DB::Exception: Unknown table expression identifier 'subquery' in scope (SELECT __table1.a AS a FROM subquery AS __table1). (UNKNOWN_TABLE)

### Additional context

It worked before and include 24.12 and stops working since version 25.1.

WITH Clause queries (CTEs) failing on 25.1.1.4165
### Company or project name

_No response_

### Describe what's wrong

When running queries using WITH CLAUSE in Clickhouse v25.1.1.4165 we are seeing errors.

When the same queries were run on lower versions, they were working fine.

When we point another node running v24.9 to cluster defined in v25.1 (remote servers section in config) and run the same query it works.

Below are steps to reproduce the errors. Some more complex queries return 

> DB::Exception: Table bug_test.bug_table does not exist. (UNKNOWN_TABLE)

### Does it reproduce on the most recent release?

Yes

### How to reproduce

```
CREATE DATABASE bug_test ON CLUSTER client_and_data_nodes;
```



```
CREATE TABLE bug_test.bug_table ON CLUSTER only_data_nodes
(
    `date_column` Date,
    `c1` String,
    `c2` String
)
ENGINE = ReplicatedAggregatingMergeTree('/{cluster}/bug_test/{uuid}/{replicated_shard}', '{replica}')
PARTITION BY toYYYYMM(date_column)
ORDER BY (c1, c2);
```



```
CREATE TABLE bug_test.distributed_bug_table on cluster client_and_data_nodes
(
date_column Date,
c1 String,
c2 String
)
ENGINE = Distributed('only_data_nodes','bug_test','bug_table',cityHash64(c1));
```



```
INSERT INTO bug_test.distributed_bug_table values (toDate(now()),hex(rand()),hex(now())),(toDate(now()),hex(rand()),hex(now())),(toDate(now()),hex(rand()),hex(now())),(toDate(now()),hex(rand()),hex(now())),(toDate(now()),hex(rand()),hex(now()));
```



```
WITH alias_1 AS (SELECT c1,c2 FROM bug_test.distributed_bug_table) SELECT c1 from alias_1 where c2 IN (SELECT DISTINCT c2 from alias_1);
```


> Code: 60. DB::Exception: Received from localhost:9000. DB::Exception: Received from datanode.example.com:9440. DB::Exception: Unknown table expression identifier 'alias_1' in scope (SELECT DISTINCT __table1.c2 AS c2 FROM alias_1 AS __table1). (UNKNOWN_TABLE)




```
WITH alias_1 AS (SELECT c1,c2 FROM bug_test.distributed_bug_table) SELECT c1 from alias_1 where c2 IN (SELECT DISTINCT c2 from alias_1) SETTINGS allow_experimental_analyzer = 0, enable_analyzer = 0;
```


> Code: 60. DB::Exception: Received from localhost:9000. DB::Exception: Received from datanode.example.com:9440. DB::Exception: Table default.alias_1 does not exist: While processing c2 IN ((SELECT DISTINCT c2 FROM alias_1) AS _subquery4). (UNKNOWN_TABLE)`

### Expected behavior

On lower version we can see an output.


```
Query id: 27f7b7b9-552c-4630-a37b-e99af16d12be

   ┌─c1───────┐
1. │ 8D0298F6 │
2. │ AC6703AF │
   └──────────┘
   ┌─c1───────┐
3. │ C7FEDA1C │
   └──────────┘
    ┌─c1───────┐
 4. │ 2F7F32CB │
 5. │ 486F2EEC │
 6. │ 4A2D1F30 │
 7. │ 621DB402 │
 8. │ 74D11472 │
 9. │ E0A7B38A │
10. │ E4F4D788 │
    └──────────┘
```

### Error message and/or stacktrace

```
2025.02.05 17:04:00.797685 [ 3769666 ] {} <Error> TCPHandler: Code: 60. DB::Exception: Received from datanode.example.com:9440. DB::Exception: Unknown table expression identifier 'alias_2' in scope (SELECT DISTINCT __table1.c2 AS c2 FROM alias_2 AS __table1). Stack trace:

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000dd0ddfb
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000008bab62c
2. DB::Exception::Exception<String const&, String>(int, FormatStringHelperImpl<std::type_identity<String const&>::type, std::type_identity<String>::type>, String const&, String&&) @ 0x000000000921c86b
3. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000011ee76b5
4. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000011eee9f4
5. DB::QueryAnalyzer::resolveExpressionNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool) @ 0x0000000011eed6db
6. DB::QueryAnalyzer::resolveFunction(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x0000000011f064e4
7. DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x0000000011eeeaaa
8. DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x0000000011ee4cb4
9. DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x0000000011ee250c
10. DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x0000000011ee1de0
11. DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>, unsigned long) @ 0x000000001259ec1e
12. DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) (.llvm.1246331599746980635) @ 0x00000000127fe898
13. DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x00000000127fcadc
14. std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> std::__function::__policy_invoker<std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>::__call_impl[abi:ne180100]<std::__function::__default_alloc_func<DB::registerInterpreterSelectQueryAnalyzer(DB::InterpreterFactory&)::$_0, std::unique_ptr<DB::IInterpreter, std::default_delete<DB::IInterpreter>> (DB::InterpreterFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::InterpreterFactory::Arguments const&) (.llvm.1246331599746980635) @ 0x0000000012800882
15. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x000000001279a596
16. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000012b8cbea
17. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000012b8819c
18. DB::TCPHandler::runImpl() @ 0x0000000013e7b66c
19. DB::TCPHandler::run() @ 0x0000000013e98f59
20. Poco::Net::TCPServerConnection::start() @ 0x000000001743e507
21. Poco::Net::TCPServerDispatcher::run() @ 0x000000001743e959
22. Poco::PooledThread::run() @ 0x000000001740aebb
23. Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001740939d
24. ? @ 0x00007f1e37c62ac3
25. ? @ 0x00007f1e37cf4850
: While executing Remote. (UNKNOWN_TABLE), Stack trace (when copying this message, always include the lines below):

```

### Additional context

_No response_
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
