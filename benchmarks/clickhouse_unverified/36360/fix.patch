diff --git a/src/Common/SystemLogBase.h b/src/Common/SystemLogBase.h
index da3d6c245629..4bdb518b9d6d 100644
--- a/src/Common/SystemLogBase.h
+++ b/src/Common/SystemLogBase.h
@@ -45,7 +45,8 @@ struct StorageID;
 class ISystemLog
 {
 public:
-    virtual String getName() = 0;
+    virtual String getName() const = 0;
+
     //// force -- force table creation (used for SYSTEM FLUSH LOGS)
     virtual void flush(bool force = false) = 0; /// NOLINT
     virtual void prepareTable() = 0;
@@ -86,7 +87,9 @@ class SystemLogBase : public ISystemLog
     /// Flush data in the buffer to disk
     void flush(bool force) override;
 
-    String getName() override { return LogElement::name(); }
+    String getName() const override { return LogElement::name(); }
+
+    static const char * getDefaultOrderBy() { return "(event_date, event_time)"; }
 
 protected:
     Poco::Logger * log;
diff --git a/src/Interpreters/AsynchronousMetricLog.cpp b/src/Interpreters/AsynchronousMetricLog.cpp
index c7003cff1695..228934d5f4d6 100644
--- a/src/Interpreters/AsynchronousMetricLog.cpp
+++ b/src/Interpreters/AsynchronousMetricLog.cpp
@@ -17,54 +17,37 @@ NamesAndTypesList AsynchronousMetricLogElement::getNamesAndTypes()
     {
         {"event_date", std::make_shared<DataTypeDate>()},
         {"event_time", std::make_shared<DataTypeDateTime>()},
-        {"event_time_microseconds", std::make_shared<DataTypeDateTime64>(6)},
         {"metric", std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>())},
         {"value", std::make_shared<DataTypeFloat64>(),}
     };
 }
 
-
 void AsynchronousMetricLogElement::appendToBlock(MutableColumns & columns) const
 {
     size_t column_idx = 0;
 
     columns[column_idx++]->insert(event_date);
     columns[column_idx++]->insert(event_time);
-    columns[column_idx++]->insert(event_time_microseconds);
     columns[column_idx++]->insert(metric_name);
     columns[column_idx++]->insert(value);
 }
 
-
-inline UInt64 time_in_milliseconds(std::chrono::time_point<std::chrono::system_clock> timepoint)
-{
-    return std::chrono::duration_cast<std::chrono::milliseconds>(timepoint.time_since_epoch()).count();
-}
-
-inline UInt64 time_in_microseconds(std::chrono::time_point<std::chrono::system_clock> timepoint)
-{
-    return std::chrono::duration_cast<std::chrono::microseconds>(timepoint.time_since_epoch()).count();
-}
-
-
-inline UInt64 time_in_seconds(std::chrono::time_point<std::chrono::system_clock> timepoint)
-{
-    return std::chrono::duration_cast<std::chrono::seconds>(timepoint.time_since_epoch()).count();
-}
-
 void AsynchronousMetricLog::addValues(const AsynchronousMetricValues & values)
 {
     AsynchronousMetricLogElement element;
 
-    const auto now = std::chrono::system_clock::now();
-    element.event_time = time_in_seconds(now);
-    element.event_time_microseconds = time_in_microseconds(now);
+    element.event_time = time(nullptr);
     element.event_date = DateLUT::instance().toDayNum(element.event_time);
 
+    /// We will round the values to make them compress better in the table.
+    /// Note: as an alternative we can also use fixed point Decimal data type,
+    /// but we need to store up to UINT64_MAX sometimes.
+    static constexpr double precision = 1000.0;
+
     for (const auto & [key, value] : values)
     {
         element.metric_name = key;
-        element.value = value;
+        element.value = round(value * precision) / precision;
 
         add(element);
     }
diff --git a/src/Interpreters/AsynchronousMetricLog.h b/src/Interpreters/AsynchronousMetricLog.h
index d0f07a041b78..a31ab7eb1462 100644
--- a/src/Interpreters/AsynchronousMetricLog.h
+++ b/src/Interpreters/AsynchronousMetricLog.h
@@ -24,7 +24,6 @@ struct AsynchronousMetricLogElement
 {
     UInt16 event_date;
     time_t event_time;
-    Decimal64 event_time_microseconds;
     std::string metric_name;
     double value;
 
@@ -32,6 +31,17 @@ struct AsynchronousMetricLogElement
     static NamesAndTypesList getNamesAndTypes();
     static NamesAndAliases getNamesAndAliases() { return {}; }
     void appendToBlock(MutableColumns & columns) const;
+
+    /// Returns the list of columns as in CREATE TABLE statement or nullptr.
+    /// If it's not nullptr, this list of columns will be used to create the table.
+    /// Otherwise the list will be constructed from LogElement::getNamesAndTypes and LogElement::getNamesAndAliases.
+    static const char * getCustomColumnList()
+    {
+        return "event_date Date CODEC(Delta(2), ZSTD), "
+               "event_time DateTime CODEC(Delta(4), ZSTD), "
+               "metric LowCardinality(String) CODEC(ZSTD), "
+               "value Float64 CODEC(Gorilla, ZSTD(3))";
+    }
 };
 
 class AsynchronousMetricLog : public SystemLog<AsynchronousMetricLogElement>
@@ -40,6 +50,9 @@ class AsynchronousMetricLog : public SystemLog<AsynchronousMetricLogElement>
     using SystemLog<AsynchronousMetricLogElement>::SystemLog;
 
     void addValues(const AsynchronousMetricValues &);
+
+    /// This table is usually queried for fixed metric name.
+    static const char * getDefaultOrderBy() { return "(metric, event_date, event_time)"; }
 };
 
 }
diff --git a/src/Interpreters/CrashLog.h b/src/Interpreters/CrashLog.h
index 930515c43ea2..f6061355562f 100644
--- a/src/Interpreters/CrashLog.h
+++ b/src/Interpreters/CrashLog.h
@@ -29,6 +29,7 @@ struct CrashLogElement
     static NamesAndTypesList getNamesAndTypes();
     static NamesAndAliases getNamesAndAliases() { return {}; }
     void appendToBlock(MutableColumns & columns) const;
+    static const char * getCustomColumnList() { return nullptr; }
 };
 
 class CrashLog : public SystemLog<CrashLogElement>
diff --git a/src/Interpreters/MetricLog.cpp b/src/Interpreters/MetricLog.cpp
index f8fab6d7a9df..8b28717ff07c 100644
--- a/src/Interpreters/MetricLog.cpp
+++ b/src/Interpreters/MetricLog.cpp
@@ -78,17 +78,17 @@ void MetricLog::shutdown()
 }
 
 
-inline UInt64 time_in_milliseconds(std::chrono::time_point<std::chrono::system_clock> timepoint)
+static inline UInt64 time_in_milliseconds(std::chrono::time_point<std::chrono::system_clock> timepoint)
 {
     return std::chrono::duration_cast<std::chrono::milliseconds>(timepoint.time_since_epoch()).count();
 }
 
-inline UInt64 time_in_microseconds(std::chrono::time_point<std::chrono::system_clock> timepoint)
+static inline UInt64 time_in_microseconds(std::chrono::time_point<std::chrono::system_clock> timepoint)
 {
     return std::chrono::duration_cast<std::chrono::microseconds>(timepoint.time_since_epoch()).count();
 }
 
-inline UInt64 time_in_seconds(std::chrono::time_point<std::chrono::system_clock> timepoint)
+static inline UInt64 time_in_seconds(std::chrono::time_point<std::chrono::system_clock> timepoint)
 {
     return std::chrono::duration_cast<std::chrono::seconds>(timepoint.time_since_epoch()).count();
 }
diff --git a/src/Interpreters/MetricLog.h b/src/Interpreters/MetricLog.h
index 579e741c479b..44fcdced07ce 100644
--- a/src/Interpreters/MetricLog.h
+++ b/src/Interpreters/MetricLog.h
@@ -30,6 +30,7 @@ struct MetricLogElement
     static NamesAndTypesList getNamesAndTypes();
     static NamesAndAliases getNamesAndAliases() { return {}; }
     void appendToBlock(MutableColumns & columns) const;
+    static const char * getCustomColumnList() { return nullptr; }
 };
 
 
diff --git a/src/Interpreters/OpenTelemetrySpanLog.h b/src/Interpreters/OpenTelemetrySpanLog.h
index aa99a9f8e4b4..677a283bb561 100644
--- a/src/Interpreters/OpenTelemetrySpanLog.h
+++ b/src/Interpreters/OpenTelemetrySpanLog.h
@@ -18,8 +18,7 @@ struct OpenTelemetrySpan
     Array attribute_names;
     Array attribute_values;
     // I don't understand how Links work, namely, which direction should they
-    // point to, and how they are related with parent_span_id, so no Links for
-    // now.
+    // point to, and how they are related with parent_span_id, so no Links for now.
 };
 
 struct OpenTelemetrySpanLogElement : public OpenTelemetrySpan
@@ -32,6 +31,7 @@ struct OpenTelemetrySpanLogElement : public OpenTelemetrySpan
     static NamesAndTypesList getNamesAndTypes();
     static NamesAndAliases getNamesAndAliases();
     void appendToBlock(MutableColumns & columns) const;
+    static const char * getCustomColumnList() { return nullptr; }
 };
 
 // OpenTelemetry standartizes some Log data as well, so it's not just
diff --git a/src/Interpreters/PartLog.cpp b/src/Interpreters/PartLog.cpp
index 4947b50513c8..ce9aa0c03d1b 100644
--- a/src/Interpreters/PartLog.cpp
+++ b/src/Interpreters/PartLog.cpp
@@ -109,13 +109,13 @@ bool PartLog::addNewPart(
     return addNewParts(current_context, {part}, elapsed_ns, execution_status);
 }
 
-inline UInt64 time_in_microseconds(std::chrono::time_point<std::chrono::system_clock> timepoint)
+static inline UInt64 time_in_microseconds(std::chrono::time_point<std::chrono::system_clock> timepoint)
 {
     return std::chrono::duration_cast<std::chrono::microseconds>(timepoint.time_since_epoch()).count();
 }
 
 
-inline UInt64 time_in_seconds(std::chrono::time_point<std::chrono::system_clock> timepoint)
+static inline UInt64 time_in_seconds(std::chrono::time_point<std::chrono::system_clock> timepoint)
 {
     return std::chrono::duration_cast<std::chrono::seconds>(timepoint.time_since_epoch()).count();
 }
diff --git a/src/Interpreters/PartLog.h b/src/Interpreters/PartLog.h
index 5f502edb3397..7582f6fe9e60 100644
--- a/src/Interpreters/PartLog.h
+++ b/src/Interpreters/PartLog.h
@@ -57,6 +57,7 @@ struct PartLogElement
     static NamesAndTypesList getNamesAndTypes();
     static NamesAndAliases getNamesAndAliases() { return {}; }
     void appendToBlock(MutableColumns & columns) const;
+    static const char * getCustomColumnList() { return nullptr; }
 };
 
 class IMergeTreeDataPart;
diff --git a/src/Interpreters/ProcessorsProfileLog.h b/src/Interpreters/ProcessorsProfileLog.h
index d79ab6e5e5b6..33cb3988e9f3 100644
--- a/src/Interpreters/ProcessorsProfileLog.h
+++ b/src/Interpreters/ProcessorsProfileLog.h
@@ -30,6 +30,7 @@ struct ProcessorProfileLogElement
     static NamesAndTypesList getNamesAndTypes();
     static NamesAndAliases getNamesAndAliases() { return {}; }
     void appendToBlock(MutableColumns & columns) const;
+    static const char * getCustomColumnList() { return nullptr; }
 };
 
 class ProcessorsProfileLog : public SystemLog<ProcessorProfileLogElement>
diff --git a/src/Interpreters/QueryLog.h b/src/Interpreters/QueryLog.h
index 651769cbab65..bb912ccc8174 100644
--- a/src/Interpreters/QueryLog.h
+++ b/src/Interpreters/QueryLog.h
@@ -93,6 +93,7 @@ struct QueryLogElement
     static NamesAndTypesList getNamesAndTypes();
     static NamesAndAliases getNamesAndAliases();
     void appendToBlock(MutableColumns & columns) const;
+    static const char * getCustomColumnList() { return nullptr; }
 
     static void appendClientInfo(const ClientInfo & client_info, MutableColumns & columns, size_t & i);
 };
diff --git a/src/Interpreters/QueryThreadLog.h b/src/Interpreters/QueryThreadLog.h
index 3b260b71441d..6cdb3142ba36 100644
--- a/src/Interpreters/QueryThreadLog.h
+++ b/src/Interpreters/QueryThreadLog.h
@@ -54,6 +54,7 @@ struct QueryThreadLogElement
     static NamesAndTypesList getNamesAndTypes();
     static NamesAndAliases getNamesAndAliases();
     void appendToBlock(MutableColumns & columns) const;
+    static const char * getCustomColumnList() { return nullptr; }
 };
 
 
@@ -64,5 +65,3 @@ class QueryThreadLog : public SystemLog<QueryThreadLogElement>
 
 
 }
-
-
diff --git a/src/Interpreters/QueryViewsLog.h b/src/Interpreters/QueryViewsLog.h
index c0936e52a1c8..dab696103da3 100644
--- a/src/Interpreters/QueryViewsLog.h
+++ b/src/Interpreters/QueryViewsLog.h
@@ -79,6 +79,7 @@ struct QueryViewsLogElement
     static NamesAndTypesList getNamesAndTypes();
     static NamesAndAliases getNamesAndAliases();
     void appendToBlock(MutableColumns & columns) const;
+    static const char * getCustomColumnList() { return nullptr; }
 };
 
 
diff --git a/src/Interpreters/SessionLog.h b/src/Interpreters/SessionLog.h
index 26f137565cb3..57bbbba3037b 100644
--- a/src/Interpreters/SessionLog.h
+++ b/src/Interpreters/SessionLog.h
@@ -60,6 +60,7 @@ struct SessionLogElement
     static NamesAndAliases getNamesAndAliases() { return {}; }
 
     void appendToBlock(MutableColumns & columns) const;
+    static const char * getCustomColumnList() { return nullptr; }
 };
 
 
diff --git a/src/Interpreters/SystemLog.cpp b/src/Interpreters/SystemLog.cpp
index c53b635ed6cc..862ba6d7bd96 100644
--- a/src/Interpreters/SystemLog.cpp
+++ b/src/Interpreters/SystemLog.cpp
@@ -153,10 +153,12 @@ std::shared_ptr<TSystemLog> createSystemLog(
         String ttl = config.getString(config_prefix + ".ttl", "");
         if (!ttl.empty())
             engine += " TTL " + ttl;
-        engine += " ORDER BY (event_date, event_time)";
+
+        engine += " ORDER BY ";
+        engine += TSystemLog::getDefaultOrderBy();
     }
 
-    // Validate engine definition grammatically to prevent some configuration errors
+    /// Validate engine definition syntax to prevent some configuration errors.
     ParserStorageWithComment storage_parser;
     parseQuery(storage_parser, engine.data(), engine.data() + engine.size(),
             "Storage to create table for " + config_prefix, 0, DBMS_DEFAULT_MAX_PARSER_DEPTH);
@@ -515,10 +517,24 @@ ASTPtr SystemLog<LogElement>::getCreateTableQuery()
     create->setDatabase(table_id.database_name);
     create->setTable(table_id.table_name);
 
-    auto ordinary_columns = LogElement::getNamesAndTypes();
-    auto alias_columns = LogElement::getNamesAndAliases();
     auto new_columns_list = std::make_shared<ASTColumns>();
-    new_columns_list->set(new_columns_list->columns, InterpreterCreateQuery::formatColumns(ordinary_columns, alias_columns));
+
+    if (const char * custom_column_list = LogElement::getCustomColumnList())
+    {
+        ParserColumnDeclarationList parser;
+        const Settings & settings = getContext()->getSettingsRef();
+
+        ASTPtr columns_list_raw = parseQuery(parser, custom_column_list, "columns declaration list", settings.max_query_size, settings.max_parser_depth);
+        new_columns_list->set(new_columns_list->columns, columns_list_raw);
+    }
+    else
+    {
+        auto ordinary_columns = LogElement::getNamesAndTypes();
+        auto alias_columns = LogElement::getNamesAndAliases();
+
+        new_columns_list->set(new_columns_list->columns, InterpreterCreateQuery::formatColumns(ordinary_columns, alias_columns));
+    }
+
     create->set(create->columns_list, new_columns_list);
 
     ParserStorageWithComment storage_parser;
diff --git a/src/Interpreters/SystemLog.h b/src/Interpreters/SystemLog.h
index b5135e8a73a4..c60e14eebfe6 100644
--- a/src/Interpreters/SystemLog.h
+++ b/src/Interpreters/SystemLog.h
@@ -27,6 +27,7 @@ namespace DB
         static std::string name();
         static NamesAndTypesList getNamesAndTypes();
         static NamesAndAliases getNamesAndAliases();
+        static const char * getCustomColumnList();
         void appendToBlock(MutableColumns & columns) const;
     };
     */
diff --git a/src/Interpreters/TextLog.h b/src/Interpreters/TextLog.h
index 3026452fcc36..243e001fc529 100644
--- a/src/Interpreters/TextLog.h
+++ b/src/Interpreters/TextLog.h
@@ -32,6 +32,7 @@ struct TextLogElement
     static NamesAndTypesList getNamesAndTypes();
     static NamesAndAliases getNamesAndAliases() { return {}; }
     void appendToBlock(MutableColumns & columns) const;
+    static const char * getCustomColumnList() { return nullptr; }
 };
 
 class TextLog : public SystemLog<TextLogElement>
diff --git a/src/Interpreters/TraceLog.h b/src/Interpreters/TraceLog.h
index e8836955d965..43d7861327f3 100644
--- a/src/Interpreters/TraceLog.h
+++ b/src/Interpreters/TraceLog.h
@@ -32,6 +32,7 @@ struct TraceLogElement
     static NamesAndTypesList getNamesAndTypes();
     static NamesAndAliases getNamesAndAliases() { return {}; }
     void appendToBlock(MutableColumns & columns) const;
+    static const char * getCustomColumnList() { return nullptr; }
 };
 
 class TraceLog : public SystemLog<TraceLogElement>
diff --git a/src/Interpreters/TransactionsInfoLog.h b/src/Interpreters/TransactionsInfoLog.h
index f595413a7296..fc3783b59163 100644
--- a/src/Interpreters/TransactionsInfoLog.h
+++ b/src/Interpreters/TransactionsInfoLog.h
@@ -42,6 +42,7 @@ struct TransactionsInfoLogElement
     static NamesAndTypesList getNamesAndTypes();
     static NamesAndAliases getNamesAndAliases() { return {}; }
     void appendToBlock(MutableColumns & columns) const;
+    static const char * getCustomColumnList() { return nullptr; }
 
     void fillCommonFields(const TransactionInfoContext * context = nullptr);
 };
diff --git a/src/Interpreters/ZooKeeperLog.h b/src/Interpreters/ZooKeeperLog.h
index 733c61ba8fb7..43cdebced2d4 100644
--- a/src/Interpreters/ZooKeeperLog.h
+++ b/src/Interpreters/ZooKeeperLog.h
@@ -69,6 +69,7 @@ struct ZooKeeperLogElement
     static NamesAndTypesList getNamesAndTypes();
     static NamesAndAliases getNamesAndAliases() { return {}; }
     void appendToBlock(MutableColumns & columns) const;
+    static const char * getCustomColumnList() { return nullptr; }
 };
 
 class ZooKeeperLog : public SystemLog<ZooKeeperLogElement>
