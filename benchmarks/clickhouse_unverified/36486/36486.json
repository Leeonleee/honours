{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 36486,
  "instance_id": "ClickHouse__ClickHouse-36486",
  "issue_numbers": [
    "36448"
  ],
  "base_commit": "e3d8da26b77da09feabbda332fe7e6ad56fa203e",
  "patch": "diff --git a/src/Interpreters/TreeOptimizer.cpp b/src/Interpreters/TreeOptimizer.cpp\nindex badeb3e4ee2c..b25ed4157341 100644\n--- a/src/Interpreters/TreeOptimizer.cpp\n+++ b/src/Interpreters/TreeOptimizer.cpp\n@@ -21,6 +21,7 @@\n #include <Interpreters/Context.h>\n #include <Interpreters/ExternalDictionariesLoader.h>\n #include <Interpreters/GatherFunctionQuantileVisitor.h>\n+#include <Interpreters/UserDefinedExecutableFunctionFactory.h>\n \n #include <Parsers/ASTExpressionList.h>\n #include <Parsers/ASTFunction.h>\n@@ -138,10 +139,18 @@ void optimizeGroupBy(ASTSelectQuery * select_query, ContextPtr context)\n                     continue;\n                 }\n             }\n-            else if (!function_factory.get(function->name, context)->isInjective({}))\n+            else\n             {\n-                ++i;\n-                continue;\n+                FunctionOverloadResolverPtr function_builder = UserDefinedExecutableFunctionFactory::instance().tryGet(function->name, context);\n+\n+                if (!function_builder)\n+                    function_builder = function_factory.get(function->name, context);\n+\n+                if (!function_builder->isInjective({}))\n+                {\n+                    ++i;\n+                    continue;\n+                }\n             }\n \n             /// copy shared pointer to args in order to ensure lifetime\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02285_executable_user_defined_function_group_by.reference b/tests/queries/0_stateless/02285_executable_user_defined_function_group_by.reference\nnew file mode 100644\nindex 000000000000..1c59de1a03b9\n--- /dev/null\n+++ b/tests/queries/0_stateless/02285_executable_user_defined_function_group_by.reference\n@@ -0,0 +1,10 @@\n+0\n+2\n+4\n+6\n+8\n+10\n+12\n+14\n+16\n+18\ndiff --git a/tests/queries/0_stateless/02285_executable_user_defined_function_group_by.sql b/tests/queries/0_stateless/02285_executable_user_defined_function_group_by.sql\nnew file mode 100644\nindex 000000000000..96db8c088dc4\n--- /dev/null\n+++ b/tests/queries/0_stateless/02285_executable_user_defined_function_group_by.sql\n@@ -0,0 +1,1 @@\n+SELECT test_function(number, number) as a FROM numbers(10) GROUP BY a ORDER BY a;\n",
  "problem_statement": "Executable User Defined Functions used by aggregate function error \"Unknown function\"\nAlways reproduced (ClickHouse server version 22.3.2.1):\r\n`\r\nudf code, python version 3.9.6\r\n#!/usr/bin/python\r\n\r\nimport sys\r\nimport time\r\n\r\nif __name__ == '__main__':\r\n    for line in sys.stdin:\r\n        print(\"Python4 \" + line, end='')\r\n        sys.stdout.flush()\r\n`\r\n\r\nSELECT test_function_python('clickhouse')\r\n\r\nQuery id: 57da3834-1238-4da6-a984-48d4c1bb4a04\r\n\r\n\u250c\u2500test_function_python('clickhouse')\u2500\u2510\r\n\u2502 Python4 clickhouse                 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.001 sec.\r\n\r\nSELECT test_function_python('clickhouse') AS uuu\r\nGROUP BY uuu\r\n\r\nQuery id: c14131e5-e7aa-4585-a9f5-8e4b3e29fe44\r\n\r\n\r\n0 rows in set. Elapsed: 0.002 sec.\r\n\r\nReceived exception from server (version 22.3.2):\r\nCode: 46. DB::Exception: Received from 10.254.134.108:9000. DB::Exception: Unknown function test_function_python. (UNKNOWN_FUNCTION)\r\n\r\n\r\nSELECT uuu\r\nFROM\r\n(\r\n    SELECT test_function_python('clickhouse') AS uuu\r\n) AS tmp\r\nGROUP BY uuu\r\n\r\nQuery id: 20ca737b-35e1-418a-ab8e-2a296ac44e28\r\n\r\n\u250c\u2500uuu\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 Python4 clickhouse \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.002 sec.\n",
  "hints_text": "",
  "created_at": "2022-04-21T11:46:50Z",
  "modified_files": [
    "src/Interpreters/TreeOptimizer.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02285_executable_user_defined_function_group_by.reference",
    "b/tests/queries/0_stateless/02285_executable_user_defined_function_group_by.sql"
  ]
}