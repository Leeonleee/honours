diff --git a/tests/testflows/helpers/cluster.py b/tests/testflows/helpers/cluster.py
index 8fda8ac43d87..01ebfa8424b9 100644
--- a/tests/testflows/helpers/cluster.py
+++ b/tests/testflows/helpers/cluster.py
@@ -53,7 +53,7 @@ def wait_healthy(self, timeout=120):
                     continue
                 assert False, "container is not healthy"
 
-    def restart(self, timeout=120, safe=True):
+    def restart(self, timeout=120, safe=True, wait_healthy=True):
         """Restart node.
         """
         if safe:
@@ -73,7 +73,8 @@ def restart(self, timeout=120, safe=True):
 
         self.cluster.command(None, f'{self.cluster.docker_compose} restart {self.name}', timeout=timeout)
 
-        self.wait_healthy(timeout)
+        if wait_healthy:
+            self.wait_healthy(timeout)
 
     def query(self, sql, message=None, exitcode=None, steps=True, no_checks=False,
               raise_on_exception=False, step=By, settings=None, *args, **kwargs):
@@ -295,12 +296,12 @@ def command(self, node, command, message=None, exitcode=None, steps=True, *args,
         :param steps: don't break command into steps, default: True
         """
         debug(f"command() {node}, {command}")
-        with By("executing command", description=command) if steps else NullStep():
+        with By("executing command", description=command, format_description=False) if steps else NullStep():
             r = self.bash(node)(command, *args, **kwargs)
         if exitcode is not None:
-            with Then(f"exitcode should be {exitcode}") if steps else NullStep():
+            with Then(f"exitcode should be {exitcode}", format_name=False) if steps else NullStep():
                 assert r.exitcode == exitcode, error(r.output)
         if message is not None:
-            with Then(f"output should contain message", description=message) if steps else NullStep():
+            with Then(f"output should contain message", description=message, format_description=False) if steps else NullStep():
                 assert message in r.output, error(r.output)
         return r
diff --git a/tests/testflows/ldap/authentication/__init__.py b/tests/testflows/ldap/authentication/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/testflows/ldap/configs/CA/ca.crt b/tests/testflows/ldap/authentication/configs/CA/ca.crt
similarity index 100%
rename from tests/testflows/ldap/configs/CA/ca.crt
rename to tests/testflows/ldap/authentication/configs/CA/ca.crt
diff --git a/tests/testflows/ldap/configs/CA/ca.key b/tests/testflows/ldap/authentication/configs/CA/ca.key
similarity index 100%
rename from tests/testflows/ldap/configs/CA/ca.key
rename to tests/testflows/ldap/authentication/configs/CA/ca.key
diff --git a/tests/testflows/ldap/configs/CA/ca.srl b/tests/testflows/ldap/authentication/configs/CA/ca.srl
similarity index 100%
rename from tests/testflows/ldap/configs/CA/ca.srl
rename to tests/testflows/ldap/authentication/configs/CA/ca.srl
diff --git a/tests/testflows/ldap/configs/CA/dhparam.pem b/tests/testflows/ldap/authentication/configs/CA/dhparam.pem
similarity index 100%
rename from tests/testflows/ldap/configs/CA/dhparam.pem
rename to tests/testflows/ldap/authentication/configs/CA/dhparam.pem
diff --git a/tests/testflows/ldap/configs/CA/passphrase.txt b/tests/testflows/ldap/authentication/configs/CA/passphrase.txt
similarity index 100%
rename from tests/testflows/ldap/configs/CA/passphrase.txt
rename to tests/testflows/ldap/authentication/configs/CA/passphrase.txt
diff --git a/tests/testflows/ldap/configs/clickhouse/common.xml b/tests/testflows/ldap/authentication/configs/clickhouse/common.xml
similarity index 100%
rename from tests/testflows/ldap/configs/clickhouse/common.xml
rename to tests/testflows/ldap/authentication/configs/clickhouse/common.xml
diff --git a/tests/testflows/ldap/configs/clickhouse/config.d/logs.xml b/tests/testflows/ldap/authentication/configs/clickhouse/config.d/logs.xml
similarity index 100%
rename from tests/testflows/ldap/configs/clickhouse/config.d/logs.xml
rename to tests/testflows/ldap/authentication/configs/clickhouse/config.d/logs.xml
diff --git a/tests/testflows/ldap/configs/clickhouse/config.d/ports.xml b/tests/testflows/ldap/authentication/configs/clickhouse/config.d/ports.xml
similarity index 100%
rename from tests/testflows/ldap/configs/clickhouse/config.d/ports.xml
rename to tests/testflows/ldap/authentication/configs/clickhouse/config.d/ports.xml
diff --git a/tests/testflows/ldap/configs/clickhouse/config.d/remote.xml b/tests/testflows/ldap/authentication/configs/clickhouse/config.d/remote.xml
similarity index 100%
rename from tests/testflows/ldap/configs/clickhouse/config.d/remote.xml
rename to tests/testflows/ldap/authentication/configs/clickhouse/config.d/remote.xml
diff --git a/tests/testflows/ldap/configs/clickhouse/config.d/ssl.xml b/tests/testflows/ldap/authentication/configs/clickhouse/config.d/ssl.xml
similarity index 100%
rename from tests/testflows/ldap/configs/clickhouse/config.d/ssl.xml
rename to tests/testflows/ldap/authentication/configs/clickhouse/config.d/ssl.xml
diff --git a/tests/testflows/ldap/configs/clickhouse/config.d/storage.xml b/tests/testflows/ldap/authentication/configs/clickhouse/config.d/storage.xml
similarity index 100%
rename from tests/testflows/ldap/configs/clickhouse/config.d/storage.xml
rename to tests/testflows/ldap/authentication/configs/clickhouse/config.d/storage.xml
diff --git a/tests/testflows/ldap/configs/clickhouse/config.d/zookeeper.xml b/tests/testflows/ldap/authentication/configs/clickhouse/config.d/zookeeper.xml
similarity index 100%
rename from tests/testflows/ldap/configs/clickhouse/config.d/zookeeper.xml
rename to tests/testflows/ldap/authentication/configs/clickhouse/config.d/zookeeper.xml
diff --git a/tests/testflows/ldap/configs/clickhouse/config.xml b/tests/testflows/ldap/authentication/configs/clickhouse/config.xml
similarity index 97%
rename from tests/testflows/ldap/configs/clickhouse/config.xml
rename to tests/testflows/ldap/authentication/configs/clickhouse/config.xml
index d34d2c352537..e28a0c8e255b 100644
--- a/tests/testflows/ldap/configs/clickhouse/config.xml
+++ b/tests/testflows/ldap/authentication/configs/clickhouse/config.xml
@@ -117,11 +117,17 @@
     <!-- Directory with user provided files that are accessible by 'file' table function. -->
     <user_files_path>/var/lib/clickhouse/user_files/</user_files_path>
 
-    <!-- Path to folder where users and roles created by SQL commands are stored. -->
-    <access_control_path>/var/lib/clickhouse/access/</access_control_path>
-
-    <!-- Path to configuration file with users, access rights, profiles of settings, quotas. -->
-    <users_config>users.xml</users_config>
+    <!-- Sources to read users, roles, access rights, profiles of settings, quotas. -->
+    <user_directories>
+        <users_xml>
+            <!-- Path to configuration file with predefined users. -->
+            <path>users.xml</path>
+        </users_xml>
+        <local_directory>
+            <!-- Path to folder where users created by SQL commands are stored. -->
+            <path>/var/lib/clickhouse/access/</path>
+        </local_directory>
+    </user_directories>
 
     <!-- Default profile of settings. -->
     <default_profile>default</default_profile>
diff --git a/tests/testflows/ldap/configs/clickhouse/ssl/dhparam.pem b/tests/testflows/ldap/authentication/configs/clickhouse/ssl/dhparam.pem
similarity index 100%
rename from tests/testflows/ldap/configs/clickhouse/ssl/dhparam.pem
rename to tests/testflows/ldap/authentication/configs/clickhouse/ssl/dhparam.pem
diff --git a/tests/testflows/ldap/configs/clickhouse/ssl/server.crt b/tests/testflows/ldap/authentication/configs/clickhouse/ssl/server.crt
similarity index 100%
rename from tests/testflows/ldap/configs/clickhouse/ssl/server.crt
rename to tests/testflows/ldap/authentication/configs/clickhouse/ssl/server.crt
diff --git a/tests/testflows/ldap/configs/clickhouse/ssl/server.key b/tests/testflows/ldap/authentication/configs/clickhouse/ssl/server.key
similarity index 100%
rename from tests/testflows/ldap/configs/clickhouse/ssl/server.key
rename to tests/testflows/ldap/authentication/configs/clickhouse/ssl/server.key
diff --git a/tests/testflows/ldap/configs/clickhouse/users.xml b/tests/testflows/ldap/authentication/configs/clickhouse/users.xml
similarity index 100%
rename from tests/testflows/ldap/configs/clickhouse/users.xml
rename to tests/testflows/ldap/authentication/configs/clickhouse/users.xml
diff --git a/tests/testflows/ldap/configs/clickhouse1/config.d/macros.xml b/tests/testflows/ldap/authentication/configs/clickhouse1/config.d/macros.xml
similarity index 100%
rename from tests/testflows/ldap/configs/clickhouse1/config.d/macros.xml
rename to tests/testflows/ldap/authentication/configs/clickhouse1/config.d/macros.xml
diff --git a/tests/testflows/ldap/configs/clickhouse2/config.d/macros.xml b/tests/testflows/ldap/authentication/configs/clickhouse2/config.d/macros.xml
similarity index 100%
rename from tests/testflows/ldap/configs/clickhouse2/config.d/macros.xml
rename to tests/testflows/ldap/authentication/configs/clickhouse2/config.d/macros.xml
diff --git a/tests/testflows/ldap/configs/clickhouse3/config.d/macros.xml b/tests/testflows/ldap/authentication/configs/clickhouse3/config.d/macros.xml
similarity index 100%
rename from tests/testflows/ldap/configs/clickhouse3/config.d/macros.xml
rename to tests/testflows/ldap/authentication/configs/clickhouse3/config.d/macros.xml
diff --git a/tests/testflows/ldap/configs/ldap1/config/export.ldif b/tests/testflows/ldap/authentication/configs/ldap1/config/export.ldif
similarity index 100%
rename from tests/testflows/ldap/configs/ldap1/config/export.ldif
rename to tests/testflows/ldap/authentication/configs/ldap1/config/export.ldif
diff --git a/tests/testflows/ldap/configs/ldap2/certs/ca.crt b/tests/testflows/ldap/authentication/configs/ldap2/certs/ca.crt
similarity index 100%
rename from tests/testflows/ldap/configs/ldap2/certs/ca.crt
rename to tests/testflows/ldap/authentication/configs/ldap2/certs/ca.crt
diff --git a/tests/testflows/ldap/configs/ldap2/certs/dhparam.pem b/tests/testflows/ldap/authentication/configs/ldap2/certs/dhparam.pem
similarity index 100%
rename from tests/testflows/ldap/configs/ldap2/certs/dhparam.pem
rename to tests/testflows/ldap/authentication/configs/ldap2/certs/dhparam.pem
diff --git a/tests/testflows/ldap/configs/ldap2/certs/ldap.crt b/tests/testflows/ldap/authentication/configs/ldap2/certs/ldap.crt
similarity index 100%
rename from tests/testflows/ldap/configs/ldap2/certs/ldap.crt
rename to tests/testflows/ldap/authentication/configs/ldap2/certs/ldap.crt
diff --git a/tests/testflows/ldap/configs/ldap2/certs/ldap.csr b/tests/testflows/ldap/authentication/configs/ldap2/certs/ldap.csr
similarity index 100%
rename from tests/testflows/ldap/configs/ldap2/certs/ldap.csr
rename to tests/testflows/ldap/authentication/configs/ldap2/certs/ldap.csr
diff --git a/tests/testflows/ldap/configs/ldap2/certs/ldap.key b/tests/testflows/ldap/authentication/configs/ldap2/certs/ldap.key
similarity index 100%
rename from tests/testflows/ldap/configs/ldap2/certs/ldap.key
rename to tests/testflows/ldap/authentication/configs/ldap2/certs/ldap.key
diff --git a/tests/testflows/ldap/configs/ldap2/config/export.ldif b/tests/testflows/ldap/authentication/configs/ldap2/config/export.ldif
similarity index 100%
rename from tests/testflows/ldap/configs/ldap2/config/export.ldif
rename to tests/testflows/ldap/authentication/configs/ldap2/config/export.ldif
diff --git a/tests/testflows/ldap/configs/ldap3/certs/ca.crt b/tests/testflows/ldap/authentication/configs/ldap3/certs/ca.crt
similarity index 100%
rename from tests/testflows/ldap/configs/ldap3/certs/ca.crt
rename to tests/testflows/ldap/authentication/configs/ldap3/certs/ca.crt
diff --git a/tests/testflows/ldap/configs/ldap3/certs/dhparam.pem b/tests/testflows/ldap/authentication/configs/ldap3/certs/dhparam.pem
similarity index 100%
rename from tests/testflows/ldap/configs/ldap3/certs/dhparam.pem
rename to tests/testflows/ldap/authentication/configs/ldap3/certs/dhparam.pem
diff --git a/tests/testflows/ldap/configs/ldap3/certs/ldap.crt b/tests/testflows/ldap/authentication/configs/ldap3/certs/ldap.crt
similarity index 100%
rename from tests/testflows/ldap/configs/ldap3/certs/ldap.crt
rename to tests/testflows/ldap/authentication/configs/ldap3/certs/ldap.crt
diff --git a/tests/testflows/ldap/configs/ldap3/certs/ldap.csr b/tests/testflows/ldap/authentication/configs/ldap3/certs/ldap.csr
similarity index 100%
rename from tests/testflows/ldap/configs/ldap3/certs/ldap.csr
rename to tests/testflows/ldap/authentication/configs/ldap3/certs/ldap.csr
diff --git a/tests/testflows/ldap/configs/ldap3/certs/ldap.key b/tests/testflows/ldap/authentication/configs/ldap3/certs/ldap.key
similarity index 100%
rename from tests/testflows/ldap/configs/ldap3/certs/ldap.key
rename to tests/testflows/ldap/authentication/configs/ldap3/certs/ldap.key
diff --git a/tests/testflows/ldap/configs/ldap3/config/export.ldif b/tests/testflows/ldap/authentication/configs/ldap3/config/export.ldif
similarity index 100%
rename from tests/testflows/ldap/configs/ldap3/config/export.ldif
rename to tests/testflows/ldap/authentication/configs/ldap3/config/export.ldif
diff --git a/tests/testflows/ldap/configs/ldap4/certs/ca.crt b/tests/testflows/ldap/authentication/configs/ldap4/certs/ca.crt
similarity index 100%
rename from tests/testflows/ldap/configs/ldap4/certs/ca.crt
rename to tests/testflows/ldap/authentication/configs/ldap4/certs/ca.crt
diff --git a/tests/testflows/ldap/configs/ldap4/certs/dhparam.pem b/tests/testflows/ldap/authentication/configs/ldap4/certs/dhparam.pem
similarity index 100%
rename from tests/testflows/ldap/configs/ldap4/certs/dhparam.pem
rename to tests/testflows/ldap/authentication/configs/ldap4/certs/dhparam.pem
diff --git a/tests/testflows/ldap/configs/ldap4/certs/ldap.crt b/tests/testflows/ldap/authentication/configs/ldap4/certs/ldap.crt
similarity index 100%
rename from tests/testflows/ldap/configs/ldap4/certs/ldap.crt
rename to tests/testflows/ldap/authentication/configs/ldap4/certs/ldap.crt
diff --git a/tests/testflows/ldap/configs/ldap4/certs/ldap.csr b/tests/testflows/ldap/authentication/configs/ldap4/certs/ldap.csr
similarity index 100%
rename from tests/testflows/ldap/configs/ldap4/certs/ldap.csr
rename to tests/testflows/ldap/authentication/configs/ldap4/certs/ldap.csr
diff --git a/tests/testflows/ldap/configs/ldap4/certs/ldap.key b/tests/testflows/ldap/authentication/configs/ldap4/certs/ldap.key
similarity index 100%
rename from tests/testflows/ldap/configs/ldap4/certs/ldap.key
rename to tests/testflows/ldap/authentication/configs/ldap4/certs/ldap.key
diff --git a/tests/testflows/ldap/configs/ldap4/config/export.ldif b/tests/testflows/ldap/authentication/configs/ldap4/config/export.ldif
similarity index 100%
rename from tests/testflows/ldap/configs/ldap4/config/export.ldif
rename to tests/testflows/ldap/authentication/configs/ldap4/config/export.ldif
diff --git a/tests/testflows/ldap/configs/ldap5/config/export.ldif b/tests/testflows/ldap/authentication/configs/ldap5/config/export.ldif
similarity index 100%
rename from tests/testflows/ldap/configs/ldap5/config/export.ldif
rename to tests/testflows/ldap/authentication/configs/ldap5/config/export.ldif
diff --git a/tests/testflows/ldap/configs/ldap5/ldap2/certs/ca.crt b/tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ca.crt
similarity index 100%
rename from tests/testflows/ldap/configs/ldap5/ldap2/certs/ca.crt
rename to tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ca.crt
diff --git a/tests/testflows/ldap/configs/ldap5/ldap2/certs/dhparam.pem b/tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/dhparam.pem
similarity index 100%
rename from tests/testflows/ldap/configs/ldap5/ldap2/certs/dhparam.pem
rename to tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/dhparam.pem
diff --git a/tests/testflows/ldap/configs/ldap5/ldap2/certs/ldap.crt b/tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ldap.crt
similarity index 100%
rename from tests/testflows/ldap/configs/ldap5/ldap2/certs/ldap.crt
rename to tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ldap.crt
diff --git a/tests/testflows/ldap/configs/ldap5/ldap2/certs/ldap.csr b/tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ldap.csr
similarity index 100%
rename from tests/testflows/ldap/configs/ldap5/ldap2/certs/ldap.csr
rename to tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ldap.csr
diff --git a/tests/testflows/ldap/configs/ldap5/ldap2/certs/ldap.key b/tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ldap.key
similarity index 100%
rename from tests/testflows/ldap/configs/ldap5/ldap2/certs/ldap.key
rename to tests/testflows/ldap/authentication/configs/ldap5/ldap2/certs/ldap.key
diff --git a/tests/testflows/ldap/configs/ldap5/ldap2/config/export.ldif b/tests/testflows/ldap/authentication/configs/ldap5/ldap2/config/export.ldif
similarity index 100%
rename from tests/testflows/ldap/configs/ldap5/ldap2/config/export.ldif
rename to tests/testflows/ldap/authentication/configs/ldap5/ldap2/config/export.ldif
diff --git a/tests/testflows/ldap/docker-compose/clickhouse-service.yml b/tests/testflows/ldap/authentication/docker-compose/clickhouse-service.yml
similarity index 100%
rename from tests/testflows/ldap/docker-compose/clickhouse-service.yml
rename to tests/testflows/ldap/authentication/docker-compose/clickhouse-service.yml
diff --git a/tests/testflows/ldap/docker-compose/docker-compose.yml b/tests/testflows/ldap/authentication/docker-compose/docker-compose.yml
similarity index 100%
rename from tests/testflows/ldap/docker-compose/docker-compose.yml
rename to tests/testflows/ldap/authentication/docker-compose/docker-compose.yml
diff --git a/tests/testflows/ldap/docker-compose/openldap-service.yml b/tests/testflows/ldap/authentication/docker-compose/openldap-service.yml
similarity index 100%
rename from tests/testflows/ldap/docker-compose/openldap-service.yml
rename to tests/testflows/ldap/authentication/docker-compose/openldap-service.yml
diff --git a/tests/testflows/ldap/docker-compose/zookeeper-service.yml b/tests/testflows/ldap/authentication/docker-compose/zookeeper-service.yml
similarity index 100%
rename from tests/testflows/ldap/docker-compose/zookeeper-service.yml
rename to tests/testflows/ldap/authentication/docker-compose/zookeeper-service.yml
diff --git a/tests/testflows/ldap/authentication/regression.py b/tests/testflows/ldap/authentication/regression.py
new file mode 100755
index 000000000000..9d0a5ca743f2
--- /dev/null
+++ b/tests/testflows/ldap/authentication/regression.py
@@ -0,0 +1,54 @@
+#!/usr/bin/env python3
+import sys
+from testflows.core import *
+
+append_path(sys.path, "..", "..")
+
+from helpers.cluster import Cluster
+from helpers.argparser import argparser
+from ldap.authentication.requirements import *
+
+# Cross-outs of known fails
+xfails = {
+    "connection protocols/tls/tls_require_cert='try'":
+     [(Fail, "can't be tested with self-signed certificates")],
+    "connection protocols/tls/tls_require_cert='demand'":
+     [(Fail, "can't be tested with self-signed certificates")],
+    "connection protocols/starttls/tls_require_cert='try'":
+     [(Fail, "can't be tested with self-signed certificates")],
+    "connection protocols/starttls/tls_require_cert='demand'":
+     [(Fail, "can't be tested with self-signed certificates")],
+    "connection protocols/tls require cert default demand":
+     [(Fail, "can't be tested with self-signed certificates")],
+    "connection protocols/starttls with custom port":
+     [(Fail, "it seems that starttls is not enabled by default on custom plain-text ports in LDAP server")],
+    "connection protocols/tls cipher suite":
+     [(Fail, "can't get it to work")]
+}
+
+@TestFeature
+@Name("authentication")
+@ArgumentParser(argparser)
+@Requirements(
+    RQ_SRS_007_LDAP_Authentication("1.0")
+)
+@XFails(xfails)
+def regression(self, local, clickhouse_binary_path):
+    """ClickHouse integration with LDAP regression module.
+    """
+    nodes = {
+        "clickhouse": ("clickhouse1", "clickhouse2", "clickhouse3"),
+    }
+
+    with Cluster(local, clickhouse_binary_path, nodes=nodes) as cluster:
+        self.context.cluster = cluster
+
+        Scenario(run=load("ldap.authentication.tests.sanity", "scenario"))
+        Scenario(run=load("ldap.authentication.tests.multiple_servers", "scenario"))
+        Feature(run=load("ldap.authentication.tests.connections", "feature"))
+        Feature(run=load("ldap.authentication.tests.server_config", "feature"))
+        Feature(run=load("ldap.authentication.tests.user_config", "feature"))
+        Feature(run=load("ldap.authentication.tests.authentications", "feature"))
+
+if main():
+    regression()
diff --git a/tests/testflows/ldap/requirements/__init__.py b/tests/testflows/ldap/authentication/requirements/__init__.py
similarity index 100%
rename from tests/testflows/ldap/requirements/__init__.py
rename to tests/testflows/ldap/authentication/requirements/__init__.py
diff --git a/tests/testflows/ldap/requirements/requirements.md b/tests/testflows/ldap/authentication/requirements/requirements.md
similarity index 98%
rename from tests/testflows/ldap/requirements/requirements.md
rename to tests/testflows/ldap/authentication/requirements/requirements.md
index 6d787670138e..d322db703303 100644
--- a/tests/testflows/ldap/requirements/requirements.md
+++ b/tests/testflows/ldap/authentication/requirements/requirements.md
@@ -524,9 +524,6 @@ used to authenticate users using an [LDAP] server.
 ## References
 
 * **ClickHouse:** https://clickhouse.tech
-* **GitHub repository:** https://github.com/ClickHouse/ClickHouse/blob/master/tests/testflows/ldap/requirements/requirements.md
-* **Revision history:** https://github.com/ClickHouse/ClickHouse/commits/master/tests/testflows/ldap/requirements/requirements.md
-* **Git:** https://git-scm.com/
 
 [Anonymous Authentication Mechanism of Simple Bind]: https://ldapwiki.com/wiki/Simple%20Authentication#section-Simple+Authentication-AnonymousAuthenticationMechanismOfSimpleBind
 [Unauthenticated Authentication Mechanism of Simple Bind]: https://ldapwiki.com/wiki/Simple%20Authentication#section-Simple+Authentication-UnauthenticatedAuthenticationMechanismOfSimpleBind
@@ -539,6 +536,6 @@ used to authenticate users using an [LDAP] server.
 [LDAP]: https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol
 [ClickHouse]: https://clickhouse.tech
 [GitHub]: https://github.com
-[GitHub Repository]: https://github.com/ClickHouse/ClickHouse/blob/master/tests/testflows/ldap/requirements/requirements.md
-[Revision History]: https://github.com/ClickHouse/ClickHouse/commits/master/tests/testflows/ldap/requirements/requirements.md
+[GitHub Repository]: https://github.com/ClickHouse/ClickHouse/blob/master/tests/testflows/ldap/authentication/requirements/requirements.md
+[Revision History]: https://github.com/ClickHouse/ClickHouse/commits/master/tests/testflows/ldap/authentication/requirements/requirements.md
 [Git]: https://git-scm.com/
diff --git a/tests/testflows/ldap/requirements/requirements.py b/tests/testflows/ldap/authentication/requirements/requirements.py
similarity index 100%
rename from tests/testflows/ldap/requirements/requirements.py
rename to tests/testflows/ldap/authentication/requirements/requirements.py
diff --git a/tests/testflows/ldap/tests/authentications.py b/tests/testflows/ldap/authentication/tests/authentications.py
similarity index 99%
rename from tests/testflows/ldap/tests/authentications.py
rename to tests/testflows/ldap/authentication/tests/authentications.py
index a1fb27bd51a0..1b21dce7cc19 100644
--- a/tests/testflows/ldap/tests/authentications.py
+++ b/tests/testflows/ldap/authentication/tests/authentications.py
@@ -4,8 +4,8 @@
 from multiprocessing.dummy import Pool
 from testflows.core import *
 from testflows.asserts import error
-from ldap.tests.common import *
-from ldap.requirements import *
+from ldap.authentication.tests.common import *
+from ldap.authentication.requirements import *
 
 servers = {
     "openldap1": {
diff --git a/tests/testflows/ldap/tests/common.py b/tests/testflows/ldap/authentication/tests/common.py
similarity index 78%
rename from tests/testflows/ldap/tests/common.py
rename to tests/testflows/ldap/authentication/tests/common.py
index c065576c9d44..cf5cfc1d5733 100644
--- a/tests/testflows/ldap/tests/common.py
+++ b/tests/testflows/ldap/authentication/tests/common.py
@@ -47,6 +47,37 @@ def xml_append(root, tag, text):
 def randomword(length, chars=ASCII_CHARS):
     return ''.join(random.choice(chars) for i in range(length))
 
+def restart(node=None, safe=False, timeout=20):
+    """Restart ClickHouse server and wait for config to be reloaded.
+    """
+    with When("I restart ClickHouse server node"):
+        if node is None:
+            node = current().context.node
+
+        with node.cluster.shell(node.name) as bash:
+            bash.expect(bash.prompt)
+
+            with By("closing terminal to the node to be restarted"):
+                bash.close()
+
+            with And("getting current log size"):
+                logsize = \
+                    node.command("ls -s --block-size=1 /var/log/clickhouse-server/clickhouse-server.log").output.split(" ")[
+                    0].strip()
+
+            with And("restarting ClickHouse server"):
+                node.restart(safe=safe)
+
+            with Then("tailing the log file from using previous log size as the offset"):
+                bash.prompt = bash.__class__.prompt
+                bash.open()
+                bash.send(f"tail -c +{logsize} -f /var/log/clickhouse-server/clickhouse-server.log")
+
+            with And("waiting for config reload message in the log file"):
+                bash.expect(
+                    f"ConfigReloader: Loaded config '/etc/clickhouse-server/config.xml', performed update on configuration",
+                    timeout=timeout)
+
 def add_config(config, timeout=20, restart=False):
     """Add dynamic configuration file to ClickHouse.
 
@@ -54,6 +85,48 @@ def add_config(config, timeout=20, restart=False):
     :param config: configuration file description
     :param timeout: timeout, default: 20 sec
     """
+    def check_preprocessed_config_is_updated():
+        """Check that preprocessed config is updated.
+        """
+        started = time.time()
+        command = f"cat /var/lib/clickhouse/preprocessed_configs/{config.preprocessed_name} | grep {config.uid}{' > /dev/null' if not settings.debug else ''}"
+        while time.time() - started < timeout:
+            exitcode = node.command(command, steps=False).exitcode
+            if exitcode == 0:
+                break
+            time.sleep(1)
+        assert exitcode == 0, error()
+
+    def wait_for_config_to_be_loaded():
+        """Wait for config to be loaded.
+        """
+        if restart:
+            with When("I close terminal to the node to be restarted"):
+                bash.close()
+
+            with And("I get the current log size"):
+                logsize = \
+                    node.command("ls -s --block-size=1 /var/log/clickhouse-server/clickhouse-server.log").output.split(" ")[
+                    0].strip()
+
+            with And("I restart ClickHouse to apply the config changes"):
+                node.restart(safe=False)
+
+            with Then("I tail the log file from using previous log size as the offset"):
+                bash.prompt = bash.__class__.prompt
+                bash.open()
+                bash.send(f"tail -c +{logsize} -f /var/log/clickhouse-server/clickhouse-server.log")
+
+        with Then("I wait for config reload message in the log file"):
+            if restart:
+                bash.expect(
+                    f"ConfigReloader: Loaded config '/etc/clickhouse-server/config.xml', performed update on configuration",
+                    timeout=timeout)
+            else:
+                bash.expect(
+                    f"ConfigReloader: Loaded config '/etc/clickhouse-server/{config.preprocessed_name}', performed update on configuration",
+                    timeout=timeout)
+
     node = current().context.node
     try:
         with Given(f"{config.name}"):
@@ -70,29 +143,10 @@ def add_config(config, timeout=20, restart=False):
                     node.command(command, steps=False, exitcode=0)
 
                 with Then(f"{config.preprocessed_name} should be updated", description=f"timeout {timeout}"):
-                    started = time.time()
-                    command = f"cat /var/lib/clickhouse/preprocessed_configs/{config.preprocessed_name} | grep {config.uid}{' > /dev/null' if not settings.debug else ''}"
-                    while time.time() - started < timeout:
-                        exitcode = node.command(command, steps=False).exitcode
-                        if exitcode == 0:
-                            break
-                        time.sleep(1)
-                    assert exitcode == 0, error()
-
-                if restart:
-                    bash.close()
-                    logsize = node.command("ls -s --block-size=1 /var/log/clickhouse-server/clickhouse-server.log").output.split(" ")[0].strip()
-                    with When("I restart ClickHouse to apply the config changes"):
-                        node.restart(safe=False)
-                    bash.prompt = bash.__class__.prompt
-                    bash.open()
-                    bash.send(f"tail -c +{logsize} -f /var/log/clickhouse-server/clickhouse-server.log")
-
-                with When("I wait for config to be loaded"):
-                    if restart:
-                        bash.expect(f"ConfigReloader: Loaded config '/etc/clickhouse-server/config.xml', performed update on configuration", timeout=timeout)
-                    else:
-                        bash.expect(f"ConfigReloader: Loaded config '/etc/clickhouse-server/{config.preprocessed_name}', performed update on configuration", timeout=timeout)
+                    check_preprocessed_config_is_updated()
+
+                with And("I wait for config to be reloaded"):
+                    wait_for_config_to_be_loaded()
         yield
     finally:
         with Finally(f"I remove {config.name}"):
@@ -103,20 +157,11 @@ def add_config(config, timeout=20, restart=False):
                 with By("removing the config file", description=config.path):
                     node.command(f"rm -rf {config.path}", exitcode=0)
 
-                with Then(f"{config.preprocessed_name} should be updated"):
-                    started = time.time()
-                    command = f"cat /var/lib/clickhouse/preprocessed_configs/{config.preprocessed_name} | grep '{config.uid}'{' > /dev/null' if not settings.debug else ''}"
-                    while time.time() - started < timeout:
-                        exitcode = node.command(command, steps=False).exitcode
-                        if exitcode == 1:
-                            break
-                        time.sleep(1)
-                    assert exitcode == 1, error()
-
-                with When("I wait for config to be loaded"):
-                    started = time.time()
-                    bash.expect(f"ConfigReloader: Loaded config '/etc/clickhouse-server/{config.preprocessed_name}', performed update on configuration", timeout=timeout)
+                with Then(f"{config.preprocessed_name} should be updated", description=f"timeout {timeout}"):
+                    check_preprocessed_config_is_updated()
 
+                with And("I wait for config to be reloaded"):
+                    wait_for_config_to_be_loaded()
 
 def create_ldap_servers_config_content(servers, config_d_dir="/etc/clickhouse-server/config.d", config_file="ldap_servers.xml"):
     """Create LDAP servers configuration content.
@@ -172,7 +217,7 @@ def create_ldap_users_config_content(*users, config_d_dir="/etc/clickhouse-serve
     return Config(content, path, name, uid, "users.xml")
 
 def add_users_identified_with_ldap(*users):
-    """Add one or more users that are identified via 
+    """Add one or more users that are identified via
     an ldap server using RBAC.
     """
     node = current().context.node
@@ -288,6 +333,7 @@ def add_user_to_ldap(cn, userpassword, givenname=None, homedirectory=None, sn=No
     }
 
     lines = []
+
     for key, value in list(user.items()):
         if key.startswith("_"):
             continue
diff --git a/tests/testflows/ldap/tests/connections.py b/tests/testflows/ldap/authentication/tests/connections.py
similarity index 98%
rename from tests/testflows/ldap/tests/connections.py
rename to tests/testflows/ldap/authentication/tests/connections.py
index 8de4b3f4d016..f16f6c29b0ed 100644
--- a/tests/testflows/ldap/tests/connections.py
+++ b/tests/testflows/ldap/authentication/tests/connections.py
@@ -1,8 +1,8 @@
 from testflows.core import *
 from testflows.asserts import error
 
-from ldap.tests.common import login
-from ldap.requirements import *
+from ldap.authentication.tests.common import login
+from ldap.authentication.requirements import *
 
 @TestScenario
 @Requirements(
diff --git a/tests/testflows/ldap/tests/multiple_servers.py b/tests/testflows/ldap/authentication/tests/multiple_servers.py
similarity index 88%
rename from tests/testflows/ldap/tests/multiple_servers.py
rename to tests/testflows/ldap/authentication/tests/multiple_servers.py
index aefc0116fa2e..6e906023b0a6 100644
--- a/tests/testflows/ldap/tests/multiple_servers.py
+++ b/tests/testflows/ldap/authentication/tests/multiple_servers.py
@@ -1,8 +1,8 @@
 from testflows.core import *
 from testflows.asserts import error
 
-from ldap.tests.common import login
-from ldap.requirements import RQ_SRS_007_LDAP_Authentication_MultipleServers
+from ldap.authentication.tests.common import login
+from ldap.authentication.requirements import RQ_SRS_007_LDAP_Authentication_MultipleServers
 
 @TestScenario
 @Name("multiple servers")
diff --git a/tests/testflows/ldap/tests/sanity.py b/tests/testflows/ldap/authentication/tests/sanity.py
similarity index 95%
rename from tests/testflows/ldap/tests/sanity.py
rename to tests/testflows/ldap/authentication/tests/sanity.py
index 9e5d8a2ddd78..542fa2a48b10 100644
--- a/tests/testflows/ldap/tests/sanity.py
+++ b/tests/testflows/ldap/authentication/tests/sanity.py
@@ -1,7 +1,7 @@
 from testflows.core import *
 from testflows.asserts import error
 
-from ldap.tests.common import add_user_to_ldap, delete_user_from_ldap
+from ldap.authentication.tests.common import add_user_to_ldap, delete_user_from_ldap
 
 @TestScenario
 @Name("sanity")
diff --git a/tests/testflows/ldap/tests/server_config.py b/tests/testflows/ldap/authentication/tests/server_config.py
similarity index 84%
rename from tests/testflows/ldap/tests/server_config.py
rename to tests/testflows/ldap/authentication/tests/server_config.py
index f3d03434afea..80f2a496b0ec 100644
--- a/tests/testflows/ldap/tests/server_config.py
+++ b/tests/testflows/ldap/authentication/tests/server_config.py
@@ -1,7 +1,7 @@
 from testflows.core import *
 
-from ldap.tests.common import *
-from ldap.requirements import *
+from ldap.authentication.tests.common import *
+from ldap.authentication.requirements import *
 
 @TestScenario
 @Requirements(
@@ -28,7 +28,8 @@ def invalid_host(self):
     servers = {"foo": {"host": "foo", "port": "389", "enable_tls": "no"}}
     users = [{
         "server": "foo", "username": "user1", "password": "user1", "login": True,
-        "exitcode": 20, "message": "DB::Exception: Can't contact LDAP server"
+        "exitcode": 4,
+        "message": "DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name"
     }]
     login(servers, *users)
 
@@ -44,7 +45,8 @@ def empty_host(self):
     servers = {"foo": {"host": "", "port": "389", "enable_tls": "no"}}
     users = [{
         "server": "foo", "username": "user1", "password": "user1", "login": True,
-        "exitcode": 36, "message": "DB::Exception: LDAP server 'foo' is not configured."
+        "exitcode": 4,
+        "message": "DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name"
     }]
     login(servers, *users)
 
@@ -60,7 +62,8 @@ def missing_host(self):
     servers = {"foo": {"port": "389", "enable_tls": "no"}}
     users = [{
         "server": "foo", "username": "user1", "password": "user1", "login": True,
-        "exitcode": 36, "message": "DB::Exception: LDAP server 'foo' is not configured."
+        "exitcode": 4,
+        "message": "DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name"
     }]
     login(servers, *users)
 
@@ -75,7 +78,8 @@ def invalid_port(self):
     servers = {"openldap1": {"host": "openldap1", "port": "3890", "enable_tls": "no"}}
     users = [{
         "server": "openldap1", "username": "user1", "password": "user1", "login": True,
-        "exitcode": 20, "message": "DB::Exception: Can't contact LDAP server."
+        "exitcode": 4,
+        "message": "DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name"
     }]
     login(servers, *users)
 
@@ -93,7 +97,8 @@ def invalid_auth_dn_prefix(self):
     }}
     users = [{
         "server": "openldap1", "username": "user1", "password": "user1", "login": True,
-        "exitcode": 20, "message": "DB::Exception: Invalid DN syntax: invalid DN"
+        "exitcode": 4,
+        "message": "DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name"
     }]
     login(servers, *users)
 
@@ -110,7 +115,8 @@ def invalid_auth_dn_suffix(self):
     }}
     users = [{
         "server": "openldap1", "username": "user1", "password": "user1", "login": True,
-        "exitcode": 20, "message": "DB::Exception: Invalid DN syntax: invalid DN"
+        "exitcode": 4,
+        "message": "DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name"
     }]
     login(servers, *users)
 
@@ -127,7 +133,8 @@ def invalid_enable_tls_value(self):
     }}
     users = [{
         "server": "openldap1", "username": "user1", "password": "user1", "login": True,
-        "exitcode": 36, "message": "DB::Exception: LDAP server 'openldap1' is not configured"
+        "exitcode": 4,
+        "message": "DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name"
     }]
     login(servers, *users)
 
@@ -148,7 +155,8 @@ def invalid_tls_require_cert_value(self):
     }}
     users = [{
         "server": "openldap2", "username": "user2", "password": "user2", "login": True,
-        "exitcode": 36, "message": "DB::Exception: LDAP server 'openldap2' is not configured"
+        "exitcode": 4,
+        "message": "DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name"
     }]
     login(servers, *users)
 
@@ -167,8 +175,8 @@ def empty_ca_cert_dir(self):
     }}
     users = [{
         "server": "openldap2", "username": "user2", "password": "user2", "login": True,
-        "exitcode": 20,
-        "message": "DB::Exception: Can't contact LDAP server: error:14000086:SSL routines::certificate verify failed (self signed certificate in certificate chain"
+        "exitcode": 4,
+        "message": "DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name"
     }]
     login(servers, *users)
 
@@ -187,8 +195,8 @@ def empty_ca_cert_file(self):
     }}
     users = [{
         "server": "openldap2", "username": "user2", "password": "user2", "login": True,
-        "exitcode": 20,
-        "message": "Received from localhost:9000. DB::Exception: Can't contact LDAP server: error:14000086:SSL routines::certificate verify failed (self signed certificate in certificate chain)"
+        "exitcode": 4,
+        "message": "DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name"
     }]
     login(servers, *users)
 
diff --git a/tests/testflows/ldap/tests/user_config.py b/tests/testflows/ldap/authentication/tests/user_config.py
similarity index 96%
rename from tests/testflows/ldap/tests/user_config.py
rename to tests/testflows/ldap/authentication/tests/user_config.py
index f609231b7525..36ed33ed17ab 100644
--- a/tests/testflows/ldap/tests/user_config.py
+++ b/tests/testflows/ldap/authentication/tests/user_config.py
@@ -2,8 +2,8 @@
 
 from testflows.core import *
 
-from ldap.tests.common import *
-from ldap.requirements import *
+from ldap.authentication.tests.common import *
+from ldap.authentication.requirements import *
 
 @TestScenario
 @Requirements(
@@ -54,8 +54,8 @@ def empty_server_not_defined(self, timeout=20):
         "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com"
     }}
     users = [{"server": "foo", "username": "user1", "password": "user1", "login": True,
-        "errorcode": 36,
-        "message": "DB::Exception: LDAP server 'foo' is not configured"
+        "errorcode": 4,
+        "message": "DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name"
     }]
     login(servers, *users)
 
diff --git a/tests/testflows/ldap/external_user_directory/__init__.py b/tests/testflows/ldap/external_user_directory/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/testflows/ldap/external_user_directory/configs/CA/ca.crt b/tests/testflows/ldap/external_user_directory/configs/CA/ca.crt
new file mode 100644
index 000000000000..8c71e3afc91d
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/CA/ca.crt
@@ -0,0 +1,22 @@
+-----BEGIN CERTIFICATE-----
+MIIDlTCCAn2gAwIBAgIUJBqw2dHM2DDCZjYSkPOESlvDH6swDQYJKoZIhvcNAQEL
+BQAwWjELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQHDAZPdHRhd2Ex
+ETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTENMAsGA1UEAwwEcm9vdDAe
+Fw0yMDA2MTExOTAzNDhaFw0zMDA2MDkxOTAzNDhaMFoxCzAJBgNVBAYTAkNBMQsw
+CQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYDVQQKDAhBbHRpbml0eTEL
+MAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB
+DwAwggEKAoIBAQC9Irr0zGV+HCI2fZ0ht4hR5It4Sbjz4RwZV8ENRP/+TEz8l9eK
+J6ygxhKX7SMYzIs/jS9Gsq4plX1r2ujW1qRf8yLpR4+dGLP+jBRi1drj0XjZXosT
+SERjWzgPauWxL9LN8+l26eBAqz6fw5e0W8WRSTgf5iGiCcKOTmaATIUjP0CdfWKK
+qpktI4vhe++CXZFJ3usR+8KZ/FwwbCLJM/3J2HnbcXfcaYPYvr1tfqLudKSTbG9H
+M3+AVwjctdesc/0sbd51Zsm0ClQptMbuKnDCYauGg61kNkgbgPgRmH9Pzo67DtxF
+/WW+PtOzq8xLOifciQ9Piboy9QBSQZGwf4wzAgMBAAGjUzBRMB0GA1UdDgQWBBSi
+njya0RDozx3OZTLYFpwqYnlpIDAfBgNVHSMEGDAWgBSinjya0RDozx3OZTLYFpwq
+YnlpIDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBAD7VyFg7F
+U1C25KFvtauchAOjCW6w7U/b3z1dVZvcQ88/kH1VsLUcfGixlSilUEfPTJsi7OA0
+R5BQdh2GGcjUJv4iqEFGU05KvMVmRRKn08P62+ZhJxKMxG26VzcliRZzCMkI6d0W
+lFwI6nM45yeqdHVh5k4xbuJzqpbD9BtXXLI+/Ra9Fx8S9ETA3GdidpZLU5P1VLxq
+UuedfqyAVWZXpr6TAURGxouRmRzul9yFzbSUex+MLEIPrstjtEwV3+tBQZJz9xAS
+TVPj+Nv3LO7GCq54bdwkq1ioWbSL2hEmABkj6kdW/JwmfhGHf/2rirDVMzrTYw07
+dFJfAZC+FEsv
+-----END CERTIFICATE-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/CA/ca.key b/tests/testflows/ldap/external_user_directory/configs/CA/ca.key
new file mode 100644
index 000000000000..e7a7f664dcf5
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/CA/ca.key
@@ -0,0 +1,30 @@
+-----BEGIN RSA PRIVATE KEY-----
+Proc-Type: 4,ENCRYPTED
+DEK-Info: AES-256-CBC,D06B9754A2069EBB4E77065DC9B605A1
+
+FJT794Z6AUuUB5Vp5W2iR6zzCvQUg2dtKoE+xhFdbgC7lmSfA2W/O9fx15Il67Yj
+Bbpm9Y6yteUSDQpJrvBdkhXeBkYEa5K1CA+0Jdx98nzwP3KBhHNxVVrTWRc5kniB
+LMV3iBQEbAafxgL7gN+EWr3eV7w7ZSqT7D5br/mlBALU62gv2UzwTXLu1CgyNWMC
+HIPjIX50Zga+BnhZhtQvM4Yj1gOsn+X6AaEZ3KjTfCDqthYQf2ldswW4gAlPAq83
++INq9Spx+QG97Z+1XO2DmmGTZL0z+OFLT+3y26/UcftM26ODY09Dcf3gt0n6RIUV
+0KsD1qQL0ppu4CHVnbIkOKMBe86qBl+kG8FVmyhgZ8D9ULlF1tpyTVKvHR82V2B5
+ztbc5EY1Fhb+r7OVVJlbCeo/bWmWybODZrpN49x5gGZpM3+8ApaHupGZ+cRFkQKG
+rDpqC5gflT3WwFNxtP5noWcV+Gzb3riXNM3c8G5aIpLZwmmaTLK9ahKqMcq4Ljf+
+hir8kuCMqIKt3m7Ceoj4wAHSP8xO0y/cc1WYNb3CI0Emk795aR6IPUw4vDEXHG27
+OLoCJTvl/JKRWJGkdQx8wKAs/uw/qwtbhYoQJccTjfvy4NXH3tpSgxCE8OTWuEch
+TAN8ra1PDGAUu+1MeT5gZ9uI1BEU6hXMME4mVRpJdcmw9MVy3V+B6rkUqX3kFAfR
+e2ueF5qgIp+A4/UlVe5cKdWAQxu4BnUESLooA7cbgcLypdao9bRx9bXH8S3aNgxW
+IdgICpc/v8wAX2yqMe191KgR9Vh1p0RCw/kEGVgWfY/IaQpsaYuq5quZbvr/fN5T
+d++ySAMaPysaCadLUdZJLw56uk4Y+PYzR+ygjTX9dCCHedrAU8RYM55FJ/fyD3bQ
+Hn9/n7PZyWy6u/TYt6dhlcYxaS3Opzw4eAQB8tGZJRYQ3AKpHpTEC57lXoMnUPKo
++nBmb0+YulylMZdns0WIBJlcv6qzIaNhDMrjyi18n1ezzPIGH7ivUjoXy2FL23q5
+f3aqJK4UUDEDkC8IeZkS+ykYxnohjFDhUyBe5gjryLqdMdy9EerehCWPf425AztX
+c/EWPzDl46qmxWhugOlz3Fiw95VlYu0MUDRayHuZiYPplgJypChuU4EHJ+q8V2z3
+BwjSo1bD4nfc8f68qEOtdZ1u/ClcolMwlZQYDJz/DiE4JOcd2Gx4QSF5vaInm0/4
+mMj/ZWna4DAYFbH8IGh7xUPDqeIWhBYlgrD69ajKyay5Vu3La/d2QW20BhX35Ro2
+ZJVR+lfioMmxn4y481H2pv+5gOlGwh02Oa8qLhZBb8W+DvFShNk6mk87eCForFFT
+CDgmvfsC/cS2wZkcFTecq6vbjFlt+OF13NCKlcO3wCm44D+bwVPeMrU6HycCVQw7
+SASrnP/th5sJbv11byb2lKgVdVHWk090bqnDwB9H2hGIb9JnPC9ZpaL/mocYyzTi
+H9fcBrMYkL09FJGr3Uff7qEY4XQTMlLadXue3iKd19PRgV8cRyKp37MYI9/3iLwv
+eYHLtMfrifZahf1ksOPeBphnlfzWo9qqfooUCaGxfSlNPUHhrHZ4aMiRyTE8Xeh2
+-----END RSA PRIVATE KEY-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/CA/ca.srl b/tests/testflows/ldap/external_user_directory/configs/CA/ca.srl
new file mode 100644
index 000000000000..66feb9c8a359
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/CA/ca.srl
@@ -0,0 +1,1 @@
+227B125D27B6B1A4B5955361365DF8EC2D7098C1
diff --git a/tests/testflows/ldap/external_user_directory/configs/CA/dhparam.pem b/tests/testflows/ldap/external_user_directory/configs/CA/dhparam.pem
new file mode 100644
index 000000000000..554d75696ee1
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/CA/dhparam.pem
@@ -0,0 +1,8 @@
+-----BEGIN DH PARAMETERS-----
+MIIBCAKCAQEA1iatTn4jdw1WIu09qeLj8OEeLhzG/w2lI4RUeJT9nU+WTwegpvLN
+/MvrIMIKHRmItyxgraYFau2moC7RKm7OKLmFt6e34QeMvM1vXpuwQav6mfp8GsYL
+mEIw5riFcB73E32NN3g7qmfmurkTF28BohmqhuQp2et7FNoGBKQ6ePZzGHWil3yG
+nEnCwyK0o3eP2IEytx2N50uUWVdfg3MN34L3wqpUivArrjBkoMpqm3/V3wdfoYG9
+ZQkH0gIxT/2FIixCLGlfBsJ1qA/Apz1BJZbGqVu5M5iiQmq+LWN5JLS3xYai4wJL
+rIY8DhjbciSNVWkwTJHzaLwIQa9a6p6mUwIBAg==
+-----END DH PARAMETERS-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/CA/passphrase.txt b/tests/testflows/ldap/external_user_directory/configs/CA/passphrase.txt
new file mode 100644
index 000000000000..2cf58b2364c3
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/CA/passphrase.txt
@@ -0,0 +1,1 @@
+altinity
diff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/common.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/common.xml
new file mode 100644
index 000000000000..df952b28c82d
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/common.xml
@@ -0,0 +1,6 @@
+<yandex>
+    <timezone>Europe/Moscow</timezone>
+    <listen_host replace="replace">0.0.0.0</listen_host>
+    <path>/var/lib/clickhouse/</path>
+    <tmp_path>/var/lib/clickhouse/tmp/</tmp_path>
+</yandex>
diff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/logs.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/logs.xml
new file mode 100644
index 000000000000..bdf1bbc11c11
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/logs.xml
@@ -0,0 +1,17 @@
+<yandex>
+    <shutdown_wait_unfinished>3</shutdown_wait_unfinished>
+    <logger>
+        <level>trace</level>
+        <log>/var/log/clickhouse-server/log.log</log>
+        <errorlog>/var/log/clickhouse-server/log.err.log</errorlog>
+        <size>1000M</size>
+        <count>10</count>
+        <stderr>/var/log/clickhouse-server/stderr.log</stderr>
+        <stdout>/var/log/clickhouse-server/stdout.log</stdout>
+    </logger>
+    <part_log>
+        <database>system</database>
+        <table>part_log</table>
+        <flush_interval_milliseconds>500</flush_interval_milliseconds>
+    </part_log>
+</yandex>
diff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/ports.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/ports.xml
new file mode 100644
index 000000000000..fbc6cea74c0c
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/ports.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0"?>
+<yandex>
+    <https_port>8443</https_port>
+    <tcp_port_secure>9440</tcp_port_secure>
+</yandex>
\ No newline at end of file
diff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/remote.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/remote.xml
new file mode 100644
index 000000000000..51be2a6e8e3b
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/remote.xml
@@ -0,0 +1,107 @@
+<?xml version="1.0"?>
+<yandex>
+    <remote_servers>
+        <replicated_cluster>
+            <shard>
+                <internal_replication>true</internal_replication>
+                <replica>
+                    <host>clickhouse1</host>
+                    <port>9000</port>
+                </replica>
+                <replica>
+                    <host>clickhouse2</host>
+                    <port>9000</port>
+                </replica>
+                <replica>
+                    <host>clickhouse3</host>
+                    <port>9000</port>
+                </replica>
+            </shard>
+        </replicated_cluster>
+        <!--
+        <replicated_cluster_readonly>
+            <shard>
+                <internal_replication>true</internal_replication>
+                <replica>
+                    <host>clickhouse1</host>
+                    <port>9000</port>
+                    <user>readonly</user>
+                </replica>
+                <replica>
+                    <host>clickhouse2</host>
+                    <port>9000</port>
+                    <user>readonly</user>
+                </replica>
+                <replica>
+                    <host>clickhouse3</host>
+                    <port>9000</port>
+                    <user>readonly</user>
+                </replica>
+            </shard>
+        </replicated_cluster_readonly>
+        -->
+        <replicated_cluster_secure>
+            <shard>
+                <internal_replication>true</internal_replication>
+                <replica>
+                    <host>clickhouse1</host>
+                    <port>9440</port>
+                    <secure>1</secure>
+                </replica>
+                <replica>
+                    <host>clickhouse2</host>
+                    <port>9440</port>
+                    <secure>1</secure>
+                </replica>
+                <replica>
+                    <host>clickhouse3</host>
+                    <port>9440</port>
+                    <secure>1</secure>
+                </replica>
+            </shard>
+        </replicated_cluster_secure>
+        <sharded_cluster>
+            <shard>
+                <replica>
+                    <host>clickhouse1</host>
+                    <port>9000</port>
+                </replica>
+            </shard>
+            <shard>
+                <replica>
+                    <host>clickhouse2</host>
+                    <port>9000</port>
+                </replica>
+            </shard>
+            <shard>
+                <replica>
+                    <host>clickhouse3</host>
+                    <port>9000</port>
+                </replica>
+            </shard>
+        </sharded_cluster>
+        <sharded_cluster_secure>
+            <shard>
+                <replica>
+                    <host>clickhouse1</host>
+                    <port>9440</port>
+                    <secure>1</secure>
+                </replica>
+            </shard>
+            <shard>
+                <replica>
+                    <host>clickhouse2</host>
+                    <port>9440</port>
+                    <secure>1</secure>
+                </replica>
+            </shard>
+            <shard>
+                <replica>
+                    <host>clickhouse3</host>
+                    <port>9440</port>
+                    <secure>1</secure>
+                </replica>
+            </shard>
+        </sharded_cluster_secure>
+    </remote_servers>
+</yandex>
diff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/ssl.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/ssl.xml
new file mode 100644
index 000000000000..ca65ffd5e043
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/ssl.xml
@@ -0,0 +1,17 @@
+<yandex>
+    <openSSL>
+        <server>
+            <certificateFile>/etc/clickhouse-server/ssl/server.crt</certificateFile>
+            <privateKeyFile>/etc/clickhouse-server/ssl/server.key</privateKeyFile>
+            <verificationMode>none</verificationMode>
+            <cacheSessions>true</cacheSessions>
+        </server>
+        <client>
+            <cacheSessions>true</cacheSessions>
+            <verificationMode>none</verificationMode>
+            <invalidCertificateHandler>
+                <name>AcceptCertificateHandler</name>
+            </invalidCertificateHandler>
+        </client>
+    </openSSL>
+</yandex>
diff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/storage.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/storage.xml
new file mode 100644
index 000000000000..618fd6b6d24a
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/storage.xml
@@ -0,0 +1,20 @@
+<yandex>
+
+<storage_configuration>
+    <disks>
+        <default>
+            <keep_free_space_bytes>1024</keep_free_space_bytes>
+        </default>
+    </disks>
+    <policies>
+        <default>
+            <volumes>
+                <default>
+                    <disk>default</disk>
+                </default>
+            </volumes>
+        </default>
+    </policies>
+</storage_configuration>
+
+</yandex>
diff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/zookeeper.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/zookeeper.xml
new file mode 100644
index 000000000000..96270e7b645a
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.d/zookeeper.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0"?>
+<yandex>
+    <zookeeper>
+	    <node index="1">
+		    <host>zookeeper</host>
+		    <port>2181</port>
+	    </node>
+        <session_timeout_ms>15000</session_timeout_ms>
+    </zookeeper>
+</yandex>
diff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.xml
new file mode 100644
index 000000000000..e28a0c8e255b
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/config.xml
@@ -0,0 +1,442 @@
+<?xml version="1.0"?>
+<!--
+  NOTE: User and query level settings are set up in "users.xml" file.
+-->
+<yandex>
+    <logger>
+        <!-- Possible levels: https://github.com/pocoproject/poco/blob/develop/Foundation/include/Poco/Logger.h#L105 -->
+        <level>trace</level>
+        <log>/var/log/clickhouse-server/clickhouse-server.log</log>
+        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>
+        <size>1000M</size>
+        <count>10</count>
+        <!-- <console>1</console> --> <!-- Default behavior is autodetection (log to console if not daemon mode and is tty) -->
+    </logger>
+    <!--display_name>production</display_name--> <!-- It is the name that will be shown in the client -->
+    <http_port>8123</http_port>
+    <tcp_port>9000</tcp_port>
+
+    <!-- For HTTPS and SSL over native protocol. -->
+    <!--
+    <https_port>8443</https_port>
+    <tcp_port_secure>9440</tcp_port_secure>
+    -->
+
+    <!-- Used with https_port and tcp_port_secure. Full ssl options list: https://github.com/ClickHouse-Extras/poco/blob/master/NetSSL_OpenSSL/include/Poco/Net/SSLManager.h#L71 -->
+    <openSSL>
+        <server> <!-- Used for https server AND secure tcp port -->
+            <!-- openssl req -subj "/CN=localhost" -new -newkey rsa:2048 -days 365 -nodes -x509 -keyout /etc/clickhouse-server/server.key -out /etc/clickhouse-server/server.crt -->
+            <certificateFile>/etc/clickhouse-server/server.crt</certificateFile>
+            <privateKeyFile>/etc/clickhouse-server/server.key</privateKeyFile>
+            <!-- openssl dhparam -out /etc/clickhouse-server/dhparam.pem 4096 -->
+            <dhParamsFile>/etc/clickhouse-server/dhparam.pem</dhParamsFile>
+            <verificationMode>none</verificationMode>
+            <loadDefaultCAFile>true</loadDefaultCAFile>
+            <cacheSessions>true</cacheSessions>
+            <disableProtocols>sslv2,sslv3</disableProtocols>
+            <preferServerCiphers>true</preferServerCiphers>
+        </server>
+
+        <client> <!-- Used for connecting to https dictionary source -->
+            <loadDefaultCAFile>true</loadDefaultCAFile>
+            <cacheSessions>true</cacheSessions>
+            <disableProtocols>sslv2,sslv3</disableProtocols>
+            <preferServerCiphers>true</preferServerCiphers>
+            <!-- Use for self-signed: <verificationMode>none</verificationMode> -->
+            <invalidCertificateHandler>
+                <!-- Use for self-signed: <name>AcceptCertificateHandler</name> -->
+                <name>RejectCertificateHandler</name>
+            </invalidCertificateHandler>
+        </client>
+    </openSSL>
+
+    <!-- Default root page on http[s] server. For example load UI from https://tabix.io/ when opening http://localhost:8123 -->
+    <!--
+    <http_server_default_response><![CDATA[<html ng-app="SMI2"><head><base href="http://ui.tabix.io/"></head><body><div ui-view="" class="content-ui"></div><script src="http://loader.tabix.io/master.js"></script></body></html>]]></http_server_default_response>
+    -->
+
+    <!-- Port for communication between replicas. Used for data exchange. -->
+    <interserver_http_port>9009</interserver_http_port>
+
+    <!-- Hostname that is used by other replicas to request this server.
+         If not specified, than it is determined analoguous to 'hostname -f' command.
+         This setting could be used to switch replication to another network interface.
+      -->
+    <!--
+    <interserver_http_host>example.yandex.ru</interserver_http_host>
+    -->
+
+    <!-- Listen specified host. use :: (wildcard IPv6 address), if you want to accept connections both with IPv4 and IPv6 from everywhere. -->
+    <!-- <listen_host>::</listen_host> -->
+    <!-- Same for hosts with disabled ipv6: -->
+    <!-- <listen_host>0.0.0.0</listen_host> -->
+
+    <!-- Default values - try listen localhost on ipv4 and ipv6: -->
+    <!--
+    <listen_host>::1</listen_host>
+    <listen_host>127.0.0.1</listen_host>
+    -->
+    <!-- Don't exit if ipv6 or ipv4 unavailable, but listen_host with this protocol specified -->
+    <!-- <listen_try>0</listen_try> -->
+
+    <!-- Allow listen on same address:port -->
+    <!-- <listen_reuse_port>0</listen_reuse_port> -->
+
+    <!-- <listen_backlog>64</listen_backlog> -->
+
+    <max_connections>4096</max_connections>
+    <keep_alive_timeout>3</keep_alive_timeout>
+
+    <!-- Maximum number of concurrent queries. -->
+    <max_concurrent_queries>100</max_concurrent_queries>
+
+    <!-- Set limit on number of open files (default: maximum). This setting makes sense on Mac OS X because getrlimit() fails to retrieve
+         correct maximum value. -->
+    <!-- <max_open_files>262144</max_open_files> -->
+
+    <!-- Size of cache of uncompressed blocks of data, used in tables of MergeTree family.
+         In bytes. Cache is single for server. Memory is allocated only on demand.
+         Cache is used when 'use_uncompressed_cache' user setting turned on (off by default).
+         Uncompressed cache is advantageous only for very short queries and in rare cases.
+      -->
+    <uncompressed_cache_size>8589934592</uncompressed_cache_size>
+
+    <!-- Approximate size of mark cache, used in tables of MergeTree family.
+         In bytes. Cache is single for server. Memory is allocated only on demand.
+         You should not lower this value.
+      -->
+    <mark_cache_size>5368709120</mark_cache_size>
+
+
+    <!-- Path to data directory, with trailing slash. -->
+    <path>/var/lib/clickhouse/</path>
+
+    <!-- Path to temporary data for processing hard queries. -->
+    <tmp_path>/var/lib/clickhouse/tmp/</tmp_path>
+
+    <!-- Directory with user provided files that are accessible by 'file' table function. -->
+    <user_files_path>/var/lib/clickhouse/user_files/</user_files_path>
+
+    <!-- Sources to read users, roles, access rights, profiles of settings, quotas. -->
+    <user_directories>
+        <users_xml>
+            <!-- Path to configuration file with predefined users. -->
+            <path>users.xml</path>
+        </users_xml>
+        <local_directory>
+            <!-- Path to folder where users created by SQL commands are stored. -->
+            <path>/var/lib/clickhouse/access/</path>
+        </local_directory>
+    </user_directories>
+
+    <!-- Default profile of settings. -->
+    <default_profile>default</default_profile>
+
+    <!-- System profile of settings. This settings are used by internal processes (Buffer storage, Distibuted DDL worker and so on). -->
+    <!-- <system_profile>default</system_profile> -->
+
+    <!-- Default database. -->
+    <default_database>default</default_database>
+
+    <!-- Server time zone could be set here.
+
+         Time zone is used when converting between String and DateTime types,
+          when printing DateTime in text formats and parsing DateTime from text,
+          it is used in date and time related functions, if specific time zone was not passed as an argument.
+
+         Time zone is specified as identifier from IANA time zone database, like UTC or Africa/Abidjan.
+         If not specified, system time zone at server startup is used.
+
+         Please note, that server could display time zone alias instead of specified name.
+         Example: W-SU is an alias for Europe/Moscow and Zulu is an alias for UTC.
+    -->
+    <!-- <timezone>Europe/Moscow</timezone> -->
+
+    <!-- You can specify umask here (see "man umask"). Server will apply it on startup.
+         Number is always parsed as octal. Default umask is 027 (other users cannot read logs, data files, etc; group can only read).
+    -->
+    <!-- <umask>022</umask> -->
+
+    <!-- Perform mlockall after startup to lower first queries latency
+          and to prevent clickhouse executable from being paged out under high IO load.
+         Enabling this option is recommended but will lead to increased startup time for up to a few seconds.
+    -->
+    <mlock_executable>false</mlock_executable>
+
+    <!-- Configuration of clusters that could be used in Distributed tables.
+         https://clickhouse.yandex/docs/en/table_engines/distributed/
+      -->
+    <remote_servers incl="remote" >
+        <!-- Test only shard config for testing distributed storage -->
+        <test_shard_localhost>
+            <shard>
+                <replica>
+                    <host>localhost</host>
+                    <port>9000</port>
+                </replica>
+            </shard>
+        </test_shard_localhost>
+        <test_cluster_two_shards_localhost>
+             <shard>
+                 <replica>
+                     <host>localhost</host>
+                     <port>9000</port>
+                 </replica>
+             </shard>
+             <shard>
+                 <replica>
+                     <host>localhost</host>
+                     <port>9000</port>
+                 </replica>
+             </shard>
+         </test_cluster_two_shards_localhost>
+        <test_shard_localhost_secure>
+            <shard>
+                <replica>
+                    <host>localhost</host>
+                    <port>9440</port>
+                    <secure>1</secure>
+                </replica>
+            </shard>
+        </test_shard_localhost_secure>
+        <test_unavailable_shard>
+            <shard>
+                <replica>
+                    <host>localhost</host>
+                    <port>9000</port>
+                </replica>
+            </shard>
+            <shard>
+                <replica>
+                    <host>localhost</host>
+                    <port>1</port>
+                </replica>
+            </shard>
+        </test_unavailable_shard>
+    </remote_servers>
+
+
+    <!-- If element has 'incl' attribute, then for it's value will be used corresponding substitution from another file.
+         By default, path to file with substitutions is /etc/metrika.xml. It could be changed in config in 'include_from' element.
+         Values for substitutions are specified in /yandex/name_of_substitution elements in that file.
+      -->
+
+    <!-- ZooKeeper is used to store metadata about replicas, when using Replicated tables.
+         Optional. If you don't use replicated tables, you could omit that.
+
+         See https://clickhouse.yandex/docs/en/table_engines/replication/
+      -->
+    <zookeeper incl="zookeeper" optional="true" />
+
+    <!-- Substitutions for parameters of replicated tables.
+          Optional. If you don't use replicated tables, you could omit that.
+
+         See https://clickhouse.yandex/docs/en/table_engines/replication/#creating-replicated-tables
+      -->
+    <macros incl="macros" optional="true" />
+
+
+    <!-- Reloading interval for embedded dictionaries, in seconds. Default: 3600. -->
+    <builtin_dictionaries_reload_interval>3600</builtin_dictionaries_reload_interval>
+
+
+    <!-- Maximum session timeout, in seconds. Default: 3600. -->
+    <max_session_timeout>3600</max_session_timeout>
+
+    <!-- Default session timeout, in seconds. Default: 60. -->
+    <default_session_timeout>60</default_session_timeout>
+
+    <!-- Sending data to Graphite for monitoring. Several sections can be defined. -->
+    <!--
+        interval - send every X second
+        root_path - prefix for keys
+        hostname_in_path - append hostname to root_path (default = true)
+        metrics - send data from table system.metrics
+        events - send data from table system.events
+        asynchronous_metrics - send data from table system.asynchronous_metrics
+    -->
+    <!--
+    <graphite>
+        <host>localhost</host>
+        <port>42000</port>
+        <timeout>0.1</timeout>
+        <interval>60</interval>
+        <root_path>one_min</root_path>
+        <hostname_in_path>true</hostname_in_path>
+
+        <metrics>true</metrics>
+        <events>true</events>
+        <asynchronous_metrics>true</asynchronous_metrics>
+    </graphite>
+    <graphite>
+        <host>localhost</host>
+        <port>42000</port>
+        <timeout>0.1</timeout>
+        <interval>1</interval>
+        <root_path>one_sec</root_path>
+
+        <metrics>true</metrics>
+        <events>true</events>
+        <asynchronous_metrics>false</asynchronous_metrics>
+    </graphite>
+    -->
+
+
+    <!-- Query log. Used only for queries with setting log_queries = 1. -->
+    <query_log>
+        <!-- What table to insert data. If table is not exist, it will be created.
+             When query log structure is changed after system update,
+              then old table will be renamed and new table will be created automatically.
+        -->
+        <database>system</database>
+        <table>query_log</table>
+        <!--
+            PARTITION BY expr https://clickhouse.yandex/docs/en/table_engines/custom_partitioning_key/
+            Example:
+                event_date
+                toMonday(event_date)
+                toYYYYMM(event_date)
+                toStartOfHour(event_time)
+        -->
+        <partition_by>toYYYYMM(event_date)</partition_by>
+        <!-- Interval of flushing data. -->
+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>
+    </query_log>
+
+    <!-- Trace log. Stores stack traces collected by query profilers.
+         See query_profiler_real_time_period_ns and query_profiler_cpu_time_period_ns settings. -->
+    <trace_log>
+        <database>system</database>
+        <table>trace_log</table>
+
+        <partition_by>toYYYYMM(event_date)</partition_by>
+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>
+    </trace_log>
+
+    <!-- Query thread log. Has information about all threads participated in query execution.
+         Used only for queries with setting log_query_threads = 1. -->
+    <query_thread_log>
+        <database>system</database>
+        <table>query_thread_log</table>
+        <partition_by>toYYYYMM(event_date)</partition_by>
+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>
+    </query_thread_log>
+
+    <!-- Uncomment if use part log.
+         Part log contains information about all actions with parts in MergeTree tables (creation, deletion, merges, downloads).
+    <part_log>
+        <database>system</database>
+        <table>part_log</table>
+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>
+    </part_log>
+    -->
+
+    <!-- Uncomment to write text log into table.
+         Text log contains all information from usual server log but stores it in structured and efficient way.
+    <text_log>
+        <database>system</database>
+        <table>text_log</table>
+        <flush_interval_milliseconds>7500</flush_interval_milliseconds>
+    </text_log>
+    -->
+
+    <!-- Parameters for embedded dictionaries, used in Yandex.Metrica.
+         See https://clickhouse.yandex/docs/en/dicts/internal_dicts/
+    -->
+
+    <!-- Path to file with region hierarchy. -->
+    <!-- <path_to_regions_hierarchy_file>/opt/geo/regions_hierarchy.txt</path_to_regions_hierarchy_file> -->
+
+    <!-- Path to directory with files containing names of regions -->
+    <!-- <path_to_regions_names_files>/opt/geo/</path_to_regions_names_files> -->
+
+
+    <!-- Configuration of external dictionaries. See:
+         https://clickhouse.yandex/docs/en/dicts/external_dicts/
+    -->
+    <dictionaries_config>*_dictionary.xml</dictionaries_config>
+
+    <!-- Uncomment if you want data to be compressed 30-100% better.
+         Don't do that if you just started using ClickHouse.
+      -->
+    <compression incl="compression">
+    <!--
+        <!- - Set of variants. Checked in order. Last matching case wins. If nothing matches, lz4 will be used. - ->
+        <case>
+
+            <!- - Conditions. All must be satisfied. Some conditions may be omitted. - ->
+            <min_part_size>10000000000</min_part_size>        <!- - Min part size in bytes. - ->
+            <min_part_size_ratio>0.01</min_part_size_ratio>   <!- - Min size of part relative to whole table size. - ->
+
+            <!- - What compression method to use. - ->
+            <method>zstd</method>
+        </case>
+    -->
+    </compression>
+
+    <!-- Allow to execute distributed DDL queries (CREATE, DROP, ALTER, RENAME) on cluster.
+         Works only if ZooKeeper is enabled. Comment it if such functionality isn't required. -->
+    <distributed_ddl>
+        <!-- Path in ZooKeeper to queue with DDL queries -->
+        <path>/clickhouse/task_queue/ddl</path>
+
+        <!-- Settings from this profile will be used to execute DDL queries -->
+        <!-- <profile>default</profile> -->
+    </distributed_ddl>
+
+    <!-- Settings to fine tune MergeTree tables. See documentation in source code, in MergeTreeSettings.h -->
+    <!--
+    <merge_tree>
+        <max_suspicious_broken_parts>5</max_suspicious_broken_parts>
+    </merge_tree>
+    -->
+
+    <!-- Protection from accidental DROP.
+         If size of a MergeTree table is greater than max_table_size_to_drop (in bytes) than table could not be dropped with any DROP query.
+         If you want do delete one table and don't want to restart clickhouse-server, you could create special file <clickhouse-path>/flags/force_drop_table and make DROP once.
+         By default max_table_size_to_drop is 50GB; max_table_size_to_drop=0 allows to DROP any tables.
+         The same for max_partition_size_to_drop.
+         Uncomment to disable protection.
+    -->
+    <!-- <max_table_size_to_drop>0</max_table_size_to_drop> -->
+    <!-- <max_partition_size_to_drop>0</max_partition_size_to_drop> -->
+
+    <!-- Example of parameters for GraphiteMergeTree table engine -->
+    <graphite_rollup_example>
+        <pattern>
+            <regexp>click_cost</regexp>
+            <function>any</function>
+            <retention>
+                <age>0</age>
+                <precision>3600</precision>
+            </retention>
+            <retention>
+                <age>86400</age>
+                <precision>60</precision>
+            </retention>
+        </pattern>
+        <default>
+            <function>max</function>
+            <retention>
+                <age>0</age>
+                <precision>60</precision>
+            </retention>
+            <retention>
+                <age>3600</age>
+                <precision>300</precision>
+            </retention>
+            <retention>
+                <age>86400</age>
+                <precision>3600</precision>
+            </retention>
+        </default>
+    </graphite_rollup_example>
+
+    <!-- Directory in <clickhouse-path> containing schema files for various input formats.
+         The directory will be created if it doesn't exist.
+      -->
+    <format_schema_path>/var/lib/clickhouse/format_schemas/</format_schema_path>
+
+    <!-- Uncomment to disable ClickHouse internal DNS caching. -->
+    <!-- <disable_internal_dns_cache>1</disable_internal_dns_cache> -->
+</yandex>
diff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/dhparam.pem b/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/dhparam.pem
new file mode 100644
index 000000000000..2e6cee0798d7
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/dhparam.pem
@@ -0,0 +1,8 @@
+-----BEGIN DH PARAMETERS-----
+MIIBCAKCAQEAua92DDli13gJ+//ZXyGaggjIuidqB0crXfhUlsrBk9BV1hH3i7fR
+XGP9rUdk2ubnB3k2ejBStL5oBrkHm9SzUFSQHqfDjLZjKoUpOEmuDc4cHvX1XTR5
+Pr1vf5cd0yEncJWG5W4zyUB8k++SUdL2qaeslSs+f491HBLDYn/h8zCgRbBvxhxb
+9qeho1xcbnWeqkN6Kc9bgGozA16P9NLuuLttNnOblkH+lMBf42BSne/TWt3AlGZf
+slKmmZcySUhF8aKfJnLKbkBCFqOtFRh8zBA9a7g+BT/lSANATCDPaAk1YVih2EKb
+dpc3briTDbRsiqg2JKMI7+VdULY9bh3EawIBAg==
+-----END DH PARAMETERS-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/server.crt b/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/server.crt
new file mode 100644
index 000000000000..7ade2d962733
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/server.crt
@@ -0,0 +1,19 @@
+-----BEGIN CERTIFICATE-----
+MIIC/TCCAeWgAwIBAgIJANjx1QSR77HBMA0GCSqGSIb3DQEBCwUAMBQxEjAQBgNV
+BAMMCWxvY2FsaG9zdDAgFw0xODA3MzAxODE2MDhaGA8yMjkyMDUxNDE4MTYwOFow
+FDESMBAGA1UEAwwJbG9jYWxob3N0MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
+CgKCAQEAs9uSo6lJG8o8pw0fbVGVu0tPOljSWcVSXH9uiJBwlZLQnhN4SFSFohfI
+4K8U1tBDTnxPLUo/V1K9yzoLiRDGMkwVj6+4+hE2udS2ePTQv5oaMeJ9wrs+5c9T
+4pOtlq3pLAdm04ZMB1nbrEysceVudHRkQbGHzHp6VG29Fw7Ga6YpqyHQihRmEkTU
+7UCYNA+Vk7aDPdMS/khweyTpXYZimaK9f0ECU3/VOeG3fH6Sp2X6FN4tUj/aFXEj
+sRmU5G2TlYiSIUMF2JPdhSihfk1hJVALrHPTU38SOL+GyyBRWdNcrIwVwbpvsvPg
+pryMSNxnpr0AK0dFhjwnupIv5hJIOQIDAQABo1AwTjAdBgNVHQ4EFgQUjPLb3uYC
+kcamyZHK4/EV8jAP0wQwHwYDVR0jBBgwFoAUjPLb3uYCkcamyZHK4/EV8jAP0wQw
+DAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAM/ocuDvfPus/KpMVD51j
+4IdlU8R0vmnYLQ+ygzOAo7+hUWP5j0yvq4ILWNmQX6HNvUggCgFv9bjwDFhb/5Vr
+85ieWfTd9+LTjrOzTw4avdGwpX9G+6jJJSSq15tw5ElOIFb/qNA9O4dBiu8vn03C
+L/zRSXrARhSqTW5w/tZkUcSTT+M5h28+Lgn9ysx4Ff5vi44LJ1NnrbJbEAIYsAAD
++UA+4MBFKx1r6hHINULev8+lCfkpwIaeS8RL+op4fr6kQPxnULw8wT8gkuc8I4+L
+P9gg/xDHB44T3ADGZ5Ib6O0DJaNiToO6rnoaaxs0KkotbvDWvRoxEytSbXKoYjYp
+0g==
+-----END CERTIFICATE-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/server.key b/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/server.key
new file mode 100644
index 000000000000..f0fb61ac443f
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/ssl/server.key
@@ -0,0 +1,28 @@
+-----BEGIN PRIVATE KEY-----
+MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCz25KjqUkbyjyn
+DR9tUZW7S086WNJZxVJcf26IkHCVktCeE3hIVIWiF8jgrxTW0ENOfE8tSj9XUr3L
+OguJEMYyTBWPr7j6ETa51LZ49NC/mhox4n3Cuz7lz1Pik62WreksB2bThkwHWdus
+TKxx5W50dGRBsYfMenpUbb0XDsZrpimrIdCKFGYSRNTtQJg0D5WTtoM90xL+SHB7
+JOldhmKZor1/QQJTf9U54bd8fpKnZfoU3i1SP9oVcSOxGZTkbZOViJIhQwXYk92F
+KKF+TWElUAusc9NTfxI4v4bLIFFZ01ysjBXBum+y8+CmvIxI3GemvQArR0WGPCe6
+ki/mEkg5AgMBAAECggEATrbIBIxwDJOD2/BoUqWkDCY3dGevF8697vFuZKIiQ7PP
+TX9j4vPq0DfsmDjHvAPFkTHiTQXzlroFik3LAp+uvhCCVzImmHq0IrwvZ9xtB43f
+7Pkc5P6h1l3Ybo8HJ6zRIY3TuLtLxuPSuiOMTQSGRL0zq3SQ5DKuGwkz+kVjHXUN
+MR2TECFwMHKQ5VLrC+7PMpsJYyOMlDAWhRfUalxC55xOXTpaN8TxNnwQ8K2ISVY5
+212Jz/a4hn4LdwxSz3Tiu95PN072K87HLWx3EdT6vW4Ge5P/A3y+smIuNAlanMnu
+plHBRtpATLiTxZt/n6npyrfQVbYjSH7KWhB8hBHtaQKBgQDh9Cq1c/KtqDtE0Ccr
+/r9tZNTUwBE6VP+3OJeKdEdtsfuxjOCkS1oAjgBJiSDOiWPh1DdoDeVZjPKq6pIu
+Mq12OE3Doa8znfCXGbkSzEKOb2unKZMJxzrz99kXt40W5DtrqKPNb24CNqTiY8Aa
+CjtcX+3weat82VRXvph6U8ltMwKBgQDLxjiQQzNoY7qvg7CwJCjf9qq8jmLK766g
+1FHXopqS+dTxDLM8eJSRrpmxGWJvNeNc1uPhsKsKgotqAMdBUQTf7rSTbt4MyoH5
+bUcRLtr+0QTK9hDWMOOvleqNXha68vATkohWYfCueNsC60qD44o8RZAS6UNy3ENq
+cM1cxqe84wKBgQDKkHutWnooJtajlTxY27O/nZKT/HA1bDgniMuKaz4R4Gr1PIez
+on3YW3V0d0P7BP6PWRIm7bY79vkiMtLEKdiKUGWeyZdo3eHvhDb/3DCawtau8L2K
+GZsHVp2//mS1Lfz7Qh8/L/NedqCQ+L4iWiPnZ3THjjwn3CoZ05ucpvrAMwKBgB54
+nay039MUVq44Owub3KDg+dcIU62U+cAC/9oG7qZbxYPmKkc4oL7IJSNecGHA5SbU
+2268RFdl/gLz6tfRjbEOuOHzCjFPdvAdbysanpTMHLNc6FefJ+zxtgk9sJh0C4Jh
+vxFrw9nTKKzfEl12gQ1SOaEaUIO0fEBGbe8ZpauRAoGAMAlGV+2/K4ebvAJKOVTa
+dKAzQ+TD2SJmeR1HZmKDYddNqwtZlzg3v4ZhCk4eaUmGeC1Bdh8MDuB3QQvXz4Dr
+vOIP4UVaOr+uM+7TgAgVnP4/K6IeJGzUDhX93pmpWhODfdu/oojEKVcpCojmEmS1
+KCBtmIrQLqzMpnBpLNuSY+Q=
+-----END PRIVATE KEY-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse/users.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse/users.xml
new file mode 100644
index 000000000000..86b2cd9e1e3d
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse/users.xml
@@ -0,0 +1,133 @@
+<?xml version="1.0"?>
+<yandex>
+    <!-- Profiles of settings. -->
+    <profiles>
+        <!-- Default settings. -->
+        <default>
+            <!-- Maximum memory usage for processing single query, in bytes. -->
+            <max_memory_usage>10000000000</max_memory_usage>
+
+            <!-- Use cache of uncompressed blocks of data. Meaningful only for processing many of very short queries. -->
+            <use_uncompressed_cache>0</use_uncompressed_cache>
+
+            <!-- How to choose between replicas during distributed query processing.
+                 random - choose random replica from set of replicas with minimum number of errors
+                 nearest_hostname - from set of replicas with minimum number of errors, choose replica
+                  with minimum number of different symbols between replica's hostname and local hostname
+                  (Hamming distance).
+                 in_order - first live replica is chosen in specified order.
+                 first_or_random - if first replica one has higher number of errors, pick a random one from replicas with minimum number of errors.
+            -->
+            <load_balancing>random</load_balancing>
+        </default>
+
+        <!-- Profile that allows only read queries. -->
+        <readonly>
+            <readonly>1</readonly>
+        </readonly>
+    </profiles>
+
+    <!-- Users and ACL. -->
+    <users>
+        <!-- If user name was not specified, 'default' user is used. -->
+        <default>
+            <!-- Password could be specified in plaintext or in SHA256 (in hex format).
+
+                 If you want to specify password in plaintext (not recommended), place it in 'password' element.
+                 Example: <password>qwerty</password>.
+                 Password could be empty.
+
+                 If you want to specify SHA256, place it in 'password_sha256_hex' element.
+                 Example: <password_sha256_hex>65e84be33532fb784c48129675f9eff3a682b27168c0ea744b2cf58ee02337c5</password_sha256_hex>
+                 Restrictions of SHA256: impossibility to connect to ClickHouse using MySQL JS client (as of July 2019).
+
+                 If you want to specify double SHA1, place it in 'password_double_sha1_hex' element.
+                 Example: <password_double_sha1_hex>e395796d6546b1b65db9d665cd43f0e858dd4303</password_double_sha1_hex>
+
+                 How to generate decent password:
+                 Execute: PASSWORD=$(base64 < /dev/urandom | head -c8); echo "$PASSWORD"; echo -n "$PASSWORD" | sha256sum | tr -d '-'
+                 In first line will be password and in second - corresponding SHA256.
+
+                 How to generate double SHA1:
+                 Execute: PASSWORD=$(base64 < /dev/urandom | head -c8); echo "$PASSWORD"; echo -n "$PASSWORD" | openssl dgst -sha1 -binary | openssl dgst -sha1
+                 In first line will be password and in second - corresponding double SHA1.
+            -->
+            <password></password>
+
+            <!-- List of networks with open access.
+
+                 To open access from everywhere, specify:
+                    <ip>::/0</ip>
+
+                 To open access only from localhost, specify:
+                    <ip>::1</ip>
+                    <ip>127.0.0.1</ip>
+
+                 Each element of list has one of the following forms:
+                 <ip> IP-address or network mask. Examples: 213.180.204.3 or 10.0.0.1/8 or 10.0.0.1/255.255.255.0
+                     2a02:6b8::3 or 2a02:6b8::3/64 or 2a02:6b8::3/ffff:ffff:ffff:ffff::.
+                 <host> Hostname. Example: server01.yandex.ru.
+                     To check access, DNS query is performed, and all received addresses compared to peer address.
+                 <host_regexp> Regular expression for host names. Example, ^server\d\d-\d\d-\d\.yandex\.ru$
+                     To check access, DNS PTR query is performed for peer address and then regexp is applied.
+                     Then, for result of PTR query, another DNS query is performed and all received addresses compared to peer address.
+                     Strongly recommended that regexp is ends with $
+                 All results of DNS requests are cached till server restart.
+            -->
+            <networks incl="networks" replace="replace">
+                <ip>::/0</ip>
+            </networks>
+
+            <!-- Settings profile for user. -->
+            <profile>default</profile>
+
+            <!-- Quota for user. -->
+            <quota>default</quota>
+
+            <!-- Allow access management -->
+            <access_management>1</access_management>
+
+            <!-- Example of row level security policy. -->
+            <!-- <databases>
+                <test>
+                    <filtered_table1>
+                        <filter>a = 1</filter>
+                    </filtered_table1>
+                    <filtered_table2>
+                        <filter>a + b &lt; 1 or c - d &gt; 5</filter>
+                    </filtered_table2>
+                </test>
+            </databases> -->
+        </default>
+
+        <!-- Example of user with readonly access. -->
+        <!-- <readonly>
+            <password></password>
+            <networks incl="networks" replace="replace">
+                <ip>::1</ip>
+                <ip>127.0.0.1</ip>
+            </networks>
+            <profile>readonly</profile>
+            <quota>default</quota>
+        </readonly> -->
+    </users>
+
+    <!-- Quotas. -->
+    <quotas>
+        <!-- Name of quota. -->
+        <default>
+            <!-- Limits for time interval. You could specify many intervals with different limits. -->
+            <interval>
+                <!-- Length of interval. -->
+                <duration>3600</duration>
+
+                <!-- No limits. Just calculate resource usage for time interval. -->
+                <queries>0</queries>
+                <errors>0</errors>
+                <result_rows>0</result_rows>
+                <read_rows>0</read_rows>
+                <execution_time>0</execution_time>
+            </interval>
+        </default>
+    </quotas>
+</yandex>
diff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse1/config.d/macros.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse1/config.d/macros.xml
new file mode 100644
index 000000000000..6cdcc1b440c3
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse1/config.d/macros.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0"?>
+<yandex>
+    <macros>
+        <replica>clickhouse1</replica>
+        <shard>01</shard>
+        <shard2>01</shard2>
+    </macros>
+</yandex>
diff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse2/config.d/macros.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse2/config.d/macros.xml
new file mode 100644
index 000000000000..a114a9ce4ab1
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse2/config.d/macros.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0"?>
+<yandex>
+    <macros>
+        <replica>clickhouse2</replica>
+        <shard>01</shard>
+        <shard2>02</shard2>
+    </macros>
+</yandex>
diff --git a/tests/testflows/ldap/external_user_directory/configs/clickhouse3/config.d/macros.xml b/tests/testflows/ldap/external_user_directory/configs/clickhouse3/config.d/macros.xml
new file mode 100644
index 000000000000..904a27b01723
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/clickhouse3/config.d/macros.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0"?>
+<yandex>
+    <macros>
+        <replica>clickhouse3</replica>
+        <shard>01</shard>
+        <shard2>03</shard2>
+    </macros>
+</yandex>
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap1/config/export.ldif b/tests/testflows/ldap/external_user_directory/configs/ldap1/config/export.ldif
new file mode 100644
index 000000000000..621dd32ca0c0
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap1/config/export.ldif
@@ -0,0 +1,64 @@
+# LDIF Export for dc=company,dc=com
+# Server: openldap (openldap)
+# Search Scope: sub
+# Search Filter: (objectClass=*)
+# Total Entries: 7
+#
+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm
+# Version: 1.2.5
+
+# Entry 1: dc=company,dc=com
+#dn: dc=company,dc=com
+#dc: company
+#o: company
+#objectclass: top
+#objectclass: dcObject
+#objectclass: organization
+
+# Entry 2: cn=admin,dc=company,dc=com
+#dn: cn=admin,dc=company,dc=com
+#cn: admin
+#description: LDAP administrator
+#objectclass: simpleSecurityObject
+#objectclass: organizationalRole
+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF
+
+# Entry 3: ou=groups,dc=company,dc=com
+dn: ou=groups,dc=company,dc=com
+objectclass: organizationalUnit
+objectclass: top
+ou: groups
+
+# Entry 4: cn=admin,ou=groups,dc=company,dc=com
+dn: cn=admin,ou=groups,dc=company,dc=com
+cn: admin
+gidnumber: 500
+objectclass: posixGroup
+objectclass: top
+
+# Entry 5: cn=users,ou=groups,dc=company,dc=com
+dn: cn=users,ou=groups,dc=company,dc=com
+cn: users
+gidnumber: 501
+objectclass: posixGroup
+objectclass: top
+
+# Entry 6: ou=users,dc=company,dc=com
+dn: ou=users,dc=company,dc=com
+objectclass: organizationalUnit
+objectclass: top
+ou: users
+
+# Entry 7: cn=user1,ou=users,dc=company,dc=com
+dn: cn=user1,ou=users,dc=company,dc=com
+cn: user1
+gidnumber: 501
+givenname: John
+homedirectory: /home/users/user1
+objectclass: inetOrgPerson
+objectclass: posixAccount
+objectclass: top
+sn: User
+uid: user1
+uidnumber: 1101
+userpassword: user1
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ca.crt b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ca.crt
new file mode 100644
index 000000000000..8c71e3afc91d
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ca.crt
@@ -0,0 +1,22 @@
+-----BEGIN CERTIFICATE-----
+MIIDlTCCAn2gAwIBAgIUJBqw2dHM2DDCZjYSkPOESlvDH6swDQYJKoZIhvcNAQEL
+BQAwWjELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQHDAZPdHRhd2Ex
+ETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTENMAsGA1UEAwwEcm9vdDAe
+Fw0yMDA2MTExOTAzNDhaFw0zMDA2MDkxOTAzNDhaMFoxCzAJBgNVBAYTAkNBMQsw
+CQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYDVQQKDAhBbHRpbml0eTEL
+MAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB
+DwAwggEKAoIBAQC9Irr0zGV+HCI2fZ0ht4hR5It4Sbjz4RwZV8ENRP/+TEz8l9eK
+J6ygxhKX7SMYzIs/jS9Gsq4plX1r2ujW1qRf8yLpR4+dGLP+jBRi1drj0XjZXosT
+SERjWzgPauWxL9LN8+l26eBAqz6fw5e0W8WRSTgf5iGiCcKOTmaATIUjP0CdfWKK
+qpktI4vhe++CXZFJ3usR+8KZ/FwwbCLJM/3J2HnbcXfcaYPYvr1tfqLudKSTbG9H
+M3+AVwjctdesc/0sbd51Zsm0ClQptMbuKnDCYauGg61kNkgbgPgRmH9Pzo67DtxF
+/WW+PtOzq8xLOifciQ9Piboy9QBSQZGwf4wzAgMBAAGjUzBRMB0GA1UdDgQWBBSi
+njya0RDozx3OZTLYFpwqYnlpIDAfBgNVHSMEGDAWgBSinjya0RDozx3OZTLYFpwq
+YnlpIDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBAD7VyFg7F
+U1C25KFvtauchAOjCW6w7U/b3z1dVZvcQ88/kH1VsLUcfGixlSilUEfPTJsi7OA0
+R5BQdh2GGcjUJv4iqEFGU05KvMVmRRKn08P62+ZhJxKMxG26VzcliRZzCMkI6d0W
+lFwI6nM45yeqdHVh5k4xbuJzqpbD9BtXXLI+/Ra9Fx8S9ETA3GdidpZLU5P1VLxq
+UuedfqyAVWZXpr6TAURGxouRmRzul9yFzbSUex+MLEIPrstjtEwV3+tBQZJz9xAS
+TVPj+Nv3LO7GCq54bdwkq1ioWbSL2hEmABkj6kdW/JwmfhGHf/2rirDVMzrTYw07
+dFJfAZC+FEsv
+-----END CERTIFICATE-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/dhparam.pem b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/dhparam.pem
new file mode 100644
index 000000000000..0a96faffd627
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/dhparam.pem
@@ -0,0 +1,5 @@
+-----BEGIN DH PARAMETERS-----
+MIGHAoGBAJitt2hhnpDViQ5ko2ipBMdjy+bZ6FR/WdZ987R7lQvBkKehPXmxtEyV
+AO6ofv5CZSDJokc5bUeBOAtg0EhMTCH82uPdwQvt58jRXcxXBg4JTjkx+oW9LBv2
+FdZsbaX8+SYivmiZ0Jp8T/HBm/4DA9VBS0O5GFRS4C7dHhmSTPfDAgEC
+-----END DH PARAMETERS-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.crt b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.crt
new file mode 100644
index 000000000000..9167cbf861d0
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.crt
@@ -0,0 +1,20 @@
+-----BEGIN CERTIFICATE-----
+MIIDQDCCAigCFCJ7El0ntrGktZVTYTZd+OwtcJjBMA0GCSqGSIb3DQEBCwUAMFox
+CzAJBgNVBAYTAkNBMQswCQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYD
+VQQKDAhBbHRpbml0eTELMAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwHhcNMjAw
+NjExMTkxMTQzWhcNMzAwNjA5MTkxMTQzWjBfMQswCQYDVQQGEwJDQTELMAkGA1UE
+CAwCT04xDzANBgNVBAcMBk90dGF3YTERMA8GA1UECgwIQWx0aW5pdHkxCzAJBgNV
+BAsMAlFBMRIwEAYDVQQDDAlvcGVubGRhcDIwggEiMA0GCSqGSIb3DQEBAQUAA4IB
+DwAwggEKAoIBAQC0Mbn//U56URavMgXm82FWP6vBdKuRydFX/L0M5XLlnAtk/IXG
+/T+4t7nOBJxWmTp/xpsPtSMALE4eFJpEUEqlpVbG5DfBzVWcYOWoMeRAcHWCDkzr
+PkB6I0dfF0Mm5hoaDhn+ZXjBWvoh/IlJdAnPg5mlejflJBQ7xtFC9eN6WjldXuRO
+vyntGNuMfVLgITHwXuH2yZ98G0mFO6TU/9dRY/Z3D6RTSzKdb17Yk/VnG+ry92u2
+0sgXIBvhuJuC3ksWLArwwFoMl8DVa05D4O2H76goGdCcQ0KzqBV8RPXAh3UcgP2e
+Zu90p2EGIhIk+sZTCkPd4dorxjL9nkRR86HdAgMBAAEwDQYJKoZIhvcNAQELBQAD
+ggEBAJWiCxJaTksv/BTsh/etxlDY5eHwqStqIuiovEQ8bhGAcKJ3bfWd/YTb8DUS
+hrLvXrXdOVC+U8PqPFXBpdOqcm5Dc233z52VgUCb+0EKv3lAzgKXRIo32h52skdK
+NnRrCHDeDzgfEIXR4MEJ99cLEaxWyXQhremmTYWHYznry9/4NYz40gCDxHn9dJAi
+KxFyDNxhtuKs58zp4PrBoo+542JurAoLPtRGOhdXpU2RkQVU/ho38HsAXDStAB5D
+vAoSxPuMHKgo17ffrb0oqU3didwaA9fIsz7Mr6RxmI7X03s7hLzNBq9FCqu0U3RR
+CX4zWGFNJu/ieSGVWLYKQzbYxp8=
+-----END CERTIFICATE-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.csr b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.csr
new file mode 100644
index 000000000000..bf569f727d63
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.csr
@@ -0,0 +1,17 @@
+-----BEGIN CERTIFICATE REQUEST-----
+MIICpDCCAYwCAQAwXzELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQH
+DAZPdHRhd2ExETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTESMBAGA1UE
+AwwJb3BlbmxkYXAyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtDG5
+//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyFxv0/uLe5zgScVpk6f8ab
+D7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M6z5AeiNHXxdDJuYaGg4Z
+/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7kTr8p7RjbjH1S4CEx8F7h
+9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdrttLIFyAb4bibgt5LFiwK
+8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9nmbvdKdhBiISJPrGUwpD
+3eHaK8Yy/Z5EUfOh3QIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAEzIjZQOT5R7
+mEJg+RFpCSIoPn3xJ4/VMMyWqA3bTGZKpb4S6GxgsierY/87kPL7jZrMdGYB4Dc3
+2M3VWZGXlYo8vctH1zLE9VW6CzosUpl20lhdgydoCMz3RQqdJyK8aGeFTeLtk7G/
+TRCCUFUE6jaA+VtaCPCnOJSff3jUf76xguEu7dgTZgCKV7dtBqald8gIzF3D+AJJ
+7pEN2UrC3UR0xpe2cj2GhndQJ+WsIyft3zpNFzAO13j8ZPibuVP7oDWcW3ixNCWC
+213aeRVplJGof8Eo6llDxP+6Fwp1YmOoQmwB1Xm3t4ADn7FLJ14LONLB7q40KviG
+RyLyqu3IVOI=
+-----END CERTIFICATE REQUEST-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.key b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.key
new file mode 100644
index 000000000000..5ab3a3f8b590
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap2/certs/ldap.key
@@ -0,0 +1,27 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIEogIBAAKCAQEAtDG5//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyF
+xv0/uLe5zgScVpk6f8abD7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M
+6z5AeiNHXxdDJuYaGg4Z/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7k
+Tr8p7RjbjH1S4CEx8F7h9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdr
+ttLIFyAb4bibgt5LFiwK8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9
+nmbvdKdhBiISJPrGUwpD3eHaK8Yy/Z5EUfOh3QIDAQABAoIBADugMMIKWcuTxYPX
+c6iGZHEbxIPRTWyCcalB0nTQAAMGbabPAJ1l8432DZ+kWu806OybFXhPIfPOtVKy
+0pFEWE8TtPE/V0vj3C5Qye2sBLFmBRwyCzXUdZV00wseMXRPs9dnTyalAR5KMnbI
+j80kfpKSI2dkV9aU57UYBuq3Xrx/TCGItwL769D4ZZW9BvbpiTZApQQFZ0gwUFFn
+btPXGU9Ti8H4mfBuZWL+5CaZdqOo76+CXvMPaUK0F9MJp4yX3XxQLRNH3qz/Tyn7
+h7QOOo0XTqoUmzRw0N9QRVH5LRdSE5yq3aF9aFKjNW59exz+62pufOFadngzkpkn
+OKCzgWkCgYEA4mOWWMzdYwMn3GtfG7whqlqy7wOmMkNb81zTDQejHBV98dnj0AHr
+deurfKWzHrAh3DXo6tFeqUIgXabhBPS/0dEx/S5sgLFmuUZP05EUYahfWBgzzmM9
+C6Oe5xIMLzxsZCJczolsfkEsoFe4o0vkvuLYoQrQL7InzewcDy8cUxsCgYEAy8Na
+YCnanSNDY03Bulcni+5sF+opaHseeki1pv3nlw8TwsWuZF9ApS+yL7ck9jJjxBRR
+RC3KGmpoqIr0vTmUYS946ngQWXPE90zfuhJfM+NRv/q0oCjH0qAcxRbTkls5On9v
+oxJ8rO7gD6K85eHqasWdbCVzdZrobOXzay37tmcCgYBfyUUmw190cjReZauzH3Gb
+E48b5A5gu/Fe0cqWe8G+szU7rDZgnz9SAGnpbm6QMHPTKZgoKngD42+wUFhq8Wdr
+zjh5aDgOZ4EQKTjDSmI2Q7g7nNnmnESK9SrZl+BB6C3wXD2qQaj+7nKEUTlVFlpt
+jaucz+dwFtASp7Djl8pDOwKBgEtr2c3ycArt/ImLRIP2spqm+7e2YvFbcSKOOz6+
+iLRvTj8v8KcSYtlB2FC1F6dRa4AujQ4RbNduP6LzHDfWUkfOzJDtNBAIPAXVnJJB
+LqAEKkRHRghqT9x0i3GgS1vHDF3MwcO4mhFgserXr9ffUWeIEgbvrdcAKbv1Oa6Y
+bK1NAoGAGPm8ISmboDJynjBl9wMrkcy23Pwg9kmyocdWUHh0zMLDKriZNKYB6u/U
+C+/RTfkohPoHPzkeqWiHp7z3JhMItYUfTkNW6vMCxEGc0NEN6ZyMIjtiDPGN1n6O
+E7jmODFmj1AQICQGdV5SHp+yKvKyb0YHKyDwETbs4SZBXxVvjEw=
+-----END RSA PRIVATE KEY-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap2/config/export.ldif b/tests/testflows/ldap/external_user_directory/configs/ldap2/config/export.ldif
new file mode 100644
index 000000000000..6766aaae6f10
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap2/config/export.ldif
@@ -0,0 +1,64 @@
+# LDIF Export for dc=company,dc=com
+# Server: openldap (openldap)
+# Search Scope: sub
+# Search Filter: (objectClass=*)
+# Total Entries: 7
+#
+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm
+# Version: 1.2.5
+
+# Entry 1: dc=company,dc=com
+#dn: dc=company,dc=com
+#dc: company
+#o: company
+#objectclass: top
+#objectclass: dcObject
+#objectclass: organization
+
+# Entry 2: cn=admin,dc=company,dc=com
+#dn: cn=admin,dc=company,dc=com
+#cn: admin
+#description: LDAP administrator
+#objectclass: simpleSecurityObject
+#objectclass: organizationalRole
+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF
+
+# Entry 3: ou=groups,dc=company,dc=com
+dn: ou=groups,dc=company,dc=com
+objectclass: organizationalUnit
+objectclass: top
+ou: groups
+
+# Entry 4: cn=admin,ou=groups,dc=company,dc=com
+dn: cn=admin,ou=groups,dc=company,dc=com
+cn: admin
+gidnumber: 500
+objectclass: posixGroup
+objectclass: top
+
+# Entry 5: cn=users,ou=groups,dc=company,dc=com
+dn: cn=users,ou=groups,dc=company,dc=com
+cn: users
+gidnumber: 501
+objectclass: posixGroup
+objectclass: top
+
+# Entry 6: ou=users,dc=company,dc=com
+dn: ou=users,dc=company,dc=com
+objectclass: organizationalUnit
+objectclass: top
+ou: users
+
+# Entry 7: cn=user2,ou=users,dc=company,dc=com
+dn: cn=user2,ou=users,dc=company,dc=com
+cn: user2
+gidnumber: 501
+givenname: John
+homedirectory: /home/users/user2
+objectclass: inetOrgPerson
+objectclass: posixAccount
+objectclass: top
+sn: User
+uid: user2
+uidnumber: 1002
+userpassword: user2
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ca.crt b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ca.crt
new file mode 100644
index 000000000000..8c71e3afc91d
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ca.crt
@@ -0,0 +1,22 @@
+-----BEGIN CERTIFICATE-----
+MIIDlTCCAn2gAwIBAgIUJBqw2dHM2DDCZjYSkPOESlvDH6swDQYJKoZIhvcNAQEL
+BQAwWjELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQHDAZPdHRhd2Ex
+ETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTENMAsGA1UEAwwEcm9vdDAe
+Fw0yMDA2MTExOTAzNDhaFw0zMDA2MDkxOTAzNDhaMFoxCzAJBgNVBAYTAkNBMQsw
+CQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYDVQQKDAhBbHRpbml0eTEL
+MAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB
+DwAwggEKAoIBAQC9Irr0zGV+HCI2fZ0ht4hR5It4Sbjz4RwZV8ENRP/+TEz8l9eK
+J6ygxhKX7SMYzIs/jS9Gsq4plX1r2ujW1qRf8yLpR4+dGLP+jBRi1drj0XjZXosT
+SERjWzgPauWxL9LN8+l26eBAqz6fw5e0W8WRSTgf5iGiCcKOTmaATIUjP0CdfWKK
+qpktI4vhe++CXZFJ3usR+8KZ/FwwbCLJM/3J2HnbcXfcaYPYvr1tfqLudKSTbG9H
+M3+AVwjctdesc/0sbd51Zsm0ClQptMbuKnDCYauGg61kNkgbgPgRmH9Pzo67DtxF
+/WW+PtOzq8xLOifciQ9Piboy9QBSQZGwf4wzAgMBAAGjUzBRMB0GA1UdDgQWBBSi
+njya0RDozx3OZTLYFpwqYnlpIDAfBgNVHSMEGDAWgBSinjya0RDozx3OZTLYFpwq
+YnlpIDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBAD7VyFg7F
+U1C25KFvtauchAOjCW6w7U/b3z1dVZvcQ88/kH1VsLUcfGixlSilUEfPTJsi7OA0
+R5BQdh2GGcjUJv4iqEFGU05KvMVmRRKn08P62+ZhJxKMxG26VzcliRZzCMkI6d0W
+lFwI6nM45yeqdHVh5k4xbuJzqpbD9BtXXLI+/Ra9Fx8S9ETA3GdidpZLU5P1VLxq
+UuedfqyAVWZXpr6TAURGxouRmRzul9yFzbSUex+MLEIPrstjtEwV3+tBQZJz9xAS
+TVPj+Nv3LO7GCq54bdwkq1ioWbSL2hEmABkj6kdW/JwmfhGHf/2rirDVMzrTYw07
+dFJfAZC+FEsv
+-----END CERTIFICATE-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/dhparam.pem b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/dhparam.pem
new file mode 100644
index 000000000000..0a96faffd627
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/dhparam.pem
@@ -0,0 +1,5 @@
+-----BEGIN DH PARAMETERS-----
+MIGHAoGBAJitt2hhnpDViQ5ko2ipBMdjy+bZ6FR/WdZ987R7lQvBkKehPXmxtEyV
+AO6ofv5CZSDJokc5bUeBOAtg0EhMTCH82uPdwQvt58jRXcxXBg4JTjkx+oW9LBv2
+FdZsbaX8+SYivmiZ0Jp8T/HBm/4DA9VBS0O5GFRS4C7dHhmSTPfDAgEC
+-----END DH PARAMETERS-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.crt b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.crt
new file mode 100644
index 000000000000..9167cbf861d0
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.crt
@@ -0,0 +1,20 @@
+-----BEGIN CERTIFICATE-----
+MIIDQDCCAigCFCJ7El0ntrGktZVTYTZd+OwtcJjBMA0GCSqGSIb3DQEBCwUAMFox
+CzAJBgNVBAYTAkNBMQswCQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYD
+VQQKDAhBbHRpbml0eTELMAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwHhcNMjAw
+NjExMTkxMTQzWhcNMzAwNjA5MTkxMTQzWjBfMQswCQYDVQQGEwJDQTELMAkGA1UE
+CAwCT04xDzANBgNVBAcMBk90dGF3YTERMA8GA1UECgwIQWx0aW5pdHkxCzAJBgNV
+BAsMAlFBMRIwEAYDVQQDDAlvcGVubGRhcDIwggEiMA0GCSqGSIb3DQEBAQUAA4IB
+DwAwggEKAoIBAQC0Mbn//U56URavMgXm82FWP6vBdKuRydFX/L0M5XLlnAtk/IXG
+/T+4t7nOBJxWmTp/xpsPtSMALE4eFJpEUEqlpVbG5DfBzVWcYOWoMeRAcHWCDkzr
+PkB6I0dfF0Mm5hoaDhn+ZXjBWvoh/IlJdAnPg5mlejflJBQ7xtFC9eN6WjldXuRO
+vyntGNuMfVLgITHwXuH2yZ98G0mFO6TU/9dRY/Z3D6RTSzKdb17Yk/VnG+ry92u2
+0sgXIBvhuJuC3ksWLArwwFoMl8DVa05D4O2H76goGdCcQ0KzqBV8RPXAh3UcgP2e
+Zu90p2EGIhIk+sZTCkPd4dorxjL9nkRR86HdAgMBAAEwDQYJKoZIhvcNAQELBQAD
+ggEBAJWiCxJaTksv/BTsh/etxlDY5eHwqStqIuiovEQ8bhGAcKJ3bfWd/YTb8DUS
+hrLvXrXdOVC+U8PqPFXBpdOqcm5Dc233z52VgUCb+0EKv3lAzgKXRIo32h52skdK
+NnRrCHDeDzgfEIXR4MEJ99cLEaxWyXQhremmTYWHYznry9/4NYz40gCDxHn9dJAi
+KxFyDNxhtuKs58zp4PrBoo+542JurAoLPtRGOhdXpU2RkQVU/ho38HsAXDStAB5D
+vAoSxPuMHKgo17ffrb0oqU3didwaA9fIsz7Mr6RxmI7X03s7hLzNBq9FCqu0U3RR
+CX4zWGFNJu/ieSGVWLYKQzbYxp8=
+-----END CERTIFICATE-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.csr b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.csr
new file mode 100644
index 000000000000..bf569f727d63
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.csr
@@ -0,0 +1,17 @@
+-----BEGIN CERTIFICATE REQUEST-----
+MIICpDCCAYwCAQAwXzELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQH
+DAZPdHRhd2ExETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTESMBAGA1UE
+AwwJb3BlbmxkYXAyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtDG5
+//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyFxv0/uLe5zgScVpk6f8ab
+D7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M6z5AeiNHXxdDJuYaGg4Z
+/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7kTr8p7RjbjH1S4CEx8F7h
+9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdrttLIFyAb4bibgt5LFiwK
+8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9nmbvdKdhBiISJPrGUwpD
+3eHaK8Yy/Z5EUfOh3QIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAEzIjZQOT5R7
+mEJg+RFpCSIoPn3xJ4/VMMyWqA3bTGZKpb4S6GxgsierY/87kPL7jZrMdGYB4Dc3
+2M3VWZGXlYo8vctH1zLE9VW6CzosUpl20lhdgydoCMz3RQqdJyK8aGeFTeLtk7G/
+TRCCUFUE6jaA+VtaCPCnOJSff3jUf76xguEu7dgTZgCKV7dtBqald8gIzF3D+AJJ
+7pEN2UrC3UR0xpe2cj2GhndQJ+WsIyft3zpNFzAO13j8ZPibuVP7oDWcW3ixNCWC
+213aeRVplJGof8Eo6llDxP+6Fwp1YmOoQmwB1Xm3t4ADn7FLJ14LONLB7q40KviG
+RyLyqu3IVOI=
+-----END CERTIFICATE REQUEST-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.key b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.key
new file mode 100644
index 000000000000..5ab3a3f8b590
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap3/certs/ldap.key
@@ -0,0 +1,27 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIEogIBAAKCAQEAtDG5//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyF
+xv0/uLe5zgScVpk6f8abD7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M
+6z5AeiNHXxdDJuYaGg4Z/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7k
+Tr8p7RjbjH1S4CEx8F7h9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdr
+ttLIFyAb4bibgt5LFiwK8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9
+nmbvdKdhBiISJPrGUwpD3eHaK8Yy/Z5EUfOh3QIDAQABAoIBADugMMIKWcuTxYPX
+c6iGZHEbxIPRTWyCcalB0nTQAAMGbabPAJ1l8432DZ+kWu806OybFXhPIfPOtVKy
+0pFEWE8TtPE/V0vj3C5Qye2sBLFmBRwyCzXUdZV00wseMXRPs9dnTyalAR5KMnbI
+j80kfpKSI2dkV9aU57UYBuq3Xrx/TCGItwL769D4ZZW9BvbpiTZApQQFZ0gwUFFn
+btPXGU9Ti8H4mfBuZWL+5CaZdqOo76+CXvMPaUK0F9MJp4yX3XxQLRNH3qz/Tyn7
+h7QOOo0XTqoUmzRw0N9QRVH5LRdSE5yq3aF9aFKjNW59exz+62pufOFadngzkpkn
+OKCzgWkCgYEA4mOWWMzdYwMn3GtfG7whqlqy7wOmMkNb81zTDQejHBV98dnj0AHr
+deurfKWzHrAh3DXo6tFeqUIgXabhBPS/0dEx/S5sgLFmuUZP05EUYahfWBgzzmM9
+C6Oe5xIMLzxsZCJczolsfkEsoFe4o0vkvuLYoQrQL7InzewcDy8cUxsCgYEAy8Na
+YCnanSNDY03Bulcni+5sF+opaHseeki1pv3nlw8TwsWuZF9ApS+yL7ck9jJjxBRR
+RC3KGmpoqIr0vTmUYS946ngQWXPE90zfuhJfM+NRv/q0oCjH0qAcxRbTkls5On9v
+oxJ8rO7gD6K85eHqasWdbCVzdZrobOXzay37tmcCgYBfyUUmw190cjReZauzH3Gb
+E48b5A5gu/Fe0cqWe8G+szU7rDZgnz9SAGnpbm6QMHPTKZgoKngD42+wUFhq8Wdr
+zjh5aDgOZ4EQKTjDSmI2Q7g7nNnmnESK9SrZl+BB6C3wXD2qQaj+7nKEUTlVFlpt
+jaucz+dwFtASp7Djl8pDOwKBgEtr2c3ycArt/ImLRIP2spqm+7e2YvFbcSKOOz6+
+iLRvTj8v8KcSYtlB2FC1F6dRa4AujQ4RbNduP6LzHDfWUkfOzJDtNBAIPAXVnJJB
+LqAEKkRHRghqT9x0i3GgS1vHDF3MwcO4mhFgserXr9ffUWeIEgbvrdcAKbv1Oa6Y
+bK1NAoGAGPm8ISmboDJynjBl9wMrkcy23Pwg9kmyocdWUHh0zMLDKriZNKYB6u/U
+C+/RTfkohPoHPzkeqWiHp7z3JhMItYUfTkNW6vMCxEGc0NEN6ZyMIjtiDPGN1n6O
+E7jmODFmj1AQICQGdV5SHp+yKvKyb0YHKyDwETbs4SZBXxVvjEw=
+-----END RSA PRIVATE KEY-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap3/config/export.ldif b/tests/testflows/ldap/external_user_directory/configs/ldap3/config/export.ldif
new file mode 100644
index 000000000000..6ac9a995efd0
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap3/config/export.ldif
@@ -0,0 +1,64 @@
+# LDIF Export for dc=company,dc=com
+# Server: openldap (openldap)
+# Search Scope: sub
+# Search Filter: (objectClass=*)
+# Total Entries: 7
+#
+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm
+# Version: 1.2.5
+
+# Entry 1: dc=company,dc=com
+#dn: dc=company,dc=com
+#dc: company
+#o: company
+#objectclass: top
+#objectclass: dcObject
+#objectclass: organization
+
+# Entry 2: cn=admin,dc=company,dc=com
+#dn: cn=admin,dc=company,dc=com
+#cn: admin
+#description: LDAP administrator
+#objectclass: simpleSecurityObject
+#objectclass: organizationalRole
+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF
+
+# Entry 3: ou=groups,dc=company,dc=com
+dn: ou=groups,dc=company,dc=com
+objectclass: organizationalUnit
+objectclass: top
+ou: groups
+
+# Entry 4: cn=admin,ou=groups,dc=company,dc=com
+dn: cn=admin,ou=groups,dc=company,dc=com
+cn: admin
+gidnumber: 500
+objectclass: posixGroup
+objectclass: top
+
+# Entry 5: cn=users,ou=groups,dc=company,dc=com
+dn: cn=users,ou=groups,dc=company,dc=com
+cn: users
+gidnumber: 501
+objectclass: posixGroup
+objectclass: top
+
+# Entry 6: ou=users,dc=company,dc=com
+dn: ou=users,dc=company,dc=com
+objectclass: organizationalUnit
+objectclass: top
+ou: users
+
+# Entry 7: cn=user3,ou=users,dc=company,dc=com
+dn: cn=user3,ou=users,dc=company,dc=com
+cn: user3
+gidnumber: 501
+givenname: John
+homedirectory: /home/users/user3
+objectclass: inetOrgPerson
+objectclass: posixAccount
+objectclass: top
+sn: User
+uid: user3
+uidnumber: 1003
+userpassword: user3
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ca.crt b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ca.crt
new file mode 100644
index 000000000000..8c71e3afc91d
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ca.crt
@@ -0,0 +1,22 @@
+-----BEGIN CERTIFICATE-----
+MIIDlTCCAn2gAwIBAgIUJBqw2dHM2DDCZjYSkPOESlvDH6swDQYJKoZIhvcNAQEL
+BQAwWjELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQHDAZPdHRhd2Ex
+ETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTENMAsGA1UEAwwEcm9vdDAe
+Fw0yMDA2MTExOTAzNDhaFw0zMDA2MDkxOTAzNDhaMFoxCzAJBgNVBAYTAkNBMQsw
+CQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYDVQQKDAhBbHRpbml0eTEL
+MAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB
+DwAwggEKAoIBAQC9Irr0zGV+HCI2fZ0ht4hR5It4Sbjz4RwZV8ENRP/+TEz8l9eK
+J6ygxhKX7SMYzIs/jS9Gsq4plX1r2ujW1qRf8yLpR4+dGLP+jBRi1drj0XjZXosT
+SERjWzgPauWxL9LN8+l26eBAqz6fw5e0W8WRSTgf5iGiCcKOTmaATIUjP0CdfWKK
+qpktI4vhe++CXZFJ3usR+8KZ/FwwbCLJM/3J2HnbcXfcaYPYvr1tfqLudKSTbG9H
+M3+AVwjctdesc/0sbd51Zsm0ClQptMbuKnDCYauGg61kNkgbgPgRmH9Pzo67DtxF
+/WW+PtOzq8xLOifciQ9Piboy9QBSQZGwf4wzAgMBAAGjUzBRMB0GA1UdDgQWBBSi
+njya0RDozx3OZTLYFpwqYnlpIDAfBgNVHSMEGDAWgBSinjya0RDozx3OZTLYFpwq
+YnlpIDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBAD7VyFg7F
+U1C25KFvtauchAOjCW6w7U/b3z1dVZvcQ88/kH1VsLUcfGixlSilUEfPTJsi7OA0
+R5BQdh2GGcjUJv4iqEFGU05KvMVmRRKn08P62+ZhJxKMxG26VzcliRZzCMkI6d0W
+lFwI6nM45yeqdHVh5k4xbuJzqpbD9BtXXLI+/Ra9Fx8S9ETA3GdidpZLU5P1VLxq
+UuedfqyAVWZXpr6TAURGxouRmRzul9yFzbSUex+MLEIPrstjtEwV3+tBQZJz9xAS
+TVPj+Nv3LO7GCq54bdwkq1ioWbSL2hEmABkj6kdW/JwmfhGHf/2rirDVMzrTYw07
+dFJfAZC+FEsv
+-----END CERTIFICATE-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/dhparam.pem b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/dhparam.pem
new file mode 100644
index 000000000000..0a96faffd627
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/dhparam.pem
@@ -0,0 +1,5 @@
+-----BEGIN DH PARAMETERS-----
+MIGHAoGBAJitt2hhnpDViQ5ko2ipBMdjy+bZ6FR/WdZ987R7lQvBkKehPXmxtEyV
+AO6ofv5CZSDJokc5bUeBOAtg0EhMTCH82uPdwQvt58jRXcxXBg4JTjkx+oW9LBv2
+FdZsbaX8+SYivmiZ0Jp8T/HBm/4DA9VBS0O5GFRS4C7dHhmSTPfDAgEC
+-----END DH PARAMETERS-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.crt b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.crt
new file mode 100644
index 000000000000..9167cbf861d0
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.crt
@@ -0,0 +1,20 @@
+-----BEGIN CERTIFICATE-----
+MIIDQDCCAigCFCJ7El0ntrGktZVTYTZd+OwtcJjBMA0GCSqGSIb3DQEBCwUAMFox
+CzAJBgNVBAYTAkNBMQswCQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYD
+VQQKDAhBbHRpbml0eTELMAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwHhcNMjAw
+NjExMTkxMTQzWhcNMzAwNjA5MTkxMTQzWjBfMQswCQYDVQQGEwJDQTELMAkGA1UE
+CAwCT04xDzANBgNVBAcMBk90dGF3YTERMA8GA1UECgwIQWx0aW5pdHkxCzAJBgNV
+BAsMAlFBMRIwEAYDVQQDDAlvcGVubGRhcDIwggEiMA0GCSqGSIb3DQEBAQUAA4IB
+DwAwggEKAoIBAQC0Mbn//U56URavMgXm82FWP6vBdKuRydFX/L0M5XLlnAtk/IXG
+/T+4t7nOBJxWmTp/xpsPtSMALE4eFJpEUEqlpVbG5DfBzVWcYOWoMeRAcHWCDkzr
+PkB6I0dfF0Mm5hoaDhn+ZXjBWvoh/IlJdAnPg5mlejflJBQ7xtFC9eN6WjldXuRO
+vyntGNuMfVLgITHwXuH2yZ98G0mFO6TU/9dRY/Z3D6RTSzKdb17Yk/VnG+ry92u2
+0sgXIBvhuJuC3ksWLArwwFoMl8DVa05D4O2H76goGdCcQ0KzqBV8RPXAh3UcgP2e
+Zu90p2EGIhIk+sZTCkPd4dorxjL9nkRR86HdAgMBAAEwDQYJKoZIhvcNAQELBQAD
+ggEBAJWiCxJaTksv/BTsh/etxlDY5eHwqStqIuiovEQ8bhGAcKJ3bfWd/YTb8DUS
+hrLvXrXdOVC+U8PqPFXBpdOqcm5Dc233z52VgUCb+0EKv3lAzgKXRIo32h52skdK
+NnRrCHDeDzgfEIXR4MEJ99cLEaxWyXQhremmTYWHYznry9/4NYz40gCDxHn9dJAi
+KxFyDNxhtuKs58zp4PrBoo+542JurAoLPtRGOhdXpU2RkQVU/ho38HsAXDStAB5D
+vAoSxPuMHKgo17ffrb0oqU3didwaA9fIsz7Mr6RxmI7X03s7hLzNBq9FCqu0U3RR
+CX4zWGFNJu/ieSGVWLYKQzbYxp8=
+-----END CERTIFICATE-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.csr b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.csr
new file mode 100644
index 000000000000..bf569f727d63
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.csr
@@ -0,0 +1,17 @@
+-----BEGIN CERTIFICATE REQUEST-----
+MIICpDCCAYwCAQAwXzELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQH
+DAZPdHRhd2ExETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTESMBAGA1UE
+AwwJb3BlbmxkYXAyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtDG5
+//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyFxv0/uLe5zgScVpk6f8ab
+D7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M6z5AeiNHXxdDJuYaGg4Z
+/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7kTr8p7RjbjH1S4CEx8F7h
+9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdrttLIFyAb4bibgt5LFiwK
+8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9nmbvdKdhBiISJPrGUwpD
+3eHaK8Yy/Z5EUfOh3QIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAEzIjZQOT5R7
+mEJg+RFpCSIoPn3xJ4/VMMyWqA3bTGZKpb4S6GxgsierY/87kPL7jZrMdGYB4Dc3
+2M3VWZGXlYo8vctH1zLE9VW6CzosUpl20lhdgydoCMz3RQqdJyK8aGeFTeLtk7G/
+TRCCUFUE6jaA+VtaCPCnOJSff3jUf76xguEu7dgTZgCKV7dtBqald8gIzF3D+AJJ
+7pEN2UrC3UR0xpe2cj2GhndQJ+WsIyft3zpNFzAO13j8ZPibuVP7oDWcW3ixNCWC
+213aeRVplJGof8Eo6llDxP+6Fwp1YmOoQmwB1Xm3t4ADn7FLJ14LONLB7q40KviG
+RyLyqu3IVOI=
+-----END CERTIFICATE REQUEST-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.key b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.key
new file mode 100644
index 000000000000..5ab3a3f8b590
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap4/certs/ldap.key
@@ -0,0 +1,27 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIEogIBAAKCAQEAtDG5//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyF
+xv0/uLe5zgScVpk6f8abD7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M
+6z5AeiNHXxdDJuYaGg4Z/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7k
+Tr8p7RjbjH1S4CEx8F7h9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdr
+ttLIFyAb4bibgt5LFiwK8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9
+nmbvdKdhBiISJPrGUwpD3eHaK8Yy/Z5EUfOh3QIDAQABAoIBADugMMIKWcuTxYPX
+c6iGZHEbxIPRTWyCcalB0nTQAAMGbabPAJ1l8432DZ+kWu806OybFXhPIfPOtVKy
+0pFEWE8TtPE/V0vj3C5Qye2sBLFmBRwyCzXUdZV00wseMXRPs9dnTyalAR5KMnbI
+j80kfpKSI2dkV9aU57UYBuq3Xrx/TCGItwL769D4ZZW9BvbpiTZApQQFZ0gwUFFn
+btPXGU9Ti8H4mfBuZWL+5CaZdqOo76+CXvMPaUK0F9MJp4yX3XxQLRNH3qz/Tyn7
+h7QOOo0XTqoUmzRw0N9QRVH5LRdSE5yq3aF9aFKjNW59exz+62pufOFadngzkpkn
+OKCzgWkCgYEA4mOWWMzdYwMn3GtfG7whqlqy7wOmMkNb81zTDQejHBV98dnj0AHr
+deurfKWzHrAh3DXo6tFeqUIgXabhBPS/0dEx/S5sgLFmuUZP05EUYahfWBgzzmM9
+C6Oe5xIMLzxsZCJczolsfkEsoFe4o0vkvuLYoQrQL7InzewcDy8cUxsCgYEAy8Na
+YCnanSNDY03Bulcni+5sF+opaHseeki1pv3nlw8TwsWuZF9ApS+yL7ck9jJjxBRR
+RC3KGmpoqIr0vTmUYS946ngQWXPE90zfuhJfM+NRv/q0oCjH0qAcxRbTkls5On9v
+oxJ8rO7gD6K85eHqasWdbCVzdZrobOXzay37tmcCgYBfyUUmw190cjReZauzH3Gb
+E48b5A5gu/Fe0cqWe8G+szU7rDZgnz9SAGnpbm6QMHPTKZgoKngD42+wUFhq8Wdr
+zjh5aDgOZ4EQKTjDSmI2Q7g7nNnmnESK9SrZl+BB6C3wXD2qQaj+7nKEUTlVFlpt
+jaucz+dwFtASp7Djl8pDOwKBgEtr2c3ycArt/ImLRIP2spqm+7e2YvFbcSKOOz6+
+iLRvTj8v8KcSYtlB2FC1F6dRa4AujQ4RbNduP6LzHDfWUkfOzJDtNBAIPAXVnJJB
+LqAEKkRHRghqT9x0i3GgS1vHDF3MwcO4mhFgserXr9ffUWeIEgbvrdcAKbv1Oa6Y
+bK1NAoGAGPm8ISmboDJynjBl9wMrkcy23Pwg9kmyocdWUHh0zMLDKriZNKYB6u/U
+C+/RTfkohPoHPzkeqWiHp7z3JhMItYUfTkNW6vMCxEGc0NEN6ZyMIjtiDPGN1n6O
+E7jmODFmj1AQICQGdV5SHp+yKvKyb0YHKyDwETbs4SZBXxVvjEw=
+-----END RSA PRIVATE KEY-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap4/config/export.ldif b/tests/testflows/ldap/external_user_directory/configs/ldap4/config/export.ldif
new file mode 100644
index 000000000000..36afdb4e350e
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap4/config/export.ldif
@@ -0,0 +1,64 @@
+# LDIF Export for dc=company,dc=com
+# Server: openldap (openldap)
+# Search Scope: sub
+# Search Filter: (objectClass=*)
+# Total Entries: 7
+#
+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm
+# Version: 1.2.5
+
+# Entry 1: dc=company,dc=com
+#dn: dc=company,dc=com
+#dc: company
+#o: company
+#objectclass: top
+#objectclass: dcObject
+#objectclass: organization
+
+# Entry 2: cn=admin,dc=company,dc=com
+#dn: cn=admin,dc=company,dc=com
+#cn: admin
+#description: LDAP administrator
+#objectclass: simpleSecurityObject
+#objectclass: organizationalRole
+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF
+
+# Entry 3: ou=groups,dc=company,dc=com
+dn: ou=groups,dc=company,dc=com
+objectclass: organizationalUnit
+objectclass: top
+ou: groups
+
+# Entry 4: cn=admin,ou=groups,dc=company,dc=com
+dn: cn=admin,ou=groups,dc=company,dc=com
+cn: admin
+gidnumber: 500
+objectclass: posixGroup
+objectclass: top
+
+# Entry 5: cn=users,ou=groups,dc=company,dc=com
+dn: cn=users,ou=groups,dc=company,dc=com
+cn: users
+gidnumber: 501
+objectclass: posixGroup
+objectclass: top
+
+# Entry 6: ou=users,dc=company,dc=com
+dn: ou=users,dc=company,dc=com
+objectclass: organizationalUnit
+objectclass: top
+ou: users
+
+# Entry 7: cn=user4,ou=users,dc=company,dc=com
+dn: cn=user4,ou=users,dc=company,dc=com
+cn: user4
+gidnumber: 501
+givenname: John
+homedirectory: /home/users/user4
+objectclass: inetOrgPerson
+objectclass: posixAccount
+objectclass: top
+sn: User
+uid: user4
+uidnumber: 1004
+userpassword: user4
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap5/config/export.ldif b/tests/testflows/ldap/external_user_directory/configs/ldap5/config/export.ldif
new file mode 100644
index 000000000000..bc3d2ff75fc7
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap5/config/export.ldif
@@ -0,0 +1,64 @@
+# LDIF Export for dc=company,dc=com
+# Server: openldap (openldap)
+# Search Scope: sub
+# Search Filter: (objectClass=*)
+# Total Entries: 7
+#
+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm
+# Version: 1.2.5
+
+# Entry 1: dc=company,dc=com
+#dn: dc=company,dc=com
+#dc: company
+#o: company
+#objectclass: top
+#objectclass: dcObject
+#objectclass: organization
+
+# Entry 2: cn=admin,dc=company,dc=com
+#dn: cn=admin,dc=company,dc=com
+#cn: admin
+#description: LDAP administrator
+#objectclass: simpleSecurityObject
+#objectclass: organizationalRole
+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF
+
+# Entry 3: ou=groups,dc=company,dc=com
+dn: ou=groups,dc=company,dc=com
+objectclass: organizationalUnit
+objectclass: top
+ou: groups
+
+# Entry 4: cn=admin,ou=groups,dc=company,dc=com
+dn: cn=admin,ou=groups,dc=company,dc=com
+cn: admin
+gidnumber: 500
+objectclass: posixGroup
+objectclass: top
+
+# Entry 5: cn=users,ou=groups,dc=company,dc=com
+dn: cn=users,ou=groups,dc=company,dc=com
+cn: users
+gidnumber: 501
+objectclass: posixGroup
+objectclass: top
+
+# Entry 6: ou=users,dc=company,dc=com
+dn: ou=users,dc=company,dc=com
+objectclass: organizationalUnit
+objectclass: top
+ou: users
+
+# Entry 7: cn=user5,ou=users,dc=company,dc=com
+dn: cn=user5,ou=users,dc=company,dc=com
+cn: user5
+gidnumber: 501
+givenname: John
+homedirectory: /home/users/user5
+objectclass: inetOrgPerson
+objectclass: posixAccount
+objectclass: top
+sn: User
+uid: user5
+uidnumber: 1005
+userpassword: user5
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ca.crt b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ca.crt
new file mode 100644
index 000000000000..8c71e3afc91d
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ca.crt
@@ -0,0 +1,22 @@
+-----BEGIN CERTIFICATE-----
+MIIDlTCCAn2gAwIBAgIUJBqw2dHM2DDCZjYSkPOESlvDH6swDQYJKoZIhvcNAQEL
+BQAwWjELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQHDAZPdHRhd2Ex
+ETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTENMAsGA1UEAwwEcm9vdDAe
+Fw0yMDA2MTExOTAzNDhaFw0zMDA2MDkxOTAzNDhaMFoxCzAJBgNVBAYTAkNBMQsw
+CQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYDVQQKDAhBbHRpbml0eTEL
+MAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwggEiMA0GCSqGSIb3DQEBAQUAA4IB
+DwAwggEKAoIBAQC9Irr0zGV+HCI2fZ0ht4hR5It4Sbjz4RwZV8ENRP/+TEz8l9eK
+J6ygxhKX7SMYzIs/jS9Gsq4plX1r2ujW1qRf8yLpR4+dGLP+jBRi1drj0XjZXosT
+SERjWzgPauWxL9LN8+l26eBAqz6fw5e0W8WRSTgf5iGiCcKOTmaATIUjP0CdfWKK
+qpktI4vhe++CXZFJ3usR+8KZ/FwwbCLJM/3J2HnbcXfcaYPYvr1tfqLudKSTbG9H
+M3+AVwjctdesc/0sbd51Zsm0ClQptMbuKnDCYauGg61kNkgbgPgRmH9Pzo67DtxF
+/WW+PtOzq8xLOifciQ9Piboy9QBSQZGwf4wzAgMBAAGjUzBRMB0GA1UdDgQWBBSi
+njya0RDozx3OZTLYFpwqYnlpIDAfBgNVHSMEGDAWgBSinjya0RDozx3OZTLYFpwq
+YnlpIDAPBgNVHRMBAf8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4IBAQBAD7VyFg7F
+U1C25KFvtauchAOjCW6w7U/b3z1dVZvcQ88/kH1VsLUcfGixlSilUEfPTJsi7OA0
+R5BQdh2GGcjUJv4iqEFGU05KvMVmRRKn08P62+ZhJxKMxG26VzcliRZzCMkI6d0W
+lFwI6nM45yeqdHVh5k4xbuJzqpbD9BtXXLI+/Ra9Fx8S9ETA3GdidpZLU5P1VLxq
+UuedfqyAVWZXpr6TAURGxouRmRzul9yFzbSUex+MLEIPrstjtEwV3+tBQZJz9xAS
+TVPj+Nv3LO7GCq54bdwkq1ioWbSL2hEmABkj6kdW/JwmfhGHf/2rirDVMzrTYw07
+dFJfAZC+FEsv
+-----END CERTIFICATE-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/dhparam.pem b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/dhparam.pem
new file mode 100644
index 000000000000..0a96faffd627
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/dhparam.pem
@@ -0,0 +1,5 @@
+-----BEGIN DH PARAMETERS-----
+MIGHAoGBAJitt2hhnpDViQ5ko2ipBMdjy+bZ6FR/WdZ987R7lQvBkKehPXmxtEyV
+AO6ofv5CZSDJokc5bUeBOAtg0EhMTCH82uPdwQvt58jRXcxXBg4JTjkx+oW9LBv2
+FdZsbaX8+SYivmiZ0Jp8T/HBm/4DA9VBS0O5GFRS4C7dHhmSTPfDAgEC
+-----END DH PARAMETERS-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.crt b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.crt
new file mode 100644
index 000000000000..9167cbf861d0
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.crt
@@ -0,0 +1,20 @@
+-----BEGIN CERTIFICATE-----
+MIIDQDCCAigCFCJ7El0ntrGktZVTYTZd+OwtcJjBMA0GCSqGSIb3DQEBCwUAMFox
+CzAJBgNVBAYTAkNBMQswCQYDVQQIDAJPTjEPMA0GA1UEBwwGT3R0YXdhMREwDwYD
+VQQKDAhBbHRpbml0eTELMAkGA1UECwwCUUExDTALBgNVBAMMBHJvb3QwHhcNMjAw
+NjExMTkxMTQzWhcNMzAwNjA5MTkxMTQzWjBfMQswCQYDVQQGEwJDQTELMAkGA1UE
+CAwCT04xDzANBgNVBAcMBk90dGF3YTERMA8GA1UECgwIQWx0aW5pdHkxCzAJBgNV
+BAsMAlFBMRIwEAYDVQQDDAlvcGVubGRhcDIwggEiMA0GCSqGSIb3DQEBAQUAA4IB
+DwAwggEKAoIBAQC0Mbn//U56URavMgXm82FWP6vBdKuRydFX/L0M5XLlnAtk/IXG
+/T+4t7nOBJxWmTp/xpsPtSMALE4eFJpEUEqlpVbG5DfBzVWcYOWoMeRAcHWCDkzr
+PkB6I0dfF0Mm5hoaDhn+ZXjBWvoh/IlJdAnPg5mlejflJBQ7xtFC9eN6WjldXuRO
+vyntGNuMfVLgITHwXuH2yZ98G0mFO6TU/9dRY/Z3D6RTSzKdb17Yk/VnG+ry92u2
+0sgXIBvhuJuC3ksWLArwwFoMl8DVa05D4O2H76goGdCcQ0KzqBV8RPXAh3UcgP2e
+Zu90p2EGIhIk+sZTCkPd4dorxjL9nkRR86HdAgMBAAEwDQYJKoZIhvcNAQELBQAD
+ggEBAJWiCxJaTksv/BTsh/etxlDY5eHwqStqIuiovEQ8bhGAcKJ3bfWd/YTb8DUS
+hrLvXrXdOVC+U8PqPFXBpdOqcm5Dc233z52VgUCb+0EKv3lAzgKXRIo32h52skdK
+NnRrCHDeDzgfEIXR4MEJ99cLEaxWyXQhremmTYWHYznry9/4NYz40gCDxHn9dJAi
+KxFyDNxhtuKs58zp4PrBoo+542JurAoLPtRGOhdXpU2RkQVU/ho38HsAXDStAB5D
+vAoSxPuMHKgo17ffrb0oqU3didwaA9fIsz7Mr6RxmI7X03s7hLzNBq9FCqu0U3RR
+CX4zWGFNJu/ieSGVWLYKQzbYxp8=
+-----END CERTIFICATE-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.csr b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.csr
new file mode 100644
index 000000000000..bf569f727d63
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.csr
@@ -0,0 +1,17 @@
+-----BEGIN CERTIFICATE REQUEST-----
+MIICpDCCAYwCAQAwXzELMAkGA1UEBhMCQ0ExCzAJBgNVBAgMAk9OMQ8wDQYDVQQH
+DAZPdHRhd2ExETAPBgNVBAoMCEFsdGluaXR5MQswCQYDVQQLDAJRQTESMBAGA1UE
+AwwJb3BlbmxkYXAyMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAtDG5
+//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyFxv0/uLe5zgScVpk6f8ab
+D7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M6z5AeiNHXxdDJuYaGg4Z
+/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7kTr8p7RjbjH1S4CEx8F7h
+9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdrttLIFyAb4bibgt5LFiwK
+8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9nmbvdKdhBiISJPrGUwpD
+3eHaK8Yy/Z5EUfOh3QIDAQABoAAwDQYJKoZIhvcNAQELBQADggEBAEzIjZQOT5R7
+mEJg+RFpCSIoPn3xJ4/VMMyWqA3bTGZKpb4S6GxgsierY/87kPL7jZrMdGYB4Dc3
+2M3VWZGXlYo8vctH1zLE9VW6CzosUpl20lhdgydoCMz3RQqdJyK8aGeFTeLtk7G/
+TRCCUFUE6jaA+VtaCPCnOJSff3jUf76xguEu7dgTZgCKV7dtBqald8gIzF3D+AJJ
+7pEN2UrC3UR0xpe2cj2GhndQJ+WsIyft3zpNFzAO13j8ZPibuVP7oDWcW3ixNCWC
+213aeRVplJGof8Eo6llDxP+6Fwp1YmOoQmwB1Xm3t4ADn7FLJ14LONLB7q40KviG
+RyLyqu3IVOI=
+-----END CERTIFICATE REQUEST-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.key b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.key
new file mode 100644
index 000000000000..5ab3a3f8b590
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/certs/ldap.key
@@ -0,0 +1,27 @@
+-----BEGIN RSA PRIVATE KEY-----
+MIIEogIBAAKCAQEAtDG5//1OelEWrzIF5vNhVj+rwXSrkcnRV/y9DOVy5ZwLZPyF
+xv0/uLe5zgScVpk6f8abD7UjACxOHhSaRFBKpaVWxuQ3wc1VnGDlqDHkQHB1gg5M
+6z5AeiNHXxdDJuYaGg4Z/mV4wVr6IfyJSXQJz4OZpXo35SQUO8bRQvXjelo5XV7k
+Tr8p7RjbjH1S4CEx8F7h9smffBtJhTuk1P/XUWP2dw+kU0synW9e2JP1Zxvq8vdr
+ttLIFyAb4bibgt5LFiwK8MBaDJfA1WtOQ+Dth++oKBnQnENCs6gVfET1wId1HID9
+nmbvdKdhBiISJPrGUwpD3eHaK8Yy/Z5EUfOh3QIDAQABAoIBADugMMIKWcuTxYPX
+c6iGZHEbxIPRTWyCcalB0nTQAAMGbabPAJ1l8432DZ+kWu806OybFXhPIfPOtVKy
+0pFEWE8TtPE/V0vj3C5Qye2sBLFmBRwyCzXUdZV00wseMXRPs9dnTyalAR5KMnbI
+j80kfpKSI2dkV9aU57UYBuq3Xrx/TCGItwL769D4ZZW9BvbpiTZApQQFZ0gwUFFn
+btPXGU9Ti8H4mfBuZWL+5CaZdqOo76+CXvMPaUK0F9MJp4yX3XxQLRNH3qz/Tyn7
+h7QOOo0XTqoUmzRw0N9QRVH5LRdSE5yq3aF9aFKjNW59exz+62pufOFadngzkpkn
+OKCzgWkCgYEA4mOWWMzdYwMn3GtfG7whqlqy7wOmMkNb81zTDQejHBV98dnj0AHr
+deurfKWzHrAh3DXo6tFeqUIgXabhBPS/0dEx/S5sgLFmuUZP05EUYahfWBgzzmM9
+C6Oe5xIMLzxsZCJczolsfkEsoFe4o0vkvuLYoQrQL7InzewcDy8cUxsCgYEAy8Na
+YCnanSNDY03Bulcni+5sF+opaHseeki1pv3nlw8TwsWuZF9ApS+yL7ck9jJjxBRR
+RC3KGmpoqIr0vTmUYS946ngQWXPE90zfuhJfM+NRv/q0oCjH0qAcxRbTkls5On9v
+oxJ8rO7gD6K85eHqasWdbCVzdZrobOXzay37tmcCgYBfyUUmw190cjReZauzH3Gb
+E48b5A5gu/Fe0cqWe8G+szU7rDZgnz9SAGnpbm6QMHPTKZgoKngD42+wUFhq8Wdr
+zjh5aDgOZ4EQKTjDSmI2Q7g7nNnmnESK9SrZl+BB6C3wXD2qQaj+7nKEUTlVFlpt
+jaucz+dwFtASp7Djl8pDOwKBgEtr2c3ycArt/ImLRIP2spqm+7e2YvFbcSKOOz6+
+iLRvTj8v8KcSYtlB2FC1F6dRa4AujQ4RbNduP6LzHDfWUkfOzJDtNBAIPAXVnJJB
+LqAEKkRHRghqT9x0i3GgS1vHDF3MwcO4mhFgserXr9ffUWeIEgbvrdcAKbv1Oa6Y
+bK1NAoGAGPm8ISmboDJynjBl9wMrkcy23Pwg9kmyocdWUHh0zMLDKriZNKYB6u/U
+C+/RTfkohPoHPzkeqWiHp7z3JhMItYUfTkNW6vMCxEGc0NEN6ZyMIjtiDPGN1n6O
+E7jmODFmj1AQICQGdV5SHp+yKvKyb0YHKyDwETbs4SZBXxVvjEw=
+-----END RSA PRIVATE KEY-----
diff --git a/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/config/export.ldif b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/config/export.ldif
new file mode 100644
index 000000000000..c6470176a5e7
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/configs/ldap5/ldap2/config/export.ldif
@@ -0,0 +1,64 @@
+# LDIF Export for dc=company,dc=com
+# Server: openldap (openldap)
+# Search Scope: sub
+# Search Filter: (objectClass=*)
+# Total Entries: 7
+#
+# Generated by phpLDAPadmin (http://phpldapadmin.sourceforge.net) on May 22, 2020 5:51 pm
+# Version: 1.2.5
+
+# Entry 1: dc=company,dc=com
+#dn: dc=company,dc=com
+#dc: company
+#o: company
+#objectclass: top
+#objectclass: dcObject
+#objectclass: organization
+
+# Entry 2: cn=admin,dc=company,dc=com
+#dn: cn=admin,dc=company,dc=com
+#cn: admin
+#description: LDAP administrator
+#objectclass: simpleSecurityObject
+#objectclass: organizationalRole
+#userpassword: {SSHA}eUEupkQCTvq9SkrxfWGSe5rX+orrjVbF
+
+# Entry 3: ou=groups,dc=company,dc=com
+dn: ou=groups,dc=company,dc=com
+objectclass: organizationalUnit
+objectclass: top
+ou: groups
+
+# Entry 4: cn=admin,ou=groups,dc=company,dc=com
+dn: cn=admin,ou=groups,dc=company,dc=com
+cn: admin
+gidnumber: 500
+objectclass: posixGroup
+objectclass: top
+
+# Entry 5: cn=users,ou=groups,dc=company,dc=com
+dn: cn=users,ou=groups,dc=company,dc=com
+cn: users
+gidnumber: 501
+objectclass: posixGroup
+objectclass: top
+
+# Entry 6: ou=users,dc=company,dc=com
+dn: ou=users,dc=company,dc=com
+objectclass: organizationalUnit
+objectclass: top
+ou: users
+
+# Entry 7: cn=user1,ou=users,dc=company,dc=com
+dn: cn=user1,ou=users,dc=company,dc=com
+cn: user1
+gidnumber: 501
+givenname: John1
+homedirectory: /home/users/user1
+objectclass: inetOrgPerson
+objectclass: posixAccount
+objectclass: top
+sn: User1
+uid: user1
+uidnumber: 1001
+userpassword: user1
diff --git a/tests/testflows/ldap/external_user_directory/docker-compose/clickhouse-service.yml b/tests/testflows/ldap/external_user_directory/docker-compose/clickhouse-service.yml
new file mode 100644
index 000000000000..2a56876c72e1
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/docker-compose/clickhouse-service.yml
@@ -0,0 +1,28 @@
+version: '2.3'
+
+services:
+  clickhouse:
+    image: yandex/clickhouse-integration-test
+    expose:
+      - "9000"
+      - "9009"
+      - "8123"
+    volumes:
+      - "${CLICKHOUSE_TESTS_DIR}/configs/clickhouse/config.d:/etc/clickhouse-server/config.d"
+      - "${CLICKHOUSE_TESTS_DIR}/configs/clickhouse/users.d/:/etc/clickhouse-server/users.d"
+      - "${CLICKHOUSE_TESTS_DIR}/configs/clickhouse/ssl:/etc/clickhouse-server/ssl"
+      - "${CLICKHOUSE_TESTS_DIR}/configs/clickhouse/config.xml:/etc/clickhouse-server/config.xml"
+      - "${CLICKHOUSE_TESTS_DIR}/configs/clickhouse/users.xml:/etc/clickhouse-server/users.xml"
+      - "${CLICKHOUSE_TESTS_SERVER_BIN_PATH:-/usr/bin/clickhouse}:/usr/bin/clickhouse"
+      - "${CLICKHOUSE_TESTS_ODBC_BRIDGE_BIN_PATH:-/usr/bin/clickhouse-odbc-bridge}:/usr/bin/clickhouse-odbc-bridge"
+    entrypoint: bash -c "clickhouse server --config-file=/etc/clickhouse-server/config.xml --log-file=/var/log/clickhouse-server/clickhouse-server.log --errorlog-file=/var/log/clickhouse-server/clickhouse-server.err.log"
+    healthcheck:
+      test: clickhouse client --query='select 1'
+      interval: 10s
+      timeout: 10s
+      retries: 3
+      start_period: 300s
+    cap_add:
+      - SYS_PTRACE
+    security_opt:
+      - label:disable
diff --git a/tests/testflows/ldap/external_user_directory/docker-compose/docker-compose.yml b/tests/testflows/ldap/external_user_directory/docker-compose/docker-compose.yml
new file mode 100644
index 000000000000..c8ff683df587
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/docker-compose/docker-compose.yml
@@ -0,0 +1,162 @@
+version: '2.3'
+
+services:
+  openldap1:
+    # plain text
+    extends:
+      file: openldap-service.yml
+      service: openldap
+    volumes:
+      - "${CLICKHOUSE_TESTS_DIR}/configs/ldap1/config:/container/service/slapd/assets/config/bootstrap/ldif/custom"
+
+  openldap2:
+    # TLS - never
+    extends:
+      file: openldap-service.yml
+      service: openldap
+    environment:
+      LDAP_TLS: "true"
+      LDAP_TLS_CRT_FILENAME: "ldap.crt"
+      LDAP_TLS_KEY_FILENAME: "ldap.key"
+      LDAP_TLS_DH_PARAM_FILENAME: "dhparam.pem"
+      LDAP_TLS_CA_CRT_FILENAME: "ca.crt"
+      LDAP_TLS_ENFORCE: "false"
+      LDAP_TLS_VERIFY_CLIENT: "never"
+    volumes:
+      - "${CLICKHOUSE_TESTS_DIR}/configs/ldap2/config:/container/service/slapd/assets/config/bootstrap/ldif/custom"
+      - "${CLICKHOUSE_TESTS_DIR}/configs/ldap2/certs:/container/service/slapd/assets/certs/"
+
+  openldap3:
+    # plain text - custom port
+    extends:
+      file: openldap-service.yml
+      service: openldap
+    expose:
+      - "3089"
+    environment:
+      LDAP_PORT: "3089"
+    volumes:
+      - "${CLICKHOUSE_TESTS_DIR}/configs/ldap3/config:/container/service/slapd/assets/config/bootstrap/ldif/custom"
+
+  openldap4:
+    # TLS - never custom port
+    extends:
+      file: openldap-service.yml
+      service: openldap
+    expose:
+      - "3089"
+      - "6036"
+    environment:
+      LDAP_PORT: "3089"
+      LDAPS_PORT: "6036"
+      LDAP_TLS: "true"
+      LDAP_TLS_CRT_FILENAME: "ldap.crt"
+      LDAP_TLS_KEY_FILENAME: "ldap.key"
+      LDAP_TLS_DH_PARAM_FILENAME: "dhparam.pem"
+      LDAP_TLS_CA_CRT_FILENAME: "ca.crt"
+      LDAP_TLS_ENFORCE: "false"
+      LDAP_TLS_VERIFY_CLIENT: "never"
+      LDAP_TLS_CIPHER_SUITE: "SECURE256:+SECURE128:-VERS-TLS-ALL:+VERS-TLS1.2:-RSA:-DHE-DSS:-CAMELLIA-128-CBC:-CAMELLIA-256-CBC"
+    volumes:
+      - "${CLICKHOUSE_TESTS_DIR}/configs/ldap4/config:/container/service/slapd/assets/config/bootstrap/ldif/custom"
+      - "${CLICKHOUSE_TESTS_DIR}/configs/ldap4/certs:/container/service/slapd/assets/certs/"
+
+  openldap5:
+    # TLS - try
+    extends:
+      file: openldap-service.yml
+      service: openldap
+    environment:
+      LDAP_TLS: "true"
+      LDAP_TLS_CRT_FILENAME: "ldap.crt"
+      LDAP_TLS_KEY_FILENAME: "ldap.key"
+      LDAP_TLS_DH_PARAM_FILENAME: "dhparam.pem"
+      LDAP_TLS_CA_CRT_FILENAME: "ca.crt"
+      LDAP_TLS_ENFORCE: "false"
+      LDAP_TLS_VERIFY_CLIENT: "try"
+    volumes:
+      - "${CLICKHOUSE_TESTS_DIR}/configs/ldap5/config:/container/service/slapd/assets/config/bootstrap/ldif/custom"
+      - "${CLICKHOUSE_TESTS_DIR}/configs/ldap5/certs:/container/service/slapd/assets/certs/"
+
+  phpldapadmin:
+    extends:
+      file: openldap-service.yml
+      service: phpldapadmin
+    environment:
+      PHPLDAPADMIN_LDAP_HOSTS: "openldap1"
+    depends_on:
+      openldap1:
+        condition: service_healthy
+
+  zookeeper:
+    extends:
+      file: zookeeper-service.yml
+      service: zookeeper
+
+  clickhouse1:
+    extends:
+      file: clickhouse-service.yml
+      service: clickhouse
+    hostname: clickhouse1
+    volumes:
+      - "${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse1/database/:/var/lib/clickhouse/"
+      - "${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse1/logs/:/var/log/clickhouse-server/"
+      - "${CLICKHOUSE_TESTS_DIR}/configs/clickhouse1/config.d:/etc/clickhouse-server/config.d"
+      - "${CLICKHOUSE_TESTS_DIR}/configs/clickhouse1/users.d:/etc/clickhouse-server/users.d"
+    depends_on:
+      zookeeper:
+        condition: service_healthy
+
+  clickhouse2:
+    extends:
+      file: clickhouse-service.yml
+      service: clickhouse
+    hostname: clickhouse2
+    volumes:
+      - "${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse2/database/:/var/lib/clickhouse/"
+      - "${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse2/logs/:/var/log/clickhouse-server/"
+      - "${CLICKHOUSE_TESTS_DIR}/configs/clickhouse2/config.d:/etc/clickhouse-server/config.d"
+      - "${CLICKHOUSE_TESTS_DIR}/configs/clickhouse2/users.d:/etc/clickhouse-server/users.d"
+    depends_on:
+      zookeeper:
+        condition: service_healthy
+
+  clickhouse3:
+    extends:
+      file: clickhouse-service.yml
+      service: clickhouse
+    hostname: clickhouse3
+    volumes:
+      - "${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse3/database/:/var/lib/clickhouse/"
+      - "${CLICKHOUSE_TESTS_DIR}/_instances/clickhouse3/logs/:/var/log/clickhouse-server/"
+      - "${CLICKHOUSE_TESTS_DIR}/configs/clickhouse3/config.d:/etc/clickhouse-server/config.d"
+      - "${CLICKHOUSE_TESTS_DIR}/configs/clickhouse3/users.d:/etc/clickhouse-server/users.d"
+    depends_on:
+      zookeeper:
+        condition: service_healthy
+
+  # dummy service which does nothing, but allows to postpone 
+  # 'docker-compose up -d' till all dependecies will go healthy
+  all_services_ready:
+    image: hello-world
+    depends_on:
+      clickhouse1:
+        condition: service_healthy
+      clickhouse2:
+        condition: service_healthy
+      clickhouse3:
+        condition: service_healthy
+      zookeeper:
+        condition: service_healthy
+      openldap1:
+        condition: service_healthy
+      openldap2:
+        condition: service_healthy
+      openldap3:
+        condition: service_healthy
+      openldap4:
+        condition: service_healthy
+      openldap5:
+        condition: service_healthy
+      phpldapadmin:
+        condition: service_healthy
diff --git a/tests/testflows/ldap/external_user_directory/docker-compose/openldap-service.yml b/tests/testflows/ldap/external_user_directory/docker-compose/openldap-service.yml
new file mode 100644
index 000000000000..139907c513cf
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/docker-compose/openldap-service.yml
@@ -0,0 +1,40 @@
+version: '2.3'
+
+services:
+  openldap:
+    image: osixia/openldap:1.4.0
+    command: "--copy-service --loglevel debug"
+    environment:
+      LDAP_ORGANIZATION: "company"
+      LDAP_DOMAIN: "company.com"
+      LDAP_ADMIN_PASSWORD: "admin"
+      LDAP_TLS: "false"
+    expose:
+      - "389"
+      - "636"
+    healthcheck:
+      test: ldapsearch -x -H ldap://localhost:$${LDAP_PORT:-389} -b "dc=company,dc=com" -D "cn=admin,dc=company,dc=com" -w admin
+      interval: 10s
+      timeout: 10s
+      retries: 3
+      start_period: 300s
+    security_opt:
+      - label:disable
+
+
+  phpldapadmin:
+    image: osixia/phpldapadmin:0.9.0
+    container_name: phpldapadmin
+    environment:
+      PHPLDAPADMIN_HTTPS=false:
+    ports:
+      - "8080:80"      
+    healthcheck:
+      test: echo 1
+      interval: 10s
+      timeout: 10s
+      retries: 3
+      start_period: 300s
+    security_opt:
+      - label:disable
+
diff --git a/tests/testflows/ldap/external_user_directory/docker-compose/zookeeper-service.yml b/tests/testflows/ldap/external_user_directory/docker-compose/zookeeper-service.yml
new file mode 100644
index 000000000000..6691a2df31c1
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/docker-compose/zookeeper-service.yml
@@ -0,0 +1,18 @@
+version: '2.3'
+
+services:
+  zookeeper:
+    image: zookeeper:3.4.12
+    expose:
+      - "2181"
+    environment:
+      ZOO_TICK_TIME: 500
+      ZOO_MY_ID: 1
+    healthcheck:
+      test: echo stat | nc localhost 2181
+      interval: 10s
+      timeout: 10s
+      retries: 3
+      start_period: 300s
+    security_opt:
+      - label:disable
diff --git a/tests/testflows/ldap/external_user_directory/regression.py b/tests/testflows/ldap/external_user_directory/regression.py
new file mode 100755
index 000000000000..6ce860a6fd2a
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/regression.py
@@ -0,0 +1,56 @@
+#!/usr/bin/env python3
+import sys
+from testflows.core import *
+
+append_path(sys.path, "..", "..")
+
+from helpers.cluster import Cluster
+from helpers.argparser import argparser
+from ldap.external_user_directory.requirements import *
+
+# Cross-outs of known fails
+xfails = {
+    "connection protocols/tls/tls_require_cert='try'":
+     [(Fail, "can't be tested with self-signed certificates")],
+    "connection protocols/tls/tls_require_cert='demand'":
+     [(Fail, "can't be tested with self-signed certificates")],
+    "connection protocols/starttls/tls_require_cert='try'":
+     [(Fail, "can't be tested with self-signed certificates")],
+    "connection protocols/starttls/tls_require_cert='demand'":
+     [(Fail, "can't be tested with self-signed certificates")],
+    "connection protocols/tls require cert default demand":
+     [(Fail, "can't be tested with self-signed certificates")],
+    "connection protocols/starttls with custom port":
+     [(Fail, "it seems that starttls is not enabled by default on custom plain-text ports in LDAP server")],
+    "connection protocols/tls cipher suite":
+     [(Fail, "can't get it to work")]
+}
+
+@TestFeature
+@Name("external user directory")
+@ArgumentParser(argparser)
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication("1.0")
+)
+@XFails(xfails)
+def regression(self, local, clickhouse_binary_path):
+    """ClickHouse LDAP external user directory regression module.
+    """
+    nodes = {
+        "clickhouse": ("clickhouse1", "clickhouse2", "clickhouse3"),
+    }
+
+    with Cluster(local, clickhouse_binary_path, nodes=nodes) as cluster:
+        self.context.cluster = cluster
+
+        Scenario(run=load("ldap.authentication.tests.sanity", "scenario"))
+        Scenario(run=load("ldap.external_user_directory.tests.simple", "scenario"))
+        Feature(run=load("ldap.external_user_directory.tests.restart", "feature"))
+        Feature(run=load("ldap.external_user_directory.tests.server_config", "feature"))
+        Feature(run=load("ldap.external_user_directory.tests.external_user_directory_config", "feature"))
+        Feature(run=load("ldap.external_user_directory.tests.connections", "feature"))
+        Feature(run=load("ldap.external_user_directory.tests.authentications", "feature"))
+        Feature(run=load("ldap.external_user_directory.tests.roles", "feature"))
+
+if main():
+    regression()
diff --git a/tests/testflows/ldap/external_user_directory/requirements/__init__.py b/tests/testflows/ldap/external_user_directory/requirements/__init__.py
new file mode 100644
index 000000000000..02f7d4301544
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/requirements/__init__.py
@@ -0,0 +1,1 @@
+from .requirements import *
diff --git a/tests/testflows/ldap/external_user_directory/requirements/requirements.md b/tests/testflows/ldap/external_user_directory/requirements/requirements.md
new file mode 100644
index 000000000000..46532c3945d9
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/requirements/requirements.md
@@ -0,0 +1,734 @@
+# SRS-009 ClickHouse LDAP External User Directory
+# Software Requirements Specification
+
+## Table of Contents
+
+* 1 [Revision History](#revision-history)
+* 2 [Introduction](#introduction)
+* 3 [Terminology](#terminology)
+  * 3.1 [LDAP](#ldap)
+* 4 [Requirements](#requirements)
+  * 4.1 [Generic](#generic)
+    * 4.1.1 [User Authentication](#user-authentication)
+      * 4.1.1.1 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication](#rqsrs-009ldapexternaluserdirectoryauthentication)
+      * 4.1.1.2 [RQ.SRS-009.LDAP.ExternalUserDirectory.MultipleUserDirectories](#rqsrs-009ldapexternaluserdirectorymultipleuserdirectories)
+      * 4.1.1.3 [RQ.SRS-009.LDAP.ExternalUserDirectory.MultipleUserDirectories.Lookup](#rqsrs-009ldapexternaluserdirectorymultipleuserdirectorieslookup)
+      * 4.1.1.4 [RQ.SRS-009.LDAP.ExternalUserDirectory.Users.Authentication.NewUsers](#rqsrs-009ldapexternaluserdirectoryusersauthenticationnewusers)
+      * 4.1.1.5 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.DeletedUsers](#rqsrs-009ldapexternaluserdirectoryauthenticationdeletedusers)
+      * 4.1.1.6 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Valid](#rqsrs-009ldapexternaluserdirectoryauthenticationvalid)
+      * 4.1.1.7 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Invalid](#rqsrs-009ldapexternaluserdirectoryauthenticationinvalid)
+      * 4.1.1.8 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.UsernameChanged](#rqsrs-009ldapexternaluserdirectoryauthenticationusernamechanged)
+      * 4.1.1.9 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.PasswordChanged](#rqsrs-009ldapexternaluserdirectoryauthenticationpasswordchanged)
+      * 4.1.1.10 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.LDAPServerRestart](#rqsrs-009ldapexternaluserdirectoryauthenticationldapserverrestart)
+      * 4.1.1.11 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.ClickHouseServerRestart](#rqsrs-009ldapexternaluserdirectoryauthenticationclickhouseserverrestart)
+      * 4.1.1.12 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel](#rqsrs-009ldapexternaluserdirectoryauthenticationparallel)
+      * 4.1.1.13 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.ValidAndInvalid](#rqsrs-009ldapexternaluserdirectoryauthenticationparallelvalidandinvalid)
+      * 4.1.1.14 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.MultipleServers](#rqsrs-009ldapexternaluserdirectoryauthenticationparallelmultipleservers)
+      * 4.1.1.15 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.LocalOnly](#rqsrs-009ldapexternaluserdirectoryauthenticationparallellocalonly)
+      * 4.1.1.16 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.LocalAndMultipleLDAP](#rqsrs-009ldapexternaluserdirectoryauthenticationparallellocalandmultipleldap)
+      * 4.1.1.17 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.SameUser](#rqsrs-009ldapexternaluserdirectoryauthenticationparallelsameuser)
+      * 4.1.1.18 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.DynamicallyAddedAndRemovedUsers](#rqsrs-009ldapexternaluserdirectoryauthenticationparalleldynamicallyaddedandremovedusers)
+    * 4.1.2 [Connection](#connection)
+      * 4.1.2.1 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.PlainText](#rqsrs-009ldapexternaluserdirectoryconnectionprotocolplaintext)
+      * 4.1.2.2 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS](#rqsrs-009ldapexternaluserdirectoryconnectionprotocoltls)
+      * 4.1.2.3 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.StartTLS](#rqsrs-009ldapexternaluserdirectoryconnectionprotocolstarttls)
+      * 4.1.2.4 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.Validation](#rqsrs-009ldapexternaluserdirectoryconnectionprotocoltlscertificatevalidation)
+      * 4.1.2.5 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.SelfSigned](#rqsrs-009ldapexternaluserdirectoryconnectionprotocoltlscertificateselfsigned)
+      * 4.1.2.6 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.SpecificCertificationAuthority](#rqsrs-009ldapexternaluserdirectoryconnectionprotocoltlscertificatespecificcertificationauthority)
+      * 4.1.2.7 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.Anonymous](#rqsrs-009ldapexternaluserdirectoryconnectionauthenticationmechanismanonymous)
+      * 4.1.2.8 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.Unauthenticated](#rqsrs-009ldapexternaluserdirectoryconnectionauthenticationmechanismunauthenticated)
+      * 4.1.2.9 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.NamePassword](#rqsrs-009ldapexternaluserdirectoryconnectionauthenticationmechanismnamepassword)
+      * 4.1.2.10 [RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.UnreachableServer](#rqsrs-009ldapexternaluserdirectoryconnectionauthenticationunreachableserver)
+  * 4.2 [Specific](#specific)
+    * 4.2.1 [User Discovery](#user-discovery)
+      * 4.2.1.1 [RQ.SRS-009.LDAP.ExternalUserDirectory.Users.Lookup.Priority](#rqsrs-009ldapexternaluserdirectoryuserslookuppriority)
+      * 4.2.1.2 [RQ.SRS-009.LDAP.ExternalUserDirectory.Restart.Server](#rqsrs-009ldapexternaluserdirectoryrestartserver)
+      * 4.2.1.3 [RQ.SRS-009.LDAP.ExternalUserDirectory.Restart.Server.ParallelLogins](#rqsrs-009ldapexternaluserdirectoryrestartserverparallellogins)
+    * 4.2.2 [Roles](#roles)
+      * 4.2.2.1 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed](#rqsrs-009ldapexternaluserdirectoryroleremoved)
+      * 4.2.2.2 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed.Privileges](#rqsrs-009ldapexternaluserdirectoryroleremovedprivileges)
+      * 4.2.2.3 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Readded.Privileges](#rqsrs-009ldapexternaluserdirectoryrolereaddedprivileges)
+      * 4.2.2.4 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.New](#rqsrs-009ldapexternaluserdirectoryrolenew)
+      * 4.2.2.5 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.NewPrivilege](#rqsrs-009ldapexternaluserdirectoryrolenewprivilege)
+      * 4.2.2.6 [RQ.SRS-009.LDAP.ExternalUserDirectory.Role.RemovedPrivilege](#rqsrs-009ldapexternaluserdirectoryroleremovedprivilege)
+    * 4.2.3 [Configuration](#configuration)
+      * 4.2.3.1 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Invalid](#rqsrs-009ldapexternaluserdirectoryconfigurationserverinvalid)
+      * 4.2.3.2 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Definition](#rqsrs-009ldapexternaluserdirectoryconfigurationserverdefinition)
+      * 4.2.3.3 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Name](#rqsrs-009ldapexternaluserdirectoryconfigurationservername)
+      * 4.2.3.4 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Host](#rqsrs-009ldapexternaluserdirectoryconfigurationserverhost)
+      * 4.2.3.5 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Port](#rqsrs-009ldapexternaluserdirectoryconfigurationserverport)
+      * 4.2.3.6 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Port.Default](#rqsrs-009ldapexternaluserdirectoryconfigurationserverportdefault)
+      * 4.2.3.7 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Prefix](#rqsrs-009ldapexternaluserdirectoryconfigurationserverauthdnprefix)
+      * 4.2.3.8 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Suffix](#rqsrs-009ldapexternaluserdirectoryconfigurationserverauthdnsuffix)
+      * 4.2.3.9 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Value](#rqsrs-009ldapexternaluserdirectoryconfigurationserverauthdnvalue)
+      * 4.2.3.10 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS](#rqsrs-009ldapexternaluserdirectoryconfigurationserverenabletls)
+      * 4.2.3.11 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.Default](#rqsrs-009ldapexternaluserdirectoryconfigurationserverenabletlsoptionsdefault)
+      * 4.2.3.12 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.No](#rqsrs-009ldapexternaluserdirectoryconfigurationserverenabletlsoptionsno)
+      * 4.2.3.13 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.Yes](#rqsrs-009ldapexternaluserdirectoryconfigurationserverenabletlsoptionsyes)
+      * 4.2.3.14 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.StartTLS](#rqsrs-009ldapexternaluserdirectoryconfigurationserverenabletlsoptionsstarttls)
+      * 4.2.3.15 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsminimumprotocolversion)
+      * 4.2.3.16 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion.Values](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsminimumprotocolversionvalues)
+      * 4.2.3.17 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion.Default](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsminimumprotocolversiondefault)
+      * 4.2.3.18 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsrequirecert)
+      * 4.2.3.19 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Default](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsrequirecertoptionsdefault)
+      * 4.2.3.20 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Demand](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsrequirecertoptionsdemand)
+      * 4.2.3.21 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Allow](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsrequirecertoptionsallow)
+      * 4.2.3.22 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Try](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsrequirecertoptionstry)
+      * 4.2.3.23 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Never](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsrequirecertoptionsnever)
+      * 4.2.3.24 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCertFile](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlscertfile)
+      * 4.2.3.25 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSKeyFile](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlskeyfile)
+      * 4.2.3.26 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCACertDir](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlscacertdir)
+      * 4.2.3.27 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCACertFile](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlscacertfile)
+      * 4.2.3.28 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCipherSuite](#rqsrs-009ldapexternaluserdirectoryconfigurationservertlsciphersuite)
+      * 4.2.3.29 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Syntax](#rqsrs-009ldapexternaluserdirectoryconfigurationserversyntax)
+      * 4.2.3.30 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.LDAPUserDirectory](#rqsrs-009ldapexternaluserdirectoryconfigurationusersldapuserdirectory)
+      * 4.2.3.31 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.LDAPUserDirectory.MoreThanOne](#rqsrs-009ldapexternaluserdirectoryconfigurationusersldapuserdirectorymorethanone)
+      * 4.2.3.32 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Syntax](#rqsrs-009ldapexternaluserdirectoryconfigurationuserssyntax)
+      * 4.2.3.33 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersserver)
+      * 4.2.3.34 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Empty](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersserverempty)
+      * 4.2.3.35 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Missing](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersservermissing)
+      * 4.2.3.36 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.MoreThanOne](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersservermorethanone)
+      * 4.2.3.37 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Invalid](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersserverinvalid)
+      * 4.2.3.38 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersroles)
+      * 4.2.3.39 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.MoreThanOne](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersrolesmorethanone)
+      * 4.2.3.40 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Invalid](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersrolesinvalid)
+      * 4.2.3.41 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Empty](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersrolesempty)
+      * 4.2.3.42 [RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Missing](#rqsrs-009ldapexternaluserdirectoryconfigurationusersparametersrolesmissing)
+    * 4.2.4 [Authentication](#authentication)
+      * 4.2.4.1 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.Empty](#rqsrs-009ldapexternaluserdirectoryauthenticationusernameempty)
+      * 4.2.4.2 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.Long](#rqsrs-009ldapexternaluserdirectoryauthenticationusernamelong)
+      * 4.2.4.3 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.UTF8](#rqsrs-009ldapexternaluserdirectoryauthenticationusernameutf8)
+      * 4.2.4.4 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.Empty](#rqsrs-009ldapexternaluserdirectoryauthenticationpasswordempty)
+      * 4.2.4.5 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.Long](#rqsrs-009ldapexternaluserdirectoryauthenticationpasswordlong)
+      * 4.2.4.6 [RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.UTF8](#rqsrs-009ldapexternaluserdirectoryauthenticationpasswordutf8)
+* 5 [References](#references)
+
+## Revision History
+
+This document is stored in an electronic form using [Git] source control management software
+hosted in a [GitHub Repository].
+All the updates are tracked using the [Revision History].
+
+## Introduction
+
+The [QA-SRS007 ClickHouse Authentication of Users via LDAP] enables support for authenticating
+users using an [LDAP] server. This requirements specifications add addition functionality
+for integrating [LDAP] with [ClickHouse].
+
+This document will cover requirements to allow authenticatoin of users stored in the
+external user discovery using an [LDAP] server without having to explicitly define users in [ClickHouse]'s
+`users.xml` configuration file.
+
+## Terminology
+
+### LDAP
+
+* Lightweight Directory Access Protocol
+
+## Requirements
+
+### Generic
+
+#### User Authentication
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication
+version: 1.0
+
+[ClickHouse] SHALL support authenticating users that are defined only on the [LDAP] server.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.MultipleUserDirectories
+version: 1.0
+
+[ClickHouse] SHALL support authenticating users using multiple [LDAP] external user directories.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.MultipleUserDirectories.Lookup
+version: 1.0
+
+[ClickHouse] SHALL attempt to authenticate external [LDAP] user
+using [LDAP] external user directory in the same order
+in which user directories are specified in the `config.xml` file.
+If a user cannot be authenticated using the first [LDAP] external user directory
+then the next user directory in the list SHALL be used.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Users.Authentication.NewUsers
+version: 1.0
+
+[ClickHouse] SHALL support authenticating users that are defined only on the [LDAP] server
+as soon as they are added to the [LDAP] server.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.DeletedUsers
+version: 1.0
+
+[ClickHouse] SHALL not allow authentication of users that
+were previously defined only on the [LDAP] server but were removed
+from the [LDAP] server.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Valid
+version: 1.0
+
+[ClickHouse] SHALL only allow user authentication using [LDAP] server if and only if
+user name and password match [LDAP] server records for the user
+when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Invalid
+version: 1.0
+
+[ClickHouse] SHALL return an error and prohibit authentication if either user name or password
+do not match [LDAP] server records for the user
+when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.UsernameChanged
+version: 1.0
+
+[ClickHouse] SHALL return an error and prohibit authentication if the username is changed
+on the [LDAP] server when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.PasswordChanged
+version: 1.0
+
+[ClickHouse] SHALL return an error and prohibit authentication if the password
+for the user is changed on the [LDAP] server when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.LDAPServerRestart
+version: 1.0
+
+[ClickHouse] SHALL support authenticating users after [LDAP] server is restarted
+when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.ClickHouseServerRestart
+version: 1.0
+
+[ClickHouse] SHALL support authenticating users after server is restarted
+when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel
+version: 1.0
+
+[ClickHouse] SHALL support parallel authentication of users using [LDAP] server
+when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.ValidAndInvalid
+version: 1.0
+
+[ClickHouse] SHALL support authentication of valid users and
+prohibit authentication of invalid users using [LDAP] server
+in parallel without having invalid attempts affecting valid authentications
+when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.MultipleServers
+version: 1.0
+
+[ClickHouse] SHALL support parallel authentication of external [LDAP] users
+authenticated using multiple [LDAP] external user directories.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.LocalOnly
+version: 1.0
+
+[ClickHouse] SHALL support parallel authentication of users defined only locally
+when one or more [LDAP] external user directories are specified in the configuration file.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.LocalAndMultipleLDAP
+version: 1.0
+
+[ClickHouse] SHALL support parallel authentication of local and external [LDAP] users
+authenticated using multiple [LDAP] external user directories.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.SameUser
+version: 1.0
+
+[ClickHouse] SHALL support parallel authentication of the same external [LDAP] user
+authenticated using the same [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.DynamicallyAddedAndRemovedUsers
+version: 1.0
+
+[ClickHouse] SHALL support parallel authentication of users using
+[LDAP] external user directory when [LDAP] users are dynamically added and
+removed.
+
+#### Connection
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.PlainText
+version: 1.0
+
+[ClickHouse] SHALL support user authentication using plain text `ldap://` non secure protocol
+while connecting to the [LDAP] server when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS
+version: 1.0
+
+[ClickHouse] SHALL support user authentication using `SSL/TLS` `ldaps://` secure protocol
+while connecting to the [LDAP] server when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.StartTLS
+version: 1.0
+
+[ClickHouse] SHALL support user authentication using legacy `StartTLS` protocol which is a
+plain text `ldap://` protocol that is upgraded to [TLS] when connecting to the [LDAP] server
+when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.Validation
+version: 1.0
+
+[ClickHouse] SHALL support certificate validation used for [TLS] connections
+to the [LDAP] server when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.SelfSigned
+version: 1.0
+
+[ClickHouse] SHALL support self-signed certificates for [TLS] connections
+to the [LDAP] server when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.SpecificCertificationAuthority
+version: 1.0
+
+[ClickHouse] SHALL support certificates signed by specific Certification Authority for [TLS] connections
+to the [LDAP] server when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.Anonymous
+version: 1.0
+
+[ClickHouse] SHALL return an error and prohibit authentication using [Anonymous Authentication Mechanism of Simple Bind]
+authentication mechanism when connecting to the [LDAP] server when using [LDAP] external server directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.Unauthenticated
+version: 1.0
+
+[ClickHouse] SHALL return an error and prohibit authentication using [Unauthenticated Authentication Mechanism of Simple Bind]
+authentication mechanism when connecting to the [LDAP] server when using [LDAP] external server directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.NamePassword
+version: 1.0
+
+[ClickHouse] SHALL allow authentication using only [Name/Password Authentication Mechanism of Simple Bind]
+authentication mechanism when connecting to the [LDAP] server when using [LDAP] external server directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.UnreachableServer
+version: 1.0
+
+[ClickHouse] SHALL return an error and prohibit user login if [LDAP] server is unreachable
+when using [LDAP] external user directory.
+
+### Specific
+
+#### User Discovery
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Users.Lookup.Priority
+version: 2.0
+
+[ClickHouse] SHALL lookup user presence in the same order
+as user directories are defined in the `config.xml`.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Restart.Server
+version: 1.0
+
+[ClickHouse] SHALL support restarting server when one or more LDAP external directories
+are configured.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Restart.Server.ParallelLogins
+version: 1.0
+
+[ClickHouse] SHALL support restarting server when one or more LDAP external directories
+are configured during parallel [LDAP] user logins.
+
+#### Roles
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed
+version: 1.0
+
+[ClickHouse] SHALL reject authentication attempt if any of the roles that are specified in the configuration
+of the external user directory are not defined at the time of the authentication attempt
+with an exception that if a user was able to authenticate in past and its internal user object was created and cached
+then the user SHALL be able to authenticate again, even if one of the roles is missing.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed.Privileges
+version: 1.0
+
+[ClickHouse] SHALL remove the privileges provided by the role from all the LDAP
+users authenticated using external user directory if it is removed
+including currently cached users that are still able to authenticated where the removed
+role is specified in the configuration of the external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Readded.Privileges
+version: 1.0
+
+[ClickHouse] SHALL reassign the role and add the privileges provided by the role
+when it is re-added after removal for all LDAP users authenticated using external user directory
+including any cached users where the re-added role was specified in the configuration of the external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.New
+version: 1.0
+
+[ClickHouse] SHALL not allow any new roles to be assigned to any LDAP
+users authenticated using external user directory unless the role is specified
+in the configuration of the external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.NewPrivilege
+version: 1.0
+
+[ClickHouse] SHALL add new privilege to all the LDAP users authenticated using external user directory
+including cached users when new privilege is added to one of the roles specified
+in the configuration of the external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Role.RemovedPrivilege
+version: 1.0
+
+[ClickHouse] SHALL remove privilege from all the LDAP users authenticated using external user directory
+including cached users when privilege is removed from all the roles specified
+in the configuration of the external user directory.
+
+#### Configuration
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Invalid
+version: 1.0
+
+[ClickHouse] SHALL return an error and prohibit user login if [LDAP] server configuration is not valid.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Definition
+version: 1.0
+
+[ClickHouse] SHALL support using the [LDAP] servers defined in the
+`ldap_servers` section of the `config.xml` as the server to be used
+for a external user directory that uses an [LDAP] server as a source of user definitions.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Name
+version: 1.0
+
+[ClickHouse] SHALL not support empty string as a server name.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Host
+version: 1.0
+
+[ClickHouse] SHALL support `<host>` parameter to specify [LDAP]
+server hostname or IP, this parameter SHALL be mandatory and SHALL not be empty.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Port
+version: 1.0
+
+[ClickHouse] SHALL support `<port>` parameter to specify [LDAP] server port.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Port.Default
+version: 1.0
+
+[ClickHouse] SHALL use default port number `636` if `enable_tls` is set to `yes` or `389` otherwise.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Prefix
+version: 1.0
+
+[ClickHouse] SHALL support `<auth_dn_prefix>` parameter to specify the prefix
+of value used to construct the DN to bound to during authentication via [LDAP] server.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Suffix
+version: 1.0
+
+[ClickHouse] SHALL support `<auth_dn_suffix>` parameter to specify the suffix
+of value used to construct the DN to bound to during authentication via [LDAP] server.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Value
+version: 1.0
+
+[ClickHouse] SHALL construct DN as  `auth_dn_prefix + escape(user_name) + auth_dn_suffix` string.
+
+> This implies that auth_dn_suffix should usually have comma ',' as its first non-space character.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS
+version: 1.0
+
+[ClickHouse] SHALL support `<enable_tls>` parameter to trigger the use of secure connection to the [LDAP] server.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.Default
+version: 1.0
+
+[ClickHouse] SHALL use `yes` value as the default for `<enable_tls>` parameter
+to enable SSL/TLS `ldaps://` protocol.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.No
+version: 1.0
+
+[ClickHouse] SHALL support specifying `no` as the value of `<enable_tls>` parameter to enable
+plain text `ldap://` protocol.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.Yes
+version: 1.0
+
+[ClickHouse] SHALL support specifying `yes` as the value of `<enable_tls>` parameter to enable
+SSL/TLS `ldaps://` protocol.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.StartTLS
+version: 1.0
+
+[ClickHouse] SHALL support specifying `starttls` as the value of `<enable_tls>` parameter to enable
+legacy `StartTLS` protocol that used plain text `ldap://` protocol, upgraded to [TLS].
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion
+version: 1.0
+
+[ClickHouse] SHALL support `<tls_minimum_protocol_version>` parameter to specify
+the minimum protocol version of SSL/TLS.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion.Values
+version: 1.0
+
+[ClickHouse] SHALL support specifying `ssl2`, `ssl3`, `tls1.0`, `tls1.1`, and `tls1.2`
+as a value of the `<tls_minimum_protocol_version>` parameter.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion.Default
+version: 1.0
+
+[ClickHouse] SHALL set `tls1.2` as the default value of the `<tls_minimum_protocol_version>` parameter.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert
+version: 1.0
+
+[ClickHouse] SHALL support `<tls_require_cert>` parameter to specify [TLS] peer
+certificate verification behavior.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Default
+version: 1.0
+
+[ClickHouse] SHALL use `demand` value as the default for the `<tls_require_cert>` parameter.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Demand
+version: 1.0
+
+[ClickHouse] SHALL support specifying `demand` as the value of `<tls_require_cert>` parameter to
+enable requesting of client certificate.  If no certificate  is  provided,  or  a  bad   certificate   is
+provided, the session SHALL be immediately terminated.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Allow
+version: 1.0
+
+[ClickHouse] SHALL support specifying `allow` as the value of `<tls_require_cert>` parameter to
+enable requesting of client certificate. If no
+certificate is provided, the session SHALL proceed normally.
+If a bad certificate is provided, it SHALL be ignored and the session SHALL proceed normally.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Try
+version: 1.0
+
+[ClickHouse] SHALL support specifying `try` as the value of `<tls_require_cert>` parameter to
+enable requesting of client certificate. If no certificate is provided, the session
+SHALL proceed  normally.  If a bad certificate is provided, the session SHALL be
+immediately terminated.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Never
+version: 1.0
+
+[ClickHouse] SHALL support specifying `never` as the value of `<tls_require_cert>` parameter to
+disable requesting of client certificate.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCertFile
+version: 1.0
+
+[ClickHouse] SHALL support `<tls_cert_file>` to specify the path to certificate file used by
+[ClickHouse] to establish connection with the [LDAP] server.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSKeyFile
+version: 1.0
+
+[ClickHouse] SHALL support `<tls_key_file>` to specify the path to key file for the certificate
+specified by the `<tls_cert_file>` parameter.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCACertDir
+version: 1.0
+
+[ClickHouse] SHALL support `<tls_ca_cert_dir>` parameter to specify to a path to
+the directory containing [CA] certificates used to verify certificates provided by the [LDAP] server.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCACertFile
+version: 1.0
+
+[ClickHouse] SHALL support `<tls_ca_cert_file>` parameter to specify a path to a specific
+[CA] certificate file used to verify certificates provided by the [LDAP] server.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCipherSuite
+version: 1.0
+
+[ClickHouse] SHALL support `tls_cipher_suite` parameter to specify allowed cipher suites.
+The value SHALL use the same format as the `ciphersuites` in the [OpenSSL Ciphers].
+
+For example,
+
+```xml
+<tls_cipher_suite>ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384</tls_cipher_suite>
+```
+
+The available suites SHALL depend on the [OpenSSL] library version and variant used to build
+[ClickHouse] and therefore might change.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Syntax
+version: 1.0
+
+[ClickHouse] SHALL support the following example syntax to create an entry for an [LDAP] server inside the `config.xml`
+configuration file or of any configuration file inside the `config.d` directory.
+
+```xml
+<yandex>
+    <my_ldap_server>
+        <host>localhost</host>
+        <port>636</port>
+        <auth_dn_prefix>cn=</auth_dn_prefix>
+        <auth_dn_suffix>, ou=users, dc=example, dc=com</auth_dn_suffix>
+        <enable_tls>yes</enable_tls>
+        <tls_minimum_protocol_version>tls1.2</tls_minimum_protocol_version>
+        <tls_require_cert>demand</tls_require_cert>
+        <tls_cert_file>/path/to/tls_cert_file</tls_cert_file>
+        <tls_key_file>/path/to/tls_key_file</tls_key_file>
+        <tls_ca_cert_file>/path/to/tls_ca_cert_file</tls_ca_cert_file>
+        <tls_ca_cert_dir>/path/to/tls_ca_cert_dir</tls_ca_cert_dir>
+        <tls_cipher_suite>ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384</tls_cipher_suite>
+    </my_ldap_server>
+</yandex>
+```
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.LDAPUserDirectory
+version: 1.0
+
+[ClickHouse] SHALL support `<ldap>` sub-section in the `<user_directories>` section of the `config.xml`
+that SHALL define a external user directory that uses an [LDAP] server as a source of user definitions.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.LDAPUserDirectory.MoreThanOne
+version: 2.0
+
+[ClickHouse] SHALL support more than one `<ldap>` sub-sections in the `<user_directories>` section of the `config.xml`
+that SHALL allow to define more than one external user directory that use an [LDAP] server as a source
+of user definitions.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Syntax
+version: 1.0
+
+[ClickHouse] SHALL support `<ldap>` section with the following syntax
+
+```xml
+<yandex>
+    <user_directories>
+        <ldap>
+            <server>my_ldap_server</server>
+            <roles>
+                <my_local_role1 />
+                <my_local_role2 />
+            </roles>
+        </ldap>
+    </user_directories>
+</yandex>
+```
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server
+version: 1.0
+
+[ClickHouse] SHALL support `server` parameter in the `<ldap>` sub-section in the `<user_directories>`
+section of the `config.xml` that SHALL specify one of LDAP server names
+defined in `<ldap_servers>` section.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Empty
+version: 1.0
+
+[ClickHouse] SHALL return an error if the `server` parameter in the `<ldap>` sub-section in the `<user_directories>`
+is empty.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Missing
+version: 1.0
+
+[ClickHouse] SHALL return an error if the `server` parameter in the `<ldap>` sub-section in the `<user_directories>`
+is missing.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.MoreThanOne
+version: 1.0
+
+[ClickHouse] SHALL only use the first definitition of the `server` parameter in the `<ldap>` sub-section in the `<user_directories>`
+if more than one `server` parameter is defined in the configuration.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Invalid
+version: 1.0
+
+[ClickHouse] SHALL return an error if the server specified as the value of the `<server>`
+parameter is not defined.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles
+version: 1.0
+
+[ClickHouse] SHALL support `roles` parameter in the `<ldap>` sub-section in the `<user_directories>`
+section of the `config.xml` that SHALL specify the names of a locally defined roles that SHALL
+be assigned to all users retrieved from the [LDAP] server.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.MoreThanOne
+version: 1.0
+
+[ClickHouse] SHALL only use the first definitition of the `roles` parameter
+in the `<ldap>` sub-section in the `<user_directories>`
+if more than one `roles` parameter is defined in the configuration.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Invalid
+version: 1.0
+
+[ClickHouse] SHALL return an error if the role specified in the `<roles>`
+parameter does not exist locally.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Empty
+version: 1.0
+
+[ClickHouse] SHALL not allow users authenticated using LDAP external user directory
+to perform any action if the `roles` parameter in the `<ldap>` sub-section in the `<user_directories>`
+section is empty.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Missing
+version: 1.0
+
+[ClickHouse] SHALL not allow users authenticated using LDAP external user directory
+to perform any action if the `roles` parameter in the `<ldap>` sub-section in the `<user_directories>`
+section is missing.
+
+#### Authentication
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.Empty
+version: 1.0
+
+[ClickHouse] SHALL not support authenticating users with empty username
+when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.Long
+version: 1.0
+
+[ClickHouse] SHALL support authenticating users with a long username of at least 256 bytes
+when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.UTF8
+version: 1.0
+
+[ClickHouse] SHALL support authentication users with a username that contains [UTF-8] characters
+when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.Empty
+version: 1.0
+
+[ClickHouse] SHALL not support authenticating users with empty passwords
+even if an empty password is valid for the user and
+is allowed by the [LDAP] server when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.Long
+version: 1.0
+
+[ClickHouse] SHALL support long password of at least 256 bytes
+that can be used to authenticate users when using [LDAP] external user directory.
+
+##### RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.UTF8
+version: 1.0
+
+[ClickHouse] SHALL support [UTF-8] characters in passwords
+used to authenticate users when using [LDAP] external user directory.
+
+## References
+
+* **Access Control and Account Management**: https://clickhouse.tech/docs/en/operations/access-rights/
+* **LDAP**: https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol
+* **ClickHouse:** https://clickhouse.tech
+
+[SRS]: #srs
+[Access Control and Account Management]: https://clickhouse.tech/docs/en/operations/access-rights/
+[SRS-007 ClickHouse Authentication of Users via LDAP]: https://github.com/ClickHouse/ClickHouse/blob/master/tests/testflows/ldap/authentication/requirements/requirements.md
+[LDAP]: https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol
+[ClickHouse]: https://clickhouse.tech
+[GitHub Repository]: https://github.com/ClickHouse/ClickHouse/blob/master/tests/testflows/ldap/external_user_directory/requirements/requirements.md
+[Revision History]: https://github.com/ClickHouse/ClickHouse/commits/master/tests/testflows/ldap/external_user_directory/requirements/requirements.md
+[Git]: https://git-scm.com/
+[GitHub]: https://github.com
diff --git a/tests/testflows/ldap/external_user_directory/requirements/requirements.py b/tests/testflows/ldap/external_user_directory/requirements/requirements.py
new file mode 100644
index 000000000000..4c4b17d01dc4
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/requirements/requirements.py
@@ -0,0 +1,1260 @@
+# These requirements were auto generated
+# from software requirements specification (SRS)
+# document by TestFlows v1.6.201009.1190249.
+# Do not edit by hand but re-generate instead
+# using 'tfs requirements generate' command.
+from testflows.core import Requirement
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support authenticating users that are defined only on the [LDAP] server.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_MultipleUserDirectories = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.MultipleUserDirectories',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support authenticating users using multiple [LDAP] external user directories.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_MultipleUserDirectories_Lookup = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.MultipleUserDirectories.Lookup',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL attempt to authenticate external [LDAP] user
'
+        'using [LDAP] external user directory in the same order
'
+        'in which user directories are specified in the `config.xml` file.
'
+        'If a user cannot be authenticated using the first [LDAP] external user directory
'
+        'then the next user directory in the list SHALL be used.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Users_Authentication_NewUsers = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Users.Authentication.NewUsers',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support authenticating users that are defined only on the [LDAP] server
'
+        'as soon as they are added to the [LDAP] server.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_DeletedUsers = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.DeletedUsers',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL not allow authentication of users that
'
+        'were previously defined only on the [LDAP] server but were removed
'
+        'from the [LDAP] server.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Valid',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL only allow user authentication using [LDAP] server if and only if
'
+        'user name and password match [LDAP] server records for the user
'
+        'when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Invalid',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL return an error and prohibit authentication if either user name or password
'
+        'do not match [LDAP] server records for the user
'
+        'when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_UsernameChanged = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.UsernameChanged',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL return an error and prohibit authentication if the username is changed
'
+        'on the [LDAP] server when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_PasswordChanged = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.PasswordChanged',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL return an error and prohibit authentication if the password
'
+        'for the user is changed on the [LDAP] server when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_LDAPServerRestart = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.LDAPServerRestart',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support authenticating users after [LDAP] server is restarted
'
+        'when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_ClickHouseServerRestart = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.ClickHouseServerRestart',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support authenticating users after server is restarted
'
+        'when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support parallel authentication of users using [LDAP] server
'
+        'when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_ValidAndInvalid = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.ValidAndInvalid',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support authentication of valid users and
'
+        'prohibit authentication of invalid users using [LDAP] server
'
+        'in parallel without having invalid attempts affecting valid authentications
'
+        'when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_MultipleServers = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.MultipleServers',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support parallel authentication of external [LDAP] users
'
+        'authenticated using multiple [LDAP] external user directories.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_LocalOnly = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.LocalOnly',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support parallel authentication of users defined only locally
'
+        'when one or more [LDAP] external user directories are specified in the configuration file.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_LocalAndMultipleLDAP = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.LocalAndMultipleLDAP',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support parallel authentication of local and external [LDAP] users
'
+        'authenticated using multiple [LDAP] external user directories.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_SameUser = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.SameUser',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support parallel authentication of the same external [LDAP] user
'
+        'authenticated using the same [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_DynamicallyAddedAndRemovedUsers = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Parallel.DynamicallyAddedAndRemovedUsers',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support parallel authentication of users using
'
+        '[LDAP] external user directory when [LDAP] users are dynamically added and
'
+        'removed.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_PlainText = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.PlainText',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support user authentication using plain text `ldap://` non secure protocol
'
+        'while connecting to the [LDAP] server when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_TLS = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support user authentication using `SSL/TLS` `ldaps://` secure protocol
'
+        'while connecting to the [LDAP] server when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_StartTLS = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.StartTLS',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support user authentication using legacy `StartTLS` protocol which is a
'
+        'plain text `ldap://` protocol that is upgraded to [TLS] when connecting to the [LDAP] server
'
+        'when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_TLS_Certificate_Validation = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.Validation',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support certificate validation used for [TLS] connections
'
+        'to the [LDAP] server when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_TLS_Certificate_SelfSigned = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.SelfSigned',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support self-signed certificates for [TLS] connections
'
+        'to the [LDAP] server when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_TLS_Certificate_SpecificCertificationAuthority = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Protocol.TLS.Certificate.SpecificCertificationAuthority',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support certificates signed by specific Certification Authority for [TLS] connections
'
+        'to the [LDAP] server when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Authentication_Mechanism_Anonymous = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.Anonymous',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL return an error and prohibit authentication using [Anonymous Authentication Mechanism of Simple Bind]
'
+        'authentication mechanism when connecting to the [LDAP] server when using [LDAP] external server directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Authentication_Mechanism_Unauthenticated = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.Unauthenticated',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL return an error and prohibit authentication using [Unauthenticated Authentication Mechanism of Simple Bind]
'
+        'authentication mechanism when connecting to the [LDAP] server when using [LDAP] external server directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Authentication_Mechanism_NamePassword = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.Mechanism.NamePassword',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL allow authentication using only [Name/Password Authentication Mechanism of Simple Bind]
'
+        'authentication mechanism when connecting to the [LDAP] server when using [LDAP] external server directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Authentication_UnreachableServer = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Connection.Authentication.UnreachableServer',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL return an error and prohibit user login if [LDAP] server is unreachable
'
+        'when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Users_Lookup_Priority = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Users.Lookup.Priority',
+        version='2.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL lookup user presence in the same order
'
+        'as user directories are defined in the `config.xml`.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Restart_Server = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Restart.Server',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support restarting server when one or more LDAP external directories
'
+        'are configured.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Restart_Server_ParallelLogins = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Restart.Server.ParallelLogins',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support restarting server when one or more LDAP external directories
'
+        'are configured during parallel [LDAP] user logins.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Role_Removed = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL reject authentication attempt if any of the roles that are specified in the configuration
'
+        'of the external user directory are not defined at the time of the authentication attempt
'
+        'with an exception that if a user was able to authenticate in past and its internal user object was created and cached
'
+        'then the user SHALL be able to authenticate again, even if one of the roles is missing.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Role_Removed_Privileges = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Removed.Privileges',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL remove the privileges provided by the role from all the LDAP
'
+        'users authenticated using external user directory if it is removed
'
+        'including currently cached users that are still able to authenticated where the removed
'
+        'role is specified in the configuration of the external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Role_Readded_Privileges = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.Readded.Privileges',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL reassign the role and add the privileges provided by the role
'
+        'when it is re-added after removal for all LDAP users authenticated using external user directory
'
+        'including any cached users where the re-added role was specified in the configuration of the external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Role_New = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.New',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL not allow any new roles to be assigned to any LDAP
'
+        'users authenticated using external user directory unless the role is specified
'
+        'in the configuration of the external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Role_NewPrivilege = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.NewPrivilege',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL add new privilege to all the LDAP users authenticated using external user directory
'
+        'including cached users when new privilege is added to one of the roles specified
'
+        'in the configuration of the external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Role_RemovedPrivilege = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Role.RemovedPrivilege',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL remove privilege from all the LDAP users authenticated using external user directory
'
+        'including cached users when privilege is removed from all the roles specified
'
+        'in the configuration of the external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Invalid',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL return an error and prohibit user login if [LDAP] server configuration is not valid.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Definition = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Definition',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support using the [LDAP] servers defined in the
'
+        '`ldap_servers` section of the `config.xml` as the server to be used
'
+        'for a external user directory that uses an [LDAP] server as a source of user definitions.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Name = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Name',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL not support empty string as a server name.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Host = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Host',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `<host>` parameter to specify [LDAP]
'
+        'server hostname or IP, this parameter SHALL be mandatory and SHALL not be empty.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Port',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `<port>` parameter to specify [LDAP] server port.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port_Default = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Port.Default',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL use default port number `636` if `enable_tls` is set to `yes` or `389` otherwise.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Prefix = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Prefix',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `<auth_dn_prefix>` parameter to specify the prefix
'
+        'of value used to construct the DN to bound to during authentication via [LDAP] server.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Suffix = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Suffix',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `<auth_dn_suffix>` parameter to specify the suffix
'
+        'of value used to construct the DN to bound to during authentication via [LDAP] server.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Value = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.AuthDN.Value',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL construct DN as  `auth_dn_prefix + escape(user_name) + auth_dn_suffix` string.
'
+        '
'
+        "> This implies that auth_dn_suffix should usually have comma ',' as its first non-space character.
"
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `<enable_tls>` parameter to trigger the use of secure connection to the [LDAP] server.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_Default = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.Default',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL use `yes` value as the default for `<enable_tls>` parameter
'
+        'to enable SSL/TLS `ldaps://` protocol.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_No = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.No',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support specifying `no` as the value of `<enable_tls>` parameter to enable
'
+        'plain text `ldap://` protocol.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_Yes = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.Yes',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support specifying `yes` as the value of `<enable_tls>` parameter to enable
'
+        'SSL/TLS `ldaps://` protocol.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_StartTLS = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.EnableTLS.Options.StartTLS',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support specifying `starttls` as the value of `<enable_tls>` parameter to enable
'
+        'legacy `StartTLS` protocol that used plain text `ldap://` protocol, upgraded to [TLS].
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSMinimumProtocolVersion = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `<tls_minimum_protocol_version>` parameter to specify
'
+        'the minimum protocol version of SSL/TLS.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSMinimumProtocolVersion_Values = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion.Values',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support specifying `ssl2`, `ssl3`, `tls1.0`, `tls1.1`, and `tls1.2`
'
+        'as a value of the `<tls_minimum_protocol_version>` parameter.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSMinimumProtocolVersion_Default = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSMinimumProtocolVersion.Default',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL set `tls1.2` as the default value of the `<tls_minimum_protocol_version>` parameter.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `<tls_require_cert>` parameter to specify [TLS] peer
'
+        'certificate verification behavior.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Default = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Default',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL use `demand` value as the default for the `<tls_require_cert>` parameter.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Demand = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Demand',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support specifying `demand` as the value of `<tls_require_cert>` parameter to
'
+        'enable requesting of client certificate.  If no certificate  is  provided,  or  a  bad   certificate   is
'
+        'provided, the session SHALL be immediately terminated.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Allow = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Allow',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support specifying `allow` as the value of `<tls_require_cert>` parameter to
'
+        'enable requesting of client certificate. If no
'
+        'certificate is provided, the session SHALL proceed normally.
'
+        'If a bad certificate is provided, it SHALL be ignored and the session SHALL proceed normally.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Try = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Try',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support specifying `try` as the value of `<tls_require_cert>` parameter to
'
+        'enable requesting of client certificate. If no certificate is provided, the session
'
+        'SHALL proceed  normally.  If a bad certificate is provided, the session SHALL be
'
+        'immediately terminated.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Never = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSRequireCert.Options.Never',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support specifying `never` as the value of `<tls_require_cert>` parameter to
'
+        'disable requesting of client certificate.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSCertFile = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCertFile',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `<tls_cert_file>` to specify the path to certificate file used by
'
+        '[ClickHouse] to establish connection with the [LDAP] server.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSKeyFile = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSKeyFile',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `<tls_key_file>` to specify the path to key file for the certificate
'
+        'specified by the `<tls_cert_file>` parameter.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSCACertDir = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCACertDir',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `<tls_ca_cert_dir>` parameter to specify to a path to
'
+        'the directory containing [CA] certificates used to verify certificates provided by the [LDAP] server.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSCACertFile = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCACertFile',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `<tls_ca_cert_file>` parameter to specify a path to a specific
'
+        '[CA] certificate file used to verify certificates provided by the [LDAP] server.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSCipherSuite = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.TLSCipherSuite',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `tls_cipher_suite` parameter to specify allowed cipher suites.
'
+        'The value SHALL use the same format as the `ciphersuites` in the [OpenSSL Ciphers].
'
+        '
'
+        'For example,
'
+        '
'
+        '```xml
'
+        '<tls_cipher_suite>ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384</tls_cipher_suite>
'
+        '```
'
+        '
'
+        'The available suites SHALL depend on the [OpenSSL] library version and variant used to build
'
+        '[ClickHouse] and therefore might change.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Syntax = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Server.Syntax',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support the following example syntax to create an entry for an [LDAP] server inside the `config.xml`
'
+        'configuration file or of any configuration file inside the `config.d` directory.
'
+        '
'
+        '```xml
'
+        '<yandex>
'
+        '    <my_ldap_server>
'
+        '        <host>localhost</host>
'
+        '        <port>636</port>
'
+        '        <auth_dn_prefix>cn=</auth_dn_prefix>
'
+        '        <auth_dn_suffix>, ou=users, dc=example, dc=com</auth_dn_suffix>
'
+        '        <enable_tls>yes</enable_tls>
'
+        '        <tls_minimum_protocol_version>tls1.2</tls_minimum_protocol_version>
'
+        '        <tls_require_cert>demand</tls_require_cert>
'
+        '        <tls_cert_file>/path/to/tls_cert_file</tls_cert_file>
'
+        '        <tls_key_file>/path/to/tls_key_file</tls_key_file>
'
+        '        <tls_ca_cert_file>/path/to/tls_ca_cert_file</tls_ca_cert_file>
'
+        '        <tls_ca_cert_dir>/path/to/tls_ca_cert_dir</tls_ca_cert_dir>
'
+        '        <tls_cipher_suite>ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384</tls_cipher_suite>
'
+        '    </my_ldap_server>
'
+        '</yandex>
'
+        '```
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_LDAPUserDirectory = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.LDAPUserDirectory',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `<ldap>` sub-section in the `<user_directories>` section of the `config.xml`
'
+        'that SHALL define a external user directory that uses an [LDAP] server as a source of user definitions.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_LDAPUserDirectory_MoreThanOne = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.LDAPUserDirectory.MoreThanOne',
+        version='2.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support more than one `<ldap>` sub-sections in the `<user_directories>` section of the `config.xml`
'
+        'that SHALL allow to define more than one external user directory that use an [LDAP] server as a source
'
+        'of user definitions.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Syntax = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Syntax',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `<ldap>` section with the following syntax
'
+        '
'
+        '```xml
'
+        '<yandex>
'
+        '    <user_directories>
'
+        '        <ldap>
'
+        '            <server>my_ldap_server</server>
'
+        '            <roles>
'
+        '                <my_local_role1 />
'
+        '                <my_local_role2 />
'
+        '            </roles>
'
+        '        </ldap>
'
+        '    </user_directories>
'
+        '</yandex>
'
+        '```
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `server` parameter in the `<ldap>` sub-section in the `<user_directories>`
'
+        'section of the `config.xml` that SHALL specify one of LDAP server names
'
+        'defined in `<ldap_servers>` section.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_Empty = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Empty',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL return an error if the `server` parameter in the `<ldap>` sub-section in the `<user_directories>`
'
+        'is empty.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_Missing = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Missing',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL return an error if the `server` parameter in the `<ldap>` sub-section in the `<user_directories>`
'
+        'is missing.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_MoreThanOne = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.MoreThanOne',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL only use the first definitition of the `server` parameter in the `<ldap>` sub-section in the `<user_directories>`
'
+        'if more than one `server` parameter is defined in the configuration.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_Invalid = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Server.Invalid',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL return an error if the server specified as the value of the `<server>`
'
+        'parameter is not defined.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support `roles` parameter in the `<ldap>` sub-section in the `<user_directories>`
'
+        'section of the `config.xml` that SHALL specify the names of a locally defined roles that SHALL
'
+        'be assigned to all users retrieved from the [LDAP] server.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_MoreThanOne = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.MoreThanOne',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL only use the first definitition of the `roles` parameter
'
+        'in the `<ldap>` sub-section in the `<user_directories>`
'
+        'if more than one `roles` parameter is defined in the configuration.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_Invalid = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Invalid',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL return an error if the role specified in the `<roles>`
'
+        'parameter does not exist locally.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_Empty = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Empty',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL not allow users authenticated using LDAP external user directory
'
+        'to perform any action if the `roles` parameter in the `<ldap>` sub-section in the `<user_directories>`
'
+        'section is empty.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_Missing = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Configuration.Users.Parameters.Roles.Missing',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL not allow users authenticated using LDAP external user directory
'
+        'to perform any action if the `roles` parameter in the `<ldap>` sub-section in the `<user_directories>`
'
+        'section is missing.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Username_Empty = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.Empty',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL not support authenticating users with empty username
'
+        'when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Username_Long = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.Long',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support authenticating users with a long username of at least 256 bytes
'
+        'when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Username_UTF8 = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Username.UTF8',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support authentication users with a username that contains [UTF-8] characters
'
+        'when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Password_Empty = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.Empty',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL not support authenticating users with empty passwords
'
+        'even if an empty password is valid for the user and
'
+        'is allowed by the [LDAP] server when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Password_Long = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.Long',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support long password of at least 256 bytes
'
+        'that can be used to authenticate users when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
+
+RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Password_UTF8 = Requirement(
+        name='RQ.SRS-009.LDAP.ExternalUserDirectory.Authentication.Password.UTF8',
+        version='1.0',
+        priority=None,
+        group=None,
+        type=None,
+        uid=None,
+        description=(
+        '[ClickHouse] SHALL support [UTF-8] characters in passwords
'
+        'used to authenticate users when using [LDAP] external user directory.
'
+        '
'
+        ),
+        link=None)
diff --git a/tests/testflows/ldap/external_user_directory/tests/authentications.py b/tests/testflows/ldap/external_user_directory/tests/authentications.py
new file mode 100644
index 000000000000..bf5a788c4d5c
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/tests/authentications.py
@@ -0,0 +1,734 @@
+# -*- coding: utf-8 -*-
+import random
+
+from multiprocessing.dummy import Pool
+from testflows.core import *
+from testflows.asserts import error
+
+from ldap.external_user_directory.tests.common import *
+from ldap.external_user_directory.requirements import *
+
+servers = {
+    "openldap1": {
+        "host": "openldap1",
+        "port": "389",
+        "enable_tls": "no",
+        "auth_dn_prefix": "cn=",
+        "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+    },
+    "openldap2": {
+        "host": "openldap2",
+        "port": "636",
+        "enable_tls": "yes",
+        "auth_dn_prefix": "cn=",
+        "auth_dn_suffix": ",ou=users,dc=company,dc=com",
+        "tls_require_cert": "never",
+    }
+}
+
+@TestOutline
+def add_user_to_ldap_and_login(self, server, user=None, ch_user=None, login=None, exitcode=None, message=None):
+    """Add user to LDAP and ClickHouse and then try to login."""
+    self.context.ldap_node = self.context.cluster.node(server)
+
+    if ch_user is None:
+        ch_user = {}
+    if login is None:
+        login = {}
+    if user is None:
+        user = {"cn": "myuser", "userpassword": "myuser"}
+
+    with ldap_user(**user) as user:
+        username = login.get("username", user["cn"])
+        password = login.get("password", user["userpassword"])
+
+        login_and_execute_query(username=username, password=password, exitcode=exitcode, message=message)
+
+def login_with_valid_username_and_password(users, i, iterations=10):
+    """Login with valid username and password.
+    """
+    with When(f"valid users try to login #{i}"):
+        for i in range(iterations):
+            random_user = users[random.randint(0, len(users)-1)]
+            login_and_execute_query(username=random_user["cn"], password=random_user["userpassword"], steps=False)
+
+def login_with_valid_username_and_invalid_password(users, i, iterations=10):
+    """Login with valid username and invalid password.
+    """
+    with When(f"users try to login with valid username and invalid password #{i}"):
+        for i in range(iterations):
+            random_user = users[random.randint(0, len(users)-1)]
+            login_and_execute_query(username=random_user["cn"],
+                password=(random_user["userpassword"] + randomword(1)),
+                exitcode=4,
+                message=f"DB::Exception: {random_user['cn']}: Authentication failed: password is incorrect or there is no user with such name",
+                steps=False)
+
+def login_with_invalid_username_and_valid_password(users, i, iterations=10):
+    """Login with invalid username and valid password.
+    """
+    with When(f"users try to login with invalid username and valid password #{i}"):
+        for i in range(iterations):
+            random_user = dict(users[random.randint(0, len(users)-1)])
+            random_user["cn"] += randomword(1)
+            login_and_execute_query(username=random_user["cn"],
+                password=random_user["userpassword"],
+                exitcode=4,
+                message=f"DB::Exception: {random_user['cn']}: Authentication failed: password is incorrect or there is no user with such name",
+                steps=False)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_ValidAndInvalid("1.0")
+)
+def parallel_login(self, server, user_count=10, timeout=200):
+    """Check that login of valid and invalid LDAP authenticated users works in parallel.
+    """
+    self.context.ldap_node = self.context.cluster.node(server)
+    user = None
+
+    with Given("a group of LDAP users"):
+        users = [{"cn": f"parallel_user{i}", "userpassword": randomword(20)} for i in range(user_count)]
+
+    with ldap_users(*users):
+        tasks = []
+        try:
+            with When("users try to login in parallel", description="""
+                * with valid username and password
+                * with invalid username and valid password
+                * with valid username and invalid password
+                """):
+                p = Pool(15)
+                for i in range(25):
+                    tasks.append(p.apply_async(login_with_valid_username_and_password, (users, i, 50,)))
+                    tasks.append(p.apply_async(login_with_valid_username_and_invalid_password, (users, i, 50,)))
+                    tasks.append(p.apply_async(login_with_invalid_username_and_valid_password, (users, i, 50,)))
+
+        finally:
+            with Then("it should work"):
+                join(tasks, timeout)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_SameUser("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_ValidAndInvalid("1.0")
+)
+def parallel_login_with_the_same_user(self, server, timeout=200):
+    """Check that valid and invalid logins of the same
+    LDAP authenticated user works in parallel.
+    """
+    self.context.ldap_node = self.context.cluster.node(server)
+    user = None
+
+    with Given("only one LDAP user"):
+        users = [{"cn": f"parallel_user1", "userpassword": randomword(20)}]
+
+    with ldap_users(*users):
+        tasks = []
+        try:
+            with When("the same user tries to login in parallel", description="""
+                * with valid username and password
+                * with invalid username and valid password
+                * with valid username and invalid password
+                """):
+                p = Pool(15)
+                for i in range(25):
+                    tasks.append(p.apply_async(login_with_valid_username_and_password, (users, i, 50,)))
+                    tasks.append(p.apply_async(login_with_valid_username_and_invalid_password, (users, i, 50,)))
+                    tasks.append(p.apply_async(login_with_invalid_username_and_valid_password, (users, i, 50,)))
+
+        finally:
+            with Then("it should work"):
+                join(tasks, timeout)
+
+@TestScenario
+def login_after_ldap_external_user_directory_is_removed(self, server):
+    """Check that ClickHouse stops authenticating LDAP users
+    after LDAP external user directory is removed.
+    """
+    with When("I attempt to login after LDAP external user directory is added"):
+        with ldap_external_user_directory(server="openldap2", roles=[], restart=True):
+            login_and_execute_query(username="user2", password="user2")
+
+    with When("I attempt to login after LDAP external user directory is removed"):
+        exitcode = 4
+        message = f"DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name"
+        login_and_execute_query(username="user2", password="user2", exitcode=exitcode, message=message)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_SameUser("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_ValidAndInvalid("1.0")
+)
+def parallel_login_with_the_same_user_multiple_servers(self, server, timeout=200):
+    """Check that valid and invalid logins of the same
+    user defined in multiple LDAP external user directories
+    works in parallel.
+    """
+    with Given("I have two LDAP servers"):
+        entries = [
+            (["openldap1"], []),
+            (["openldap2"], [])
+        ]
+
+    with Given("I define only one LDAP user"):
+        users = [{"cn": f"parallel_user1", "userpassword": randomword(20)}]
+
+    with And("I create config file to define LDAP external user directory for each LDAP server"):
+        config = create_entries_ldap_external_user_directory_config_content(entries)
+
+    with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):
+        with ldap_users(*users, node=self.context.cluster.node("openldap1")):
+            with ldap_users(*users, node=self.context.cluster.node("openldap2")):
+                tasks = []
+                try:
+                    with When("the same user tries to login in parallel", description="""
+                        * with valid username and password
+                        * with invalid username and valid password
+                        * with valid username and invalid password
+                        """):
+                        p = Pool(15)
+                        for i in range(25):
+                            tasks.append(p.apply_async(login_with_valid_username_and_password, (users, i, 50,)))
+                            tasks.append(p.apply_async(login_with_valid_username_and_invalid_password, (users, i, 50,)))
+                            tasks.append(p.apply_async(login_with_invalid_username_and_valid_password, (users, i, 50,)))
+
+                finally:
+                    with Then("it should work"):
+                        join(tasks, timeout)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_MultipleServers("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_ValidAndInvalid("1.0")
+)
+def parallel_login_with_multiple_servers(self, server, user_count=10, timeout=200):
+    """Check that login of valid and invalid LDAP authenticated users works in parallel
+    using multiple LDAP external user directories.
+    """
+    with Given("I have two LDAP servers"):
+        entries = [
+            (["openldap1"], []),
+            (["openldap2"], [])
+        ]
+
+    with And("I define a group of users to be created on each LDAP server"):
+        user_groups = {
+            "openldap1_users": [{"cn": f"openldap1_parallel_user{i}", "userpassword": randomword(20)} for i in range(user_count)],
+            "openldap2_users": [{"cn": f"openldap2_parallel_user{i}", "userpassword": randomword(20)} for i in range(user_count)]
+        }
+
+    with And("I have a list of checks that I want to run for each user group"):
+        checks = [
+            login_with_valid_username_and_password,
+            login_with_valid_username_and_invalid_password,
+            login_with_invalid_username_and_valid_password
+        ]
+
+    with And("I create config file to define LDAP external user directory for each LDAP server"):
+        config = create_entries_ldap_external_user_directory_config_content(entries)
+
+    with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):
+        with ldap_users(*user_groups["openldap1_users"], node=self.context.cluster.node("openldap1")):
+            with ldap_users(*user_groups["openldap2_users"], node=self.context.cluster.node("openldap2")):
+                tasks = []
+
+                try:
+                    with When("users in each group try to login in parallel", description="""
+                        * with valid username and password
+                        * with invalid username and valid password
+                        * with valid username and invalid password
+                        """):
+                        p = Pool(15)
+                        for i in range(25):
+                            for users in user_groups.values():
+                                for check in checks:
+                                    tasks.append(p.apply_async(check, (users, i, 50,)))
+
+                finally:
+                    with Then("it should work"):
+                        join(tasks, timeout)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_LocalAndMultipleLDAP("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_ValidAndInvalid("1.0")
+)
+def parallel_login_with_rbac_and_multiple_servers(self, server, user_count=10, timeout=200):
+    """Check that login of valid and invalid users works in parallel
+    using local users defined using RBAC and LDAP users authenticated using
+    multiple LDAP external user directories.
+    """
+    with Given("I have two LDAP servers"):
+        entries = [
+            (["openldap1"], []),
+            (["openldap2"], [])
+        ]
+
+    with And("I define a group of users to be created on each LDAP server"):
+        user_groups = {
+            "openldap1_users": [{"cn": f"openldap1_parallel_user{i}", "userpassword": randomword(20)} for i in range(user_count)],
+            "openldap2_users": [{"cn": f"openldap2_parallel_user{i}", "userpassword": randomword(20)} for i in range(user_count)],
+            "local_users": [{"cn": f"local_parallel_user{i}", "userpassword": randomword(20)} for i in range(user_count)]
+        }
+
+    with And("I have a list of checks that I want to run for each user group"):
+        checks = [
+            login_with_valid_username_and_password,
+            login_with_valid_username_and_invalid_password,
+            login_with_invalid_username_and_valid_password
+        ]
+
+    with And("I create config file to define LDAP external user directory for each LDAP server"):
+        config = create_entries_ldap_external_user_directory_config_content(entries)
+
+    with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):
+        with ldap_users(*user_groups["openldap1_users"], node=self.context.cluster.node("openldap1")):
+            with ldap_users(*user_groups["openldap2_users"], node=self.context.cluster.node("openldap2")):
+                with rbac_users(*user_groups["local_users"]):
+                    tasks = []
+
+                    try:
+                        with When("users in each group try to login in parallel", description="""
+                            * with valid username and password
+                            * with invalid username and valid password
+                            * with valid username and invalid password
+                            """):
+                            p = Pool(15)
+                            for i in range(25):
+                                for users in user_groups.values():
+                                    for check in checks:
+                                        tasks.append(p.apply_async(check, (users, i, 50,)))
+
+                    finally:
+                        with Then("it should work"):
+                            join(tasks, timeout)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Parallel_LocalOnly("1.0")
+)
+def parallel_login_with_rbac_users(self, server, user_count=10, timeout=200):
+    """Check that login of only valid and invalid local users created using RBAC
+    works in parallel when server configuration includes LDAP external user directory.
+    """
+    self.context.ldap_node = self.context.cluster.node(server)
+    user = None
+
+    users = [{"cn": f"parallel_user{i}", "userpassword": randomword(20)} for i in range(user_count)]
+
+    with rbac_users(*users):
+        tasks = []
+        try:
+            with When("I login in parallel"):
+                p = Pool(15)
+                for i in range(25):
+                    tasks.append(p.apply_async(login_with_valid_username_and_password, (users, i, 50,)))
+                    tasks.append(p.apply_async(login_with_valid_username_and_invalid_password, (users, i, 50,)))
+                    tasks.append(p.apply_async(login_with_invalid_username_and_valid_password, (users, i, 50,)))
+        finally:
+            with Then("it should work"):
+                join(tasks, timeout)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Users_Authentication_NewUsers("1.0")
+)
+def login_after_user_is_added_to_ldap(self, server):
+    """Check that user can login as soon as it is added to LDAP."""
+    user = {"cn": "myuser", "userpassword": "myuser"}
+
+    with When(f"I add user to LDAP and try to login"):
+       add_user_to_ldap_and_login(user=user, server=server)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_DeletedUsers("1.0")
+)
+def login_after_user_is_deleted_from_ldap(self, server):
+    """Check that login fails after user is deleted from LDAP."""
+    self.context.ldap_node = self.context.cluster.node(server)
+    user = None
+
+    try:
+        with Given(f"I add user to LDAP"):
+            user = {"cn": "myuser", "userpassword": "myuser"}
+            user = add_user_to_ldap(**user)
+
+        login_and_execute_query(username=user["cn"], password=user["userpassword"])
+
+        with When("I delete this user from LDAP"):
+            delete_user_from_ldap(user)
+
+        with Then("when I try to login again it should fail"):
+            login_and_execute_query(username=user["cn"], password=user["userpassword"],
+                exitcode=4,
+                message=f"DB::Exception: {user['cn']}: Authentication failed: password is incorrect or there is no user with such name"
+            )
+    finally:
+        with Finally("I make sure LDAP user is deleted"):
+            if user is not None:
+                delete_user_from_ldap(user, exitcode=None)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_PasswordChanged("1.0")
+)
+def login_after_user_password_changed_in_ldap(self, server):
+    """Check that login fails after user password is changed in LDAP."""
+    self.context.ldap_node = self.context.cluster.node(server)
+    user = None
+
+    try:
+        with Given(f"I add user to LDAP"):
+            user = {"cn": "myuser", "userpassword": "myuser"}
+            user = add_user_to_ldap(**user)
+
+        login_and_execute_query(username=user["cn"], password=user["userpassword"])
+
+        with When("I change user password in LDAP"):
+            change_user_password_in_ldap(user, "newpassword")
+
+        with Then("when I try to login again it should fail"):
+            login_and_execute_query(username=user["cn"], password=user["userpassword"],
+                exitcode=4,
+                message=f"DB::Exception: {user['cn']}: Authentication failed: password is incorrect or there is no user with such name"
+            )
+
+        with And("when I try to login with the new password it should work"):
+            login_and_execute_query(username=user["cn"], password="newpassword")
+
+    finally:
+        with Finally("I make sure LDAP user is deleted"):
+            if user is not None:
+                delete_user_from_ldap(user, exitcode=None)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_UsernameChanged("1.0")
+)
+def login_after_user_cn_changed_in_ldap(self, server):
+    """Check that login fails after user cn is changed in LDAP."""
+    self.context.ldap_node = self.context.cluster.node(server)
+    user = None
+    new_user = None
+
+    try:
+        with Given(f"I add user to LDAP"):
+            user = {"cn": "myuser", "userpassword": "myuser"}
+            user = add_user_to_ldap(**user)
+
+        login_and_execute_query(username=user["cn"], password=user["userpassword"])
+
+        with When("I change user password in LDAP"):
+            new_user = change_user_cn_in_ldap(user, "myuser2")
+
+        with Then("when I try to login again it should fail"):
+            login_and_execute_query(username=user["cn"], password=user["userpassword"],
+                exitcode=4,
+                message=f"DB::Exception: {user['cn']}: Authentication failed: password is incorrect or there is no user with such name"
+            )
+    finally:
+        with Finally("I make sure LDAP user is deleted"):
+            if new_user is not None:
+                delete_user_from_ldap(new_user, exitcode=None)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_LDAPServerRestart("1.0")
+)
+def login_after_ldap_server_is_restarted(self, server, timeout=60):
+    """Check that login succeeds after LDAP server is restarted."""
+    self.context.ldap_node = self.context.cluster.node(server)
+    user = None
+
+    try:
+        with Given(f"I add user to LDAP"):
+            user = {"cn": "myuser", "userpassword": getuid()}
+            user = add_user_to_ldap(**user)
+
+        login_and_execute_query(username=user["cn"], password=user["userpassword"])
+
+        with When("I restart LDAP server"):
+            self.context.ldap_node.restart()
+
+        with Then("I try to login until it works", description=f"timeout {timeout} sec"):
+            started = time.time()
+            while True:
+                r = self.context.node.query("SELECT 1",
+                    settings=[("user", user["cn"]), ("password", user["userpassword"])],
+                    no_checks=True)
+                if r.exitcode == 0:
+                    break
+                assert time.time() - started < timeout, error(r.output)
+    finally:
+        with Finally("I make sure LDAP user is deleted"):
+            if user is not None:
+                delete_user_from_ldap(user, exitcode=None)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_ClickHouseServerRestart("1.0")
+)
+def login_after_clickhouse_server_is_restarted(self, server, timeout=60):
+    """Check that login succeeds after ClickHouse server is restarted."""
+    self.context.ldap_node = self.context.cluster.node(server)
+    user = None
+
+    try:
+        with Given(f"I add user to LDAP"):
+            user = {"cn": "myuser", "userpassword": getuid()}
+            user = add_user_to_ldap(**user)
+
+        login_and_execute_query(username=user["cn"], password=user["userpassword"])
+
+        with When("I restart ClickHouse server"):
+            self.context.node.restart()
+
+        with Then("I try to login until it works", description=f"timeout {timeout} sec"):
+            started = time.time()
+            while True:
+                r = self.context.node.query("SELECT 1",
+                    settings=[("user", user["cn"]), ("password", user["userpassword"])],
+                    no_checks=True)
+                if r.exitcode == 0:
+                    break
+                assert time.time() - started < timeout, error(r.output)
+    finally:
+        with Finally("I make sure LDAP user is deleted"):
+            if user is not None:
+                delete_user_from_ldap(user, exitcode=None)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Password_Empty("1.0")
+)
+def valid_username_with_valid_empty_password(self, server):
+    """Check that we can't login using valid username that has empty password."""
+    user = {"cn": "empty_password", "userpassword": ""}
+    exitcode = 4
+    message = f"DB::Exception: {user['cn']}: Authentication failed: password is incorrect or there is no user with such name"
+
+    add_user_to_ldap_and_login(user=user, exitcode=exitcode, message=message, server=server)
+
+@TestScenario
+@Requirements(
+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid("1.0"),
+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Password_Empty("1.0")
+)
+def valid_username_and_invalid_empty_password(self, server):
+   """Check that we can't login using valid username but invalid empty password."""
+   username = "user_non_empty_password"
+   user = {"cn": username, "userpassword": username}
+   login = {"password": ""}
+
+   exitcode = 4
+   message = f"DB::Exception: {username}: Authentication failed: password is incorrect or there is no user with such name"
+
+   add_user_to_ldap_and_login(user=user, login=login, exitcode=exitcode, message=message, server=server)
+
+@TestScenario
+@Requirements(
+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid("1.0")
+)
+def valid_username_and_password(self, server):
+   """Check that we can login using valid username and password."""
+   username = "valid_username_and_password"
+   user = {"cn": username, "userpassword": username}
+
+   with When(f"I add user {username} to LDAP and try to login"):
+       add_user_to_ldap_and_login(user=user, server=server)
+
+@TestScenario
+@Requirements(
+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid("1.0")
+)
+def valid_username_and_password_invalid_server(self, server=None):
+   """Check that we can't login using valid username and valid
+   password but for a different server."""
+   self.context.ldap_node = self.context.cluster.node("openldap1")
+
+   exitcode = 4
+   message = f"DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name"
+
+   login_and_execute_query(username="user2", password="user2", exitcode=exitcode, message=message)
+
+@TestScenario
+@Requirements(
+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid("1.0"),
+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Username_Long("1.0"),
+)
+def valid_long_username_and_short_password(self, server):
+   """Check that we can login using valid very long username and short password."""
+   username = "long_username_12345678901234567890123456789012345678901234567890123456789012345678901234567890"
+   user = {"cn": username, "userpassword": "long_username"}
+
+   add_user_to_ldap_and_login(user=user, server=server)
+
+@TestScenario
+@Requirements(
+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid("1.0")
+)
+def invalid_long_username_and_valid_short_password(self, server):
+   """Check that we can't login using slightly invalid long username but valid password."""
+   username = "long_username_12345678901234567890123456789012345678901234567890123456789012345678901234567890"
+   user = {"cn": username, "userpassword": "long_username"}
+   login = {"username": f"{username}?"}
+
+   exitcode = 4
+   message=f"DB::Exception: {login['username']}: Authentication failed: password is incorrect or there is no user with such name"
+
+   add_user_to_ldap_and_login(user=user, login=login, exitcode=exitcode, message=message, server=server)
+
+@TestScenario
+@Requirements(
+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid("1.0"),
+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Password_Long("1.0")
+)
+def valid_short_username_and_long_password(self, server):
+   """Check that we can login using valid short username with very long password."""
+   username = "long_password"
+   user = {"cn": username, "userpassword": "long_password_12345678901234567890123456789012345678901234567890123456789012345678901234567890"}
+   add_user_to_ldap_and_login(user=user, server=server)
+
+@TestScenario
+@Requirements(
+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid("1.0")
+)
+def valid_short_username_and_invalid_long_password(self, server):
+   """Check that we can't login using valid short username and invalid long password."""
+   username = "long_password"
+   user = {"cn": username, "userpassword": "long_password_12345678901234567890123456789012345678901234567890123456789012345678901234567890"}
+   login = {"password": user["userpassword"] + "1"}
+
+   exitcode = 4
+   message=f"DB::Exception: {username}: Authentication failed: password is incorrect or there is no user with such name"
+
+   add_user_to_ldap_and_login(user=user, login=login, exitcode=exitcode, message=message, server=server)
+
+@TestScenario
+@Requirements(
+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid("1.0")
+)
+def valid_username_and_invalid_password(self, server):
+   """Check that we can't login using valid username and invalid password."""
+   username = "valid_username_and_invalid_password"
+   user = {"cn": username, "userpassword": username}
+   login = {"password": user["userpassword"] + "1"}
+
+   exitcode = 4
+   message=f"DB::Exception: {username}: Authentication failed: password is incorrect or there is no user with such name"
+
+   add_user_to_ldap_and_login(user=user, login=login, exitcode=exitcode, message=message, server=server)
+
+@TestScenario
+@Requirements(
+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Invalid("1.0")
+)
+def invalid_username_and_valid_password(self, server):
+   """Check that we can't login using slightly invalid username but valid password."""
+   username = "invalid_username_and_valid_password"
+   user = {"cn": username, "userpassword": username}
+   login = {"username": user["cn"] + "1"}
+
+   exitcode = 4
+   message=f"DB::Exception: {login['username']}: Authentication failed: password is incorrect or there is no user with such name"
+
+   add_user_to_ldap_and_login(user=user, login=login, exitcode=exitcode, message=message, server=server)
+
+@TestScenario
+@Requirements(
+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid("1.0"),
+   RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Username_UTF8("1.0")
+)
+def valid_utf8_username_and_ascii_password(self, server):
+   """Check that we can login using valid utf-8 username with ascii password."""
+   username = "utf8_username_Gãńdåłf_Thê_Gręât"
+   user = {"cn": username, "userpassword": "utf8_username"}
+
+   add_user_to_ldap_and_login(user=user, server=server)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Valid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication_Password_UTF8("1.0")
+)
+def valid_ascii_username_and_utf8_password(self, server):
+    """Check that we can login using valid ascii username with utf-8 password."""
+    username = "utf8_password"
+    user = {"cn": username, "userpassword": "utf8_password_Gãńdåłf_Thê_Gręât"}
+
+    add_user_to_ldap_and_login(user=user, server=server)
+
+@TestScenario
+def empty_username_and_empty_password(self, server=None):
+    """Check that we can login using empty username and empty password as
+    it will use the default user and that has an empty password."""
+    login_and_execute_query(username="", password="")
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Users_Lookup_Priority("2.0")
+)
+def user_lookup_priority(self, server):
+    """Check that users are looked up in the same priority
+    as they are defined in the `<user_dictionaries>` section
+    of the `config.xml`. For this test we have the following priority list
+    as defined by the configuration files:
+
+    * users.xml
+    * local directory
+    * LDAP external user directory
+    """
+    self.context.ldap_node = self.context.cluster.node(server)
+
+    message="DB::Exception: {username}: Authentication failed: password is incorrect or there is no user with such name"
+    exitcode = 4
+
+    users = {
+        "default": {"username": "default", "password": "userdefault"},
+        "local": {"username": "local", "password": "userlocal"},
+        "ldap": {"username": "ldap", "password": "userldap"}
+    }
+
+    with ldap_users(*[{"cn": user["username"], "userpassword": user["password"]} for user in users.values()]):
+        with rbac_users({"cn": "local", "userpassword": "local"}):
+            with When("I try to login as 'default' user which is also defined in users.xml it should fail"):
+                login_and_execute_query(**users["default"], exitcode=exitcode, message=message.format(username="default"))
+
+            with When("I try to login as 'local' user which is also defined in local storage it should fail"):
+                login_and_execute_query(**users["local"], exitcode=exitcode, message=message.format(username="local"))
+
+            with When("I try to login as 'ldap' user defined only in LDAP it should work"):
+                login_and_execute_query(**users["ldap"])
+
+
+@TestOutline(Feature)
+@Name("user authentications")
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Authentication("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Authentication_Mechanism_NamePassword("1.0")
+)
+def feature(self, servers=None, server=None, node="clickhouse1"):
+    """Check that users can be authenticated using an LDAP external user directory.
+    """
+    self.context.node = self.context.cluster.node(node)
+
+    if servers is None:
+        servers = globals()["servers"]
+
+    if server is None:
+        server = "openldap1"
+
+    with ldap_servers(servers):
+        with rbac_roles("ldap_role") as roles:
+            with ldap_external_user_directory(server=server, roles=roles, restart=True):
+                for scenario in loads(current_module(), Scenario):
+                    Scenario(test=scenario, flags=TE)(server=server)
diff --git a/tests/testflows/ldap/external_user_directory/tests/common.py b/tests/testflows/ldap/external_user_directory/tests/common.py
new file mode 100644
index 000000000000..b4a8c9e6640b
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/tests/common.py
@@ -0,0 +1,204 @@
+import os
+import time
+from contextlib import contextmanager
+
+import testflows.settings as settings
+from testflows.core import *
+from testflows.asserts import error
+from ldap.authentication.tests.common import getuid, Config, ldap_servers, add_config, restart
+from ldap.authentication.tests.common import xmltree, xml_indent, xml_append, xml_with_utf8
+from ldap.authentication.tests.common import ldap_user, ldap_users, add_user_to_ldap, delete_user_from_ldap
+from ldap.authentication.tests.common import change_user_password_in_ldap, change_user_cn_in_ldap
+from ldap.authentication.tests.common import randomword
+
+def join(tasks, timeout):
+    """Join async tasks by waiting for their completion.
+    """
+    task_exc = None
+
+    for task in tasks:
+        try:
+            task.get(timeout=timeout)
+        except Exception as exc:
+            if task_exc is None:
+                task_exc = exc
+
+    if task_exc is not None:
+        raise task_exc
+
+@contextmanager
+def table(name, create_statement, on_cluster=False):
+    node = current().context.node
+    try:
+        with Given(f"I have a {name} table"):
+            node.query(create_statement.format(name=name))
+        yield name
+    finally:
+        with Finally("I drop the table"):
+            if on_cluster:
+                node.query(f"DROP TABLE IF EXISTS {name} ON CLUSTER {on_cluster}")
+            else:
+                node.query(f"DROP TABLE IF EXISTS {name}")
+
+@contextmanager
+def rbac_users(*users):
+    node = current().context.node
+    try:
+        with Given("I have local users"):
+            for user in users:
+                with By(f"creating user {user['cn']}", format_name=False):
+                    node.query(f"CREATE USER OR REPLACE {user['cn']} IDENTIFIED WITH PLAINTEXT_PASSWORD BY '{user['userpassword']}'")
+        yield users
+    finally:
+        with Finally("I drop local users"):
+            for user in users:
+                with By(f"dropping user {user['cn']}", flags=TE, format_name=False):
+                    node.query(f"DROP USER IF EXISTS {user['cn']}")
+
+@contextmanager
+def rbac_roles(*roles):
+    node = current().context.node
+    try:
+        with Given("I have roles"):
+            for role in roles:
+                with By(f"creating role {role}"):
+                    node.query(f"CREATE ROLE OR REPLACE {role}")
+        yield roles
+    finally:
+        with Finally("I drop the roles"):
+            for role in roles:
+                with By(f"dropping role {role}", flags=TE):
+                    node.query(f"DROP ROLE IF EXISTS {role}")
+
+def create_ldap_external_user_directory_config_content(server=None, roles=None, **kwargs):
+    """Create LDAP external user directory configuration file content.
+    """
+    return create_entries_ldap_external_user_directory_config_content(entries=[([server], [roles])], **kwargs)
+
+def create_entries_ldap_external_user_directory_config_content(entries, config_d_dir="/etc/clickhouse-server/config.d",
+        config_file="ldap_external_user_directories.xml"):
+    """Create configurattion file content that contains
+    one or more entries for the LDAP external user directory.
+
+    For example,
+
+    ```xml
+        <user_directories>
+            <ldap>
+                <server>my_ldap_server</server>
+                <user_template>my_user</user_template>
+            </ldap>
+        </user_directories>
+    ```
+    """
+    uid = getuid()
+    path = os.path.join(config_d_dir, config_file)
+    name = config_file
+
+    root = xmltree.fromstring("<yandex><user_directories></user_directories></yandex>")
+    xml_user_directories = root.find("user_directories")
+    xml_user_directories.append(xmltree.Comment(text=f"LDAP external user directories {uid}"))
+
+    for entry in entries:
+        servers, roles_entries = entry
+        xml_directory = xmltree.Element("ldap")
+        for server in servers:
+            if server is not None:
+                xml_append(xml_directory, "server", server)
+        if roles_entries:
+            for roles_entry in roles_entries:
+                xml_roles = xmltree.Element("roles")
+                if roles_entry:
+                    for role in roles_entry:
+                        if role is not None:
+                            xml_append(xml_roles, role, "")
+                xml_directory.append(xml_roles)
+        xml_user_directories.append(xml_directory)
+
+    xml_indent(root)
+    content = xml_with_utf8 + str(xmltree.tostring(root, short_empty_elements=False, encoding="utf-8"), "utf-8")
+
+    return Config(content, path, name, uid, "config.xml")
+
+def invalid_ldap_external_user_directory_config(server, roles, message, tail=20, timeout=20, config=None):
+    """Check that ClickHouse errors when trying to load invalid LDAP external user directory
+    configuration file.
+    """
+    cluster = current().context.cluster
+    node = current().context.node
+
+    if config is None:
+        config = create_ldap_external_user_directory_config_content(server=server, roles=roles)
+
+    try:
+        with Given("I prepare the error log by writting empty lines into it"):
+            node.command("echo -e \"%s\" > /var/log/clickhouse-server/clickhouse-server.err.log" % ("-\
" * tail))
+
+        with When("I add the config", description=config.path):
+            command = f"cat <<HEREDOC > {config.path}
{config.content}
HEREDOC"
+            node.command(command, steps=False, exitcode=0)
+
+        with Then(f"{config.preprocessed_name} should be updated", description=f"timeout {timeout}"):
+            started = time.time()
+            command = f"cat /var/lib/clickhouse/preprocessed_configs/{config.preprocessed_name} | grep {config.uid}{' > /dev/null' if not settings.debug else ''}"
+            while time.time() - started < timeout:
+                exitcode = node.command(command, steps=False).exitcode
+                if exitcode == 0:
+                    break
+                time.sleep(1)
+            assert exitcode == 0, error()
+
+        with When("I restart ClickHouse to apply the config changes"):
+            node.restart(safe=False, wait_healthy=False)
+
+    finally:
+        with Finally(f"I remove {config.name}"):
+            with By("removing invalid configuration file"):
+                system_config_path = os.path.join(current_dir(), "..", "configs", node.name, "config.d", config.path.split("config.d/")[-1])
+                cluster.command(None, f'rm -rf {system_config_path}', timeout=timeout, exitcode=0)
+
+            with And("restarting the node"):
+                node.restart(safe=False)
+
+    with Then("error log should contain the expected error message"):
+        started = time.time()
+        command = f"tail -n {tail} /var/log/clickhouse-server/clickhouse-server.err.log | grep \"{message}\""
+        while time.time() - started < timeout:
+            exitcode = node.command(command, steps=False).exitcode
+            if exitcode == 0:
+                break
+            time.sleep(1)
+        assert exitcode == 0, error()
+
+@contextmanager
+def ldap_external_user_directory(server, roles, config_d_dir="/etc/clickhouse-server/config.d",
+        config_file=None, timeout=20, restart=True, config=None):
+    """Add LDAP external user directory.
+    """
+    if config_file is None:
+        config_file = f"ldap_external_user_directory_{getuid()}.xml"
+    if config is None:
+        config = create_ldap_external_user_directory_config_content(server=server, roles=roles, config_d_dir=config_d_dir, config_file=config_file)
+    return add_config(config, restart=restart)
+
+def login(servers, directory_server, *users, config=None):
+    """Configure LDAP server and LDAP external user directory and
+    try to login and execute a query"""
+    with ldap_servers(servers):
+        with rbac_roles(f"role_{getuid()}") as roles:
+            with ldap_external_user_directory(server=servers[directory_server]["host"], roles=roles, restart=True, config=config):
+                for user in users:
+                    if user.get("login", False):
+                        with When(f"I login as {user['username']} and execute query"):
+                            current().context.node.query("SELECT 1",
+                                settings=[("user", user["username"]), ("password", user["password"])],
+                                exitcode=user.get("exitcode", None),
+                                message=user.get("message", None))
+
+@TestStep(When)
+@Name("I login as {username} and execute query")
+def login_and_execute_query(self, username, password, exitcode=None, message=None, steps=True, timeout=60):
+    self.context.node.query("SELECT 1",
+        settings=[("user", username), ("password", password)],
+        exitcode=exitcode or 0,
+        message=message, steps=steps, timeout=timeout)
diff --git a/tests/testflows/ldap/external_user_directory/tests/connections.py b/tests/testflows/ldap/external_user_directory/tests/connections.py
new file mode 100644
index 000000000000..ba734bb6c714
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/tests/connections.py
@@ -0,0 +1,270 @@
+from testflows.core import *
+from testflows.asserts import error
+
+from ldap.external_user_directory.tests.common import login
+from ldap.external_user_directory.requirements import *
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_PlainText("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_No("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port_Default("1.0")
+)
+def plain_text(self):
+    """Check that we can perform LDAP user authentication using `plain text` connection protocol.
+    """
+    servers = {
+        "openldap1": {
+            "host": "openldap1",
+            "enable_tls": "no",
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        }
+    }
+    users = [
+        {"server": "openldap1", "username": "user1", "password": "user1", "login": True}
+    ]
+    login(servers, "openldap1", *users)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_PlainText("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port("1.0")
+)
+def plain_text_with_custom_port(self):
+    """Check that we can perform LDAP user authentication using `plain text` connection protocol
+    with the server that uses custom port.
+    """
+    servers = {
+        "openldap3": {
+            "host": "openldap3",
+            "port": "3089",
+            "enable_tls": "no",
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        }
+    }
+    users = [
+        {"server": "openldap3", "username": "user3", "password": "user3", "login": True}
+    ]
+    login(servers, "openldap3", *users)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_TLS("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port("1.0")
+)
+def tls_with_custom_port(self):
+    """Check that we can perform LDAP user authentication using `TLS` connection protocol
+    with the server that uses custom port.
+    """
+    servers = {
+        "openldap4": {
+            "host": "openldap4",
+            "port": "6036",
+            "tls_require_cert": "never",
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        }
+    }
+    users = [
+        {"server": "openldap4", "username": "user4", "password": "user4", "login": True}
+    ]
+    login(servers, "openldap4", *users)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_StartTLS("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port("1.0")
+)
+def starttls_with_custom_port(self):
+    """Check that we can perform LDAP user authentication using `StartTLS` connection protocol
+    with the server that uses custom port.
+    """
+    servers = {
+        "openldap4": {
+            "host": "openldap4",
+            "port": "3089",
+            "enable_tls": "starttls",
+            "tls_require_cert": "never",
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        }
+    }
+    users = [
+        {"server": "openldap4", "username": "user4", "password": "user4", "login": True}
+    ]
+    login(servers, "openldap4", *users)
+
+def tls_connection(enable_tls, tls_require_cert):
+    """Try to login using LDAP user authentication over a TLS connection."""
+    servers = {
+        "openldap2": {
+            "host": "openldap2",
+            "enable_tls": enable_tls,
+            "tls_require_cert": tls_require_cert,
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        }
+    }
+    users = [
+        {"server": "openldap2", "username": "user2", "password": "user2", "login": True}
+    ]
+
+    requirements = []
+
+    if tls_require_cert == "never":
+        requirements = [RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Never("1.0")]
+    elif tls_require_cert == "allow":
+        requirements = [RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Allow("1.0")]
+    elif tls_require_cert == "try":
+        requirements = [RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Try("1.0")]
+    elif tls_require_cert == "demand":
+        requirements = [RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Demand("1.0")]
+
+    with Example(name=f"tls_require_cert='{tls_require_cert}'", requirements=requirements):
+        login(servers, "openldap2", *users)
+
+@TestScenario
+@Examples("enable_tls tls_require_cert", [
+    ("yes", "never"),
+    ("yes", "allow"),
+    ("yes", "try"),
+    ("yes", "demand")
+])
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_TLS("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_Yes("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port_Default("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSMinimumProtocolVersion_Default("1.0")
+)
+def tls(self):
+    """Check that we can perform LDAP user authentication using `TLS` connection protocol.
+    """
+    for example in self.examples:
+        tls_connection(*example)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_Default("1.0")
+)
+def tls_enable_tls_default_yes(self):
+    """Check that the default value for the `enable_tls` is set to `yes`."""
+    servers = {
+        "openldap2": {
+            "host": "openldap2",
+            "tls_require_cert": "never",
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        }
+    }
+    users = [
+        {"server": "openldap2", "username": "user2", "password": "user2", "login": True}
+    ]
+    login(servers, "openldap2", *users)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert_Options_Default("1.0")
+)
+def tls_require_cert_default_demand(self):
+    """Check that the default value for the `tls_require_cert` is set to `demand`."""
+    servers = {
+        "openldap2": {
+            "host": "openldap2",
+            "enable_tls": "yes",
+            "port": "636",
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        }
+    }
+    users = [
+        {"server": "openldap2", "username": "user2", "password": "user2", "login": True}
+    ]
+    login(servers, "openldap2", *users)
+
+@TestScenario
+@Examples("enable_tls tls_require_cert", [
+    ("starttls", "never"),
+    ("starttls", "allow"),
+    ("starttls", "try"),
+    ("starttls", "demand")
+])
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Protocol_StartTLS("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS_Options_StartTLS("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Port_Default("1.0")
+)
+def starttls(self):
+    """Check that we can perform LDAP user authentication using legacy `StartTLS` connection protocol.
+    """
+    for example in self.examples:
+        tls_connection(*example)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSCipherSuite("1.0")
+)
+def tls_cipher_suite(self):
+    """Check that `tls_cipher_suite` parameter can be used specify allowed cipher suites."""
+    servers = {
+        "openldap4": {
+            "host": "openldap4",
+            "port": "6036",
+            "tls_require_cert": "never",
+            "tls_cipher_suite": "SECURE256:+SECURE128:-VERS-TLS-ALL:+VERS-TLS1.2:-RSA:-DHE-DSS:-CAMELLIA-128-CBC:-CAMELLIA-256-CBC",
+            "tls_minimum_protocol_version": "tls1.2",
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        }
+    }
+    users = [
+        {"server": "openldap4", "username": "user4", "password": "user4", "login": True}
+    ]
+    login(servers, "openldap4", *users)
+
+@TestOutline(Scenario)
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSMinimumProtocolVersion("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSMinimumProtocolVersion_Values("1.0")
+)
+@Examples("version exitcode message", [
+    ("ssl2", None, None),
+    ("ssl3", None, None),
+    ("tls1.0", None, None),
+    ("tls1.1", None, None),
+    ("tls1.2", None, None)
+])
+def tls_minimum_protocol_version(self, version, exitcode, message):
+    """Check that `tls_minimum_protocol_version` parameter can be used specify
+    to specify the minimum protocol version of SSL/TLS."""
+
+    servers = {
+        "openldap4": {
+            "host": "openldap4",
+            "port": "6036",
+            "tls_require_cert": "never",
+            "tls_minimum_protocol_version": version,
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        }
+    }
+
+    users = [{
+        "server": "openldap4", "username": "user4", "password": "user4",
+        "login": True, "exitcode": int(exitcode) if exitcode is not None else None, "message": message
+    }]
+
+    login(servers,"openldap4", *users)
+
+@TestFeature
+@Name("connection protocols")
+def feature(self, node="clickhouse1"):
+    self.context.node = self.context.cluster.node(node)
+
+    for scenario in loads(current_module(), Scenario):
+        scenario()
diff --git a/tests/testflows/ldap/external_user_directory/tests/external_user_directory_config.py b/tests/testflows/ldap/external_user_directory/tests/external_user_directory_config.py
new file mode 100644
index 000000000000..b5677eba4b22
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/tests/external_user_directory_config.py
@@ -0,0 +1,293 @@
+from testflows.core import *
+
+from ldap.external_user_directory.tests.common import *
+from ldap.external_user_directory.requirements import *
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_LDAPUserDirectory_MoreThanOne("2.0")
+)
+def more_than_one_user_directory(self, timeout=20):
+    """Check when more than one LDAP user directory is
+    defined inside a configuration file.
+    """
+    message = "DB::Exception: Duplicate storage type 'ldap' at user_directories"
+    servers = {
+        "openldap1": {
+            "host": "openldap1", "port": "389", "enable_tls": "no",
+            "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        },
+        "openldap2": {
+            "host": "openldap2", "port": "636", "enable_tls": "yes",
+            "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com",
+            "tls_require_cert": "never"
+        }
+    }
+    users = [
+        {"server": "openldap1", "username": "user1", "password": "user1", "login": True},
+        {"server": "openldap2", "username": "user2", "password": "user2", "login": True}
+    ]
+    role = f"role_{getuid()}"
+    entries = [
+        (["openldap1"], [(role,)]),
+        (["openldap2"], [(role,)])
+    ]
+
+    with ldap_servers(servers):
+        with rbac_roles(role) as roles:
+            config = create_entries_ldap_external_user_directory_config_content(entries)
+
+            with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):
+                    with When(f"I login as {users[0]['username']} authenticated using openldap1"):
+                        current().context.node.query(f"SELECT 1",
+                        settings=[("user", users[0]["username"]), ("password", users[0]["password"])])
+
+                    with And(f"I login as {users[1]['username']} authenticated using openldap2"):
+                        current().context.node.query(f"SELECT 1",
+                        settings=[("user", users[1]["username"]), ("password", users[1]["password"])])
+
+
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_Empty("1.0")
+)
+def empty_server(self, timeout=20):
+    """Check that empty string in a `server` field is not allowed.
+    """
+    message = "DB::Exception: Empty 'server' field for LDAP user directory"
+    servers = {
+        "openldap1": {
+            "host": "openldap1", "port": "389", "enable_tls": "no",
+            "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        },
+    }
+
+    with ldap_servers(servers):
+        with rbac_roles(f"role_{getuid()}") as roles:
+            invalid_ldap_external_user_directory_config(server="", roles=roles, message=message, timeout=timeout)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_Missing("1.0")
+)
+def missing_server(self, timeout=20):
+    """Check that missing `server` field is not allowed.
+    """
+    message = "DB::Exception: Missing 'server' field for LDAP user directory"
+    servers = {
+        "openldap1": {
+            "host": "openldap1", "port": "389", "enable_tls": "no",
+            "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        },
+    }
+
+    with ldap_servers(servers):
+        with rbac_roles(f"role_{getuid()}") as roles:
+            invalid_ldap_external_user_directory_config(server=None, roles=roles, message=message, timeout=timeout)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_MoreThanOne("1.0")
+)
+def defined_twice_server(self, timeout=20):
+    """Check that when `server` field is defined twice that only the first
+    entry is used.
+    """
+    servers = {
+        "openldap1": {
+            "host": "openldap1", "port": "389", "enable_tls": "no",
+            "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        },
+    }
+    user = {"server": "openldap1", "username": "user1", "password": "user1", "login": True}
+
+    role = f"role_{getuid()}"
+    entries = [
+        (["openldap1", "openldap2"], [(role,)])
+    ]
+
+    with ldap_servers(servers):
+        with rbac_roles(role) as roles:
+            config = create_entries_ldap_external_user_directory_config_content(entries)
+            with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):
+                with When(f"I login as {user['username']} and execute query"):
+                    current().context.node.query("SELECT 1",
+                    settings=[("user", user["username"]), ("password", user["password"])])
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server_Invalid("1.0")
+)
+def invalid_server(self, timeout=20):
+    """Check when `server` field value is invalid.
+    """
+    servers = {
+        "openldap1": {
+            "host": "openldap1", "port": "389", "enable_tls": "no",
+            "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        },
+    }
+    user = {"server": "openldap1", "username": "user1", "password": "user1", "login": True}
+    role = f"role_{getuid()}"
+
+    entries = [
+        (["openldap2"], [(role,)])
+    ]
+
+    with ldap_servers(servers):
+        with rbac_roles(role) as roles:
+            config = create_entries_ldap_external_user_directory_config_content(entries)
+            with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):
+                with When(f"I login as {user['username']} and execute query"):
+                    current().context.node.query("SELECT 1",
+                    settings=[("user", user["username"]), ("password", user["password"])],
+                    exitcode=4, message="DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name.")
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_Empty("1.0")
+)
+def empty_roles(self, timeout=20):
+    """Check when `roles` parameter is empty then user can't read any tables.
+    """
+    message = "DB::Exception: user1: Not enough privileges."
+    exitcode = 241
+    servers = {
+        "openldap1": {
+            "host": "openldap1", "port": "389", "enable_tls": "no",
+            "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        },
+    }
+    user = {"server": "openldap1", "username": "user1", "password": "user1"}
+
+    entries = [
+        (["openldap1"], [[]])
+    ]
+
+    with ldap_servers(servers):
+        with table(f"table_{getuid()}", "CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()") as table_name:
+            config = create_entries_ldap_external_user_directory_config_content(entries)
+            with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):
+                with When(f"I login as {user['username']} and execute query"):
+                    current().context.node.query(f"SELECT * FROM {table_name} LIMIT 1",
+                    settings=[("user", user["username"]), ("password", user["password"])],
+                    exitcode=exitcode, message=message)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_MoreThanOne("1.0")
+)
+def defined_twice_roles(self, timeout=20):
+    """Check that when `roles` is defined twice then only the first entry is used.
+    """
+    node = self.context.node
+
+    create_statement = "CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()"
+    servers = {
+        "openldap1": {
+            "host": "openldap1", "port": "389", "enable_tls": "no",
+            "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        },
+    }
+    user = {"server": "openldap1", "username": "user1", "password": "user1", "login": True}
+    roles = [f"role0_{getuid()}", f"role1_{getuid()}"]
+    entries = [
+        (["openldap1"], [[roles[0]],[roles[1]]])
+    ]
+
+    with ldap_servers(servers):
+        with rbac_roles(*roles):
+            with table(f"table0_{getuid()}", create_statement) as table0_name, \
+                    table(f"table1_{getuid()}", create_statement) as table1_name:
+
+                with Given("I grant select privilege for the first table to the first role"):
+                    node.query(f"GRANT SELECT ON {table0_name} TO {roles[0]}")
+
+                with And("I grant select privilege for the second table to the second role"):
+                    node.query(f"GRANT SELECT ON {table1_name} TO {roles[1]}")
+
+                config = create_entries_ldap_external_user_directory_config_content(entries)
+
+                with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):
+                    with When(f"I login as {user['username']} and try to read from the first table"):
+                        current().context.node.query(f"SELECT * FROM {table0_name} LIMIT 1",
+                        settings=[("user", user["username"]), ("password", user["password"])])
+
+                    with And(f"I login as {user['username']} again and try to read from the second table"):
+                        current().context.node.query(f"SELECT * FROM {table0_name} LIMIT 1",
+                        settings=[("user", user["username"]), ("password", user["password"])])
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_Invalid("1.0")
+)
+def invalid_role_in_roles(self, timeout=20):
+    """Check that an error is returned when LDAP users try to authenticate
+    if an invalid role is specified inside the `roles` section.
+    """
+    exitcode = 4
+    message = "DB::Exception: user1: Authentication failed"
+
+    servers = {
+        "openldap1": {
+            "host": "openldap1", "port": "389", "enable_tls": "no",
+            "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        },
+    }
+    user = {"server": "openldap1", "username": "user1", "password": "user1"}
+
+    with ldap_servers(servers):
+        with ldap_external_user_directory("openldap1", roles=["foo"], restart=True):
+            with When(f"I login as {user['username']} and execute query"):
+                current().context.node.query("SELECT 1",
+                settings=[("user", user["username"]), ("password", user["password"])],
+                exitcode=exitcode, message=message)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles_Missing("1.0")
+)
+def missing_roles(self, timeout=20):
+    """Check that when the `roles` are missing then
+    LDAP users can still login but can't read from any table.
+    """
+    message = "DB::Exception: user1: Not enough privileges."
+    exitcode = 241
+    servers = {
+        "openldap1": {
+            "host": "openldap1", "port": "389", "enable_tls": "no",
+            "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        },
+    }
+    user = {"server": "openldap1", "username": "user1", "password": "user1"}
+    entries = [
+        (["openldap1"], None)
+    ]
+
+    with ldap_servers(servers):
+        with table(f"table_{getuid()}", "CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()") as table_name:
+
+            config = create_entries_ldap_external_user_directory_config_content(entries)
+
+            with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):
+                with When(f"I login as {user['username']} and execute query"):
+                    current().context.node.query(f"SELECT * FROM {table_name} LIMIT 1",
+                    settings=[("user", user["username"]), ("password", user["password"])],
+                    exitcode=exitcode, message=message)
+
+@TestFeature
+@Name("external user directory config")
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Syntax("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Server("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_LDAPUserDirectory("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Definition("1.0")
+)
+def feature(self, node="clickhouse1"):
+    """Check LDAP external user directory configuration.
+    """
+    self.context.node = self.context.cluster.node(node)
+
+    for scenario in loads(current_module(), Scenario):
+        scenario()
diff --git a/tests/testflows/ldap/external_user_directory/tests/restart.py b/tests/testflows/ldap/external_user_directory/tests/restart.py
new file mode 100644
index 000000000000..9b688909cb2e
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/tests/restart.py
@@ -0,0 +1,300 @@
+import random
+
+from multiprocessing.dummy import Pool
+from testflows.core import *
+from testflows.asserts import error
+
+from ldap.external_user_directory.tests.common import *
+from ldap.external_user_directory.requirements import *
+
+@TestScenario
+def one_external_user_directory(self, node="clickhouse1"):
+    """Check that we can restart ClickHouse server when one
+    LDAP external user directory is configured.
+    """
+    self.context.node = self.context.cluster.node(node)
+
+    servers = {
+        "openldap1": {
+            "host": "openldap1",
+            "port": "389",
+            "enable_tls": "no",
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        },
+    }
+
+    with ldap_servers(servers):
+        with rbac_roles("ldap_role") as roles:
+            with ldap_external_user_directory(server="openldap1", roles=roles, restart=True):
+                with Given("I login and execute query"):
+                    login_and_execute_query(username="user1", password="user1")
+
+                with When("I then restart the server"):
+                    restart()
+
+                with Then("I should be able to login and execute query after restart"):
+                    login_and_execute_query(username="user1", password="user1")
+
+@TestScenario
+def multiple_external_user_directories(self, node="clickhouse1"):
+    """Check that we can restart ClickHouse server when two
+    LDAP external user directory are configured.
+    """
+    self.context.node = self.context.cluster.node(node)
+
+    servers = {
+        "openldap1": {
+            "host": "openldap1",
+            "port": "389",
+            "enable_tls": "no",
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        },
+        "openldap2": {
+            "host": "openldap2",
+            "port": "636",
+            "enable_tls": "yes",
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com",
+            "tls_require_cert": "never",
+        }
+    }
+
+    with Given("I have two LDAP servers"):
+        entries = [
+            (["openldap1"], []),
+            (["openldap2"], [])
+        ]
+
+    with And("I create config file to define LDAP external user directory for each LDAP server"):
+        config = create_entries_ldap_external_user_directory_config_content(entries)
+
+    with ldap_servers(servers):
+        with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):
+            with Given("I login and execute query using a user defined in the first LDAP server"):
+                login_and_execute_query(username="user1", password="user1")
+
+            with And("I login and execute query using a user defined the second LDAP server"):
+                login_and_execute_query(username="user2", password="user2")
+
+            with When("I restart the server"):
+                restart()
+
+            with Then("I should be able to login and execute query again using a user defined in the first LDAP server"):
+                login_and_execute_query(username="user1", password="user1")
+
+            with And("I should be able to login and execute query again using a user defined in the second LDAP server"):
+                login_and_execute_query(username="user2", password="user2")
+
+@TestScenario
+def dynamically_added_users(self, node="clickhouse1", count=10):
+    """Check that we can restart ClickHouse server when one
+    LDAP external user directory is configured and the login
+    with an LDAP users that are dynamically added after restart.
+    """
+    self.context.node = self.context.cluster.node(node)
+
+    servers = {
+        "openldap1": {
+            "host": "openldap1",
+            "port": "389",
+            "enable_tls": "no",
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        },
+    }
+
+    with ldap_servers(servers):
+        with rbac_roles("ldap_role") as roles:
+            with ldap_external_user_directory(server="openldap1", roles=roles, restart=True):
+                with Given("I login and execute query using existing LDAP user"):
+                    login_and_execute_query(username="user1", password="user1")
+
+                with When("I then restart the server"):
+                    restart()
+
+                with Then("after restart I should be able to login and execute query using existing LDAP user"):
+                    login_and_execute_query(username="user1", password="user1")
+
+                dynamic_users = []
+                with When("I define dynamically added LDAP users"):
+                    for i in range(count):
+                        dynamic_users.append(
+                            {"cn": f"dynamic_user{i}", "userpassword": randomword(20)}
+                        )
+
+                with ldap_users(*dynamic_users, node=self.context.cluster.node("openldap1")):
+                    with Then("I should be able to login and execute queries using dynamically added users"):
+                        for dynamic_user in dynamic_users:
+                            with When(f"using dynamically added user {dynamic_user['cn']}"):
+                                login_and_execute_query(username=dynamic_user["cn"], password=dynamic_user["userpassword"])
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Restart_Server_ParallelLogins("1.0")
+)
+def parallel_login(self, server=None, user_count=10, timeout=200):
+    """Check that login of valid and invalid users works in parallel
+    using local users defined using RBAC and LDAP users authenticated using
+    multiple LDAP external user directories when server is restarted
+    in the middle of parallel login attempts. After server is restarted
+    makes sure that parallel logins work as expected.
+    """
+    servers = {
+        "openldap1": {
+            "host": "openldap1",
+            "port": "389",
+            "enable_tls": "no",
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        },
+        "openldap2": {
+            "host": "openldap2",
+            "port": "636",
+            "enable_tls": "yes",
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com",
+            "tls_require_cert": "never",
+        }
+    }
+
+    with Given("I have two LDAP servers"):
+        entries = [
+            (["openldap1"], []),
+            (["openldap2"], [])
+        ]
+
+    with And("I define a group of users to be created on each LDAP server"):
+        user_groups = {
+            "openldap1_users": [{"cn": f"openldap1_parallel_user{i}", "userpassword": randomword(20)} for i in
+                                range(user_count)],
+            "openldap2_users": [{"cn": f"openldap2_parallel_user{i}", "userpassword": randomword(20)} for i in
+                                range(user_count)],
+            "local_users": [{"cn": f"local_parallel_user{i}", "userpassword": randomword(20)} for i in
+                            range(user_count)]
+        }
+
+    @TestStep(When)
+    @Name("I login as {username} and execute query")
+    def login_and_execute_query_during_restart(self, username, password, exitcode, message, steps=True, timeout=60):
+        """Execute a query and ignore exitcode and message as
+        during restart exit codes and messages vary based on the state
+        of the restarted container and the ClickHouse server
+        and there are too many cases and complete list is not fully known
+        therefore trying to list all possible cases produces random fails.
+        """
+        r = self.context.cluster.command(None, f"{self.context.cluster.docker_compose} exec {self.context.node.name} " +
+           f"clickhouse client -q \"SELECT 1\" --user {username} --password {password}", steps=steps, timeout=timeout)
+
+        return r
+
+    @TestStep(When)
+    @Name("I login as {username} and execute query")
+    def login_and_execute_query(self, username, password, exitcode=None, message=None, steps=True, timeout=60):
+        self.context.node.query("SELECT 1",
+            settings=[("user", username), ("password", password)],
+            exitcode=exitcode or 0,
+            message=message, steps=steps, timeout=timeout)
+
+    def login_with_valid_username_and_password(users, i, iterations=10, during_restart=False):
+        """Login with valid username and password.
+        """
+        query = login_and_execute_query
+        if during_restart:
+            query = login_and_execute_query_during_restart
+
+        with When(f"valid users try to login #{i}"):
+            for i in range(iterations):
+                random_user = users[random.randint(0, len(users) - 1)]
+
+                query(username=random_user["cn"], password=random_user["userpassword"],
+                    exitcode=0, message="1", steps=False)
+
+    def login_with_valid_username_and_invalid_password(users, i, iterations=10, during_restart=False):
+        """Login with valid username and invalid password.
+        """
+        query = login_and_execute_query
+        if during_restart:
+            query = login_and_execute_query_during_restart
+
+        with When(f"users try to login with valid username and invalid password #{i}"):
+            for i in range(iterations):
+                random_user = users[random.randint(0, len(users) - 1)]
+
+                query(username=random_user["cn"],
+                    password=(random_user["userpassword"] + randomword(1)),
+                    exitcode=4,
+                    message=f"DB::Exception: {random_user['cn']}: Authentication failed: password is incorrect or there is no user with such name",
+                    steps=False)
+
+    def login_with_invalid_username_and_valid_password(users, i, iterations=10, during_restart=False):
+        """Login with invalid username and valid password.
+        """
+        query = login_and_execute_query
+        if during_restart:
+            query = login_and_execute_query_during_restart
+
+        with When(f"users try to login with invalid username and valid password #{i}"):
+            for i in range(iterations):
+                random_user = dict(users[random.randint(0, len(users) - 1)])
+                random_user["cn"] += randomword(1)
+
+                query(username=random_user["cn"],
+                    password=random_user["userpassword"],
+                    exitcode=4,
+                    message=f"DB::Exception: {random_user['cn']}: Authentication failed: password is incorrect or there is no user with such name",
+                    steps=False)
+
+    with And("I have a list of checks that I want to run for each user group"):
+        checks = [
+            login_with_valid_username_and_password,
+            login_with_valid_username_and_invalid_password,
+            login_with_invalid_username_and_valid_password
+        ]
+
+    with And("I create config file to define LDAP external user directory for each LDAP server"):
+        config = create_entries_ldap_external_user_directory_config_content(entries)
+
+    with ldap_servers(servers):
+        with ldap_external_user_directory(server=None, roles=None, restart=True, config=config):
+            with ldap_users(*user_groups["openldap1_users"], node=self.context.cluster.node("openldap1")):
+                with ldap_users(*user_groups["openldap2_users"], node=self.context.cluster.node("openldap2")):
+                    with rbac_users(*user_groups["local_users"]):
+                        tasks = []
+                        try:
+                            with When("I restart the server during parallel login of users in each group"):
+                                p = Pool(10)
+                                for users in user_groups.values():
+                                    for check in checks:
+                                        tasks.append(p.apply_async(check, (users, 0, 25, True)))
+
+                                tasks.append(p.apply_async(restart))
+                        finally:
+                            with Then("logins during restart should work"):
+                                join(tasks, timeout)
+
+                        tasks = []
+                        try:
+                            with When("I perform parallel login of users in each group after restart"):
+                                p = Pool(10)
+                                for users in user_groups.values():
+                                    for check in checks:
+                                        tasks.append(p.apply_async(check, (users, 0, 10, False)))
+                        finally:
+                            with Then("logins after restart should work"):
+                                join(tasks, timeout)
+
+@TestOutline(Feature)
+@Name("restart")
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Restart_Server("1.0")
+)
+def feature(self, servers=None, server=None, node="clickhouse1"):
+    """Check that we can restart ClickHouse server
+    when one or more external user directories are configured.
+    """
+    self.context.node = self.context.cluster.node(node)
+
+    for scenario in loads(current_module(), Scenario):
+        Scenario(test=scenario, flags=TE)()
diff --git a/tests/testflows/ldap/external_user_directory/tests/roles.py b/tests/testflows/ldap/external_user_directory/tests/roles.py
new file mode 100644
index 000000000000..8a6c6f465d17
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/tests/roles.py
@@ -0,0 +1,314 @@
+from testflows.core import *
+
+from ldap.external_user_directory.tests.common import *
+from ldap.external_user_directory.requirements import *
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Role_New("1.0")
+)
+def new_role(self, server, timeout=20):
+    """Check that new roles can't be assigned to any LDAP user
+    authenticated using external user directory.
+    """
+    node = self.context.node
+    uid = getuid()
+
+    self.context.ldap_node = self.context.cluster.node(server)
+
+    users = [
+        {"username": f"user0_{uid}", "password": "user0_password"},
+        {"username": f"user1_{uid}", "password": "user1_password"}
+    ]
+
+    with rbac_roles(f"role0_{uid}", f"role1_{uid}") as roles:
+        with table(f"table_{getuid()}", "CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()") as table_name:
+            with ldap_external_user_directory(server=server, roles=roles, restart=True):
+                with ldap_users(*[{"cn": user["username"], "userpassword": user["password"]} for user in users]):
+
+                    with When(f"I login and execute query simple query to cache the LDAP user"):
+                        node.query(f"SELECT 1",
+                            settings=[("user", users[0]["username"]), ("password", users[0]["password"])])
+
+                    with rbac_roles(f"new_role0_{uid}") as new_roles:
+
+                        message = "DB::Exception: Cannot update user `{user}` in ldap because this storage is readonly"
+                        exitcode = 239
+
+                        with And("I try to grant new role to the cached LDAP user"):
+                            node.query(f"GRANT {new_roles[0]} TO {users[0]['username']}",
+                                exitcode=exitcode, message=message.format(user=users[0]["username"]))
+
+                        message = "DB::Exception: There is no role `{user}` in user directories"
+                        exitcode = 255
+
+                        with And("I try to grant new role to the non-cached LDAP user"):
+                            node.query(f"GRANT {new_roles[0]} TO {users[1]['username']}",
+                                exitcode=exitcode, message=message.format(user=users[1]["username"]))
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Role_NewPrivilege("1.0")
+)
+def add_privilege(self, server, timeout=20):
+    """Check that we can add privilege to a role used
+    in the external user directory configuration.
+    """
+    node = self.context.node
+    uid = getuid()
+    message = "DB::Exception: {user}: Not enough privileges."
+    exitcode = 241
+
+    self.context.ldap_node = self.context.cluster.node(server)
+
+    users = [
+        {"username": f"user0_{uid}", "password": "user0_password"},
+        {"username": f"user1_{uid}", "password": "user1_password"}
+    ]
+
+    with rbac_roles(f"role0_{uid}", f"role1_{uid}") as roles:
+        with table(f"table_{getuid()}", "CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()") as table_name:
+            with ldap_external_user_directory(server=server, roles=roles, restart=True):
+                with ldap_users(*[{"cn": user["username"], "userpassword": user["password"]} for user in users]):
+
+                    with When(f"I login and execute query that requires no privileges"):
+                        node.query(f"SELECT 1",
+                            settings=[("user", users[0]["username"]), ("password", users[0]["password"])])
+
+                    with And(f"I login and try to read from the table without having select privilege"):
+                        node.query(f"SELECT * FROM {table_name} LIMIT 1",
+                            settings=[("user", users[0]["username"]), ("password", users[0]["password"])],
+                            exitcode=exitcode, message=message.format(user=users[0]["username"]))
+
+                    with When(f"I grant select privilege to one of the two roles assigned to LDAP users"):
+                        node.query(f"GRANT SELECT ON {table_name} TO {roles[0]}")
+
+                    with And(f"I login again and expect that cached LDAP user can successfully read from the table"):
+                        node.query(f"SELECT * FROM {table_name} LIMIT 1",
+                            settings=[("user", users[0]["username"]), ("password", users[0]["password"])])
+
+                    with And(f"I login again and expect that non-cached LDAP user can successfully read from the table"):
+                        node.query(f"SELECT * FROM {table_name} LIMIT 1",
+                            settings=[("user", users[1]["username"]), ("password", users[1]["password"])])
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Role_RemovedPrivilege("1.0")
+)
+def remove_privilege(self, server, timeout=20):
+    """Check that we can remove privilege from a role used
+    in the external user directory configuration.
+    """
+    node = self.context.node
+    uid = getuid()
+    message = "DB::Exception: {user}: Not enough privileges."
+    exitcode = 241
+
+    self.context.ldap_node = self.context.cluster.node(server)
+
+    users = [
+        {"username": f"user0_{uid}", "password": "user0_password"},
+        {"username": f"user1_{uid}", "password": "user1_password"}
+    ]
+
+    with rbac_roles(f"role0_{uid}", f"role1_{uid}") as roles:
+        with table(f"table_{getuid()}", "CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()") as table_name:
+
+            with When(f"I grant select privilege to one of the two roles assigned to LDAP users"):
+                node.query(f"GRANT SELECT ON {table_name} TO {roles[0]}")
+
+            with ldap_external_user_directory(server=server, roles=roles, restart=True):
+                with ldap_users(*[{"cn": user["username"], "userpassword": user["password"]} for user in users]):
+
+                    with When(f"I login then LDAP user should be able to read from the table"):
+                        node.query(f"SELECT * FROM {table_name} LIMIT 1",
+                            settings=[("user", users[0]["username"]), ("password", users[0]["password"])])
+
+                    with When(f"I revoke select privilege from all the roles assigned to LDAP users"):
+                        node.query(f"REVOKE SELECT ON {table_name} FROM {roles[0]}")
+
+                    with When(f"I login again then cached LDAP user should not be able to read from the table"):
+                        node.query(f"SELECT * FROM {table_name} LIMIT 1",
+                            settings=[("user", users[0]["username"]), ("password", users[0]["password"])],
+                            exitcode=exitcode, message=message.format(user=users[0]["username"]))
+
+                    with When(f"I login with non-cached LDAP user then the user should also not be able to read from the table"):
+                        node.query(f"SELECT * FROM {table_name} LIMIT 1",
+                            settings=[("user", users[1]["username"]), ("password", users[1]["password"])],
+                            exitcode=exitcode, message=message.format(user=users[1]["username"]))
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Role_Removed("1.0")
+)
+def remove_role(self, server, timeout=20):
+    """Check that when a role used in the external user directory configuration
+    is dynamically removed then any non-cached LDAP users should not be authenticated using
+    LDAP external user directory.
+    """
+    node = self.context.node
+    uid = getuid()
+    exitcode = 4
+    message = "DB::Exception: {user}: Authentication failed: password is incorrect or there is no user with such name"
+
+    self.context.ldap_node = self.context.cluster.node(server)
+
+    users = [
+        {"username": f"user0_{uid}", "password": "user0_password"},
+        {"username": f"user1_{uid}", "password": "user1_password"}
+    ]
+
+    with rbac_roles(f"role0_{uid}", f"role1_{uid}") as roles:
+            with ldap_external_user_directory(server=server, roles=roles, restart=True):
+                with ldap_users(*[{"cn": user["username"], "userpassword": user["password"]} for user in users]):
+                    with When(f"I login and execute query that requires no privileges"):
+                        node.query(f"SELECT 1",
+                            settings=[("user", users[0]["username"]), ("password", users[0]["password"])])
+
+                    with And("I remove one of the roles"):
+                        node.query(f"DROP ROLE {roles[1]}")
+
+                    with And(f"I try to login using cached LDAP user"):
+                        node.query(f"SELECT 1",
+                            settings=[("user", users[0]["username"]), ("password", users[0]["password"])])
+
+                    with And(f"I try to login again using non-cached LDAP user"):
+                        node.query(f"SELECT 1",
+                            settings=[("user", users[1]["username"]), ("password", users[1]["password"])],
+                            exitcode=exitcode, message=message.format(user=users[1]["username"]))
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Role_Removed_Privileges("1.0")
+)
+def remove_privilege_by_removing_role(self, server, timeout=20):
+    """Check that when the role used in the external user directory configuration
+    is dynamically removed then privileges are removed from all
+    LDAP users that are authenticated using external user directory.
+    """
+    node = self.context.node
+    message = "DB::Exception: {user}: Not enough privileges."
+    exitcode = 241
+    uid = getuid()
+
+    self.context.ldap_node = self.context.cluster.node(server)
+
+    users = [
+        {"username": f"user0_{uid}", "password": "user0_password"},
+        {"username": f"user1_{uid}", "password": "user1_password"}
+    ]
+
+    with rbac_roles(f"role0_{uid}", f"role1_{uid}") as roles:
+            with table(f"table_{getuid()}", "CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()") as table_name:
+
+                with When(f"I grant select privilege to one of the two roles assigned to LDAP users"):
+                    node.query(f"GRANT SELECT ON {table_name} TO {roles[0]}")
+
+                with ldap_external_user_directory(server=server, roles=roles, restart=True):
+                    with ldap_users(*[{"cn": user["username"], "userpassword": user["password"]} for user in users]):
+
+                        with When(f"I login and expect that LDAP user can read from the table"):
+                            node.query(f"SELECT * FROM {table_name} LIMIT 1",
+                                settings=[("user", users[0]["username"]), ("password", users[0]["password"])])
+
+                        with And("I remove the role that grants the privilege"):
+                            node.query(f"DROP ROLE {roles[0]}")
+
+                        with And(f"I try to relogin and expect that cached LDAP user can login "
+                                "but does not have privilege that was provided by the removed role"):
+                            node.query(f"SELECT * FROM {table_name} LIMIT 1",
+                                settings=[("user", users[0]["username"]), ("password", users[0]["password"])],
+                                exitcode=exitcode, message=message.format(user=users[0]["username"]))
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Role_Readded_Privileges("1.0")
+)
+def readd_privilege_by_readding_role(self, server, timeout=20):
+    """Check that when the role used in the external user directory configuration
+    is dynamically removed then all the privileges are removed from any
+    LDAP users authenticated using external user directory but when the role is re-added
+    then privileges are restored and non-cached users can login again.
+    """
+    node = self.context.node
+    uid = getuid()
+
+    self.context.ldap_node = self.context.cluster.node(server)
+
+    users = [
+        {"username": f"user0_{uid}", "password": "user0_password"},
+        {"username": f"user1_{uid}", "password": "user1_password"}
+    ]
+
+    with rbac_roles(f"role0_{uid}", f"role1_{uid}") as roles:
+            with table(f"table_{getuid()}", "CREATE TABLE {name} (d DATE, s String, i UInt8) ENGINE = Memory()") as table_name:
+
+                with When(f"I grant select privilege to one of the two roles assigned to LDAP users"):
+                    node.query(f"GRANT SELECT ON {table_name} TO {roles[0]}")
+
+                with ldap_external_user_directory(server=server, roles=roles, restart=True):
+                    with ldap_users(*[{"cn": user["username"], "userpassword": user["password"]} for user in users]):
+
+                        with When(f"I login and expect that LDAP user can read from the table"):
+                            node.query(f"SELECT * FROM {table_name} LIMIT 1",
+                                settings=[("user", users[0]["username"]), ("password", users[0]["password"])])
+
+                        with And("I remove the role that grants the privilege"):
+                            node.query(f"DROP ROLE {roles[0]}")
+
+                        message = "DB::Exception: {user}: Not enough privileges."
+                        exitcode = 241
+
+                        with And(f"I try to relogin and expect that cached LDAP user can login "
+                                "but does not have privilege that was provided by the removed role"):
+                            node.query(f"SELECT * FROM {table_name} LIMIT 1",
+                                settings=[("user", users[0]["username"]), ("password", users[0]["password"])],
+                                exitcode=exitcode, message=message.format(user=users[0]["username"]))
+
+                        message = "DB::Exception: {user}: Authentication failed: password is incorrect or there is no user with such name"
+                        exitcode = 4
+
+                        with And(f"I try to login using non-cached LDAP user and expect it to fail"):
+                            node.query(f"SELECT 1",
+                                settings=[("user", users[1]["username"]), ("password", users[1]["password"])],
+                                exitcode=exitcode, message=message.format(user=users[1]["username"]))
+
+                        with When("I re-add the role"):
+                            node.query(f"CREATE ROLE {roles[0]}")
+
+                        with And(f"I grant select privilege to the re-added role"):
+                            node.query(f"GRANT SELECT ON {table_name} TO {roles[0]}")
+
+                        with And(f"I try to relogin and expect that cached LDAP user can login "
+                                "and again has the privilege that is provided by the role"):
+                            node.query(f"SELECT * FROM {table_name} LIMIT 1",
+                                settings=[("user", users[0]["username"]), ("password", users[0]["password"])])
+
+                        with And("I try to login using non-cached LDAP expect it to work "
+                                "with user also having privilege provided by the role"):
+                            node.query(f"SELECT * FROM {table_name} LIMIT 1",
+                                settings=[("user", users[1]["username"]), ("password", users[1]["password"])])
+
+@TestFeature
+@Name("roles")
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Users_Parameters_Roles("1.0")
+)
+def feature(self, node="clickhouse1"):
+    """Check that all the users that are authenticated using
+    LDAP external user directory are assigned the roles specified
+    in the configuration of the LDAP external user directory.
+    """
+    self.context.node = self.context.cluster.node(node)
+
+    servers = {
+        "openldap1": {
+            "host": "openldap1", "port": "389", "enable_tls": "no",
+            "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        },
+    }
+    user = {"server": "openldap1", "username": "user1", "password": "user1"}
+
+    with ldap_servers(servers):
+        for scenario in loads(current_module(), Scenario):
+            scenario(server="openldap1")
diff --git a/tests/testflows/ldap/external_user_directory/tests/server_config.py b/tests/testflows/ldap/external_user_directory/tests/server_config.py
new file mode 100644
index 000000000000..5df343b53dfa
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/tests/server_config.py
@@ -0,0 +1,286 @@
+import time
+
+from testflows.core import *
+
+from ldap.external_user_directory.tests.common import *
+from ldap.external_user_directory.requirements import *
+
+from ldap.authentication.tests.common import invalid_server_config
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Name("1.0")
+)
+def empty_server_name(self, timeout=60):
+    """Check that empty string as a server name is not allowed.
+    """
+    servers = {"": {"host": "foo", "port": "389", "enable_tls": "no",
+            "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+    }}
+    invalid_server_config(servers, timeout=timeout)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Connection_Authentication_UnreachableServer("1.0")
+)
+def invalid_host(self):
+    """Check that server returns an error when LDAP server
+    host name is invalid.
+    """
+    servers = {"foo": {"host": "foo", "port": "389", "enable_tls": "no"}}
+    users = [{
+        "server": "foo", "username": "user1", "password": "user1", "login": True,
+        "exitcode": 4, "message": "DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name."
+    }]
+    login(servers, "foo", *users)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Host("1.0")
+)
+def empty_host(self, tail=20, timeout=60):
+    """Check that server returns an error when LDAP server
+    host value is empty.
+    """
+    node = current().context.node
+    message = "DB::Exception: Empty 'host' entry"
+
+    servers = {"foo": {"host": "", "port": "389", "enable_tls": "no"}}
+
+    invalid_server_config(servers, message=message, tail=16, timeout=timeout)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Host("1.0")
+)
+def missing_host(self, tail=20, timeout=60):
+    """Check that server returns an error when LDAP server
+    host is missing.
+    """
+    node = current().context.node
+    message = "DB::Exception: Missing 'host' entry"
+
+    servers = {"foo": {"port": "389", "enable_tls": "no"}}
+    users = [{
+        "server": "foo", "username": "user1", "password": "user1", "login": True,
+        "exitcode": 36, "message": "DB::Exception: LDAP server 'foo' is not configured."
+    }]
+
+    with Given("I prepare the error log by writting empty lines into it"):
+        node.command("echo -e \"%s\" > /var/log/clickhouse-server/clickhouse-server.err.log" % ("-\
" * tail))
+
+    with ldap_servers(servers):
+        with Then("server shall fail to merge the new config"):
+            started = time.time()
+            command = f"tail -n {tail} /var/log/clickhouse-server/clickhouse-server.err.log | grep \"{message}\""
+            while time.time() - started < timeout:
+                exitcode = node.command(command, steps=False).exitcode
+                if exitcode == 0:
+                    break
+                time.sleep(1)
+            assert exitcode == 0, error()
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid("1.0"),
+)
+def invalid_port(self):
+    """Check that server returns an error when LDAP server
+    port is not valid.
+    """
+    servers = {"openldap1": {"host": "openldap1", "port": "3890", "enable_tls": "no"}}
+    users = [{
+        "server": "openldap1", "username": "user1", "password": "user1", "login": True,
+        "exitcode": 4, "message": "DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name."
+    }]
+    login(servers, "openldap1", *users)
+
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Prefix("1.0")
+)
+def invalid_auth_dn_prefix(self):
+    """Check that server returns an error when LDAP server definition
+    has invalid auth_dn_prefix.
+    """
+    servers = {"openldap1": {"host": "openldap1", "port": "389", "enable_tls": "no",
+        "auth_dn_prefix": "foo=", "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+    }}
+    users = [{
+        "server": "openldap1", "username": "user1", "password": "user1", "login": True,
+        "exitcode": 4, "message": "DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name."
+    }]
+    login(servers, "openldap1", *users)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Suffix("1.0")
+)
+def invalid_auth_dn_suffix(self):
+    """Check that server returns an error when LDAP server definition
+    has invalid auth_dn_suffix.
+    """
+    servers = {"openldap1": {"host": "openldap1", "port": "389", "enable_tls": "no",
+        "auth_dn_prefix": "cn=", "auth_dn_suffix": ",foo=users,dc=company,dc=com"
+    }}
+    users = [{
+        "server": "openldap1", "username": "user1", "password": "user1", "login": True,
+        "exitcode": 4, "message": "DB::Exception: user1: Authentication failed: password is incorrect or there is no user with such name."
+    }]
+    login(servers, "openldap1", *users)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_EnableTLS("1.0")
+)
+def invalid_enable_tls_value(self, timeout=60):
+    """Check that server returns an error when enable_tls
+    option has invalid value.
+    """
+    message = "Syntax error: Cannot convert to boolean: foo"
+    servers = {"openldap1": {"host": "openldap1", "port": "389", "enable_tls": "foo",
+        "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+    }}
+    invalid_server_config(servers, message=message, tail=17, timeout=timeout)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSRequireCert("1.0")
+)
+def invalid_tls_require_cert_value(self):
+    """Check that server returns an error when tls_require_cert
+    option has invalid value.
+    """
+    servers = {"openldap2": {
+        "host": "openldap2", "port": "636", "enable_tls": "yes",
+        "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com",
+        "tls_require_cert": "foo",
+        "ca_cert_dir": "/container/service/slapd/assets/certs/",
+        "ca_cert_file": "/container/service/slapd/assets/certs/ca.crt"
+    }}
+    users = [{
+        "server": "openldap2", "username": "user2", "password": "user2", "login": True,
+        "exitcode": 4, "message": "DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name."
+    }]
+    login(servers, "openldap2", *users)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSCACertDir("1.0")
+)
+def empty_ca_cert_dir(self):
+    """Check that server returns an error when ca_cert_dir is empty.
+    """
+    servers = {"openldap2": {"host": "openldap2", "port": "636", "enable_tls": "yes",
+        "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com",
+        "tls_require_cert": "demand",
+        "ca_cert_dir": "",
+        "ca_cert_file": "/container/service/slapd/assets/certs/ca.crt"
+    }}
+    users = [{
+        "server": "openldap2", "username": "user2", "password": "user2", "login": True,
+        "exitcode": 4,
+        "message": "DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name"
+    }]
+    login(servers, "openldap2", *users)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Invalid("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_TLSCertFile("1.0")
+)
+def empty_ca_cert_file(self):
+    """Check that server returns an error when ca_cert_file is empty.
+    """
+    servers = {"openldap2": {"host": "openldap2", "port": "636", "enable_tls": "yes",
+        "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com",
+        "tls_require_cert": "demand",
+        "ca_cert_dir": "/container/service/slapd/assets/certs/",
+        "ca_cert_file": ""
+    }}
+    users = [{
+        "server": "openldap2", "username": "user2", "password": "user2", "login": True,
+        "exitcode": 4,
+        "message": "DB::Exception: user2: Authentication failed: password is incorrect or there is no user with such name."
+    }]
+    login(servers, "openldap2", *users)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Value("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Prefix("1.0"),
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_AuthDN_Suffix("1.0")
+)
+def auth_dn_value(self):
+    """Check that server configuration can properly define the `dn` value of the user."""
+    servers = {
+        "openldap1": {
+            "host": "openldap1", "port": "389", "enable_tls": "no",
+            "auth_dn_prefix": "cn=", "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        }}
+    user = {"server": "openldap1", "username": "user1", "password": "user1", "login": True}
+
+    login(servers, "openldap1", user)
+
+@TestScenario
+@Requirements(
+    RQ_SRS_009_LDAP_ExternalUserDirectory_Configuration_Server_Syntax("1.0")
+)
+def syntax(self):
+    """Check that server configuration with valid syntax can be loaded.
+    ```xml
+    <yandex>
+        <ldap_server>
+            <host>localhost</host>
+            <port>636</port>
+            <auth_dn_prefix>cn=</auth_dn_prefix>
+            <auth_dn_suffix>, ou=users, dc=example, dc=com</auth_dn_suffix>
+            <enable_tls>yes</enable_tls>
+            <tls_minimum_protocol_version>tls1.2</tls_minimum_protocol_version>
+            <tls_require_cert>demand</tls_require_cert>
+            <tls_cert_file>/path/to/tls_cert_file</tls_cert_file>
+            <tls_key_file>/path/to/tls_key_file</tls_key_file>
+            <tls_ca_cert_file>/path/to/tls_ca_cert_file</tls_ca_cert_file>
+            <tls_ca_cert_dir>/path/to/tls_ca_cert_dir</tls_ca_cert_dir>
+            <tls_cipher_suite>ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384</tls_cipher_suite>
+        </ldap_server>
+    </yandex>
+    ```
+    """
+    servers = {
+        "openldap2": {
+            "host": "openldap2",
+            "port": "389",
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com",
+            "enable_tls": "yes",
+            "tls_minimum_protocol_version": "tls1.2" ,
+            "tls_require_cert": "demand",
+            "tls_cert_file": "/container/service/slapd/assets/certs/ldap.crt",
+            "tls_key_file": "/container/service/slapd/assets/certs/ldap.key",
+            "tls_ca_cert_file": "/container/service/slapd/assets/certs/ca.crt",
+            "tls_ca_cert_dir": "/container/service/slapd/assets/certs/",
+            "tls_cipher_suite": "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:AES256-GCM-SHA384"
+        }
+    }
+    with ldap_servers(servers):
+        pass
+
+@TestFeature
+@Name("server config")
+def feature(self, node="clickhouse1"):
+    """Check LDAP server configuration.
+    """
+    self.context.node = self.context.cluster.node(node)
+    for scenario in loads(current_module(), Scenario):
+        scenario()
diff --git a/tests/testflows/ldap/external_user_directory/tests/simple.py b/tests/testflows/ldap/external_user_directory/tests/simple.py
new file mode 100644
index 000000000000..c48048833c72
--- /dev/null
+++ b/tests/testflows/ldap/external_user_directory/tests/simple.py
@@ -0,0 +1,24 @@
+from testflows.core import *
+from testflows.asserts import error
+
+from ldap.external_user_directory.tests.common import login
+
+@TestScenario
+@Name("simple")
+def scenario(self, node="clickhouse1"):
+    """Check that an LDAP external user directory can be used to authenticate a user.
+    """
+    self.context.node = self.context.cluster.node(node)
+    servers = {
+        "openldap1": {
+            "host": "openldap1",
+            "port": "389",
+            "enable_tls": "no",
+            "auth_dn_prefix": "cn=",
+            "auth_dn_suffix": ",ou=users,dc=company,dc=com"
+        },
+    }
+    users = [
+        {"server": "openldap1", "username": "user1", "password": "user1", "login": True},
+    ]
+    login(servers, "openldap1", *users)
diff --git a/tests/testflows/ldap/regression.py b/tests/testflows/ldap/regression.py
index 567807fc0a84..0e9d06cf84a8 100755
--- a/tests/testflows/ldap/regression.py
+++ b/tests/testflows/ldap/regression.py
@@ -2,53 +2,20 @@
 import sys
 from testflows.core import *
 
-append_path(sys.path, "..") 
+append_path(sys.path, "..")
 
-from helpers.cluster import Cluster
 from helpers.argparser import argparser
-from ldap.requirements import *
 
-# Cross-outs of known fails
-xfails = {
-    "connection protocols/tls/tls_require_cert='try'":
-     [(Fail, "can't be tested with self-signed certificates")],
-    "connection protocols/tls/tls_require_cert='demand'":
-     [(Fail, "can't be tested with self-signed certificates")],
-    "connection protocols/starttls/tls_require_cert='try'":
-     [(Fail, "can't be tested with self-signed certificates")],
-    "connection protocols/starttls/tls_require_cert='demand'":
-     [(Fail, "can't be tested with self-signed certificates")],
-    "connection protocols/tls require cert default demand":
-     [(Fail, "can't be tested with self-signed certificates")],
-    "connection protocols/starttls with custom port":
-     [(Fail, "it seems that starttls is not enabled by default on custom plain-text ports in LDAP server")],
-    "connection protocols/tls cipher suite":
-     [(Fail, "can't get it to work")]
-}
-
-@TestFeature
-@Name("ldap authentication")
+@TestModule
+@Name("ldap")
 @ArgumentParser(argparser)
-@Requirements(
-    RQ_SRS_007_LDAP_Authentication("1.0")
-)
-@XFails(xfails)
 def regression(self, local, clickhouse_binary_path):
-    """ClickHouse integration with LDAP regression module.
+    """ClickHouse LDAP integration regression module.
     """
-    nodes = {
-        "clickhouse": ("clickhouse1", "clickhouse2", "clickhouse3"),
-    }
- 
-    with Cluster(local, clickhouse_binary_path, nodes=nodes) as cluster:
-        self.context.cluster = cluster
+    args = {"local": local, "clickhouse_binary_path": clickhouse_binary_path}
 
-        Scenario(run=load("ldap.tests.sanity", "scenario"))
-        Scenario(run=load("ldap.tests.multiple_servers", "scenario"))
-        Feature(run=load("ldap.tests.connections", "feature"))
-        Feature(run=load("ldap.tests.server_config", "feature"))
-        Feature(run=load("ldap.tests.user_config", "feature"))
-        Feature(run=load("ldap.tests.authentications", "feature"))
+    Feature(test=load("ldap.authentication.regression", "regression"))(**args)
+    Feature(test=load("ldap.external_user_directory.regression", "regression"))(**args)
 
 if main():
     regression()
