diff --git a/src/Parsers/ASTDictionary.cpp b/src/Parsers/ASTDictionary.cpp
index 5c477c2aab7d..9ff600333c5c 100644
--- a/src/Parsers/ASTDictionary.cpp
+++ b/src/Parsers/ASTDictionary.cpp
@@ -24,6 +24,7 @@ void ASTDictionaryRange::formatImpl(const FormatSettings & settings,
                   << "("
                   << (settings.hilite ? hilite_keyword : "")
                   << "MIN "
+                  << (settings.hilite ? hilite_none : "")
                   << min_attr_name << " "
                   << (settings.hilite ? hilite_keyword : "")
                   << "MAX "
@@ -52,6 +53,7 @@ void ASTDictionaryLifetime::formatImpl(const FormatSettings & settings,
                   << "("
                   << (settings.hilite ? hilite_keyword : "")
                   << "MIN "
+                  << (settings.hilite ? hilite_none : "")
                   << min_sec << " "
                   << (settings.hilite ? hilite_keyword : "")
                   << "MAX "
@@ -86,7 +88,9 @@ void ASTDictionaryLayout::formatImpl(const FormatSettings & settings,
                   << Poco::toUpper(layout_type)
                   << (settings.hilite ? hilite_none : "");
 
-    settings.ostr << "(";
+    if (has_brackets)
+        settings.ostr << "(";
+
     if (parameter)
     {
         settings.ostr << (settings.hilite ? hilite_keyword : "")
@@ -96,7 +100,10 @@ void ASTDictionaryLayout::formatImpl(const FormatSettings & settings,
 
         parameter->second->formatImpl(settings, state, frame);
     }
-    settings.ostr << ")";
+
+    if (has_brackets)
+        settings.ostr << ")";
+
     settings.ostr << ")";
 }
 
diff --git a/src/Parsers/ASTDictionary.h b/src/Parsers/ASTDictionary.h
index e146162cbdf0..6982381f14d3 100644
--- a/src/Parsers/ASTDictionary.h
+++ b/src/Parsers/ASTDictionary.h
@@ -33,6 +33,8 @@ class ASTDictionaryLayout : public IAST
     String layout_type;
     /// optional parameter (size_in_cells)
     std::optional<KeyValue> parameter;
+    /// has brackets after layout type
+    bool has_brackets = true;
 
     String getID(char) const override { return "Dictionary layout"; }
 
diff --git a/src/Parsers/ASTFunctionWithKeyValueArguments.cpp b/src/Parsers/ASTFunctionWithKeyValueArguments.cpp
index 8fdeb90c25ba..0843bddac7dd 100644
--- a/src/Parsers/ASTFunctionWithKeyValueArguments.cpp
+++ b/src/Parsers/ASTFunctionWithKeyValueArguments.cpp
@@ -64,9 +64,9 @@ ASTPtr ASTFunctionWithKeyValueArguments::clone() const
 
 void ASTFunctionWithKeyValueArguments::formatImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const
 {
-    settings.ostr << (settings.hilite ? hilite_keyword : "") << Poco::toUpper(name) << (settings.hilite ? hilite_none : "") << "(";
+    settings.ostr << (settings.hilite ? hilite_keyword : "") << Poco::toUpper(name) << (settings.hilite ? hilite_none : "") << (has_brackets ? "(" : "");
     elements->formatImpl(settings, state, frame);
-    settings.ostr << ")";
+    settings.ostr << (has_brackets ? ")" : "");
     settings.ostr << (settings.hilite ? hilite_none : "");
 }
 
diff --git a/src/Parsers/ASTFunctionWithKeyValueArguments.h b/src/Parsers/ASTFunctionWithKeyValueArguments.h
index e09e477417f9..3f31b4a7c5bf 100644
--- a/src/Parsers/ASTFunctionWithKeyValueArguments.h
+++ b/src/Parsers/ASTFunctionWithKeyValueArguments.h
@@ -44,6 +44,13 @@ class ASTFunctionWithKeyValueArguments : public IAST
     String name;
     /// Expression list
     ASTPtr elements;
+    /// Has brackets around arguments
+    bool has_brackets;
+
+    ASTFunctionWithKeyValueArguments(bool has_brackets_ = true)
+        : has_brackets(has_brackets_)
+    {
+    }
 
 public:
     String getID(char delim) const override;
diff --git a/src/Parsers/ExpressionElementParsers.cpp b/src/Parsers/ExpressionElementParsers.cpp
index c4e43829da93..30fa4a2e9fb3 100644
--- a/src/Parsers/ExpressionElementParsers.cpp
+++ b/src/Parsers/ExpressionElementParsers.cpp
@@ -1400,18 +1400,30 @@ bool ParserFunctionWithKeyValueArguments::parseImpl(Pos & pos, ASTPtr & node, Ex
     if (!id_parser.parse(pos, identifier, expected))
         return false;
 
+
+    bool left_bracket_found = false;
     if (pos.get().type != TokenType::OpeningRoundBracket)
-        return false;
+    {
+        if (!brackets_can_be_omitted)
+             return false;
+    }
+    else
+    {
+        ++pos;
+        left_bracket_found = true;
+    }
 
-    ++pos;
     if (!pairs_list_parser.parse(pos, expr_list_args, expected))
         return false;
 
-    if (pos.get().type != TokenType::ClosingRoundBracket)
-        return false;
+    if (left_bracket_found)
+    {
+        if (pos.get().type != TokenType::ClosingRoundBracket)
+            return false;
+        ++pos;
+    }
 
-    ++pos;
-    auto function = std::make_shared<ASTFunctionWithKeyValueArguments>();
+    auto function = std::make_shared<ASTFunctionWithKeyValueArguments>(left_bracket_found);
     function->name = Poco::toLower(typeid_cast<ASTIdentifier &>(*identifier.get()).name);
     function->elements = expr_list_args;
     function->children.push_back(function->elements);
diff --git a/src/Parsers/ExpressionElementParsers.h b/src/Parsers/ExpressionElementParsers.h
index b9d8d5db42cc..b02b29fb2e55 100644
--- a/src/Parsers/ExpressionElementParsers.h
+++ b/src/Parsers/ExpressionElementParsers.h
@@ -346,9 +346,16 @@ class ParserOrderByElement : public IParserBase
   */
 class ParserFunctionWithKeyValueArguments : public IParserBase
 {
+public:
+    ParserFunctionWithKeyValueArguments(bool brackets_can_be_omitted_ = false)
+        : brackets_can_be_omitted(brackets_can_be_omitted_) {}
 protected:
+
     const char * getName() const override { return "function with key-value arguments"; }
     bool parseImpl(Pos & pos, ASTPtr & node, Expected & expected) override;
+
+    /// brackets for function arguments can be omitted
+    bool brackets_can_be_omitted;
 };
 
 /** Data type or table engine, possibly with parameters. For example, UInt8 or see examples from ParserIdentifierWithParameters
diff --git a/src/Parsers/ParserDictionary.cpp b/src/Parsers/ParserDictionary.cpp
index ca9c2ad031a0..2680c7002966 100644
--- a/src/Parsers/ParserDictionary.cpp
+++ b/src/Parsers/ParserDictionary.cpp
@@ -109,7 +109,7 @@ bool ParserDictionaryRange::parseImpl(Pos & pos, ASTPtr & node, Expected & expec
 
 bool ParserDictionaryLayout::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)
 {
-    ParserFunctionWithKeyValueArguments key_value_func_p;
+    ParserFunctionWithKeyValueArguments key_value_func_p(/* brackets_can_be_omitted = */ true);
     ASTPtr ast_func;
     if (!key_value_func_p.parse(pos, ast_func, expected))
         return false;
@@ -121,12 +121,17 @@ bool ParserDictionaryLayout::parseImpl(Pos & pos, ASTPtr & node, Expected & expe
         return false;
 
     res->layout_type = func.name;
+    res->has_brackets = func.has_brackets;
     const ASTExpressionList & type_expr_list = func.elements->as<const ASTExpressionList &>();
 
     /// there are no layout with more than 1 parameter
     if (type_expr_list.children.size() > 1)
         return false;
 
+    /// if layout has params than brackets must be specified
+    if (!type_expr_list.children.empty() && !res->has_brackets)
+        return false;
+
     if (type_expr_list.children.size() == 1)
     {
         const ASTPair * pair = dynamic_cast<const ASTPair *>(type_expr_list.children.at(0).get());
