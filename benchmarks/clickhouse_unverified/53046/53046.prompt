You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Direct Join has worse performance than joinGet
There's two ways to query multiple columns from a storage join:

- Use multiple `joinGet`, e.g. `SELECT key, joinGet('table_join', 'value1', key), joinGet('table_join',  'value2', key) ... FROM keys`
- Use direct join, .e.g `SELECT key, value1, value2 ... FROM keys LEFT ANY JOIN table_join AS rhs ON key = rhs.key

Theoretically, the first approach will look up hash table multiple times, so it should have worse performance. Some quick test also show that: https://fiddle.clickhouse.com/f169c0ea-c966-40f8-aefa-cd341734ad9b

```sql
SELECT key, joinGet('dict', 'value1', key) AS value1, joinGet('dict', 'value2', key) AS value2 FROM keys FORMAT Null SETTINGS send_logs_level='debug';

<Debug> executeQuery: Read 10000000 rows, 76.29 MiB in 0.246209 sec., 40615899.500018276 rows/sec., 309.87 MiB/sec.
<Debug> MemoryTracker: Peak memory usage (for query): 28.13 MiB.

SELECT keys.key, value1, value2 FROM keys ANY LEFT JOIN dict AS d ON (keys.key = d.key) FORMAT Null SETTINGS send_logs_level='debug';

<Debug> executeQuery: Read 10000000 rows, 76.29 MiB in 0.122637 sec., 81541459.75521255 rows/sec., 622.11 MiB/sec.
<Debug> MemoryTracker: Peak memory usage (for query): 31.05 MiB.
```

But with real queries on big tables on prod, using direct join is actually worse than `joinGet`. I've tested many times and get the same result, so it's not a env fluctuation.

Any possible reason can lead to this?
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
