diff --git a/tests/queries/0_stateless/01686_rocksdb.sql b/tests/queries/0_stateless/01686_rocksdb.sql
index f3177ce140e1..3ff218bf3987 100644
--- a/tests/queries/0_stateless/01686_rocksdb.sql
+++ b/tests/queries/0_stateless/01686_rocksdb.sql
@@ -4,7 +4,7 @@
 
 DROP TABLE IF EXISTS 01686_test;
 
-CREATE TABLE 01686_test (key UInt64, value String) Engine=EmbeddedRocksDB PRIMARY KEY(key);
+CREATE TABLE 01686_test (key UInt64, value String) Engine=EmbeddedRocksDB PRIMARY KEY(key) SETTINGS optimize_for_bulk_insert = 0;
 
 SELECT value FROM system.rocksdb WHERE database = currentDatabase() and table = '01686_test' and name = 'number.keys.written';
 INSERT INTO 01686_test SELECT number, format('Hello, world ({})', toString(number)) FROM numbers(10000);
diff --git a/tests/queries/0_stateless/02956_rocksdb_bulk_sink.reference b/tests/queries/0_stateless/02956_rocksdb_bulk_sink.reference
new file mode 100644
index 000000000000..74c71827e6ef
--- /dev/null
+++ b/tests/queries/0_stateless/02956_rocksdb_bulk_sink.reference
@@ -0,0 +1,10 @@
+0
+1000
+1000
+1
+1000
+2
+1000000
+1000
+0	999001
+1000000
diff --git a/tests/queries/0_stateless/02956_rocksdb_bulk_sink.sh b/tests/queries/0_stateless/02956_rocksdb_bulk_sink.sh
new file mode 100755
index 000000000000..8acc83fc86c1
--- /dev/null
+++ b/tests/queries/0_stateless/02956_rocksdb_bulk_sink.sh
@@ -0,0 +1,48 @@
+#!/usr/bin/env bash
+# Tags: no-ordinary-database, use-rocksdb
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+# Normal importing, as we only insert 1000 rows, so it should be in memtable
+${CLICKHOUSE_CLIENT} --query "CREATE TABLE IF NOT EXISTS rocksdb_worm (key UInt64, value UInt64) ENGINE = EmbeddedRocksDB() PRIMARY KEY key SETTINGS optimize_for_bulk_insert = 0;"
+${CLICKHOUSE_CLIENT} --query "INSERT INTO rocksdb_worm SELECT number, number+1 FROM numbers(1000);"
+${CLICKHOUSE_CLIENT} --query "SELECT sum(value) FROM system.rocksdb WHERE database = currentDatabase() AND table = 'rocksdb_worm' AND name = 'no.file.opens';" # should be 0 because all data is still in memtable
+${CLICKHOUSE_CLIENT} --query "SELECT count() FROM rocksdb_worm;"
+
+# Enabling bulk insertion
+${CLICKHOUSE_CLIENT} --query "ALTER TABLE rocksdb_worm MODIFY SETTING optimize_for_bulk_insert = 1;"
+
+# Testing that key serialization is identical w. and w/o bulk sink
+${CLICKHOUSE_CLIENT} --query "TRUNCATE TABLE rocksdb_worm;"
+${CLICKHOUSE_CLIENT} --query "INSERT INTO rocksdb_worm SELECT number, number+2 FROM numbers(1000);" # should override previous keys
+${CLICKHOUSE_CLIENT} --query "SELECT count() FROM rocksdb_worm WHERE value = key + 2;"
+
+# With bulk insertion, there is no memtable, so a small insert should create a new file
+${CLICKHOUSE_CLIENT} --query "TRUNCATE TABLE rocksdb_worm;"
+${CLICKHOUSE_CLIENT} --query "INSERT INTO rocksdb_worm SELECT number, number+1 FROM numbers(1000);"
+${CLICKHOUSE_CLIENT} --query "SELECT sum(value) FROM system.rocksdb WHERE database = currentDatabase() AND table = 'rocksdb_worm' AND name = 'no.file.opens';" # should be 1
+${CLICKHOUSE_CLIENT} --query "SELECT count() FROM rocksdb_worm;"
+
+# Testing insert with multiple sinks and fixed block size
+${CLICKHOUSE_CLIENT} --query "TRUNCATE TABLE rocksdb_worm;"
+${CLICKHOUSE_CLIENT} --query "ALTER TABLE rocksdb_worm MODIFY SETTING bulk_insert_block_size = 500000;"
+${CLICKHOUSE_CLIENT} --query "INSERT INTO rocksdb_worm SELECT number, number+1 FROM numbers_mt(1000000) SETTINGS max_insert_threads = 2, max_block_size = 100000;"
+${CLICKHOUSE_CLIENT} --query "SELECT sum(value) FROM system.rocksdb WHERE database = currentDatabase() AND table = 'rocksdb_worm' AND name = 'no.file.opens';" # should be 2 as max_block_size is set to 500000
+${CLICKHOUSE_CLIENT} --query "SELECT count() FROM rocksdb_worm;"
+
+# Testing insert with duplicated keys
+${CLICKHOUSE_CLIENT} --query "TRUNCATE TABLE rocksdb_worm;"
+${CLICKHOUSE_CLIENT} --query "INSERT INTO rocksdb_worm SELECT number % 1000, number+1 FROM numbers_mt(1000000) SETTINGS max_block_size = 100000, max_insert_threads = 1;"
+${CLICKHOUSE_CLIENT} --query "SELECT count() FROM rocksdb_worm;"
+${CLICKHOUSE_CLIENT} --query "SELECT * FROM rocksdb_worm WHERE key = 0;" # should be the latest value - 999001
+
+
+# Testing insert with multiple threads
+${CLICKHOUSE_CLIENT} --query "TRUNCATE TABLE rocksdb_worm;"
+${CLICKHOUSE_CLIENT} --query "INSERT INTO rocksdb_worm SELECT number, number+1 FROM numbers_mt(1000000)" &
+${CLICKHOUSE_CLIENT} --query "INSERT INTO rocksdb_worm SELECT number, number+1 FROM numbers_mt(1000000)" &
+wait
+${CLICKHOUSE_CLIENT} --query "SELECT count() FROM rocksdb_worm;"
+
