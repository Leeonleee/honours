diff --git a/dbms/src/Common/CurrentThread.cpp b/dbms/src/Common/CurrentThread.cpp
index ca39bec414c0..ba2f28a8fe97 100644
--- a/dbms/src/Common/CurrentThread.cpp
+++ b/dbms/src/Common/CurrentThread.cpp
@@ -7,7 +7,7 @@
 #include <Common/TaskStatsInfoGetter.h>
 #include <Interpreters/ProcessList.h>
 #include <Interpreters/Context.h>
-#include <common/getThreadNumber.h>
+#include <common/getThreadId.h>
 #include <Poco/Logger.h>
 
 
@@ -34,7 +34,7 @@ bool CurrentThread::isInitialized()
 ThreadStatus & CurrentThread::get()
 {
     if (unlikely(!current_thread))
-        throw Exception("Thread #" + std::to_string(getThreadNumber()) + " status was not initialized", ErrorCodes::LOGICAL_ERROR);
+        throw Exception("Thread #" + std::to_string(getThreadId()) + " status was not initialized", ErrorCodes::LOGICAL_ERROR);
 
     return *current_thread;
 }
diff --git a/dbms/src/Common/QueryProfiler.cpp b/dbms/src/Common/QueryProfiler.cpp
index 96d96b151a70..860da0c348f0 100644
--- a/dbms/src/Common/QueryProfiler.cpp
+++ b/dbms/src/Common/QueryProfiler.cpp
@@ -63,14 +63,14 @@ namespace
                                     sizeof(UInt8) + // number of stack frames
                                     sizeof(StackTrace::Frames) + // collected stack trace, maximum capacity
                                     sizeof(TimerType) + // timer type
-                                    sizeof(UInt32); // thread_number
+                                    sizeof(UInt64); // thread_id
         char buffer[buf_size];
         WriteBufferFromFileDescriptorDiscardOnFailure out(trace_pipe.fds_rw[1], buf_size, buffer);
 
         StringRef query_id = CurrentThread::getQueryId();
         query_id.size = std::min(query_id.size, QUERY_ID_MAX_LEN);
 
-        UInt32 thread_number = CurrentThread::get().thread_number;
+        UInt64 thread_id = CurrentThread::get().thread_id;
 
         const auto signal_context = *reinterpret_cast<ucontext_t *>(context);
         const StackTrace stack_trace(signal_context);
@@ -85,7 +85,7 @@ namespace
             writePODBinary(stack_trace.getFrames()[i], out);
 
         writePODBinary(timer_type, out);
-        writePODBinary(thread_number, out);
+        writePODBinary(thread_id, out);
         out.next();
     }
 
@@ -103,7 +103,7 @@ namespace ErrorCodes
 }
 
 template <typename ProfilerImpl>
-QueryProfilerBase<ProfilerImpl>::QueryProfilerBase(const Int32 thread_id, const int clock_type, UInt32 period, const int pause_signal_)
+QueryProfilerBase<ProfilerImpl>::QueryProfilerBase(const UInt64 thread_id, const int clock_type, UInt32 period, const int pause_signal_)
     : log(&Logger::get("QueryProfiler"))
     , pause_signal(pause_signal_)
 {
@@ -200,7 +200,7 @@ void QueryProfilerBase<ProfilerImpl>::tryCleanup()
 template class QueryProfilerBase<QueryProfilerReal>;
 template class QueryProfilerBase<QueryProfilerCpu>;
 
-QueryProfilerReal::QueryProfilerReal(const Int32 thread_id, const UInt32 period)
+QueryProfilerReal::QueryProfilerReal(const UInt64 thread_id, const UInt32 period)
     : QueryProfilerBase(thread_id, CLOCK_REALTIME, period, SIGUSR1)
 {}
 
@@ -209,7 +209,7 @@ void QueryProfilerReal::signalHandler(int sig, siginfo_t * info, void * context)
     writeTraceInfo(TimerType::Real, sig, info, context);
 }
 
-QueryProfilerCpu::QueryProfilerCpu(const Int32 thread_id, const UInt32 period)
+QueryProfilerCpu::QueryProfilerCpu(const UInt64 thread_id, const UInt32 period)
     : QueryProfilerBase(thread_id, CLOCK_THREAD_CPUTIME_ID, period, SIGUSR2)
 {}
 
diff --git a/dbms/src/Common/QueryProfiler.h b/dbms/src/Common/QueryProfiler.h
index abbff6f6c0e3..c7cf7571715e 100644
--- a/dbms/src/Common/QueryProfiler.h
+++ b/dbms/src/Common/QueryProfiler.h
@@ -36,7 +36,7 @@ template <typename ProfilerImpl>
 class QueryProfilerBase
 {
 public:
-    QueryProfilerBase(const Int32 thread_id, const int clock_type, UInt32 period, const int pause_signal_);
+    QueryProfilerBase(const UInt64 thread_id, const int clock_type, UInt32 period, const int pause_signal_);
     ~QueryProfilerBase();
 
 private:
@@ -60,7 +60,7 @@ class QueryProfilerBase
 class QueryProfilerReal : public QueryProfilerBase<QueryProfilerReal>
 {
 public:
-    QueryProfilerReal(const Int32 thread_id, const UInt32 period);
+    QueryProfilerReal(const UInt64 thread_id, const UInt32 period);
 
     static void signalHandler(int sig, siginfo_t * info, void * context);
 };
@@ -69,7 +69,7 @@ class QueryProfilerReal : public QueryProfilerBase<QueryProfilerReal>
 class QueryProfilerCpu : public QueryProfilerBase<QueryProfilerCpu>
 {
 public:
-    QueryProfilerCpu(const Int32 thread_id, const UInt32 period);
+    QueryProfilerCpu(const UInt64 thread_id, const UInt32 period);
 
     static void signalHandler(int sig, siginfo_t * info, void * context);
 };
diff --git a/dbms/src/Common/TaskStatsInfoGetter.cpp b/dbms/src/Common/TaskStatsInfoGetter.cpp
index 99262740f6b3..85ed837e4ad9 100644
--- a/dbms/src/Common/TaskStatsInfoGetter.cpp
+++ b/dbms/src/Common/TaskStatsInfoGetter.cpp
@@ -14,7 +14,6 @@
 #include <stdlib.h>
 #include <string.h>
 #include <sys/socket.h>
-#include <syscall.h>
 #include <linux/genetlink.h>
 #include <linux/netlink.h>
 #include <linux/taskstats.h>
@@ -287,16 +286,6 @@ void TaskStatsInfoGetter::getStat(::taskstats & out_stats, pid_t tid)
 }
 
 
-static thread_local pid_t current_tid = 0;
-pid_t TaskStatsInfoGetter::getCurrentTID()
-{
-    if (!current_tid)
-        current_tid = syscall(SYS_gettid); /// This call is always successful. - man gettid
-
-    return current_tid;
-}
-
-
 TaskStatsInfoGetter::~TaskStatsInfoGetter()
 {
     if (netlink_socket_fd >= 0)
@@ -331,11 +320,6 @@ void TaskStatsInfoGetter::getStat(::taskstats &, pid_t)
 {
 }
 
-pid_t TaskStatsInfoGetter::getCurrentTID()
-{
-    return 0;
-}
-
 TaskStatsInfoGetter::~TaskStatsInfoGetter()
 {
 }
diff --git a/dbms/src/Common/TaskStatsInfoGetter.h b/dbms/src/Common/TaskStatsInfoGetter.h
index f3a581b2c784..1caa2a0fd926 100644
--- a/dbms/src/Common/TaskStatsInfoGetter.h
+++ b/dbms/src/Common/TaskStatsInfoGetter.h
@@ -18,9 +18,6 @@ class TaskStatsInfoGetter : private boost::noncopyable
 
     void getStat(::taskstats & stat, pid_t tid);
 
-    /// Make a syscall and returns Linux thread id
-    static pid_t getCurrentTID();
-
     /// Whether the current process has permissions (sudo or cap_net_admin capabilties) to get taskstats info
     static bool checkPermissions();
 
diff --git a/dbms/src/Common/ThreadStatus.cpp b/dbms/src/Common/ThreadStatus.cpp
index ff6c23c1794e..a76a558da20e 100644
--- a/dbms/src/Common/ThreadStatus.cpp
+++ b/dbms/src/Common/ThreadStatus.cpp
@@ -8,7 +8,7 @@
 #include <Common/ThreadStatus.h>
 
 #include <Poco/Logger.h>
-#include <common/getThreadNumber.h>
+#include <common/getThreadId.h>
 
 
 namespace DB
@@ -28,14 +28,13 @@ thread_local ThreadStatus * current_thread = nullptr;
 TasksStatsCounters TasksStatsCounters::current()
 {
     TasksStatsCounters res;
-    CurrentThread::get().taskstats_getter->getStat(res.stat, CurrentThread::get().os_thread_id);
+    CurrentThread::get().taskstats_getter->getStat(res.stat, CurrentThread::get().thread_id);
     return res;
 }
 
 ThreadStatus::ThreadStatus()
 {
-    thread_number = getThreadNumber();
-    os_thread_id = TaskStatsInfoGetter::getCurrentTID();
+    thread_id = getThreadId();
 
     last_rusage = std::make_unique<RUsageCounters>();
     last_taskstats = std::make_unique<TasksStatsCounters>();
diff --git a/dbms/src/Common/ThreadStatus.h b/dbms/src/Common/ThreadStatus.h
index 30779b1610bb..58af6d4efffd 100644
--- a/dbms/src/Common/ThreadStatus.h
+++ b/dbms/src/Common/ThreadStatus.h
@@ -60,12 +60,10 @@ class ThreadGroupStatus
 
     InternalTextLogsQueueWeakPtr logs_queue_ptr;
 
-    std::vector<UInt32> thread_numbers;
-    std::vector<UInt32> os_thread_ids;
+    std::vector<UInt64> thread_ids;
 
     /// The first thread created this thread group
-    UInt32 master_thread_number = 0;
-    Int32 master_thread_os_id = -1;
+    UInt64 master_thread_id = 0;
 
     LogsLevel client_logs_level = LogsLevel::none;
 
@@ -89,10 +87,8 @@ class ThreadStatus : public boost::noncopyable
     ThreadStatus();
     ~ThreadStatus();
 
-    /// Poco's thread number (the same number is used in logs)
-    UInt32 thread_number = 0;
     /// Linux's PID (or TGID) (the same id is shown by ps util)
-    Int32 os_thread_id = -1;
+    UInt64 thread_id = 0;
     /// Also called "nice" value. If it was changed to non-zero (when attaching query) - will be reset to zero when query is detached.
     Int32 os_thread_priority = 0;
 
diff --git a/dbms/src/Common/TraceCollector.cpp b/dbms/src/Common/TraceCollector.cpp
index 4b582c5ad4fe..ec0e4c38dbc3 100644
--- a/dbms/src/Common/TraceCollector.cpp
+++ b/dbms/src/Common/TraceCollector.cpp
@@ -105,10 +105,10 @@ void TraceCollector::run()
         TimerType timer_type;
         readPODBinary(timer_type, in);
 
-        UInt32 thread_number;
-        readPODBinary(thread_number, in);
+        UInt64 thread_id;
+        readPODBinary(thread_id, in);
 
-        TraceLogElement element{std::time(nullptr), timer_type, thread_number, query_id, trace};
+        TraceLogElement element{std::time(nullptr), timer_type, thread_id, query_id, trace};
         trace_log->add(element);
     }
 }
diff --git a/dbms/src/DataStreams/InternalTextLogsRowOutputStream.cpp b/dbms/src/DataStreams/InternalTextLogsRowOutputStream.cpp
index 02d2f8cf440f..9e33d2ecd942 100644
--- a/dbms/src/DataStreams/InternalTextLogsRowOutputStream.cpp
+++ b/dbms/src/DataStreams/InternalTextLogsRowOutputStream.cpp
@@ -24,7 +24,7 @@ void InternalTextLogsRowOutputStream::write(const Block & block)
     auto & column_host_name = typeid_cast<const ColumnString &>(*block.getByName("host_name").column);
     auto & column_query_id = typeid_cast<const ColumnString &>(*block.getByName("query_id").column);
 
-    auto & array_thread_number = typeid_cast<const ColumnUInt32 &>(*block.getByName("thread_number").column).getData();
+    auto & array_thread_id = typeid_cast<const ColumnUInt64 &>(*block.getByName("thread_id").column).getData();
     auto & array_priority = typeid_cast<const ColumnInt8 &>(*block.getByName("priority").column).getData();
     auto & column_source = typeid_cast<const ColumnString &>(*block.getByName("source").column);
     auto & column_text = typeid_cast<const ColumnString &>(*block.getByName("text").column);
@@ -59,9 +59,9 @@ void InternalTextLogsRowOutputStream::write(const Block & block)
             writeCString("}", wb);
         }
 
-        UInt32 thread_number = array_thread_number[row_num];
+        UInt64 thread_id = array_thread_id[row_num];
         writeCString(" [ ", wb);
-        writeIntText(thread_number, wb);
+        writeIntText(thread_id, wb);
         writeCString(" ] <", wb);
 
         Int8 priority = array_priority[row_num];
diff --git a/dbms/src/Interpreters/InternalTextLogsQueue.cpp b/dbms/src/Interpreters/InternalTextLogsQueue.cpp
index 6028514f11f0..ef555f1b34f2 100644
--- a/dbms/src/Interpreters/InternalTextLogsQueue.cpp
+++ b/dbms/src/Interpreters/InternalTextLogsQueue.cpp
@@ -23,7 +23,7 @@ Block InternalTextLogsQueue::getSampleBlock()
         {std::make_shared<DataTypeUInt32>(),   "event_time_microseconds"},
         {std::make_shared<DataTypeString>(),   "host_name"},
         {std::make_shared<DataTypeString>(),   "query_id"},
-        {std::make_shared<DataTypeUInt32>(),   "thread_number"},
+        {std::make_shared<DataTypeUInt64>(),   "thread_id"},
         {std::make_shared<DataTypeInt8>(),     "priority"},
         {std::make_shared<DataTypeString>(),   "source"},
         {std::make_shared<DataTypeString>(),   "text"}
diff --git a/dbms/src/Interpreters/ProcessList.cpp b/dbms/src/Interpreters/ProcessList.cpp
index 50e2e5a8c895..c581c50754f3 100644
--- a/dbms/src/Interpreters/ProcessList.cpp
+++ b/dbms/src/Interpreters/ProcessList.cpp
@@ -447,8 +447,7 @@ QueryStatusInfo QueryStatus::getInfo(bool get_thread_list, bool get_profile_even
         if (get_thread_list)
         {
             std::lock_guard lock(thread_group->mutex);
-            res.thread_numbers = thread_group->thread_numbers;
-            res.os_thread_ids = thread_group->os_thread_ids;
+            res.thread_ids = thread_group->thread_ids;
         }
 
         if (get_profile_events)
diff --git a/dbms/src/Interpreters/ProcessList.h b/dbms/src/Interpreters/ProcessList.h
index d5631abdb0cf..a5edf7f90d8b 100644
--- a/dbms/src/Interpreters/ProcessList.h
+++ b/dbms/src/Interpreters/ProcessList.h
@@ -64,9 +64,8 @@ struct QueryStatusInfo
     ClientInfo client_info;
     bool is_cancelled;
 
-    /// Optional fields, filled by request
-    std::vector<UInt32> thread_numbers;
-    std::vector<UInt32> os_thread_ids;
+    /// Optional fields, filled by query
+    std::vector<UInt64> thread_ids;
     std::shared_ptr<ProfileEvents::Counters> profile_counters;
     std::shared_ptr<Settings> query_settings;
 };
diff --git a/dbms/src/Interpreters/QueryLog.cpp b/dbms/src/Interpreters/QueryLog.cpp
index b57b54ac710c..638ac68daa56 100644
--- a/dbms/src/Interpreters/QueryLog.cpp
+++ b/dbms/src/Interpreters/QueryLog.cpp
@@ -76,8 +76,7 @@ Block QueryLogElement::createBlock()
 
         {std::make_shared<DataTypeUInt32>(),                                  "revision"},
 
-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt32>()), "thread_numbers"},
-        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt32>()), "os_thread_ids"},
+        {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>()), "thread_ids"},
         {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), "ProfileEvents.Names"},
         {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>()), "ProfileEvents.Values"},
         {std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>()), "Settings.Names"},
@@ -118,17 +117,9 @@ void QueryLogElement::appendToBlock(Block & block) const
 
     {
         Array threads_array;
-        threads_array.reserve(thread_numbers.size());
-        for (const UInt32 thread_number : thread_numbers)
-            threads_array.emplace_back(UInt64(thread_number));
-        columns[i++]->insert(threads_array);
-    }
-
-    {
-        Array threads_array;
-        threads_array.reserve(os_thread_ids.size());
-        for (const UInt32 thread_number : os_thread_ids)
-            threads_array.emplace_back(UInt64(thread_number));
+        threads_array.reserve(thread_ids.size());
+        for (const UInt64 thread_id : thread_ids)
+            threads_array.emplace_back(thread_id);
         columns[i++]->insert(threads_array);
     }
 
diff --git a/dbms/src/Interpreters/QueryLog.h b/dbms/src/Interpreters/QueryLog.h
index f14691df64ed..22183dd5811c 100644
--- a/dbms/src/Interpreters/QueryLog.h
+++ b/dbms/src/Interpreters/QueryLog.h
@@ -60,8 +60,7 @@ struct QueryLogElement
 
     ClientInfo client_info;
 
-    std::vector<UInt32> thread_numbers;
-    std::vector<UInt32> os_thread_ids;
+    std::vector<UInt64> thread_ids;
     std::shared_ptr<ProfileEvents::Counters> profile_counters;
     std::shared_ptr<Settings> query_settings;
 
diff --git a/dbms/src/Interpreters/QueryThreadLog.cpp b/dbms/src/Interpreters/QueryThreadLog.cpp
index 2e81564c14b5..225e768eb3a2 100644
--- a/dbms/src/Interpreters/QueryThreadLog.cpp
+++ b/dbms/src/Interpreters/QueryThreadLog.cpp
@@ -35,10 +35,8 @@ Block QueryThreadLogElement::createBlock()
         {std::make_shared<DataTypeInt64>(),         "peak_memory_usage"},
 
         {std::make_shared<DataTypeString>(),        "thread_name"},
-        {std::make_shared<DataTypeUInt32>(),        "thread_number"},
-        {std::make_shared<DataTypeInt32>(),         "os_thread_id"},
-        {std::make_shared<DataTypeUInt32>(),        "master_thread_number"},
-        {std::make_shared<DataTypeInt32>(),         "master_os_thread_id"},
+        {std::make_shared<DataTypeUInt64>(),        "thread_id"},
+        {std::make_shared<DataTypeUInt64>(),        "master_thread_id"},
         {std::make_shared<DataTypeString>(),        "query"},
 
         {std::make_shared<DataTypeUInt8>(),         "is_initial_query"},
@@ -89,10 +87,8 @@ void QueryThreadLogElement::appendToBlock(Block & block) const
     columns[i++]->insert(peak_memory_usage);
 
     columns[i++]->insertData(thread_name.data(), thread_name.size());
-    columns[i++]->insert(thread_number);
-    columns[i++]->insert(os_thread_id);
-    columns[i++]->insert(master_thread_number);
-    columns[i++]->insert(master_os_thread_id);
+    columns[i++]->insert(thread_id);
+    columns[i++]->insert(master_thread_id);
 
     columns[i++]->insertData(query.data(), query.size());
 
diff --git a/dbms/src/Interpreters/QueryThreadLog.h b/dbms/src/Interpreters/QueryThreadLog.h
index 36b8dacd1e68..0f10648e27fc 100644
--- a/dbms/src/Interpreters/QueryThreadLog.h
+++ b/dbms/src/Interpreters/QueryThreadLog.h
@@ -32,10 +32,8 @@ struct QueryThreadLogElement
     Int64 peak_memory_usage{};
 
     String thread_name;
-    UInt32 thread_number{};
-    Int32 os_thread_id{};
-    UInt32 master_thread_number{};
-    Int32 master_os_thread_id{};
+    UInt64 thread_id{};
+    UInt64 master_thread_id{};
 
     String query;
     ClientInfo client_info;
diff --git a/dbms/src/Interpreters/TextLog.cpp b/dbms/src/Interpreters/TextLog.cpp
index 7cb27782cb20..c09877c2df56 100644
--- a/dbms/src/Interpreters/TextLog.cpp
+++ b/dbms/src/Interpreters/TextLog.cpp
@@ -32,8 +32,7 @@ Block TextLogElement::createBlock()
         {std::make_shared<DataTypeUInt32>(),                                                  "microseconds"},
 
         {std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()),        "thread_name"},
-        {std::make_shared<DataTypeUInt32>(),                                                  "thread_number"},
-        {std::make_shared<DataTypeUInt32>(),                                                  "os_thread_id"},
+        {std::make_shared<DataTypeUInt64>(),                                                  "thread_id"},
 
         {std::move(priority_datatype),                                                        "level"},
         {std::make_shared<DataTypeString>(),                                                  "query_id"},
@@ -58,8 +57,7 @@ void TextLogElement::appendToBlock(Block & block) const
     columns[i++]->insert(microseconds);
 
     columns[i++]->insertData(thread_name.data(), thread_name.size());
-    columns[i++]->insert(thread_number);
-    columns[i++]->insert(os_thread_id);
+    columns[i++]->insert(thread_id);
 
     columns[i++]->insert(level);
     columns[i++]->insert(query_id);
diff --git a/dbms/src/Interpreters/TextLog.h b/dbms/src/Interpreters/TextLog.h
index 34f40ffe5f1e..fff45f143281 100644
--- a/dbms/src/Interpreters/TextLog.h
+++ b/dbms/src/Interpreters/TextLog.h
@@ -12,8 +12,7 @@ struct TextLogElement
     UInt32 microseconds;
 
     String thread_name;
-    UInt32 os_thread_id;
-    UInt32 thread_number;
+    UInt64 thread_id;
 
     Message::Priority level = Message::PRIO_TRACE;
 
diff --git a/dbms/src/Interpreters/ThreadStatusExt.cpp b/dbms/src/Interpreters/ThreadStatusExt.cpp
index d7f8829b016f..34a1f974ae38 100644
--- a/dbms/src/Interpreters/ThreadStatusExt.cpp
+++ b/dbms/src/Interpreters/ThreadStatusExt.cpp
@@ -68,8 +68,7 @@ void ThreadStatus::setupState(const ThreadGroupStatusPtr & thread_group_)
         std::lock_guard lock(thread_group->mutex);
 
         /// NOTE: thread may be attached multiple times if it is reused from a thread pool.
-        thread_group->thread_numbers.emplace_back(thread_number);
-        thread_group->os_thread_ids.emplace_back(os_thread_id);
+        thread_group->thread_ids.emplace_back(thread_id);
 
         logs_queue_ptr = thread_group->logs_queue_ptr;
         query_context = thread_group->query_context;
@@ -90,7 +89,7 @@ void ThreadStatus::setupState(const ThreadGroupStatusPtr & thread_group_)
         {
             LOG_TRACE(log, "Setting nice to " << new_os_thread_priority);
 
-            if (0 != setpriority(PRIO_PROCESS, os_thread_id, new_os_thread_priority))
+            if (0 != setpriority(PRIO_PROCESS, thread_id, new_os_thread_priority))
                 throwFromErrno("Cannot 'setpriority'", ErrorCodes::CANNOT_SET_THREAD_PRIORITY);
 
             os_thread_priority = new_os_thread_priority;
@@ -109,8 +108,7 @@ void ThreadStatus::initializeQuery()
 
     /// No need to lock on mutex here
     thread_group->memory_tracker.setDescription("(for query)");
-    thread_group->master_thread_number = thread_number;
-    thread_group->master_thread_os_id = os_thread_id;
+    thread_group->master_thread_id = thread_id;
 }
 
 void ThreadStatus::attachQuery(const ThreadGroupStatusPtr & thread_group_, bool check_detached)
@@ -163,13 +161,11 @@ void ThreadStatus::initQueryProfiler()
     try
     {
         if (settings.query_profiler_real_time_period_ns > 0)
-            query_profiler_real = std::make_unique<QueryProfilerReal>(
-                /* thread_id */ os_thread_id,
+            query_profiler_real = std::make_unique<QueryProfilerReal>(thread_id,
                 /* period */ static_cast<UInt32>(settings.query_profiler_real_time_period_ns));
 
         if (settings.query_profiler_cpu_time_period_ns > 0)
-            query_profiler_cpu = std::make_unique<QueryProfilerCpu>(
-                /* thread_id */ os_thread_id,
+            query_profiler_cpu = std::make_unique<QueryProfilerCpu>(thread_id,
                 /* period */ static_cast<UInt32>(settings.query_profiler_cpu_time_period_ns));
     }
     catch (...)
@@ -216,7 +212,7 @@ void ThreadStatus::detachQuery(bool exit_if_already_detached, bool thread_exits)
     {
         LOG_TRACE(log, "Resetting nice");
 
-        if (0 != setpriority(PRIO_PROCESS, os_thread_id, 0))
+        if (0 != setpriority(PRIO_PROCESS, thread_id, 0))
             LOG_ERROR(log, "Cannot 'setpriority' back to zero: " << errnoToString(ErrorCodes::CANNOT_SET_THREAD_PRIORITY, errno));
 
         os_thread_priority = 0;
@@ -242,17 +238,14 @@ void ThreadStatus::logToQueryThreadLog(QueryThreadLog & thread_log)
     elem.peak_memory_usage = memory_tracker.getPeak();
 
     elem.thread_name = getThreadName();
-    elem.thread_number = thread_number;
-    elem.os_thread_id = os_thread_id;
+    elem.thread_id = thread_id;
 
     if (thread_group)
     {
         {
             std::lock_guard lock(thread_group->mutex);
 
-            elem.master_thread_number = thread_group->master_thread_number;
-            elem.master_os_thread_id = thread_group->master_thread_os_id;
-
+            elem.master_thread_id = thread_group->master_thread_id;
             elem.query = thread_group->query;
         }
     }
diff --git a/dbms/src/Interpreters/TraceLog.cpp b/dbms/src/Interpreters/TraceLog.cpp
index 5cde9d30f0f3..977d04704528 100644
--- a/dbms/src/Interpreters/TraceLog.cpp
+++ b/dbms/src/Interpreters/TraceLog.cpp
@@ -24,7 +24,7 @@ Block TraceLogElement::createBlock()
         {std::make_shared<DataTypeDateTime>(),                                "event_time"},
         {std::make_shared<DataTypeUInt32>(),                                  "revision"},
         {std::make_shared<TimerDataType>(timer_values),                       "timer_type"},
-        {std::make_shared<DataTypeUInt32>(),                                  "thread_number"},
+        {std::make_shared<DataTypeUInt64>(),                                  "thread_id"},
         {std::make_shared<DataTypeString>(),                                  "query_id"},
         {std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>()), "trace"}
     };
@@ -40,7 +40,7 @@ void TraceLogElement::appendToBlock(Block & block) const
     columns[i++]->insert(event_time);
     columns[i++]->insert(ClickHouseRevision::get());
     columns[i++]->insert(static_cast<UInt8>(timer_type));
-    columns[i++]->insert(thread_number);
+    columns[i++]->insert(thread_id);
     columns[i++]->insertData(query_id.data(), query_id.size());
     columns[i++]->insert(trace);
 
diff --git a/dbms/src/Interpreters/TraceLog.h b/dbms/src/Interpreters/TraceLog.h
index f5df349656a0..38d6ba77de3f 100644
--- a/dbms/src/Interpreters/TraceLog.h
+++ b/dbms/src/Interpreters/TraceLog.h
@@ -15,7 +15,7 @@ struct TraceLogElement
 
     time_t event_time{};
     TimerType timer_type{};
-    UInt32 thread_number{};
+    UInt64 thread_id{};
     String query_id{};
     Array trace{};
 
diff --git a/dbms/src/Interpreters/executeQuery.cpp b/dbms/src/Interpreters/executeQuery.cpp
index b6741e17b8d4..ac67ded4b45d 100644
--- a/dbms/src/Interpreters/executeQuery.cpp
+++ b/dbms/src/Interpreters/executeQuery.cpp
@@ -478,8 +478,7 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(
                         << formatReadableSizeWithBinarySuffix(elem.read_bytes / elapsed_seconds) << "/sec.");
                 }
 
-                elem.thread_numbers = std::move(info.thread_numbers);
-                elem.os_thread_ids = std::move(info.os_thread_ids);
+                elem.thread_ids = std::move(info.thread_ids);
                 elem.profile_counters = std::move(info.profile_counters);
 
                 if (log_queries)
@@ -517,8 +516,7 @@ static std::tuple<ASTPtr, BlockIO> executeQueryImpl(
 
                     elem.memory_usage = info.peak_memory_usage > 0 ? info.peak_memory_usage : 0;
 
-                    elem.thread_numbers = std::move(info.thread_numbers);
-                    elem.os_thread_ids = std::move(info.os_thread_ids);
+                    elem.thread_ids = std::move(info.thread_ids);
                     elem.profile_counters = std::move(info.profile_counters);
                 }
 
diff --git a/dbms/src/Storages/MergeTree/MergeList.cpp b/dbms/src/Storages/MergeTree/MergeList.cpp
index 77e6ea32da28..5db4377c2ab6 100644
--- a/dbms/src/Storages/MergeTree/MergeList.cpp
+++ b/dbms/src/Storages/MergeTree/MergeList.cpp
@@ -1,7 +1,7 @@
 #include <Storages/MergeTree/MergeList.h>
 #include <Storages/MergeTree/MergeTreeDataMergerMutator.h>
 #include <Common/CurrentMetrics.h>
-#include <common/getThreadNumber.h>
+#include <common/getThreadId.h>
 #include <Common/CurrentThread.h>
 
 
@@ -20,7 +20,7 @@ MergeListElement::MergeListElement(const std::string & database_, const std::str
     , result_part_path{future_part.path}
     , result_data_version{future_part.part_info.getDataVersion()}
     , num_parts{future_part.parts.size()}
-    , thread_number{getThreadNumber()}
+    , thread_id{getThreadId()}
 {
     for (const auto & source_part : future_part.parts)
     {
@@ -71,7 +71,7 @@ MergeInfo MergeListElement::getInfo() const
     res.rows_written = rows_written.load(std::memory_order_relaxed);
     res.columns_written = columns_written.load(std::memory_order_relaxed);
     res.memory_usage = memory_tracker.get();
-    res.thread_number = thread_number;
+    res.thread_id = thread_id;
 
     for (const auto & source_part_name : source_part_names)
         res.source_part_names.emplace_back(source_part_name);
diff --git a/dbms/src/Storages/MergeTree/MergeList.h b/dbms/src/Storages/MergeTree/MergeList.h
index 98c627db24c1..107b03a018a3 100644
--- a/dbms/src/Storages/MergeTree/MergeList.h
+++ b/dbms/src/Storages/MergeTree/MergeList.h
@@ -45,7 +45,7 @@ struct MergeInfo
     UInt64 rows_written;
     UInt64 columns_written;
     UInt64 memory_usage;
-    UInt64 thread_number;
+    UInt64 thread_id;
 };
 
 struct FutureMergedMutatedPart;
@@ -87,8 +87,7 @@ struct MergeListElement : boost::noncopyable
     MemoryTracker * background_thread_memory_tracker;
     MemoryTracker * background_thread_memory_tracker_prev_parent = nullptr;
 
-    /// Poco thread number used in logs
-    UInt32 thread_number;
+    UInt64 thread_id;
 
 
     MergeListElement(const std::string & database, const std::string & table, const FutureMergedMutatedPart & future_part);
diff --git a/dbms/src/Storages/StorageBuffer.cpp b/dbms/src/Storages/StorageBuffer.cpp
index abf1d504e9e3..2f1b633413d0 100644
--- a/dbms/src/Storages/StorageBuffer.cpp
+++ b/dbms/src/Storages/StorageBuffer.cpp
@@ -23,7 +23,7 @@
 #include <Common/typeid_cast.h>
 #include <Common/ProfileEvents.h>
 #include <common/logger_useful.h>
-#include <common/getThreadNumber.h>
+#include <common/getThreadId.h>
 #include <ext/range.h>
 #include <DataStreams/FilterBlockInputStream.h>
 #include <DataStreams/ExpressionBlockInputStream.h>
@@ -387,7 +387,7 @@ class BufferBlockOutputStream : public IBlockOutputStream
         }
 
         /// We distribute the load on the shards by the stream number.
-        const auto start_shard_num = getThreadNumber() % storage.num_shards;
+        const auto start_shard_num = getThreadId() % storage.num_shards;
 
         /// We loop through the buffers, trying to lock mutex. No more than one lap.
         auto shard_num = start_shard_num;
diff --git a/dbms/src/Storages/System/StorageSystemMerges.cpp b/dbms/src/Storages/System/StorageSystemMerges.cpp
index 745c4b212bf5..7e71d90120a5 100644
--- a/dbms/src/Storages/System/StorageSystemMerges.cpp
+++ b/dbms/src/Storages/System/StorageSystemMerges.cpp
@@ -29,7 +29,7 @@ NamesAndTypesList StorageSystemMerges::getNamesAndTypes()
         {"rows_written", std::make_shared<DataTypeUInt64>()},
         {"columns_written", std::make_shared<DataTypeUInt64>()},
         {"memory_usage", std::make_shared<DataTypeUInt64>()},
-        {"thread_number", std::make_shared<DataTypeUInt64>()},
+        {"thread_id", std::make_shared<DataTypeUInt64>()},
     };
 }
 
@@ -64,7 +64,7 @@ void StorageSystemMerges::fillData(MutableColumns & res_columns, const Context &
         res_columns[i++]->insert(merge.rows_written);
         res_columns[i++]->insert(merge.columns_written);
         res_columns[i++]->insert(merge.memory_usage);
-        res_columns[i++]->insert(merge.thread_number);
+        res_columns[i++]->insert(merge.thread_id);
     }
 }
 
diff --git a/dbms/src/Storages/System/StorageSystemProcesses.cpp b/dbms/src/Storages/System/StorageSystemProcesses.cpp
index 56905b293496..c65a6b78e413 100644
--- a/dbms/src/Storages/System/StorageSystemProcesses.cpp
+++ b/dbms/src/Storages/System/StorageSystemProcesses.cpp
@@ -57,8 +57,7 @@ NamesAndTypesList StorageSystemProcesses::getNamesAndTypes()
         {"peak_memory_usage", std::make_shared<DataTypeInt64>()},
         {"query", std::make_shared<DataTypeString>()},
 
-        {"thread_numbers", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt32>())},
-        {"os_thread_ids", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt32>())},
+        {"thread_ids", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>())},
         {"ProfileEvents.Names", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},
         {"ProfileEvents.Values", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>())},
         {"Settings.Names", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},
@@ -115,17 +114,9 @@ void StorageSystemProcesses::fillData(MutableColumns & res_columns, const Contex
 
         {
             Array threads_array;
-            threads_array.reserve(process.thread_numbers.size());
-            for (const UInt32 thread_number : process.thread_numbers)
-                threads_array.emplace_back(thread_number);
-            res_columns[i++]->insert(threads_array);
-        }
-
-        {
-            Array threads_array;
-            threads_array.reserve(process.os_thread_ids.size());
-            for (const UInt32 thread_number : process.os_thread_ids)
-                threads_array.emplace_back(thread_number);
+            threads_array.reserve(process.thread_ids.size());
+            for (const UInt64 thread_id : process.thread_ids)
+                threads_array.emplace_back(thread_id);
             res_columns[i++]->insert(threads_array);
         }
 
diff --git a/dbms/src/Storages/System/StorageSystemStackTrace.cpp b/dbms/src/Storages/System/StorageSystemStackTrace.cpp
index 20767464038a..1c996fcf17b6 100644
--- a/dbms/src/Storages/System/StorageSystemStackTrace.cpp
+++ b/dbms/src/Storages/System/StorageSystemStackTrace.cpp
@@ -14,7 +14,7 @@
 #include <DataTypes/DataTypeArray.h>
 #include <IO/ReadHelpers.h>
 #include <Common/PipeFDs.h>
-#include <common/getThreadNumber.h>
+#include <common/getThreadId.h>
 
 
 namespace DB
@@ -37,7 +37,6 @@ namespace
 
     int sequence_num = 0;    /// For messages sent via pipe.
 
-    UInt32 thread_number{0};
     std::optional<StackTrace> stack_trace;
 
     static constexpr size_t max_query_id_size = 128;
@@ -60,7 +59,6 @@ namespace
         /// All these methods are signal-safe.
         const ucontext_t signal_context = *reinterpret_cast<ucontext_t *>(context);
         stack_trace.emplace(signal_context);
-        thread_number = getThreadNumber();
 
         StringRef query_id = CurrentThread::getQueryId();
         query_id_size = std::min(query_id.size, max_query_id_size);
@@ -148,7 +146,7 @@ NamesAndTypesList StorageSystemStackTrace::getNamesAndTypes()
 {
     return
     {
-        { "thread_number", std::make_shared<DataTypeUInt32>() },
+        { "thread_id", std::make_shared<DataTypeUInt64>() },
         { "query_id", std::make_shared<DataTypeString>() },
         { "trace", std::make_shared<DataTypeArray>(std::make_shared<DataTypeUInt64>()) }
     };
@@ -197,7 +195,7 @@ void StorageSystemStackTrace::fillData(MutableColumns & res_columns, const Conte
             for (size_t i = stack_trace_offset; i < stack_trace_size; ++i)
                 arr.emplace_back(reinterpret_cast<intptr_t>(stack_trace->getFrames()[i]));
 
-            res_columns[0]->insert(thread_number);
+            res_columns[0]->insert(tid);
             res_columns[1]->insertData(query_id_data, query_id_size);
             res_columns[2]->insert(arr);
         }
@@ -205,7 +203,7 @@ void StorageSystemStackTrace::fillData(MutableColumns & res_columns, const Conte
         {
             /// Cannot obtain a stack trace. But create a record in result nevertheless.
 
-            res_columns[0]->insert(tid);    /// TODO Replace all thread numbers to OS thread numbers.
+            res_columns[0]->insert(tid);
             res_columns[1]->insertDefault();
             res_columns[2]->insertDefault();
         }
diff --git a/docs/en/operations/system_tables.md b/docs/en/operations/system_tables.md
index 802d42e82940..1ed861ed41fc 100644
--- a/docs/en/operations/system_tables.md
+++ b/docs/en/operations/system_tables.md
@@ -405,8 +405,7 @@ Columns:
 - `event_time` (`DateTime`) - Time of the entry.
 - `microseconds` (`UInt32`) - Microseconds of the entry.
 - `thread_name` (String) — Name of the thread from which the logging was done.
-- `thread_number` (UInt32) — Internal thread ID.
-- `os_thread_id` (Int32) — OS thread ID.
+- `thread_id` (UInt64) — OS thread ID.
 - `level` (`Enum8`) - Entry level.
     - `'Fatal' = 1`
     - `'Critical' = 2`
@@ -533,8 +532,7 @@ Columns:
 - `thread_name` (String) — Name of the thread.
 - `thread_number` (UInt32) — Internal thread ID.
 - `os_thread_id` (Int32) — OS thread ID.
-- `master_thread_number` (UInt32) — Internal ID of initial thread.
-- `master_os_thread_id` (Int32) — OS initial ID of initial thread.
+- `master_thread_id` (UInt64) — OS initial ID of initial thread.
 - `query` (String) — Query string.
 - `is_initial_query` (UInt8) — Query type. Possible values:
     - 1 — Query was initiated by the client.
@@ -775,15 +773,15 @@ WHERE changed
 
 ## system.table_engines
 
-Contains description of table engines supported by server and their feature support information. 
+Contains description of table engines supported by server and their feature support information.
 
 This table contains the following columns (the column type is shown in brackets):
 
 - `name` (String) — The name of table engine.
 - `supports_settings` (UInt8) — Flag that indicates if table engine supports `SETTINGS` clause.
-- `supports_skipping_indices` (UInt8) — Flag that indicates if table engine supports [skipping indices](table_engines/mergetree/#table_engine-mergetree-data_skipping-indexes). 
+- `supports_skipping_indices` (UInt8) — Flag that indicates if table engine supports [skipping indices](table_engines/mergetree/#table_engine-mergetree-data_skipping-indexes).
 - `supports_ttl` (UInt8) — Flag that indicates if table engine supports [TTL](table_engines/mergetree/#table_engine-mergetree-ttl).
-- `supports_sort_order` (UInt8) — Flag that indicates if table engine supports clauses `PARTITION_BY`, `PRIMARY_KEY`, `ORDER_BY` and `SAMPLE_BY`.  
+- `supports_sort_order` (UInt8) — Flag that indicates if table engine supports clauses `PARTITION_BY`, `PRIMARY_KEY`, `ORDER_BY` and `SAMPLE_BY`.
 - `supports_replication` (UInt8) — Flag that indicates if table engine supports [data replication](table_engines/replication/).
 - `supports_duduplication` (UInt8) — Flag that indicates if table engine supports data deduplication.
 
@@ -807,7 +805,7 @@ WHERE name in ('Kafka', 'MergeTree', 'ReplicatedCollapsingMergeTree')
 
 - MergeTree family [query clauses](table_engines/mergetree.md#mergetree-query-clauses)
 - Kafka [settings](table_engines/kafka.md#table_engine-kafka-creating-a-table)
-- Join [settings](table_engines/join.md#join-limitations-and-settings) 
+- Join [settings](table_engines/join.md#join-limitations-and-settings)
 
 
 ## system.tables
@@ -934,7 +932,7 @@ If there were problems with mutating some parts, the following columns contain a
 
 ## system.disks {#system_tables-disks}
 
-Contains information about disks defined in the [server configuration](table_engines/mergetree.md#table_engine-mergetree-multiple-volumes_configure). 
+Contains information about disks defined in the [server configuration](table_engines/mergetree.md#table_engine-mergetree-multiple-volumes_configure).
 
 Columns:
 
diff --git a/docs/ru/operations/system_tables.md b/docs/ru/operations/system_tables.md
index a36a23f936da..8281e54a93d5 100644
--- a/docs/ru/operations/system_tables.md
+++ b/docs/ru/operations/system_tables.md
@@ -495,10 +495,8 @@ ClickHouse создаёт таблицу только в том случае, к
 - `memory_usage` (Int64) — разница между выделенной и освобождённой памятью в контексте потока.
 - `peak_memory_usage` (Int64) — максимальная разница между выделенной и освобождённой памятью в контексте потока.
 - `thread_name` (String) — Имя потока.
-- `thread_number` (UInt32) — Внутренний ID потока.
-- `os_thread_id` (Int32) — tid (ID потока операционной системы).
-- `master_thread_number` (UInt32) — Внутренний ID главного потока.
-- `master_os_thread_id` (Int32) — tid (ID потока операционной системы) главного потока.
+- `thread_id` (UInt64) — tid (ID потока операционной системы).
+- `master_thread_id` (UInt64) — tid (ID потока операционной системы) главного потока.
 - `query` (String) — текст запроса.
 - `is_initial_query` (UInt8) — вид запроса. Возможные значения:
     - 1 — запрос был инициирован клиентом.
@@ -697,15 +695,15 @@ WHERE changed
 
 ## system.table_engines
 
-Содержит информацию про движки таблиц, поддерживаемые сервером, а также об их возможностях. 
+Содержит информацию про движки таблиц, поддерживаемые сервером, а также об их возможностях.
 
 Эта таблица содержит следующие столбцы (тип столбца показан в скобках):
 
 - `name` (String) — имя движка.
 - `supports_settings` (UInt8) — флаг, показывающий поддержку секции `SETTINGS`.
-- `supports_skipping_indices` (UInt8) — флаг, показывающий поддержку [индексов пропуска данных](table_engines/mergetree/#table_engine-mergetree-data_skipping-indexes). 
+- `supports_skipping_indices` (UInt8) — флаг, показывающий поддержку [индексов пропуска данных](table_engines/mergetree/#table_engine-mergetree-data_skipping-indexes).
 - `supports_ttl` (UInt8) — флаг, показывающий поддержку [TTL](table_engines/mergetree/#table_engine-mergetree-ttl).
-- `supports_sort_order` (UInt8) — флаг, показывающий поддержку секций `PARTITION_BY`, `PRIMARY_KEY`, `ORDER_BY` и `SAMPLE_BY`.  
+- `supports_sort_order` (UInt8) — флаг, показывающий поддержку секций `PARTITION_BY`, `PRIMARY_KEY`, `ORDER_BY` и `SAMPLE_BY`.
 - `supports_replication` (UInt8) — флаг, показвыающий поддержку [репликации](table_engines/replication/).
 - `supports_duduplication` (UInt8) — флаг, показывающий наличие в движке дедупликации данных.
 
@@ -727,7 +725,7 @@ WHERE name in ('Kafka', 'MergeTree', 'ReplicatedCollapsingMergeTree')
 
 **Смотрите также**
 
-- [Секции движка](table_engines/mergetree/#mergetree-query-clauses) семейства MergeTree 
+- [Секции движка](table_engines/mergetree/#mergetree-query-clauses) семейства MergeTree
 - [Настройки](table_engines/kafka.md#table_engine-kafka-creating-a-table) Kafka
 - [Настройки](table_engines/join/#join-limitations-and-settings) Join
 
@@ -856,7 +854,7 @@ path:           /clickhouse/tables/01-08/visits/replicas
 
 ## system.disks {#system_tables-disks}
 
-Cодержит информацию о дисках, заданных в [конфигурации сервера](table_engines/mergetree.md#table_engine-mergetree-multiple-volumes_configure). 
+Cодержит информацию о дисках, заданных в [конфигурации сервера](table_engines/mergetree.md#table_engine-mergetree-multiple-volumes_configure).
 
 Столбцы:
 
diff --git a/libs/libcommon/CMakeLists.txt b/libs/libcommon/CMakeLists.txt
index 2506d5adf2f3..765ab99bfee0 100644
--- a/libs/libcommon/CMakeLists.txt
+++ b/libs/libcommon/CMakeLists.txt
@@ -17,7 +17,7 @@ set (COMMON_SRCS
     src/DateLUTImpl.cpp
     src/demangle.cpp
     src/getMemoryAmount.cpp
-    src/getThreadNumber.cpp
+    src/getThreadId.cpp
     src/JSON.cpp
     src/LineReader.cpp
     src/mremap.cpp
@@ -36,7 +36,7 @@ set (COMMON_SRCS
     include/common/ErrorHandlers.h
     include/common/find_symbols.h
     include/common/getMemoryAmount.h
-    include/common/getThreadNumber.h
+    include/common/getThreadId.h
     include/common/JSON.h
     include/common/likely.h
     include/common/LineReader.h
diff --git a/libs/libcommon/include/common/getThreadId.h b/libs/libcommon/include/common/getThreadId.h
new file mode 100644
index 000000000000..a1b5ff5f3e8d
--- /dev/null
+++ b/libs/libcommon/include/common/getThreadId.h
@@ -0,0 +1,5 @@
+#pragma once
+#include <cstdint>
+
+/// Obtain thread id from OS. The value is cached in thread local variable.
+uint64_t getThreadId();
diff --git a/libs/libcommon/include/common/getThreadNumber.h b/libs/libcommon/include/common/getThreadNumber.h
deleted file mode 100644
index a9305e13a212..000000000000
--- a/libs/libcommon/include/common/getThreadNumber.h
+++ /dev/null
@@ -1,7 +0,0 @@
-#pragma once
-
-/** Последовательный номер потока, начиная с 1, среди тех потоков, для которых был получен этот номер.
-  * Используется при логгировании.
-  */
-
-unsigned getThreadNumber();
diff --git a/libs/libcommon/include/common/iostream_debug_helpers.h b/libs/libcommon/include/common/iostream_debug_helpers.h
index 72891ed03a53..51a4b969d8ac 100644
--- a/libs/libcommon/include/common/iostream_debug_helpers.h
+++ b/libs/libcommon/include/common/iostream_debug_helpers.h
@@ -1,7 +1,7 @@
 #pragma once
 
 #include "demangle.h"
-#include "getThreadNumber.h"
+#include "getThreadId.h"
 #include <type_traits>
 #include <tuple>
 #include <iomanip>
@@ -141,7 +141,7 @@ Out & dump(Out & out, const char * name, T && x)
 #endif
 
 #define DUMPVAR(VAR) ::dump(std::cerr, #VAR, (VAR)); std::cerr << "; ";
-#define DUMPHEAD std::cerr << __FILE__ << ':' << __LINE__ << " [ " << getThreadNumber() << " ] ";
+#define DUMPHEAD std::cerr << __FILE__ << ':' << __LINE__ << " [ " << getThreadId() << " ] ";
 #define DUMPTAIL std::cerr << '
';
 
 #define DUMP1(V1) do { DUMPHEAD DUMPVAR(V1) DUMPTAIL } while(0)
diff --git a/libs/libcommon/src/getThreadId.cpp b/libs/libcommon/src/getThreadId.cpp
new file mode 100644
index 000000000000..f35d85f23ed6
--- /dev/null
+++ b/libs/libcommon/src/getThreadId.cpp
@@ -0,0 +1,26 @@
+#include <common/getThreadId.h>
+
+#if OS_LINUX
+    #include <unistd.h>
+    #include <syscall.h>
+#else
+    #include <pthread.h>
+    #include <stdexcept>
+#endif
+
+
+static thread_local uint64_t current_tid = 0;
+uint64_t getThreadId()
+{
+    if (!current_tid)
+    {
+#if OS_LINUX
+        current_tid = syscall(SYS_gettid); /// This call is always successful. - man gettid
+#else
+        if (0 != pthread_threadid_np(nullptr, &current_tid))
+            throw std::logic_error("pthread_threadid_np returned error");
+#endif
+    }
+
+    return current_tid;
+}
diff --git a/libs/libcommon/src/getThreadNumber.cpp b/libs/libcommon/src/getThreadNumber.cpp
deleted file mode 100644
index 0c2d7d282833..000000000000
--- a/libs/libcommon/src/getThreadNumber.cpp
+++ /dev/null
@@ -1,14 +0,0 @@
-#include <common/getThreadNumber.h>
-#include <common/likely.h>
-#include <atomic>
-
-static thread_local unsigned thread_number = 0;
-static std::atomic_uint threads{0};
-
-unsigned getThreadNumber()
-{
-    if (unlikely(thread_number == 0))
-        thread_number = ++threads;
-
-    return thread_number;
-}
diff --git a/libs/libdaemon/include/daemon/BaseDaemon.h b/libs/libdaemon/include/daemon/BaseDaemon.h
index 56f7dc5f06b6..6a2764db8c10 100644
--- a/libs/libdaemon/include/daemon/BaseDaemon.h
+++ b/libs/libdaemon/include/daemon/BaseDaemon.h
@@ -19,7 +19,7 @@
 #include <Poco/Version.h>
 #include <common/Types.h>
 #include <common/logger_useful.h>
-#include <common/getThreadNumber.h>
+#include <common/getThreadId.h>
 #include <daemon/GraphiteWriter.h>
 #include <Common/Config/ConfigProcessor.h>
 #include <loggers/Loggers.h>
diff --git a/libs/libdaemon/src/BaseDaemon.cpp b/libs/libdaemon/src/BaseDaemon.cpp
index 9d9ea6a0a158..9e6143807221 100644
--- a/libs/libdaemon/src/BaseDaemon.cpp
+++ b/libs/libdaemon/src/BaseDaemon.cpp
@@ -37,7 +37,7 @@
 #include <common/logger_useful.h>
 #include <common/ErrorHandlers.h>
 #include <common/argsToConfig.h>
-#include <common/getThreadNumber.h>
+#include <common/getThreadId.h>
 #include <common/coverage.h>
 
 #include <IO/WriteBufferFromFile.h>
@@ -123,7 +123,7 @@ static void signalHandler(int sig, siginfo_t * info, void * context)
     DB::writePODBinary(*info, out);
     DB::writePODBinary(signal_context, out);
     DB::writePODBinary(stack_trace, out);
-    DB::writeBinary(UInt32(getThreadNumber()), out);
+    DB::writeBinary(UInt32(getThreadId()), out);
     DB::writeStringBinary(query_id, out);
 
     out.next();
@@ -301,7 +301,7 @@ static void terminate_handler()
     DB::WriteBufferFromFileDescriptor out(signal_pipe.fds_rw[1], buf_size, buf);
 
     DB::writeBinary(static_cast<int>(SignalListener::StdTerminate), out);
-    DB::writeBinary(UInt32(getThreadNumber()), out);
+    DB::writeBinary(UInt32(getThreadId()), out);
     DB::writeBinary(log_message, out);
     out.next();
 
diff --git a/libs/libloggers/loggers/ExtendedLogChannel.cpp b/libs/libloggers/loggers/ExtendedLogChannel.cpp
index 8040a094a15c..421113b425f1 100644
--- a/libs/libloggers/loggers/ExtendedLogChannel.cpp
+++ b/libs/libloggers/loggers/ExtendedLogChannel.cpp
@@ -3,7 +3,7 @@
 #include <sys/time.h>
 #include <Common/CurrentThread.h>
 #include <Common/Exception.h>
-#include <common/getThreadNumber.h>
+#include <common/getThreadId.h>
 
 
 namespace DB
@@ -31,7 +31,7 @@ ExtendedLogMessage ExtendedLogMessage::getFrom(const Poco::Message & base)
             msg_ext.query_id.assign(query_id_ref.data, query_id_ref.size);
     }
 
-    msg_ext.thread_number = getThreadNumber();
+    msg_ext.thread_id = getThreadId();
 
     return msg_ext;
 }
diff --git a/libs/libloggers/loggers/ExtendedLogChannel.h b/libs/libloggers/loggers/ExtendedLogChannel.h
index 5388c6aa4673..3e9b61e8ae4c 100644
--- a/libs/libloggers/loggers/ExtendedLogChannel.h
+++ b/libs/libloggers/loggers/ExtendedLogChannel.h
@@ -24,7 +24,7 @@ class ExtendedLogMessage
     uint32_t time_seconds = 0;
     uint32_t time_microseconds = 0;
 
-    uint32_t thread_number = 0;
+    uint64_t thread_id = 0;
     std::string query_id;
 };
 
diff --git a/libs/libloggers/loggers/OwnPatternFormatter.cpp b/libs/libloggers/loggers/OwnPatternFormatter.cpp
index cd0f372fbfa7..c049fa90485a 100644
--- a/libs/libloggers/loggers/OwnPatternFormatter.cpp
+++ b/libs/libloggers/loggers/OwnPatternFormatter.cpp
@@ -7,7 +7,7 @@
 #include <Interpreters/InternalTextLogsQueue.h>
 #include <sys/time.h>
 #include <Common/CurrentThread.h>
-#include <common/getThreadNumber.h>
+#include <common/getThreadId.h>
 #include "Loggers.h"
 
 
@@ -48,7 +48,7 @@ void OwnPatternFormatter::formatExtended(const DB::ExtendedLogMessage & msg_ext,
     DB::writeChar('0' + ((msg_ext.time_microseconds / 1) % 10), wb);
 
     writeCString(" [ ", wb);
-    DB::writeIntText(msg_ext.thread_number, wb);
+    DB::writeIntText(msg_ext.thread_id, wb);
     writeCString(" ] ", wb);
 
     /// We write query_id even in case when it is empty (no query context)
diff --git a/libs/libloggers/loggers/OwnSplitChannel.cpp b/libs/libloggers/loggers/OwnSplitChannel.cpp
index 3b9ded40dc30..3b809c022b56 100644
--- a/libs/libloggers/loggers/OwnSplitChannel.cpp
+++ b/libs/libloggers/loggers/OwnSplitChannel.cpp
@@ -8,7 +8,7 @@
 #include <Poco/Message.h>
 #include <Common/CurrentThread.h>
 #include <Common/DNSResolver.h>
-#include <common/getThreadNumber.h>
+#include <common/getThreadId.h>
 #include <Common/SensitiveDataMasker.h>
 
 namespace DB
@@ -61,7 +61,7 @@ void OwnSplitChannel::logSplit(const Poco::Message & msg)
         columns[i++]->insert(msg_ext.time_microseconds);
         columns[i++]->insert(DNSResolver::instance().getHostName());
         columns[i++]->insert(msg_ext.query_id);
-        columns[i++]->insert(msg_ext.thread_number);
+        columns[i++]->insert(msg_ext.thread_id);
         columns[i++]->insert(Int64(msg.getPriority()));
         columns[i++]->insert(msg.getSource());
         columns[i++]->insert(msg.getText());
@@ -79,12 +79,7 @@ void OwnSplitChannel::logSplit(const Poco::Message & msg)
         elem.microseconds = msg_ext.time_microseconds;
 
         elem.thread_name = getThreadName();
-        elem.thread_number = msg_ext.thread_number;
-
-        if (CurrentThread::isInitialized())
-            elem.os_thread_id = CurrentThread::get().os_thread_id;
-        else
-            elem.os_thread_id = 0;
+        elem.thread_id = msg_ext.thread_id;
 
         elem.query_id = msg_ext.query_id;
 
