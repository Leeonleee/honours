You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Crash bug: ClickHouse Server 23.7.1.1659 crashed through a SELECT statement calling the experimental 'hashid' function
**Describe the bug**
ClickHouse Server 23.7.1.1659 crashed through a SELECT statement calling the experimental 'hashid' function.

**How to reproduce**
The SQL statement to reproduce:
```sql
SET allow_experimental_hash_functions = 1;
SELECT hashid ( 5 , 'ёёёёёёёё' ) ;
```
It can be reproduced on the official docker image. (`clickhouse/clickhouse-server:head` and `clickhouse/clickhouse-server:latest`).

The log traced by ClickHouse Server:
```
SELECT hashid(5, 'ёёёёёёёё')

Query id: 686c19d4-4cc1-43c2-88c6-de068fbcdcce

[25b36a6e4a9c] 2023.07.21 10:00:04.616755 [ 337 ] <Fatal> BaseDaemon: ########################################
[25b36a6e4a9c] 2023.07.21 10:00:04.616820 [ 337 ] <Fatal> BaseDaemon: (version 23.7.1.1659 (official build), build id: 2A82CED3B49248890AFC97BDD6FE0D5C0590676F, git hash: 234b5047b5cd093b8950bb8de3725eacffe02dc0) (from thread 48) (query_id: 686c19d4-4cc1-43c2-88c6-de068fbcdcce) (query: SELECT hashid ( 5 , 'ёёёёёёёё' ) ;) Received signal Segmentation fault (11)
[25b36a6e4a9c] 2023.07.21 10:00:04.616852 [ 337 ] <Fatal> BaseDaemon: Address: 0x7f0a784363b5. Access: read. Address not mapped to object.
[25b36a6e4a9c] 2023.07.21 10:00:04.616881 [ 337 ] <Fatal> BaseDaemon: Stack trace: 0x00000000118934e5 0x0000000009064f7a 0x0000000008cf1a6a 0x0000000008cf100e 0x0000000012c2f22f 0x0000000012c2ed78 0x0000000012c2f1d2 0x0000000012c2fca2 0x0000000012c30f99 0x00000000133bb50a 0x00000000133bac00 0x00000000135ceec0 0x00000000135da74f 0x00000000135d2020 0x00000000135d8a68 0x00000000135c6b15 0x00000000135a501b 0x00000000135b435d 0x00000000135ba78e 0x0000000013ce4d2c 0x0000000013cdcdda 0x0000000013cd681d 0x0000000013d7cdc6 0x0000000013d7a9d3 0x0000000013c8f9de 0x00000000140b1feb 0x00000000140ae68e 0x0000000014ed69c4 0x0000000014eedc79 0x0000000017e7a154 0x0000000017e7b371 0x0000000017ffd207 0x0000000017ffac3c 0x00007f0997269609 0x00007f099718e133
[25b36a6e4a9c] 2023.07.21 10:00:04.616969 [ 337 ] <Fatal> BaseDaemon: 2. hashidsxx::Hashids::Hashids(String const&, unsigned int, String const&) @ 0x00000000118934e5 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617035 [ 337 ] <Fatal> BaseDaemon: 3. ? @ 0x0000000009064f7a in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617095 [ 337 ] <Fatal> BaseDaemon: 4. ? @ 0x0000000008cf1a6a in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617151 [ 337 ] <Fatal> BaseDaemon: 5. ? @ 0x0000000008cf100e in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617246 [ 337 ] <Fatal> BaseDaemon: 6. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000012c2f22f in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617284 [ 337 ] <Fatal> BaseDaemon: 7. DB::IExecutableFunction::defaultImplementationForConstantArguments(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000012c2ed78 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617348 [ 337 ] <Fatal> BaseDaemon: 8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000012c2f1d2 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617389 [ 337 ] <Fatal> BaseDaemon: 9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000012c2fca2 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617435 [ 337 ] <Fatal> BaseDaemon: 10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000012c30f99 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617497 [ 337 ] <Fatal> BaseDaemon: 11. DB::ActionsDAG::addFunctionImpl(std::shared_ptr<DB::IFunctionBase const> const&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>, String, std::shared_ptr<DB::IDataType const>, bool) @ 0x00000000133bb50a in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617539 [ 337 ] <Fatal> BaseDaemon: 12. DB::ActionsDAG::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>, String) @ 0x00000000133bac00 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617581 [ 337 ] <Fatal> BaseDaemon: 13. DB::ScopeStack::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x00000000135ceec0 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617609 [ 337 ] <Fatal> BaseDaemon: 14. ? @ 0x00000000135da74f in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617649 [ 337 ] <Fatal> BaseDaemon: 15. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000135d2020 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617696 [ 337 ] <Fatal> BaseDaemon: 16. DB::ActionsMatcher::visit(DB::ASTExpressionList&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000135d8a68 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617736 [ 337 ] <Fatal> BaseDaemon: 17. ? @ 0x00000000135c6b15 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617804 [ 337 ] <Fatal> BaseDaemon: 18. DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, std::shared_ptr<DB::ActionsDAG>&, bool) @ 0x00000000135a501b in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617857 [ 337 ] <Fatal> BaseDaemon: 19. DB::SelectQueryExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool) @ 0x00000000135b435d in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617917 [ 337 ] <Fatal> BaseDaemon: 20. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::shared_ptr<DB::FilterDAGInfo> const&, std::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x00000000135ba78e in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.617953 [ 337 ] <Fatal> BaseDaemon: 21. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x0000000013ce4d2c in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.618001 [ 337 ] <Fatal> BaseDaemon: 22. ? @ 0x0000000013cdcdda in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.618120 [ 337 ] <Fatal> BaseDaemon: 23. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013cd681d in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.618160 [ 337 ] <Fatal> BaseDaemon: 24. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013d7cdc6 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.618200 [ 337 ] <Fatal> BaseDaemon: 25. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013d7a9d3 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.618237 [ 337 ] <Fatal> BaseDaemon: 26. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x0000000013c8f9de in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.618274 [ 337 ] <Fatal> BaseDaemon: 27. ? @ 0x00000000140b1feb in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.618314 [ 337 ] <Fatal> BaseDaemon: 28. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x00000000140ae68e in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.618353 [ 337 ] <Fatal> BaseDaemon: 29. DB::TCPHandler::runImpl() @ 0x0000000014ed69c4 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.618401 [ 337 ] <Fatal> BaseDaemon: 30. DB::TCPHandler::run() @ 0x0000000014eedc79 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.618463 [ 337 ] <Fatal> BaseDaemon: 31. Poco::Net::TCPServerConnection::start() @ 0x0000000017e7a154 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.618512 [ 337 ] <Fatal> BaseDaemon: 32. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017e7b371 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.618547 [ 337 ] <Fatal> BaseDaemon: 33. Poco::PooledThread::run() @ 0x0000000017ffd207 in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.618574 [ 337 ] <Fatal> BaseDaemon: 34. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017ffac3c in /usr/bin/clickhouse
[25b36a6e4a9c] 2023.07.21 10:00:04.618605 [ 337 ] <Fatal> BaseDaemon: 35. ? @ 0x00007f0997269609 in ?
[25b36a6e4a9c] 2023.07.21 10:00:04.618637 [ 337 ] <Fatal> BaseDaemon: 36. clone @ 0x00007f099718e133 in ?
[25b36a6e4a9c] 2023.07.21 10:00:04.893375 [ 337 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 7D28AF63E0E09B75DF5876280E0C8DBB)
[25b36a6e4a9c] 2023.07.21 10:00:04.893833 [ 337 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues
[25b36a6e4a9c] 2023.07.21 10:00:04.893964 [ 337 ] <Fatal> BaseDaemon: Changed settings: allow_experimental_hash_functions = true
Error on processing query: Code: 32. DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000. (ATTEMPT_TO_READ_AFTER_EOF) (version 23.7.1.1659 (official build))
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
