{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52449,
  "instance_id": "ClickHouse__ClickHouse-52449",
  "issue_numbers": [
    "52406"
  ],
  "base_commit": "7af9af1a3ff2565c8a902801277142e4f410f26a",
  "patch": "diff --git a/.gitmodules b/.gitmodules\nindex 151dc28c55bc..ba71a8ae3a7a 100644\n--- a/.gitmodules\n+++ b/.gitmodules\n@@ -258,9 +258,6 @@\n [submodule \"contrib/wyhash\"]\n \tpath = contrib/wyhash\n \turl = https://github.com/wangyi-fudan/wyhash\n-[submodule \"contrib/hashidsxx\"]\n-\tpath = contrib/hashidsxx\n-\turl = https://github.com/schoentoon/hashidsxx\n [submodule \"contrib/nats-io\"]\n \tpath = contrib/nats-io\n \turl = https://github.com/ClickHouse/nats.c\ndiff --git a/contrib/CMakeLists.txt b/contrib/CMakeLists.txt\nindex 2af468970f17..0f68c0cbc7c7 100644\n--- a/contrib/CMakeLists.txt\n+++ b/contrib/CMakeLists.txt\n@@ -164,7 +164,6 @@ add_contrib (libpq-cmake libpq)\n add_contrib (nuraft-cmake NuRaft)\n add_contrib (fast_float-cmake fast_float)\n add_contrib (datasketches-cpp-cmake datasketches-cpp)\n-add_contrib (hashidsxx-cmake hashidsxx)\n \n option(ENABLE_NLP \"Enable NLP functions support\" ${ENABLE_LIBRARIES})\n if (ENABLE_NLP)\ndiff --git a/contrib/hashidsxx b/contrib/hashidsxx\ndeleted file mode 160000\nindex 783f6911ccfd..000000000000\n--- a/contrib/hashidsxx\n+++ /dev/null\n@@ -1,1 +0,0 @@\n-Subproject commit 783f6911ccfdaca83e3cfac084c4aad888a80cee\ndiff --git a/contrib/hashidsxx-cmake/CMakeLists.txt b/contrib/hashidsxx-cmake/CMakeLists.txt\ndeleted file mode 100644\nindex 17f3888bd94d..000000000000\n--- a/contrib/hashidsxx-cmake/CMakeLists.txt\n+++ /dev/null\n@@ -1,14 +0,0 @@\n-set (LIBRARY_DIR \"${ClickHouse_SOURCE_DIR}/contrib/hashidsxx\")\n-\n-set (SRCS\n-    \"${LIBRARY_DIR}/hashids.cpp\"\n-)\n-\n-set (HDRS\n-    \"${LIBRARY_DIR}/hashids.h\"\n-)\n-\n-add_library(_hashidsxx ${SRCS} ${HDRS})\n-target_include_directories(_hashidsxx SYSTEM PUBLIC \"${LIBRARY_DIR}\")\n-\n-add_library(ch_contrib::hashidsxx ALIAS _hashidsxx)\ndiff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex cfcb56729d24..bde51ae99716 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -761,7 +761,7 @@ class IColumn;\n     /** Experimental functions */ \\\n     M(Bool, allow_experimental_funnel_functions, false, \"Enable experimental functions for funnel analysis.\", 0) \\\n     M(Bool, allow_experimental_nlp_functions, false, \"Enable experimental functions for natural language processing.\", 0) \\\n-    M(Bool, allow_experimental_hash_functions, false, \"Enable experimental hash functions (hashid, etc)\", 0) \\\n+    M(Bool, allow_experimental_hash_functions, false, \"Enable experimental hash functions\", 0) \\\n     M(Bool, allow_experimental_object_type, false, \"Allow Object and JSON data types\", 0) \\\n     M(Bool, allow_experimental_annoy_index, false, \"Allows to use Annoy index. Disabled by default because this feature is experimental\", 0) \\\n     M(UInt64, max_limit_for_ann_queries, 1'000'000, \"SELECT queries with LIMIT bigger than this setting cannot use ANN indexes. Helps to prevent memory overflows in ANN search indexes.\", 0) \\\ndiff --git a/src/Functions/CMakeLists.txt b/src/Functions/CMakeLists.txt\nindex 2f5c8a212f2d..06436488050b 100644\n--- a/src/Functions/CMakeLists.txt\n+++ b/src/Functions/CMakeLists.txt\n@@ -21,7 +21,6 @@ list (APPEND PUBLIC_LIBS\n         dbms\n         ch_contrib::metrohash\n         ch_contrib::murmurhash\n-        ch_contrib::hashidsxx\n         ch_contrib::morton_nd\n )\n \ndiff --git a/src/Functions/FunctionHashID.cpp b/src/Functions/FunctionHashID.cpp\ndeleted file mode 100644\nindex 829b3d9d2f6e..000000000000\n--- a/src/Functions/FunctionHashID.cpp\n+++ /dev/null\n@@ -1,12 +0,0 @@\n-#include \"FunctionHashID.h\"\n-#include <Functions/FunctionFactory.h>\n-\n-namespace DB\n-{\n-\n-REGISTER_FUNCTION(HashID)\n-{\n-    factory.registerFunction<FunctionHashID>();\n-}\n-\n-}\ndiff --git a/src/Functions/FunctionHashID.h b/src/Functions/FunctionHashID.h\ndeleted file mode 100644\nindex 680c3f6430be..000000000000\n--- a/src/Functions/FunctionHashID.h\n+++ /dev/null\n@@ -1,170 +0,0 @@\n-#pragma once\n-\n-#include \"config.h\"\n-\n-#include <hashids.h>\n-\n-#include <Columns/ColumnString.h>\n-#include <Columns/ColumnsNumber.h>\n-#include <DataTypes/DataTypeString.h>\n-#include <Functions/FunctionFactory.h>\n-#include <Functions/FunctionHelpers.h>\n-#include <Functions/IFunction.h>\n-#include <Interpreters/Context.h>\n-\n-#include <functional>\n-#include <initializer_list>\n-\n-namespace DB\n-{\n-\n-namespace ErrorCodes\n-{\n-    extern const int BAD_ARGUMENTS;\n-    extern const int ILLEGAL_COLUMN;\n-    extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n-    extern const int SUPPORT_IS_DISABLED;\n-    extern const int TOO_MANY_ARGUMENTS_FOR_FUNCTION;\n-    extern const int TOO_FEW_ARGUMENTS_FOR_FUNCTION;\n-}\n-\n-// hashid(string, salt)\n-class FunctionHashID : public IFunction\n-{\n-public:\n-    static constexpr auto name = \"hashid\";\n-\n-    static FunctionPtr create(ContextPtr context)\n-    {\n-        if (!context->getSettingsRef().allow_experimental_hash_functions)\n-            throw Exception(ErrorCodes::SUPPORT_IS_DISABLED,\n-                \"Hashing function '{}' is experimental. Set `allow_experimental_hash_functions` setting to enable it\", name);\n-\n-        return std::make_shared<FunctionHashID>();\n-    }\n-\n-    String getName() const override { return name; }\n-\n-    size_t getNumberOfArguments() const override { return 0; }\n-\n-    bool isVariadic() const override { return true; }\n-\n-    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override { return false; }\n-\n-    bool useDefaultImplementationForConstants() const override { return true; }\n-    ColumnNumbers getArgumentsThatAreAlwaysConstant() const override { return {1, 2, 3}; }\n-\n-    DataTypePtr getReturnTypeImpl(const ColumnsWithTypeAndName & arguments) const override\n-    {\n-        if (arguments.empty())\n-            throw Exception(ErrorCodes::TOO_FEW_ARGUMENTS_FOR_FUNCTION, \"Function {} expects at least one argument\", getName());\n-\n-        const auto & id_col = arguments[0];\n-        if (!isUnsignedInteger(id_col.type))\n-            throw Exception(\n-                ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n-                \"First argument of function {} must be unsigned integer, got {}\",\n-                getName(),\n-                arguments[0].type->getName());\n-\n-        if (arguments.size() > 1)\n-        {\n-            const auto & hash_col = arguments[1];\n-            if (!isString(hash_col.type))\n-                throw Exception(\n-                    ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n-                    \"Second argument of function {} must be String, got {}\",\n-                    getName(),\n-                    arguments[1].type->getName());\n-        }\n-\n-        if (arguments.size() > 2)\n-        {\n-            const auto & min_length_col = arguments[2];\n-            if (!isUInt8(min_length_col.type))\n-                throw Exception(\n-                    ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n-                    \"Third argument of function {} must be UInt8, got {}\",\n-                    getName(),\n-                    arguments[2].type->getName());\n-        }\n-\n-        if (arguments.size() > 3)\n-        {\n-            const auto & alphabet_col = arguments[3];\n-            if (!isString(alphabet_col.type))\n-                throw Exception(\n-                    ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,\n-                    \"Fourth argument of function {} must be String, got {}\",\n-                    getName(),\n-                    arguments[3].type->getName());\n-        }\n-\n-        if (arguments.size() > 4)\n-        {\n-            throw Exception(\n-                ErrorCodes::TOO_MANY_ARGUMENTS_FOR_FUNCTION,\n-                \"Function {} expect no more than four arguments (integer, salt, min_length, optional_alphabet), got {}\",\n-                getName(),\n-                arguments.size());\n-        }\n-\n-        return std::make_shared<DataTypeString>();\n-    }\n-\n-    ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr &, size_t input_rows_count) const override\n-    {\n-        const auto & numcolumn = arguments[0].column;\n-\n-        if (checkAndGetColumn<ColumnUInt8>(numcolumn.get()) || checkAndGetColumn<ColumnUInt16>(numcolumn.get())\n-            || checkAndGetColumn<ColumnUInt32>(numcolumn.get()) || checkAndGetColumn<ColumnUInt64>(numcolumn.get()))\n-        {\n-            std::string salt;\n-            UInt8 min_length = 0;\n-            std::string alphabet;\n-\n-            if (arguments.size() >= 4)\n-            {\n-                const auto & alphabetcolumn = arguments[3].column;\n-                if (const auto * alpha_col = checkAndGetColumnConst<ColumnString>(alphabetcolumn.get()))\n-                {\n-                    alphabet = alpha_col->getValue<String>();\n-                    if (alphabet.find('\\0') != std::string::npos)\n-                        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Custom alphabet must not contain null character\");\n-                }\n-            }\n-            else\n-                alphabet.assign(DEFAULT_ALPHABET);\n-\n-            if (arguments.size() >= 3)\n-            {\n-                const auto & minlengthcolumn = arguments[2].column;\n-                if (const auto * min_length_col = checkAndGetColumnConst<ColumnUInt8>(minlengthcolumn.get()))\n-                    min_length = min_length_col->getValue<UInt8>();\n-            }\n-\n-            if (arguments.size() >= 2)\n-            {\n-                const auto & saltcolumn = arguments[1].column;\n-                if (const auto * salt_col = checkAndGetColumnConst<ColumnString>(saltcolumn.get()))\n-                    salt = salt_col->getValue<String>();\n-            }\n-\n-            hashidsxx::Hashids hash(salt, min_length, alphabet);\n-\n-            auto col_res = ColumnString::create();\n-\n-            for (size_t i = 0; i < input_rows_count; ++i)\n-            {\n-                col_res->insert(hash.encode({numcolumn->getUInt(i)}));\n-            }\n-\n-            return col_res;\n-        }\n-        else\n-            throw Exception(ErrorCodes::ILLEGAL_COLUMN, \"Illegal column {} of first argument of function hashid\",\n-                arguments[0].column->getName());\n-    }\n-};\n-\n-}\n",
  "test_patch": "diff --git a/docker/test/fasttest/run.sh b/docker/test/fasttest/run.sh\nindex 828c73e67819..e25b5fdbfedd 100755\n--- a/docker/test/fasttest/run.sh\n+++ b/docker/test/fasttest/run.sh\n@@ -141,7 +141,6 @@ function clone_submodules\n             contrib/jemalloc\n             contrib/replxx\n             contrib/wyhash\n-            contrib/hashidsxx\n             contrib/c-ares\n             contrib/morton-nd\n             contrib/xxHash\ndiff --git a/tests/queries/0_stateless/02293_hashid.reference b/tests/queries/0_stateless/02293_hashid.reference\ndeleted file mode 100644\nindex dfc78349c05f..000000000000\n--- a/tests/queries/0_stateless/02293_hashid.reference\n+++ /dev/null\n@@ -1,15 +0,0 @@\n-0\tgY\n-1\tjR\n-2\tk5\n-3\tl5\n-4\tmO\n-0\tpbgkmdljlpjoapne\n-1\takemglnjepjpodba\n-2\tobmgndljgajpkeao\n-3\tdldokmpjpgjgeanb\n-4\tnkdlpgajngjnobme\n-YQrvD5XGvbx\n-Bm3zaOq7zbp\n-oV\n-oV\n-6b\ndiff --git a/tests/queries/0_stateless/02293_hashid.sql b/tests/queries/0_stateless/02293_hashid.sql\ndeleted file mode 100644\nindex 06af0b5e1d8b..000000000000\n--- a/tests/queries/0_stateless/02293_hashid.sql\n+++ /dev/null\n@@ -1,16 +0,0 @@\n--- Tags: no-upgrade-check\n-SET allow_experimental_hash_functions = 1;\n-\n-select number, hashid(number) from system.numbers limit 5;\n-select number, hashid(number, 's3cr3t', 16, 'abcdefghijklmnop') from system.numbers limit 5;\n-select hashid(1234567890123456, 's3cr3t');\n-select hashid(1234567890123456, 's3cr3t2');\n-\n-SELECT  hashid(1, hashid(2));\n-SELECT  hashid(1, 'k5');\n-SELECT  hashid(1, 'k5_othersalt');\n-\n--- https://github.com/ClickHouse/ClickHouse/issues/39672\n-SELECT\n-    JSONExtractRaw(257, NULL),\n-    hashid(1024, if(rand() % 10, 'truetruetruetrue', NULL), 's3\\0r3t'); -- {serverError 43}\ndiff --git a/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference b/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference\nindex fc00bfdadca7..595ebb483d5c 100644\n--- a/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference\n+++ b/tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference\n@@ -346,7 +346,6 @@ hasAny\n hasColumnInTable\n hasSubstr\n hasThreadFuzzer\n-hashid\n hex\n hiveHash\n hop\n",
  "problem_statement": "Crash bug: ClickHouse Server 23.7.1.1659 crashed through a SELECT statement calling the experimental 'hashid' function\n**Describe the bug**\r\nClickHouse Server 23.7.1.1659 crashed through a SELECT statement calling the experimental 'hashid' function.\r\n\r\n**How to reproduce**\r\nThe SQL statement to reproduce:\r\n```sql\r\nSET allow_experimental_hash_functions = 1;\r\nSELECT hashid ( 5 , '\u0451\u0451\u0451\u0451\u0451\u0451\u0451\u0451' ) ;\r\n```\r\nIt can be reproduced on the official docker image. (`clickhouse/clickhouse-server:head` and `clickhouse/clickhouse-server:latest`).\r\n\r\nThe log traced by ClickHouse Server:\r\n```\r\nSELECT hashid(5, '\u0451\u0451\u0451\u0451\u0451\u0451\u0451\u0451')\r\n\r\nQuery id: 686c19d4-4cc1-43c2-88c6-de068fbcdcce\r\n\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.616755 [ 337 ] <Fatal> BaseDaemon: ########################################\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.616820 [ 337 ] <Fatal> BaseDaemon: (version 23.7.1.1659 (official build), build id: 2A82CED3B49248890AFC97BDD6FE0D5C0590676F, git hash: 234b5047b5cd093b8950bb8de3725eacffe02dc0) (from thread 48) (query_id: 686c19d4-4cc1-43c2-88c6-de068fbcdcce) (query: SELECT hashid ( 5 , '\u0451\u0451\u0451\u0451\u0451\u0451\u0451\u0451' ) ;) Received signal Segmentation fault (11)\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.616852 [ 337 ] <Fatal> BaseDaemon: Address: 0x7f0a784363b5. Access: read. Address not mapped to object.\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.616881 [ 337 ] <Fatal> BaseDaemon: Stack trace: 0x00000000118934e5 0x0000000009064f7a 0x0000000008cf1a6a 0x0000000008cf100e 0x0000000012c2f22f 0x0000000012c2ed78 0x0000000012c2f1d2 0x0000000012c2fca2 0x0000000012c30f99 0x00000000133bb50a 0x00000000133bac00 0x00000000135ceec0 0x00000000135da74f 0x00000000135d2020 0x00000000135d8a68 0x00000000135c6b15 0x00000000135a501b 0x00000000135b435d 0x00000000135ba78e 0x0000000013ce4d2c 0x0000000013cdcdda 0x0000000013cd681d 0x0000000013d7cdc6 0x0000000013d7a9d3 0x0000000013c8f9de 0x00000000140b1feb 0x00000000140ae68e 0x0000000014ed69c4 0x0000000014eedc79 0x0000000017e7a154 0x0000000017e7b371 0x0000000017ffd207 0x0000000017ffac3c 0x00007f0997269609 0x00007f099718e133\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.616969 [ 337 ] <Fatal> BaseDaemon: 2. hashidsxx::Hashids::Hashids(String const&, unsigned int, String const&) @ 0x00000000118934e5 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617035 [ 337 ] <Fatal> BaseDaemon: 3. ? @ 0x0000000009064f7a in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617095 [ 337 ] <Fatal> BaseDaemon: 4. ? @ 0x0000000008cf1a6a in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617151 [ 337 ] <Fatal> BaseDaemon: 5. ? @ 0x0000000008cf100e in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617246 [ 337 ] <Fatal> BaseDaemon: 6. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000012c2f22f in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617284 [ 337 ] <Fatal> BaseDaemon: 7. DB::IExecutableFunction::defaultImplementationForConstantArguments(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000012c2ed78 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617348 [ 337 ] <Fatal> BaseDaemon: 8. DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000012c2f1d2 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617389 [ 337 ] <Fatal> BaseDaemon: 9. DB::IExecutableFunction::executeWithoutSparseColumns(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000012c2fca2 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617435 [ 337 ] <Fatal> BaseDaemon: 10. DB::IExecutableFunction::execute(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x0000000012c30f99 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617497 [ 337 ] <Fatal> BaseDaemon: 11. DB::ActionsDAG::addFunctionImpl(std::shared_ptr<DB::IFunctionBase const> const&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>>, String, std::shared_ptr<DB::IDataType const>, bool) @ 0x00000000133bb50a in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617539 [ 337 ] <Fatal> BaseDaemon: 12. DB::ActionsDAG::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<DB::ActionsDAG::Node const*, std::allocator<DB::ActionsDAG::Node const*>>, String) @ 0x00000000133bac00 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617581 [ 337 ] <Fatal> BaseDaemon: 13. DB::ScopeStack::addFunction(std::shared_ptr<DB::IFunctionOverloadResolver> const&, std::vector<String, std::allocator<String>> const&, String) @ 0x00000000135ceec0 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617609 [ 337 ] <Fatal> BaseDaemon: 14. ? @ 0x00000000135da74f in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617649 [ 337 ] <Fatal> BaseDaemon: 15. DB::ActionsMatcher::visit(DB::ASTFunction const&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000135d2020 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617696 [ 337 ] <Fatal> BaseDaemon: 16. DB::ActionsMatcher::visit(DB::ASTExpressionList&, std::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x00000000135d8a68 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617736 [ 337 ] <Fatal> BaseDaemon: 17. ? @ 0x00000000135c6b15 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617804 [ 337 ] <Fatal> BaseDaemon: 18. DB::ExpressionAnalyzer::getRootActions(std::shared_ptr<DB::IAST> const&, bool, std::shared_ptr<DB::ActionsDAG>&, bool) @ 0x00000000135a501b in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617857 [ 337 ] <Fatal> BaseDaemon: 19. DB::SelectQueryExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool) @ 0x00000000135b435d in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617917 [ 337 ] <Fatal> BaseDaemon: 20. DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::shared_ptr<DB::FilterDAGInfo> const&, std::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x00000000135ba78e in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.617953 [ 337 ] <Fatal> BaseDaemon: 21. DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x0000000013ce4d2c in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.618001 [ 337 ] <Fatal> BaseDaemon: 22. ? @ 0x0000000013cdcdda in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.618120 [ 337 ] <Fatal> BaseDaemon: 23. DB::InterpreterSelectQuery::InterpreterSelectQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context> const&, std::optional<DB::Pipe>, std::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::PreparedSets>) @ 0x0000000013cd681d in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.618160 [ 337 ] <Fatal> BaseDaemon: 24. DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::shared_ptr<DB::IAST> const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013d7cdc6 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.618200 [ 337 ] <Fatal> BaseDaemon: 25. DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x0000000013d7a9d3 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.618237 [ 337 ] <Fatal> BaseDaemon: 26. DB::InterpreterFactory::get(std::shared_ptr<DB::IAST>&, std::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x0000000013c8f9de in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.618274 [ 337 ] <Fatal> BaseDaemon: 27. ? @ 0x00000000140b1feb in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.618314 [ 337 ] <Fatal> BaseDaemon: 28. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x00000000140ae68e in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.618353 [ 337 ] <Fatal> BaseDaemon: 29. DB::TCPHandler::runImpl() @ 0x0000000014ed69c4 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.618401 [ 337 ] <Fatal> BaseDaemon: 30. DB::TCPHandler::run() @ 0x0000000014eedc79 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.618463 [ 337 ] <Fatal> BaseDaemon: 31. Poco::Net::TCPServerConnection::start() @ 0x0000000017e7a154 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.618512 [ 337 ] <Fatal> BaseDaemon: 32. Poco::Net::TCPServerDispatcher::run() @ 0x0000000017e7b371 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.618547 [ 337 ] <Fatal> BaseDaemon: 33. Poco::PooledThread::run() @ 0x0000000017ffd207 in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.618574 [ 337 ] <Fatal> BaseDaemon: 34. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000017ffac3c in /usr/bin/clickhouse\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.618605 [ 337 ] <Fatal> BaseDaemon: 35. ? @ 0x00007f0997269609 in ?\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.618637 [ 337 ] <Fatal> BaseDaemon: 36. clone @ 0x00007f099718e133 in ?\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.893375 [ 337 ] <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 7D28AF63E0E09B75DF5876280E0C8DBB)\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.893833 [ 337 ] <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues\r\n[25b36a6e4a9c] 2023.07.21 10:00:04.893964 [ 337 ] <Fatal> BaseDaemon: Changed settings: allow_experimental_hash_functions = true\r\nError on processing query: Code: 32. DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000. (ATTEMPT_TO_READ_AFTER_EOF) (version 23.7.1.1659 (official build))\r\n```\n",
  "hints_text": "cc: @mnutt, @yakov-olkhovskiy ",
  "created_at": "2023-07-22T02:43:46Z",
  "modified_files": [
    ".gitmodules",
    "contrib/CMakeLists.txt",
    "contrib/hashidsxx",
    "contrib/hashidsxx-cmake/CMakeLists.txt",
    "src/Core/Settings.h",
    "src/Functions/CMakeLists.txt",
    "src/Functions/FunctionHashID.cpp",
    "src/Functions/FunctionHashID.h"
  ],
  "modified_test_files": [
    "docker/test/fasttest/run.sh",
    "tests/queries/0_stateless/02293_hashid.reference",
    "tests/queries/0_stateless/02293_hashid.sql",
    "tests/queries/0_stateless/02415_all_new_functions_must_be_documented.reference"
  ]
}