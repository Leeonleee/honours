diff --git a/dbms/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh b/dbms/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh
index 1225cd43c5ec..1bf995a1a7e3 100755
--- a/dbms/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh
+++ b/dbms/tests/queries/0_stateless/00634_performance_introspection_and_logging.sh
@@ -88,14 +88,14 @@ SELECT PN, PVq, PVt FROM
     ARRAY JOIN ProfileEvents.Names AS PN, ProfileEvents.Values AS PV
     WHERE event_date >= today()-1 AND query_id='$query_id'
     GROUP BY PN
-)
+) js1
 ANY INNER JOIN
 (
     SELECT PN, PV AS PVq
     FROM system.query_log
     ARRAY JOIN ProfileEvents.Names AS PN, ProfileEvents.Values AS PV
     WHERE event_date >= today()-1 AND query_id='$query_id'
-)
+) js2
 USING PN
 WHERE
     NOT PN IN ('ContextLock') AND
diff --git a/dbms/tests/queries/0_stateless/00952_input_function.sh b/dbms/tests/queries/0_stateless/00952_input_function.sh
index 374cb5f9249d..696c9c675600 100755
--- a/dbms/tests/queries/0_stateless/00952_input_function.sh
+++ b/dbms/tests/queries/0_stateless/00952_input_function.sh
@@ -18,12 +18,12 @@ ${CLICKHOUSE_CLIENT} --query="SELECT * FROM input_function_table_2 FORMAT CSV"
 
 ${CLICKHOUSE_CLIENT} --query="DROP TABLE IF EXISTS input_function_table_3"
 ${CLICKHOUSE_CLIENT} --query="CREATE TABLE input_function_table_3 (a String, b Date, c Int32, d Int16) ENGINE=Memory()"
-cat ${CLICKHOUSE_TMP}/data_for_input_function.csv | ${CLICKHOUSE_CLIENT} --query="INSERT INTO input_function_table_3 (a, b, c) SELECT * FROM (SELECT s, b, c*c FROM input('s String, b Int32, c Int32') JOIN input_function_table_1 ON s=input_function_table_1.a) FORMAT CSV"
+cat ${CLICKHOUSE_TMP}/data_for_input_function.csv | ${CLICKHOUSE_CLIENT} --query="INSERT INTO input_function_table_3 (a, b, c) SELECT * FROM (SELECT s, b, c*c FROM input('s String, b Int32, c Int32') js1 JOIN input_function_table_1 ON s=input_function_table_1.a) FORMAT CSV"
 ${CLICKHOUSE_CLIENT} --query="SELECT * FROM input_function_table_3 FORMAT CSV"
 
 ${CLICKHOUSE_CLIENT} --query="DROP TABLE IF EXISTS input_function_table_4"
 ${CLICKHOUSE_CLIENT} --query="CREATE TABLE input_function_table_4 (a String, b Date, c Int32, d Int16) ENGINE=Memory()"
-cat ${CLICKHOUSE_TMP}/data_for_input_function.csv | ${CLICKHOUSE_CURL} -sS "${CLICKHOUSE_URL}&query=INSERT%20INTO%20input_function_table_4%20%28a%2C%20b%2C%20c%29%20SELECT%20%2A%20FROM%20%28SELECT%20s%2C%20b%2C%20c%2Ac%20FROM%20input%28%27s%20String%2C%20b%20Int32%2C%20c%20Int32%27%29%20JOIN%20input_function_table_1%20ON%20s%3Dinput_function_table_1.a%29%20FORMAT%20CSV" --data-binary @-
+cat ${CLICKHOUSE_TMP}/data_for_input_function.csv | ${CLICKHOUSE_CURL} -sS "${CLICKHOUSE_URL}&query=INSERT%20INTO%20input_function_table_4%20%28a%2C%20b%2C%20c%29%20SELECT%20%2A%20FROM%20%28SELECT%20s%2C%20b%2C%20c%2Ac%20FROM%20input%28%27s%20String%2C%20b%20Int32%2C%20c%20Int32%27%29%20js1%20JOIN%20input_function_table_1%20ON%20s%3Dinput_function_table_1.a%29%20FORMAT%20CSV" --data-binary @-
 ${CLICKHOUSE_CLIENT} --query="SELECT * FROM input_function_table_4 FORMAT CSV"
 
 
diff --git a/dbms/tests/queries/0_stateless/00980_full_join_crash_fancyqlx.sql b/dbms/tests/queries/0_stateless/00980_full_join_crash_fancyqlx.sql
index 2514b6ded1bb..20209f453a32 100644
--- a/dbms/tests/queries/0_stateless/00980_full_join_crash_fancyqlx.sql
+++ b/dbms/tests/queries/0_stateless/00980_full_join_crash_fancyqlx.sql
@@ -7,8 +7,8 @@ insert into test_join values ('2019-01-01', 2, 'b');
 insert into test_join values ('2019-01-01', 3, 'c');
 insert into test_join values ('2019-01-01', 1, null);
 
-SELECT id, date, name FROM (SELECT id, date, name FROM test_join GROUP BY id, name, date)
-FULL OUTER JOIN (SELECT id, date, name FROM test_join GROUP BY id, name, date)
+SELECT id, date, name FROM (SELECT id, date, name FROM test_join GROUP BY id, name, date) js1
+FULL OUTER JOIN (SELECT id, date, name FROM test_join GROUP BY id, name, date) js2
 USING (id, name, date)
 ORDER BY id, name;
 
diff --git a/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.reference b/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.reference
index 7b6947fa9a24..f3e23bda1585 100644
--- a/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.reference
+++ b/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.reference
@@ -1,8 +1,8 @@
-0	['left']	0	['left']	\N
-1	['left']	1	['left']	1
-2	[]	\N	[]	2
-['left']	0	['left']	\N
-['left']	1	['left']	1
-[]	\N	[]	2
+0	['left']	0	[]	\N
+1	['left']	1	['right']	1
+2	[]	\N	['right']	2
+['left']	0	[]	\N
+['left']	1	['right']	1
+[]	\N	['right']	2
 ['left']	42	\N
 ['right']	\N	42
diff --git a/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.sql b/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.sql
index 2a24c6dd2965..523996eca105 100644
--- a/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.sql
+++ b/dbms/tests/queries/0_stateless/00999_join_not_nullable_types.sql
@@ -3,32 +3,32 @@ SET join_use_nulls = 1;
 SELECT * FROM
 (
     SELECT number, ['left'] as ar, number AS left_number FROM system.numbers LIMIT 2
-)
+) js1
 FULL JOIN
 (
     SELECT number, ['right'] as ar, number AS right_number FROM system.numbers LIMIT 1, 2
-)
+) js2
 USING (number)
 ORDER BY number;
 
 SELECT * FROM
 (
     SELECT ['left'] as ar, number AS left_number FROM system.numbers LIMIT 2
-)
+) js1
 FULL JOIN
 (
     SELECT ['right'] as ar, number AS right_number FROM system.numbers LIMIT 1, 2
-)
+) js2
 ON left_number = right_number
 ORDER BY left_number;
 
 SELECT * FROM
 (
     SELECT ['left'] as ar, 42 AS left_number
-)
+) js1
 FULL JOIN
 (
     SELECT ['right'] as ar, 42 AS right_number
-)
+) js2
 USING(ar)
 ORDER BY left_number;
diff --git a/dbms/tests/queries/0_stateless/01008_materialized_view_henyihanwobushi.sql b/dbms/tests/queries/0_stateless/01008_materialized_view_henyihanwobushi.sql
index 8deec159dcad..8def546cd2ec 100644
--- a/dbms/tests/queries/0_stateless/01008_materialized_view_henyihanwobushi.sql
+++ b/dbms/tests/queries/0_stateless/01008_materialized_view_henyihanwobushi.sql
@@ -5,7 +5,7 @@ DROP TABLE IF EXISTS view_foo_bar;
 create table foo (ddate Date, id Int64, n String) ENGINE = ReplacingMergeTree(ddate, (id), 8192);
 create table bar (ddate Date, id Int64, n String, foo_id Int64) ENGINE = ReplacingMergeTree(ddate, (id), 8192);
 insert into bar (id, n, foo_id) values (1, 'bar_n_1', 1);
-create MATERIALIZED view view_foo_bar ENGINE = ReplacingMergeTree(ddate, (bar_id), 8192) as select ddate, bar_id, bar_n, foo_id, foo_n from (select ddate, id as bar_id, n as bar_n, foo_id from bar) any left join (select id as foo_id, n as foo_n from foo) using foo_id;
+create MATERIALIZED view view_foo_bar ENGINE = ReplacingMergeTree(ddate, (bar_id), 8192) as select ddate, bar_id, bar_n, foo_id, foo_n from (select ddate, id as bar_id, n as bar_n, foo_id from bar) js1 any left join (select id as foo_id, n as foo_n from foo) js2 using foo_id;
 insert into bar (id, n, foo_id) values (1, 'bar_n_1', 1);
 SELECT * FROM view_foo_bar;
 
diff --git a/dbms/tests/queries/0_stateless/01009_insert_select_data_loss.sql b/dbms/tests/queries/0_stateless/01009_insert_select_data_loss.sql
index 472056176c41..a153d7dbc308 100644
--- a/dbms/tests/queries/0_stateless/01009_insert_select_data_loss.sql
+++ b/dbms/tests/queries/0_stateless/01009_insert_select_data_loss.sql
@@ -1,7 +1,9 @@
 drop table if exists tab;
 create table tab (x UInt64) engine = MergeTree order by tuple();
 
-insert into tab select number as n from numbers(20) semi left join (select number * 10 as n from numbers(2)) using(n) settings max_block_size = 5;
+insert into tab select number as n from numbers(20) nums
+semi left join (select number * 10 as n from numbers(2)) js2 using(n)
+settings max_block_size = 5;
 select * from tab order by x;
 
 drop table tab;
diff --git a/dbms/tests/queries/0_stateless/01010_pmj_on_disk.sql b/dbms/tests/queries/0_stateless/01010_pmj_on_disk.sql
index 2b88b528bbf8..28bc0ced3b74 100644
--- a/dbms/tests/queries/0_stateless/01010_pmj_on_disk.sql
+++ b/dbms/tests/queries/0_stateless/01010_pmj_on_disk.sql
@@ -1,6 +1,6 @@
 SET join_algorithm = 'hash';
 
-SELECT number as n, j FROM numbers(4)
+SELECT number as n, j FROM numbers(4) nums
 ANY LEFT JOIN (
     SELECT number * 2 AS n, number + 10 AS j
     FROM numbers(4000)
@@ -9,7 +9,7 @@ USING n;
 
 SET max_rows_in_join = 1000;
 
-SELECT number as n, j FROM numbers(4)
+SELECT number as n, j FROM numbers(4) nums
 ANY LEFT JOIN (
     SELECT number * 2 AS n, number + 10 AS j
     FROM numbers(4000)
@@ -18,7 +18,7 @@ USING n; -- { serverError 191 }
 
 SET join_algorithm = 'partial_merge';
 
-SELECT number as n, j FROM numbers(4)
+SELECT number as n, j FROM numbers(4) nums
 ANY LEFT JOIN (
     SELECT number * 2 AS n, number + 10 AS j
     FROM numbers(4000)
@@ -27,7 +27,7 @@ USING n;
 
 SET partial_merge_join_optimizations = 1;
 
-SELECT number as n, j FROM numbers(4)
+SELECT number as n, j FROM numbers(4) nums
 ANY LEFT JOIN (
     SELECT number * 2 AS n, number + 10 AS j
     FROM numbers(4000)
@@ -36,7 +36,7 @@ USING n;
 
 SET join_algorithm = 'auto';
 
-SELECT number as n, j FROM numbers(4)
+SELECT number as n, j FROM numbers(4) nums
 ANY LEFT JOIN (
     SELECT number * 2 AS n, number + 10 AS j
     FROM numbers(4000)
diff --git a/dbms/tests/queries/0_stateless/01010_pmj_right_table_memory_limits.sql b/dbms/tests/queries/0_stateless/01010_pmj_right_table_memory_limits.sql
index fc0af53c5ae7..8a23b58b66f4 100644
--- a/dbms/tests/queries/0_stateless/01010_pmj_right_table_memory_limits.sql
+++ b/dbms/tests/queries/0_stateless/01010_pmj_right_table_memory_limits.sql
@@ -1,6 +1,6 @@
 SET max_memory_usage = 32000000;
 
-SELECT number * 200000 as n, j FROM numbers(5)
+SELECT number * 200000 as n, j FROM numbers(5) nums
 ANY LEFT JOIN (
     SELECT number * 2 AS n, number AS j
     FROM numbers(1000000)
@@ -10,14 +10,14 @@ USING n; -- { serverError 241 }
 SET partial_merge_join = 1;
 SET default_max_bytes_in_join = 0;
 
-SELECT number * 200000 as n, j FROM numbers(5)
+SELECT number * 200000 as n, j FROM numbers(5) nums
 ANY LEFT JOIN (
     SELECT number * 2 AS n, number AS j
     FROM numbers(1000000)
 ) js2
 USING n; -- { serverError 12 }
 
-SELECT number * 200000 as n, j FROM numbers(5)
+SELECT number * 200000 as n, j FROM numbers(5) nums
 ANY LEFT JOIN (
     SELECT number * 2 AS n, number AS j
     FROM numbers(1000000)
@@ -25,7 +25,7 @@ ANY LEFT JOIN (
 USING n
 SETTINGS max_bytes_in_join = 30000000; -- { serverError 241 }
 
-SELECT number * 200000 as n, j FROM numbers(5)
+SELECT number * 200000 as n, j FROM numbers(5) nums
 ANY LEFT JOIN (
     SELECT number * 2 AS n, number AS j
     FROM numbers(1000000)
@@ -36,7 +36,7 @@ SETTINGS max_bytes_in_join = 10000000;
 
 SET partial_merge_join_optimizations = 1;
 
-SELECT number * 200000 as n, j FROM numbers(5)
+SELECT number * 200000 as n, j FROM numbers(5) nums
 LEFT JOIN (
     SELECT number * 2 AS n, number AS j
     FROM numbers(1000000)
@@ -47,7 +47,7 @@ SETTINGS max_rows_in_join = 100000;
 
 SET default_max_bytes_in_join = 10000000;
 
-SELECT number * 200000 as n, j FROM numbers(5)
+SELECT number * 200000 as n, j FROM numbers(5) nums
 JOIN (
     SELECT number * 2 AS n, number AS j
     FROM numbers(1000000)
diff --git a/dbms/tests/queries/0_stateless/01015_empty_in_inner_right_join.sql b/dbms/tests/queries/0_stateless/01015_empty_in_inner_right_join.sql
index e6343befabd9..e0d06a7e3b6b 100644
--- a/dbms/tests/queries/0_stateless/01015_empty_in_inner_right_join.sql
+++ b/dbms/tests/queries/0_stateless/01015_empty_in_inner_right_join.sql
@@ -1,3 +1,5 @@
+SET joined_subquery_requires_alias = 0;
+
 SELECT 'IN empty set',count() FROM system.numbers WHERE number IN (SELECT toUInt64(1) WHERE 0);
 SELECT 'IN non-empty set',count() FROM (SELECT number FROM system.numbers LIMIT 10) t1 WHERE t1.number IN (SELECT toUInt64(1) WHERE 1);
 SELECT 'NOT IN empty set',count() FROM (SELECT number FROM system.numbers LIMIT 10) WHERE number NOT IN (SELECT toUInt64(1) WHERE 0);
diff --git a/dbms/tests/queries/0_stateless/01046_materialized_view_with_join_over_distributed.sql b/dbms/tests/queries/0_stateless/01046_materialized_view_with_join_over_distributed.sql
index 25991bb88199..7aac720865dc 100644
--- a/dbms/tests/queries/0_stateless/01046_materialized_view_with_join_over_distributed.sql
+++ b/dbms/tests/queries/0_stateless/01046_materialized_view_with_join_over_distributed.sql
@@ -5,7 +5,7 @@ DROP TABLE IF EXISTS t_d;
 DROP TABLE IF EXISTS t_v;
 CREATE TABLE t (`A` Int64) ENGINE = MergeTree() ORDER BY tuple();
 CREATE TABLE t_d AS t ENGINE = Distributed(test_shard_localhost, currentDatabase(), t);
-CREATE MATERIALIZED VIEW t_v ENGINE = MergeTree() ORDER BY tuple() AS SELECT A FROM t LEFT JOIN ( SELECT toInt64(dummy) AS A FROM system.one ) USING (A);
+CREATE MATERIALIZED VIEW t_v ENGINE = MergeTree() ORDER BY tuple() AS SELECT A FROM t LEFT JOIN ( SELECT toInt64(dummy) AS A FROM system.one ) js2 USING (A);
 
 INSERT INTO t_d SELECT number FROM numbers(2);
 SELECT * FROM t_v ORDER BY A;
diff --git a/dbms/tests/queries/0_stateless/01049_join_low_card_crash.sql b/dbms/tests/queries/0_stateless/01049_join_low_card_crash.sql
index 99bf09c42e17..4465fc9581f7 100644
--- a/dbms/tests/queries/0_stateless/01049_join_low_card_crash.sql
+++ b/dbms/tests/queries/0_stateless/01049_join_low_card_crash.sql
@@ -7,13 +7,13 @@ CREATE TABLE Beta (foo LowCardinality(String), baz UInt64) ENGINE = Memory;
 INSERT INTO Alpha VALUES ('a', 1);
 INSERT INTO Beta VALUES ('a', 2), ('b', 3);
 
-SELECT * FROM Alpha FULL JOIN (SELECT 'b' as foo) USING (foo) ORDER BY foo;
+SELECT * FROM Alpha FULL JOIN (SELECT 'b' as foo) js2 USING (foo) ORDER BY foo;
 SELECT * FROM Alpha FULL JOIN Beta USING (foo) ORDER BY foo;
 SELECT * FROM Alpha FULL JOIN Beta ON Alpha.foo = Beta.foo ORDER BY foo;
 
 SET join_use_nulls = 1;
 
-SELECT * FROM Alpha FULL JOIN (SELECT 'b' as foo) USING (foo) ORDER BY foo;
+SELECT * FROM Alpha FULL JOIN (SELECT 'b' as foo) js2 USING (foo) ORDER BY foo;
 SELECT * FROM Alpha FULL JOIN Beta USING (foo) ORDER BY foo;
 SELECT * FROM Alpha FULL JOIN Beta ON Alpha.foo = Beta.foo ORDER BY foo;
 
diff --git a/dbms/tests/queries/0_stateless/01050_engine_join_crash.sql b/dbms/tests/queries/0_stateless/01050_engine_join_crash.sql
index 1b587ec1c2a0..285952056b45 100644
--- a/dbms/tests/queries/0_stateless/01050_engine_join_crash.sql
+++ b/dbms/tests/queries/0_stateless/01050_engine_join_crash.sql
@@ -7,9 +7,9 @@ CREATE TABLE testJoinTable (number UInt64, data String) ENGINE = Join(ANY, INNER
 
 INSERT INTO testJoinTable VALUES (1, '1'), (2, '2'), (3, '3');
 
-SELECT * FROM (SELECT * FROM numbers(10)) INNER JOIN testJoinTable USING number; -- { serverError 264 }
-SELECT * FROM (SELECT * FROM numbers(10)) INNER JOIN (SELECT * FROM testJoinTable) USING number;
-SELECT * FROM (SELECT * FROM numbers(10)) ANY INNER JOIN testJoinTable USING number;
+SELECT * FROM (SELECT * FROM numbers(10)) js1 INNER JOIN testJoinTable USING number; -- { serverError 264 }
+SELECT * FROM (SELECT * FROM numbers(10)) js1 INNER JOIN (SELECT * FROM testJoinTable) js2 USING number;
+SELECT * FROM (SELECT * FROM numbers(10)) js1 ANY INNER JOIN testJoinTable USING number;
 SELECT * FROM testJoinTable;
 
 DROP TABLE testJoinTable;
diff --git a/dbms/tests/queries/0_stateless/01050_engine_join_view_crash.sql b/dbms/tests/queries/0_stateless/01050_engine_join_view_crash.sql
index 93fa2a6bd826..7da8613cd2c4 100644
--- a/dbms/tests/queries/0_stateless/01050_engine_join_view_crash.sql
+++ b/dbms/tests/queries/0_stateless/01050_engine_join_view_crash.sql
@@ -11,9 +11,9 @@ INSERT INTO a VALUES (1,1,1)(2,2,2)(3,3,3);
 INSERT INTO id1 VALUES (1,1)(2,2)(3,3);
 INSERT INTO id2 VALUES (1,1)(2,2)(3,3);
 
-SELECT * from (SELECT * FROM a ANY LEFT OUTER JOIN id1 USING id1) ANY LEFT OUTER JOIN id2 USING id2;
+SELECT * from (SELECT * FROM a ANY LEFT OUTER JOIN id1 USING id1) js1 ANY LEFT OUTER JOIN id2 USING id2;
 
-create view b as (SELECT * from (SELECT * FROM a ANY LEFT OUTER JOIN id1 USING id1) ANY LEFT OUTER JOIN id2 USING id2);
+create view b as (SELECT * from (SELECT * FROM a ANY LEFT OUTER JOIN id1 USING id1) js1 ANY LEFT OUTER JOIN id2 USING id2);
 SELECT '-';
 SELECT * FROM b;
 
diff --git a/dbms/tests/queries/0_stateless/01056_predicate_optimizer_bugs.sql b/dbms/tests/queries/0_stateless/01056_predicate_optimizer_bugs.sql
index e1e185be0769..db6c78e3cc6d 100644
--- a/dbms/tests/queries/0_stateless/01056_predicate_optimizer_bugs.sql
+++ b/dbms/tests/queries/0_stateless/01056_predicate_optimizer_bugs.sql
@@ -1,5 +1,6 @@
 SET enable_debug_queries = 1;
 SET enable_optimize_predicate_expression = 1;
+SET joined_subquery_requires_alias = 0;
 
 -- https://github.com/ClickHouse/ClickHouse/issues/3885
 -- https://github.com/ClickHouse/ClickHouse/issues/5485
diff --git a/dbms/tests/queries/0_stateless/01062_pm_all_join_with_block_continuation.sql b/dbms/tests/queries/0_stateless/01062_pm_all_join_with_block_continuation.sql
index e79dd0ee5a85..d264d73b0bfa 100644
--- a/dbms/tests/queries/0_stateless/01062_pm_all_join_with_block_continuation.sql
+++ b/dbms/tests/queries/0_stateless/01062_pm_all_join_with_block_continuation.sql
@@ -4,17 +4,17 @@ SET partial_merge_join = 1;
 SELECT 'defaults';
     
 SELECT count(1) FROM (
-    SELECT materialize(1) as k, n FROM numbers(10)
+    SELECT materialize(1) as k, n FROM numbers(10) nums
     JOIN (SELECT materialize(1) AS k, number n FROM numbers(1000000)) j
     USING k);
 
 SELECT count(1) FROM (
-    SELECT materialize(1) as k, n FROM numbers(1000)
+    SELECT materialize(1) as k, n FROM numbers(1000) nums
     JOIN (SELECT materialize(1) AS k, number n FROM numbers(10000)) j
     USING k);
 
 SELECT count(1), uniqExact(n) FROM (
-    SELECT materialize(1) as k, n FROM numbers(1000000)
+    SELECT materialize(1) as k, n FROM numbers(1000000) nums
     JOIN (SELECT materialize(1) AS k, number n FROM numbers(10)) j
     USING k);
 
@@ -22,12 +22,12 @@ SELECT count(1), uniqExact(n) FROM (
 SET max_joined_block_size_rows = 0;
     
 SELECT count(1) FROM (
-    SELECT materialize(1) as k, n FROM numbers(10)
+    SELECT materialize(1) as k, n FROM numbers(10) nums
     JOIN (SELECT materialize(1) AS k, number n FROM numbers(1000000)) j
     USING k); -- { serverError 241 }
 
 SELECT count(1) FROM (
-    SELECT materialize(1) as k, n FROM numbers(1000)
+    SELECT materialize(1) as k, n FROM numbers(1000) nums
     JOIN (SELECT materialize(1) AS k, number n FROM numbers(10000)) j
     USING k); -- { serverError 241 }
 
@@ -35,17 +35,17 @@ SELECT 'max_joined_block_size_rows = 2000';
 SET max_joined_block_size_rows = 2000;
 
 SELECT count(1) FROM (
-    SELECT materialize(1) as k, n FROM numbers(10)
+    SELECT materialize(1) as k, n FROM numbers(10) nums
     JOIN (SELECT materialize(1) AS k, number n FROM numbers(1000000)) j
     USING k);
 
 SELECT count(1), uniqExact(n) FROM (
-    SELECT materialize(1) as k, n FROM numbers(1000)
+    SELECT materialize(1) as k, n FROM numbers(1000) nums
     JOIN (SELECT materialize(1) AS k, number n FROM numbers(10000)) j
     USING k);
 
 SELECT count(1), uniqExact(n) FROM (
-    SELECT materialize(1) as k, n FROM numbers(1000000)
+    SELECT materialize(1) as k, n FROM numbers(1000000) nums
     JOIN (SELECT materialize(1) AS k, number n FROM numbers(10)) j
     USING k);
 
@@ -53,16 +53,16 @@ SELECT 'max_rows_in_join = 1000';
 SET max_rows_in_join = 1000;
 
 SELECT count(1) FROM (
-    SELECT materialize(1) as k, n FROM numbers(10)
+    SELECT materialize(1) as k, n FROM numbers(10) nums
     JOIN (SELECT materialize(1) AS k, number n FROM numbers(1000000)) j
     USING k);
 
 SELECT count(1), uniqExact(n) FROM (
-    SELECT materialize(1) as k, n FROM numbers(1000)
+    SELECT materialize(1) as k, n FROM numbers(1000) nums
     JOIN (SELECT materialize(1) AS k, number n FROM numbers(10000)) j
     USING k);
 
 SELECT count(1), uniqExact(n) FROM (
-    SELECT materialize(1) as k, n FROM numbers(1000000)
+    SELECT materialize(1) as k, n FROM numbers(1000000) nums
     JOIN (SELECT materialize(1) AS k, number n FROM numbers(10)) j
     USING k);
diff --git a/dbms/tests/queries/0_stateless/01063_create_column_set.sql b/dbms/tests/queries/0_stateless/01063_create_column_set.sql
index 733f90971f9c..b283fa22f611 100644
--- a/dbms/tests/queries/0_stateless/01063_create_column_set.sql
+++ b/dbms/tests/queries/0_stateless/01063_create_column_set.sql
@@ -6,7 +6,7 @@ FROM mt
 ANY LEFT JOIN
 (
     SELECT 1 AS x
-) USING (x)
+) js2 USING (x)
 PREWHERE x IN (1) WHERE y = today();
 
 DROP TABLE mt;
diff --git a/dbms/tests/queries/0_stateless/01064_incremental_streaming_from_2_src_with_feedback.sql b/dbms/tests/queries/0_stateless/01064_incremental_streaming_from_2_src_with_feedback.sql
index e5b4b9dbe337..984f897ec2ab 100644
--- a/dbms/tests/queries/0_stateless/01064_incremental_streaming_from_2_src_with_feedback.sql
+++ b/dbms/tests/queries/0_stateless/01064_incremental_streaming_from_2_src_with_feedback.sql
@@ -1,3 +1,5 @@
+SET joined_subquery_requires_alias = 0;
+
 SYSTEM STOP MERGES;
 
 -- incremental streaming usecase
diff --git a/dbms/tests/queries/0_stateless/01064_pm_all_join_const_and_nullable.sql b/dbms/tests/queries/0_stateless/01064_pm_all_join_const_and_nullable.sql
index 631fda510b05..6b87fd677444 100644
--- a/dbms/tests/queries/0_stateless/01064_pm_all_join_const_and_nullable.sql
+++ b/dbms/tests/queries/0_stateless/01064_pm_all_join_const_and_nullable.sql
@@ -1,87 +1,87 @@
 SET partial_merge_join = 1;
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT materialize(1) as k FROM numbers(1)
+SELECT materialize(1) as k FROM numbers(1) nums
 JOIN (SELECT materialize(1) AS k, number n FROM numbers(100000)) j
 USING k);
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT materialize(1) as k FROM numbers(1)
+SELECT materialize(1) as k FROM numbers(1) nums
 JOIN (SELECT 1 AS k, number n FROM numbers(100000)) j
 USING k);
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT 1 as k FROM numbers(1)
+SELECT 1 as k FROM numbers(1) nums
 JOIN (SELECT materialize(1) AS k, number n FROM numbers(100000)) j
 USING k);
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT 1 as k FROM numbers(1)
+SELECT 1 as k FROM numbers(1) nums
 JOIN (SELECT 1 AS k, number n FROM numbers(100000)) j
 USING k);
 
 SELECT 'first nullable';
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT materialize(toNullable(1)) as k FROM numbers(1)
+SELECT materialize(toNullable(1)) as k FROM numbers(1) nums
 JOIN (SELECT materialize(1) AS k, number n FROM numbers(100000)) j
 USING k);
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT materialize(toNullable(1)) as k FROM numbers(1)
+SELECT materialize(toNullable(1)) as k FROM numbers(1) nums
 JOIN (SELECT 1 AS k, number n FROM numbers(100000)) j
 USING k);
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT toNullable(1) as k FROM numbers(1)
+SELECT toNullable(1) as k FROM numbers(1) nums
 JOIN (SELECT materialize(1) AS k, number n FROM numbers(100000)) j
 USING k);
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT toNullable(1) as k FROM numbers(1)
+SELECT toNullable(1) as k FROM numbers(1) nums
 JOIN (SELECT 1 AS k, number n FROM numbers(100000)) j
 USING k);
 
 SELECT 'second nullable';
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT materialize(1) as k FROM numbers(1)
+SELECT materialize(1) as k FROM numbers(1) nums
 JOIN (SELECT materialize(toNullable(1)) AS k, number n FROM numbers(100000)) j
 USING k);
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT materialize(1) as k FROM numbers(1)
+SELECT materialize(1) as k FROM numbers(1) nums
 JOIN (SELECT toNullable(1) AS k, number n FROM numbers(100000)) j
 USING k);
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT 1 as k FROM numbers(1)
+SELECT 1 as k FROM numbers(1) nums
 JOIN (SELECT materialize(toNullable(1)) AS k, number n FROM numbers(100000)) j
 USING k);
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT 1 as k FROM numbers(1)
+SELECT 1 as k FROM numbers(1) nums
 JOIN (SELECT toNullable(1) AS k, number n FROM numbers(100000)) j
 USING k);
 
 SELECT 'both nullable';
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT materialize(toNullable(1)) as k FROM numbers(1)
+SELECT materialize(toNullable(1)) as k FROM numbers(1) nums
 JOIN (SELECT materialize(toNullable(1)) AS k, number n FROM numbers(100000)) j
 USING k);
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT materialize(toNullable(1)) as k FROM numbers(1)
+SELECT materialize(toNullable(1)) as k FROM numbers(1) nums
 JOIN (SELECT toNullable(1) AS k, number n FROM numbers(100000)) j
 USING k);
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT toNullable(1) as k FROM numbers(1)
+SELECT toNullable(1) as k FROM numbers(1) nums
 JOIN (SELECT materialize(toNullable(1)) AS k, number n FROM numbers(100000)) j
 USING k);
 
 SELECT count(1), uniqExact(1) FROM (
-SELECT toNullable(1) as k FROM numbers(1)
+SELECT toNullable(1) as k FROM numbers(1) nums
 JOIN (SELECT toNullable(1) AS k, number n FROM numbers(100000)) j
 USING k);
diff --git a/dbms/tests/queries/0_stateless/01067_join_null.sql b/dbms/tests/queries/0_stateless/01067_join_null.sql
index 606723123685..bc888fe01baf 100644
--- a/dbms/tests/queries/0_stateless/01067_join_null.sql
+++ b/dbms/tests/queries/0_stateless/01067_join_null.sql
@@ -6,7 +6,7 @@ FROM
     SELECT NULL
     UNION ALL
     SELECT NULL
-)
+) js1
 ALL FULL OUTER JOIN 
 (
     SELECT 1 AS id
@@ -14,7 +14,7 @@ ALL FULL OUTER JOIN
     SELECT NULL
     UNION ALL
     SELECT NULL
-) USING (id)
+) js2 USING (id)
 ORDER BY id;
 
 SELECT '---';
@@ -23,11 +23,11 @@ SELECT *
 FROM 
 (
     SELECT NULL AS x
-)
+) js1
 INNER JOIN 
 (
     SELECT NULL AS x
-) USING (x);
+) js2 USING (x);
 
 SELECT '---';
 
@@ -35,8 +35,8 @@ SELECT *
 FROM 
 (
     SELECT NULL AS x
-)
+) js1
 FULL OUTER JOIN 
 (
     SELECT NULL AS x
-) USING (x);
+) js2 USING (x);
diff --git a/dbms/tests/queries/0_stateless/01081_PartialSortingTransform_full_column.sql b/dbms/tests/queries/0_stateless/01081_PartialSortingTransform_full_column.sql
index 556c967aae19..146107d6f3d3 100644
--- a/dbms/tests/queries/0_stateless/01081_PartialSortingTransform_full_column.sql
+++ b/dbms/tests/queries/0_stateless/01081_PartialSortingTransform_full_column.sql
@@ -2,7 +2,7 @@ drop table if exists test_01081;
 
 create table test_01081 (key Int) engine=MergeTree() order by key;
 insert into test_01081 select * from system.numbers limit 10;
-select 1 from remote('127.{1,2}', currentDatabase(), test_01081) join system.one as rhs on rhs.dummy = 1 order by 1;
+select 1 from remote('127.{1,2}', currentDatabase(), test_01081) lhs join system.one as rhs on rhs.dummy = 1 order by 1;
 
 -- With multiple blocks triggers:
 --
@@ -13,6 +13,6 @@ select 1 from remote('127.{1,2}', currentDatabase(), test_01081) join system.one
 -- With experimental_use_processors=1 (default at the time of writing).
 
 insert into test_01081 select * from system.numbers limit 10;
-select 1 from remote('127.{1,2}', currentDatabase(), test_01081) join system.one as rhs on rhs.dummy = 1 order by 1;
+select 1 from remote('127.{1,2}', currentDatabase(), test_01081) lhs join system.one as rhs on rhs.dummy = 1 order by 1;
 
 drop table if exists test_01081;
