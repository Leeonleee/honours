diff --git a/src/Functions/FunctionsMiscellaneous.h b/src/Functions/FunctionsMiscellaneous.h
index 3e2938f386b6..5703f72ce2ad 100644
--- a/src/Functions/FunctionsMiscellaneous.h
+++ b/src/Functions/FunctionsMiscellaneous.h
@@ -8,11 +8,13 @@
 #include <Columns/ColumnFunction.h>
 #include <DataTypes/DataTypesNumber.h>
 
+
 namespace DB
 {
 namespace ErrorCodes
 {
     extern const int LOGICAL_ERROR;
+    extern const int BAD_ARGUMENTS;
 }
 
 class ExecutableFunctionExpression : public IExecutableFunctionImpl
@@ -203,6 +205,11 @@ class FunctionCaptureOverloadResolver : public IFunctionOverloadResolverImpl
             const String & expression_return_name_)
         : expression_actions(std::move(expression_actions_))
     {
+        /// Check that expression does not contain unusual actions that will break blocks structure.
+        for (const auto & action : expression_actions->getActions())
+            if (action.type == ExpressionAction::Type::JOIN || action.type == ExpressionAction::Type::ARRAY_JOIN)
+                throw Exception("Expression with arrayJoin or other unusual action cannot be captured", ErrorCodes::BAD_ARGUMENTS);
+
         std::unordered_map<std::string, DataTypePtr> arguments_map;
 
         const auto & all_arguments = expression_actions->getRequiredColumnsWithTypes();
diff --git a/src/Functions/array/FunctionArrayMapped.h b/src/Functions/array/FunctionArrayMapped.h
index ee4c5c083d83..346f2e35555f 100644
--- a/src/Functions/array/FunctionArrayMapped.h
+++ b/src/Functions/array/FunctionArrayMapped.h
@@ -33,7 +33,8 @@ namespace ErrorCodes
   * arrayMap(x1,...,xn -> expression, array1,...,arrayn) - apply the expression to each element of the array (or set of parallel arrays).
   * arrayFilter(x -> predicate, array) - leave in the array only the elements for which the expression is true.
   *
-  * For some functions arrayCount, arrayExists, arrayAll, an overload of the form f(array) is available, which works in the same way as f(x -> x, array).
+  * For some functions arrayCount, arrayExists, arrayAll, an overload of the form f(array) is available,
+  *  which works in the same way as f(x -> x, array).
   *
   * See the example of Impl template parameter in arrayMap.cpp
   */
