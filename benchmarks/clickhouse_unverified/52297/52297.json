{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52297,
  "instance_id": "ClickHouse__ClickHouse-52297",
  "issue_numbers": [
    "52055"
  ],
  "base_commit": "a19f9534c0a045088f63b7b560019e6f01b0cf40",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp b/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp\nindex e611bb5b2ef9..b587b0b20f4e 100644\n--- a/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp\n@@ -92,18 +92,6 @@ static AggregateProjectionInfo getAggregatingProjectionInfo(\n     return info;\n }\n \n-static bool hasNullableOrMissingColumn(const DAGIndex & index, const Names & names)\n-{\n-    for (const auto & query_name : names)\n-    {\n-        auto jt = index.find(query_name);\n-        if (jt == index.end() || jt->second->result_type->isNullable())\n-            return true;\n-    }\n-\n-    return false;\n-}\n-\n struct AggregateFunctionMatch\n {\n     const AggregateDescription * description = nullptr;\n@@ -170,20 +158,14 @@ std::optional<AggregateFunctionMatches> matchAggregateFunctions(\n             }\n \n             /// This is a special case for the function count().\n-            /// We can assume that 'count(expr) == count()' if expr is not nullable.\n-            if (typeid_cast<const AggregateFunctionCount *>(candidate.function.get()))\n+            /// We can assume that 'count(expr) == count()' if expr is not nullable,\n+            /// which can be verified by simply casting to `AggregateFunctionCount *`.\n+            if (typeid_cast<const AggregateFunctionCount *>(aggregate.function.get()))\n             {\n-                bool has_nullable_or_missing_arg = false;\n-                has_nullable_or_missing_arg |= hasNullableOrMissingColumn(query_index, aggregate.argument_names);\n-                has_nullable_or_missing_arg |= hasNullableOrMissingColumn(proj_index, candidate.argument_names);\n-\n-                if (!has_nullable_or_missing_arg)\n-                {\n-                    /// we can ignore arguments for count()\n-                    found_match = true;\n-                    res.push_back({&candidate, DataTypes()});\n-                    break;\n-                }\n+                /// we can ignore arguments for count()\n+                found_match = true;\n+                res.push_back({&candidate, DataTypes()});\n+                break;\n             }\n \n             /// Now, function names and types matched.\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01710_minmax_count_projection_count_nullable.reference b/tests/queries/0_stateless/01710_minmax_count_projection_count_nullable.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01710_minmax_count_projection_count_nullable.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/01710_minmax_count_projection_count_nullable.sql b/tests/queries/0_stateless/01710_minmax_count_projection_count_nullable.sql\nnew file mode 100644\nindex 000000000000..048d725e0a0b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01710_minmax_count_projection_count_nullable.sql\n@@ -0,0 +1,9 @@\n+DROP TABLE IF EXISTS test;\n+\n+CREATE TABLE test (`val` LowCardinality(Nullable(String))) ENGINE = MergeTree ORDER BY tuple() SETTINGS index_granularity = 8192;\n+\n+insert into test select number == 3 ? 'some value' : null from numbers(5);\n+\n+SELECT count(val) FROM test SETTINGS optimize_use_implicit_projections = 1;\n+\n+DROP TABLE test;\n",
  "problem_statement": "Count over Nullable LowCardinality column\n> You have to provide the following information whenever possible.\r\n\r\n**Describe what's wrong**\r\n\r\n`count` aggregate function provides incosistent results over the `LowCardinality(Nullable(...))` column\r\n\r\n> A clear and concise description of what works not as it is supposed to.\r\n\r\n> A link to reproducer in [https://fiddle.clickhouse.com/](https://fiddle.clickhouse.com/).\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nyes\r\n\r\n**Enable crash reporting**\r\n\r\n**How to reproduce**\r\n\r\n* Which ClickHouse server version to use\r\n`23.6.1.1362`\r\n\r\n* Which interface to use, if matters\r\n* Non-default settings, if any\r\n* `CREATE TABLE` statements for all tables involved\r\n```sql\r\nCREATE TABLE default.test\r\n(\r\n    `val` LowCardinality(Nullable(String))\r\n)\r\nENGINE = MergeTree\r\nORDER BY tuple()\r\nSETTINGS index_granularity = 8192;\r\n```\r\n* Sample data for all these tables, use [clickhouse-obfuscator]\r\n\r\n```sql\r\ninsert into test select number == 3 ? 'some value' : null from numbers(5);\r\n--\u250c\u2500val\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n--\u2502 \u1d3a\u1d41\u1d38\u1d38       \u2502\r\n--\u2502 \u1d3a\u1d41\u1d38\u1d38       \u2502\r\n--\u2502 \u1d3a\u1d41\u1d38\u1d38       \u2502\r\n--\u2502 some value \u2502\r\n--\u2502 \u1d3a\u1d41\u1d38\u1d38       \u2502\r\n--\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n* Queries to run that lead to unexpected result\r\n```sql\r\nSELECT count(val)\r\nFROM test\r\n\r\nQuery id: d2061bd9-b54c-468b-9375-a8b3a591cb64\r\n\r\n\u250c\u2500count(val)\u2500\u2510\r\n\u2502          5 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\nSELECT\r\n    count(val),\r\n    sum(val IS NOT NULL)\r\nFROM test\r\n\r\nQuery id: be33b9a7-1afd-41ae-be4b-955babaf39f6\r\n\r\n\u250c\u2500count(val)\u2500\u252c\u2500sum(isNotNull(val))\u2500\u2510\r\n\u2502          1 \u2502                   1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\r\n**Expected behavior**\r\n\r\ncount must return the same value for both of the select queries\r\n\r\n> A clear and concise description of what you expected to happen.\r\n\r\n**Error message and/or stacktrace**\r\n\r\n> If applicable, add screenshots to help explain your problem.\r\n\r\n**Additional context**\r\n\r\n> Add any other context about the problem here.\r\n\n",
  "hints_text": "ah, No, it's not related to https://github.com/ClickHouse/ClickHouse/pull/45772\r\nIt's related to projections https://fiddle.clickhouse.com/de909904-a50a-454a-88c2-fc30433a2d71 \r\n* https://github.com/ClickHouse/ClickHouse/pull/46537 ",
  "created_at": "2023-07-19T03:56:06Z",
  "modified_files": [
    "src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01710_minmax_count_projection_count_nullable.reference",
    "b/tests/queries/0_stateless/01710_minmax_count_projection_count_nullable.sql"
  ]
}