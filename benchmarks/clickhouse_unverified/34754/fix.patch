diff --git a/.clang-tidy b/.clang-tidy
index 33d7a66d14c2..bc854d57f8a9 100644
--- a/.clang-tidy
+++ b/.clang-tidy
@@ -62,6 +62,7 @@ Checks: '*,
 
     -google-build-using-namespace,
     -google-readability-braces-around-statements,
+    -google-readability-casting,
     -google-readability-function-size,
     -google-readability-namespace-comments,
     -google-readability-todo,
diff --git a/base/base/ReplxxLineReader.cpp b/base/base/ReplxxLineReader.cpp
index 0569567d4f86..bd26ec69c897 100644
--- a/base/base/ReplxxLineReader.cpp
+++ b/base/base/ReplxxLineReader.cpp
@@ -45,14 +45,16 @@ std::string replxx_now_ms_str()
     time_t t = ms.count() / 1000;
     tm broken;
     if (!localtime_r(&t, &broken))
-    {
-        return std::string();
-    }
+        return {};
 
     static int const BUFF_SIZE(32);
     char str[BUFF_SIZE];
-    strftime(str, BUFF_SIZE, "%Y-%m-%d %H:%M:%S.", &broken);
-    snprintf(str + sizeof("YYYY-mm-dd HH:MM:SS"), 5, "%03d", static_cast<int>(ms.count() % 1000));
+    if (strftime(str, BUFF_SIZE, "%Y-%m-%d %H:%M:%S.", &broken) <= 0)
+        return {};
+
+    if (snprintf(str + sizeof("YYYY-mm-dd HH:MM:SS"), 5, "%03d", static_cast<int>(ms.count() % 1000)) <= 0)
+        return {};
+
     return str;
 }
 
diff --git a/base/base/wide_integer_impl.h b/base/base/wide_integer_impl.h
index ed2c2972cfe8..e469e1683c8d 100644
--- a/base/base/wide_integer_impl.h
+++ b/base/base/wide_integer_impl.h
@@ -576,8 +576,8 @@ struct integer<Bits, Signed>::_impl
         else if constexpr (Bits == 128 && sizeof(base_type) == 8)
         {
             using CompilerUInt128 = unsigned __int128;
-            CompilerUInt128 a = (CompilerUInt128(lhs.items[1]) << 64) + lhs.items[0];
-            CompilerUInt128 b = (CompilerUInt128(rhs.items[1]) << 64) + rhs.items[0];
+            CompilerUInt128 a = (CompilerUInt128(lhs.items[1]) << 64) + lhs.items[0]; // NOLINT(clang-analyzer-core.UndefinedBinaryOperatorResult)
+            CompilerUInt128 b = (CompilerUInt128(rhs.items[1]) << 64) + rhs.items[0]; // NOLINT(clang-analyzer-core.UndefinedBinaryOperatorResult)
             CompilerUInt128 c = a * b;
             integer<Bits, Signed> res;
             res.items[0] = c;
@@ -841,8 +841,8 @@ struct integer<Bits, Signed>::_impl
         {
             using CompilerUInt128 = unsigned __int128;
 
-            CompilerUInt128 a = (CompilerUInt128(numerator.items[1]) << 64) + numerator.items[0];
-            CompilerUInt128 b = (CompilerUInt128(denominator.items[1]) << 64) + denominator.items[0];
+            CompilerUInt128 a = (CompilerUInt128(numerator.items[1]) << 64) + numerator.items[0]; // NOLINT(clang-analyzer-core.UndefinedBinaryOperatorResult)
+            CompilerUInt128 b = (CompilerUInt128(denominator.items[1]) << 64) + denominator.items[0]; // NOLINT(clang-analyzer-core.UndefinedBinaryOperatorResult)
             CompilerUInt128 c = a / b; // NOLINT
 
             integer<Bits, Signed> res;
@@ -1204,7 +1204,7 @@ constexpr integer<Bits, Signed>::operator T() const noexcept
 
     UnsignedT res{};
     for (unsigned i = 0; i < _impl::item_count && i < (sizeof(T) + sizeof(base_type) - 1) / sizeof(base_type); ++i)
-        res += UnsignedT(items[i]) << (sizeof(base_type) * 8 * i);
+        res += UnsignedT(items[i]) << (sizeof(base_type) * 8 * i); // NOLINT(clang-analyzer-core.UndefinedBinaryOperatorResult)
 
     return res;
 }
diff --git a/docker/packager/binary/Dockerfile b/docker/packager/binary/Dockerfile
index d4e824838c22..995cecfebc71 100644
--- a/docker/packager/binary/Dockerfile
+++ b/docker/packager/binary/Dockerfile
@@ -6,7 +6,7 @@ FROM ubuntu:20.04
 ARG apt_archive="http://archive.ubuntu.com"
 RUN sed -i "s|http://archive.ubuntu.com|$apt_archive|g" /etc/apt/sources.list
 
-ENV DEBIAN_FRONTEND=noninteractive LLVM_VERSION=13
+ENV DEBIAN_FRONTEND=noninteractive LLVM_VERSION=14
 
 RUN apt-get update \
     && apt-get install \
diff --git a/docker/packager/packager b/docker/packager/packager
index 578b5a38bfb2..36f794cad4dc 100755
--- a/docker/packager/packager
+++ b/docker/packager/packager
@@ -319,25 +319,16 @@ if __name__ == "__main__":
     )
     parser.add_argument("--output-dir", type=dir_name, required=True)
     parser.add_argument("--build-type", choices=("debug", ""), default="")
+
     parser.add_argument(
         "--compiler",
         choices=(
-            "clang-11",
-            "clang-11-darwin",
-            "clang-11-darwin-aarch64",
-            "clang-11-aarch64",
-            "clang-12",
-            "clang-12-darwin",
-            "clang-12-darwin-aarch64",
-            "clang-12-aarch64",
-            "clang-13",
-            "clang-13-darwin",
-            "clang-13-darwin-aarch64",
-            "clang-13-aarch64",
-            "clang-13-ppc64le",
-            "clang-11-freebsd",
-            "clang-12-freebsd",
-            "clang-13-freebsd",
+            "clang-14",
+            "clang-14-darwin",
+            "clang-14-darwin-aarch64",
+            "clang-14-aarch64",
+            "clang-14-ppc64le",
+            "clang-14-freebsd",
             "gcc-11",
         ),
         default="clang-13",
@@ -348,6 +339,7 @@ if __name__ == "__main__":
         choices=("address", "thread", "memory", "undefined", ""),
         default="",
     )
+
     parser.add_argument("--split-binary", action="store_true")
     parser.add_argument("--clang-tidy", action="store_true")
     parser.add_argument("--cache", choices=("ccache", "distcc", ""), default="")
diff --git a/docs/_includes/cmake_in_clickhouse_header.md b/docs/_includes/cmake_in_clickhouse_header.md
index c35668c2c409..2f2e04219468 100644
--- a/docs/_includes/cmake_in_clickhouse_header.md
+++ b/docs/_includes/cmake_in_clickhouse_header.md
@@ -6,8 +6,8 @@ Minimal ClickHouse build example:
 
 ```bash
 cmake .. \
-    -DCMAKE_C_COMPILER=$(which clang-13) \
-    -DCMAKE_CXX_COMPILER=$(which clang++-13) \
+    -DCMAKE_C_COMPILER=$(which clang-14) \
+    -DCMAKE_CXX_COMPILER=$(which clang++-14) \
     -DCMAKE_BUILD_TYPE=Debug \
     -DENABLE_UTILS=OFF \
     -DENABLE_TESTS=OFF
diff --git a/docs/en/development/build-cross-arm.md b/docs/en/development/build-cross-arm.md
index 305c09ae2175..ed968ee8e770 100644
--- a/docs/en/development/build-cross-arm.md
+++ b/docs/en/development/build-cross-arm.md
@@ -10,7 +10,7 @@ This is intended for continuous integration checks that run on Linux servers.
 
 The cross-build for AARCH64 is based on the [Build instructions](../development/build.md), follow them first.
 
-## Install Clang-13
+## Install Clang-14 or newer
 
 Follow the instructions from https://apt.llvm.org/ for your Ubuntu or Debian setup or do
 ```
@@ -31,7 +31,7 @@ tar xJf gcc-arm-8.3-2019.03-x86_64-aarch64-linux-gnu.tar.xz -C build-aarch64/cma
 ``` bash
 cd ClickHouse
 mkdir build-arm64
-CC=clang-13 CXX=clang++-13 cmake . -Bbuild-arm64 -DCMAKE_TOOLCHAIN_FILE=cmake/linux/toolchain-aarch64.cmake
+CC=clang-14 CXX=clang++-14 cmake . -Bbuild-arm64 -DCMAKE_TOOLCHAIN_FILE=cmake/linux/toolchain-aarch64.cmake
 ninja -C build-arm64
 ```
 
diff --git a/docs/en/development/build-cross-osx.md b/docs/en/development/build-cross-osx.md
index 1dbd0ec64307..d09552e06e9f 100644
--- a/docs/en/development/build-cross-osx.md
+++ b/docs/en/development/build-cross-osx.md
@@ -10,14 +10,14 @@ This is intended for continuous integration checks that run on Linux servers. If
 
 The cross-build for Mac OS X is based on the [Build instructions](../development/build.md), follow them first.
 
-## Install Clang-13
+## Install Clang-14
 
 Follow the instructions from https://apt.llvm.org/ for your Ubuntu or Debian setup.
 For example the commands for Bionic are like:
 
 ``` bash
-sudo echo "deb [trusted=yes] http://apt.llvm.org/bionic/ llvm-toolchain-bionic-13 main" >> /etc/apt/sources.list
-sudo apt-get install clang-13
+sudo echo "deb [trusted=yes] http://apt.llvm.org/bionic/ llvm-toolchain-bionic-14 main" >> /etc/apt/sources.list
+sudo apt-get install clang-14
 ```
 
 ## Install Cross-Compilation Toolset {#install-cross-compilation-toolset}
diff --git a/docs/en/development/build-cross-riscv.md b/docs/en/development/build-cross-riscv.md
index 94c0f47a05dc..a17063e7d8d0 100644
--- a/docs/en/development/build-cross-riscv.md
+++ b/docs/en/development/build-cross-riscv.md
@@ -23,7 +23,7 @@ sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
 ``` bash
 cd ClickHouse
 mkdir build-riscv64
-CC=clang-13 CXX=clang++-13 cmake . -Bbuild-riscv64 -G Ninja -DCMAKE_TOOLCHAIN_FILE=cmake/linux/toolchain-riscv64.cmake -DGLIBC_COMPATIBILITY=OFF -DENABLE_LDAP=OFF  -DOPENSSL_NO_ASM=ON -DENABLE_JEMALLOC=ON -DENABLE_PARQUET=OFF -DENABLE_ORC=OFF -DUSE_UNWIND=OFF -DENABLE_GRPC=OFF -DENABLE_HDFS=OFF -DENABLE_MYSQL=OFF
+CC=clang-14 CXX=clang++-14 cmake . -Bbuild-riscv64 -G Ninja -DCMAKE_TOOLCHAIN_FILE=cmake/linux/toolchain-riscv64.cmake -DGLIBC_COMPATIBILITY=OFF -DENABLE_LDAP=OFF  -DOPENSSL_NO_ASM=ON -DENABLE_JEMALLOC=ON -DENABLE_PARQUET=OFF -DENABLE_ORC=OFF -DUSE_UNWIND=OFF -DENABLE_GRPC=OFF -DENABLE_HDFS=OFF -DENABLE_MYSQL=OFF
 ninja -C build-riscv64
 ```
 
diff --git a/docs/en/development/build.md b/docs/en/development/build.md
index 7f2d61d2fd02..ef744b576081 100644
--- a/docs/en/development/build.md
+++ b/docs/en/development/build.md
@@ -77,7 +77,7 @@ The build requires the following components:
 -   Git (is used only to checkout the sources, it’s not needed for the build)
 -   CMake 3.14 or newer
 -   Ninja
--   C++ compiler: clang-13 or newer
+-   C++ compiler: clang-14 or newer
 -   Linker: lld
 
 If all the components are installed, you may build in the same way as the steps above.
diff --git a/docs/en/development/developer-instruction.md b/docs/en/development/developer-instruction.md
index 291e57fef66e..fc031b1db49d 100644
--- a/docs/en/development/developer-instruction.md
+++ b/docs/en/development/developer-instruction.md
@@ -155,7 +155,7 @@ While inside the `build` directory, configure your build by running CMake. Befor
     export CC=clang CXX=clang++
     cmake ..
 
-If you installed clang using the automatic installation script above, also specify the version of clang installed in the first command, e.g. `export CC=clang-13 CXX=clang++-13`. The clang version will be in the script output.
+If you installed clang using the automatic installation script above, also specify the version of clang installed in the first command, e.g. `export CC=clang-14 CXX=clang++-14`. The clang version will be in the script output.
 
 The `CC` variable specifies the compiler for C (short for C Compiler), and `CXX` variable instructs which C++ compiler is to be used for building.
 
diff --git a/docs/ru/development/developer-instruction.md b/docs/ru/development/developer-instruction.md
index 6ff1d0538650..4c1981198a0f 100644
--- a/docs/ru/development/developer-instruction.md
+++ b/docs/ru/development/developer-instruction.md
@@ -200,14 +200,6 @@ cmake -DUSE_DEBUG_HELPERS=1 -DUSE_STATIC_LIBRARIES=0 -DSPLIT_SHARED_LIBRARIES=1
 
 В процессе сборки могут появится сообщения `libprotobuf WARNING` про protobuf файлы в библиотеке libhdfs2. Это не имеет значения.
 
-В случае получения ошибок вида `error: variable 'y' set but not used [-Werror,-Wunused-but-set-variable]` ножно попробовать использовать другую версию компилятора сlang. Например, на момент написания данного текста описанная выше команда по установке clang для Ubuntu 20.04 по-умолчанию устанавливает clang-13, с которым возникает эта ошибка. Для решения проблемы можно установить clang-12 с помощью команд:
-```bash
-wget https://apt.llvm.org/llvm.sh
-chmod +x llvm.sh
-sudo ./llvm.sh 12
-```
-И далее использовать именно его, указав соответствующую версию при установке переменных окружения CC и CXX перед вызовом cmake.
-
 При успешной сборке, вы получите готовый исполняемый файл `ClickHouse/build/programs/clickhouse`:
 
     ls -l programs/clickhouse
diff --git a/programs/server/Server.cpp b/programs/server/Server.cpp
index b4b9f8c2bd48..bc5a959c88ba 100644
--- a/programs/server/Server.cpp
+++ b/programs/server/Server.cpp
@@ -84,13 +84,13 @@
 #include <Common/getHashOfLoadedBinary.h>
 #include <Common/filesystemHelpers.h>
 #include <Common/Elf.h>
+#include <Compression/CompressionCodecEncrypted.h>
 #include <Server/MySQLHandlerFactory.h>
 #include <Server/PostgreSQLHandlerFactory.h>
 #include <Server/CertificateReloader.h>
 #include <Server/ProtocolServerAdapter.h>
 #include <Server/HTTP/HTTPServer.h>
 #include <Interpreters/AsynchronousInsertQueue.h>
-#include <Compression/CompressionCodecEncrypted.h>
 #include <filesystem>
 
 #include "config_core.h"
@@ -103,7 +103,6 @@
 #endif
 
 #if USE_SSL
-#    include <Compression/CompressionCodecEncrypted.h>
 #    include <Poco/Net/Context.h>
 #    include <Poco/Net/SecureServerSocket.h>
 #endif
diff --git a/src/Common/ErrorCodes.cpp b/src/Common/ErrorCodes.cpp
index 973dde107563..60ac604e6c98 100644
--- a/src/Common/ErrorCodes.cpp
+++ b/src/Common/ErrorCodes.cpp
@@ -629,6 +629,7 @@
     M(658, MEILISEARCH_MISSING_SOME_COLUMNS) \
     M(659, UNKNOWN_STATUS_OF_TRANSACTION) \
     M(660, HDFS_ERROR) \
+    M(661, CANNOT_SEND_SIGNAL) \
     \
     M(999, KEEPER_EXCEPTION) \
     M(1000, POCO_EXCEPTION) \
diff --git a/src/Common/ThreadFuzzer.cpp b/src/Common/ThreadFuzzer.cpp
index 2db049717ac0..962cfee074d4 100644
--- a/src/Common/ThreadFuzzer.cpp
+++ b/src/Common/ThreadFuzzer.cpp
@@ -294,8 +294,8 @@ void ThreadFuzzer::setup() const
 
 #if THREAD_FUZZER_WRAP_PTHREAD
 #    define MAKE_WRAPPER(RET, NAME, ...) \
-        extern "C" RET __##NAME(__VA_ARGS__); /* NOLINT */ \
-        extern "C" RET NAME(__VA_ARGS__) /* NOLINT */ \
+        extern "C" RET __##NAME(__VA_ARGS__); \
+        extern "C" RET NAME(__VA_ARGS__) \
         { \
             injection( \
                 NAME##_before_yield_probability.load(std::memory_order_relaxed), \
diff --git a/src/Daemon/BaseDaemon.cpp b/src/Daemon/BaseDaemon.cpp
index 1b1e4611dc2d..a9bc1c5c27f3 100644
--- a/src/Daemon/BaseDaemon.cpp
+++ b/src/Daemon/BaseDaemon.cpp
@@ -73,6 +73,7 @@ namespace DB
     namespace ErrorCodes
     {
         extern const int CANNOT_SET_SIGNAL_HANDLER;
+        extern const int CANNOT_SEND_SIGNAL;
     }
 }
 
@@ -86,7 +87,9 @@ static void call_default_signal_handler(int sig)
 {
     if (SIG_ERR == signal(sig, SIG_DFL))
         DB::throwFromErrno("Cannot set signal handler.", DB::ErrorCodes::CANNOT_SET_SIGNAL_HANDLER);
-    raise(sig);
+
+    if (0 != raise(sig))
+        DB::throwFromErrno("Cannot send signal.", DB::ErrorCodes::CANNOT_SEND_SIGNAL);
 }
 
 static const size_t signal_pipe_buf_size =
diff --git a/src/Functions/gcd.cpp b/src/Functions/gcd.cpp
index f42f8f96cdb7..c8e70dc87a24 100644
--- a/src/Functions/gcd.cpp
+++ b/src/Functions/gcd.cpp
@@ -21,7 +21,7 @@ struct GCDImpl : public GCDLCMImpl<A, B, GCDImpl<A, B>, NameGCD>
     static ResultType applyImpl(A a, B b)
     {
         using Int = typename NumberTraits::ToInteger<ResultType>::Type;
-        return boost::integer::gcd(Int(a), Int(b));
+        return boost::integer::gcd(Int(a), Int(b)); // NOLINT(clang-analyzer-core.UndefinedBinaryOperatorResult)
     }
 };
 
diff --git a/src/Functions/lcm.cpp b/src/Functions/lcm.cpp
index 672d47d06b90..51a1bf59d1bb 100644
--- a/src/Functions/lcm.cpp
+++ b/src/Functions/lcm.cpp
@@ -49,7 +49,7 @@ struct LCMImpl : public GCDLCMImpl<A, B, LCMImpl<A, B>, NameLCM>
           * (example: throw an exception or overflow in implementation specific way).
           */
 
-        Unsigned val1 = abs<Int>(a) / boost::integer::gcd(Int(a), Int(b));
+        Unsigned val1 = abs<Int>(a) / boost::integer::gcd(Int(a), Int(b)); // NOLINT(clang-analyzer-core.UndefinedBinaryOperatorResult)
         Unsigned val2 = abs<Int>(b);
 
         /// Overflow in implementation specific way.
