diff --git a/tests/queries/0_stateless/01195_formats_diagnostic_info.reference b/tests/queries/0_stateless/01195_formats_diagnostic_info.reference
new file mode 100644
index 000000000000..708841559c26
--- /dev/null
+++ b/tests/queries/0_stateless/01195_formats_diagnostic_info.reference
@@ -0,0 +1,29 @@
+CSV
+Column 2,   name: d, type: Decimal(18, 10), parsed text: "123456789"ERROR
+ERROR: garbage after DateTime: "7, <DOUBLE QUOTE>Hello<DOUBLE QUOTE>"
+ERROR: DateTime must be in YYYY-MM-DD hh:mm:ss or NNNNNNNNNN (unix timestamp, exactly 10 digits) format.
+ERROR: There is no line feed. "1" found instead.
+ERROR: garbage after Decimal(18, 10): "Hello<LINE FEED>"
+Column 0,   name: t, type: DateTime,        ERROR: text "<LINE FEED>" is not like DateTime
+
+CustomSeparatedIgnoreSpaces
+Column 2,   name: d, type: Decimal(18, 10), parsed text: "123456789"ERROR
+ERROR: There is no delimiter before field 1: expected ",", got "7, <DOUBLE QUOTE>Hello<DOUBLE QUOTE>,"
+Column 0,   name: t, type: DateTime,        ERROR: text ",1<LINE FEED>" is not like DateTime
+Column 0,   name: t, type: DateTime,        ERROR: text "Hello<LINE FEED>" is not like DateTime
+OK
+
+TSV
+Column 2,   name: d, type: Decimal(18, 10), parsed text: "123456789"ERROR
+ERROR: garbage after DateTime: "7<TAB>Hello<TAB>12"
+ERROR: DateTime must be in YYYY-MM-DD hh:mm:ss or NNNNNNNNNN (unix timestamp, exactly 10 digits) format.
+ERROR: Tab found where line feed is expected. It's like your file has more columns than expected.
+ERROR: garbage after Decimal(18, 10): "Hello<LINE FEED>"
+Column 0,   name: t, type: DateTime,        ERROR: text "<LINE FEED>" is not like DateTime
+
+CustomSeparated
+Column 2,   name: d, type: Decimal(18, 10), parsed text: "123456789"ERROR
+ERROR: There is no delimiter before field 1: expected "<TAB>", got "7<TAB>Hello<TAB>123"
+ERROR: There is no delimiter after last field: expected "<LINE FEED>", got "<TAB>1<LINE FEED>"
+ERROR: There is no delimiter after last field: expected "<LINE FEED>", got "Hello<LINE FEED>"
+Column 0,   name: t, type: DateTime,        ERROR: text "<LINE FEED>" is not like DateTime
diff --git a/tests/queries/0_stateless/01195_formats_diagnostic_info.sh b/tests/queries/0_stateless/01195_formats_diagnostic_info.sh
new file mode 100755
index 000000000000..e07b03e9512b
--- /dev/null
+++ b/tests/queries/0_stateless/01195_formats_diagnostic_info.sh
@@ -0,0 +1,37 @@
+#!/usr/bin/env bash
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+. $CURDIR/../shell_config.sh
+
+PARSER=(${CLICKHOUSE_LOCAL} --query 'SELECT t, s, d FROM table' --structure 't DateTime, s String, d Decimal64(10)' --input-format CSV)
+echo '2020-04-21 12:34:56, "Hello", 12345678' | "${PARSER[@]}"  2>&1| grep "ERROR" || echo "CSV"
+echo '2020-04-21 12:34:56, "Hello", 123456789' | "${PARSER[@]}" 2>&1| grep "ERROR"
+echo '2020-04-21 12:34:567, "Hello", 123456789' | "${PARSER[@]}" 2>&1| grep "ERROR"
+#echo '2020-04-21, "Hello", 123456789' | "${PARSER[@]}" 2>&1| grep "ERROR"    # DateTime parsing is unsafe, it produces unexpected result ("Hello" is parsed as time)
+echo '2020-04-21 12:34:56, "Hello", 12345678,1' | "${PARSER[@]}" 2>&1| grep "ERROR"
+echo '2020-04-21 12:34:56,,123Hello' | "${PARSER[@]}" 2>&1| grep "ERROR"
+echo -e '2020-04-21 12:34:56, "Hello", 12345678
' | "${PARSER[@]}" 2>&1| grep "ERROR"
+
+PARSER=(${CLICKHOUSE_LOCAL} --query 'SELECT t, s, d FROM table' --structure 't DateTime, s String, d Decimal64(10)' --input-format CustomSeparatedIgnoreSpaces --format_custom_escaping_rule CSV --format_custom_field_delimiter ',' --format_custom_row_after_delimiter "")
+echo '2020-04-21 12:34:56, "Hello", 12345678' | "${PARSER[@]}"  2>&1| grep "ERROR" || echo -e  "
CustomSeparatedIgnoreSpaces"
+echo '2020-04-21 12:34:56, "Hello", 123456789' | "${PARSER[@]}" 2>&1| grep "ERROR"
+echo '2020-04-21 12:34:567, "Hello", 123456789' | "${PARSER[@]}" 2>&1| grep "ERROR"
+echo '2020-04-21 12:34:56, "Hello", 12345678,1' | "${PARSER[@]}" 2>&1| grep "ERROR"
+echo '2020-04-21 12:34:56,,123Hello' | "${PARSER[@]}" 2>&1| grep "ERROR"
+echo -e '2020-04-21 12:34:56, "Hello", 12345678



   ' | "${PARSER[@]}" 2>&1| grep "ERROR" || echo "OK"
+
+PARSER=(${CLICKHOUSE_LOCAL} --query 'SELECT t, s, d FROM table' --structure 't DateTime, s String, d Decimal64(10)' --input-format TSV)
+echo -e '2020-04-21 12:34:56\tHello\t12345678' | "${PARSER[@]}"  2>&1| grep "ERROR" || echo -e "
TSV"
+echo -e '2020-04-21 12:34:56\tHello\t123456789' | "${PARSER[@]}" 2>&1| grep "ERROR"
+echo -e '2020-04-21 12:34:567\tHello\t123456789' | "${PARSER[@]}" 2>&1| grep "ERROR"
+echo -e '2020-04-21 12:34:56\tHello\t12345678\t1' | "${PARSER[@]}" 2>&1| grep "ERROR"
+echo -e '2020-04-21 12:34:56\t\t123Hello' | "${PARSER[@]}" 2>&1| grep "ERROR"
+echo -e '2020-04-21 12:34:56\tHello\t12345678
' | "${PARSER[@]}" 2>&1| grep "ERROR"
+
+PARSER=(${CLICKHOUSE_LOCAL} --query 'SELECT t, s, d FROM table' --structure 't DateTime, s String, d Decimal64(10)' --input-format CustomSeparated)
+echo -e '2020-04-21 12:34:56\tHello\t12345678' | "${PARSER[@]}"  2>&1| grep "ERROR" || echo -e "
CustomSeparated"
+echo -e '2020-04-21 12:34:56\tHello\t123456789' | "${PARSER[@]}" 2>&1| grep "ERROR"
+echo -e '2020-04-21 12:34:567\tHello\t123456789' | "${PARSER[@]}" 2>&1| grep "ERROR"
+echo -e '2020-04-21 12:34:56\tHello\t12345678\t1' | "${PARSER[@]}" 2>&1| grep "ERROR"
+echo -e '2020-04-21 12:34:56\t\t123Hello' | "${PARSER[@]}" 2>&1| grep "ERROR"
+echo -e '2020-04-21 12:34:56\tHello\t12345678
' | "${PARSER[@]}" 2>&1| grep "ERROR"
