diff --git a/src/Processors/Formats/IInputFormat.h b/src/Processors/Formats/IInputFormat.h
index 95910bf51e5b..f8811962260c 100644
--- a/src/Processors/Formats/IInputFormat.h
+++ b/src/Processors/Formats/IInputFormat.h
@@ -12,7 +12,7 @@ struct ColumnMapping
 {
     /// Non-atomic because there is strict `happens-before` between read and write access
     /// See InputFormatParallelParsing
-    bool is_set;
+    bool is_set{false};
     /// Maps indexes of columns in the input file to indexes of table columns
     using OptionalIndexes = std::vector<std::optional<size_t>>;
     OptionalIndexes column_indexes_for_input_fields;
@@ -22,6 +22,11 @@ struct ColumnMapping
     /// read the file header, and never changed afterwards.
     /// For other columns, it is updated on each read() call.
     std::vector<UInt8> read_columns;
+
+
+    /// Whether we have any columns that are not read from file at all,
+    /// and must be always initialized with defaults.
+    bool have_always_default_columns{false};
 };
 
 using ColumnMappingPtr = std::shared_ptr<ColumnMapping>;
diff --git a/src/Processors/Formats/Impl/CSVRowInputFormat.cpp b/src/Processors/Formats/Impl/CSVRowInputFormat.cpp
index 4ccc0db4cfed..93c39995e34b 100644
--- a/src/Processors/Formats/Impl/CSVRowInputFormat.cpp
+++ b/src/Processors/Formats/Impl/CSVRowInputFormat.cpp
@@ -193,7 +193,7 @@ void CSVRowInputFormat::readPrefix()
             {
                 if (!read_column)
                 {
-                    have_always_default_columns = true;
+                    column_mapping->have_always_default_columns = true;
                     break;
                 }
             }
@@ -221,7 +221,7 @@ bool CSVRowInputFormat::readRow(MutableColumns & columns, RowReadExtension & ext
     /// Track whether we have to fill any columns in this row with default
     /// values. If not, we return an empty column mask to the caller, so that
     /// it doesn't have to check it.
-    bool have_default_columns = have_always_default_columns;
+    bool have_default_columns = column_mapping->have_always_default_columns;
 
     ext.read_columns.assign(column_mapping->read_columns.size(), true);
     const auto delimiter = format_settings.csv.delimiter;
@@ -416,7 +416,7 @@ void CSVRowInputFormat::resetParser()
     RowInputFormatWithDiagnosticInfo::resetParser();
     column_mapping->column_indexes_for_input_fields.clear();
     column_mapping->read_columns.clear();
-    have_always_default_columns = false;
+    column_mapping->have_always_default_columns = false;
 }
 
 
diff --git a/src/Processors/Formats/Impl/CSVRowInputFormat.h b/src/Processors/Formats/Impl/CSVRowInputFormat.h
index 230acc512686..b6075745b39b 100644
--- a/src/Processors/Formats/Impl/CSVRowInputFormat.h
+++ b/src/Processors/Formats/Impl/CSVRowInputFormat.h
@@ -31,17 +31,13 @@ class CSVRowInputFormat : public RowInputFormatWithDiagnosticInfo
     void resetParser() override;
 
 private:
+    /// There fields are computed in constructor.
     bool with_names;
     const FormatSettings format_settings;
     DataTypes data_types;
-
     using IndexesMap = std::unordered_map<String, size_t>;
     IndexesMap column_indexes_by_names;
 
-    /// Whether we have any columns that are not read from file at all,
-    /// and must be always initialized with defaults.
-    bool have_always_default_columns = false;
-
     void addInputColumn(const String & column_name);
 
     void setupAllColumnsByTableSchema();
