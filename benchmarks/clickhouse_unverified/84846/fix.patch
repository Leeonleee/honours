diff --git a/programs/server/play.html b/programs/server/play.html
index e2329682e02c..292904e4086f 100644
--- a/programs/server/play.html
+++ b/programs/server/play.html
@@ -2112,10 +2112,8 @@
 
 let lexer_module;
 async function loadLexer() {
-    // Compiled with:
-    // clang++ -Os -fno-exceptions -fno-rtti -D LEXER_STANDALONE_BUILD --target=wasm32 -flto -nostdlib -Wl,--no-entry -Wl,--export-all src/Parsers/Lexer.cpp -o Lexer.wasm
-
-    const lexer_base64 = "";
+    // base64 -w0 build/src/Parsers/Lexer.wasm
+    const lexer_base64 = "";
 
     if (!lexer_module) {
         const binary = atob(lexer_base64);
diff --git a/src/Parsers/CMakeLists.txt b/src/Parsers/CMakeLists.txt
index 25bc2ba3daa6..7fae34bed6aa 100644
--- a/src/Parsers/CMakeLists.txt
+++ b/src/Parsers/CMakeLists.txt
@@ -30,3 +30,20 @@ if (LEXER_STANDALONE_BUILD)
     target_include_directories(lexer-c PRIVATE ..)
     target_compile_options(lexer-c PRIVATE -Os -fno-exceptions -fno-rtti -nostdlib -DLEXER_STANDALONE_BUILD)
 endif ()
+
+# Check that Lexer compiles to WASM. See the usage in programs/server/play.html
+add_custom_command(
+    OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/Lexer.wasm
+    COMMAND ${CMAKE_CXX_COMPILER}
+    -Os -fno-exceptions -fno-rtti -DLEXER_STANDALONE_BUILD --target=wasm32 -flto -nostdlib
+    -I${CMAKE_SOURCE_DIR}/src
+    -Wl,--no-entry -Wl,--export-all
+    ${CMAKE_CURRENT_SOURCE_DIR}/Lexer.cpp
+    -o ${CMAKE_CURRENT_BINARY_DIR}/Lexer.wasm
+    DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/Lexer.cpp
+    COMMENT "Building Lexer.wasm"
+)
+
+add_custom_target(lexer_wasm ALL
+    DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/Lexer.wasm
+)
diff --git a/src/Parsers/Lexer.cpp b/src/Parsers/Lexer.cpp
index 174221c44e17..8806ed24492c 100644
--- a/src/Parsers/Lexer.cpp
+++ b/src/Parsers/Lexer.cpp
@@ -484,29 +484,37 @@ Token Lexer::nextTokenImpl()
         default:
             if (*pos == '$')
             {
-                /// Try to capture dollar sign as start of here doc
+                /// Try to capture a dollar sign as a start of heredoc
 
-                std::string_view token_stream(pos, end - pos);
-                auto heredoc_name_end_position = token_stream.find('$', 1);
-                if (heredoc_name_end_position != std::string::npos)
+                const char * tag_end = find_first_symbols<'$'>(pos + 1, end);
+                if (tag_end != end)
                 {
-                    size_t heredoc_size = heredoc_name_end_position + 1;
-                    std::string_view heredoc = {token_stream.data(), heredoc_size}; // NOLINT
+                    size_t heredoc_size = tag_end + 1 - pos;
 
-                    size_t heredoc_end_position = token_stream.find(heredoc, heredoc_size);
-                    if (heredoc_end_position != std::string::npos)
+                    bool is_valid_name = true;
+                    for (const char * name_pos = pos + 1; name_pos < tag_end; ++name_pos)
                     {
+                        if (!isWordCharASCII(*name_pos))
+                        {
+                            is_valid_name = false;
+                            break;
+                        }
+                    }
 
-                        pos += heredoc_end_position;
-                        pos += heredoc_size;
-
-                        return Token(TokenType::HereDoc, token_begin, pos);
+                    if (is_valid_name)
+                    {
+                        size_t heredoc_end_position = std::string_view{tag_end + 1, end}.find(std::string_view{pos, heredoc_size});
+                        if (heredoc_end_position != std::string::npos)
+                        {
+                            pos = tag_end + 1 + heredoc_end_position + heredoc_size;
+                            return Token(TokenType::HereDoc, token_begin, pos);
+                        }
                     }
                 }
 
                 if (((pos + 1 < end && !isWordCharASCII(pos[1])) || pos + 1 == end))
                 {
-                    /// Capture standalone dollar sign
+                    /// Capture a standalone dollar sign
                     return Token(TokenType::DollarSign, token_begin, ++pos);
                 }
             }
diff --git a/src/Parsers/LexerStandalone.h b/src/Parsers/LexerStandalone.h
index 76783df7ee4d..a44a751602fd 100644
--- a/src/Parsers/LexerStandalone.h
+++ b/src/Parsers/LexerStandalone.h
@@ -105,22 +105,13 @@ struct string_view
     {
     }
 
-    inline const char * data() const
+    string_view(const char * begin, const char * end) : ptr(begin), size(end - begin)
     {
-        return ptr;
     }
 
-    inline size_t find(char c, size_t offset) const
+    inline size_t find(string_view other) const
     {
-        for (; offset < size; ++offset)
-            if (c == ptr[offset])
-                return offset;
-        return string::npos;
-    }
-
-    inline size_t find(string_view other, size_t offset) const
-    {
-        for (; offset + other.size <= size; ++offset)
+        for (size_t offset = 0; offset + other.size <= size; ++offset)
         {
             size_t other_pos = 0;
             for (; other_pos < other.size; ++other_pos)
