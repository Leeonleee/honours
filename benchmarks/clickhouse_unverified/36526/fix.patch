diff --git a/docs/en/sql-reference/functions/date-time-functions.md b/docs/en/sql-reference/functions/date-time-functions.md
index 5f783cf41497..e37e86e99dc9 100644
--- a/docs/en/sql-reference/functions/date-time-functions.md
+++ b/docs/en/sql-reference/functions/date-time-functions.md
@@ -375,7 +375,7 @@ Result:
 
 -   [Timezone](../../operations/server-configuration-parameters/settings.md#server_configuration_parameters-timezone) server configuration parameter.
 
-## toStartOfFiveMinute {#tostartoffiveminute}
+## toStartOfFiveMinutes {#tostartoffiveminutes}
 
 Rounds down a date with time to the start of the five-minute interval.
 
diff --git a/docs/ru/sql-reference/functions/date-time-functions.md b/docs/ru/sql-reference/functions/date-time-functions.md
index edb2eec17f6d..da48cd940a72 100644
--- a/docs/ru/sql-reference/functions/date-time-functions.md
+++ b/docs/ru/sql-reference/functions/date-time-functions.md
@@ -384,7 +384,7 @@ WITH toDateTime64('2020-01-01 10:20:30.999', 3) AS dt64 SELECT toStartOfSecond(d
 -   Часовая зона сервера, конфигурационный параметр [timezone](../../operations/server-configuration-parameters/settings.md#server_configuration_parameters-timezone).
 
 
-## toStartOfFiveMinute {#tostartoffiveminute}
+## toStartOfFiveMinutes {#tostartoffiveminutes}
 
 Округляет дату-с-временем вниз до начала пятиминутного интервала.
 
diff --git a/docs/zh/sql-reference/functions/date-time-functions.md b/docs/zh/sql-reference/functions/date-time-functions.md
index 969f71011fd7..96477fadb3b2 100644
--- a/docs/zh/sql-reference/functions/date-time-functions.md
+++ b/docs/zh/sql-reference/functions/date-time-functions.md
@@ -227,7 +227,7 @@ SELECT toStartOfSecond(dt64, 'Asia/Istanbul');
 
 -   [Timezone](../../operations/server-configuration-parameters/settings.md#server_configuration_parameters-timezone) 服务器配置选项。
 
-## toStartOfFiveMinute {#tostartoffiveminute}
+## toStartOfFiveMinutes {#tostartoffiveminutes}
 
 将DateTime以五分钟为单位向前取整到最接近的时间点。
 
diff --git a/src/Common/DateLUTImpl.h b/src/Common/DateLUTImpl.h
index bfeb33897532..fcf4714bd37f 100644
--- a/src/Common/DateLUTImpl.h
+++ b/src/Common/DateLUTImpl.h
@@ -565,7 +565,7 @@ class DateLUTImpl
 
     /// NOTE: Assuming timezone offset is a multiple of 15 minutes.
     inline Time toStartOfMinute(Time t) const { return toStartOfMinuteInterval(t, 1); }
-    inline Time toStartOfFiveMinute(Time t) const { return toStartOfMinuteInterval(t, 5); }
+    inline Time toStartOfFiveMinutes(Time t) const { return toStartOfMinuteInterval(t, 5); }
     inline Time toStartOfFifteenMinutes(Time t) const { return toStartOfMinuteInterval(t, 15); }
     inline Time toStartOfTenMinutes(Time t) const { return toStartOfMinuteInterval(t, 10); }
     inline Time toStartOfHour(Time t) const { return roundDown(t, 3600); }
diff --git a/src/Functions/DateTimeTransforms.h b/src/Functions/DateTimeTransforms.h
index 5d1bcaf48cf8..065f08296d0d 100644
--- a/src/Functions/DateTimeTransforms.h
+++ b/src/Functions/DateTimeTransforms.h
@@ -467,17 +467,17 @@ struct ToStartOfNanosecondImpl
     using FactorTransform = ZeroTransform;
 };
 
-struct ToStartOfFiveMinuteImpl
+struct ToStartOfFiveMinutesImpl
 {
-    static constexpr auto name = "toStartOfFiveMinute";
+    static constexpr auto name = "toStartOfFiveMinutes";
 
     static inline UInt32 execute(const DecimalUtils::DecimalComponents<DateTime64> & t, const DateLUTImpl & time_zone)
     {
-        return time_zone.toStartOfFiveMinute(t.whole);
+        return time_zone.toStartOfFiveMinutes(t.whole);
     }
     static inline UInt32 execute(UInt32 t, const DateLUTImpl & time_zone)
     {
-        return time_zone.toStartOfFiveMinute(t);
+        return time_zone.toStartOfFiveMinutes(t);
     }
     static inline UInt32 execute(Int32, const DateLUTImpl &)
     {
diff --git a/src/Functions/registerFunctionsDateTime.cpp b/src/Functions/registerFunctionsDateTime.cpp
index c2d8acac6dd3..5f733b072811 100644
--- a/src/Functions/registerFunctionsDateTime.cpp
+++ b/src/Functions/registerFunctionsDateTime.cpp
@@ -27,7 +27,7 @@ void registerFunctionToLastDayOfMonth(FunctionFactory &);
 void registerFunctionToStartOfQuarter(FunctionFactory &);
 void registerFunctionToStartOfYear(FunctionFactory &);
 void registerFunctionToStartOfMinute(FunctionFactory &);
-void registerFunctionToStartOfFiveMinute(FunctionFactory &);
+void registerFunctionToStartOfFiveMinutes(FunctionFactory &);
 void registerFunctionToStartOfTenMinutes(FunctionFactory &);
 void registerFunctionToStartOfFifteenMinutes(FunctionFactory &);
 void registerFunctionToStartOfHour(FunctionFactory &);
@@ -109,7 +109,7 @@ void registerFunctionsDateTime(FunctionFactory & factory)
     registerFunctionToStartOfMillisecond(factory);
     registerFunctionToStartOfSecond(factory);
     registerFunctionToStartOfMinute(factory);
-    registerFunctionToStartOfFiveMinute(factory);
+    registerFunctionToStartOfFiveMinutes(factory);
     registerFunctionToStartOfTenMinutes(factory);
     registerFunctionToStartOfFifteenMinutes(factory);
     registerFunctionToStartOfHour(factory);
diff --git a/src/Functions/toStartOfFiveMinute.cpp b/src/Functions/toStartOfFiveMinute.cpp
deleted file mode 100644
index c154b8f2bc79..000000000000
--- a/src/Functions/toStartOfFiveMinute.cpp
+++ /dev/null
@@ -1,18 +0,0 @@
-#include <Functions/FunctionFactory.h>
-#include <Functions/DateTimeTransforms.h>
-#include <Functions/FunctionDateOrDateTimeToSomething.h>
-
-
-namespace DB
-{
-
-using FunctionToStartOfFiveMinute = FunctionDateOrDateTimeToSomething<DataTypeDateTime, ToStartOfFiveMinuteImpl>;
-
-void registerFunctionToStartOfFiveMinute(FunctionFactory & factory)
-{
-    factory.registerFunction<FunctionToStartOfFiveMinute>();
-}
-
-}
-
-
diff --git a/src/Functions/toStartOfFiveMinutes.cpp b/src/Functions/toStartOfFiveMinutes.cpp
new file mode 100644
index 000000000000..b311c69d8c6c
--- /dev/null
+++ b/src/Functions/toStartOfFiveMinutes.cpp
@@ -0,0 +1,19 @@
+#include <Functions/FunctionFactory.h>
+#include <Functions/DateTimeTransforms.h>
+#include <Functions/FunctionDateOrDateTimeToSomething.h>
+
+
+namespace DB
+{
+
+using FunctionToStartOfFiveMinutes = FunctionDateOrDateTimeToSomething<DataTypeDateTime, ToStartOfFiveMinutesImpl>;
+
+void registerFunctionToStartOfFiveMinutes(FunctionFactory & factory)
+{
+    factory.registerFunction<FunctionToStartOfFiveMinutes>();
+    factory.registerAlias("toStartOfFiveMinute", FunctionToStartOfFiveMinutes::name);
+}
+
+}
+
+
diff --git a/utils/db-generator/query_db_generator.cpp b/utils/db-generator/query_db_generator.cpp
index cdc2c9e2f046..18c9bdbca38f 100644
--- a/utils/db-generator/query_db_generator.cpp
+++ b/utils/db-generator/query_db_generator.cpp
@@ -249,7 +249,7 @@ std::map<std::string, ColumnType> func_to_param_type = {
         {"alphatokens", Type::s}, {"toyear", Type::d | Type::dt}, {"tomonth", Type::d | Type::dt}, {"todayofmonth", Type::d | Type::dt}, {"tohour", Type::dt},
         {"tominute", Type::dt}, {"tosecond", Type::dt}, {"touixtimestamp", Type::dt}, {"tostartofyear", Type::d | Type::dt},
         {"tostartofquarter", Type::d | Type::dt}, {"tostartofmonth", Type::d | Type::dt}, {"tomonday", Type::d | Type::dt},
-        {"tostartoffiveminute", Type::dt}, {"tostartoftenminutes", Type::dt}, {"tostartoffifteenminutes", Type::d | Type::dt},
+        {"tostartoffiveminutes", Type::dt}, {"tostartoftenminutes", Type::dt}, {"tostartoffifteenminutes", Type::d | Type::dt},
         {"tostartofinterval", Type::d | Type::dt}, {"totime", Type::d | Type::dt}, {"torelativehonthnum", Type::d | Type::dt},
         {"torelativeweeknum", Type::d | Type::dt}, {"torelativedaynum", Type::d | Type::dt}, {"torelativehournum", Type::d | Type::dt},
         {"torelativeminutenum", Type::d | Type::dt}, {"torelativesecondnum", Type::d | Type::dt}, {"datediff", Type::d | Type::dt},
