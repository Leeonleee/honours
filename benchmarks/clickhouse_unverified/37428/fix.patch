diff --git a/src/Processors/Formats/Impl/BinaryRowInputFormat.cpp b/src/Processors/Formats/Impl/BinaryRowInputFormat.cpp
index d3de2fbf4941..91bebd0daa4a 100644
--- a/src/Processors/Formats/Impl/BinaryRowInputFormat.cpp
+++ b/src/Processors/Formats/Impl/BinaryRowInputFormat.cpp
@@ -18,6 +18,7 @@ BinaryRowInputFormat::BinaryRowInputFormat(ReadBuffer & in_, Block header, Param
         header,
         in_,
         params_,
+        true,
         with_names_,
         with_types_,
         format_settings_,
diff --git a/src/Processors/Formats/Impl/CSVRowInputFormat.cpp b/src/Processors/Formats/Impl/CSVRowInputFormat.cpp
index bddd4203a5de..8f5591e6aa85 100644
--- a/src/Processors/Formats/Impl/CSVRowInputFormat.cpp
+++ b/src/Processors/Formats/Impl/CSVRowInputFormat.cpp
@@ -41,7 +41,15 @@ CSVRowInputFormat::CSVRowInputFormat(
     bool with_types_,
     const FormatSettings & format_settings_,
     std::unique_ptr<FormatWithNamesAndTypesReader> format_reader_)
-    : RowInputFormatWithNamesAndTypes(header_, in_, params_, with_names_, with_types_, format_settings_, std::move(format_reader_))
+    : RowInputFormatWithNamesAndTypes(
+        header_,
+        in_,
+        params_,
+        false,
+        with_names_,
+        with_types_,
+        format_settings_,
+        std::move(format_reader_))
 {
     const String bad_delimiters = " \t\"'.UL";
     if (bad_delimiters.find(format_settings.csv.delimiter) != String::npos)
diff --git a/src/Processors/Formats/Impl/CustomSeparatedRowInputFormat.cpp b/src/Processors/Formats/Impl/CustomSeparatedRowInputFormat.cpp
index 56a639a0e30b..61488a94ccda 100644
--- a/src/Processors/Formats/Impl/CustomSeparatedRowInputFormat.cpp
+++ b/src/Processors/Formats/Impl/CustomSeparatedRowInputFormat.cpp
@@ -47,6 +47,7 @@ CustomSeparatedRowInputFormat::CustomSeparatedRowInputFormat(
         header_,
         *buf_,
         params_,
+        false,
         with_names_,
         with_types_,
         format_settings_,
diff --git a/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp b/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp
index 0b7cc6669beb..1bc5223a7126 100644
--- a/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp
+++ b/src/Processors/Formats/Impl/JSONCompactEachRowRowInputFormat.cpp
@@ -28,6 +28,7 @@ JSONCompactEachRowRowInputFormat::JSONCompactEachRowRowInputFormat(
         header_,
         in_,
         params_,
+        false,
         with_names_,
         with_types_,
         format_settings_,
diff --git a/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp b/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp
index 877ba224fd5a..a50302697e63 100644
--- a/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp
+++ b/src/Processors/Formats/Impl/TabSeparatedRowInputFormat.cpp
@@ -40,7 +40,15 @@ TabSeparatedRowInputFormat::TabSeparatedRowInputFormat(
     bool with_types_,
     bool is_raw_,
     const FormatSettings & format_settings_)
-    : RowInputFormatWithNamesAndTypes(header_, in_, params_, with_names_, with_types_, format_settings_, std::make_unique<TabSeparatedFormatReader>(in_, format_settings_, is_raw_))
+    : RowInputFormatWithNamesAndTypes(
+        header_,
+        in_,
+        params_,
+        false,
+        with_names_,
+        with_types_,
+        format_settings_,
+        std::make_unique<TabSeparatedFormatReader>(in_, format_settings_, is_raw_))
 {
 }
 
diff --git a/src/Processors/Formats/RowInputFormatWithNamesAndTypes.cpp b/src/Processors/Formats/RowInputFormatWithNamesAndTypes.cpp
index 0a20ac9eefd2..a3dcbe914bb0 100644
--- a/src/Processors/Formats/RowInputFormatWithNamesAndTypes.cpp
+++ b/src/Processors/Formats/RowInputFormatWithNamesAndTypes.cpp
@@ -17,6 +17,7 @@ RowInputFormatWithNamesAndTypes::RowInputFormatWithNamesAndTypes(
     const Block & header_,
     ReadBuffer & in_,
     const Params & params_,
+    bool is_binary_,
     bool with_names_,
     bool with_types_,
     const FormatSettings & format_settings_,
@@ -24,6 +25,7 @@ RowInputFormatWithNamesAndTypes::RowInputFormatWithNamesAndTypes(
     : RowInputFormatWithDiagnosticInfo(header_, in_, params_)
     , format_settings(format_settings_)
     , data_types(header_.getDataTypes())
+    , is_binary(is_binary_)
     , with_names(with_names_)
     , with_types(with_types_)
     , format_reader(std::move(format_reader_))
@@ -38,10 +40,11 @@ void RowInputFormatWithNamesAndTypes::readPrefix()
     if (getCurrentUnitNumber() != 0)
         return;
 
-    if (with_names || with_types || data_types.at(0)->textCanContainOnlyValidUTF8())
+    /// Search and remove BOM only in textual formats (CSV, TSV etc), not in binary ones (RowBinary*).
+    /// Also, we assume that column name or type cannot contain BOM, so, if format has header,
+    /// then BOM at beginning of stream cannot be confused with name or type of field, and it is safe to skip it.
+    if (!is_binary && (with_names || with_types || data_types.at(0)->textCanContainOnlyValidUTF8()))
     {
-        /// We assume that column name or type cannot contain BOM, so, if format has header,
-        /// then BOM at beginning of stream cannot be confused with name or type of field, and it is safe to skip it.
         skipBOMIfExists(*in);
     }
 
diff --git a/src/Processors/Formats/RowInputFormatWithNamesAndTypes.h b/src/Processors/Formats/RowInputFormatWithNamesAndTypes.h
index 72fbc444dfc1..9fc8b2083df6 100644
--- a/src/Processors/Formats/RowInputFormatWithNamesAndTypes.h
+++ b/src/Processors/Formats/RowInputFormatWithNamesAndTypes.h
@@ -24,13 +24,15 @@ class FormatWithNamesAndTypesReader;
 class RowInputFormatWithNamesAndTypes : public RowInputFormatWithDiagnosticInfo
 {
 protected:
-    /** with_names - in the first line the header with column names
+    /** is_binary - it is a binary format (e.g. don't search for BOM)
+      * with_names - in the first line the header with column names
       * with_types - in the second line the header with column names
       */
     RowInputFormatWithNamesAndTypes(
         const Block & header_,
         ReadBuffer & in_,
         const Params & params_,
+        bool is_binary_,
         bool with_names_,
         bool with_types_,
         const FormatSettings & format_settings_,
@@ -51,6 +53,7 @@ class RowInputFormatWithNamesAndTypes : public RowInputFormatWithDiagnosticInfo
     bool parseRowAndPrintDiagnosticInfo(MutableColumns & columns, WriteBuffer & out) override;
     void tryDeserializeField(const DataTypePtr & type, IColumn & column, size_t file_column) override;
 
+    bool is_binary;
     bool with_names;
     bool with_types;
     std::unique_ptr<FormatWithNamesAndTypesReader> format_reader;
