{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 77840,
  "instance_id": "ClickHouse__ClickHouse-77840",
  "issue_numbers": [
    "71056"
  ],
  "base_commit": "9855acbf3bc0006c6583fe303d0f751420d334e4",
  "patch": "diff --git a/src/Storages/StorageBuffer.cpp b/src/Storages/StorageBuffer.cpp\nindex 4345ad8aaf69..b88730d7d47a 100644\n--- a/src/Storages/StorageBuffer.cpp\n+++ b/src/Storages/StorageBuffer.cpp\n@@ -1197,6 +1197,27 @@ void StorageBuffer::alter(const AlterCommands & params, ContextPtr local_context\n     setInMemoryMetadata(new_metadata);\n }\n \n+UInt64 checkUnderflowAndGetUInt64(const ASTPtr & arg, const String & arg_name)\n+{\n+    /**\n+      * Do not force UInt64 type for args, otherwise it'll be backward incompatible,\n+      * there are exponential notation usages for shortness.\n+      */\n+    const auto & value = arg->as<ASTLiteral &>().value;\n+    if (value.getType() != Field::Types::UInt64)\n+    {\n+        Int64 val = applyVisitor(FieldVisitorConvertToNumber<Int64>(), value);\n+        if (val < 0)\n+        {\n+            throw Exception(\n+                ErrorCodes::BAD_ARGUMENTS,\n+                \"Argument '{}' must be non-negative value, get {}\",\n+                arg_name, val);\n+        }\n+    }\n+\n+    return applyVisitor(FieldVisitorConvertToNumber<UInt64>(), value);\n+}\n \n void registerStorageBuffer(StorageFactory & factory)\n {\n@@ -1239,24 +1260,29 @@ void registerStorageBuffer(StorageFactory & factory)\n         String destination_database = checkAndGetLiteralArgument<String>(engine_args[i++], \"destination_database\");\n         String destination_table = checkAndGetLiteralArgument<String>(engine_args[i++], \"destination_table\");\n \n-        UInt64 num_buckets = applyVisitor(FieldVisitorConvertToNumber<UInt64>(), engine_args[i++]->as<ASTLiteral &>().value);\n+        UInt64 num_buckets = checkUnderflowAndGetUInt64(engine_args[i++], \"num_buckets\");\n+        if (num_buckets == 0)\n+        {\n+            throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Argument 'num_buckets' must be a positive integer, got '{}'\",\n+                num_buckets);\n+        }\n \n         StorageBuffer::Thresholds min;\n         StorageBuffer::Thresholds max;\n         StorageBuffer::Thresholds flush;\n \n-        min.time = applyVisitor(FieldVisitorConvertToNumber<UInt64>(), engine_args[i++]->as<ASTLiteral &>().value);\n-        max.time = applyVisitor(FieldVisitorConvertToNumber<UInt64>(), engine_args[i++]->as<ASTLiteral &>().value);\n-        min.rows = applyVisitor(FieldVisitorConvertToNumber<UInt64>(), engine_args[i++]->as<ASTLiteral &>().value);\n-        max.rows = applyVisitor(FieldVisitorConvertToNumber<UInt64>(), engine_args[i++]->as<ASTLiteral &>().value);\n-        min.bytes = applyVisitor(FieldVisitorConvertToNumber<UInt64>(), engine_args[i++]->as<ASTLiteral &>().value);\n-        max.bytes = applyVisitor(FieldVisitorConvertToNumber<UInt64>(), engine_args[i++]->as<ASTLiteral &>().value);\n+        min.time =  checkUnderflowAndGetUInt64(engine_args[i++], \"min_time\");\n+        max.time =  checkUnderflowAndGetUInt64(engine_args[i++], \"max_time\");\n+        min.rows =  checkUnderflowAndGetUInt64(engine_args[i++], \"min_rows\");\n+        max.rows =  checkUnderflowAndGetUInt64(engine_args[i++], \"max_rows\");\n+        min.bytes = checkUnderflowAndGetUInt64(engine_args[i++], \"min_bytes\");\n+        max.bytes = checkUnderflowAndGetUInt64(engine_args[i++], \"max_bytes\");\n         if (engine_args.size() > i)\n-            flush.time = applyVisitor(FieldVisitorConvertToNumber<UInt64>(), engine_args[i++]->as<ASTLiteral &>().value);\n+            flush.time = checkUnderflowAndGetUInt64(engine_args[i++], \"flush_time\");\n         if (engine_args.size() > i)\n-            flush.rows = applyVisitor(FieldVisitorConvertToNumber<UInt64>(), engine_args[i++]->as<ASTLiteral &>().value);\n+            flush.rows = checkUnderflowAndGetUInt64(engine_args[i++], \"flush_rows\");\n         if (engine_args.size() > i)\n-            flush.bytes = applyVisitor(FieldVisitorConvertToNumber<UInt64>(), engine_args[i++]->as<ASTLiteral &>().value);\n+            flush.bytes = checkUnderflowAndGetUInt64(engine_args[i++], \"flush_bytes\");\n \n         /// If destination_id is not set, do not write data from the buffer, but simply empty the buffer.\n         StorageID destination_id = StorageID::createEmpty();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03393_validate_storage_buffer_args.reference b/tests/queries/0_stateless/03393_validate_storage_buffer_args.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/03393_validate_storage_buffer_args.sql b/tests/queries/0_stateless/03393_validate_storage_buffer_args.sql\nnew file mode 100644\nindex 000000000000..5aa14eaebae1\n--- /dev/null\n+++ b/tests/queries/0_stateless/03393_validate_storage_buffer_args.sql\n@@ -0,0 +1,4 @@\n+CREATE TABLE invalid (c0 Int) ENGINE = Buffer(x, x, 0, 1, 1, 1, 1, 1, 1); -- {serverError BAD_ARGUMENTS} must be a positive integer\n+CREATE TABLE invalid (c0 Int) ENGINE = Buffer(x, x, -1, 1, 1e6, 1, 1, 1, 1); -- {serverError BAD_ARGUMENTS} must be non-negative value\n+CREATE TABLE invalid (c0 Int) ENGINE = Buffer(x, x, 1, 1, -1, 1, 1, 1, 1); -- {serverError BAD_ARGUMENTS} must be non-negative value\n+CREATE TABLE invalid (c0 Int) ENGINE = Buffer(x, x, 1, 1, 1, 1, 1, -1e6, 1); -- {serverError BAD_ARGUMENTS} must be non-negative value\n",
  "problem_statement": "Buffer table missing validation\n**Describe the bug**\r\nThe Buffer engine parameters are not well validated.\r\n\r\n**How to reproduce**\r\nRun:\r\n```sql\r\nCREATE TABLE t0 ENGINE = Buffer(x, x, -1,1,1,1,1,1,1);\r\n/*\r\nLogical error: 'std::exception. Code: 1001, type: std::length_error, e.what() = vector (version 24.10.1.2558 (official build)), Stack trace:\r\n\r\n0. /build/contrib/llvm-project/libcxx/include/exception:141: std::logic_error::logic_error(char const*) @ 0x000000001891ad54\r\n1. /build/contrib/llvm-project/libcxx/include/stdexcept:154: std::length_error::length_error[abi:v15007](char const*) @ 0x00000000070fc029\r\n2. /build/contrib/llvm-project/libcxx/include/stdexcept:257: std::__throw_length_error[abi:v15007](char const*) @ 0x00000000070fbfdf\r\n3. /build/contrib/llvm-project/libcxx/include/vector:862: ? @ 0x0000000012890dcd\r\n4. /build/contrib/llvm-project/libcxx/include/vector:691: DB::StorageBuffer::StorageBuffer(DB::StorageID const&, DB::ColumnsDescription const&, DB::ConstraintsDescription const&, String const&, std::shared_ptr<DB::Context const>, unsigned long, DB::StorageBuffer::Thresholds const&, DB::StorageBuffer::Thresholds const&, DB::StorageBuffer::Thresholds const&, DB::StorageID const&, bool) @ 0x00000000128859cf\r\n5. /build/contrib/llvm-project/libcxx/include/__memory/construct_at.h:35: std::shared_ptr<DB::StorageBuffer> std::allocate_shared[abi:v15007]<DB::StorageBuffer, std::allocator<DB::StorageBuffer>, DB::StorageID const&, DB::ColumnsDescription const&, DB::ConstraintsDescription const&, String const&, std::shared_ptr<DB::Context>, unsigned long&, DB::StorageBuffer::Thresholds&, DB::StorageBuffer::Thresholds&, DB::StorageBuffer::Thresholds&, DB::StorageID&, bool, void>(std::allocator<DB::StorageBuffer> const&, DB::StorageID const&, DB::ColumnsDescription const&, DB::ConstraintsDescription const&, String const&, std::shared_ptr<DB::Context>&&, unsigned long&, DB::StorageBuffer::Thresholds&, DB::StorageBuffer::Thresholds&, DB::StorageBuffer::Thresholds&, DB::StorageID&, bool&&) @ 0x0000000012893f8c\r\n6. /build/contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:962: std::shared_ptr<DB::IStorage> std::__function::__policy_invoker<std::shared_ptr<DB::IStorage> (DB::StorageFactory::Arguments const&)>::__call_impl<std::__function::__default_alloc_func<DB::registerStorageBuffer(DB::StorageFactory&)::$_0, std::shared_ptr<DB::IStorage> (DB::StorageFactory::Arguments const&)>>(std::__function::__policy_storage const*, DB::StorageFactory::Arguments const&) @ 0x000000001289021d\r\n7. /build/contrib/llvm-project/libcxx/include/__functional/function.h:848: ? @ 0x00000000125b6e67\r\n8. /build/src/Interpreters/InterpreterCreateQuery.cpp:1864: DB::InterpreterCreateQuery::doCreateTable(DB::ASTCreateQuery&, DB::InterpreterCreateQuery::TableProperties const&, std::unique_ptr<DB::DDLGuard, std::default_delete<DB::DDLGuard>>&, DB::LoadingStrictnessLevel) @ 0x00000000116f782b\r\n9. /build/src/Interpreters/InterpreterCreateQuery.cpp:1680: DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000116f24fe\r\n10. /build/src/Interpreters/InterpreterCreateQuery.cpp:2224: DB::InterpreterCreateQuery::execute() @ 0x00000000116fcbb6\r\n11. /build/src/Interpreters/executeQuery.cpp:1346: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000011c67896\r\n12. /build/src/Interpreters/executeQuery.cpp:1513: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x0000000011c6367d\r\n13. /build/src/Server/TCPHandler.cpp:592: DB::TCPHandler::runImpl() @ 0x000000001307bc89\r\n14. /build/src/Server/TCPHandler.cpp:2524: DB::TCPHandler::run() @ 0x0000000013091479\r\n15. /build/base/poco/Net/src/TCPServerConnection.cpp:43: Poco::Net::TCPServerConnection::start() @ 0x0000000016987d87\r\n16. /build/base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000001698825e\r\n17. /build/base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x00000000169347d2\r\n18. /build/base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000169324e3\r\n19. ? @ 0x000072b1ed4a1e2e\r\n20. ? @ 0x000072b1ed533a4c\r\n*/\r\n```\n",
  "hints_text": "A division by 0 is also possible: https://fiddle.clickhouse.com/3988b0f5-b97f-4a63-90f5-2a35dcc45806\n@pufit Let's continue? ",
  "created_at": "2025-03-18T14:11:53Z",
  "modified_files": [
    "src/Storages/StorageBuffer.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03393_validate_storage_buffer_args.sql"
  ]
}