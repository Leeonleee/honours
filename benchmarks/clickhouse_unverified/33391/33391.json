{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 33391,
  "instance_id": "ClickHouse__ClickHouse-33391",
  "issue_numbers": [
    "33344"
  ],
  "base_commit": "dd2e085ae565553cc15c7e1647d0c0fee589d755",
  "patch": "diff --git a/src/Interpreters/InterpreterAlterQuery.cpp b/src/Interpreters/InterpreterAlterQuery.cpp\nindex df1d6b8c92c7..22390bc30c60 100644\n--- a/src/Interpreters/InterpreterAlterQuery.cpp\n+++ b/src/Interpreters/InterpreterAlterQuery.cpp\n@@ -171,7 +171,7 @@ BlockIO InterpreterAlterQuery::executeToTable(const ASTAlterQuery & alter)\n     {\n         auto alter_lock = table->lockForAlter(getContext()->getSettingsRef().lock_acquire_timeout);\n         StorageInMemoryMetadata metadata = table->getInMemoryMetadata();\n-        alter_commands.validate(metadata, getContext());\n+        alter_commands.validate(table, getContext());\n         alter_commands.prepare(metadata);\n         table->checkAlterIsPossible(alter_commands, getContext());\n         table->alter(alter_commands, getContext(), alter_lock);\ndiff --git a/src/Storages/AlterCommands.cpp b/src/Storages/AlterCommands.cpp\nindex 286f58739f0f..62128c829928 100644\n--- a/src/Storages/AlterCommands.cpp\n+++ b/src/Storages/AlterCommands.cpp\n@@ -1024,8 +1024,9 @@ void AlterCommands::prepare(const StorageInMemoryMetadata & metadata)\n }\n \n \n-void AlterCommands::validate(const StorageInMemoryMetadata & metadata, ContextPtr context) const\n+void AlterCommands::validate(const StoragePtr & table, ContextPtr context) const\n {\n+    const StorageInMemoryMetadata & metadata = table->getInMemoryMetadata();\n     auto all_columns = metadata.columns;\n     /// Default expression for all added/modified columns\n     ASTPtr default_expr_list = std::make_shared<ASTExpressionList>();\n@@ -1034,6 +1035,9 @@ void AlterCommands::validate(const StorageInMemoryMetadata & metadata, ContextPt\n     {\n         const auto & command = (*this)[i];\n \n+        if (command.ttl && !table->supportsTTL())\n+            throw Exception(\"Engine \" + table->getName() + \" doesn't support TTL clause\", ErrorCodes::BAD_ARGUMENTS);\n+\n         const auto & column_name = command.column_name;\n         if (command.type == AlterCommand::ADD_COLUMN)\n         {\ndiff --git a/src/Storages/AlterCommands.h b/src/Storages/AlterCommands.h\nindex dce6b4967416..71c622cb9be3 100644\n--- a/src/Storages/AlterCommands.h\n+++ b/src/Storages/AlterCommands.h\n@@ -186,7 +186,7 @@ class AlterCommands : public std::vector<AlterCommand>\n     /// Checks that all columns exist and dependencies between them.\n     /// This check is lightweight and base only on metadata.\n     /// More accurate check have to be performed with storage->checkAlterIsPossible.\n-    void validate(const StorageInMemoryMetadata & metadata, ContextPtr context) const;\n+    void validate(const StoragePtr & table, ContextPtr context) const;\n \n     /// Prepare alter commands. Set ignore flag to some of them and set some\n     /// parts to commands from storage's metadata (for example, absent default)\ndiff --git a/src/Storages/IStorage.h b/src/Storages/IStorage.h\nindex 013f7e97682b..d45064829b11 100644\n--- a/src/Storages/IStorage.h\n+++ b/src/Storages/IStorage.h\n@@ -135,6 +135,9 @@ class IStorage : public std::enable_shared_from_this<IStorage>, public TypePromo\n     /// Returns true if the storage supports insert queries with the PARTITION BY section.\n     virtual bool supportsPartitionBy() const { return false; }\n \n+    /// Returns true if the storage supports queries with the TTL section.\n+    virtual bool supportsTTL() const { return false; }\n+\n     /// Returns true if the storage supports queries with the PREWHERE section.\n     virtual bool supportsPrewhere() const { return false; }\n \ndiff --git a/src/Storages/MergeTree/MergeTreeData.h b/src/Storages/MergeTree/MergeTreeData.h\nindex 1601a6714d3c..aa345ece6ec4 100644\n--- a/src/Storages/MergeTree/MergeTreeData.h\n+++ b/src/Storages/MergeTree/MergeTreeData.h\n@@ -425,6 +425,8 @@ class MergeTreeData : public IStorage, public WithMutableContext\n \n     bool supportsSubcolumns() const override { return true; }\n \n+    bool supportsTTL() const override { return true; }\n+\n     bool supportsDynamicSubcolumns() const override { return true; }\n \n     NamesAndTypesList getVirtuals() const override;\ndiff --git a/src/Storages/StorageFactory.h b/src/Storages/StorageFactory.h\nindex 6ffa63271762..773095413748 100644\n--- a/src/Storages/StorageFactory.h\n+++ b/src/Storages/StorageFactory.h\n@@ -59,6 +59,7 @@ class StorageFactory : private boost::noncopyable, public IHints<1, StorageFacto\n         bool supports_skipping_indices = false;\n         bool supports_projections = false;\n         bool supports_sort_order = false;\n+        /// See also IStorage::supportsTTL()\n         bool supports_ttl = false;\n         /// See also IStorage::supportsReplication()\n         bool supports_replication = false;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02184_storage_add_support_ttl.reference b/tests/queries/0_stateless/02184_storage_add_support_ttl.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/02184_storage_add_support_ttl.sql b/tests/queries/0_stateless/02184_storage_add_support_ttl.sql\nnew file mode 100644\nindex 000000000000..dca8ee3105cb\n--- /dev/null\n+++ b/tests/queries/0_stateless/02184_storage_add_support_ttl.sql\n@@ -0,0 +1,59 @@\n+DROP TABLE IF EXISTS mergeTree_02184;\n+CREATE TABLE mergeTree_02184 (id UInt64, name String, dt Date) Engine=MergeTree ORDER BY id;\n+ALTER TABLE mergeTree_02184 MODIFY COLUMN name String TTL dt + INTERVAL 1 MONTH;\n+DETACH TABLE mergeTree_02184;\n+ATTACH TABLE mergeTree_02184;\n+\n+DROP TABLE IF EXISTS distributed_02184;\n+CREATE TABLE distributed_02184 (id UInt64, name String, dt Date) Engine=Distributed('test_cluster_two_shards', 'default', 'mergeTree_02184', rand());\n+ALTER TABLE distributed_02184 MODIFY COLUMN name String TTL dt + INTERVAL 1 MONTH; -- { serverError BAD_ARGUMENTS }\n+DETACH TABLE distributed_02184;\n+ATTACH TABLE distributed_02184;\n+\n+DROP TABLE IF EXISTS buffer_02184;\n+CREATE TABLE buffer_02184 (id UInt64, name String, dt Date) ENGINE = Buffer(default, mergeTree_02184, 16, 10, 100, 10000, 1000000, 10000000, 100000000);\n+ALTER TABLE buffer_02184 MODIFY COLUMN name String TTL dt + INTERVAL 1 MONTH; -- { serverError BAD_ARGUMENTS }\n+DETACH TABLE buffer_02184;\n+ATTACH TABLE buffer_02184;\n+\n+DROP TABLE IF EXISTS merge_02184;\n+CREATE TABLE merge_02184 (id UInt64, name String, dt Date) ENGINE = Merge('default', 'distributed_02184');\n+ALTER TABLE merge_02184 MODIFY COLUMN name String TTL dt + INTERVAL 1 MONTH; -- { serverError BAD_ARGUMENTS }\n+DETACH TABLE merge_02184;\n+ATTACH TABLE merge_02184;\n+\n+DROP TABLE IF EXISTS null_02184;\n+CREATE TABLE null_02184 AS system.one Engine=Null();\n+ALTER TABLE null_02184 MODIFY COLUMN dummy Int TTL now() + INTERVAL 1 MONTH; -- { serverError BAD_ARGUMENTS }\n+DETACH TABLE null_02184;\n+ATTACH TABLE null_02184;\n+\n+DROP TABLE IF EXISTS file_02184;\n+CREATE TABLE file_02184 (id UInt64, name String, dt Date) ENGINE = File(TabSeparated);\n+ALTER TABLE file_02184 MODIFY COLUMN name String TTL dt + INTERVAL 1 MONTH; -- { serverError BAD_ARGUMENTS }\n+DETACH TABLE file_02184;\n+ATTACH TABLE file_02184;\n+\n+DROP TABLE IF EXISTS memory_02184;\n+CREATE TABLE memory_02184 (id UInt64, name String, dt Date) ENGINE = Memory();\n+ALTER TABLE memory_02184 MODIFY COLUMN name String TTL dt + INTERVAL 1 MONTH; -- { serverError BAD_ARGUMENTS }\n+DETACH TABLE memory_02184;\n+ATTACH TABLE memory_02184;\n+\n+DROP TABLE IF EXISTS log_02184;\n+CREATE TABLE log_02184 (id UInt64, name String, dt Date) ENGINE = Log();\n+ALTER TABLE log_02184 MODIFY COLUMN name String TTL dt + INTERVAL 1 MONTH; -- { serverError BAD_ARGUMENTS }\n+DETACH TABLE log_02184;\n+ATTACH TABLE log_02184;\n+\n+DROP TABLE IF EXISTS ting_log_02184;\n+CREATE TABLE ting_log_02184 (id UInt64, name String, dt Date) ENGINE = TinyLog();\n+ALTER TABLE ting_log_02184 MODIFY COLUMN name String TTL dt + INTERVAL 1 MONTH; -- { serverError BAD_ARGUMENTS }\n+DETACH TABLE ting_log_02184;\n+ATTACH TABLE ting_log_02184;\n+\n+DROP TABLE IF EXISTS stripe_log_02184;\n+CREATE TABLE stripe_log_02184 (id UInt64, name String, dt Date) ENGINE = StripeLog;\n+ALTER TABLE stripe_log_02184 MODIFY COLUMN name String TTL dt + INTERVAL 1 MONTH; -- { serverError BAD_ARGUMENTS }\n+DETACH TABLE stripe_log_02184;\n+ATTACH TABLE stripe_log_02184;\n",
  "problem_statement": "Block TTL's for Distributed tables during alters\nRight now clickhouse allows to create TTL columns for Distributed tables during alters. It is working normally until server restart. After that it won't start because engine distributed doesn't support TTL clause. Modify metadata is required.\r\n\r\nMy cluster has 21.3 but tested it also with 21.11 and the same behavior.\r\nIt is blocked during create but it should be also be blocked during alters.\r\nTested on table from tutorial\r\nENGINE = Distributed('stage, 'default', 'hits_v1') \r\nalter table hits_v1_all modify column UTMCampaign String TTL EventDate + INTERVAL 1 MONTH \u2190 it passes normally\n",
  "hints_text": "",
  "created_at": "2022-01-04T12:42:06Z",
  "modified_files": [
    "src/Interpreters/InterpreterAlterQuery.cpp",
    "src/Storages/AlterCommands.cpp",
    "src/Storages/AlterCommands.h",
    "src/Storages/IStorage.h",
    "src/Storages/MergeTree/MergeTreeData.h",
    "src/Storages/StorageFactory.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02184_storage_add_support_ttl.sql"
  ]
}