{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 23200,
  "instance_id": "ClickHouse__ClickHouse-23200",
  "issue_numbers": [
    "22432"
  ],
  "base_commit": "a25e6d96a504085f67f161470d4c349aa52930c8",
  "patch": "diff --git a/base/mysqlxx/Pool.h b/base/mysqlxx/Pool.h\nindex b6189663f55d..530e2c78cf22 100644\n--- a/base/mysqlxx/Pool.h\n+++ b/base/mysqlxx/Pool.h\n@@ -159,9 +159,9 @@ class Pool final\n       */\n     Pool(const std::string & db_,\n          const std::string & server_,\n-         const std::string & user_ = \"\",\n-         const std::string & password_ = \"\",\n-         unsigned port_ = 0,\n+         const std::string & user_,\n+         const std::string & password_,\n+         unsigned port_,\n          const std::string & socket_ = \"\",\n          unsigned connect_timeout_ = MYSQLXX_DEFAULT_TIMEOUT,\n          unsigned rw_timeout_ = MYSQLXX_DEFAULT_RW_TIMEOUT,\ndiff --git a/src/Databases/DatabaseFactory.cpp b/src/Databases/DatabaseFactory.cpp\nindex 03c2849ac94d..9d09ac731d2a 100644\n--- a/src/Databases/DatabaseFactory.cpp\n+++ b/src/Databases/DatabaseFactory.cpp\n@@ -158,7 +158,7 @@ DatabasePtr DatabaseFactory::getImpl(const ASTCreateQuery & create, const String\n \n             const auto & [remote_host_name, remote_port] = parseAddress(host_port, 3306);\n             MySQLClient client(remote_host_name, remote_port, mysql_user_name, mysql_user_password);\n-            auto mysql_pool = mysqlxx::Pool(mysql_database_name, remote_host_name, mysql_user_name, mysql_user_password);\n+            auto mysql_pool = mysqlxx::Pool(mysql_database_name, remote_host_name, mysql_user_name, mysql_user_password, remote_port);\n \n \n             auto materialize_mode_settings = std::make_unique<MaterializeMySQLSettings>();\ndiff --git a/src/Storages/StorageMaterializeMySQL.cpp b/src/Storages/StorageMaterializeMySQL.cpp\nindex a15e4957abe1..8e6f2e1ad637 100644\n--- a/src/Storages/StorageMaterializeMySQL.cpp\n+++ b/src/Storages/StorageMaterializeMySQL.cpp\n@@ -92,7 +92,7 @@ Pipe StorageMaterializeMySQL::read(\n     {\n         Block pipe_header = pipe.getHeader();\n         auto syntax = TreeRewriter(context).analyze(expressions, pipe_header.getNamesAndTypesList());\n-        ExpressionActionsPtr expression_actions = ExpressionAnalyzer(expressions, syntax, context).getActions(true);\n+        ExpressionActionsPtr expression_actions = ExpressionAnalyzer(expressions, syntax, context).getActions(true /* add_aliases */, false /* project_result */);\n \n         pipe.addSimpleTransform([&](const Block & header)\n         {\n",
  "test_patch": "diff --git a/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py b/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py\nindex c80ee5833ef1..813a654add30 100644\n--- a/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py\n+++ b/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py\n@@ -843,6 +843,17 @@ def system_tables_test(clickhouse_node, mysql_node, service_name):\n     clickhouse_node.query(\"CREATE DATABASE system_tables_test ENGINE = MaterializeMySQL('{}:3306', 'system_tables_test', 'root', 'clickhouse')\".format(service_name))\n     check_query(clickhouse_node, \"SELECT partition_key, sorting_key, primary_key FROM system.tables WHERE database = 'system_tables_test' AND name = 'test'\", \"intDiv(id, 4294967)\\tid\\tid\\n\")\n \n+def move_to_prewhere_and_column_filtering(clickhouse_node, mysql_node, service_name):\n+    clickhouse_node.query(\"DROP DATABASE IF EXISTS cond_on_key_col\")\n+    mysql_node.query(\"DROP DATABASE IF EXISTS cond_on_key_col\")\n+    mysql_node.query(\"CREATE DATABASE cond_on_key_col\")\n+    clickhouse_node.query(\"CREATE DATABASE cond_on_key_col ENGINE = MaterializeMySQL('{}:3306', 'cond_on_key_col', 'root', 'clickhouse')\".format(service_name))\n+    mysql_node.query(\"create table cond_on_key_col.products (id int primary key, product_id int not null, catalog_id int not null, brand_id int not null, name text)\")\n+    mysql_node.query(\"insert into cond_on_key_col.products (id, name, catalog_id, brand_id, product_id) values (915, 'ertyui', 5287, 15837, 0), (990, 'wer', 1053, 24390, 1), (781, 'qwerty', 1041, 1176, 2);\")\n+    check_query(clickhouse_node, \"SELECT DISTINCT P.id, P.name, P.catalog_id FROM cond_on_key_col.products P WHERE P.name ILIKE '%e%' and P.catalog_id=5287\", '915\\tertyui\\t5287\\n')\n+    clickhouse_node.query(\"DROP DATABASE cond_on_key_col\")\n+    mysql_node.query(\"DROP DATABASE cond_on_key_col\")\n+\n def mysql_settings_test(clickhouse_node, mysql_node, service_name):\n     mysql_node.query(\"DROP DATABASE IF EXISTS test_database\")\n     clickhouse_node.query(\"DROP DATABASE IF EXISTS test_database\")\n@@ -858,3 +869,4 @@ def mysql_settings_test(clickhouse_node, mysql_node, service_name):\n \n     clickhouse_node.query(\"DROP DATABASE test_database\")\n     mysql_node.query(\"DROP DATABASE test_database\")\n+\ndiff --git a/tests/integration/test_materialize_mysql_database/test.py b/tests/integration/test_materialize_mysql_database/test.py\nindex 0215dcf9b42d..6c777c7e6f8b 100644\n--- a/tests/integration/test_materialize_mysql_database/test.py\n+++ b/tests/integration/test_materialize_mysql_database/test.py\n@@ -153,6 +153,7 @@ def test_materialize_database_dml_with_mysql_5_7(started_cluster, started_mysql_\n     materialize_with_ddl.dml_with_materialize_mysql_database(clickhouse_node, started_mysql_5_7, \"mysql1\")\n     materialize_with_ddl.materialize_mysql_database_with_views(clickhouse_node, started_mysql_5_7, \"mysql1\")\n     materialize_with_ddl.materialize_mysql_database_with_datetime_and_decimal(clickhouse_node, started_mysql_5_7, \"mysql1\")\n+    materialize_with_ddl.move_to_prewhere_and_column_filtering(clickhouse_node, started_mysql_5_7, \"mysql1\")\n \n \n @pytest.mark.parametrize(('clickhouse_node'), [node_db_ordinary, node_db_atomic])\n@@ -160,6 +161,7 @@ def test_materialize_database_dml_with_mysql_8_0(started_cluster, started_mysql_\n     materialize_with_ddl.dml_with_materialize_mysql_database(clickhouse_node, started_mysql_8_0, \"mysql8_0\")\n     materialize_with_ddl.materialize_mysql_database_with_views(clickhouse_node, started_mysql_8_0, \"mysql8_0\")\n     materialize_with_ddl.materialize_mysql_database_with_datetime_and_decimal(clickhouse_node, started_mysql_8_0, \"mysql8_0\")\n+    materialize_with_ddl.move_to_prewhere_and_column_filtering(clickhouse_node, started_mysql_8_0, \"mysql8_0\")\n \n \n @pytest.mark.parametrize(('clickhouse_node'), [node_db_ordinary, node_db_atomic])\n",
  "problem_statement": "\u041e\u0448\u0438\u0431\u043a\u0430 ClickHouse Code: 10, e.displayText() = DB::Exception: Not found column equals(catalog_id, 1041) in block\n\u0418\u043c\u0435\u0435\u0442\u0441\u044f Materialized \u0431\u0430\u0437\u0430, \u0434\u0430\u043d\u043d\u044b\u0435 \u0440\u0435\u043f\u043b\u0438\u0446\u0438\u0440\u0443\u044e\u0441\u044f \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e, \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0435\u0441\u0442\u044c\r\n\r\n\u0415\u0441\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\r\n\r\n```\r\nSELECT \r\n    DISTINCT P.id, \r\n    P.name, \r\n    P.catalog_id\r\nFROM products P \r\nWHERE \r\n    P.name ILIKE '%\u041b\u0435\u0433\u043a\u0438\u0435%'\r\n```\r\n\r\n\u0422\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\r\n\r\n`   |name                                                                                                |catalog_id|brand_id|\r\n---|----------------------------------------------------------------------------------------------------|----------|--------|\r\n915|\u041f\u043e\u0434\u0432\u0435\u0441\u043a\u0430 \"\u041b\u0435\u0433\u043a\u0438\u0435\"                                                                                   |      5287|   15837|\r\n990|\u041a\u0440\u043e\u0441\u0441\u043e\u0432\u043a\u0438/\u041a\u0440\u043e\u0441\u0441\u043e\u0432\u043a\u0438 \u0442\u0435\u043a\u0441\u0442\u0438\u043b\u044c\u043d\u044b\u0435/\u041a\u0440\u043e\u0441\u0441\u043e\u0432\u043a\u0438 \u0436\u0435\u043d\u0441\u043a\u0438\u0435 \u043b\u0435\u0442\u043d\u0438\u0435/\u043a\u0440\u043e\u0441\u0441\u043e\u0432\u043a\u0438 \u043b\u0435\u0433\u043a\u0438\u0435/\u041a\u0440\u043e\u0441\u0441\u043e\u0432\u043a\u0438 \u0441\u043f\u043e\u0440\u0442\u0438\u0432\u043d\u044b\u0435      |      1053|   24390|\r\n781|\u0411\u0440\u044e\u043a\u0438 \u0436\u0435\u043d\u0441\u043a\u0438\u0435 / \u0411\u0440\u044e\u043a\u0438 \u043f\u0440\u044f\u043c\u044b\u0435 / \u041b\u0435\u0433\u043a\u0438\u0435 \u0431\u0440\u044e\u043a\u0438 \u043d\u0430 \u0440\u0435\u0437\u0438\u043d\u043a\u0435                                              |      1041|    1176|`\r\n\r\n\u041d\u043e \u0435\u0441\u043b\u0438 \u0432 \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c AND catalog_id = N\r\n\r\n```\r\nSELECT \r\n    DISTINCT P.id, \r\n    P.name, \r\n    P.catalog_id\r\nFROM products P \r\nWHERE \r\n    P.name ILIKE '%\u041b\u0435\u0433\u043a\u0438\u0435%' AND P.catalog_id = 5287;\r\n```\r\n\r\n\u0418\u043b\u0438 \u0436\u0435 \u0442\u0430\u043a:\r\n\r\n```\r\nSELECT \r\n    DISTINCT P.id, \r\n    P.name, \r\n    P.catalog_id,\r\n    P.brand_id \r\nFROM products P \r\nWHERE \r\n    P.catalog_id = 5287 AND P.brand_id = 15837;\r\n```\r\n\r\n\u0422\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u044e \u043e\u0448\u0438\u0431\u043a\u0438\r\n\r\n```\r\nSQL Error [10]: ClickHouse exception, code: 10, Code: 10, e.displayText() = DB::Exception: Not found column equals(catalog_id, 5287) in block: while executing 'INPUT : 1 -> equals(catalog_id, 5287) UInt8 : 1' (version 21.3.4.25 (official build))\r\n```\r\n\r\n```\r\nSQL Error [10]: ClickHouse exception, code: 10, Code: 10, e.displayText() = DB::Exception: Not found column equals(brand_id, 15837) in block: while executing 'INPUT : 0 -> equals(brand_id, 15837) UInt8 : 0' (version 21.3.4.25 (official build))\r\n```\r\n\r\n\u041f\u043e\u0447\u0435\u043c\u0443 \u0442\u0430\u043a \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442? \u043a\u0430\u043a \u0432\u044b\u0439\u0442\u0438 \u0438\u0437 \u044d\u0442\u043e\u0439 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438?\r\n\r\n\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430\r\n```\r\nCREATE TABLE analyzer.products\r\n(\r\n\r\n    `id` Int32,\r\n\r\n    `product_id` Int32,\r\n\r\n    `catalog_id` Int32,\r\n\r\n    `brand_id` Int32,\r\n\r\n    `name` Nullable(String),\r\n\r\n    `description` Nullable(String),\r\n\r\n    `supplier` Nullable(String),\r\n\r\n    `marketplace` String,\r\n\r\n    `letter` String,\r\n\r\n    `isNew` UInt8,\r\n\r\n    `isSoldOut` UInt8,\r\n\r\n    `created` DateTime,\r\n\r\n    `updated` DateTime,\r\n\r\n    `_sign` Int8 MATERIALIZED 1,\r\n\r\n    `_version` UInt64 MATERIALIZED 1\r\n)\r\nENGINE = ReplacingMergeTree(_version)\r\nPARTITION BY intDiv(id,\r\n 4294967)\r\nORDER BY (product_id,\r\n catalog_id,\r\n brand_id,\r\n letter,\r\n updated,\r\n id)\r\nSETTINGS index_granularity = 8192\r\n```\n",
  "hints_text": ">\u0418\u043c\u0435\u0435\u0442\u0441\u044f Materialized \u0431\u0430\u0437\u0430\r\n\r\n\u0427\u0442\u043e \u044d\u0442\u043e? MaterializedMysql ?\n> > \u0418\u043c\u0435\u0435\u0442\u0441\u044f Materialized \u0431\u0430\u0437\u0430\r\n> \r\n> \u0427\u0442\u043e \u044d\u0442\u043e? MaterializedMysql ?\r\n\r\n\u0414\u0430",
  "created_at": "2021-04-16T15:59:53Z",
  "modified_files": [
    "base/mysqlxx/Pool.h",
    "src/Databases/DatabaseFactory.cpp",
    "src/Storages/StorageMaterializeMySQL.cpp"
  ],
  "modified_test_files": [
    "tests/integration/test_materialize_mysql_database/materialize_with_ddl.py",
    "tests/integration/test_materialize_mysql_database/test.py"
  ]
}