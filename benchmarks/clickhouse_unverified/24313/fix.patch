diff --git a/src/Common/NamePrompter.h b/src/Common/NamePrompter.h
index 5f7832c44232..bb17f860f292 100644
--- a/src/Common/NamePrompter.h
+++ b/src/Common/NamePrompter.h
@@ -90,17 +90,16 @@ class NamePrompter
     }
 };
 
-template <size_t MaxNumHints, class Self>
+
+template <size_t MaxNumHints, typename Self>
 class IHints
 {
 public:
-
     virtual std::vector<String> getAllRegisteredNames() const = 0;
 
     std::vector<String> getHints(const String & name) const
     {
-        static const auto registered_names = getAllRegisteredNames();
-        return prompter.getHints(name, registered_names);
+        return prompter.getHints(name, getAllRegisteredNames());
     }
 
     virtual ~IHints() = default;
diff --git a/src/DataTypes/EnumValues.cpp b/src/DataTypes/EnumValues.cpp
index 39c24bf1122f..6df899ba9a27 100644
--- a/src/DataTypes/EnumValues.cpp
+++ b/src/DataTypes/EnumValues.cpp
@@ -67,7 +67,7 @@ T EnumValues<T>::getValue(StringRef field_name, bool try_treat_as_id) const
                 return x;
         }
         auto hints = this->getHints(field_name.toString());
-        auto hints_string = !hints.empty() ? ", may be you meant: " + toString(hints) : "";
+        auto hints_string = !hints.empty() ? ", maybe you meant: " + toString(hints) : "";
         throw Exception{"Unknown element '" + field_name.toString() + "' for enum" + hints_string, ErrorCodes::BAD_ARGUMENTS};
     }
     return it->getMapped();
