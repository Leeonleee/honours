diff --git a/tests/queries/0_stateless/01157_replace_table.reference b/tests/queries/0_stateless/01157_replace_table.reference
new file mode 100644
index 000000000000..9fddaf99847f
--- /dev/null
+++ b/tests/queries/0_stateless/01157_replace_table.reference
@@ -0,0 +1,20 @@
+test flush on replace
+1	s1
+2	s2
+3	s3
+exception on create and fill
+0
+1	1	s1
+2	2	s2
+3	3	s3
+1	1	s1
+2	2	s2
+3	3	s3
+1	1	s1
+2	2	s2
+3	3	s3
+4	4	s4
+buf
+dist
+join
+t
diff --git a/tests/queries/0_stateless/01157_replace_table.sql b/tests/queries/0_stateless/01157_replace_table.sql
new file mode 100644
index 000000000000..a29b381a5226
--- /dev/null
+++ b/tests/queries/0_stateless/01157_replace_table.sql
@@ -0,0 +1,51 @@
+drop table if exists t;
+drop table if exists dist;
+drop table if exists buf;
+drop table if exists join;
+
+select 'test flush on replace';
+create table t (n UInt64, s String default 's' || toString(n)) engine=Memory;
+create table dist (n int) engine=Distributed(test_shard_localhost, currentDatabase(), t);
+create table buf (n int) engine=Buffer(currentDatabase(), dist, 1, 10, 100, 10, 100, 1000, 1000);
+
+system stop distributed sends dist;
+insert into buf values (1);
+replace table buf (n int) engine=Distributed(test_shard_localhost, currentDatabase(), dist);
+replace table dist (n int) engine=Buffer(currentDatabase(), t, 1, 10, 100, 10, 100, 1000, 1000);
+
+system stop distributed sends buf;
+insert into buf values (2);
+replace table buf (n int) engine=Buffer(currentDatabase(), dist, 1, 10, 100, 10, 100, 1000, 1000);
+replace table dist (n int) engine=Distributed(test_shard_localhost, currentDatabase(), t);
+
+system stop distributed sends dist;
+insert into buf values (3);
+replace table buf (n int) engine=Null;
+replace table dist (n int) engine=Null;
+
+select * from t order by n;
+
+select 'exception on create and fill';
+-- table is not created if select fails
+create or replace table join engine=Join(ANY, INNER, n) as select * from t where throwIf(n); -- { serverError 395 }
+select count() from system.tables where database=currentDatabase() and name='join';
+
+-- table is created and filled
+create or replace table join engine=Join(ANY, INNER, n) as select * from t;
+select * from numbers(10) as t any join join on t.number=join.n order by n;
+
+-- table is not replaced if select fails
+insert into t(n) values (4);
+replace table join engine=Join(ANY, INNER, n) as select * from t where throwIf(n); -- { serverError 395 }
+select * from numbers(10) as t any join join on t.number=join.n order by n;
+
+-- table is replaced
+replace table join engine=Join(ANY, INNER, n) as select * from t;
+select * from numbers(10) as t any join join on t.number=join.n order by n;
+
+select name from system.tables where database=currentDatabase() order by name;
+
+drop table t;
+drop table dist;
+drop table buf;
+drop table join;
diff --git a/tests/queries/0_stateless/01185_create_or_replace_table.reference b/tests/queries/0_stateless/01185_create_or_replace_table.reference
index 84df5f0f5b5b..be187d9dcd47 100644
--- a/tests/queries/0_stateless/01185_create_or_replace_table.reference
+++ b/tests/queries/0_stateless/01185_create_or_replace_table.reference
@@ -1,8 +1,8 @@
 t1
-CREATE TABLE test_01185.t1
(
    `n` UInt64,
    `s` String
)
ENGINE = MergeTree
ORDER BY n
SETTINGS index_granularity = 8192
+CREATE TABLE default.t1
(
    `n` UInt64,
    `s` String
)
ENGINE = MergeTree
ORDER BY n
SETTINGS index_granularity = 8192
 t1
-CREATE TABLE test_01185.t1
(
    `n` UInt64,
    `s` Nullable(String)
)
ENGINE = MergeTree
ORDER BY n
SETTINGS index_granularity = 8192
+CREATE TABLE default.t1
(
    `n` UInt64,
    `s` Nullable(String)
)
ENGINE = MergeTree
ORDER BY n
SETTINGS index_granularity = 8192
 2	\N
 t1
-CREATE TABLE test_01185.t1
(
    `n` UInt64
)
ENGINE = MergeTree
ORDER BY n
SETTINGS index_granularity = 8192
+CREATE TABLE default.t1
(
    `n` UInt64
)
ENGINE = MergeTree
ORDER BY n
SETTINGS index_granularity = 8192
 3
diff --git a/tests/queries/0_stateless/01185_create_or_replace_table.sql b/tests/queries/0_stateless/01185_create_or_replace_table.sql
index fe408cc7ac62..45900329b2ca 100644
--- a/tests/queries/0_stateless/01185_create_or_replace_table.sql
+++ b/tests/queries/0_stateless/01185_create_or_replace_table.sql
@@ -1,23 +1,22 @@
-drop database if exists test_01185;
-create database test_01185 engine=Atomic;
+drop table if exists t1;
 
-replace table test_01185.t1 (n UInt64, s String) engine=MergeTree order by n; -- { serverError 60 }
-show tables from test_01185;
-create or replace table test_01185.t1 (n UInt64, s String) engine=MergeTree order by n;
-show tables from test_01185;
-show create table test_01185.t1;
+replace table t1 (n UInt64, s String) engine=MergeTree order by n; -- { serverError 60 }
+show tables;
+create or replace table t1 (n UInt64, s String) engine=MergeTree order by n;
+show tables;
+show create table t1;
 
-insert into test_01185.t1 values (1, 'test');
-create or replace table test_01185.t1 (n UInt64, s Nullable(String)) engine=MergeTree order by n;
-insert into test_01185.t1 values (2, null);
-show tables from test_01185;
-show create table test_01185.t1;
-select * from test_01185.t1;
+insert into t1 values (1, 'test');
+create or replace table t1 (n UInt64, s Nullable(String)) engine=MergeTree order by n;
+insert into t1 values (2, null);
+show tables;
+show create table t1;
+select * from t1;
 
-replace table test_01185.t1 (n UInt64) engine=MergeTree order by n;
-insert into test_01185.t1 values (3);
-show tables from test_01185;
-show create table test_01185.t1;
-select * from test_01185.t1;
+replace table t1 (n UInt64) engine=MergeTree order by n;
+insert into t1 values (3);
+show tables;
+show create table t1;
+select * from t1;
 
-drop database test_01185;
+drop table t1;
diff --git a/tests/queries/0_stateless/01915_create_or_replace_dictionary.sql b/tests/queries/0_stateless/01915_create_or_replace_dictionary.sql
index c9df6114ec9a..1520dd419735 100644
--- a/tests/queries/0_stateless/01915_create_or_replace_dictionary.sql
+++ b/tests/queries/0_stateless/01915_create_or_replace_dictionary.sql
@@ -1,51 +1,51 @@
-DROP DATABASE IF EXISTS 01915_db;
-CREATE DATABASE 01915_db ENGINE=Atomic;
+DROP DATABASE IF EXISTS test_01915_db;
+CREATE DATABASE test_01915_db ENGINE=Atomic;
 
-DROP TABLE IF EXISTS 01915_db.test_source_table_1;
-CREATE TABLE 01915_db.test_source_table_1
+DROP TABLE IF EXISTS test_01915_db.test_source_table_1;
+CREATE TABLE test_01915_db.test_source_table_1
 (
     id UInt64,
     value String
 ) ENGINE=TinyLog;
 
-INSERT INTO 01915_db.test_source_table_1 VALUES (0, 'Value0');
+INSERT INTO test_01915_db.test_source_table_1 VALUES (0, 'Value0');
 
-DROP DICTIONARY IF EXISTS 01915_db.test_dictionary;
-CREATE OR REPLACE DICTIONARY 01915_db.test_dictionary
+DROP DICTIONARY IF EXISTS test_01915_db.test_dictionary;
+CREATE OR REPLACE DICTIONARY test_01915_db.test_dictionary
 (
     id UInt64,
     value String
 )
 PRIMARY KEY id
 LAYOUT(DIRECT())
-SOURCE(CLICKHOUSE(DB '01915_db' TABLE 'test_source_table_1'));
+SOURCE(CLICKHOUSE(DB 'test_01915_db' TABLE 'test_source_table_1'));
 
-SELECT * FROM 01915_db.test_dictionary;
+SELECT * FROM test_01915_db.test_dictionary;
 
-DROP TABLE IF EXISTS 01915_db.test_source_table_2;
-CREATE TABLE 01915_db.test_source_table_2
+DROP TABLE IF EXISTS test_01915_db.test_source_table_2;
+CREATE TABLE test_01915_db.test_source_table_2
 (
     id UInt64,
     value_1 String
 ) ENGINE=TinyLog;
 
-INSERT INTO 01915_db.test_source_table_2 VALUES (0, 'Value1');
+INSERT INTO test_01915_db.test_source_table_2 VALUES (0, 'Value1');
 
-CREATE OR REPLACE DICTIONARY 01915_db.test_dictionary
+CREATE OR REPLACE DICTIONARY test_01915_db.test_dictionary
 (
     id UInt64,
     value_1 String
 )
 PRIMARY KEY id
 LAYOUT(HASHED())
-SOURCE(CLICKHOUSE(DB '01915_db' TABLE 'test_source_table_2'))
+SOURCE(CLICKHOUSE(DB 'test_01915_db' TABLE 'test_source_table_2'))
 LIFETIME(0);
 
-SELECT * FROM 01915_db.test_dictionary;
+SELECT * FROM test_01915_db.test_dictionary;
 
-DROP DICTIONARY 01915_db.test_dictionary;
+DROP DICTIONARY test_01915_db.test_dictionary;
 
-DROP TABLE 01915_db.test_source_table_1;
-DROP TABLE 01915_db.test_source_table_2;
+DROP TABLE test_01915_db.test_source_table_1;
+DROP TABLE test_01915_db.test_source_table_2;
 
-DROP DATABASE 01915_db;
+DROP DATABASE test_01915_db;
diff --git a/tests/queries/0_stateless/arcadia_skip_list.txt b/tests/queries/0_stateless/arcadia_skip_list.txt
index d7581cc4e070..606015c369ff 100644
--- a/tests/queries/0_stateless/arcadia_skip_list.txt
+++ b/tests/queries/0_stateless/arcadia_skip_list.txt
@@ -93,6 +93,8 @@
 01138_join_on_distributed_and_tmp
 01153_attach_mv_uuid
 01155_rename_move_materialized_view
+01157_replace_table
+01185_create_or_replace_table
 01191_rename_dictionary
 01200_mutations_memory_consumption
 01211_optimize_skip_unused_shards_type_mismatch
diff --git a/tests/queries/skip_list.json b/tests/queries/skip_list.json
index d40d9a940d0b..579a2636ad5f 100644
--- a/tests/queries/skip_list.json
+++ b/tests/queries/skip_list.json
@@ -110,6 +110,8 @@
         "00510_materizlized_view_and_deduplication_zookeeper",
         "00738_lock_for_inner_table",
         "01153_attach_mv_uuid",
+        "01157_replace_table",
+        "01185_create_or_replace_table",
         /// Sometimes cannot lock file most likely due to concurrent or adjacent tests, but we don't care how it works in Ordinary database.
         "rocksdb",
         "01914_exchange_dictionaries" /// Requires Atomic database
