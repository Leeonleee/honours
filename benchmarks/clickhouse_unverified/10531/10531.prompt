You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Couple of broken parts appear per day without any log indication
**Describe the bug**
Parts are broken either due to upgrade or switching to compact mode. No logs associated with timestamp of those parts is available, they are only identified on startup of clickhouse (and if number of broken parts exceed limit, they block the table initialization). 


**How to reproduce**
Currently unclear, random parts are broken across days, and when clickhouse is restarted it gives error. 
Two things that may have caused it:
- System was upgraded from 19.17.6.36 to 20.3.7, then 20.3.8 (both had issue)
- min_rows_for_wide_part was configured to 90000 (average insert size is 50k rows, maximum 100-150k rows)

* 20.3.7, 20.3.8
* Data loading is being made using clickhouse-client
* min_rows_for_wide_part - but it's unclear that problem is due to that. It's worth noting that all broken parts were compact. However, there were many other compact parts that were not broken. 
* all of broken parts fail with same error: "path/primary.idx is unexpectedly long"
* Not caused by any specific external event, no correlation to kernel or clickhouse logs. 

**Expected behavior**
There shall be no broken parts. 

**Error message and/or stacktrace**

table/schema has been anonimized. 

```

2020.04.24 10:58:16.110142 [ 177089 ] {} <Error> DB::MergeTreeData::loadDataParts(bool)::<lambda()>: Code: 4, e.displayText() = DB::Exception: Index file /datadisk/data/SCHEMA/table_name/20200420-22-0_1084805_1084810_2/primary.idx is unexpectedly long, Stack trace (when copying this message, always include the lines below):

0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x10542450 in /usr/bin/clickhouse
1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x8f4272d in /usr/bin/clickhouse
2. ? @ 0xd8cf004 in /usr/bin/clickhouse
3. DB::IMergeTreeDataPart::loadColumnsChecksumsIndexes(bool, bool) @ 0xd8ca19d in /usr/bin/clickhouse
4. ? @ 0xd8fbba2 in /usr/bin/clickhouse
5. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x8f6792b in /usr/bin/clickhouse
6. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() const @ 0x8f68608 in /usr/bin/clickhouse
7. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x8f667eb in /usr/bin/clickhouse
8. ? @ 0x8f64c33 in /usr/bin/clickhouse
9. start_thread @ 0x7ea5 in /usr/lib64/libpthread-2.17.so
10. __clone @ 0xfe8cd in /usr/lib64/libc-2.17.so
 (version 20.3.8.53 (official build))
2020.04.24 10:58:16.110191 [ 177089 ] {} <Error> SCHEMA.table_name: Part /datadisk/data/SCHEMA/table_name/20200420-22-0_1084805_1084810_2 is broken. Looking for parts to replace it.
2020.04.24 10:58:16.111045 [ 177089 ] {} <Error> SCHEMA.table_name: Detaching broken part /datadisk/data/SCHEMA/table_name/20200420-22-0_1084805_1084810_2 because it covers less than 2 parts. You need to resolve this manually 
```

Anonymized DDL of the table. 
[clickhouse-issue-10487.sql.txt](https://github.com/ClickHouse/ClickHouse/files/4531010/clickhouse-issue-10487.sql.txt)

**Additional context**
Currently it's not so clear on how to reproduce the problem.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
