{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 25279,
  "instance_id": "ClickHouse__ClickHouse-25279",
  "issue_numbers": [
    "24283"
  ],
  "base_commit": "7032998108b4343f9fbb36916835ab921756a761",
  "patch": "diff --git a/base/common/DecomposedFloat.h b/base/common/DecomposedFloat.h\nindex 078ba823c153..21034908fe7b 100644\n--- a/base/common/DecomposedFloat.h\n+++ b/base/common/DecomposedFloat.h\n@@ -91,10 +91,12 @@ struct DecomposedFloat\n \n \n     /// Compare float with integer of arbitrary width (both signed and unsigned are supported). Assuming two's complement arithmetic.\n+    /// This function is generic, big integers (128, 256 bit) are supported as well.\n     /// Infinities are compared correctly. NaNs are treat similarly to infinities, so they can be less than all numbers.\n     /// (note that we need total order)\n+    /// Returns -1, 0 or 1.\n     template <typename Int>\n-    int compare(Int rhs)\n+    int compare(Int rhs) const\n     {\n         if (rhs == 0)\n             return sign();\n@@ -137,10 +139,11 @@ struct DecomposedFloat\n         if (normalized_exponent() >= static_cast<int16_t>(8 * sizeof(Int) - is_signed_v<Int>))\n             return is_negative() ? -1 : 1;\n \n-        using UInt = make_unsigned_t<Int>;\n+        using UInt = std::conditional_t<(sizeof(Int) > sizeof(typename Traits::UInt)), make_unsigned_t<Int>, typename Traits::UInt>;\n         UInt uint_rhs = rhs < 0 ? -rhs : rhs;\n \n         /// Smaller octave: abs(rhs) < abs(float)\n+        /// FYI, TIL: octave is also called \"binade\", https://en.wikipedia.org/wiki/Binade\n         if (uint_rhs < (static_cast<UInt>(1) << normalized_exponent()))\n             return is_negative() ? -1 : 1;\n \n@@ -154,11 +157,11 @@ struct DecomposedFloat\n \n         bool large_and_always_integer = normalized_exponent() >= static_cast<int16_t>(Traits::mantissa_bits);\n \n-        typename Traits::UInt a = large_and_always_integer\n-            ? mantissa() << (normalized_exponent() - Traits::mantissa_bits)\n-            : mantissa() >> (Traits::mantissa_bits - normalized_exponent());\n+        UInt a = large_and_always_integer\n+            ? static_cast<UInt>(mantissa()) << (normalized_exponent() - Traits::mantissa_bits)\n+            : static_cast<UInt>(mantissa()) >> (Traits::mantissa_bits - normalized_exponent());\n \n-        typename Traits::UInt b = uint_rhs - (static_cast<UInt>(1) << normalized_exponent());\n+        UInt b = uint_rhs - (static_cast<UInt>(1) << normalized_exponent());\n \n         if (a < b)\n             return is_negative() ? 1 : -1;\n@@ -175,37 +178,37 @@ struct DecomposedFloat\n \n \n     template <typename Int>\n-    bool equals(Int rhs)\n+    bool equals(Int rhs) const\n     {\n         return compare(rhs) == 0;\n     }\n \n     template <typename Int>\n-    bool notEquals(Int rhs)\n+    bool notEquals(Int rhs) const\n     {\n         return compare(rhs) != 0;\n     }\n \n     template <typename Int>\n-    bool less(Int rhs)\n+    bool less(Int rhs) const\n     {\n         return compare(rhs) < 0;\n     }\n \n     template <typename Int>\n-    bool greater(Int rhs)\n+    bool greater(Int rhs) const\n     {\n         return compare(rhs) > 0;\n     }\n \n     template <typename Int>\n-    bool lessOrEquals(Int rhs)\n+    bool lessOrEquals(Int rhs) const\n     {\n         return compare(rhs) <= 0;\n     }\n \n     template <typename Int>\n-    bool greaterOrEquals(Int rhs)\n+    bool greaterOrEquals(Int rhs) const\n     {\n         return compare(rhs) >= 0;\n     }\ndiff --git a/base/common/wide_integer.h b/base/common/wide_integer.h\nindex 419b4e4558c6..de3496337232 100644\n--- a/base/common/wide_integer.h\n+++ b/base/common/wide_integer.h\n@@ -109,10 +109,7 @@ class integer\n \n     constexpr explicit operator bool() const noexcept;\n \n-    template <class T>\n-    using _integral_not_wide_integer_class = typename std::enable_if<std::is_arithmetic<T>::value, T>::type;\n-\n-    template <class T, class = _integral_not_wide_integer_class<T>>\n+    template <typename T, typename = std::enable_if_t<std::is_arithmetic_v<T>, T>>\n     constexpr operator T() const noexcept;\n \n     constexpr operator long double() const noexcept;\ndiff --git a/base/common/wide_integer_impl.h b/base/common/wide_integer_impl.h\nindex 725caec6a3ef..d2ef8b22d65a 100644\n--- a/base/common/wide_integer_impl.h\n+++ b/base/common/wide_integer_impl.h\n@@ -255,13 +255,13 @@ struct integer<Bits, Signed>::_impl\n             set_multiplier<double>(self, alpha);\n \n         self *= max_int;\n-        self += static_cast<uint64_t>(t - alpha * static_cast<T>(max_int)); // += b_i\n+        self += static_cast<uint64_t>(t - floor(alpha) * static_cast<T>(max_int)); // += b_i\n     }\n \n-    constexpr static void wide_integer_from_builtin(integer<Bits, Signed>& self, double rhs) noexcept\n+    constexpr static void wide_integer_from_builtin(integer<Bits, Signed> & self, double rhs) noexcept\n     {\n         constexpr int64_t max_int = std::numeric_limits<int64_t>::max();\n-        constexpr int64_t min_int = std::numeric_limits<int64_t>::min();\n+        constexpr int64_t min_int = std::numeric_limits<int64_t>::lowest();\n \n         /// There are values in int64 that have more than 53 significant bits (in terms of double\n         /// representation). Such values, being promoted to double, are rounded up or down. If they are rounded up,\n@@ -271,14 +271,14 @@ struct integer<Bits, Signed>::_impl\n         /// The necessary check here is that long double has enough significant (mantissa) bits to store the\n         /// int64_t max value precisely.\n \n-        //TODO Be compatible with Apple aarch64\n+        // TODO Be compatible with Apple aarch64\n #if not (defined(__APPLE__) && defined(__aarch64__))\n         static_assert(LDBL_MANT_DIG >= 64,\n-            \"On your system long double has less than 64 precision bits,\"\n+            \"On your system long double has less than 64 precision bits, \"\n             \"which may result in UB when initializing double from int64_t\");\n #endif\n \n-        if ((rhs > 0 && rhs < static_cast<long double>(max_int)) || (rhs < 0 && rhs > static_cast<long double>(min_int)))\n+        if (rhs > static_cast<long double>(min_int) && rhs < static_cast<long double>(max_int))\n         {\n             self = static_cast<int64_t>(rhs);\n             return;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01035_avg.reference b/tests/queries/0_stateless/01035_avg.reference\nindex a9f31de57e11..f8768d911d68 100644\n--- a/tests/queries/0_stateless/01035_avg.reference\n+++ b/tests/queries/0_stateless/01035_avg.reference\n@@ -1,5 +1,5 @@\n nan\tnan\tnan\tnan\tnan\tnan\tnan\tnan\tnan\tnan\tnan\tnan\tnan\tnan\tnan\tnan\tnan\tnan\n--0.5\t-0.5\t-0.5\t-0.5\t-0.5\t-0.5\t127.493856\t32355.57552\t499999.5\t499999.5\t499999.5\t499999.5\t499999.5\t499999.5\t-0.000500002\t0.49999949943727\t-0.000005026740899901579\t-0.000005257366687274546\n+-0.5\t-0.5\t-0.5\t-0.5\t-0.5\t-0.5\t127.493856\t32355.57552\t499999.5\t499999.5\t499999.5\t499999.5\t499999.5\t499999.5\t-0.000500002\t0.49999949943727\t-0.000005\t-0.000004999999999999992\n -2767.546272\n 999999\n--0.5000045261781699\n+-0.50000449943727\ndiff --git a/tests/queries/0_stateless/01721_dictionary_decimal_p_s.reference b/tests/queries/0_stateless/01721_dictionary_decimal_p_s.reference\nindex 066b4bd1d978..cfc5444a56ed 100644\n--- a/tests/queries/0_stateless/01721_dictionary_decimal_p_s.reference\n+++ b/tests/queries/0_stateless/01721_dictionary_decimal_p_s.reference\n@@ -1,9 +1,9 @@\n -------- 42 --------\n-42\t14.0000\t14.00000000\t14.00000000\t14.0000000000000000618637523926765281280\n+42\t14.0000\t14.00000000\t14.00000000\t14.0000000000000000627860895963620057088\n 42\t14.0000\t14.00000000\t14.00000000\n 14.0000\t14.00000000\t14.00000000\n -------- 4999 --------\n-4999\t1666.3333\t1666.33333333\t1666.33333333\t1633.3553612205046244471093725648757194800\n+4999\t1666.3333\t1666.33333333\t1666.33333333\t1666.3333333333331934501138529985348370480\n 4999\t1666.3333\t1666.33333333\t1666.33333333\n 1666.3333\t1666.33333333\t1666.33333333\n -------- 5000 --------\ndiff --git a/tests/queries/0_stateless/01906_bigint_accurate_cast_ubsan.reference b/tests/queries/0_stateless/01906_bigint_accurate_cast_ubsan.reference\nnew file mode 100644\nindex 000000000000..a293d9344f83\n--- /dev/null\n+++ b/tests/queries/0_stateless/01906_bigint_accurate_cast_ubsan.reference\n@@ -0,0 +1,5 @@\n+10000000000000000000\n+10000000000000000000\n+10000000000000000000\n+10000000000000000000\n+10000000000000000000\ndiff --git a/tests/queries/0_stateless/01906_bigint_accurate_cast_ubsan.sql b/tests/queries/0_stateless/01906_bigint_accurate_cast_ubsan.sql\nnew file mode 100644\nindex 000000000000..4b9fa9662a99\n--- /dev/null\n+++ b/tests/queries/0_stateless/01906_bigint_accurate_cast_ubsan.sql\n@@ -0,0 +1,15 @@\n+SELECT accurateCast(1e35, 'UInt32'); -- { serverError 70 }\n+SELECT accurateCast(1e35, 'UInt64'); -- { serverError 70 }\n+SELECT accurateCast(1e35, 'UInt128'); -- { serverError 70 }\n+SELECT accurateCast(1e35, 'UInt256'); -- { serverError 70 }\n+\n+SELECT accurateCast(1e19, 'UInt64');\n+SELECT accurateCast(1e19, 'UInt128');\n+SELECT accurateCast(1e19, 'UInt256');\n+SELECT accurateCast(1e20, 'UInt64'); -- { serverError 70 }\n+SELECT accurateCast(1e20, 'UInt128'); -- { serverError 70 }\n+SELECT accurateCast(1e20, 'UInt256'); -- { serverError 70 }\n+\n+SELECT accurateCast(1e19, 'Int64'); -- { serverError 70 }\n+SELECT accurateCast(1e19, 'Int128');\n+SELECT accurateCast(1e19, 'Int256');\n",
  "problem_statement": "DecomposedFloat.h:158:26: runtime error: shift exponent 75 is too large for 64-bit type 'uint64_t' \nhttps://clickhouse-test-reports.s3.yandex.net/24249/de4fad63e9896aa9a9c981613bc1d0da89ba16ad/fuzzer_ubsan/report.html#fail1\r\n```\r\nError on processing query 'SELECT substring((9223372036854775807, -2147483648), substring(substring(65535, x, toFixedString(materialize(NULL), NULL)), substring(1048575, substring(substring(toFixedString(materialize(NULL), NULL)), substring(NULL, x, toFixedString(materialize(NULL), NULL))), toFixedString(materialize(NULL), NULL)))), x IN (NULL), substring(x = 1, substring(-2147483647, x, toFixedString(materialize(NULL), x IN (3.4028234663852886e38, 0.), NULL)), NULL), x FROM `01154_test` WHERE x = 2147483648': Code: 32, e.displayText() = DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. ./obj-x86_64-linux-gnu/../contrib/libcxx/include/exception:133: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x1e1c7672 in /workspace/clickhouse\r\n1. ./obj-x86_64-linux-gnu/../src/Common/Exception.cpp:57: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xf49c55e in /workspace/clickhouse\r\n2. ./obj-x86_64-linux-gnu/../src/IO/VarInt.h:0: DB::throwReadAfterEOF() @ 0xf4b67fb in /workspace/clickhouse\r\n3. ./obj-x86_64-linux-gnu/../src/IO/VarInt.h:133: void DB::readVarUIntImpl<false>(unsigned long&, DB::ReadBuffer&) @ 0xf4eba6f in /workspace/clickhouse\r\n4. ./obj-x86_64-linux-gnu/../src/Client/Connection.cpp:788: DB::Connection::receivePacket() @ 0x1d0182f9 in /workspace/clickhouse\r\n5. ./obj-x86_64-linux-gnu/../programs/client/Client.cpp:1985: DB::Client::receiveAndProcessPacket(bool) @ 0xf5cea06 in /workspace/clickhouse\r\n6. ./obj-x86_64-linux-gnu/../programs/client/Client.cpp:0: DB::Client::receiveResult() @ 0xf5d4892 in /workspace/clickhouse\r\n7. ./obj-x86_64-linux-gnu/../programs/client/Client.cpp:0: DB::Client::processOrdinaryQuery() @ 0xf5be41f in /workspace/clickhouse\r\n8. ./obj-x86_64-linux-gnu/../programs/client/Client.cpp:0: DB::Client::processParsedSingleQuery() @ 0xf5ba05e in /workspace/clickhouse\r\n9. ./obj-x86_64-linux-gnu/../programs/client/Client.cpp:0: DB::Client::processWithFuzzing(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xf5b3313 in /workspace/clickhouse\r\n10. ./obj-x86_64-linux-gnu/../programs/client/Client.cpp:0: DB::Client::processMultiQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) @ 0xf5b62f4 in /workspace/clickhouse\r\n11. ./obj-x86_64-linux-gnu/../programs/client/Client.cpp:0: DB::Client::nonInteractive()::'lambda'(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)::operator()(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&) const @ 0xf5db171 in /workspace/clickhouse\r\n12. ./obj-x86_64-linux-gnu/../programs/client/Client.cpp:0: DB::Client::nonInteractive() @ 0xf5a6b0f in /workspace/clickhouse\r\n13. ./obj-x86_64-linux-gnu/../programs/client/Client.cpp:723: DB::Client::mainImpl() @ 0xf59f1e8 in /workspace/clickhouse\r\n14. ./obj-x86_64-linux-gnu/../programs/client/Client.cpp:0: DB::Client::main(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0xf59825b in /workspace/clickhouse\r\n15. ./obj-x86_64-linux-gnu/../contrib/poco/Util/src/Application.cpp:0: Poco::Util::Application::run() @ 0x1e147b0a in /workspace/clickhouse\r\n16. ./obj-x86_64-linux-gnu/../programs/client/Client.cpp:0: mainEntryClickHouseClient(int, char**) @ 0xf58b584 in /workspace/clickhouse\r\n17. ./obj-x86_64-linux-gnu/../programs/main.cpp:0: main @ 0xf48ee04 in /workspace/clickhouse\r\n18. __libc_start_main @ 0x270b3 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n19. _start @ 0xf46ceee in /workspace/clickhouse\r\n (version 21.6.1.6879)\r\nCode: 210. DB::NetException: Connection refused (localhost:9000)\r\n```\n",
  "hints_text": "`SELECT accurateCast(3.4028234663852886e38, 'UInt128')`",
  "created_at": "2021-06-15T00:31:18Z",
  "modified_files": [
    "base/common/DecomposedFloat.h",
    "base/common/wide_integer.h",
    "base/common/wide_integer_impl.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01035_avg.reference",
    "tests/queries/0_stateless/01721_dictionary_decimal_p_s.reference",
    "b/tests/queries/0_stateless/01906_bigint_accurate_cast_ubsan.reference",
    "b/tests/queries/0_stateless/01906_bigint_accurate_cast_ubsan.sql"
  ]
}