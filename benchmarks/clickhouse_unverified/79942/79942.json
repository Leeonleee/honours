{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 79942,
  "instance_id": "ClickHouse__ClickHouse-79942",
  "issue_numbers": [
    "73707"
  ],
  "base_commit": "d2697c0ea112fd2b86bb65249801cbec1862991c",
  "patch": "diff --git a/src/Analyzer/JoinNode.cpp b/src/Analyzer/JoinNode.cpp\nindex a3e9ca728bfb..0be0cc8110d1 100644\n--- a/src/Analyzer/JoinNode.cpp\n+++ b/src/Analyzer/JoinNode.cpp\n@@ -1,4 +1,5 @@\n #include <Analyzer/JoinNode.h>\n+#include <Analyzer/ColumnNode.h>\n #include <Analyzer/ListNode.h>\n #include <Analyzer/Utils.h>\n #include <IO/Operators.h>\n@@ -37,6 +38,77 @@ JoinNode::JoinNode(QueryTreeNodePtr left_table_expression_,\n     children[join_expression_child_index] = std::move(join_expression_);\n }\n \n+/// There is a special workaround for the case when ARRAY JOIN alias is used in USING statement.\n+/// Example: ... ARRAY JOIN arr AS dummy INNER JOIN system.one USING (dummy);\n+///\n+/// In case of ARRAY JOIN, the column is renamed, so the query tree will look like:\n+/// JOIN EXPRESSION\n+/// LIST\n+///   COLUMN id: 16, column_name: dummy\n+///     EXPRESSION\n+///       LIST\n+///         COLUMN id: 18, column_name: __array_join_exp_1\n+///         COLUMN id: 19, column_name: dummy\n+///\n+/// Previously, when we convert QueryTree back to ast, the query would look like:\n+/// ARRAY JOIN arr AS __array_join_exp_1 ALL INNER JOIN system.one USING (__array_join_exp_1)\n+/// Which is incorrect query (which is broken in distributed case) because system.one do not have __array_join_exp_1.\n+///\n+/// In order to mitigate this, the syntax 'USING (__array_join_exp_1 AS dummy)' is introduced,\n+/// which means that '__array_join_exp_1' is taken from left, 'dummy' is taken from right,\n+/// and the USING column name is also 'dummy'\n+///\n+/// See 03448_analyzer_array_join_alias_in_join_using_bug\n+static ASTPtr tryMakeUsingColumnASTWithAlias(const QueryTreeNodePtr & node)\n+{\n+    const auto * column_node = node->as<ColumnNode>();\n+    if (!column_node)\n+        return nullptr;\n+\n+    const auto & expr = column_node->getExpression();\n+    if (!expr)\n+        return nullptr;\n+\n+    const auto * expr_list_node = expr->as<ListNode>();\n+    if (!expr_list_node)\n+        return nullptr;\n+\n+    if (expr_list_node->getNodes().size() != 2)\n+        return nullptr;\n+\n+    const auto * lhs_column_node = expr_list_node->getNodes()[0]->as<ColumnNode>();\n+    const auto * rhs_column_node = expr_list_node->getNodes()[1]->as<ColumnNode>();\n+    if (!lhs_column_node || !rhs_column_node)\n+        return nullptr;\n+\n+    if (lhs_column_node->getColumnName() == rhs_column_node->getColumnName())\n+        return nullptr;\n+\n+    auto node_ast = std::make_shared<ASTIdentifier>(lhs_column_node->getColumnName());\n+    node_ast->setAlias(rhs_column_node->getColumnName());\n+    return node_ast;\n+}\n+\n+static ASTPtr makeUsingAST(const QueryTreeNodePtr & node)\n+{\n+    const auto & list_node = node->as<ListNode &>();\n+\n+    auto expr_list = std::make_shared<ASTExpressionList>();\n+    expr_list->children.reserve(list_node.getNodes().size());\n+\n+    for (const auto & child : list_node.getNodes())\n+    {\n+        ASTPtr node_ast = tryMakeUsingColumnASTWithAlias(child);\n+\n+        if (!node_ast)\n+            node_ast = child->toAST();\n+\n+        expr_list->children.push_back(std::move(node_ast));\n+    }\n+\n+    return expr_list;\n+}\n+\n ASTPtr JoinNode::toASTTableJoin() const\n {\n     auto join_ast = std::make_shared<ASTTableJoin>();\n@@ -46,16 +118,14 @@ ASTPtr JoinNode::toASTTableJoin() const\n \n     if (children[join_expression_child_index])\n     {\n-        auto join_expression_ast = children[join_expression_child_index]->toAST();\n-\n         if (is_using_join_expression)\n         {\n-            join_ast->using_expression_list = join_expression_ast;\n+            join_ast->using_expression_list = makeUsingAST(children[join_expression_child_index]);\n             join_ast->children.push_back(join_ast->using_expression_list);\n         }\n         else\n         {\n-            join_ast->on_expression = join_expression_ast;\n+            join_ast->on_expression = children[join_expression_child_index]->toAST();\n             join_ast->children.push_back(join_ast->on_expression);\n         }\n     }\ndiff --git a/src/Analyzer/Resolve/QueryAnalyzer.cpp b/src/Analyzer/Resolve/QueryAnalyzer.cpp\nindex 64a649475ffe..9f365db6d73a 100644\n--- a/src/Analyzer/Resolve/QueryAnalyzer.cpp\n+++ b/src/Analyzer/Resolve/QueryAnalyzer.cpp\n@@ -5307,9 +5307,11 @@ void QueryAnalyzer::resolveJoin(QueryTreeNodePtr & join_node, IdentifierResolveS\n             if (settings[Setting::analyzer_compatibility_join_using_top_level_identifier])\n                 result_left_table_expression = try_resolve_identifier_from_query_projection(identifier_full_name, join_node_typed.getLeftTableExpression(), scope);\n \n-            IdentifierLookup identifier_lookup{identifier_node->getIdentifier(), IdentifierLookupContext::EXPRESSION};\n             if (!result_left_table_expression)\n+            {\n+                IdentifierLookup identifier_lookup{identifier_node->getIdentifier(), IdentifierLookupContext::EXPRESSION};\n                 result_left_table_expression = identifier_resolver.tryResolveIdentifierFromJoinTreeNode(identifier_lookup, join_node_typed.getLeftTableExpression(), scope).resolved_identifier;\n+            }\n \n             /** Here we may try to resolve identifier from projection in case it's not resolved from left table expression\n               * and analyzer_compatibility_join_using_top_level_identifier is disabled.\n@@ -5353,19 +5355,23 @@ void QueryAnalyzer::resolveJoin(QueryTreeNodePtr & join_node, IdentifierResolveS\n                     identifier_full_name,\n                     scope.scope_node->formatASTForErrorMessage());\n \n+            /// Here we allow syntax 'USING (a AS b)' which means that 'a' is taken from left and 'b' is taken from right.\n+            /// See 03449_join_using_allow_alias.sql and the comment in JoinNode.cpp\n+            const auto & right_name = identifier_node->hasAlias() ? identifier_node->getAlias() : identifier_full_name;\n+            IdentifierLookup identifier_lookup{Identifier(right_name), IdentifierLookupContext::EXPRESSION};\n             auto result_right_table_expression = identifier_resolver.tryResolveIdentifierFromJoinTreeNode(identifier_lookup, join_node_typed.getRightTableExpression(), scope).resolved_identifier;\n             if (!result_right_table_expression)\n                 throw Exception(ErrorCodes::UNKNOWN_IDENTIFIER,\n                     \"JOIN {} using identifier '{}' cannot be resolved from right table expression. In scope {}\",\n                     join_node_typed.formatASTForErrorMessage(),\n-                    identifier_full_name,\n+                    right_name,\n                     scope.scope_node->formatASTForErrorMessage());\n \n             if (result_right_table_expression->getNodeType() != QueryTreeNodeType::COLUMN)\n                 throw Exception(ErrorCodes::UNSUPPORTED_METHOD,\n                     \"JOIN {} using identifier '{}' must be resolved into column node from right table expression. In scope {}\",\n                     join_node_typed.formatASTForErrorMessage(),\n-                    identifier_full_name,\n+                    right_name,\n                     scope.scope_node->formatASTForErrorMessage());\n \n             auto expression_types = DataTypes{result_left_table_expression->getResultType(), result_right_table_expression->getResultType()};\n@@ -5377,7 +5383,7 @@ void QueryAnalyzer::resolveJoin(QueryTreeNodePtr & join_node, IdentifierResolveS\n                     join_node_typed.formatASTForErrorMessage(),\n                     result_left_table_expression->getResultType()->getName(),\n                     result_right_table_expression->getResultType()->getName(),\n-                    identifier_full_name,\n+                    right_name,\n                     scope.scope_node->formatASTForErrorMessage());\n \n             NameAndTypePair join_using_column(identifier_full_name, common_type);\ndiff --git a/src/Interpreters/ClusterProxy/executeQuery.cpp b/src/Interpreters/ClusterProxy/executeQuery.cpp\nindex 4016910d394e..7be64f3e1c3f 100644\n--- a/src/Interpreters/ClusterProxy/executeQuery.cpp\n+++ b/src/Interpreters/ClusterProxy/executeQuery.cpp\n@@ -749,7 +749,7 @@ void executeQueryWithParallelReplicas(\n {\n     QueryTreeNodePtr modified_query_tree = query_tree->clone();\n     rewriteJoinToGlobalJoin(modified_query_tree, context);\n-    modified_query_tree = buildQueryTreeForShard(planner_context, modified_query_tree);\n+    modified_query_tree = buildQueryTreeForShard(planner_context, modified_query_tree, /*allow_global_join_for_right_table*/ true);\n \n     auto header\n         = InterpreterSelectQueryAnalyzer::getSampleBlock(modified_query_tree, context, SelectQueryOptions(processed_stage).analyze());\ndiff --git a/src/Parsers/ASTTablesInSelectQuery.cpp b/src/Parsers/ASTTablesInSelectQuery.cpp\nindex 706ba11bfdf8..608ef47be8f9 100644\n--- a/src/Parsers/ASTTablesInSelectQuery.cpp\n+++ b/src/Parsers/ASTTablesInSelectQuery.cpp\n@@ -5,7 +5,6 @@\n #include <IO/Operators.h>\n #include <Parsers/ASTFunction.h>\n \n-\n namespace DB\n {\n \n@@ -252,6 +251,10 @@ void ASTTableJoin::formatImplAfterTable(WriteBuffer & ostr, const FormatSettings\n     {\n         ostr << (settings.hilite ? hilite_keyword : \"\") << \" USING \" << (settings.hilite ? hilite_none : \"\");\n         ostr << \"(\";\n+        /// We should always print alias for 'USING (a AS b)' syntax (supported with analyzer only).\n+        /// Otherwise query like 'SELECT a AS b FROM t1 JOIN t2 USING (a AS b)' will be broken.\n+        /// See 03448_analyzer_array_join_alias_in_join_using_bug.sql\n+        frame.ignore_printed_asts_with_alias = true;\n         using_expression_list->format(ostr, settings, state, frame);\n         ostr << \")\";\n     }\ndiff --git a/src/Parsers/ASTWithAlias.cpp b/src/Parsers/ASTWithAlias.cpp\nindex b7d4a68f120c..2269a1ade7b1 100644\n--- a/src/Parsers/ASTWithAlias.cpp\n+++ b/src/Parsers/ASTWithAlias.cpp\n@@ -19,7 +19,7 @@ void ASTWithAlias::formatImpl(WriteBuffer & ostr, const FormatSettings & setting\n {\n     /// If we have previously output this node elsewhere in the query, now it is enough to output only the alias.\n     /// This is needed because the query can become extraordinary large after substitution of aliases.\n-    if (!alias.empty() && !state.printed_asts_with_alias.emplace(frame.current_select, alias, getTreeHash(/*ignore_aliases=*/ true)).second)\n+    if (!alias.empty() && !frame.ignore_printed_asts_with_alias && !state.printed_asts_with_alias.emplace(frame.current_select, alias, getTreeHash(/*ignore_aliases=*/ true)).second)\n     {\n         ostr << (settings.hilite ? IAST::hilite_identifier : \"\");\n         settings.writeIdentifier(ostr, alias, /*ambiguous=*/false);\ndiff --git a/src/Parsers/IAST.h b/src/Parsers/IAST.h\nindex 87362d9a329d..347c924b877c 100644\n--- a/src/Parsers/IAST.h\n+++ b/src/Parsers/IAST.h\n@@ -249,6 +249,7 @@ class IAST : public std::enable_shared_from_this<IAST>, public TypePromotion<IAS\n         bool expression_list_always_start_on_new_line = false;  /// Line feed and indent before expression list even if it's of single element.\n         bool expression_list_prepend_whitespace = false; /// Prepend whitespace (if it is required)\n         bool surround_each_list_element_with_parens = false;\n+        bool ignore_printed_asts_with_alias = false; /// Ignore FormatState::printed_asts_with_alias\n         bool allow_operators = true; /// Format some functions, such as \"plus\", \"in\", etc. as operators.\n         size_t list_element_index = 0;\n         std::string create_engine_name;\ndiff --git a/src/Planner/findParallelReplicasQuery.cpp b/src/Planner/findParallelReplicasQuery.cpp\nindex 09a11307d089..710f56fa5493 100644\n--- a/src/Planner/findParallelReplicasQuery.cpp\n+++ b/src/Planner/findParallelReplicasQuery.cpp\n@@ -494,7 +494,7 @@ JoinTreeQueryPlan buildQueryPlanForParallelReplicas(\n         modified_query_tree, context, SelectQueryOptions(processed_stage).analyze());\n \n     rewriteJoinToGlobalJoin(modified_query_tree, context);\n-    modified_query_tree = buildQueryTreeForShard(planner_context, modified_query_tree);\n+    modified_query_tree = buildQueryTreeForShard(planner_context, modified_query_tree, /*allow_global_join_for_right_table*/ true);\n     ASTPtr modified_query_ast = queryNodeToDistributedSelectQuery(modified_query_tree);\n \n     Block header = InterpreterSelectQueryAnalyzer::getSampleBlock(\ndiff --git a/src/Storages/StorageDistributed.cpp b/src/Storages/StorageDistributed.cpp\nindex 1333548cea82..e364231bf838 100644\n--- a/src/Storages/StorageDistributed.cpp\n+++ b/src/Storages/StorageDistributed.cpp\n@@ -930,7 +930,7 @@ QueryTreeNodePtr buildQueryTreeDistributed(SelectQueryInfo & query_info,\n         rewriteJoinToGlobalJoinIfNeeded(query_node.getJoinTree());\n     }\n \n-    return buildQueryTreeForShard(query_info.planner_context, query_tree_to_modify);\n+    return buildQueryTreeForShard(query_info.planner_context, query_tree_to_modify, /*allow_global_join_for_right_table*/ false);\n }\n \n }\ndiff --git a/src/Storages/buildQueryTreeForShard.cpp b/src/Storages/buildQueryTreeForShard.cpp\nindex a5eee5d33edd..413b303e1f52 100644\n--- a/src/Storages/buildQueryTreeForShard.cpp\n+++ b/src/Storages/buildQueryTreeForShard.cpp\n@@ -352,7 +352,7 @@ QueryTreeNodePtr getSubqueryFromTableExpression(\n \n }\n \n-QueryTreeNodePtr buildQueryTreeForShard(const PlannerContextPtr & planner_context, QueryTreeNodePtr query_tree_to_modify)\n+QueryTreeNodePtr buildQueryTreeForShard(const PlannerContextPtr & planner_context, QueryTreeNodePtr query_tree_to_modify, bool allow_global_join_for_right_table)\n {\n     CollectColumnSourceToColumnsVisitor collect_column_source_to_columns_visitor;\n     collect_column_source_to_columns_visitor.visit(query_tree_to_modify);\n@@ -373,7 +373,7 @@ QueryTreeNodePtr buildQueryTreeForShard(const PlannerContextPtr & planner_contex\n         {\n             QueryTreeNodePtr join_table_expression;\n             const auto join_kind = join_node->getKind();\n-            if (join_kind == JoinKind::Left || join_kind == JoinKind::Inner)\n+            if (!allow_global_join_for_right_table || join_kind == JoinKind::Left || join_kind == JoinKind::Inner)\n             {\n                 join_table_expression = join_node->getRightTableExpression();\n             }\ndiff --git a/src/Storages/buildQueryTreeForShard.h b/src/Storages/buildQueryTreeForShard.h\nindex 5b00b89c7294..90cbfd36f660 100644\n--- a/src/Storages/buildQueryTreeForShard.h\n+++ b/src/Storages/buildQueryTreeForShard.h\n@@ -16,7 +16,7 @@ using PlannerContextPtr = std::shared_ptr<PlannerContext>;\n class Context;\n using ContextPtr = std::shared_ptr<const Context>;\n \n-QueryTreeNodePtr buildQueryTreeForShard(const PlannerContextPtr & planner_context, QueryTreeNodePtr query_tree_to_modify);\n+QueryTreeNodePtr buildQueryTreeForShard(const PlannerContextPtr & planner_context, QueryTreeNodePtr query_tree_to_modify, bool allow_global_join_for_right_table);\n \n void rewriteJoinToGlobalJoin(QueryTreeNodePtr query_tree_to_modify, ContextPtr context);\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03395_global_join_supported_kind.reference b/tests/queries/0_stateless/03395_global_join_supported_kind.reference\nnew file mode 100644\nindex 000000000000..573541ac9702\n--- /dev/null\n+++ b/tests/queries/0_stateless/03395_global_join_supported_kind.reference\n@@ -0,0 +1,1 @@\n+0\ndiff --git a/tests/queries/0_stateless/03395_global_join_unsupported_kind.sql b/tests/queries/0_stateless/03395_global_join_supported_kind.sql\nsimilarity index 66%\nrename from tests/queries/0_stateless/03395_global_join_unsupported_kind.sql\nrename to tests/queries/0_stateless/03395_global_join_supported_kind.sql\nindex 310f7b50560b..b6a8831413bc 100644\n--- a/tests/queries/0_stateless/03395_global_join_unsupported_kind.sql\n+++ b/tests/queries/0_stateless/03395_global_join_supported_kind.sql\n@@ -1,1 +1,1 @@\n-SELECT t1.* FROM remote('127.1') AS t1 global FULL OUTER JOIN remote('127.1') AS t2 ON t1.dummy = t2.dummy SETTINGS allow_experimental_analyzer=1; -- { serverError INCOMPATIBLE_TYPE_OF_JOIN }\n+SELECT t1.* FROM remote('127.1') AS t1 global FULL OUTER JOIN remote('127.1') AS t2 ON t1.dummy = t2.dummy SETTINGS allow_experimental_analyzer=1;\ndiff --git a/tests/queries/0_stateless/03395_global_join_unsupported_kind.reference b/tests/queries/0_stateless/03395_global_join_unsupported_kind.reference\ndeleted file mode 100644\nindex e69de29bb2d1..000000000000\ndiff --git a/tests/queries/0_stateless/03448_analyzer_array_join_alias_in_join_using_bug.reference b/tests/queries/0_stateless/03448_analyzer_array_join_alias_in_join_using_bug.reference\nnew file mode 100644\nindex 000000000000..48951c03b686\n--- /dev/null\n+++ b/tests/queries/0_stateless/03448_analyzer_array_join_alias_in_join_using_bug.reference\n@@ -0,0 +1,42 @@\n+-- { echoOn }\n+\n+SELECT arr\n+FROM remote('127.0.0.2', currentDatabase(), local_table) r\n+ARRAY JOIN arr AS dummy\n+INNER JOIN system.one AS foo USING (dummy);\n+[0,1,2]\n+SELECT arr\n+FROM remote('127.0.0.{1,2}', currentDatabase(), local_table) r\n+ARRAY JOIN arr AS dummy\n+INNER JOIN system.one AS foo USING (dummy);\n+[0,1,2]\n+[0,1,2]\n+SELECT arr\n+FROM remote('127.0.0.2', currentDatabase(), local_table) r\n+ARRAY JOIN arr AS arr_item\n+INNER JOIN (SELECT 1 as arr_item) AS foo USING (arr_item);\n+[0,1,2]\n+SELECT arr\n+FROM remote('127.0.0.{1,2}', currentDatabase(), local_table) r\n+ARRAY JOIN arr AS arr_item\n+INNER JOIN (SELECT 1 as arr_item) AS foo USING (arr_item);\n+[0,1,2]\n+[0,1,2]\n+SELECT arr, arr_item\n+FROM remote('127.0.0.2', currentDatabase(), local_table) r\n+ARRAY JOIN arr AS arr_item\n+INNER JOIN (SELECT 1 + number as arr_item from numbers(2)) AS foo USING (arr_item);\n+[0,1,2]\t1\n+[0,1,2]\t2\n+SELECT arr, arr_item\n+FROM remote('127.0.0.{1,2}', currentDatabase(), local_table) r\n+ARRAY JOIN arr AS arr_item\n+INNER JOIN (SELECT 1 + number as arr_item from numbers(2)) AS foo USING (arr_item);\n+[0,1,2]\t1\n+[0,1,2]\t2\n+[0,1,2]\t1\n+[0,1,2]\t2\n+-- Fuzzed\n+\n+SELECT arr FROM remote('127.0.0.2', currentDatabase(), local_table) AS r ARRAY JOIN arr AS arr_item GLOBAL RIGHT JOIN (SELECT 1 AS arr_item) AS foo USING (arr_item);\n+[0,1,2]\ndiff --git a/tests/queries/0_stateless/03448_analyzer_array_join_alias_in_join_using_bug.sql b/tests/queries/0_stateless/03448_analyzer_array_join_alias_in_join_using_bug.sql\nnew file mode 100644\nindex 000000000000..06829d394d93\n--- /dev/null\n+++ b/tests/queries/0_stateless/03448_analyzer_array_join_alias_in_join_using_bug.sql\n@@ -0,0 +1,45 @@\n+CREATE TABLE local_table\n+(\n+    id Int8,\n+    `arr` Array(UInt8)\n+)\n+ENGINE = MergeTree\n+ORDER BY id;\n+\n+insert into local_table select 42, [0, 1, 2];\n+\n+-- { echoOn }\n+\n+SELECT arr\n+FROM remote('127.0.0.2', currentDatabase(), local_table) r\n+ARRAY JOIN arr AS dummy\n+INNER JOIN system.one AS foo USING (dummy);\n+\n+SELECT arr\n+FROM remote('127.0.0.{1,2}', currentDatabase(), local_table) r\n+ARRAY JOIN arr AS dummy\n+INNER JOIN system.one AS foo USING (dummy);\n+\n+SELECT arr\n+FROM remote('127.0.0.2', currentDatabase(), local_table) r\n+ARRAY JOIN arr AS arr_item\n+INNER JOIN (SELECT 1 as arr_item) AS foo USING (arr_item);\n+\n+SELECT arr\n+FROM remote('127.0.0.{1,2}', currentDatabase(), local_table) r\n+ARRAY JOIN arr AS arr_item\n+INNER JOIN (SELECT 1 as arr_item) AS foo USING (arr_item);\n+\n+SELECT arr, arr_item\n+FROM remote('127.0.0.2', currentDatabase(), local_table) r\n+ARRAY JOIN arr AS arr_item\n+INNER JOIN (SELECT 1 + number as arr_item from numbers(2)) AS foo USING (arr_item);\n+\n+SELECT arr, arr_item\n+FROM remote('127.0.0.{1,2}', currentDatabase(), local_table) r\n+ARRAY JOIN arr AS arr_item\n+INNER JOIN (SELECT 1 + number as arr_item from numbers(2)) AS foo USING (arr_item);\n+\n+-- Fuzzed\n+\n+SELECT arr FROM remote('127.0.0.2', currentDatabase(), local_table) AS r ARRAY JOIN arr AS arr_item GLOBAL RIGHT JOIN (SELECT 1 AS arr_item) AS foo USING (arr_item);\ndiff --git a/tests/queries/0_stateless/03449_join_using_allow_alias.reference b/tests/queries/0_stateless/03449_join_using_allow_alias.reference\nnew file mode 100644\nindex 000000000000..a284cf5b437c\n--- /dev/null\n+++ b/tests/queries/0_stateless/03449_join_using_allow_alias.reference\n@@ -0,0 +1,10 @@\n+-- { echo On }\n+\n+select * from numbers(1) l inner join system.one r using (number as dummy);\n+0\t0\n+select * from system.one l inner join numbers(1) r using (dummy as number);\n+0\t0\n+select * from numbers(2) l inner join (select number + 1 as dummy from numbers(1)) r using (number as dummy);\n+1\t1\n+select * from (select number + 1 as dummy from numbers(1)) l inner join numbers(2) r using (dummy as number);\n+1\t1\ndiff --git a/tests/queries/0_stateless/03449_join_using_allow_alias.sql b/tests/queries/0_stateless/03449_join_using_allow_alias.sql\nnew file mode 100644\nindex 000000000000..5e4a3fe5d122\n--- /dev/null\n+++ b/tests/queries/0_stateless/03449_join_using_allow_alias.sql\n@@ -0,0 +1,9 @@\n+set enable_analyzer=1;\n+\n+-- { echo On }\n+\n+select * from numbers(1) l inner join system.one r using (number as dummy);\n+select * from system.one l inner join numbers(1) r using (dummy as number);\n+\n+select * from numbers(2) l inner join (select number + 1 as dummy from numbers(1)) r using (number as dummy);\n+select * from (select number + 1 as dummy from numbers(1)) l inner join numbers(2) r using (dummy as number);\n",
  "problem_statement": "ARRAY JOIN + JOIN using column from array join is broken for distributed tables\n**Describe what's wrong**\r\n\r\nARRAY JOIN + JOIN using column from array join is broken  for distributed tables, e.g.:\r\n\r\n```\r\nSELECT\r\n    arr\r\nFROM distributed_table\r\nARRAY JOIN arr AS arr_item\r\nJOIN (SELECT 's' as arr_item) as foo USING arr_item;\r\n```\r\n\r\n**How to reproduce**\r\n\r\nCurrently it is reproduced on head and the [latest(24.12.1.1614)](https://fiddle.clickhouse.com/29a790db-b34c-435a-bcfa-2b0f2619f87b) releases.\r\n[Works fine](https://fiddle.clickhouse.com/da9f4a64-aeef-48da-88fd-2bed3d6dc04d) on 24.10.3.21\r\n\r\nReproduce: [fiddle.clickhouse.com/c4f97f56-e6f8-45b3-8e1c-cb6d44363f48](https://fiddle.clickhouse.com/c4f97f56-e6f8-45b3-8e1c-cb6d44363f48)\r\n\r\n```\r\nCREATE TABLE distributed_table\r\n(\r\n    id Int8,\r\n    arr Array(String)\r\n)\r\nENGINE = Distributed('default', 'default', 'local_table', rand());\r\n\r\n\r\nCREATE TABLE local_table\r\n(\r\n    id Int8,\r\n    arr Array(String)\r\n)\r\nENGINE = MergeTree()\r\nPRIMARY KEY (id);\r\n\r\n\r\nSELECT\r\n    arr\r\nFROM distributed_table\r\nARRAY JOIN arr AS arr_item\r\nJOIN (SELECT 's' as arr_item) as foo USING arr_item;\r\n```\r\n\r\nNo any Non-default settings\r\n\r\n**Expected behavior**\r\n\r\nNo errors, return response with 0 lines\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\n\r\nReceived exception from server (version 24.12.1):\r\nCode: 47. DB::Exception: Received from localhost:9000. DB::Exception: JOIN  ALL INNER JOIN ... USING (arr_item) using identifier 'arr_item' cannot be resolved from left table expression. In scope SELECT __table2.arr AS arr FROM default.local_table AS __table2 ARRAY JOIN __table2.arr AS __array_join_exp_1 ALL INNER JOIN (SELECT 's' AS arr_item FROM system.one AS __table4) AS __table3 USING (arr_item). (UNKNOWN_IDENTIFIER)\r\n(query: SELECT\r\n\tarr\r\nFROM distributed_table\r\nARRAY JOIN arr AS arr_item\r\nJOIN (SELECT 's' as arr_item) as foo USING arr_item;)\r\n```\n",
  "hints_text": "works fine on 24.11.1, broken in 24.11.2\r\n* https://github.com/ClickHouse/ClickHouse/pull/72608",
  "created_at": "2025-05-07T17:05:09Z",
  "modified_files": [
    "src/Analyzer/JoinNode.cpp",
    "src/Analyzer/Resolve/QueryAnalyzer.cpp",
    "src/Interpreters/ClusterProxy/executeQuery.cpp",
    "src/Parsers/ASTTablesInSelectQuery.cpp",
    "src/Parsers/ASTWithAlias.cpp",
    "src/Parsers/IAST.h",
    "src/Planner/findParallelReplicasQuery.cpp",
    "src/Storages/StorageDistributed.cpp",
    "src/Storages/buildQueryTreeForShard.cpp",
    "src/Storages/buildQueryTreeForShard.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03395_global_join_supported_kind.reference",
    "b/tests/queries/0_stateless/03395_global_join_supported_kind.sql",
    "b/tests/queries/0_stateless/03448_analyzer_array_join_alias_in_join_using_bug.reference",
    "b/tests/queries/0_stateless/03448_analyzer_array_join_alias_in_join_using_bug.sql",
    "b/tests/queries/0_stateless/03449_join_using_allow_alias.reference",
    "b/tests/queries/0_stateless/03449_join_using_allow_alias.sql"
  ]
}