{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 51492,
  "instance_id": "ClickHouse__ClickHouse-51492",
  "issue_numbers": [
    "50239"
  ],
  "base_commit": "abf56b80a9303b0ffea4996753d7c670acfcdf61",
  "patch": "diff --git a/src/Processors/QueryPlan/PartsSplitter.cpp b/src/Processors/QueryPlan/PartsSplitter.cpp\nindex 9796e696f6c2..533fbde1e130 100644\n--- a/src/Processors/QueryPlan/PartsSplitter.cpp\n+++ b/src/Processors/QueryPlan/PartsSplitter.cpp\n@@ -256,6 +256,7 @@ namespace ErrorCodes\n \n Pipes buildPipesForReadingByPKRanges(\n     const KeyDescription & primary_key,\n+    ExpressionActionsPtr sorting_expr,\n     RangesInDataParts parts,\n     size_t max_layers,\n     ContextPtr context,\n@@ -271,6 +272,8 @@ Pipes buildPipesForReadingByPKRanges(\n     for (size_t i = 0; i < result_layers.size(); ++i)\n     {\n         pipes[i] = reading_step_getter(std::move(result_layers[i]));\n+        pipes[i].addSimpleTransform([sorting_expr](const Block & header)\n+                                    { return std::make_shared<ExpressionTransform>(header, sorting_expr); });\n         auto & filter_function = filters[i];\n         if (!filter_function)\n             continue;\n@@ -279,9 +282,6 @@ Pipes buildPipesForReadingByPKRanges(\n         ExpressionActionsPtr expression_actions = std::make_shared<ExpressionActions>(std::move(actions));\n         auto description = fmt::format(\n             \"filter values in [{}, {})\", i ? ::toString(borders[i - 1]) : \"-inf\", i < borders.size() ? ::toString(borders[i]) : \"+inf\");\n-        auto pk_expression = std::make_shared<ExpressionActions>(primary_key.expression->getActionsDAG().clone());\n-        pipes[i].addSimpleTransform([pk_expression](const Block & header)\n-                                    { return std::make_shared<ExpressionTransform>(header, pk_expression); });\n         pipes[i].addSimpleTransform(\n             [&](const Block & header)\n             {\ndiff --git a/src/Processors/QueryPlan/PartsSplitter.h b/src/Processors/QueryPlan/PartsSplitter.h\nindex 56bca688c2d4..4ba655a6f6d0 100644\n--- a/src/Processors/QueryPlan/PartsSplitter.h\n+++ b/src/Processors/QueryPlan/PartsSplitter.h\n@@ -18,6 +18,7 @@ using ReadingInOrderStepGetter = std::function<Pipe(RangesInDataParts)>;\n /// Will try to produce exactly max_layer pipes but may return less if data is distributed in not a very parallelizable way.\n Pipes buildPipesForReadingByPKRanges(\n     const KeyDescription & primary_key,\n+    ExpressionActionsPtr sorting_expr,\n     RangesInDataParts parts,\n     size_t max_layers,\n     ContextPtr context,\ndiff --git a/src/Processors/QueryPlan/ReadFromMergeTree.cpp b/src/Processors/QueryPlan/ReadFromMergeTree.cpp\nindex 3c38ecbbd3fb..fac8ebd6e1f8 100644\n--- a/src/Processors/QueryPlan/ReadFromMergeTree.cpp\n+++ b/src/Processors/QueryPlan/ReadFromMergeTree.cpp\n@@ -979,6 +979,8 @@ Pipe ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(\n     RangesInDataParts lonely_parts;\n     size_t sum_marks_in_lonely_parts = 0;\n \n+    auto sorting_expr = std::make_shared<ExpressionActions>(metadata_for_reading->getSortingKey().expression->getActionsDAG().clone());\n+\n     for (size_t range_index = 0; range_index < parts_to_merge_ranges.size() - 1; ++range_index)\n     {\n         Pipes pipes;\n@@ -1022,12 +1024,20 @@ Pipe ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(\n                         info.use_uncompressed_cache);\n                 };\n                 pipes = buildPipesForReadingByPKRanges(\n-                    metadata_for_reading->getPrimaryKey(), std::move(new_parts), num_streams, context, std::move(reading_step_getter));\n+                    metadata_for_reading->getPrimaryKey(),\n+                    sorting_expr,\n+                    std::move(new_parts),\n+                    num_streams,\n+                    context,\n+                    std::move(reading_step_getter));\n             }\n             else\n             {\n                 pipes.emplace_back(read(\n                     std::move(new_parts), column_names, ReadFromMergeTree::ReadType::InOrder, num_streams, 0, info.use_uncompressed_cache));\n+\n+                pipes.back().addSimpleTransform([sorting_expr](const Block & header)\n+                                                { return std::make_shared<ExpressionTransform>(header, sorting_expr); });\n             }\n \n             /// Drop temporary columns, added by 'sorting_key_expr'\n@@ -1035,13 +1045,6 @@ Pipe ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(\n                 out_projection = createProjection(pipes.front().getHeader());\n         }\n \n-        auto sorting_expr = std::make_shared<ExpressionActions>(\n-            metadata_for_reading->getSortingKey().expression->getActionsDAG().clone());\n-\n-        for (auto & pipe : pipes)\n-            pipe.addSimpleTransform([sorting_expr](const Block & header)\n-                                    { return std::make_shared<ExpressionTransform>(header, sorting_expr); });\n-\n         /// If do_not_merge_across_partitions_select_final is true and there is only one part in partition\n         /// with level > 0 then we won't postprocess this part\n         if (settings.do_not_merge_across_partitions_select_final &&\n@@ -1098,9 +1101,6 @@ Pipe ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(\n         if (!out_projection)\n             out_projection = createProjection(pipe.getHeader());\n \n-        auto sorting_expr = std::make_shared<ExpressionActions>(\n-            metadata_for_reading->getSortingKey().expression->getActionsDAG().clone());\n-\n         pipe.addSimpleTransform([sorting_expr](const Block & header)\n         {\n             return std::make_shared<ExpressionTransform>(header, sorting_expr);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01861_explain_pipeline.reference b/tests/queries/0_stateless/01861_explain_pipeline.reference\nindex aec3ae06dce3..427b3eaefc08 100644\n--- a/tests/queries/0_stateless/01861_explain_pipeline.reference\n+++ b/tests/queries/0_stateless/01861_explain_pipeline.reference\n@@ -17,14 +17,12 @@ ExpressionTransform \u00d7 2\n   (ReadFromMergeTree)\n   ExpressionTransform \u00d7 2\n     ReplacingSorted\n-      ExpressionTransform\n-        FilterSortedStreamByRange\n-        Description: filter values in [(5), +inf)\n-          ExpressionTransform\n-            MergeTreeInOrder 0 \u2192 1\n-              ReplacingSorted 2 \u2192 1\n+      FilterSortedStreamByRange\n+      Description: filter values in [(5), +inf)\n+        ExpressionTransform\n+          MergeTreeInOrder 0 \u2192 1\n+            ReplacingSorted 2 \u2192 1\n+              FilterSortedStreamByRange \u00d7 2\n+              Description: filter values in [-inf, (5))\n                 ExpressionTransform \u00d7 2\n-                  FilterSortedStreamByRange \u00d7 2\n-                  Description: filter values in [-inf, (5))\n-                    ExpressionTransform \u00d7 2\n-                      MergeTreeInOrder \u00d7 2 0 \u2192 1\n+                  MergeTreeInOrder \u00d7 2 0 \u2192 1\ndiff --git a/tests/queries/0_stateless/02780_final_streams_data_skipping_index.reference b/tests/queries/0_stateless/02780_final_streams_data_skipping_index.reference\nindex d7a540ae479c..5242c6253250 100644\n--- a/tests/queries/0_stateless/02780_final_streams_data_skipping_index.reference\n+++ b/tests/queries/0_stateless/02780_final_streams_data_skipping_index.reference\n@@ -9,17 +9,15 @@ ExpressionTransform \u00d7 2\n     (ReadFromMergeTree)\n     ExpressionTransform \u00d7 2\n       AggregatingSortedTransform 2 \u2192 1\n-        ExpressionTransform \u00d7 2\n-          FilterSortedStreamByRange \u00d7 2\n-          Description: filter values in [(999424), +inf)\n-            ExpressionTransform \u00d7 2\n-              MergeTreeInOrder \u00d7 2 0 \u2192 1\n-                AggregatingSortedTransform\n+        FilterSortedStreamByRange \u00d7 2\n+        Description: filter values in [(999424), +inf)\n+          ExpressionTransform \u00d7 2\n+            MergeTreeInOrder \u00d7 2 0 \u2192 1\n+              AggregatingSortedTransform\n+                FilterSortedStreamByRange\n+                Description: filter values in [-inf, (999424))\n                   ExpressionTransform\n-                    FilterSortedStreamByRange\n-                    Description: filter values in [-inf, (999424))\n-                      ExpressionTransform\n-                        MergeTreeInOrder 0 \u2192 1\n+                    MergeTreeInOrder 0 \u2192 1\n EXPLAIN PIPELINE SELECT * FROM data FINAL WHERE v1 >= now() - INTERVAL 180 DAY\n SETTINGS max_threads=2, max_final_threads=2, force_data_skipping_indices='v1_index', use_skip_indexes_if_final=0\n FORMAT LineAsString;\n@@ -30,14 +28,12 @@ ExpressionTransform \u00d7 2\n     (ReadFromMergeTree)\n     ExpressionTransform \u00d7 2\n       AggregatingSortedTransform 2 \u2192 1\n-        ExpressionTransform \u00d7 2\n-          FilterSortedStreamByRange \u00d7 2\n-          Description: filter values in [(999424), +inf)\n-            ExpressionTransform \u00d7 2\n-              MergeTreeInOrder \u00d7 2 0 \u2192 1\n-                AggregatingSortedTransform\n+        FilterSortedStreamByRange \u00d7 2\n+        Description: filter values in [(999424), +inf)\n+          ExpressionTransform \u00d7 2\n+            MergeTreeInOrder \u00d7 2 0 \u2192 1\n+              AggregatingSortedTransform\n+                FilterSortedStreamByRange\n+                Description: filter values in [-inf, (999424))\n                   ExpressionTransform\n-                    FilterSortedStreamByRange\n-                    Description: filter values in [-inf, (999424))\n-                      ExpressionTransform\n-                        MergeTreeInOrder 0 \u2192 1\n+                    MergeTreeInOrder 0 \u2192 1\ndiff --git a/tests/queries/0_stateless/02791_final_block_structure_mismatch_bug.reference b/tests/queries/0_stateless/02791_final_block_structure_mismatch_bug.reference\nnew file mode 100644\nindex 000000000000..a8401b1cae8f\n--- /dev/null\n+++ b/tests/queries/0_stateless/02791_final_block_structure_mismatch_bug.reference\n@@ -0,0 +1,9 @@\n+1\n+2\n+3\n+1\n+2\n+3\n+1\n+2\n+3\ndiff --git a/tests/queries/0_stateless/02791_final_block_structure_mismatch_bug.sql b/tests/queries/0_stateless/02791_final_block_structure_mismatch_bug.sql\nnew file mode 100644\nindex 000000000000..394e3bff87bd\n--- /dev/null\n+++ b/tests/queries/0_stateless/02791_final_block_structure_mismatch_bug.sql\n@@ -0,0 +1,81 @@\n+SET do_not_merge_across_partitions_select_final=1;\n+\n+CREATE TABLE test_block_mismatch\n+(\n+    a UInt32,\n+    b DateTime\n+)\n+ENGINE = ReplacingMergeTree\n+PARTITION BY toYYYYMM(b)\n+ORDER BY (toDate(b), a);\n+\n+INSERT INTO test_block_mismatch VALUES (1, toDateTime('2023-01-01 12:12:12'));\n+INSERT INTO test_block_mismatch VALUES (1, toDateTime('2023-01-01 12:12:12'));\n+SELECT count(*) FROM test_block_mismatch FINAL;\n+\n+INSERT INTO test_block_mismatch VALUES (1, toDateTime('2023-02-02 12:12:12'));\n+INSERT INTO test_block_mismatch VALUES (1, toDateTime('2023-02-02 12:12:12'));\n+SELECT count(*) FROM test_block_mismatch FINAL;\n+\n+optimize table test_block_mismatch final;\n+system stop merges test_block_mismatch;\n+\n+INSERT INTO test_block_mismatch VALUES (2, toDateTime('2023-01-01 12:12:12'));\n+INSERT INTO test_block_mismatch VALUES (2, toDateTime('2023-01-01 12:12:12'));\n+-- one lonely part in 2023-02-02 partition and 3 parts in 2023-01-01 partition.\n+-- lonely part will not be processed by PartsSplitter and 2023-01-01's parts will be - previously this led to the `Block structure mismatch in Pipe::unitePipes` exception.\n+SELECT count(*) FROM test_block_mismatch FINAL;\n+\n+\n+-- variations of the test above with slightly modified table definitions\n+\n+CREATE TABLE test_block_mismatch_sk1\n+(\n+    a UInt32,\n+    b DateTime\n+)\n+ENGINE = ReplacingMergeTree\n+PARTITION BY toYYYYMM(b)\n+PRIMARY KEY (toDate(b))\n+ORDER BY (toDate(b), a);\n+\n+INSERT INTO test_block_mismatch_sk1  VALUES (1, toDateTime('2023-01-01 12:12:12'));\n+INSERT INTO test_block_mismatch_sk1 VALUES (1, toDateTime('2023-01-01 12:12:12'));\n+SELECT count(*) FROM test_block_mismatch_sk1 FINAL;\n+\n+INSERT INTO test_block_mismatch_sk1 VALUES (1, toDateTime('2023-02-02 12:12:12'));\n+INSERT INTO test_block_mismatch_sk1 VALUES (1, toDateTime('2023-02-02 12:12:12'));\n+SELECT count(*) FROM test_block_mismatch_sk1 FINAL;\n+\n+optimize table test_block_mismatch_sk1 final;\n+system stop merges test_block_mismatch_sk1;\n+\n+INSERT INTO test_block_mismatch_sk1 VALUES (2, toDateTime('2023-01-01 12:12:12'));\n+INSERT INTO test_block_mismatch_sk1 VALUES (2, toDateTime('2023-01-01 12:12:12'));\n+SELECT count(*) FROM test_block_mismatch_sk1 FINAL;\n+\n+\n+CREATE TABLE test_block_mismatch_sk2\n+(\n+    a UInt32,\n+    b DateTime\n+)\n+ENGINE = ReplacingMergeTree\n+PARTITION BY toYYYYMM(b)\n+PRIMARY KEY (a)\n+ORDER BY (a, toDate(b));\n+\n+INSERT INTO test_block_mismatch_sk2  VALUES (1, toDateTime('2023-01-01 12:12:12'));\n+INSERT INTO test_block_mismatch_sk2 VALUES (1, toDateTime('2023-01-01 12:12:12'));\n+SELECT count(*) FROM test_block_mismatch_sk2 FINAL;\n+\n+INSERT INTO test_block_mismatch_sk2 VALUES (1, toDateTime('2023-02-02 12:12:12'));\n+INSERT INTO test_block_mismatch_sk2 VALUES (1, toDateTime('2023-02-02 12:12:12'));\n+SELECT count(*) FROM test_block_mismatch_sk2 FINAL;\n+\n+optimize table test_block_mismatch_sk2 final;\n+system stop merges test_block_mismatch_sk2;\n+\n+INSERT INTO test_block_mismatch_sk2 VALUES (2, toDateTime('2023-01-01 12:12:12'));\n+INSERT INTO test_block_mismatch_sk2 VALUES (2, toDateTime('2023-01-01 12:12:12'));\n+SELECT count(*) FROM test_block_mismatch_sk2 FINAL;\n",
  "problem_statement": "DB::Exception: Block structure mismatch in Pipe::unitePipes stream: different number of columns\n**Describe the problem**\r\n\r\nSetting a table with a PK/ORDER BY using functions in a column like toYYYYMMDD/toDate/toDateTime .... to downsample and allow a less granular ordering creates some problems in queries. If using `do_not_merge_across_partitions_select_final` queries with FINAL do not work.\r\n\r\n**How to reproduce**\r\n\r\n```sql\r\nSET do_not_merge_across_partitions_select_final=1;\r\n\r\nCREATE TABLE test_block_mismatch\r\n(\r\n    a UInt32,\r\n    b DateTime\r\n)\r\nENGINE = ReplacingMergeTree\r\n    PARTITION BY toYYYYMM(b)\r\n    ORDER BY (toDate(b), a)\r\n\r\n-- Insert a = 1 in partition 1\r\nINSERT INTO test_block_mismatch VALUES\r\n(1, toDateTime('2023-01-01 12:12:12'));\r\nINSERT INTO test_block_mismatch VALUES\r\n(1, toDateTime('2023-01-01 12:12:12'));\r\nSELECT count(*) FROM test_block_mismatch FINAL;\r\n\r\n-- Insert a = 1 into partition 2\r\nINSERT INTO test_block_mismatch VALUES\r\n(1, toDateTime('2023-02-02 12:12:12'));\r\nINSERT INTO test_block_mismatch VALUES\r\n(1, toDateTime('2023-02-02 12:12:12'));\r\nSELECT count(*) FROM test_block_mismatch FINAL;\r\n\r\n-- Insert a = 2 into partition 1\r\nINSERT INTO test_block_mismatch VALUES\r\n(2, toDateTime('2023-01-01 12:12:12'));\r\nINSERT INTO test_block_mismatch VALUES\r\n(2, toDateTime('2023-01-01 12:12:12'));\r\nSELECT count(*) FROM test_block_mismatch FINAL;\r\n```\r\n\r\n* Which ClickHouse server version to use\r\n\r\nHappens on 22.7+ \r\n\r\n* Stack trace\r\n\r\n```\r\n 2023.05.25 17:33:04.956590 [ 2200 ] {08844603-45d8-47f0-84ee-c1dc48cf2754} <Debug> executeQuery: (from [::ffff:127.0.0.1]:52202, user: admin) SELECT count(*) FROM test_block_mismatch FINAL; (stage: Complete)\r\n2023.05.25 17:33:04.956726 [ 2200 ] {08844603-45d8-47f0-84ee-c1dc48cf2754} <Trace> ContextAccess (admin): Access granted: SELECT(a) ON tests.test_block_mismatch\r\n2023.05.25 17:33:04.956742 [ 2200 ] {08844603-45d8-47f0-84ee-c1dc48cf2754} <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n2023.05.25 17:33:04.956784 [ 2200 ] {08844603-45d8-47f0-84ee-c1dc48cf2754} <Debug> tests.test_block_mismatch (6f7cfa9d-a244-4f19-9f10-b4b851393612) (SelectExecutor): Key condition: unknown\r\n2023.05.25 17:33:04.956814 [ 2200 ] {08844603-45d8-47f0-84ee-c1dc48cf2754} <Debug> tests.test_block_mismatch (6f7cfa9d-a244-4f19-9f10-b4b851393612) (SelectExecutor): MinMax index condition: unknown\r\n2023.05.25 17:33:04.957075 [ 2200 ] {08844603-45d8-47f0-84ee-c1dc48cf2754} <Debug> tests.test_block_mismatch (6f7cfa9d-a244-4f19-9f10-b4b851393612) (SelectExecutor): Selected 6/6 parts by partition key, 6 parts by primary key, 6/6 marks by primary key, 6 marks to read from 6 ranges\r\n2023.05.25 17:33:04.957113 [ 2200 ] {08844603-45d8-47f0-84ee-c1dc48cf2754} <Trace> MergeTreeInOrderSelectProcessor: Reading 1 ranges in order from part 202301_1_1_0, approx. 1 rows starting from 0\r\n2023.05.25 17:33:04.957118 [ 2200 ] {08844603-45d8-47f0-84ee-c1dc48cf2754} <Trace> MergeTreeInOrderSelectProcessor: Reading 1 ranges in order from part 202301_2_2_0, approx. 1 rows starting from 0\r\n2023.05.25 17:33:04.957348 [ 2200 ] {08844603-45d8-47f0-84ee-c1dc48cf2754} <Trace> MergeTreeInOrderSelectProcessor: Reading 1 ranges in order from part 202301_5_5_0, approx. 1 rows starting from 0\r\n2023.05.25 17:33:04.957372 [ 2200 ] {08844603-45d8-47f0-84ee-c1dc48cf2754} <Trace> MergeTreeInOrderSelectProcessor: Reading 1 ranges in order from part 202301_6_6_0, approx. 1 rows starting from 0\r\n2023.05.25 17:33:04.957579 [ 2200 ] {08844603-45d8-47f0-84ee-c1dc48cf2754} <Trace> MergeTreeInOrderSelectProcessor: Reading 1 ranges in order from part 202302_3_3_0, approx. 1 rows starting from 0\r\n2023.05.25 17:33:04.957600 [ 2200 ] {08844603-45d8-47f0-84ee-c1dc48cf2754} <Trace> MergeTreeInOrderSelectProcessor: Reading 1 ranges in order from part 202302_4_4_0, approx. 1 rows starting from 0\r\n2023.05.25 17:33:04.957812 [ 2200 ] {08844603-45d8-47f0-84ee-c1dc48cf2754} <Error> executeQuery: Code: 49. DB::Exception: Block structure mismatch in Pipe::unitePipes stream: different number of columns:\r\na UInt32 UInt32(size = 0), b DateTime UInt32(size = 0), toDate(b) Date UInt16(size = 0)\r\na UInt32 UInt32(size = 0), b DateTime UInt32(size = 0), toDate(b) Date UInt16(size = 0), toDate(b) Date UInt16(size = 0). (LOGICAL_ERROR) (version 23.3.2.37 (official build)) (from [::ffff:127.0.0.1]:52202) (in query: SELECT count(*) FROM test_block_mismatch FINAL;), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0xe1e20b5 in /usr/bin/clickhouse\r\n1. ? @ 0x127ce58c in /usr/bin/clickhouse\r\n2. ? @ 0x127cbfdb in /usr/bin/clickhouse\r\n3. DB::Pipe::unitePipes(std::vector<DB::Pipe, std::allocator<DB::Pipe>>, std::vector<std::shared_ptr<DB::IProcessor>, std::allocator<std::shared_ptr<DB::IProcessor>>>*, bool) @ 0x12a06a6d in /usr/bin/clickhouse\r\n4. DB::ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(DB::RangesInDataParts&&, unsigned long, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::ActionsDAG>&) @ 0x14dbfe30 in /usr/bin/clickhouse\r\n5. DB::ReadFromMergeTree::spreadMarkRanges(DB::RangesInDataParts&&, unsigned long, DB::ReadFromMergeTree::AnalysisResult&, std::shared_ptr<DB::ActionsDAG>&) @ 0x14dc7c7e in /usr/bin/clickhouse\r\n6. DB::ReadFromMergeTree::initializePipeline(DB::QueryPipelineBuilder&, DB::BuildQueryPipelineSettings const&) @ 0x14dc940f in /usr/bin/clickhouse\r\n7. DB::ISourceStep::updatePipeline(std::vector<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>, std::allocator<std::unique_ptr<DB::QueryPipelineBuilder, std::default_delete<DB::QueryPipelineBuilder>>>>, DB::BuildQueryPipelineSettings const&) @ 0x14d8cd6c in /usr/bin/clickhouse\r\n8. DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x14da52e9 in /usr/bin/clickhouse\r\n9. DB::InterpreterSelectWithUnionQuery::execute() @ 0x138d49f8 in /usr/bin/clickhouse\r\n10. ? @ 0x13bf9ec7 in /usr/bin/clickhouse\r\n11. DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x13bf746d in /usr/bin/clickhouse\r\n12. DB::TCPHandler::runImpl() @ 0x149c994c in /usr/bin/clickhouse\r\n13. DB::TCPHandler::run() @ 0x149df159 in /usr/bin/clickhouse\r\n14. Poco::Net::TCPServerConnection::start() @ 0x17919874 in /usr/bin/clickhouse\r\n15. Poco::Net::TCPServerDispatcher::run() @ 0x1791aa9b in /usr/bin/clickhouse\r\n16. Poco::PooledThread::run() @ 0x17aa2327 in /usr/bin/clickhouse\r\n17. Poco::ThreadImpl::runnableEntry(void*) @ 0x17a9fd5d in /usr/bin/clickhouse\r\n18. ? @ 0x7f9783894b43 in ?\r\n19. ? @ 0x7f9783926a00 in ?\r\n\r\n\r\n0 rows in set. Elapsed: 0.002 sec. \r\n\r\nReceived exception from server (version 23.3.2):\r\nCode: 49. DB::Exception: Received from laptop:9440. DB::Exception: Block structure mismatch in Pipe::unitePipes stream: different number of columns:\r\na UInt32 UInt32(size = 0), b DateTime UInt32(size = 0), toDate(b) Date UInt16(size = 0)\r\na UInt32 UInt32(size = 0), b DateTime UInt32(size = 0), toDate(b) Date UInt16(size = 0), toDate(b) Date UInt16(size = 0). (LOGICAL_ERROR)\r\n```\r\n\r\n\n",
  "hints_text": "cc: @KochetovNicolai, @nickitat ",
  "created_at": "2023-06-27T15:28:16Z",
  "modified_files": [
    "src/Processors/QueryPlan/PartsSplitter.cpp",
    "src/Processors/QueryPlan/PartsSplitter.h",
    "src/Processors/QueryPlan/ReadFromMergeTree.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01861_explain_pipeline.reference",
    "tests/queries/0_stateless/02780_final_streams_data_skipping_index.reference",
    "b/tests/queries/0_stateless/02791_final_block_structure_mismatch_bug.reference",
    "b/tests/queries/0_stateless/02791_final_block_structure_mismatch_bug.sql"
  ]
}