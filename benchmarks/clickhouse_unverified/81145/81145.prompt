You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
`PipelineExecutor: Code: 49. DB::Exception: Too large size ... passed to allocator` when trying to insert JSON data over HTTP
### Company or project name

Dash0

### Describe what's wrong

We're using ClickHouse for our integration tests (via Golang TestContainers) in a similar setup to our development / production environment (but then single-node using `testkeeper`).

We are inserting data for the integration tests via HTTP POST, using `application/json` body; `INSERT INTO <database>.<table> FORMAT JSON`

Up until version 24.9 this worked fine. But switching to 24.10 or any later version gives the following errors:

```
2025.05.23 08:41:26.905289 [ 68 ] {53956b01-55ef-4371-b612-d49762dc5fa3} <Error> executeQuery: Code: 49. DB::Exception: Too large size (18446462934113570430) passed to allocator. It indicates an error.: While executing JSONRowInputFormat. (LOGICAL_ERROR) (version 24.10.4.191 (official build)) (from 172.17.0.1:45326) (in query: INSERT INTO otel.otel_metrics_metadata3 FORMAT JSON ), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000cf827bb
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000007ead88c
2. DB::Exception::Exception<unsigned long&>(int, FormatStringHelperImpl<std::type_identity<unsigned long&>::type>, unsigned long&) @ 0x000000000849748b
3. Allocator<false, false>::realloc(void*, unsigned long, unsigned long, unsigned long) @ 0x000000000cf546ad
4. void DB::PODArrayBase<1ul, 4096ul, Allocator<false, false>, 63ul, 64ul>::reserveForNextSize<>() @ 0x0000000007ebe627
5. DB::DataTypeEnum<_BitInt(8)>::insertDefaultInto(DB::IColumn&) const @ 0x0000000010713917
6. DB::JSONEachRowRowInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, DB::RowReadExtension&) @ 0x0000000012afbf7a
7. DB::IRowInputFormat::read() @ 0x0000000012a473cf
8. DB::IInputFormat::generate() @ 0x00000000129e9356
9. DB::ISource::tryGenerate() @ 0x00000000129c5a9b
10. DB::ISource::work() @ 0x00000000129c57a7
11. DB::ExecutionThreadContext::executeTask() @ 0x00000000129dff27
12. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000129d34d0
13. DB::PipelineExecutor::execute(unsigned long, bool) @ 0x00000000129d27a4
14. DB::CompletedPipelineExecutor::execute() @ 0x00000000129d1052
15. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>) @ 0x00000000117508e8
16. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000128c3dc3
17. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000128c7d25
18. DB::HTTPServerConnection::run() @ 0x000000001296799d
19. Poco::Net::TCPServerConnection::start() @ 0x000000001582cce7
20. Poco::Net::TCPServerDispatcher::run() @ 0x000000001582d179
21. Poco::PooledThread::run() @ 0x00000000157f9be1
22. Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000157f819d
23. ? @ 0x00007fda7d6edac3
24. ? @ 0x00007fda7d77ea04

2025.05.23 08:41:26.905577 [ 68 ] {53956b01-55ef-4371-b612-d49762dc5fa3} <Error> DynamicQueryHandler: Code: 49. DB::Exception: Too large size (18446462934113570430) passed to allocator. It indicates an error.: While executing JSONRowInputFormat. (LOGICAL_ERROR), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000cf827bb
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000007ead88c
2. DB::Exception::Exception<unsigned long&>(int, FormatStringHelperImpl<std::type_identity<unsigned long&>::type>, unsigned long&) @ 0x000000000849748b
3. Allocator<false, false>::realloc(void*, unsigned long, unsigned long, unsigned long) @ 0x000000000cf546ad
4. void DB::PODArrayBase<1ul, 4096ul, Allocator<false, false>, 63ul, 64ul>::reserveForNextSize<>() @ 0x0000000007ebe627
5. DB::DataTypeEnum<_BitInt(8)>::insertDefaultInto(DB::IColumn&) const @ 0x0000000010713917
6. DB::JSONEachRowRowInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, DB::RowReadExtension&) @ 0x0000000012afbf7a
7. DB::IRowInputFormat::read() @ 0x0000000012a473cf
8. DB::IInputFormat::generate() @ 0x00000000129e9356
9. DB::ISource::tryGenerate() @ 0x00000000129c5a9b
10. DB::ISource::work() @ 0x00000000129c57a7
11. DB::ExecutionThreadContext::executeTask() @ 0x00000000129dff27
12. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000129d34d0
13. DB::PipelineExecutor::execute(unsigned long, bool) @ 0x00000000129d27a4
14. DB::CompletedPipelineExecutor::execute() @ 0x00000000129d1052
15. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>) @ 0x00000000117508e8
16. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000128c3dc3
17. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000128c7d25
18. DB::HTTPServerConnection::run() @ 0x000000001296799d
19. Poco::Net::TCPServerConnection::start() @ 0x000000001582cce7
20. Poco::Net::TCPServerDispatcher::run() @ 0x000000001582d179
21. Poco::PooledThread::run() @ 0x00000000157f9be1
22. Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000157f819d
23. ? @ 0x00007fda7d6edac3
24. ? @ 0x00007fda7d77ea04
 (version 24.10.4.191 (official build))
2025.05.23 08:41:26.905289 [ 68 ] {53956b01-55ef-4371-b612-d49762dc5fa3} <Error> executeQuery: Code: 49. DB::Exception: Too large size (18446462934113570430) passed to allocator. It indicates an error.: While executing JSONRowInputFormat. (LOGICAL_ERROR) (version 24.10.4.191 (official build)) (from 172.17.0.1:45326) (in query: INSERT INTO otel.otel_metrics_metadata3 FORMAT JSON ), Stack trace (when copying this message, always include the lines below):

0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000cf827bb
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000007ead88c
2. DB::Exception::Exception<unsigned long&>(int, FormatStringHelperImpl<std::type_identity<unsigned long&>::type>, unsigned long&) @ 0x000000000849748b
3. Allocator<false, false>::realloc(void*, unsigned long, unsigned long, unsigned long) @ 0x000000000cf546ad
4. void DB::PODArrayBase<1ul, 4096ul, Allocator<false, false>, 63ul, 64ul>::reserveForNextSize<>() @ 0x0000000007ebe627
5. DB::DataTypeEnum<_BitInt(8)>::insertDefaultInto(DB::IColumn&) const @ 0x0000000010713917
6. DB::JSONEachRowRowInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, DB::RowReadExtension&) @ 0x0000000012afbf7a
7. DB::IRowInputFormat::read() @ 0x0000000012a473cf
8. DB::IInputFormat::generate() @ 0x00000000129e9356
9. DB::ISource::tryGenerate() @ 0x00000000129c5a9b
10. DB::ISource::work() @ 0x00000000129c57a7
11. DB::ExecutionThreadContext::executeTask() @ 0x00000000129dff27
12. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x00000000129d34d0
13. DB::PipelineExecutor::execute(unsigned long, bool) @ 0x00000000129d27a4
14. DB::CompletedPipelineExecutor::execute() @ 0x00000000129d1052
15. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::optional<DB::FormatSettings> const&, std::function<void (DB::IOutputFormat&, String const&, std::shared_ptr<DB::Context const> const&, std::optional<DB::FormatSettings> const&)>) @ 0x00000000117508e8
16. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000128c3dc3
17. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&, StrongTypedef<unsigned long, ProfileEvents::EventTag> const&) @ 0x00000000128c7d25
18. DB::HTTPServerConnection::run() @ 0x000000001296799d
19. Poco::Net::TCPServerConnection::start() @ 0x000000001582cce7
20. Poco::Net::TCPServerDispatcher::run() @ 0x000000001582d179
21. Poco::PooledThread::run() @ 0x00000000157f9be1
22. Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000157f819d
23. ? @ 0x00007fda7d6edac3
24. ? @ 0x00007fda7d77ea04
```

NOTE: it seems if we run only (part of) a single test, so with less data getting inserted in parallel, the insert runs fine. Only if we try to insert more data do we consistently run into this.

### Does it reproduce on the most recent release?

Yes

### How to reproduce

- ClickHouse >= 24.10
- HTTP POST with JSON data


### Expected behavior

Data getting inserted without issues.

### Error message and/or stacktrace

See above

### Additional context

_No response_
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
