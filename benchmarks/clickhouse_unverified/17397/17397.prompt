You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Segmentation fault on Join engine with LowCardinality column
Tested in `20.11.3.3-stable` and `20.7.2.30-stable`.

```SQL
CREATE TABLE low_card
(
    `lc` LowCardinality(String)
)
ENGINE = Join(ANY, LEFT, lc);
```

```SQL
INSERT INTO low_card VALUES ( '1' );
```

```
SELECT * FROM low_card WHERE lc = '1';

[fdea5737f3fb] 2020.11.20 12:32:03.028811 [ 117 ] <Fatal> BaseDaemon: ########################################
[fdea5737f3fb] 2020.11.20 12:32:03.028952 [ 117 ] <Fatal> BaseDaemon: (version 20.11.3.3 (official build), build id: C88CD350740ED614) (from thread 112) (query_id: 0b3ea2d5-8e14-411c-99aa-559f8c597d33) Received signal Segmentation fault (11)
[fdea5737f3fb] 2020.11.20 12:32:03.029003 [ 117 ] <Fatal> BaseDaemon: Address: 0x1 Access: read. Address not mapped to object.
[fdea5737f3fb] 2020.11.20 12:32:03.029087 [ 117 ] <Fatal> BaseDaemon: Stack trace: 0xdd25745 0xaa8dc88 0xa8c4a6f 0xa8acf81 0xa8c419b 0xa8acbb8 0x91e1ace 0x920d960 0x920e81e 0xd93f141 0xd94331d 0xe484728 0xde87410 0xe34b8c5 0xe38774c 0xe384877 0xe383069 0xe382bed 0xe38efed 0x7b6293d 0x7b66463 0x7f601ba69609 0x7f601b97f293
[fdea5737f3fb] 2020.11.20 12:32:03.029278 [ 117 ] <Fatal> BaseDaemon: 2. DB::ColumnString::compareAt(unsigned long, unsigned long, DB::IColumn const&, int) const @ 0xdd25745 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.029353 [ 117 ] <Fatal> BaseDaemon: 3. DB::GenericComparisonImpl<DB::EqualsOp<int, int> >::vectorConstant(DB::IColumn const&, DB::IColumn const&, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul>&) @ 0xaa8dc88 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.029423 [ 117 ] <Fatal> BaseDaemon: 4. DB::FunctionComparison<DB::EqualsOp, DB::NameEquals>::executeGenericIdenticalTypes(DB::IColumn const*, DB::IColumn const*) const @ 0xa8c4a6f in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.029472 [ 117 ] <Fatal> BaseDaemon: 5. DB::FunctionComparison<DB::EqualsOp, DB::NameEquals>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xa8acf81 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.029518 [ 117 ] <Fatal> BaseDaemon: 6. DB::FunctionComparison<DB::EqualsOp, DB::NameEquals>::executeWithConstString(std::__1::shared_ptr<DB::IDataType const> const&, DB::IColumn const*, DB::IColumn const*, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xa8c419b in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.029564 [ 117 ] <Fatal> BaseDaemon: 7. DB::FunctionComparison<DB::EqualsOp, DB::NameEquals>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xa8acbb8 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.029679 [ 117 ] <Fatal> BaseDaemon: 8. DB::DefaultExecutable::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) @ 0x91e1ace in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.029729 [ 117 ] <Fatal> BaseDaemon: 9. DB::ExecutableFunctionAdaptor::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) @ 0x920d960 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.029780 [ 117 ] <Fatal> BaseDaemon: 10. DB::ExecutableFunctionAdaptor::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) @ 0x920e81e in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.029825 [ 117 ] <Fatal> BaseDaemon: 11. DB::ExpressionAction::execute(DB::Block&, bool) const @ 0xd93f141 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.029892 [ 117 ] <Fatal> BaseDaemon: 12. DB::ExpressionActions::execute(DB::Block&, bool) const @ 0xd94331d in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.029943 [ 117 ] <Fatal> BaseDaemon: 13. DB::FilterTransform::transform(DB::Chunk&) @ 0xe484728 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.030030 [ 117 ] <Fatal> BaseDaemon: 14. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0xde87410 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.030071 [ 117 ] <Fatal> BaseDaemon: 15. DB::ISimpleTransform::work() @ 0xe34b8c5 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.030151 [ 117 ] <Fatal> BaseDaemon: 16. ? @ 0xe38774c in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.030259 [ 117 ] <Fatal> BaseDaemon: 17. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0xe384877 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.030306 [ 117 ] <Fatal> BaseDaemon: 18. DB::PipelineExecutor::executeImpl(unsigned long) @ 0xe383069 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.030350 [ 117 ] <Fatal> BaseDaemon: 19. DB::PipelineExecutor::execute(unsigned long) @ 0xe382bed in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.030396 [ 117 ] <Fatal> BaseDaemon: 20. ? @ 0xe38efed in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.030442 [ 117 ] <Fatal> BaseDaemon: 21. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x7b6293d in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.030483 [ 117 ] <Fatal> BaseDaemon: 22. ? @ 0x7b66463 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:32:03.030532 [ 117 ] <Fatal> BaseDaemon: 23. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so
[fdea5737f3fb] 2020.11.20 12:32:03.030578 [ 117 ] <Fatal> BaseDaemon: 24. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so
```

**Additional context**

A query with no filtering return this error (with no segfault).

```
SELECT * FROM low_card;
Code: 271. DB::Exception: Data compressed with different methods, given method byte 0x69, previous method byte 0x82: while receiving packet from localhost:9000
```

```
SELECT CAST(lc AS String) FROM low_card;

[fdea5737f3fb] 2020.11.20 12:57:02.512467 [ 116 ] <Fatal> BaseDaemon: ########################################
[fdea5737f3fb] 2020.11.20 12:57:02.512676 [ 116 ] <Fatal> BaseDaemon: (version 20.11.3.3 (official build), build id: C88CD350740ED614) (from thread 111) (query_id: 20c21126-6b99-4c42-afb2-ab7967b6c19c) Received signal Segmentation fault (11)
[fdea5737f3fb] 2020.11.20 12:57:02.512852 [ 116 ] <Fatal> BaseDaemon: Address: 0x10 Access: read. Address not mapped to object.
[fdea5737f3fb] 2020.11.20 12:57:02.512897 [ 116 ] <Fatal> BaseDaemon: Stack trace: 0x93293e9 0x9328fe3 0x9241f85 0x920d960 0x920dfde 0xd93f141 0xd94331d 0xe481dc7 0xde87410 0xe34b8c5 0xe38774c 0xe384877 0xe383069 0xe382bed 0xe38efed 0x7b6293d 0x7b66463 0x7f415ddc3609 0x7f415dcd9293
[fdea5737f3fb] 2020.11.20 12:57:02.513818 [ 116 ] <Fatal> BaseDaemon: 2. DB::FunctionCast::prepareUnpackDictionaries(std::__1::shared_ptr<DB::IDataType const> const&, std::__1::shared_ptr<DB::IDataType const> const&) const::'lambda0'(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)::operator()(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) const @ 0x93293e9 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.513927 [ 116 ] <Fatal> BaseDaemon: 3. std::__1::__function::__func<DB::FunctionCast::prepareUnpackDictionaries(std::__1::shared_ptr<DB::IDataType const> const&, std::__1::shared_ptr<DB::IDataType const> const&) const::'lambda0'(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), std::__1::allocator<DB::FunctionCast::prepareUnpackDictionaries(std::__1::shared_ptr<DB::IDataType const> const&, std::__1::shared_ptr<DB::IDataType const> const&) const::'lambda0'(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>, COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::operator()(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*&&, unsigned long&&) @ 0x9328fe3 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.513990 [ 116 ] <Fatal> BaseDaemon: 4. DB::ExecutableFunctionCast::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) @ 0x9241f85 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.514054 [ 116 ] <Fatal> BaseDaemon: 5. DB::ExecutableFunctionAdaptor::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) @ 0x920d960 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.514119 [ 116 ] <Fatal> BaseDaemon: 6. DB::ExecutableFunctionAdaptor::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) @ 0x920dfde in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.514249 [ 116 ] <Fatal> BaseDaemon: 7. DB::ExpressionAction::execute(DB::Block&, bool) const @ 0xd93f141 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.514315 [ 116 ] <Fatal> BaseDaemon: 8. DB::ExpressionActions::execute(DB::Block&, bool) const @ 0xd94331d in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.514369 [ 116 ] <Fatal> BaseDaemon: 9. DB::ExpressionTransform::transform(DB::Chunk&) @ 0xe481dc7 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.514484 [ 116 ] <Fatal> BaseDaemon: 10. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0xde87410 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.514546 [ 116 ] <Fatal> BaseDaemon: 11. DB::ISimpleTransform::work() @ 0xe34b8c5 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.514646 [ 116 ] <Fatal> BaseDaemon: 12. ? @ 0xe38774c in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.514850 [ 116 ] <Fatal> BaseDaemon: 13. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0xe384877 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.514901 [ 116 ] <Fatal> BaseDaemon: 14. DB::PipelineExecutor::executeImpl(unsigned long) @ 0xe383069 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.514956 [ 116 ] <Fatal> BaseDaemon: 15. DB::PipelineExecutor::execute(unsigned long) @ 0xe382bed in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.515013 [ 116 ] <Fatal> BaseDaemon: 16. ? @ 0xe38efed in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.515077 [ 116 ] <Fatal> BaseDaemon: 17. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x7b6293d in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.515175 [ 116 ] <Fatal> BaseDaemon: 18. ? @ 0x7b66463 in /usr/bin/clickhouse
[fdea5737f3fb] 2020.11.20 12:57:02.515235 [ 116 ] <Fatal> BaseDaemon: 19. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so
[fdea5737f3fb] 2020.11.20 12:57:02.515339 [ 116 ] <Fatal> BaseDaemon: 20. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
