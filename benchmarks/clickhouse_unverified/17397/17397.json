{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 17397,
  "instance_id": "ClickHouse__ClickHouse-17397",
  "issue_numbers": [
    "17228"
  ],
  "base_commit": "d6dd133bee0cb0c13c58d417aa8f79ba88c477f6",
  "patch": "diff --git a/src/Storages/StorageJoin.cpp b/src/Storages/StorageJoin.cpp\nindex 8cf170b04eae..636fe44b120b 100644\n--- a/src/Storages/StorageJoin.cpp\n+++ b/src/Storages/StorageJoin.cpp\n@@ -10,6 +10,7 @@\n #include <DataTypes/NestedUtils.h>\n #include <Interpreters/joinDispatch.h>\n #include <Interpreters/TableJoin.h>\n+#include <Interpreters/castColumn.h>\n #include <Common/assert_cast.h>\n #include <Common/quoteString.h>\n \n@@ -321,7 +322,7 @@ class JoinSource : public SourceWithProgress\n     template <ASTTableJoin::Kind KIND, ASTTableJoin::Strictness STRICTNESS, typename Maps>\n     Chunk createChunk(const Maps & maps)\n     {\n-        MutableColumns columns = restored_block.cloneEmpty().mutateColumns();\n+        MutableColumns mut_columns = restored_block.cloneEmpty().mutateColumns();\n \n         size_t rows_added = 0;\n \n@@ -329,7 +330,7 @@ class JoinSource : public SourceWithProgress\n         {\n #define M(TYPE)                                           \\\n     case HashJoin::Type::TYPE:                                \\\n-        rows_added = fillColumns<KIND, STRICTNESS>(*maps.TYPE, columns); \\\n+        rows_added = fillColumns<KIND, STRICTNESS>(*maps.TYPE, mut_columns); \\\n         break;\n             APPLY_FOR_JOIN_VARIANTS_LIMITED(M)\n #undef M\n@@ -342,19 +343,23 @@ class JoinSource : public SourceWithProgress\n         if (!rows_added)\n             return {};\n \n-        /// Correct nullability\n+        Columns columns;\n+        columns.reserve(mut_columns.size());\n+        for (auto & col : mut_columns)\n+            columns.emplace_back(std::move(col));\n+\n+        /// Correct nullability and LowCardinality types\n         for (size_t i = 0; i < columns.size(); ++i)\n         {\n-            bool src_nullable = restored_block.getByPosition(i).type->isNullable();\n-            bool dst_nullable = sample_block.getByPosition(i).type->isNullable();\n+            const auto & src = restored_block.getByPosition(i);\n+            const auto & dst = sample_block.getByPosition(i);\n \n-            if (src_nullable && !dst_nullable)\n+            if (!src.type->equals(*dst.type))\n             {\n-                auto & nullable_column = assert_cast<ColumnNullable &>(*columns[i]);\n-                columns[i] = nullable_column.getNestedColumnPtr()->assumeMutable();\n+                auto arg = src;\n+                arg.column = std::move(columns[i]);\n+                columns[i] = castColumn(arg, dst.type);\n             }\n-            else if (!src_nullable && dst_nullable)\n-                columns[i] = makeNullable(std::move(columns[i]))->assumeMutable();\n         }\n \n         UInt64 num_rows = columns.at(0)->size();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01586_storage_join_low_cardinality_key.reference b/tests/queries/0_stateless/01586_storage_join_low_cardinality_key.reference\nnew file mode 100644\nindex 000000000000..e8183f05f5db\n--- /dev/null\n+++ b/tests/queries/0_stateless/01586_storage_join_low_cardinality_key.reference\n@@ -0,0 +1,3 @@\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/01586_storage_join_low_cardinality_key.sql b/tests/queries/0_stateless/01586_storage_join_low_cardinality_key.sql\nnew file mode 100644\nindex 000000000000..4b613b6d7ceb\n--- /dev/null\n+++ b/tests/queries/0_stateless/01586_storage_join_low_cardinality_key.sql\n@@ -0,0 +1,11 @@\n+CREATE TABLE low_card\n+(\n+    `lc` LowCardinality(String)\n+)\n+ENGINE = Join(ANY, LEFT, lc);\n+\n+INSERT INTO low_card VALUES ( '1' );\n+\n+SELECT * FROM low_card;\n+SELECT * FROM low_card WHERE lc = '1';\n+SELECT CAST(lc AS String) FROM low_card;\n",
  "problem_statement": "Segmentation fault on Join engine with LowCardinality column\nTested in `20.11.3.3-stable` and `20.7.2.30-stable`.\r\n\r\n```SQL\r\nCREATE TABLE low_card\r\n(\r\n    `lc` LowCardinality(String)\r\n)\r\nENGINE = Join(ANY, LEFT, lc);\r\n```\r\n\r\n```SQL\r\nINSERT INTO low_card VALUES ( '1' );\r\n```\r\n\r\n```\r\nSELECT * FROM low_card WHERE lc = '1';\r\n\r\n[fdea5737f3fb] 2020.11.20 12:32:03.028811 [ 117 ] <Fatal> BaseDaemon: ########################################\r\n[fdea5737f3fb] 2020.11.20 12:32:03.028952 [ 117 ] <Fatal> BaseDaemon: (version 20.11.3.3 (official build), build id: C88CD350740ED614) (from thread 112) (query_id: 0b3ea2d5-8e14-411c-99aa-559f8c597d33) Received signal Segmentation fault (11)\r\n[fdea5737f3fb] 2020.11.20 12:32:03.029003 [ 117 ] <Fatal> BaseDaemon: Address: 0x1 Access: read. Address not mapped to object.\r\n[fdea5737f3fb] 2020.11.20 12:32:03.029087 [ 117 ] <Fatal> BaseDaemon: Stack trace: 0xdd25745 0xaa8dc88 0xa8c4a6f 0xa8acf81 0xa8c419b 0xa8acbb8 0x91e1ace 0x920d960 0x920e81e 0xd93f141 0xd94331d 0xe484728 0xde87410 0xe34b8c5 0xe38774c 0xe384877 0xe383069 0xe382bed 0xe38efed 0x7b6293d 0x7b66463 0x7f601ba69609 0x7f601b97f293\r\n[fdea5737f3fb] 2020.11.20 12:32:03.029278 [ 117 ] <Fatal> BaseDaemon: 2. DB::ColumnString::compareAt(unsigned long, unsigned long, DB::IColumn const&, int) const @ 0xdd25745 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.029353 [ 117 ] <Fatal> BaseDaemon: 3. DB::GenericComparisonImpl<DB::EqualsOp<int, int> >::vectorConstant(DB::IColumn const&, DB::IColumn const&, DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 15ul, 16ul>&) @ 0xaa8dc88 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.029423 [ 117 ] <Fatal> BaseDaemon: 4. DB::FunctionComparison<DB::EqualsOp, DB::NameEquals>::executeGenericIdenticalTypes(DB::IColumn const*, DB::IColumn const*) const @ 0xa8c4a6f in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.029472 [ 117 ] <Fatal> BaseDaemon: 5. DB::FunctionComparison<DB::EqualsOp, DB::NameEquals>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xa8acf81 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.029518 [ 117 ] <Fatal> BaseDaemon: 6. DB::FunctionComparison<DB::EqualsOp, DB::NameEquals>::executeWithConstString(std::__1::shared_ptr<DB::IDataType const> const&, DB::IColumn const*, DB::IColumn const*, std::__1::shared_ptr<DB::IDataType const> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xa8c419b in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.029564 [ 117 ] <Fatal> BaseDaemon: 7. DB::FunctionComparison<DB::EqualsOp, DB::NameEquals>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xa8acbb8 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.029679 [ 117 ] <Fatal> BaseDaemon: 8. DB::DefaultExecutable::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) @ 0x91e1ace in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.029729 [ 117 ] <Fatal> BaseDaemon: 9. DB::ExecutableFunctionAdaptor::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) @ 0x920d960 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.029780 [ 117 ] <Fatal> BaseDaemon: 10. DB::ExecutableFunctionAdaptor::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) @ 0x920e81e in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.029825 [ 117 ] <Fatal> BaseDaemon: 11. DB::ExpressionAction::execute(DB::Block&, bool) const @ 0xd93f141 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.029892 [ 117 ] <Fatal> BaseDaemon: 12. DB::ExpressionActions::execute(DB::Block&, bool) const @ 0xd94331d in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.029943 [ 117 ] <Fatal> BaseDaemon: 13. DB::FilterTransform::transform(DB::Chunk&) @ 0xe484728 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.030030 [ 117 ] <Fatal> BaseDaemon: 14. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0xde87410 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.030071 [ 117 ] <Fatal> BaseDaemon: 15. DB::ISimpleTransform::work() @ 0xe34b8c5 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.030151 [ 117 ] <Fatal> BaseDaemon: 16. ? @ 0xe38774c in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.030259 [ 117 ] <Fatal> BaseDaemon: 17. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0xe384877 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.030306 [ 117 ] <Fatal> BaseDaemon: 18. DB::PipelineExecutor::executeImpl(unsigned long) @ 0xe383069 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.030350 [ 117 ] <Fatal> BaseDaemon: 19. DB::PipelineExecutor::execute(unsigned long) @ 0xe382bed in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.030396 [ 117 ] <Fatal> BaseDaemon: 20. ? @ 0xe38efed in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.030442 [ 117 ] <Fatal> BaseDaemon: 21. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x7b6293d in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.030483 [ 117 ] <Fatal> BaseDaemon: 22. ? @ 0x7b66463 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:32:03.030532 [ 117 ] <Fatal> BaseDaemon: 23. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n[fdea5737f3fb] 2020.11.20 12:32:03.030578 [ 117 ] <Fatal> BaseDaemon: 24. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n```\r\n\r\n**Additional context**\r\n\r\nA query with no filtering return this error (with no segfault).\r\n\r\n```\r\nSELECT * FROM low_card;\r\nCode: 271. DB::Exception: Data compressed with different methods, given method byte 0x69, previous method byte 0x82: while receiving packet from localhost:9000\r\n```\r\n\r\n```\r\nSELECT CAST(lc AS String) FROM low_card;\r\n\r\n[fdea5737f3fb] 2020.11.20 12:57:02.512467 [ 116 ] <Fatal> BaseDaemon: ########################################\r\n[fdea5737f3fb] 2020.11.20 12:57:02.512676 [ 116 ] <Fatal> BaseDaemon: (version 20.11.3.3 (official build), build id: C88CD350740ED614) (from thread 111) (query_id: 20c21126-6b99-4c42-afb2-ab7967b6c19c) Received signal Segmentation fault (11)\r\n[fdea5737f3fb] 2020.11.20 12:57:02.512852 [ 116 ] <Fatal> BaseDaemon: Address: 0x10 Access: read. Address not mapped to object.\r\n[fdea5737f3fb] 2020.11.20 12:57:02.512897 [ 116 ] <Fatal> BaseDaemon: Stack trace: 0x93293e9 0x9328fe3 0x9241f85 0x920d960 0x920dfde 0xd93f141 0xd94331d 0xe481dc7 0xde87410 0xe34b8c5 0xe38774c 0xe384877 0xe383069 0xe382bed 0xe38efed 0x7b6293d 0x7b66463 0x7f415ddc3609 0x7f415dcd9293\r\n[fdea5737f3fb] 2020.11.20 12:57:02.513818 [ 116 ] <Fatal> BaseDaemon: 2. DB::FunctionCast::prepareUnpackDictionaries(std::__1::shared_ptr<DB::IDataType const> const&, std::__1::shared_ptr<DB::IDataType const> const&) const::'lambda0'(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)::operator()(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long) const @ 0x93293e9 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.513927 [ 116 ] <Fatal> BaseDaemon: 3. std::__1::__function::__func<DB::FunctionCast::prepareUnpackDictionaries(std::__1::shared_ptr<DB::IDataType const> const&, std::__1::shared_ptr<DB::IDataType const> const&) const::'lambda0'(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long), std::__1::allocator<DB::FunctionCast::prepareUnpackDictionaries(std::__1::shared_ptr<DB::IDataType const> const&, std::__1::shared_ptr<DB::IDataType const> const&) const::'lambda0'(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>, COW<DB::IColumn>::immutable_ptr<DB::IColumn> (std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*, unsigned long)>::operator()(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, DB::ColumnNullable const*&&, unsigned long&&) @ 0x9328fe3 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.513990 [ 116 ] <Fatal> BaseDaemon: 4. DB::ExecutableFunctionCast::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) @ 0x9241f85 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.514054 [ 116 ] <Fatal> BaseDaemon: 5. DB::ExecutableFunctionAdaptor::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) @ 0x920d960 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.514119 [ 116 ] <Fatal> BaseDaemon: 6. DB::ExecutableFunctionAdaptor::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> >&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) @ 0x920dfde in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.514249 [ 116 ] <Fatal> BaseDaemon: 7. DB::ExpressionAction::execute(DB::Block&, bool) const @ 0xd93f141 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.514315 [ 116 ] <Fatal> BaseDaemon: 8. DB::ExpressionActions::execute(DB::Block&, bool) const @ 0xd94331d in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.514369 [ 116 ] <Fatal> BaseDaemon: 9. DB::ExpressionTransform::transform(DB::Chunk&) @ 0xe481dc7 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.514484 [ 116 ] <Fatal> BaseDaemon: 10. DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) @ 0xde87410 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.514546 [ 116 ] <Fatal> BaseDaemon: 11. DB::ISimpleTransform::work() @ 0xe34b8c5 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.514646 [ 116 ] <Fatal> BaseDaemon: 12. ? @ 0xe38774c in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.514850 [ 116 ] <Fatal> BaseDaemon: 13. DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) @ 0xe384877 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.514901 [ 116 ] <Fatal> BaseDaemon: 14. DB::PipelineExecutor::executeImpl(unsigned long) @ 0xe383069 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.514956 [ 116 ] <Fatal> BaseDaemon: 15. DB::PipelineExecutor::execute(unsigned long) @ 0xe382bed in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.515013 [ 116 ] <Fatal> BaseDaemon: 16. ? @ 0xe38efed in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.515077 [ 116 ] <Fatal> BaseDaemon: 17. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x7b6293d in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.515175 [ 116 ] <Fatal> BaseDaemon: 18. ? @ 0x7b66463 in /usr/bin/clickhouse\r\n[fdea5737f3fb] 2020.11.20 12:57:02.515235 [ 116 ] <Fatal> BaseDaemon: 19. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n[fdea5737f3fb] 2020.11.20 12:57:02.515339 [ 116 ] <Fatal> BaseDaemon: 20. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2020-11-25T13:30:44Z",
  "modified_files": [
    "src/Storages/StorageJoin.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01586_storage_join_low_cardinality_key.reference",
    "b/tests/queries/0_stateless/01586_storage_join_low_cardinality_key.sql"
  ]
}