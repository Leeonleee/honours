diff --git a/src/IO/WriteBufferFromS3.cpp b/src/IO/WriteBufferFromS3.cpp
index bac14acb9cd5..1ca8d8988d99 100644
--- a/src/IO/WriteBufferFromS3.cpp
+++ b/src/IO/WriteBufferFromS3.cpp
@@ -56,7 +56,6 @@ WriteBufferFromS3::WriteBufferFromS3(
         initiate();
 }
 
-
 void WriteBufferFromS3::nextImpl()
 {
     if (!offset())
@@ -79,23 +78,31 @@ void WriteBufferFromS3::nextImpl()
     }
 }
 
-
 void WriteBufferFromS3::finalize()
 {
-    next();
+    finalizeImpl();
+}
 
-    if (is_multipart)
-        writePart(temporary_buffer->str());
+void WriteBufferFromS3::finalizeImpl()
+{
+    if (!finalized)
+    {
+        next();
 
-    complete();
-}
+        if (is_multipart)
+            writePart(temporary_buffer->str());
 
+        complete();
+
+        finalized = true;
+    }
+}
 
 WriteBufferFromS3::~WriteBufferFromS3()
 {
     try
     {
-        next();
+        finalizeImpl();
     }
     catch (...)
     {
@@ -103,7 +110,6 @@ WriteBufferFromS3::~WriteBufferFromS3()
     }
 }
 
-
 void WriteBufferFromS3::initiate()
 {
     Aws::S3::Model::CreateMultipartUploadRequest req;
diff --git a/src/IO/WriteBufferFromS3.h b/src/IO/WriteBufferFromS3.h
index 93a6947609e9..1a1e859d9132 100644
--- a/src/IO/WriteBufferFromS3.h
+++ b/src/IO/WriteBufferFromS3.h
@@ -57,9 +57,13 @@ class WriteBufferFromS3 : public BufferWithOwnMemory<WriteBuffer>
     ~WriteBufferFromS3() override;
 
 private:
+    bool finalized = false;
+
     void initiate();
     void writePart(const String & data);
     void complete();
+
+    void finalizeImpl();
 };
 
 }
diff --git a/src/Storages/StorageS3.cpp b/src/Storages/StorageS3.cpp
index 6d17a17409f2..469350d6eaa7 100644
--- a/src/Storages/StorageS3.cpp
+++ b/src/Storages/StorageS3.cpp
@@ -197,7 +197,7 @@ StorageS3::StorageS3(
     const ColumnsDescription & columns_,
     const ConstraintsDescription & constraints_,
     Context & context_,
-    const String & compression_method_ = "")
+    const String & compression_method_)
     : IStorage(table_id_)
     , uri(uri_)
     , context_global(context_)
@@ -349,8 +349,6 @@ void registerStorageS3Impl(const String & name, StorageFactory & factory)
         Poco::URI uri (url);
         S3::URI s3_uri (uri);
 
-        String format_name = engine_args[engine_args.size() - 1]->as<ASTLiteral &>().value.safeGet<String>();
-
         String access_key_id;
         String secret_access_key;
         if (engine_args.size() >= 4)
@@ -362,12 +360,30 @@ void registerStorageS3Impl(const String & name, StorageFactory & factory)
         UInt64 min_upload_part_size = args.local_context.getSettingsRef().s3_min_upload_part_size;
 
         String compression_method;
+        String format_name;
         if (engine_args.size() == 3 || engine_args.size() == 5)
+        {
             compression_method = engine_args.back()->as<ASTLiteral &>().value.safeGet<String>();
+            format_name = engine_args[engine_args.size() - 2]->as<ASTLiteral &>().value.safeGet<String>();
+        }
         else
+        {
             compression_method = "auto";
+            format_name = engine_args.back()->as<ASTLiteral &>().value.safeGet<String>();
+        }
 
-        return StorageS3::create(s3_uri, access_key_id, secret_access_key, args.table_id, format_name, min_upload_part_size, args.columns, args.constraints, args.context);
+        return StorageS3::create(
+            s3_uri,
+            access_key_id,
+            secret_access_key,
+            args.table_id,
+            format_name,
+            min_upload_part_size,
+            args.columns,
+            args.constraints,
+            args.context,
+            compression_method
+        );
     },
     {
         .source_access_type = AccessType::S3,
diff --git a/src/Storages/StorageS3.h b/src/Storages/StorageS3.h
index a172d951642b..5a702aa8785e 100644
--- a/src/Storages/StorageS3.h
+++ b/src/Storages/StorageS3.h
@@ -34,7 +34,7 @@ class StorageS3 : public ext::shared_ptr_helper<StorageS3>, public IStorage
         const ColumnsDescription & columns_,
         const ConstraintsDescription & constraints_,
         Context & context_,
-        const String & compression_method_);
+        const String & compression_method_ = "");
 
     String getName() const override
     {
