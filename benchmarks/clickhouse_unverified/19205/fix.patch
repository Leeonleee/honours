diff --git a/src/Core/MySQL/MySQLGtid.cpp b/src/Core/MySQL/MySQLGtid.cpp
index aac3e01369a2..13dc6e0fd699 100644
--- a/src/Core/MySQL/MySQLGtid.cpp
+++ b/src/Core/MySQL/MySQLGtid.cpp
@@ -85,8 +85,8 @@ void GTIDSets::update(const GTID & other)
                         ErrorCodes::LOGICAL_ERROR);
                 }
 
-                /// Try to shirnk Sequence interval.
-                GTIDSet::tryShirnk(set, i, current);
+                /// Try to shrink Sequence interval.
+                GTIDSet::tryShrink(set, i, current);
 
                 /// Sequence, extend the interval.
                 if (other.seq_no == current.end)
@@ -119,7 +119,7 @@ void GTIDSets::update(const GTID & other)
     sets.emplace_back(set);
 }
 
-void GTIDSet::tryShirnk(GTIDSet & set, unsigned int i, GTIDSet::Interval & current)
+void GTIDSet::tryShrink(GTIDSet & set, unsigned int i, GTIDSet::Interval & current)
 {
     if (i != set.intervals.size() -1)
     {
diff --git a/src/Core/MySQL/MySQLGtid.h b/src/Core/MySQL/MySQLGtid.h
index 27aabdafc117..c8a571d25697 100644
--- a/src/Core/MySQL/MySQLGtid.h
+++ b/src/Core/MySQL/MySQLGtid.h
@@ -27,7 +27,7 @@ class GTIDSet
 
     void tryMerge(size_t i);
 
-    static void tryShirnk(GTIDSet & set, unsigned int i, Interval & current);
+    static void tryShrink(GTIDSet & set, unsigned int i, Interval & current);
 };
 
 class GTIDSets
diff --git a/src/Databases/MySQL/MaterializeMySQLSyncThread.cpp b/src/Databases/MySQL/MaterializeMySQLSyncThread.cpp
index 1da033fa4b38..5b7ba99baf9a 100644
--- a/src/Databases/MySQL/MaterializeMySQLSyncThread.cpp
+++ b/src/Databases/MySQL/MaterializeMySQLSyncThread.cpp
@@ -95,19 +95,22 @@ static void checkMySQLVariables(const mysqlxx::Pool::Entry & connection)
          "(Variable_name = 'log_bin' AND upper(Value) = 'ON') "
          "OR (Variable_name = 'binlog_format' AND upper(Value) = 'ROW') "
          "OR (Variable_name = 'binlog_row_image' AND upper(Value) = 'FULL') "
-         "OR (Variable_name = 'default_authentication_plugin' AND upper(Value) = 'MYSQL_NATIVE_PASSWORD');";
+         "OR (Variable_name = 'default_authentication_plugin' AND upper(Value) = 'MYSQL_NATIVE_PASSWORD') "
+         "OR (Variable_name = 'log_bin_use_v1_row_events' AND upper(Value) = 'OFF');";
 
     MySQLBlockInputStream variables_input(connection, check_query, variables_header, DEFAULT_BLOCK_SIZE, false, true);
 
     Block variables_block = variables_input.read();
-    if (!variables_block || variables_block.rows() != 4)
+    if (!variables_block || variables_block.rows() != 5)
     {
         std::unordered_map<String, String> variables_error_message{
             {"log_bin", "log_bin = 'ON'"},
             {"binlog_format", "binlog_format='ROW'"},
             {"binlog_row_image", "binlog_row_image='FULL'"},
-            {"default_authentication_plugin", "default_authentication_plugin='mysql_native_password'"}
+            {"default_authentication_plugin", "default_authentication_plugin='mysql_native_password'"},
+            {"log_bin_use_v1_row_events", "log_bin_use_v1_row_events='OFF'"}
         };
+
         ColumnPtr variable_name_column = variables_block.getByName("Variable_name").column;
 
         for (size_t index = 0; index < variables_block.rows(); ++index)
