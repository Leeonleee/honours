diff --git a/tests/queries/0_stateless/01712_no_adaptive_granularity_vertical_merge.reference b/tests/queries/0_stateless/01712_no_adaptive_granularity_vertical_merge.reference
new file mode 100644
index 000000000000..51acb0663940
--- /dev/null
+++ b/tests/queries/0_stateless/01712_no_adaptive_granularity_vertical_merge.reference
@@ -0,0 +1,6 @@
+1	1
+2	2
+1	1
+2	2
+1	1
+2	2
diff --git a/tests/queries/0_stateless/01712_no_adaptive_granularity_vertical_merge.sql b/tests/queries/0_stateless/01712_no_adaptive_granularity_vertical_merge.sql
new file mode 100644
index 000000000000..0acf6992c1e4
--- /dev/null
+++ b/tests/queries/0_stateless/01712_no_adaptive_granularity_vertical_merge.sql
@@ -0,0 +1,30 @@
+DROP TABLE IF EXISTS old_school_table;
+
+CREATE TABLE old_school_table
+(
+    key UInt64,
+    value String
+)
+ENGINE = MergeTree()
+ORDER BY key
+SETTINGS index_granularity_bytes = 0, enable_mixed_granularity_parts = 0, min_bytes_for_wide_part = 0,
+vertical_merge_algorithm_min_rows_to_activate = 1, vertical_merge_algorithm_min_columns_to_activate = 1;
+
+INSERT INTO old_school_table VALUES (1, '1');
+INSERT INTO old_school_table VALUES (2, '2');
+
+OPTIMIZE TABLE old_school_table FINAL;
+
+SELECT * FROM old_school_table ORDER BY key;
+
+OPTIMIZE TABLE old_school_table FINAL; -- just to be sure
+
+SELECT * FROM old_school_table ORDER BY key;
+
+ALTER TABLE old_school_table MODIFY SETTING vertical_merge_algorithm_min_rows_to_activate = 10000, vertical_merge_algorithm_min_columns_to_activate = 10000;
+
+OPTIMIZE TABLE old_school_table FINAL; -- and horizontal merge
+
+SELECT * FROM old_school_table ORDER BY key;
+
+DROP TABLE IF EXISTS old_school_table;
