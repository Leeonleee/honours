diff --git a/src/Interpreters/evaluateConstantExpression.cpp b/src/Interpreters/evaluateConstantExpression.cpp
index ebefa0d9ce7f..5a333172b14e 100644
--- a/src/Interpreters/evaluateConstantExpression.cpp
+++ b/src/Interpreters/evaluateConstantExpression.cpp
@@ -70,7 +70,6 @@ std::pair<Field, std::shared_ptr<const IDataType>> evaluateConstantExpression(co
     if (context->getClientInfo().query_kind != ClientInfo::QueryKind::SECONDARY_QUERY && context->getSettingsRef().normalize_function_names)
         FunctionNameNormalizer().visit(ast.get());
 
-    String result_name = ast->getColumnName();
     auto syntax_result = TreeRewriter(context).analyze(ast, source_columns);
 
     /// AST potentially could be transformed to literal during TreeRewriter analyze.
@@ -82,6 +81,7 @@ std::pair<Field, std::shared_ptr<const IDataType>> evaluateConstantExpression(co
 
     ColumnPtr result_column;
     DataTypePtr result_type;
+    String result_name = ast->getColumnName();
     for (const auto & action_node : actions->getOutputs())
     {
         if ((action_node->result_name == result_name) && action_node->column)
diff --git a/src/Parsers/ASTFunction.cpp b/src/Parsers/ASTFunction.cpp
index 129d3d607447..fa4874d89b6a 100644
--- a/src/Parsers/ASTFunction.cpp
+++ b/src/Parsers/ASTFunction.cpp
@@ -28,8 +28,8 @@ namespace DB
 
 namespace ErrorCodes
 {
-    extern const int UNEXPECTED_EXPRESSION;
     extern const int UNEXPECTED_AST_STRUCTURE;
+    extern const int UNKNOWN_FUNCTION;
 }
 
 
@@ -471,8 +471,9 @@ namespace
 
 void ASTFunction::appendColumnNameImpl(WriteBuffer & ostr) const
 {
-    if (name == "view")
-        throw Exception(ErrorCodes::UNEXPECTED_EXPRESSION, "Table function view cannot be used as an expression");
+    /// These functions contain some unexpected ASTs in arguments (e.g. SETTINGS or even a SELECT query)
+    if (name == "view" || name == "viewIfPermitted" || name == "mysql" || name == "postgresql" || name == "mongodb" || name == "s3")
+        throw Exception(ErrorCodes::UNKNOWN_FUNCTION, "Table function '{}' cannot be used as an expression", name);
 
     /// If function can be converted to literal it will be parsed as literal after formatting.
     /// In distributed query it may lead to mismathed column names.
