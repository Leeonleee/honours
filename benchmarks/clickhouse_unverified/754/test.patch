diff --git a/contrib/libpoco/Crypto/testsuite/src/CryptoTest.cpp b/contrib/libpoco/Crypto/testsuite/src/CryptoTest.cpp
index 8c403470950d..53764df137c2 100644
--- a/contrib/libpoco/Crypto/testsuite/src/CryptoTest.cpp
+++ b/contrib/libpoco/Crypto/testsuite/src/CryptoTest.cpp
@@ -246,6 +246,11 @@ void CryptoTest::testCertificate()
 	
 	// fails with recent OpenSSL versions:
 	// assert (cert.issuedBy(cert));
+	
+	std::istringstream otherCertStream(APPINF_PEM);
+	X509Certificate otherCert(otherCertStream);
+	
+	assert (cert.equals(otherCert));
 }
 
 
diff --git a/dbms/src/Common/tests/CMakeLists.txt b/dbms/src/Common/tests/CMakeLists.txt
index 3b8f53b307c2..072d55473015 100644
--- a/dbms/src/Common/tests/CMakeLists.txt
+++ b/dbms/src/Common/tests/CMakeLists.txt
@@ -54,3 +54,6 @@ target_link_libraries (thread_pool dbms)
 
 add_executable (array_cache array_cache.cpp)
 target_link_libraries (array_cache dbms)
+
+add_executable (space_saving space_saving.cpp)
+target_link_libraries (space_saving dbms)
diff --git a/dbms/src/Common/tests/space_saving.cpp b/dbms/src/Common/tests/space_saving.cpp
new file mode 100644
index 000000000000..5b37b94f43bc
--- /dev/null
+++ b/dbms/src/Common/tests/space_saving.cpp
@@ -0,0 +1,105 @@
+#include <iostream>
+#include <iomanip>
+#include <string>
+#include <map>
+
+#include <Core/StringRef.h>
+#include <Common/SpaceSaving.h>
+
+int main(int argc, char ** argv)
+{
+    {
+        using Cont = DB::SpaceSaving<int>;
+        Cont first(10);
+
+        /* Test biased insertion */
+
+        for (int i = 0; i < 200; ++i) {
+            first.insert(i);
+            int k = i % 5; // Bias towards 0-4
+            first.insert(k);
+        }
+
+        /* Test whether the biased elements are retained */
+
+        std::map<int, UInt64> expect;
+        for (int i = 0; i < 5; ++i) {
+            expect[i] = 41;   
+        }
+
+        for (auto x : first.topK(5)) {
+            if (expect[x.key] != x.count) {
+                std::cerr << "key: " << x.key << " value: " << x.count << " expected: " << expect[x.key] << std::endl;
+            } else {
+                std::cout << "key: " << x.key << " value: " << x.count << std::endl;
+            }
+            expect.erase(x.key);
+        }
+
+        if (!expect.empty()) {
+            std::cerr << "expected to find all heavy hitters" << std::endl;
+        }
+
+        /* Create another table and test merging */
+
+        Cont second(10);
+        for (int i = 0; i < 200; ++i) {
+            first.insert(i);
+        }
+
+        for (int i = 0; i < 5; ++i) {
+            expect[i] = 42;   
+        }
+
+        first.merge(second);
+
+        for (auto x : first.topK(5)) {
+            if (expect[x.key] != x.count) {
+                std::cerr << "key: " << x.key << " value: " << x.count << " expected: " << expect[x.key] << std::endl;
+            } else {
+                std::cout << "key: " << x.key << " value: " << x.count << std::endl;
+            }
+            expect.erase(x.key);
+        }
+    }
+
+    {
+        /* Same test for string keys */
+
+        using Cont = DB::SpaceSaving<StringRef, StringRefHash>;
+        Cont cont(10);
+
+        std::vector<std::string> refs;
+
+        for (int i = 0; i < 400; ++i) {
+            refs.push_back(std::to_string(i));
+            cont.insert(StringRef(refs.back()));
+            refs.push_back(std::to_string(i % 5)); // Bias towards 0-4
+            cont.insert(StringRef(refs.back()));
+        }
+
+        // The hashing is going to be more lossy
+        // Expect at least ~ 10% count
+        std::map<std::string, UInt64> expect;
+        for (int i = 0; i < 5; ++i) {
+            expect[std::to_string(i)] = 38;
+        }
+
+        for (auto x : cont.topK(5)) {
+            auto key = x.key.toString();
+            if (x.count < expect[key]) {
+                std::cerr << "key: " << key << " value: " << x.count << " expected: " << expect[key] << std::endl;
+            } else {
+                std::cout << "key: " << key << " value: " << x.count << std::endl;
+            }
+            expect.erase(key);
+        }
+
+        if (!expect.empty()) {
+            std::cerr << "expected to find all heavy hitters" << std::endl;
+            abort();
+        }
+    }
+
+    return 0;
+}
diff --git a/dbms/tests/queries/0_stateless/00453_top_k.reference b/dbms/tests/queries/0_stateless/00453_top_k.reference
new file mode 100644
index 000000000000..0b5c06820e8a
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00453_top_k.reference
@@ -0,0 +1,1 @@
+[0,1,2,3,4,5,6,7,8,9]
\ No newline at end of file
diff --git a/dbms/tests/queries/0_stateless/00453_top_k.sql b/dbms/tests/queries/0_stateless/00453_top_k.sql
new file mode 100644
index 000000000000..1f79a8c53933
--- /dev/null
+++ b/dbms/tests/queries/0_stateless/00453_top_k.sql
@@ -0,0 +1,1 @@
+SELECT topK(10)(n) FROM (SELECT if(number % 100 < 10, number % 10, number) AS n FROM system.numbers LIMIT 100000);
\ No newline at end of file
