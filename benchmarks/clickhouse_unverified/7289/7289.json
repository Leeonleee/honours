{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 7289,
  "instance_id": "ClickHouse__ClickHouse-7289",
  "issue_numbers": [
    "7109"
  ],
  "base_commit": "aeb75045701d236af1e7a195c510b5c89b710dba",
  "patch": "diff --git a/dbms/src/AggregateFunctions/AggregateFunctionGroupBitmap.cpp b/dbms/src/AggregateFunctions/AggregateFunctionGroupBitmap.cpp\nindex 6eb2c0299da1..4c6ec4b773c9 100644\n--- a/dbms/src/AggregateFunctions/AggregateFunctionGroupBitmap.cpp\n+++ b/dbms/src/AggregateFunctions/AggregateFunctionGroupBitmap.cpp\n@@ -36,15 +36,13 @@ AggregateFunctionPtr createAggregateFunctionBitmapL2(const std::string & name, c\n     assertUnary(name, argument_types);\n     DataTypePtr argument_type_ptr = argument_types[0];\n     WhichDataType which(*argument_type_ptr);\n-    if (which.idx == TypeIndex::AggregateFunction)\n-    {\n-        const DataTypeAggregateFunction& datatype_aggfunc = dynamic_cast<const DataTypeAggregateFunction&>(*argument_type_ptr);\n-        AggregateFunctionPtr aggfunc = datatype_aggfunc.getFunction();\n-        argument_type_ptr = aggfunc->getArgumentTypes()[0];\n-    }\n+    if (which.idx != TypeIndex::AggregateFunction)\n+        throw Exception(\"Illegal type \" + argument_types[0]->getName() + \" of argument for aggregate function \" + name, ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n \n+    const DataTypeAggregateFunction& datatype_aggfunc = dynamic_cast<const DataTypeAggregateFunction&>(*argument_type_ptr);\n+    AggregateFunctionPtr aggfunc = datatype_aggfunc.getFunction();\n+    argument_type_ptr = aggfunc->getArgumentTypes()[0];\n     AggregateFunctionPtr res(createWithUnsignedIntegerType<AggregateFunctionTemplate, AggregateFunctionGroupBitmapData>(*argument_type_ptr, argument_type_ptr));\n-\n     if (!res)\n         throw Exception(\"Illegal type \" + argument_types[0]->getName() + \" of argument for aggregate function \" + name, ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n \ndiff --git a/dbms/src/AggregateFunctions/AggregateFunctionGroupBitmap.h b/dbms/src/AggregateFunctions/AggregateFunctionGroupBitmap.h\nindex f71ebd539228..5e22543c2aa1 100644\n--- a/dbms/src/AggregateFunctions/AggregateFunctionGroupBitmap.h\n+++ b/dbms/src/AggregateFunctions/AggregateFunctionGroupBitmap.h\n@@ -71,7 +71,7 @@ class AggregateFunctionBitmapL2 final : public IAggregateFunctionDataHelper<Data\n     void add(AggregateDataPtr place, const IColumn ** columns, size_t row_num, Arena *) const override\n     {\n         Data & data_lhs = this->data(place);\n-        const Data & data_rhs = this->data(static_cast<const ColumnAggregateFunction &>(*columns[0]).getData()[row_num]);\n+        const Data & data_rhs = this->data(assert_cast<const ColumnAggregateFunction &>(*columns[0]).getData()[row_num]);\n         if (!data_lhs.doneFirst)\n         {\n             data_lhs.doneFirst = true;\n@@ -110,7 +110,7 @@ class AggregateFunctionBitmapL2 final : public IAggregateFunctionDataHelper<Data\n \n     void insertResultInto(ConstAggregateDataPtr place, IColumn & to) const override\n     {\n-        static_cast<ColumnVector<T> &>(to).getData().push_back(this->data(place).rbs.size());\n+        assert_cast<ColumnVector<T> &>(to).getData().push_back(this->data(place).rbs.size());\n     }\n \n     const char * getHeaderFilePath() const override { return __FILE__; }\ndiff --git a/docs/en/query_language/agg_functions/reference.md b/docs/en/query_language/agg_functions/reference.md\nindex 5e1bfaf5570d..ecfe90fa9c98 100644\n--- a/docs/en/query_language/agg_functions/reference.md\n+++ b/docs/en/query_language/agg_functions/reference.md\n@@ -1210,11 +1210,6 @@ SELECT groupBitmapAnd(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%'\n \u2502               3   \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n \n-SELECT groupBitmapAndMerge(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n-\u250c\u2500groupBitmapAnd(z)\u2500\u2510\n-\u2502               3   \u2502\n-\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-\n SELECT arraySort(bitmapToArray(groupBitmapAndState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n \u250c\u2500arraySort(bitmapToArray(groupBitmapAndState(z)))\u2500\u2510\n \u2502 [6,8,10]                                         \u2502\n@@ -1260,11 +1255,6 @@ SELECT groupBitmapOr(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%')\n \u2502             15   \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n \n-SELECT groupBitmapOrMerge(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n-\u250c\u2500groupBitmapOrMerge(z)\u2500\u2510\n-\u2502                  15   \u2502\n-\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-\n SELECT arraySort(bitmapToArray(groupBitmapOrState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n \u250c\u2500arraySort(bitmapToArray(groupBitmapOrState(z)))\u2500\u2510\n \u2502 [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]           \u2502\n@@ -1310,11 +1300,6 @@ SELECT groupBitmapXor(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%'\n \u2502              10   \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n \n-SELECT groupBitmapXorMerge(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n-\u250c\u2500groupBitmapXorMerge(z)\u2500\u2510\n-\u2502                   10   \u2502\n-\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-\n SELECT arraySort(bitmapToArray(groupBitmapXorState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n \u250c\u2500arraySort(bitmapToArray(groupBitmapXorState(z)))\u2500\u2510\n \u2502 [1,3,5,6,8,10,11,13,14,15]                       \u2502\n",
  "test_patch": "diff --git a/dbms/tests/queries/0_stateless/00829_bitmap_function.reference b/dbms/tests/queries/0_stateless/00829_bitmap_function.reference\nindex dd99ce850baa..4b60da9d9af8 100644\n--- a/dbms/tests/queries/0_stateless/00829_bitmap_function.reference\n+++ b/dbms/tests/queries/0_stateless/00829_bitmap_function.reference\n@@ -29,17 +29,11 @@\n 15\n [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n 15\n-15\n-[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n 3\n-3\n [6,8,10]\n-[6,8,10]\n-10\n 10\n [1,3,5,6,8,10,11,13,14,15]\n-[1,3,5,6,8,10,11,13,14,15]\n 0\n 0\n 0\ndiff --git a/dbms/tests/queries/0_stateless/00829_bitmap_function.sql b/dbms/tests/queries/0_stateless/00829_bitmap_function.sql\nindex 439347f7a32e..6e6fbe012c26 100644\n--- a/dbms/tests/queries/0_stateless/00829_bitmap_function.sql\n+++ b/dbms/tests/queries/0_stateless/00829_bitmap_function.sql\n@@ -120,19 +120,13 @@ SELECT groupBitmapMerge(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag\n SELECT arraySort(bitmapToArray(groupBitmapMergeState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n \n SELECT groupBitmapOr(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n-SELECT groupBitmapOrMerge(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n SELECT arraySort(bitmapToArray(groupBitmapOrState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n-SELECT arraySort(bitmapToArray(groupBitmapOrMergeState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n \n SELECT groupBitmapAnd(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n-SELECT groupBitmapAndMerge(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n SELECT arraySort(bitmapToArray(groupBitmapAndState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n-SELECT arraySort(bitmapToArray(groupBitmapAndMergeState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n \n SELECT groupBitmapXor(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n-SELECT groupBitmapXorMerge(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n SELECT arraySort(bitmapToArray(groupBitmapXorState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n-SELECT arraySort(bitmapToArray(groupBitmapXorMergeState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\n \n DROP TABLE IF EXISTS bitmap_test;\n DROP TABLE IF EXISTS bitmap_state_test;\n",
  "problem_statement": "added groupBitmapAnd, groupBitmapOr, groupBitmapXor\nI hereby agree to the terms of the CLA available at: https://yandex.ru/legal/cla/?lang=en\r\n\r\nFor changelog. Remove if this is non-significant change.\r\n\r\nCategory (leave one):\r\n- New Feature\r\n\r\nShort description (up to few sentences):\r\nadded AND, OR, XOR aggregate function for bitmap column. This is the implementation of #6955. \r\n\r\n## groupBitmapAnd\r\n\r\nCalculations the AND of a bitmap column, return cardinality of type UInt64, if add suffix -State, then return [bitmap object](../functions/bitmap_functions.md).\r\n\r\n```sql\r\ngroupBitmapAnd(expr)\r\n```\r\n\r\n**Parameters**\r\n\r\n`expr` \u2013 An expression that results in `AggregateFunction(groupBitmap, UInt*)` type.\r\n\r\n**Return value**\r\n\r\nValue of the `UInt64` type.\r\n\r\n**Example**\r\n\r\n```sql\r\nDROP TABLE IF EXISTS bitmap_column_expr_test2;\r\nCREATE TABLE bitmap_column_expr_test2\r\n(\r\n    tag_id String,\r\n    z AggregateFunction(groupBitmap, UInt32)\r\n)\r\nENGINE = MergeTree\r\nORDER BY tag_id;\r\n\r\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag1', bitmapBuild(cast([1,2,3,4,5,6,7,8,9,10] as Array(UInt32))));\r\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag2', bitmapBuild(cast([6,7,8,9,10,11,12,13,14,15] as Array(UInt32))));\r\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag3', bitmapBuild(cast([2,4,6,8,10,12] as Array(UInt32))));\r\n\r\nSELECT groupBitmapAnd(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\r\n\u250c\u2500groupBitmapAnd(z)\u2500\u2510\r\n\u2502               3   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT groupBitmapAndMerge(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\r\n\u250c\u2500groupBitmapAnd(z)\u2500\u2510\r\n\u2502               3   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT arraySort(bitmapToArray(groupBitmapAndState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\r\n\u250c\u2500arraySort(bitmapToArray(groupBitmapAndState(z)))\u2500\u2510\r\n\u2502 [6,8,10]                                         \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\r\n\r\n\r\n## groupBitmapOr\r\n\r\nCalculations the OR of a bitmap column, return cardinality of type UInt64, if add suffix -State, then return [bitmap object](../functions/bitmap_functions.md). This is equivalent to `groupBitmapMerge`.\r\n\r\n```sql\r\ngroupBitmapOr(expr)\r\n```\r\n\r\n**Parameters**\r\n\r\n`expr` \u2013 An expression that results in `AggregateFunction(groupBitmap, UInt*)` type.\r\n\r\n**Return value**\r\n\r\nValue of the `UInt64` type.\r\n\r\n**Example**\r\n\r\n```sql\r\nDROP TABLE IF EXISTS bitmap_column_expr_test2;\r\nCREATE TABLE bitmap_column_expr_test2\r\n(\r\n    tag_id String,\r\n    z AggregateFunction(groupBitmap, UInt32)\r\n)\r\nENGINE = MergeTree\r\nORDER BY tag_id;\r\n\r\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag1', bitmapBuild(cast([1,2,3,4,5,6,7,8,9,10] as Array(UInt32))));\r\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag2', bitmapBuild(cast([6,7,8,9,10,11,12,13,14,15] as Array(UInt32))));\r\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag3', bitmapBuild(cast([2,4,6,8,10,12] as Array(UInt32))));\r\n\r\nSELECT groupBitmapOr(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\r\n\u250c\u2500groupBitmapOr(z)\u2500\u2510\r\n\u2502             15   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT groupBitmapOrMerge(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\r\n\u250c\u2500groupBitmapOrMerge(z)\u2500\u2510\r\n\u2502                  15   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT arraySort(bitmapToArray(groupBitmapOrState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\r\n\u250c\u2500arraySort(bitmapToArray(groupBitmapOrState(z)))\u2500\u2510\r\n\u2502 [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]           \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\r\n\r\n\r\n## groupBitmapXor\r\n\r\nCalculations the XOR of a bitmap column, return cardinality of type UInt64, if add suffix -State, then return [bitmap object](../functions/bitmap_functions.md).\r\n\r\n```sql\r\ngroupBitmapOr(expr)\r\n```\r\n\r\n**Parameters**\r\n\r\n`expr` \u2013 An expression that results in `AggregateFunction(groupBitmap, UInt*)` type.\r\n\r\n**Return value**\r\n\r\nValue of the `UInt64` type.\r\n\r\n**Example**\r\n\r\n```sql\r\nDROP TABLE IF EXISTS bitmap_column_expr_test2;\r\nCREATE TABLE bitmap_column_expr_test2\r\n(\r\n    tag_id String,\r\n    z AggregateFunction(groupBitmap, UInt32)\r\n)\r\nENGINE = MergeTree\r\nORDER BY tag_id;\r\n\r\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag1', bitmapBuild(cast([1,2,3,4,5,6,7,8,9,10] as Array(UInt32))));\r\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag2', bitmapBuild(cast([6,7,8,9,10,11,12,13,14,15] as Array(UInt32))));\r\nINSERT INTO bitmap_column_expr_test2 VALUES ('tag3', bitmapBuild(cast([2,4,6,8,10,12] as Array(UInt32))));\r\n\r\nSELECT groupBitmapXor(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\r\n\u250c\u2500groupBitmapXor(z)\u2500\u2510\r\n\u2502              10   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT groupBitmapXorMerge(z) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\r\n\u250c\u2500groupBitmapXorMerge(z)\u2500\u2510\r\n\u2502                   10   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT arraySort(bitmapToArray(groupBitmapXorState(z))) FROM bitmap_column_expr_test2 WHERE like(tag_id, 'tag%');\r\n\u250c\u2500arraySort(bitmapToArray(groupBitmapXorState(z)))\u2500\u2510\r\n\u2502 [1,3,5,6,8,10,11,13,14,15]                       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n\r\n\n",
  "hints_text": "Let's make the names consistent with our existing groupBitAnd, groupBitOr, groupBitXor, groupArray functions (use \"group\" instead of \"agg\"):\r\n\r\ngroupBitmapAnd, groupBitmapOr, groupBitmapXor.\n@alexey-milovidov Renamed per your suggestion.\nStyle check does not show any errors after merge.\nSimple query `SELECT groupBitmapOr(31)` crashes the server. Can you please investigate and fix this?\nWe've also observed a ThreadSanitizer failure in Stress test on current master:\r\nhttps://clickhouse-test-reports.s3.yandex.net/7247/3fca2e42ca187bd4209726da87361e93882b503d/stress_test_(thread)/stderr.log\r\n\r\nLooks more like a use-after-free.\nAn AddressSanitizer failure in master:\r\nhttps://clickhouse-test-reports.s3.yandex.net/7270/e25bdc8d25656486a73493ab0724342f40eeb27b/stress_test_(address)/stderr.log",
  "created_at": "2019-10-12T02:51:00Z",
  "modified_files": [
    "dbms/src/AggregateFunctions/AggregateFunctionGroupBitmap.cpp",
    "dbms/src/AggregateFunctions/AggregateFunctionGroupBitmap.h",
    "docs/en/query_language/agg_functions/reference.md"
  ],
  "modified_test_files": [
    "dbms/tests/queries/0_stateless/00829_bitmap_function.reference",
    "dbms/tests/queries/0_stateless/00829_bitmap_function.sql"
  ]
}