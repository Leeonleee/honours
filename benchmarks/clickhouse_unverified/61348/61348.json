{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 61348,
  "instance_id": "ClickHouse__ClickHouse-61348",
  "issue_numbers": [
    "55167"
  ],
  "base_commit": "d045ab150ed5659f143beca5e50d0b72dae3bf78",
  "patch": "diff --git a/docs/en/operations/server-configuration-parameters/settings.md b/docs/en/operations/server-configuration-parameters/settings.md\nindex 07c9a2b88abc..f20dcb9025ed 100644\n--- a/docs/en/operations/server-configuration-parameters/settings.md\n+++ b/docs/en/operations/server-configuration-parameters/settings.md\n@@ -933,9 +933,9 @@ Hard limit is configured via system tools\n \n ## database_atomic_delay_before_drop_table_sec {#database_atomic_delay_before_drop_table_sec}\n \n-Sets the delay before remove table data in seconds. If the query has `SYNC` modifier, this setting is ignored.\n+The delay before a table data is dropped in seconds. If the `DROP TABLE` query has a `SYNC` modifier, this setting is ignored.\n \n-Default value: `480` (8 minute).\n+Default value: `480` (8 minutes).\n \n ## database_catalog_unused_dir_hide_timeout_sec {#database_catalog_unused_dir_hide_timeout_sec}\n \ndiff --git a/docs/en/sql-reference/statements/undrop.md b/docs/en/sql-reference/statements/undrop.md\nindex 40ac1ab4f995..4b138bfe6797 100644\n--- a/docs/en/sql-reference/statements/undrop.md\n+++ b/docs/en/sql-reference/statements/undrop.md\n@@ -13,13 +13,6 @@ a system table called `system.dropped_tables`.\n \n If you have a materialized view without a `TO` clause associated with the dropped table, then you will also have to UNDROP the inner table of that view.\n \n-:::note\n-UNDROP TABLE is experimental.  To use it add this setting: \n-```sql\n-set allow_experimental_undrop_table_query = 1;\n-```\n-:::\n-\n :::tip\n Also see [DROP TABLE](/docs/en/sql-reference/statements/drop.md)\n :::\n@@ -32,60 +25,53 @@ UNDROP TABLE [db.]name [UUID '<uuid>'] [ON CLUSTER cluster]\n \n **Example**\n \n-``` sql\n-set allow_experimental_undrop_table_query = 1;\n-```\n-\n ```sql\n-CREATE TABLE undropMe\n+CREATE TABLE tab\n (\n     `id` UInt8\n )\n ENGINE = MergeTree\n-ORDER BY id\n-```\n+ORDER BY id;\n+\n+DROP TABLE tab;\n \n-```sql\n-DROP TABLE undropMe\n-```\n-```sql\n SELECT *\n FROM system.dropped_tables\n-FORMAT Vertical\n+FORMAT Vertical;\n ```\n+\n ```response\n Row 1:\n \u2500\u2500\u2500\u2500\u2500\u2500\n index:                 0\n database:              default\n-table:                 undropMe\n+table:                 tab\n uuid:                  aa696a1a-1d70-4e60-a841-4c80827706cc\n engine:                MergeTree\n-metadata_dropped_path: /var/lib/clickhouse/metadata_dropped/default.undropMe.aa696a1a-1d70-4e60-a841-4c80827706cc.sql\n+metadata_dropped_path: /var/lib/clickhouse/metadata_dropped/default.tab.aa696a1a-1d70-4e60-a841-4c80827706cc.sql\n table_dropped_time:    2023-04-05 14:12:12\n \n 1 row in set. Elapsed: 0.001 sec. \n ```\n+\n ```sql\n-UNDROP TABLE undropMe\n-```\n-```response\n-Ok.\n-```\n-```sql\n+UNDROP TABLE tab;\n+\n SELECT *\n FROM system.dropped_tables\n-FORMAT Vertical\n-```\n+FORMAT Vertical;\n+\n ```response\n Ok.\n \n 0 rows in set. Elapsed: 0.001 sec. \n ```\n+\n ```sql\n-DESCRIBE TABLE undropMe\n-FORMAT Vertical\n+DESCRIBE TABLE tab\n+FORMAT Vertical;\n ```\n+\n ```response\n Row 1:\n \u2500\u2500\u2500\u2500\u2500\u2500\ndiff --git a/src/Interpreters/DatabaseCatalog.cpp b/src/Interpreters/DatabaseCatalog.cpp\nindex a9fd5c852ba3..9d9f418934f6 100644\n--- a/src/Interpreters/DatabaseCatalog.cpp\n+++ b/src/Interpreters/DatabaseCatalog.cpp\n@@ -1143,7 +1143,7 @@ void DatabaseCatalog::dequeueDroppedTableCleanup(StorageID table_id)\n     TableMarkedAsDropped dropped_table;\n     {\n         std::lock_guard lock(tables_marked_dropped_mutex);\n-        time_t latest_drop_time = std::numeric_limits<time_t>::min();\n+        auto latest_drop_time = std::numeric_limits<time_t>::min();\n         auto it_dropped_table = tables_marked_dropped.end();\n         for (auto it = tables_marked_dropped.begin(); it != tables_marked_dropped.end(); ++it)\n         {\n@@ -1168,7 +1168,7 @@ void DatabaseCatalog::dequeueDroppedTableCleanup(StorageID table_id)\n         }\n         if (it_dropped_table == tables_marked_dropped.end())\n             throw Exception(ErrorCodes::UNKNOWN_TABLE,\n-                \"The drop task of table {} is in progress, has been dropped or the database engine doesn't support it\",\n+                \"Table {} is being dropped, has been dropped, or the database engine does not support UNDROP\",\n                 table_id.getNameForLogs());\n         latest_metadata_dropped_path = it_dropped_table->metadata_path;\n         String table_metadata_path = getPathForMetadata(it_dropped_table->table_id);\ndiff --git a/src/Interpreters/InterpreterUndropQuery.cpp b/src/Interpreters/InterpreterUndropQuery.cpp\nindex 8401c47df6b2..f628a6569472 100644\n--- a/src/Interpreters/InterpreterUndropQuery.cpp\n+++ b/src/Interpreters/InterpreterUndropQuery.cpp\n@@ -17,14 +17,16 @@ namespace ErrorCodes\n     extern const int SUPPORT_IS_DISABLED;\n }\n \n-InterpreterUndropQuery::InterpreterUndropQuery(const ASTPtr & query_ptr_, ContextMutablePtr context_) : WithMutableContext(context_), query_ptr(query_ptr_)\n+InterpreterUndropQuery::InterpreterUndropQuery(const ASTPtr & query_ptr_, ContextMutablePtr context_)\n+    : WithMutableContext(context_)\n+    , query_ptr(query_ptr_)\n {\n }\n \n-\n BlockIO InterpreterUndropQuery::execute()\n {\n     getContext()->checkAccess(AccessType::UNDROP_TABLE);\n+\n     auto & undrop = query_ptr->as<ASTUndropQuery &>();\n     if (!undrop.cluster.empty() && !maybeRemoveOnCluster(query_ptr, getContext()))\n     {\n",
  "test_patch": "diff --git a/tests/integration/test_undrop_query/test.py b/tests/integration/test_undrop_query/test.py\nindex 590a5690e555..d57aa8c2dc71 100644\n--- a/tests/integration/test_undrop_query/test.py\n+++ b/tests/integration/test_undrop_query/test.py\n@@ -29,30 +29,39 @@ def test_undrop_drop_and_undrop_loop(started_cluster):\n         logging.info(\n             \"random_sec: \" + random_sec.__str__() + \", table_uuid: \" + table_uuid\n         )\n+\n         node.query(\n-            \"create table test_undrop_loop\"\n+            \"CREATE TABLE test_undrop_loop\"\n             + count.__str__()\n             + \" UUID '\"\n             + table_uuid\n-            + \"' (id Int32) Engine=MergeTree() order by id;\"\n+            + \"' (id Int32) ENGINE = MergeTree() ORDER BY id;\"\n         )\n-        node.query(\"drop table test_undrop_loop\" + count.__str__() + \";\")\n+\n+        node.query(\"DROP TABLE test_undrop_loop\" + count.__str__() + \";\")\n+\n         time.sleep(random_sec)\n+\n         if random_sec >= 5:\n             error = node.query_and_get_error(\n-                \"undrop table test_undrop_loop\"\n+                \"UNDROP TABLE test_undrop_loop\"\n                 + count.__str__()\n-                + \" uuid '\"\n+                + \" UUID '\"\n                 + table_uuid\n                 + \"';\"\n             )\n             assert \"UNKNOWN_TABLE\" in error\n-        else:\n+        elif random_sec <= 3:\n+            # (*)\n             node.query(\n-                \"undrop table test_undrop_loop\"\n+                \"UNDROP TABLE test_undrop_loop\"\n                 + count.__str__()\n-                + \" uuid '\"\n+                + \" UUID '\"\n                 + table_uuid\n                 + \"';\"\n             )\n             count = count + 1\n+        else:\n+            pass\n+            # ignore random_sec = 4 to account for communication delay with the database.\n+            # if we don't do that, then the second case (*) may find the table already dropped and receive an unexpected exception from the database (Bug #55167)\ndiff --git a/tests/queries/0_stateless/02681_undrop_query.sql b/tests/queries/0_stateless/02681_undrop_query.sql\nindex 66447fc6c44b..d038a383690b 100644\n--- a/tests/queries/0_stateless/02681_undrop_query.sql\n+++ b/tests/queries/0_stateless/02681_undrop_query.sql\n@@ -85,5 +85,5 @@ drop table 02681_undrop_multiple;\n select table from system.dropped_tables where table = '02681_undrop_multiple' limit 1;\n undrop table 02681_undrop_multiple;\n select * from 02681_undrop_multiple order by id;\n-undrop table 02681_undrop_multiple; -- { serverError 57 }\n+undrop table 02681_undrop_multiple; -- { serverError TABLE_ALREADY_EXISTS }\n drop table 02681_undrop_multiple sync;\n",
  "problem_statement": "Flaky test_undrop_query\nhttps://s3.amazonaws.com/clickhouse-test-reports/0/0629b8679b934e38477e67bd07d319498cd496d1/integration_tests__tsan__[2_6].html\r\n\r\n```\r\nE           helpers.client.QueryRuntimeException: Client failed! Return code: 60, stderr: Received exception from server (version 23.9.1):\r\nE           Code: 60. DB::Exception: Received from 172.16.15.2:9000. DB::Exception: The drop task of table default.test_undrop_loop6 (a7aa9db2-5bb7-11ee-8786-0242ac110002) is in progress, has been dropped or the database engine doesn't support it. Stack trace:\r\nE           \r\nE           0. ./build_docker/./contrib/llvm-project/libcxx/include/exception:134: Poco::Exception::Exception(String const&, int) @ 0x000000001f986ba3 in /usr/bin/clickhouse\r\nE           1. ./build_docker/./src/Common/Exception.cpp:98: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000fb86154 in /usr/bin/clickhouse\r\nE           2. DB::Exception::Exception<String>(int, FormatStringHelperImpl<std::type_identity<String>::type>, String&&) @ 0x0000000007dc16f9 in /usr/bin/clickhouse\r\nE           3. ./build_docker/./src/Interpreters/DatabaseCatalog.cpp:0: DB::DatabaseCatalog::dequeueDroppedTableCleanup(DB::StorageID) @ 0x0000000018c64d1c in /usr/bin/clickhouse\r\nE           4. ./build_docker/./contrib/llvm-project/libcxx/include/string:1499: DB::InterpreterUndropQuery::executeToTable(DB::ASTUndropQuery&) @ 0x000000001996ef47 in /usr/bin/clickhouse\r\nE           5. ./build_docker/./src/Interpreters/InterpreterUndropQuery.cpp:44: DB::InterpreterUndropQuery::execute() @ 0x000000001996e6bb in /usr/bin/clickhouse\r\nE           6. ./build_docker/./src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000019da760b in /usr/bin/clickhouse\r\nE           7. ./build_docker/./src/Interpreters/executeQuery.cpp:1234: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x0000000019da30b9 in /usr/bin/clickhouse\r\nE           8. ./build_docker/./src/Server/TCPHandler.cpp:0: DB::TCPHandler::runImpl() @ 0x000000001b267d53 in /usr/bin/clickhouse\r\nE           9. ./build_docker/./src/Server/TCPHandler.cpp:2127: DB::TCPHandler::run() @ 0x000000001b281d48 in /usr/bin/clickhouse\r\nE           10. ./build_docker/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x000000001f802a03 in /usr/bin/clickhouse\r\nE           11. ./build_docker/./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: Poco::Net::TCPServerDispatcher::run() @ 0x000000001f80327b in /usr/bin/clickhouse\r\nE           12. ./build_docker/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x000000001fa141a7 in /usr/bin/clickhouse\r\nE           13. ./build_docker/./base/poco/Foundation/src/Thread.cpp:46: Poco::(anonymous namespace)::RunnableHolder::run() @ 0x000000001fa12470 in /usr/bin/clickhouse\r\nE           14. ./build_docker/./base/poco/Foundation/include/Poco/SharedPtr.h:231: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000001fa1092a in /usr/bin/clickhouse\r\nE           15. __tsan_thread_start_func @ 0x0000000007d2dc8f in /usr/bin/clickhouse\r\nE           16. ? @ 0x00007f3e4fdb5b43 in ?\r\nE           17. ? @ 0x00007f3e4fe47a00 in ?\r\nE           . (UNKNOWN_TABLE)\r\nE           (query: undrop table test_undrop_loop6 uuid 'a7aa9db2-5bb7-11ee-8786-0242ac110002' settings allow_experimental_undrop_table_query = 1;)\r\n```\n",
  "hints_text": "",
  "created_at": "2024-03-13T20:40:30Z",
  "modified_files": [
    "docs/en/operations/server-configuration-parameters/settings.md",
    "docs/en/sql-reference/statements/undrop.md",
    "src/Interpreters/DatabaseCatalog.cpp",
    "src/Interpreters/InterpreterUndropQuery.cpp"
  ],
  "modified_test_files": [
    "tests/integration/test_undrop_query/test.py",
    "tests/queries/0_stateless/02681_undrop_query.sql"
  ]
}