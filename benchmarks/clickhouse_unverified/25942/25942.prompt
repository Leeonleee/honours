You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
ANTLR parser: Missing column when casting with Postgresql style cast
**Describe the bug**

When using the antrl parser, using CAST on a column works:

```
SELECT CAST(type, 'String')
:-] FROM system.query_log
:-] ORDER BY event_time_microseconds DESC
:-] LIMIT 1

SELECT CAST(type, 'String')
FROM system.query_log
ORDER BY event_time_microseconds DESC
LIMIT 1

Query id: 2248ed6f-15b0-40b5-800d-5e49b7043c6a

┌─CAST(type, 'String')─┐
│ ExceptionBeforeStart │
└──────────────────────┘

1 rows in set. Elapsed: 0.041 sec. Processed 2.54 thousand rows, 22.83 KB (61.54 thousand rows/s., 553.90 KB/s.)
```

But using `::` doesn't:

```
SELECT type::String
:-] FROM system.query_log
:-] ORDER BY event_time_microseconds DESC LIMIT 1;

SELECT CAST(type, 'String')
FROM system.query_log
ORDER BY event_time_microseconds DESC
LIMIT 1

Query id: ecbf836d-7e3d-4694-8e2f-9eb56ea839ec


0 rows in set. Elapsed: 0.007 sec. 

Received exception from server (version 21.8.1):
Code: 47. DB::Exception: Received from localhost:9000. DB::Exception: Missing columns: 'type' while processing query: 'SELECT type', required columns: 'type'.
```

Although the queries reported back by the backend are the same, the second one throws an exception.


**Does it reproduce on recent release?**

* master/HEAD: KO
* v21.7.1.7020-testing: KO
* v21.6.5.37-stable: KO

**Expected behavior**

Both queries should work the same way (same as the production parser).

**Additional context**

The production parser works fine in all tested releases (21.6, 21.7 and master).
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
