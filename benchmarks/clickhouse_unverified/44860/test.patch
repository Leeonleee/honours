diff --git a/tests/queries/0_stateless/00189_time_zones_long.sql b/tests/queries/0_stateless/00189_time_zones_long.sql
index cf1b9e9ae1d8..5760f6c04479 100644
--- a/tests/queries/0_stateless/00189_time_zones_long.sql
+++ b/tests/queries/0_stateless/00189_time_zones_long.sql
@@ -120,11 +120,11 @@ SELECT toDayOfMonth(toDateTime(1412106600), 'Pacific/Pitcairn');
 /* toDayOfWeek */
 
 SELECT 'toDayOfWeek';
-SELECT toDayOfWeek(toDateTime(1412106600), 'Asia/Istanbul');
-SELECT toDayOfWeek(toDateTime(1412106600), 'Europe/Paris');
-SELECT toDayOfWeek(toDateTime(1412106600), 'Europe/London');
-SELECT toDayOfWeek(toDateTime(1412106600), 'Asia/Tokyo');
-SELECT toDayOfWeek(toDateTime(1412106600), 'Pacific/Pitcairn');
+SELECT toDayOfWeek(toDateTime(1412106600), 0, 'Asia/Istanbul');
+SELECT toDayOfWeek(toDateTime(1412106600), 0, 'Europe/Paris');
+SELECT toDayOfWeek(toDateTime(1412106600), 0, 'Europe/London');
+SELECT toDayOfWeek(toDateTime(1412106600), 0, 'Asia/Tokyo');
+SELECT toDayOfWeek(toDateTime(1412106600), 0, 'Pacific/Pitcairn');
 
 /* toHour */
 
diff --git a/tests/queries/0_stateless/00921_datetime64_compatibility_long.python b/tests/queries/0_stateless/00921_datetime64_compatibility_long.python
index e3cd7ee6d361..2706c0f5b122 100644
--- a/tests/queries/0_stateless/00921_datetime64_compatibility_long.python
+++ b/tests/queries/0_stateless/00921_datetime64_compatibility_long.python
@@ -7,14 +7,14 @@ import sys
 import argparse
 
 # Create SQL statement to verify dateTime64 is accepted as argument to functions taking DateTime.
-FUNCTIONS="""
+FUNCTIONS = """
 toTimeZone(N, 'UTC')
 toYear(N, 'Asia/Istanbul')
 toQuarter(N, 'Asia/Istanbul')
 toMonth(N, 'Asia/Istanbul')
 toDayOfYear(N, 'Asia/Istanbul')
 toDayOfMonth(N, 'Asia/Istanbul')
-toDayOfWeek(N, 'Asia/Istanbul')
+toDayOfWeek(N, 0, 'Asia/Istanbul')
 toHour(N, 'Asia/Istanbul')
 toMinute(N, 'Asia/Istanbul')
 toSecond(N, 'Asia/Istanbul')
@@ -90,68 +90,51 @@ formatDateTime(N, '%C %d %D %e %F %H %I %j %m %M %p %R %S %T %u %V %w %y %Y %%',
 extra_ops = [
     # With same type:
     (
-        ['N {op} N'],
+        ["N {op} N"],
         {
-            'op':
-            [
-                '- ', # does not work, but should it?
-                '+ ', # does not work, but should it?
-                '!=', '==', # equality and inequality supposed to take sub-second part in account
-                '< ',
-                '<=',
-                '> ',
-                '>='
+            "op": [
+                "- ",  # does not work, but should it?
+                "+ ",  # does not work, but should it?
+                "!=",
+                "==",  # equality and inequality supposed to take sub-second part in account
+                "< ",
+                "<=",
+                "> ",
+                ">=",
             ]
-        }
+        },
     ),
     # With other DateTime types:
     (
-        [
-            'N {op} {arg}',
-            '{arg} {op} N'
-        ],
+        ["N {op} {arg}", "{arg} {op} N"],
         {
-            'op':
-            [
-                '-', # does not work, but should it?
-                '!=', '==',
+            "op": [
+                "-",  # does not work, but should it?
+                "!=",
+                "==",
                 # these are naturally expected to work, but they don't:
-                '< ',
-                '<=',
-                '> ',
-                '>='
+                "< ",
+                "<=",
+                "> ",
+                ">=",
             ],
-            'arg': ['DT', 'D', 'DT64'],
-        }
+            "arg": ["DT", "D", "DT64"],
+        },
     ),
     # With arithmetic types
     (
-        [
-            'N {op} {arg}',
-            '{arg} {op} N'
-        ],
+        ["N {op} {arg}", "{arg} {op} N"],
         {
-            'op':
-            [
-                '+ ',
-                '- ',
-                '==',
-                '!=',
-                '< ',
-                '<=',
-                '> ',
-                '>='
-            ],
-            'arg':
-            [
-                'toUInt8(1)',
-                'toInt8(-1)',
-                'toUInt16(1)',
-                'toInt16(-1)',
-                'toUInt32(1)',
-                'toInt32(-1)',
-                'toUInt64(1)',
-                'toInt64(-1)'
+            "op": ["+ ", "- ", "==", "!=", "< ", "<=", "> ", ">="],
+            "arg": [
+                "toUInt8(1)",
+                "toInt8(-1)",
+                "toUInt16(1)",
+                "toInt16(-1)",
+                "toUInt32(1)",
+                "toInt32(-1)",
+                "toUInt64(1)",
+                "toInt64(-1)",
             ],
         },
     ),
@@ -167,14 +150,17 @@ for funcs, args in extra_ops:
 
 # filter out empty lines and commented out lines
 COMMENTED_OUT_LINE_RE = re.compile(r"^\s*#")
-FUNCTIONS = list([f for f in FUNCTIONS if len(f) != 0 and COMMENTED_OUT_LINE_RE.match(f) == None])
-TYPES = ['D', 'DT', 'DT64']
+FUNCTIONS = list(
+    [f for f in FUNCTIONS if len(f) != 0 and COMMENTED_OUT_LINE_RE.match(f) == None]
+)
+TYPES = ["D", "DT", "DT64"]
+
 
 def escape_string(s):
     if sys.version_info[0] > 2:
-        return s.encode('unicode_escape').decode('utf-8').replace("'", "\\'")
+        return s.encode("unicode_escape").decode("utf-8").replace("'", "\\'")
     else:
-        return s.encode('string-escape').decode('utf-8')
+        return s.encode("string-escape").decode("utf-8")
 
 
 def execute_functions_for_types(functions, types):
@@ -186,18 +172,39 @@ def execute_functions_for_types(functions, types):
 WITH \
 toDateTime64('2019-09-16 19:20:11.234', 3, 'Europe/Minsk') as DT64, \
 toDateTime('2019-09-16 19:20:11', 'Europe/Minsk') as DT, \
-toDate('2019-09-16') as D, {X} as N".format(X=dt)
-            print(("""{prologue} SELECT toTypeName(r), {func} as r FORMAT CSV;""".format(prologue=prologue, func=func)))
+toDate('2019-09-16') as D, {X} as N".format(
+                X=dt
+            )
+            print(
+                (
+                    """{prologue} SELECT toTypeName(r), {func} as r FORMAT CSV;""".format(
+                        prologue=prologue, func=func
+                    )
+                )
+            )
         print("""SELECT '------------------------------------------';""")
 
+
 def main():
     def parse_args():
         parser = argparse.ArgumentParser()
-        parser.add_argument('--functions_re', type=re.compile, help="RE to enable functions", default=None)
-        parser.add_argument('--types_re',
-                type=lambda s: re.compile('^(' + s + ')$'),
-                help="RE to enable types, supported types: " + ",".join(TYPES), default=None)
-        parser.add_argument('--list_functions', action='store_true', help="List all functions to be tested and exit")
+        parser.add_argument(
+            "--functions_re",
+            type=re.compile,
+            help="RE to enable functions",
+            default=None,
+        )
+        parser.add_argument(
+            "--types_re",
+            type=lambda s: re.compile("^(" + s + ")$"),
+            help="RE to enable types, supported types: " + ",".join(TYPES),
+            default=None,
+        )
+        parser.add_argument(
+            "--list_functions",
+            action="store_true",
+            help="List all functions to be tested and exit",
+        )
         return parser.parse_args()
 
     args = parse_args()
@@ -223,5 +230,6 @@ def main():
 
     execute_functions_for_types(functions, types)
 
-if __name__ == '__main__':
+
+if __name__ == "__main__":
     exit(main())
diff --git a/tests/queries/0_stateless/00921_datetime64_compatibility_long.reference b/tests/queries/0_stateless/00921_datetime64_compatibility_long.reference
index 8d28a69ff3de..8a168ed0e9e9 100644
--- a/tests/queries/0_stateless/00921_datetime64_compatibility_long.reference
+++ b/tests/queries/0_stateless/00921_datetime64_compatibility_long.reference
@@ -28,7 +28,7 @@ SELECT toDayOfMonth(N, \'Asia/Istanbul\')
 "UInt8",16
 "UInt8",16
 ------------------------------------------
-SELECT toDayOfWeek(N, \'Asia/Istanbul\')
+SELECT toDayOfWeek(N, 0, \'Asia/Istanbul\')
 "UInt8",1
 "UInt8",1
 "UInt8",1
diff --git a/tests/queries/0_stateless/02521_to_custom_day_of_week.reference b/tests/queries/0_stateless/02521_to_custom_day_of_week.reference
new file mode 100644
index 000000000000..660dff37b72e
--- /dev/null
+++ b/tests/queries/0_stateless/02521_to_custom_day_of_week.reference
@@ -0,0 +1,7 @@
+1	7
+1	7
+0	6
+1	0
+2	1
+1	7
+0	6
diff --git a/tests/queries/0_stateless/02521_to_custom_day_of_week.sql b/tests/queries/0_stateless/02521_to_custom_day_of_week.sql
new file mode 100644
index 000000000000..5475e15a9843
--- /dev/null
+++ b/tests/queries/0_stateless/02521_to_custom_day_of_week.sql
@@ -0,0 +1,10 @@
+
+with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon), toDayOfWeek(date_sun);
+with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 0), toDayOfWeek(date_sun, 0);
+with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 1), toDayOfWeek(date_sun, 1);
+with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 2), toDayOfWeek(date_sun, 2);
+with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 3), toDayOfWeek(date_sun, 3);
+with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 4), toDayOfWeek(date_sun, 4);
+with toDate('2023-01-09') as date_mon, date_mon - 1 as date_sun select toDayOfWeek(date_mon, 5), toDayOfWeek(date_sun, 5);
+
+select toDayOfWeek(today(), -1); -- { serverError 43 }
