{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 57855,
  "instance_id": "ClickHouse__ClickHouse-57855",
  "issue_numbers": [
    "57623"
  ],
  "base_commit": "0dfe530a7fd5d17a1ac48b72dd9ca032d1cecbda",
  "patch": "diff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 2b60b0b7b473..bf07f4ed3eeb 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -786,10 +786,28 @@ InterpreterCreateQuery::TableProperties InterpreterCreateQuery::getTableProperti\n         }\n         else\n         {\n-            as_select_sample = InterpreterSelectWithUnionQuery::getSampleBlock(create.select->clone(),\n-                getContext(),\n-                false /* is_subquery */,\n-                create.isParameterizedView());\n+            /** To get valid sample block we need to prepare query without only_analyze, because we need to execute scalar\n+              * subqueries. Otherwise functions that expect only constant arguments will throw error during query analysis,\n+              * because the result of scalar subquery is not a constant.\n+              *\n+              * Example:\n+              * CREATE MATERIALIZED VIEW test_mv ENGINE=MergeTree ORDER BY arr\n+              * AS\n+              * WITH (SELECT '\\d[a-z]') AS constant_value\n+              * SELECT extractAll(concat(toString(number), 'a'), assumeNotNull(constant_value)) AS arr\n+              * FROM test_table;\n+              *\n+              * For new analyzer this issue does not exists because we always execute scalar subqueries.\n+              * We can improve this in new analyzer, and execute scalar subqueries only in contexts when we expect constant\n+              * for example: LIMIT, OFFSET, functions parameters, functions constant only arguments.\n+              */\n+\n+            SelectQueryOptions options;\n+            if (create.isParameterizedView())\n+                options = options.createParameterizedView();\n+\n+            InterpreterSelectWithUnionQuery interpreter(create.select->clone(), getContext(), options);\n+            as_select_sample = interpreter.getSampleBlock();\n         }\n \n         properties.columns = ColumnsDescription(as_select_sample.getNamesAndTypesList());\n@@ -1223,7 +1241,7 @@ BlockIO InterpreterCreateQuery::createTable(ASTCreateQuery & create)\n             {\n                 input_block = InterpreterSelectWithUnionQuery(create.select->clone(),\n                     getContext(),\n-                    SelectQueryOptions().analyze()).getSampleBlock();\n+                    {}).getSampleBlock();\n             }\n \n             Block output_block = to_table->getInMemoryMetadataPtr()->getSampleBlock();\ndiff --git a/src/Processors/Transforms/buildPushingToViewsChain.cpp b/src/Processors/Transforms/buildPushingToViewsChain.cpp\nindex 781a162d2bd3..f85dc28f4c79 100644\n--- a/src/Processors/Transforms/buildPushingToViewsChain.cpp\n+++ b/src/Processors/Transforms/buildPushingToViewsChain.cpp\n@@ -341,7 +341,7 @@ Chain buildPushingToViewsChain(\n             if (select_context->getSettingsRef().allow_experimental_analyzer)\n                 header = InterpreterSelectQueryAnalyzer::getSampleBlock(query, select_context);\n             else\n-                header = InterpreterSelectQuery(query, select_context, SelectQueryOptions().analyze()).getSampleBlock();\n+                header = InterpreterSelectQuery(query, select_context, SelectQueryOptions()).getSampleBlock();\n \n             /// Insert only columns returned by select.\n             Names insert_columns;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02174_cte_scalar_cache_mv.reference b/tests/queries/0_stateless/02174_cte_scalar_cache_mv.reference\nindex 055c88160ad2..8ec3608317fc 100644\n--- a/tests/queries/0_stateless/02174_cte_scalar_cache_mv.reference\n+++ b/tests/queries/0_stateless/02174_cte_scalar_cache_mv.reference\n@@ -18,7 +18,7 @@\n 89\t89\t89\t89\t5\n 94\t94\t94\t94\t5\n 99\t99\t99\t99\t5\n-02177_MV\t3\t80\t26\n+02177_MV\t7\t80\t22\n 10\n 40\n 70\n@@ -60,4 +60,4 @@\n 178\n 188\n 198\n-02177_MV_3\t19\t0\t2\n+02177_MV_3\t20\t0\t1\ndiff --git a/tests/queries/0_stateless/02943_create_query_interpreter_sample_block_fix.reference b/tests/queries/0_stateless/02943_create_query_interpreter_sample_block_fix.reference\nnew file mode 100644\nindex 000000000000..a0226ef9dd71\n--- /dev/null\n+++ b/tests/queries/0_stateless/02943_create_query_interpreter_sample_block_fix.reference\n@@ -0,0 +1,9 @@\n+['0a']\n+--\n+['0a']\n+['1a']\n+--\n+['0a']\n+--\n+['0a']\n+['1a']\ndiff --git a/tests/queries/0_stateless/02943_create_query_interpreter_sample_block_fix.sql b/tests/queries/0_stateless/02943_create_query_interpreter_sample_block_fix.sql\nnew file mode 100644\nindex 000000000000..0262393fd48c\n--- /dev/null\n+++ b/tests/queries/0_stateless/02943_create_query_interpreter_sample_block_fix.sql\n@@ -0,0 +1,52 @@\n+DROP TABLE IF EXISTS test_table;\n+CREATE TABLE test_table\n+(\n+    number UInt64\n+)\n+ENGINE=MergeTree ORDER BY number;\n+\n+DROP VIEW IF EXISTS test_mv;\n+CREATE MATERIALIZED VIEW test_mv ENGINE=MergeTree ORDER BY arr\n+AS\n+WITH (SELECT '\\d[a-z]') AS constant_value\n+SELECT extractAll(concat(toString(number), 'a'), assumeNotNull(constant_value)) AS arr\n+FROM test_table;\n+\n+INSERT INTO test_table VALUES (0);\n+SELECT * FROM test_mv ORDER BY arr;\n+\n+SELECT '--';\n+\n+INSERT INTO test_table VALUES (1);\n+SELECT * FROM test_mv ORDER BY arr;\n+\n+SELECT '--';\n+\n+TRUNCATE test_table;\n+\n+DROP TABLE IF EXISTS regex_test_table;\n+CREATE TABLE regex_test_table\n+(\n+    regex String\n+)\n+ENGINE = MergeTree ORDER BY regex;\n+\n+INSERT INTO regex_test_table VALUES ('\\d[a-z]');\n+\n+DROP VIEW test_mv;\n+CREATE MATERIALIZED VIEW test_mv ENGINE=MergeTree ORDER BY arr\n+AS\n+WITH (SELECT regex FROM regex_test_table) AS constant_value\n+SELECT extractAll(concat(toString(number), 'a'), assumeNotNull(constant_value)) AS arr\n+FROM test_table;\n+\n+INSERT INTO test_table VALUES (0);\n+SELECT * FROM test_mv ORDER BY arr;\n+\n+SELECT '--';\n+\n+INSERT INTO test_table VALUES (1);\n+SELECT * FROM test_mv ORDER BY arr;\n+\n+DROP VIEW test_mv;\n+DROP TABLE test_table;\n",
  "problem_statement": "Materialized view extractAll (and other string function) regression since CH 23.9\n**Describe the unexpected behaviour**\r\n\r\nFunction `extractAll` expects a const String as second parameters. When executing a query like this one, the output of the CTE is considered constant and everything works fine. But if that query is turned out into a MV the CTE's output is no considered constant anymore.\r\n\r\n```sql\r\nWITH coalesce((\r\n        SELECT reg\r\n        FROM extract_all.regex\r\n    ), '') AS val\r\nSELECT\r\n    extractAll(concat(toString(number), 'a'), assumeNotNull(val))\r\nFROM extract_all.ds;\r\n```\r\n\r\n**How to reproduce**\r\n\r\nThis is the full reproducer:\r\n\r\n```sql\r\nDROP DATABASE IF EXISTS extract_all;\r\nCREATE DATABASE extract_all;\r\n\r\nCREATE TABLE extract_all.ds (\r\n    number UInt32\r\n)\r\nENGINE=MergeTree\r\nORDER BY number AS\r\nSELECT 1;\r\n\r\nCREATE TABLE extract_all.ds_2 (\r\n    arr Array(String)\r\n)\r\nENGINE=MergeTree\r\nORDER BY tuple();\r\n\r\nCREATE TABLE extract_all.regex\r\n(\r\n    `reg` String\r\n)\r\nENGINE = MergeTree\r\nORDER BY tuple() AS\r\nSELECT '\\d[a-z]';\r\n\r\nSELECT '-- Query by itself';\r\nWITH coalesce((\r\n        SELECT reg\r\n        FROM extract_all.regex\r\n    ), '') AS val\r\nSELECT\r\n    extractAll(concat(toString(number), 'a'), assumeNotNull(val))\r\nFROM extract_all.ds;\r\n\r\nSELECT '-- MV';\r\nCREATE MATERIALIZED VIEW extract_all.mv TO extract_all.ds_2\r\nAS\r\nWITH coalesce((\r\n        SELECT reg\r\n        FROM extract_all.regex\r\n    ), '') AS val\r\nSELECT\r\n    extractAll(concat(toString(number), 'a'), assumeNotNull(val)) AS arr\r\nFROM extract_all.ds;\r\n```\r\n\r\nEverything works fine when using CH 23.8 and starts failing from 23.9 onwards.\r\n\r\n**Expected behavior**\r\n\r\nThe MV should work the same as in version 23.8, interpreting CTE's output as constant.\n",
  "hints_text": "It looks like it was introduced in this PR: https://github.com/ClickHouse/ClickHouse/pull/54518/files cc @rschu1ze\r\n\r\nBefore it was validated by using the following function (`SplitByStringImpl::checkArguments` => `SplitByCharImpl::checkArguments`)\r\n\r\n```cpp\r\n    static void checkArguments(const DataTypes & arguments)\r\n    {\r\n        if (arguments.size() < 2 || arguments.size() > 3)\r\n            throw Exception(\r\n                ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,\r\n                \"Function '{}' needs at least 2 arguments, at most 3 arguments; passed {}.\",\r\n                name, arguments.size());\r\n\r\n        if (!isString(arguments[0]))\r\n            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"Illegal type {} of first argument of function {}. \"\r\n                \"Must be String.\", arguments[0]->getName(), getName());\r\n\r\n        if (!isString(arguments[1]))\r\n            throw Exception(ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT, \"Illegal type {} of second argument of function {}. \"\r\n                \"Must be String.\", arguments[1]->getName(), getName());\r\n    }\r\n```\r\n\r\nSo the change in that PR seems right but looks like in MVs, CTE's output is not considered constants while in query execution they are. Is this expected?\nI guess this is happening in creation time because in execution time looks like CTE's output (`val`) is correctly interpreted as constant:\r\n\r\n```sql\r\nCREATE MATERIALIZED VIEW extract_all.mv TO extract_all.ds_2\r\nAS\r\nWITH coalesce((\r\n        SELECT reg\r\n        FROM extract_all.regex\r\n    ), '') AS val\r\nSELECT\r\n    ['whatever'] AS arr,\r\n    isConstant(val) AS cnt\r\nFROM extract_all.ds;\r\n\r\nINSERT INTO extract_all.ds VALUES(1);\r\n\r\nSELECT * FROM extract_all.ds_2;\r\n```\r\n=>\r\n```\r\n['whatever']\t1\r\n```\nAs usual with this kind of error, it works fine by setting `allow_experimental_analyzer = 1`.\nSimpler reproducer:\r\n```\r\nSELECT extractAll(concat(toString(number), 'a'), assumeNotNull((SELECT 'test'))) AS arr FROM numbers(10)\r\n\r\n\u250c\u2500arr\u2500\u2510\r\n\u2502 []  \u2502\r\n\u2502 []  \u2502\r\n\u2502 []  \u2502\r\n\u2502 []  \u2502\r\n\u2502 []  \u2502\r\n\u2502 []  \u2502\r\n\u2502 []  \u2502\r\n\u2502 []  \u2502\r\n\u2502 []  \u2502\r\n\u2502 []  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n```\r\nDESCRIBE (SELECT extractAll(concat(toString(number), 'a'), assumeNotNull((SELECT 'test'))) AS arr FROM numbers(10))\r\n\r\nReceived exception from server (version 23.12.1):\r\nCode: 44. DB::Exception: Received from localhost:9000. DB::Exception: Illegal type of argument #2 'pattern' of function extractAll, expected const String, got String: While processing extractAll(concat(toString(number), 'a'), assumeNotNull(identity(_CAST('test', 'Nullable(String)')) AS _subquery18)) AS arr. (ILLEGAL_COLUMN)\r\n```\r\n\r\n",
  "created_at": "2023-12-14T09:46:29Z",
  "modified_files": [
    "src/Interpreters/InterpreterCreateQuery.cpp",
    "src/Processors/Transforms/buildPushingToViewsChain.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02174_cte_scalar_cache_mv.reference",
    "b/tests/queries/0_stateless/02943_create_query_interpreter_sample_block_fix.reference",
    "b/tests/queries/0_stateless/02943_create_query_interpreter_sample_block_fix.sql"
  ]
}