diff --git a/tests/queries/0_stateless/02354_vector_search_choose_correct_index.reference b/tests/queries/0_stateless/02354_vector_search_choose_correct_index.reference
new file mode 100644
index 000000000000..a16748967e0f
--- /dev/null
+++ b/tests/queries/0_stateless/02354_vector_search_choose_correct_index.reference
@@ -0,0 +1,27 @@
+Searches on vec1 should use the vector index
+Expression (Project names)
+  Limit (preliminary LIMIT (without OFFSET))
+    Sorting (Sorting for ORDER BY)
+      Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
+        ReadFromMergeTree (default.tab)
+        Indexes:
+          PrimaryKey
+            Condition: true
+            Parts: 1/1
+            Granules: 1/1
+          Skip
+            Name: idx
+            Description: vector_similarity GRANULARITY 100000000
+            Parts: 1/1
+            Granules: 1/1
+Searches on vec2 should be brute force
+Expression (Project names)
+  Limit (preliminary LIMIT (without OFFSET))
+    Sorting (Sorting for ORDER BY)
+      Expression ((Before ORDER BY + (Projection + Change column names to column identifiers)))
+        ReadFromMergeTree (default.tab)
+        Indexes:
+          PrimaryKey
+            Condition: true
+            Parts: 1/1
+            Granules: 1/1
diff --git a/tests/queries/0_stateless/02354_vector_search_choose_correct_index.sql b/tests/queries/0_stateless/02354_vector_search_choose_correct_index.sql
new file mode 100644
index 000000000000..6982b6685233
--- /dev/null
+++ b/tests/queries/0_stateless/02354_vector_search_choose_correct_index.sql
@@ -0,0 +1,18 @@
+-- Tags: no-fasttest, no-ordinary-database
+
+SET allow_experimental_vector_similarity_index=1;
+SET enable_analyzer = 1; -- analyzer vs. non-analyzer produce slightly different EXPLAIN
+
+-- Test for issue #77978
+
+DROP TABLE IF EXISTS tab;
+
+CREATE TABLE tab(id Int32, vec1 Array(Float32), vec2 Array(Float32), INDEX idx vec1 TYPE vector_similarity('hnsw', 'L2Distance')) ENGINE = MergeTree ORDER BY id;
+
+INSERT INTO tab VALUES (0, [1.0, 0.0], [1.0, 0.0]), (1, [1.1, 0.0], [1.1, 0.0]), (2, [1.2, 0.0], [1.2, 0.0]), (3, [1.3, 0.0], [1.3, 0.0]), (4, [1.4, 0.0], [1.4, 0,0]), (5, [1.5, 0.0], [1.5, 0.0]), (6, [0.0, 2.0], [0.0, 2.0]), (7, [0.0, 2.1], [0.0, 2.1]), (8, [0.0, 2.2], [0.0, 2.2]), (9, [0.0, 2.3], [0.0, 2.3]), (10, [0.0, 2.4], [0.0, 2.4]), (11, [0.0, 2.5], [0.0, 2.5]);
+
+SELECT 'Searches on vec1 should use the vector index';
+EXPLAIN indexes=1 WITH [0.0, 2.0] AS reference_vec SELECT id FROM tab ORDER BY L2Distance(vec1, reference_vec) LIMIT 3;
+
+SELECT 'Searches on vec2 should be brute force';
+EXPLAIN indexes=1 WITH [0.0, 2.0] AS reference_vec SELECT id FROM tab ORDER BY L2Distance(vec2, reference_vec) LIMIT 3;
