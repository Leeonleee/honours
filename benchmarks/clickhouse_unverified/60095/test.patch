diff --git a/src/Parsers/tests/gtest_format_hiliting.cpp b/src/Parsers/tests/gtest_format_hiliting.cpp
index a4c3ed86182c..e87b093db9da 100644
--- a/src/Parsers/tests/gtest_format_hiliting.cpp
+++ b/src/Parsers/tests/gtest_format_hiliting.cpp
@@ -5,9 +5,11 @@
 #include <Parsers/parseQuery.h>
 #include <Parsers/HiliteComparator/HiliteComparator.h>
 #include <gtest/gtest.h>
-#include <Common/StackTrace.h>
+#include <Common/quoteString.h>
 
 
+using namespace DB;
+
 String hilite(const String & s, const char * hilite_type)
 {
     return hilite_type + s + DB::IAST::hilite_none;
@@ -20,12 +22,12 @@ String keyword(const String & s)
 
 String identifier(const String & s)
 {
-    return hilite(s, DB::IAST::hilite_identifier);
+    return hilite(backQuoteIfNeed(s), DB::IAST::hilite_identifier);
 }
 
 String alias(const String & s)
 {
-    return hilite(s, DB::IAST::hilite_alias);
+    return hilite(backQuoteIfNeed(s), DB::IAST::hilite_alias);
 }
 
 String op(const String & s)
@@ -61,65 +63,65 @@ void compare(const String & expected, const String & query)
 const std::vector<std::pair<std::string, std::string>> expected_and_query_pairs = {
     // Simple select
     {
-        keyword("SELECT ") + "* " + keyword("FROM ") + identifier("table"),
-        "select * from table"
+        keyword("SELECT") + " * " + keyword("FROM") + " " + identifier("table"),
+        "select * from `table`"
     },
 
     // ASTWithElement
     {
-        keyword("WITH ") + alias("alias ") + keyword("AS ")
-            + "(" + keyword("SELECT ") + "* " + keyword("FROM ") + identifier("table") + ") "
-            + keyword("SELECT ") + "* " + keyword("FROM ") + identifier("table"),
-        "with alias as (select * from table) select * from table"
+        keyword("WITH ") + alias("alias ") + " " + keyword("AS")
+            + " (" + keyword("SELECT") + " * " + keyword("FROM") + " " + identifier("table") + ") "
+            + keyword("SELECT") + " * " + keyword("FROM") + " " + identifier("table"),
+        "with `alias ` as (select * from `table`) select * from `table`"
     },
 
     // ASTWithAlias
     {
-        keyword("SELECT ") + identifier("a ") + op("+ ") + "1 " + keyword("AS ") + alias("b") + ", " + identifier("b"),
+        keyword("SELECT") + " " + identifier("a") + " " + op("+") + " 1 " + keyword("AS") + " " + alias("b") + ", " + identifier("b"),
         "select a + 1 as b, b"
     },
 
     // ASTFunction
     {
         keyword("SELECT ") + "* " + keyword("FROM ")
-            + function("view(") + keyword("SELECT ") + "* " + keyword("FROM ") + identifier("table") + function(")"),
-        "select * from view(select * from table)"
+            + function("view(") + keyword("SELECT") + " * " + keyword("FROM ") + identifier("table") + function(")"),
+        "select * from view(select * from `table`)"
     },
 
     // ASTDictionaryAttributeDeclaration
     {
-        keyword("CREATE DICTIONARY ") + "name "
-            + "(`Name` " + function("ClickHouseDataType ")
-            + keyword("DEFAULT ") + "'' "
-            + keyword("EXPRESSION ") + function("rand64() ")
+        keyword("CREATE DICTIONARY ") + identifier("name") + " "
+            + "(`Name` " + function("ClickHouseDataType")
+            + keyword(" DEFAULT") + " '' "
+            + keyword("EXPRESSION") + " " + function("rand64()") + " "
             + keyword("IS_OBJECT_ID") + ")",
         "CREATE DICTIONARY name (`Name` ClickHouseDataType DEFAULT '' EXPRESSION rand64() IS_OBJECT_ID)"
     },
 
     // ASTDictionary, SOURCE keyword
     {
-        keyword("CREATE DICTIONARY ") + "name "
-            + "(`Name` " + function("ClickHouseDataType ")
-            + keyword("DEFAULT ") + "'' "
-            + keyword("EXPRESSION ") + function("rand64() ")
+        keyword("CREATE DICTIONARY ") + identifier("name") + " "
+            + "(`Name`" + " " + function("ClickHouseDataType ")
+            + keyword("DEFAULT") + " '' "
+            + keyword("EXPRESSION") + " " + function("rand64()") + " "
             + keyword("IS_OBJECT_ID") + ") "
-            + keyword("SOURCE") + "(" + keyword("FILE") + "(" + keyword("PATH ") + "'path'))",
+            + keyword("SOURCE") + "(" + keyword("FILE") + "(" + keyword("PATH") + " 'path'))",
         "CREATE DICTIONARY name (`Name` ClickHouseDataType DEFAULT '' EXPRESSION rand64() IS_OBJECT_ID) "
         "SOURCE(FILE(PATH 'path'))"
     },
 
     // ASTKillQueryQuery
     {
-        keyword("KILL QUERY ON CLUSTER ") + "clustername "
-            + keyword("WHERE ") + identifier("user ") + op("= ") + "'username' "
+        keyword("KILL QUERY ON CLUSTER") + " clustername "
+            + keyword("WHERE") + " " + identifier("user") + op(" = ") + "'username' "
             + keyword("SYNC"),
         "KILL QUERY ON CLUSTER clustername WHERE user = 'username' SYNC"
     },
 
     // ASTCreateQuery
     {
-        keyword("CREATE TABLE ") + "name " + keyword("AS (SELECT ") + "*" + keyword(") ")
-            + keyword("COMMENT ") + "'hello'",
+        keyword("CREATE TABLE ") + identifier("name") + " " + keyword("AS (SELECT") + " *" + keyword(")") + " "
+            + keyword("COMMENT") + " 'hello'",
         "CREATE TABLE name AS (SELECT *) COMMENT 'hello'"
     },
 };
diff --git a/tests/integration/test_backup_restore_new/test.py b/tests/integration/test_backup_restore_new/test.py
index cac458f616d0..06560bda2b6f 100644
--- a/tests/integration/test_backup_restore_new/test.py
+++ b/tests/integration/test_backup_restore_new/test.py
@@ -885,7 +885,7 @@ def test_required_privileges():
     instance.query("CREATE USER u1")
 
     backup_name = new_backup_name()
-    expected_error = "necessary to have the grant BACKUP ON test.table"
+    expected_error = "necessary to have the grant BACKUP ON test.`table`"
     assert expected_error in instance.query_and_get_error(
         f"BACKUP TABLE test.table TO {backup_name}", user="u1"
     )
@@ -893,7 +893,7 @@ def test_required_privileges():
     instance.query("GRANT BACKUP ON test.table TO u1")
     instance.query(f"BACKUP TABLE test.table TO {backup_name}", user="u1")
 
-    expected_error = "necessary to have the grant INSERT, CREATE TABLE ON test.table"
+    expected_error = "necessary to have the grant INSERT, CREATE TABLE ON test.`table`"
     assert expected_error in instance.query_and_get_error(
         f"RESTORE TABLE test.table FROM {backup_name}", user="u1"
     )
@@ -910,7 +910,7 @@ def test_required_privileges():
 
     instance.query("DROP TABLE test.table")
 
-    expected_error = "necessary to have the grant INSERT, CREATE TABLE ON test.table"
+    expected_error = "necessary to have the grant INSERT, CREATE TABLE ON test.`table`"
     assert expected_error in instance.query_and_get_error(
         f"RESTORE ALL FROM {backup_name}", user="u1"
     )
@@ -963,7 +963,7 @@ def test_system_users():
     instance.query("GRANT r1 TO r2 WITH ADMIN OPTION")
     instance.query("GRANT r2 TO u1")
 
-    instance.query("CREATE SETTINGS PROFILE prof1 SETTINGS custom_b=2 TO u1")
+    instance.query("CREATE SETTINGS PROFILE `prof1` SETTINGS custom_b=2 TO u1")
     instance.query("CREATE ROW POLICY rowpol1 ON test.table USING x<50 TO u1")
     instance.query("CREATE QUOTA q1 TO r1")
 
@@ -984,7 +984,7 @@ def test_system_users():
 
     assert (
         instance.query("SHOW CREATE USER u1")
-        == "CREATE USER u1 IDENTIFIED WITH sha256_password SETTINGS PROFILE default, custom_a = 1
"
+        == "CREATE USER u1 IDENTIFIED WITH sha256_password SETTINGS PROFILE `default`, custom_a = 1
"
     )
     assert instance.query("SHOW GRANTS FOR u1") == TSV(
         ["GRANT SELECT ON test.* TO u1", "GRANT r2 TO u1"]
@@ -998,11 +998,11 @@ def test_system_users():
 
     assert (
         instance.query("SHOW CREATE SETTINGS PROFILE prof1")
-        == "CREATE SETTINGS PROFILE prof1 SETTINGS custom_b = 2 TO u1
"
+        == "CREATE SETTINGS PROFILE `prof1` SETTINGS custom_b = 2 TO u1
"
     )
     assert (
         instance.query("SHOW CREATE ROW POLICY rowpol1")
-        == "CREATE ROW POLICY rowpol1 ON test.table FOR SELECT USING x < 50 TO u1
"
+        == "CREATE ROW POLICY rowpol1 ON test.`table` FOR SELECT USING x < 50 TO u1
"
     )
     assert instance.query("SHOW CREATE QUOTA q1") == "CREATE QUOTA q1 TO r1
"
 
diff --git a/tests/integration/test_disk_access_storage/test.py b/tests/integration/test_disk_access_storage/test.py
index bcfc9d718a7b..a710295505e2 100644
--- a/tests/integration/test_disk_access_storage/test.py
+++ b/tests/integration/test_disk_access_storage/test.py
@@ -46,7 +46,7 @@ def test_create():
     def check():
         assert (
             instance.query("SHOW CREATE USER u1")
-            == "CREATE USER u1 SETTINGS PROFILE s1
"
+            == "CREATE USER u1 SETTINGS PROFILE `s1`
"
         )
         assert (
             instance.query("SHOW CREATE USER u2")
@@ -64,16 +64,16 @@ def check():
         assert instance.query("SHOW GRANTS FOR u2") == "GRANT rx TO u2
"
         assert (
             instance.query("SHOW CREATE ROLE rx")
-            == "CREATE ROLE rx SETTINGS PROFILE s1
"
+            == "CREATE ROLE rx SETTINGS PROFILE `s1`
"
         )
         assert instance.query("SHOW GRANTS FOR rx") == ""
         assert (
             instance.query("SHOW CREATE SETTINGS PROFILE s1")
-            == "CREATE SETTINGS PROFILE s1 SETTINGS max_memory_usage = 123456789 MIN 100000000 MAX 200000000
"
+            == "CREATE SETTINGS PROFILE `s1` SETTINGS max_memory_usage = 123456789 MIN 100000000 MAX 200000000
"
         )
         assert (
             instance.query("SHOW CREATE SETTINGS PROFILE s2")
-            == "CREATE SETTINGS PROFILE s2 SETTINGS INHERIT s1 TO u2
"
+            == "CREATE SETTINGS PROFILE `s2` SETTINGS INHERIT `s1` TO u2
"
         )
 
     check()
@@ -99,7 +99,7 @@ def test_alter():
     def check():
         assert (
             instance.query("SHOW CREATE USER u1")
-            == "CREATE USER u1 SETTINGS PROFILE s1
"
+            == "CREATE USER u1 SETTINGS PROFILE `s1`
"
         )
         assert (
             instance.query("SHOW CREATE USER u2")
@@ -112,7 +112,7 @@ def check():
         assert instance.query("SHOW GRANTS FOR u2") == "GRANT rx, ry TO u2
"
         assert (
             instance.query("SHOW CREATE ROLE rx")
-            == "CREATE ROLE rx SETTINGS PROFILE s2
"
+            == "CREATE ROLE rx SETTINGS PROFILE `s2`
"
         )
         assert instance.query("SHOW CREATE ROLE ry") == "CREATE ROLE ry
"
         assert (
@@ -124,11 +124,11 @@ def check():
         )
         assert (
             instance.query("SHOW CREATE SETTINGS PROFILE s1")
-            == "CREATE SETTINGS PROFILE s1 SETTINGS max_memory_usage = 987654321 CONST
"
+            == "CREATE SETTINGS PROFILE `s1` SETTINGS max_memory_usage = 987654321 CONST
"
         )
         assert (
             instance.query("SHOW CREATE SETTINGS PROFILE s2")
-            == "CREATE SETTINGS PROFILE s2 SETTINGS INHERIT s1 TO u2
"
+            == "CREATE SETTINGS PROFILE `s2` SETTINGS INHERIT `s1` TO u2
"
         )
 
     check()
@@ -150,7 +150,7 @@ def check():
         assert instance.query("SHOW CREATE USER u1") == "CREATE USER u1
"
         assert (
             instance.query("SHOW CREATE SETTINGS PROFILE s2")
-            == "CREATE SETTINGS PROFILE s2
"
+            == "CREATE SETTINGS PROFILE `s2`
"
         )
         assert "There is no user `u2`" in instance.query_and_get_error(
             "SHOW CREATE USER u2"
diff --git a/tests/integration/test_external_http_authenticator/test.py b/tests/integration/test_external_http_authenticator/test.py
index ca5225142f88..286d3a334c17 100644
--- a/tests/integration/test_external_http_authenticator/test.py
+++ b/tests/integration/test_external_http_authenticator/test.py
@@ -59,7 +59,7 @@ def started_cluster():
 def test_user_from_config_basic_auth_pass(started_cluster):
     assert (
         instance.query("SHOW CREATE USER good_user")
-        == "CREATE USER good_user IDENTIFIED WITH http SERVER \\'basic_server\\' SCHEME \\'BASIC\\' SETTINGS PROFILE default
"
+        == "CREATE USER good_user IDENTIFIED WITH http SERVER \\'basic_server\\' SCHEME \\'BASIC\\' SETTINGS PROFILE `default`
"
     )
     assert (
         instance.query(
diff --git a/tests/integration/test_grant_and_revoke/test.py b/tests/integration/test_grant_and_revoke/test.py
index a86a1208f490..75a59ceac394 100644
--- a/tests/integration/test_grant_and_revoke/test.py
+++ b/tests/integration/test_grant_and_revoke/test.py
@@ -77,53 +77,53 @@ def test_revoke_requires_grant_option():
     instance.query("CREATE USER B")
 
     instance.query("GRANT SELECT ON test.table TO B")
-    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.table TO B
"
+    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.`table` TO B
"
 
     expected_error = "Not enough privileges"
     assert expected_error in instance.query_and_get_error(
         "REVOKE SELECT ON test.table FROM B", user="A"
     )
-    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.table TO B
"
+    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.`table` TO B
"
 
     instance.query("GRANT SELECT ON test.table TO A")
     expected_error = "privileges have been granted, but without grant option"
     assert expected_error in instance.query_and_get_error(
         "REVOKE SELECT ON test.table FROM B", user="A"
     )
-    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.table TO B
"
+    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.`table` TO B
"
 
     instance.query("GRANT SELECT ON test.table TO A WITH GRANT OPTION")
-    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.table TO B
"
+    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.`table` TO B
"
     instance.query("REVOKE SELECT ON test.table FROM B", user="A")
     assert instance.query("SHOW GRANTS FOR B") == ""
 
     instance.query("GRANT SELECT ON test.table TO B")
-    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.table TO B
"
+    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.`table` TO B
"
     instance.query("REVOKE SELECT ON test.* FROM B", user="A")
     assert instance.query("SHOW GRANTS FOR B") == ""
 
     instance.query("GRANT SELECT ON test.table TO B")
-    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.table TO B
"
+    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.`table` TO B
"
     instance.query("REVOKE ALL ON test.* FROM B", user="A")
     assert instance.query("SHOW GRANTS FOR B") == ""
 
     instance.query("GRANT SELECT ON test.table TO B")
-    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.table TO B
"
+    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.`table` TO B
"
     instance.query("REVOKE ALL ON *.* FROM B", user="A")
     assert instance.query("SHOW GRANTS FOR B") == ""
 
     instance.query("REVOKE GRANT OPTION FOR ALL ON *.* FROM A")
     instance.query("GRANT SELECT ON test.table TO B")
-    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.table TO B
"
+    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.`table` TO B
"
     expected_error = "privileges have been granted, but without grant option"
     assert expected_error in instance.query_and_get_error(
         "REVOKE SELECT ON test.table FROM B", user="A"
     )
-    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.table TO B
"
+    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.`table` TO B
"
 
     instance.query("GRANT SELECT ON test.* TO A WITH GRANT OPTION")
     instance.query("GRANT SELECT ON test.table TO B")
-    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.table TO B
"
+    assert instance.query("SHOW GRANTS FOR B") == "GRANT SELECT ON test.`table` TO B
"
     instance.query("REVOKE SELECT ON test.table FROM B", user="A")
     assert instance.query("SHOW GRANTS FOR B") == ""
 
@@ -189,7 +189,7 @@ def test_grant_all_on_table():
         == "GRANT SHOW TABLES, SHOW COLUMNS, SHOW DICTIONARIES, SELECT, INSERT, ALTER TABLE, ALTER VIEW, CREATE TABLE, CREATE VIEW, CREATE DICTIONARY, "
         "DROP TABLE, DROP VIEW, DROP DICTIONARY, UNDROP TABLE, TRUNCATE, OPTIMIZE, BACKUP, CREATE ROW POLICY, ALTER ROW POLICY, DROP ROW POLICY, SHOW ROW POLICIES, "
         "SYSTEM MERGES, SYSTEM TTL MERGES, SYSTEM FETCHES, SYSTEM MOVES, SYSTEM PULLING REPLICATION LOG, SYSTEM CLEANUP, SYSTEM VIEWS, SYSTEM SENDS, SYSTEM REPLICATION QUEUES, SYSTEM DROP REPLICA, SYSTEM SYNC REPLICA, "
-        "SYSTEM RESTART REPLICA, SYSTEM RESTORE REPLICA, SYSTEM WAIT LOADING PARTS, SYSTEM FLUSH DISTRIBUTED, dictGet ON test.table TO B
"
+        "SYSTEM RESTART REPLICA, SYSTEM RESTORE REPLICA, SYSTEM WAIT LOADING PARTS, SYSTEM FLUSH DISTRIBUTED, dictGet ON test.`table` TO B
"
     )
     instance.query("REVOKE ALL ON test.table FROM B", user="A")
     assert instance.query("SHOW GRANTS FOR B") == ""
@@ -219,7 +219,9 @@ def test_implicit_show_grants():
     )
 
     instance.query("GRANT SELECT(x) ON test.table TO A")
-    assert instance.query("SHOW GRANTS FOR A") == "GRANT SELECT(x) ON test.table TO A
"
+    assert (
+        instance.query("SHOW GRANTS FOR A") == "GRANT SELECT(x) ON test.`table` TO A
"
+    )
     assert (
         instance.query(
             "select count() FROM system.databases WHERE name='test'", user="A"
@@ -242,7 +244,7 @@ def test_implicit_show_grants():
     )
 
     instance.query("GRANT SELECT ON test.table TO A")
-    assert instance.query("SHOW GRANTS FOR A") == "GRANT SELECT ON test.table TO A
"
+    assert instance.query("SHOW GRANTS FOR A") == "GRANT SELECT ON test.`table` TO A
"
     assert (
         instance.query(
             "select count() FROM system.databases WHERE name='test'", user="A"
@@ -395,12 +397,12 @@ def test_introspection():
         [
             "CREATE USER A",
             "CREATE USER B",
-            "CREATE USER default IDENTIFIED WITH plaintext_password SETTINGS PROFILE default",
+            "CREATE USER default IDENTIFIED WITH plaintext_password SETTINGS PROFILE `default`",
         ]
     )
 
     assert instance.query("SHOW GRANTS FOR A") == TSV(
-        ["GRANT SELECT ON test.table TO A"]
+        ["GRANT SELECT ON test.`table` TO A"]
     )
     assert instance.query("SHOW GRANTS FOR B") == TSV(
         ["GRANT CREATE ON *.* TO B WITH GRANT OPTION"]
@@ -410,40 +412,40 @@ def test_introspection():
     )
     assert instance.query("SHOW GRANTS FOR A,B") == TSV(
         [
-            "GRANT SELECT ON test.table TO A",
+            "GRANT SELECT ON test.`table` TO A",
             "GRANT CREATE ON *.* TO B WITH GRANT OPTION",
         ]
     )
     assert instance.query("SHOW GRANTS FOR B,A") == TSV(
         [
-            "GRANT SELECT ON test.table TO A",
+            "GRANT SELECT ON test.`table` TO A",
             "GRANT CREATE ON *.* TO B WITH GRANT OPTION",
         ]
     )
     assert instance.query("SHOW GRANTS FOR ALL") == TSV(
         [
-            "GRANT SELECT ON test.table TO A",
+            "GRANT SELECT ON test.`table` TO A",
             "GRANT CREATE ON *.* TO B WITH GRANT OPTION",
             "GRANT ALL ON *.* TO default WITH GRANT OPTION",
         ]
     )
 
     assert instance.query("SHOW GRANTS", user="A") == TSV(
-        ["GRANT SELECT ON test.table TO A"]
+        ["GRANT SELECT ON test.`table` TO A"]
     )
     assert instance.query("SHOW GRANTS", user="B") == TSV(
         ["GRANT CREATE ON *.* TO B WITH GRANT OPTION"]
     )
 
     assert instance.query("SHOW GRANTS FOR ALL", user="A") == TSV(
-        ["GRANT SELECT ON test.table TO A"]
+        ["GRANT SELECT ON test.`table` TO A"]
     )
     assert instance.query("SHOW GRANTS FOR ALL", user="B") == TSV(
         ["GRANT CREATE ON *.* TO B WITH GRANT OPTION"]
     )
     assert instance.query("SHOW GRANTS FOR ALL") == TSV(
         [
-            "GRANT SELECT ON test.table TO A",
+            "GRANT SELECT ON test.`table` TO A",
             "GRANT CREATE ON *.* TO B WITH GRANT OPTION",
             "GRANT ALL ON *.* TO default WITH GRANT OPTION",
         ]
@@ -455,10 +457,10 @@ def test_introspection():
     expected_access1 = (
         "CREATE USER A
"
         "CREATE USER B
"
-        "CREATE USER default IDENTIFIED WITH plaintext_password SETTINGS PROFILE default"
+        "CREATE USER default IDENTIFIED WITH plaintext_password SETTINGS PROFILE `default`"
     )
     expected_access2 = (
-        "GRANT SELECT ON test.table TO A
"
+        "GRANT SELECT ON test.`table` TO A
"
         "GRANT CREATE ON *.* TO B WITH GRANT OPTION
"
         "GRANT ALL ON *.* TO default WITH GRANT OPTION
"
     )
@@ -513,10 +515,10 @@ def test_current_database():
     instance.query("GRANT SELECT ON table TO A", database="test")
 
     assert instance.query("SHOW GRANTS FOR A") == TSV(
-        ["GRANT SELECT ON test.table TO A"]
+        ["GRANT SELECT ON test.`table` TO A"]
     )
     assert instance.query("SHOW GRANTS FOR A", database="test") == TSV(
-        ["GRANT SELECT ON test.table TO A"]
+        ["GRANT SELECT ON test.`table` TO A"]
     )
 
     assert instance.query("SELECT * FROM test.table", user="A") == "1\t5
2\t10
"
@@ -537,12 +539,12 @@ def test_grant_with_replace_option():
     instance.query("CREATE USER A")
     instance.query("GRANT SELECT ON test.table TO A")
     assert instance.query("SHOW GRANTS FOR A") == TSV(
-        ["GRANT SELECT ON test.table TO A"]
+        ["GRANT SELECT ON test.`table` TO A"]
     )
 
     instance.query("GRANT INSERT ON test.table TO A WITH REPLACE OPTION")
     assert instance.query("SHOW GRANTS FOR A") == TSV(
-        ["GRANT INSERT ON test.table TO A"]
+        ["GRANT INSERT ON test.`table` TO A"]
     )
 
     instance.query("GRANT NONE ON *.* TO A WITH REPLACE OPTION")
@@ -552,41 +554,41 @@ def test_grant_with_replace_option():
     instance.query("GRANT SELECT ON test.table TO B")
     assert instance.query("SHOW GRANTS FOR A") == TSV([])
     assert instance.query("SHOW GRANTS FOR B") == TSV(
-        ["GRANT SELECT ON test.table TO B"]
+        ["GRANT SELECT ON test.`table` TO B"]
     )
 
     expected_error = (
-        "it's necessary to have the grant INSERT ON test.table WITH GRANT OPTION"
+        "it's necessary to have the grant INSERT ON test.`table` WITH GRANT OPTION"
     )
     assert expected_error in instance.query_and_get_error(
-        "GRANT INSERT ON test.table TO B WITH REPLACE OPTION", user="A"
+        "GRANT INSERT ON test.`table` TO B WITH REPLACE OPTION", user="A"
     )
     assert instance.query("SHOW GRANTS FOR A") == TSV([])
     assert instance.query("SHOW GRANTS FOR B") == TSV(
-        ["GRANT SELECT ON test.table TO B"]
+        ["GRANT SELECT ON test.`table` TO B"]
     )
 
     instance.query("GRANT INSERT ON test.table TO A WITH GRANT OPTION")
     expected_error = (
-        "it's necessary to have the grant SELECT ON test.table WITH GRANT OPTION"
+        "it's necessary to have the grant SELECT ON test.`table` WITH GRANT OPTION"
     )
     assert expected_error in instance.query_and_get_error(
-        "GRANT INSERT ON test.table TO B WITH REPLACE OPTION", user="A"
+        "GRANT INSERT ON test.`table` TO B WITH REPLACE OPTION", user="A"
     )
     assert instance.query("SHOW GRANTS FOR A") == TSV(
-        ["GRANT INSERT ON test.table TO A WITH GRANT OPTION"]
+        ["GRANT INSERT ON test.`table` TO A WITH GRANT OPTION"]
     )
     assert instance.query("SHOW GRANTS FOR B") == TSV(
-        ["GRANT SELECT ON test.table TO B"]
+        ["GRANT SELECT ON test.`table` TO B"]
     )
 
-    instance.query("GRANT SELECT ON test.table TO A WITH GRANT OPTION")
-    instance.query("GRANT INSERT ON test.table TO B WITH REPLACE OPTION", user="A")
+    instance.query("GRANT SELECT ON test.`table` TO A WITH GRANT OPTION")
+    instance.query("GRANT INSERT ON test.`table` TO B WITH REPLACE OPTION", user="A")
     assert instance.query("SHOW GRANTS FOR A") == TSV(
-        ["GRANT SELECT, INSERT ON test.table TO A WITH GRANT OPTION"]
+        ["GRANT SELECT, INSERT ON test.`table` TO A WITH GRANT OPTION"]
     )
     assert instance.query("SHOW GRANTS FOR B") == TSV(
-        ["GRANT INSERT ON test.table TO B"]
+        ["GRANT INSERT ON test.`table` TO B"]
     )
 
 
@@ -632,7 +634,7 @@ def test_grant_current_grants_with_partial_revoke():
             "GRANT CREATE TABLE ON *.* TO A",
             "GRANT SELECT ON *.* TO A WITH GRANT OPTION",
             "REVOKE SELECT, CREATE TABLE ON test.* FROM A",
-            "GRANT SELECT, CREATE TABLE ON test.table TO A WITH GRANT OPTION",
+            "GRANT SELECT, CREATE TABLE ON test.`table` TO A WITH GRANT OPTION",
             "GRANT SELECT ON test.table2 TO A",
         ]
     )
@@ -643,7 +645,7 @@ def test_grant_current_grants_with_partial_revoke():
         [
             "GRANT SELECT ON *.* TO B",
             "REVOKE SELECT ON test.* FROM B",
-            "GRANT SELECT, CREATE TABLE ON test.table TO B",
+            "GRANT SELECT, CREATE TABLE ON test.`table` TO B",
         ]
     )
 
@@ -654,7 +656,7 @@ def test_grant_current_grants_with_partial_revoke():
         [
             "GRANT SELECT ON *.* TO B WITH GRANT OPTION",
             "REVOKE SELECT ON test.* FROM B",
-            "GRANT SELECT, CREATE TABLE ON test.table TO B WITH GRANT OPTION",
+            "GRANT SELECT, CREATE TABLE ON test.`table` TO B WITH GRANT OPTION",
         ]
     )
 
@@ -665,7 +667,7 @@ def test_grant_current_grants_with_partial_revoke():
     assert instance.query("SHOW GRANTS FOR C") == TSV(
         [
             "GRANT SELECT ON *.* TO C",
-            "GRANT CREATE TABLE ON test.table TO C",
+            "GRANT CREATE TABLE ON test.`table` TO C",
         ]
     )
 
@@ -674,7 +676,7 @@ def test_grant_current_grants_with_partial_revoke():
     instance.query("GRANT CURRENT GRANTS ON test.* TO B WITH GRANT OPTION", user="A")
     assert instance.query("SHOW GRANTS FOR B") == TSV(
         [
-            "GRANT SELECT, CREATE TABLE ON test.table TO B WITH GRANT OPTION",
+            "GRANT SELECT, CREATE TABLE ON test.`table` TO B WITH GRANT OPTION",
         ]
     )
 
@@ -693,7 +695,7 @@ def test_current_grants_override():
     instance.query("CREATE USER B")
     instance.query("GRANT SELECT ON test.table TO B")
     assert instance.query("SHOW GRANTS FOR B") == TSV(
-        ["GRANT SELECT ON test.table TO B"]
+        ["GRANT SELECT ON test.`table` TO B"]
     )
 
     instance.query("GRANT CURRENT GRANTS ON *.* TO B", user="A")
@@ -701,7 +703,7 @@ def test_current_grants_override():
         [
             "GRANT SELECT ON *.* TO B",
             "REVOKE SELECT ON test.* FROM B",
-            "GRANT SELECT ON test.table TO B",
+            "GRANT SELECT ON test.`table` TO B",
         ]
     )
 
@@ -709,7 +711,7 @@ def test_current_grants_override():
     instance.query("CREATE USER B")
     instance.query("GRANT SELECT ON test.table TO B")
     assert instance.query("SHOW GRANTS FOR B") == TSV(
-        ["GRANT SELECT ON test.table TO B"]
+        ["GRANT SELECT ON test.`table` TO B"]
     )
 
     instance.query("GRANT CURRENT GRANTS ON *.* TO B WITH REPLACE OPTION", user="A")
diff --git a/tests/integration/test_mask_sensitive_info/test.py b/tests/integration/test_mask_sensitive_info/test.py
index 80785c6c01f7..251da7e4e09c 100644
--- a/tests/integration/test_mask_sensitive_info/test.py
+++ b/tests/integration/test_mask_sensitive_info/test.py
@@ -249,10 +249,10 @@ def make_test_case(i):
             "CREATE TABLE table5 (x int) ENGINE = S3('http://minio1:9001/root/data/test3.csv.gz', 'CSV', 'gzip')",
             "CREATE TABLE table6 (`x` int) ENGINE = S3('http://minio1:9001/root/data/test4.csv', 'minio', '[HIDDEN]', 'CSV')",
             "CREATE TABLE table7 (`x` int) ENGINE = S3('http://minio1:9001/root/data/test5.csv.gz', 'minio', '[HIDDEN]', 'CSV', 'gzip')",
-            "CREATE TABLE table8 (`x` int) ENGINE = MySQL(named_collection_1, host = 'mysql80', port = 3306, database = 'mysql_db', table = 'mysql_table', user = 'mysql_user', password = '[HIDDEN]')",
-            "CREATE TABLE table9 (`x` int) ENGINE = MySQL(named_collection_2, database = 'mysql_db', host = 'mysql80', port = 3306, password = '[HIDDEN]', table = 'mysql_table', user = 'mysql_user')",
+            "CREATE TABLE table8 (`x` int) ENGINE = MySQL(named_collection_1, host = 'mysql80', port = 3306, database = 'mysql_db', `table` = 'mysql_table', user = 'mysql_user', password = '[HIDDEN]')",
+            "CREATE TABLE table9 (`x` int) ENGINE = MySQL(named_collection_2, database = 'mysql_db', host = 'mysql80', port = 3306, password = '[HIDDEN]', `table` = 'mysql_table', user = 'mysql_user')",
             "CREATE TABLE table10 (x int) ENGINE = MySQL(named_collection_3, database = 'mysql_db', host = 'mysql80', port = 3306, table = 'mysql_table')",
-            "CREATE TABLE table11 (`x` int) ENGINE = PostgreSQL(named_collection_4, host = 'postgres1', port = 5432, database = 'postgres_db', table = 'postgres_table', user = 'postgres_user', password = '[HIDDEN]')",
+            "CREATE TABLE table11 (`x` int) ENGINE = PostgreSQL(named_collection_4, host = 'postgres1', port = 5432, database = 'postgres_db', `table` = 'postgres_table', user = 'postgres_user', password = '[HIDDEN]')",
             "CREATE TABLE table12 (`x` int) ENGINE = MongoDB(named_collection_5, host = 'mongo1', port = 5432, db = 'mongo_db', collection = 'mongo_col', user = 'mongo_user', password = '[HIDDEN]'",
             "CREATE TABLE table13 (`x` int) ENGINE = S3(named_collection_6, url = 'http://minio1:9001/root/data/test8.csv', access_key_id = 'minio', secret_access_key = '[HIDDEN]', format = 'CSV')",
             "CREATE TABLE table14 (x int) ENGINE = S3('http://minio1:9001/root/data/test9.csv.gz', 'NOSIGN', 'CSV', 'gzip')",
@@ -429,11 +429,11 @@ def make_test_case(i):
             "CREATE TABLE tablefunc22 (`x` int) AS remote('127.{2..11}', numbers(10), 'remote_user', '[HIDDEN]', rand())",
             "CREATE TABLE tablefunc23 (`x` int) AS remoteSecure('127.{2..11}', 'default', 'remote_table', 'remote_user', '[HIDDEN]')",
             "CREATE TABLE tablefunc24 (x int) AS remoteSecure('127.{2..11}', 'default', 'remote_table', 'remote_user', rand())",
-            "CREATE TABLE tablefunc25 (`x` int) AS mysql(named_collection_1, host = 'mysql80', port = 3306, database = 'mysql_db', table = 'mysql_table', user = 'mysql_user', password = '[HIDDEN]')",
-            "CREATE TABLE tablefunc26 (`x` int) AS postgresql(named_collection_2, password = '[HIDDEN]', host = 'postgres1', port = 5432, database = 'postgres_db', table = 'postgres_table', user = 'postgres_user')",
+            "CREATE TABLE tablefunc25 (`x` int) AS mysql(named_collection_1, host = 'mysql80', port = 3306, database = 'mysql_db', `table` = 'mysql_table', user = 'mysql_user', password = '[HIDDEN]')",
+            "CREATE TABLE tablefunc26 (`x` int) AS postgresql(named_collection_2, password = '[HIDDEN]', host = 'postgres1', port = 5432, database = 'postgres_db', `table` = 'postgres_table', user = 'postgres_user')",
             "CREATE TABLE tablefunc27 (`x` int) AS s3(named_collection_2, url = 'http://minio1:9001/root/data/test4.csv', access_key_id = 'minio', secret_access_key = '[HIDDEN]')",
-            "CREATE TABLE tablefunc28 (`x` int) AS remote(named_collection_6, addresses_expr = '127.{2..11}', database = 'default', table = 'remote_table', user = 'remote_user', password = '[HIDDEN]', sharding_key = rand())",
-            "CREATE TABLE tablefunc29 (`x` int) AS remoteSecure(named_collection_6, addresses_expr = '127.{2..11}', database = 'default', table = 'remote_table', user = 'remote_user', password = '[HIDDEN]')",
+            "CREATE TABLE tablefunc28 (`x` int) AS remote(named_collection_6, addresses_expr = '127.{2..11}', database = 'default', `table` = 'remote_table', user = 'remote_user', password = '[HIDDEN]', sharding_key = rand())",
+            "CREATE TABLE tablefunc29 (`x` int) AS remoteSecure(named_collection_6, addresses_expr = '127.{2..11}', database = 'default', `table` = 'remote_table', user = 'remote_user', password = '[HIDDEN]')",
             "CREATE TABLE tablefunc30 (x int) AS s3('http://minio1:9001/root/data/test9.csv.gz', 'NOSIGN', 'CSV')",
             "CREATE TABLE tablefunc31 (`x` int) AS s3('http://minio1:9001/root/data/test10.csv.gz', 'minio', '[HIDDEN]')",
             "CREATE TABLE tablefunc32 (`x` int) AS deltaLake('http://minio1:9001/root/data/test11.csv.gz', 'minio', '[HIDDEN]')",
diff --git a/tests/integration/test_mysql57_database_engine/test.py b/tests/integration/test_mysql57_database_engine/test.py
index a5a13a88b1b9..26db6637bc66 100644
--- a/tests/integration/test_mysql57_database_engine/test.py
+++ b/tests/integration/test_mysql57_database_engine/test.py
@@ -964,7 +964,7 @@ def test_predefined_connection_configuration(started_cluster):
         result = clickhouse_node.query("show create table test_database.test_table")
         assert (
             result.strip()
-            == "CREATE TABLE test_database.test_table\
(\
    `id` Int32\
)\
ENGINE = MySQL(mysql1, table = \\'test_table\\')"
+            == "CREATE TABLE test_database.test_table\
(\
    `id` Int32\
)\
ENGINE = MySQL(mysql1, `table` = \\'test_table\\')"
         )
 
         clickhouse_node.query("DROP DATABASE test_database")
diff --git a/tests/integration/test_mysql_database_engine/test.py b/tests/integration/test_mysql_database_engine/test.py
index 64a386791213..44c23374b3ac 100644
--- a/tests/integration/test_mysql_database_engine/test.py
+++ b/tests/integration/test_mysql_database_engine/test.py
@@ -943,7 +943,7 @@ def test_predefined_connection_configuration(started_cluster):
         result = clickhouse_node.query("show create table test_database.test_table")
         assert (
             result.strip()
-            == "CREATE TABLE test_database.test_table\
(\
    `id` Int32\
)\
ENGINE = MySQL(mysql1, table = \\'test_table\\')"
+            == "CREATE TABLE test_database.test_table\
(\
    `id` Int32\
)\
ENGINE = MySQL(mysql1, `table` = \\'test_table\\')"
         )
 
         clickhouse_node.query("DROP DATABASE test_database")
diff --git a/tests/integration/test_postgresql_database_engine/test.py b/tests/integration/test_postgresql_database_engine/test.py
index ee6c19707f3c..c44fa176599f 100644
--- a/tests/integration/test_postgresql_database_engine/test.py
+++ b/tests/integration/test_postgresql_database_engine/test.py
@@ -287,7 +287,7 @@ def test_predefined_connection_configuration(started_cluster):
     )
     print(f"kssenii: {result}")
     assert result.strip().endswith(
-        "ENGINE = PostgreSQL(postgres1, table = \\'test_table\\')"
+        "ENGINE = PostgreSQL(postgres1, `table` = \\'test_table\\')"
     )
 
     node1.query(
diff --git a/tests/integration/test_role/test.py b/tests/integration/test_role/test.py
index 0e1bbea9cea0..b3b18dc82716 100644
--- a/tests/integration/test_role/test.py
+++ b/tests/integration/test_role/test.py
@@ -246,7 +246,7 @@ def test_introspection():
     )
 
     assert instance.query("SHOW GRANTS FOR A") == TSV(
-        ["GRANT SELECT ON test.table TO A", "GRANT R1 TO A"]
+        ["GRANT SELECT ON test.`table` TO A", "GRANT R1 TO A"]
     )
     assert instance.query("SHOW GRANTS FOR B") == TSV(
         [
@@ -256,11 +256,14 @@ def test_introspection():
     )
     assert instance.query("SHOW GRANTS FOR R1") == ""
     assert instance.query("SHOW GRANTS FOR R2") == TSV(
-        ["GRANT SELECT ON test.table TO R2", "REVOKE SELECT(x) ON test.table FROM R2"]
+        [
+            "GRANT SELECT ON test.`table` TO R2",
+            "REVOKE SELECT(x) ON test.`table` FROM R2",
+        ]
     )
 
     assert instance.query("SHOW GRANTS", user="A") == TSV(
-        ["GRANT SELECT ON test.table TO A", "GRANT R1 TO A"]
+        ["GRANT SELECT ON test.`table` TO A", "GRANT R1 TO A"]
     )
 
     assert instance.query("SHOW GRANTS FOR R1", user="A") == TSV([])
diff --git a/tests/integration/test_row_policy/test.py b/tests/integration/test_row_policy/test.py
index d88a8f2a2437..98653bf6106a 100644
--- a/tests/integration/test_row_policy/test.py
+++ b/tests/integration/test_row_policy/test.py
@@ -803,9 +803,9 @@ def test_tags_with_db_and_table_names():
     assert node.query("SHOW CREATE POLICIES default") == TSV(
         [
             "CREATE ROW POLICY default ON mydb.`.filtered_table4` FOR SELECT USING c = 2 TO default",
+            "CREATE ROW POLICY default ON mydb.`table` FOR SELECT USING a = 0 TO default",
             "CREATE ROW POLICY default ON mydb.filtered_table2 FOR SELECT USING c > (d + 5) TO default",
             "CREATE ROW POLICY default ON mydb.filtered_table3 FOR SELECT USING c = 0 TO default",
-            "CREATE ROW POLICY default ON mydb.table FOR SELECT USING a = 0 TO default",
         ]
     )
 
diff --git a/tests/integration/test_settings_profile/test.py b/tests/integration/test_settings_profile/test.py
index 70740104d631..61237af08c57 100644
--- a/tests/integration/test_settings_profile/test.py
+++ b/tests/integration/test_settings_profile/test.py
@@ -68,7 +68,7 @@ def test_smoke():
     )
     assert (
         instance.query("SHOW CREATE SETTINGS PROFILE xyz")
-        == "CREATE SETTINGS PROFILE xyz SETTINGS max_memory_usage = 100000001 MIN 90000000 MAX 110000000 TO robin
"
+        == "CREATE SETTINGS PROFILE `xyz` SETTINGS max_memory_usage = 100000001 MIN 90000000 MAX 110000000 TO robin
"
     )
     assert (
         instance.query(
@@ -108,7 +108,7 @@ def test_smoke():
     instance.query("ALTER SETTINGS PROFILE xyz TO NONE")
     assert (
         instance.query("SHOW CREATE SETTINGS PROFILE xyz")
-        == "CREATE SETTINGS PROFILE xyz SETTINGS max_memory_usage = 100000001 MIN 90000000 MAX 110000000
"
+        == "CREATE SETTINGS PROFILE `xyz` SETTINGS max_memory_usage = 100000001 MIN 90000000 MAX 110000000
"
     )
     assert (
         instance.query(
@@ -128,7 +128,7 @@ def test_smoke():
     instance.query("ALTER USER robin SETTINGS PROFILE xyz")
     assert (
         instance.query("SHOW CREATE USER robin")
-        == "CREATE USER robin SETTINGS PROFILE xyz
"
+        == "CREATE USER robin SETTINGS PROFILE `xyz`
"
     )
     assert (
         instance.query(
@@ -174,11 +174,11 @@ def test_settings_from_granted_role():
     instance.query("GRANT worker TO robin")
     assert (
         instance.query("SHOW CREATE SETTINGS PROFILE xyz")
-        == "CREATE SETTINGS PROFILE xyz SETTINGS max_memory_usage = 100000001 MAX 110000000, max_ast_depth = 2000
"
+        == "CREATE SETTINGS PROFILE `xyz` SETTINGS max_memory_usage = 100000001 MAX 110000000, max_ast_depth = 2000
"
     )
     assert (
         instance.query("SHOW CREATE ROLE worker")
-        == "CREATE ROLE worker SETTINGS PROFILE xyz
"
+        == "CREATE ROLE worker SETTINGS PROFILE `xyz`
"
     )
     assert (
         instance.query(
@@ -260,7 +260,7 @@ def test_settings_from_granted_role():
     instance.query("ALTER SETTINGS PROFILE xyz TO worker")
     assert (
         instance.query("SHOW CREATE SETTINGS PROFILE xyz")
-        == "CREATE SETTINGS PROFILE xyz SETTINGS max_memory_usage = 100000001 MAX 110000000, max_ast_depth = 2000 TO worker
"
+        == "CREATE SETTINGS PROFILE `xyz` SETTINGS max_memory_usage = 100000001 MAX 110000000, max_ast_depth = 2000 TO worker
"
     )
     assert (
         instance.query(
@@ -282,7 +282,7 @@ def test_settings_from_granted_role():
     instance.query("ALTER SETTINGS PROFILE xyz TO NONE")
     assert (
         instance.query("SHOW CREATE SETTINGS PROFILE xyz")
-        == "CREATE SETTINGS PROFILE xyz SETTINGS max_memory_usage = 100000001 MAX 110000000, max_ast_depth = 2000
"
+        == "CREATE SETTINGS PROFILE `xyz` SETTINGS max_memory_usage = 100000001 MAX 110000000, max_ast_depth = 2000
"
     )
     assert (
         instance.query(
@@ -304,11 +304,11 @@ def test_inheritance():
     instance.query("CREATE SETTINGS PROFILE alpha SETTINGS PROFILE xyz TO robin")
     assert (
         instance.query("SHOW CREATE SETTINGS PROFILE xyz")
-        == "CREATE SETTINGS PROFILE xyz SETTINGS max_memory_usage = 100000002 CONST
"
+        == "CREATE SETTINGS PROFILE `xyz` SETTINGS max_memory_usage = 100000002 CONST
"
     )
     assert (
         instance.query("SHOW CREATE SETTINGS PROFILE alpha")
-        == "CREATE SETTINGS PROFILE alpha SETTINGS INHERIT xyz TO robin
"
+        == "CREATE SETTINGS PROFILE `alpha` SETTINGS INHERIT `xyz` TO robin
"
     )
     assert (
         instance.query(
@@ -453,11 +453,13 @@ def test_show_profiles():
     assert instance.query("SHOW SETTINGS PROFILES") == "default
readonly
xyz
"
     assert instance.query("SHOW PROFILES") == "default
readonly
xyz
"
 
-    assert instance.query("SHOW CREATE PROFILE xyz") == "CREATE SETTINGS PROFILE xyz
"
+    assert (
+        instance.query("SHOW CREATE PROFILE xyz") == "CREATE SETTINGS PROFILE `xyz`
"
+    )
 
     query_possible_response = [
-        "CREATE SETTINGS PROFILE default
",
-        "CREATE SETTINGS PROFILE default SETTINGS allow_experimental_analyzer = true
",
+        "CREATE SETTINGS PROFILE `default`
",
+        "CREATE SETTINGS PROFILE `default` SETTINGS allow_experimental_analyzer = true
",
     ]
     assert (
         instance.query("SHOW CREATE SETTINGS PROFILE default")
@@ -465,24 +467,24 @@ def test_show_profiles():
     )
 
     query_possible_response = [
-        "CREATE SETTINGS PROFILE default
"
-        "CREATE SETTINGS PROFILE readonly SETTINGS readonly = 1
"
-        "CREATE SETTINGS PROFILE xyz
",
-        "CREATE SETTINGS PROFILE default SETTINGS allow_experimental_analyzer = true
"
-        "CREATE SETTINGS PROFILE readonly SETTINGS readonly = 1
"
-        "CREATE SETTINGS PROFILE xyz
",
+        "CREATE SETTINGS PROFILE `default`
"
+        "CREATE SETTINGS PROFILE `readonly` SETTINGS readonly = 1
"
+        "CREATE SETTINGS PROFILE `xyz`
",
+        "CREATE SETTINGS PROFILE `default` SETTINGS allow_experimental_analyzer = true
"
+        "CREATE SETTINGS PROFILE `readonly` SETTINGS readonly = 1
"
+        "CREATE SETTINGS PROFILE `xyz`
",
     ]
     assert instance.query("SHOW CREATE PROFILES") in query_possible_response
 
     expected_access = (
-        "CREATE SETTINGS PROFILE default
"
-        "CREATE SETTINGS PROFILE readonly SETTINGS readonly = 1
"
-        "CREATE SETTINGS PROFILE xyz
"
+        "CREATE SETTINGS PROFILE `default`
"
+        "CREATE SETTINGS PROFILE `readonly` SETTINGS readonly = 1
"
+        "CREATE SETTINGS PROFILE `xyz`
"
     )
     expected_access_analyzer = (
-        "CREATE SETTINGS PROFILE default SETTINGS allow_experimental_analyzer = true
"
-        "CREATE SETTINGS PROFILE readonly SETTINGS readonly = 1
"
-        "CREATE SETTINGS PROFILE xyz
"
+        "CREATE SETTINGS PROFILE `default` SETTINGS allow_experimental_analyzer = true
"
+        "CREATE SETTINGS PROFILE `readonly` SETTINGS readonly = 1
"
+        "CREATE SETTINGS PROFILE `xyz`
"
     )
 
     query_response = instance.query("SHOW ACCESS")
diff --git a/tests/integration/test_storage_mysql/test.py b/tests/integration/test_storage_mysql/test.py
index 9818a8183d78..b131d8fe51c6 100644
--- a/tests/integration/test_storage_mysql/test.py
+++ b/tests/integration/test_storage_mysql/test.py
@@ -655,7 +655,7 @@ def test_predefined_connection_configuration(started_cluster):
     assert node1.query(f"SELECT count() FROM test_table").rstrip() == "100"
 
     assert "Connection pool cannot have zero size" in node1.query_and_get_error(
-        "SELECT count() FROM mysql(mysql1, table='test_table', connection_pool_size=0)"
+        "SELECT count() FROM mysql(mysql1, `table`='test_table', connection_pool_size=0)"
     )
     assert "Connection pool cannot have zero size" in node1.query_and_get_error(
         "SELECT count() FROM mysql(mysql4)"
diff --git a/tests/queries/0_stateless/01073_grant_and_revoke.reference b/tests/queries/0_stateless/01073_grant_and_revoke.reference
index 449f21e896a2..b91820914e6c 100644
--- a/tests/queries/0_stateless/01073_grant_and_revoke.reference
+++ b/tests/queries/0_stateless/01073_grant_and_revoke.reference
@@ -4,12 +4,12 @@ B
 C
 GRANT INSERT, ALTER DELETE ON *.* TO test_user_01073
 GRANT SELECT ON db1.* TO test_user_01073
-GRANT SELECT ON db2.table TO test_user_01073
-GRANT SELECT(col1) ON db3.table TO test_user_01073
-GRANT SELECT(col1, col2) ON db4.table TO test_user_01073
+GRANT SELECT ON db2.`table` TO test_user_01073
+GRANT SELECT(col1) ON db3.`table` TO test_user_01073
+GRANT SELECT(col1, col2) ON db4.`table` TO test_user_01073
 D
 GRANT ALTER DELETE ON *.* TO test_user_01073
-GRANT SELECT(col1) ON db4.table TO test_user_01073
+GRANT SELECT(col1) ON db4.`table` TO test_user_01073
 E
 GRANT SELECT ON db1.* TO test_role_01073
 REVOKE SELECT(c1, c2, c3, c4, c5) ON db1.table1 FROM test_role_01073
diff --git a/tests/queries/0_stateless/01074_partial_revokes.reference b/tests/queries/0_stateless/01074_partial_revokes.reference
index 43e44f3c9410..9ffa2878ad4e 100644
--- a/tests/queries/0_stateless/01074_partial_revokes.reference
+++ b/tests/queries/0_stateless/01074_partial_revokes.reference
@@ -4,21 +4,21 @@ REVOKE SELECT ON db.* FROM test_user_01074
 --cleanup
 --simple 2
 GRANT SELECT ON db.* TO test_user_01074
-REVOKE SELECT ON db.table FROM test_user_01074
+REVOKE SELECT ON db.`table` FROM test_user_01074
 --cleanup
 --simple 3
-GRANT SELECT ON db.table TO test_user_01074
-REVOKE SELECT(col1) ON db.table FROM test_user_01074
+GRANT SELECT ON db.`table` TO test_user_01074
+REVOKE SELECT(col1) ON db.`table` FROM test_user_01074
 --cleanup
 --complex 1
 GRANT SELECT ON *.* TO test_user_01074
-REVOKE SELECT(col1, col2) ON db.table FROM test_user_01074
+REVOKE SELECT(col1, col2) ON db.`table` FROM test_user_01074
 --cleanup
 --complex 2
 GRANT SELECT ON *.* TO test_user_01074
 REVOKE SELECT ON db.* FROM test_user_01074
-GRANT SELECT ON db.table TO test_user_01074
-REVOKE SELECT(col1) ON db.table FROM test_user_01074
+GRANT SELECT ON db.`table` TO test_user_01074
+REVOKE SELECT(col1) ON db.`table` FROM test_user_01074
 ┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┓
 ┃ [1muser_name      [0m ┃ [1mrole_name[0m ┃ [1maccess_type[0m ┃ [1mdatabase[0m ┃ [1mtable[0m ┃ [1mcolumn[0m ┃ [1mis_partial_revoke[0m ┃ [1mgrant_option[0m ┃
 ┡━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━┩
@@ -40,7 +40,7 @@ GRANT SELECT ON *.* TO test_user_01074
 --cleanup
 --grant option 1
 GRANT SELECT ON *.* TO test_user_01074 WITH GRANT OPTION
-REVOKE GRANT OPTION FOR SELECT(col1) ON db.table FROM test_user_01074
+REVOKE GRANT OPTION FOR SELECT(col1) ON db.`table` FROM test_user_01074
 ┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━━━┳━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┓
 ┃ [1muser_name      [0m ┃ [1mrole_name[0m ┃ [1maccess_type[0m ┃ [1mdatabase[0m ┃ [1mtable[0m ┃ [1mcolumn[0m ┃ [1mis_partial_revoke[0m ┃ [1mgrant_option[0m ┃
 ┡━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━━━╇━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━┩
@@ -51,7 +51,7 @@ REVOKE GRANT OPTION FOR SELECT(col1) ON db.table FROM test_user_01074
 --cleanup
 --grant option 2
 GRANT SELECT ON *.* TO test_user_01074 WITH GRANT OPTION
-REVOKE SELECT(col1) ON db.table FROM test_user_01074
+REVOKE SELECT(col1) ON db.`table` FROM test_user_01074
 --cleanup
 --grant option 3
 GRANT SELECT ON *.* TO test_user_01074
diff --git a/tests/queries/0_stateless/01119_wierd_user_names.reference b/tests/queries/0_stateless/01119_weird_user_names.reference
similarity index 100%
rename from tests/queries/0_stateless/01119_wierd_user_names.reference
rename to tests/queries/0_stateless/01119_weird_user_names.reference
diff --git a/tests/queries/0_stateless/01119_wierd_user_names.sql b/tests/queries/0_stateless/01119_weird_user_names.sql
similarity index 89%
rename from tests/queries/0_stateless/01119_wierd_user_names.sql
rename to tests/queries/0_stateless/01119_weird_user_names.sql
index 7a28016f4f3b..0d6f02786b0d 100644
--- a/tests/queries/0_stateless/01119_wierd_user_names.sql
+++ b/tests/queries/0_stateless/01119_weird_user_names.sql
@@ -13,10 +13,10 @@ create user "       ";
 create user '   spaces';
 create user 'spaces    ';
 create user ` INTERSERVER SECRET `;  -- { serverError BAD_ARGUMENTS }
-create user '';  -- { serverError BAD_ARGUMENTS }
+create user '';  -- { clientError SYNTAX_ERROR }
 create user 'test 01119';
 alter user `test 01119` rename to " spaces ";
-alter user " spaces " rename to '';  -- { serverError BAD_ARGUMENTS }
+alter user " spaces " rename to '';  -- { clientError SYNTAX_ERROR }
 alter user " spaces " rename to " INTERSERVER SECRET ";  -- { serverError BAD_ARGUMENTS }
 create user "Вася Пупкин";
 create user "无名氏 ";
diff --git a/tests/queries/0_stateless/01278_format_multiple_queries.reference b/tests/queries/0_stateless/01278_format_multiple_queries.reference
index 001b10b09907..9e3ae2250b3d 100644
--- a/tests/queries/0_stateless/01278_format_multiple_queries.reference
+++ b/tests/queries/0_stateless/01278_format_multiple_queries.reference
@@ -1,7 +1,7 @@
 SELECT
     a,
     b AS x
-FROM table AS t
+FROM `table` AS t
 INNER JOIN table2 AS t2 ON t.id = t2.t_id
 WHERE 1 = 1
 ;
diff --git a/tests/queries/0_stateless/01292_create_user.reference b/tests/queries/0_stateless/01292_create_user.reference
index b7c30b304bf9..d5841a74a2cb 100644
--- a/tests/queries/0_stateless/01292_create_user.reference
+++ b/tests/queries/0_stateless/01292_create_user.reference
@@ -56,14 +56,14 @@ CREATE USER u1_01292 HOST LOCAL
 CREATE USER `u2_01292@%.myhost.com`
 -- settings
 CREATE USER u1_01292
-CREATE USER u2_01292 SETTINGS PROFILE default
+CREATE USER u2_01292 SETTINGS PROFILE `default`
 CREATE USER u3_01292 SETTINGS max_memory_usage = 5000000
 CREATE USER u4_01292 SETTINGS max_memory_usage MIN 5000000
 CREATE USER u5_01292 SETTINGS max_memory_usage MAX 5000000
 CREATE USER u6_01292 SETTINGS max_memory_usage CONST
 CREATE USER u7_01292 SETTINGS max_memory_usage WRITABLE
 CREATE USER u8_01292 SETTINGS max_memory_usage = 5000000 MIN 4000000 MAX 6000000 CONST
-CREATE USER u9_01292 SETTINGS PROFILE default, max_memory_usage = 5000000 WRITABLE
+CREATE USER u9_01292 SETTINGS PROFILE `default`, max_memory_usage = 5000000 WRITABLE
 CREATE USER u1_01292 SETTINGS readonly = 1
 CREATE USER u2_01292 SETTINGS readonly = 1
 CREATE USER u3_01292
@@ -82,7 +82,7 @@ CREATE USER u5_01292 DEFAULT ROLE ALL EXCEPT r1_01292
 CREATE USER u6_01292 DEFAULT ROLE NONE
 -- complex
 CREATE USER u1_01292 IDENTIFIED WITH plaintext_password HOST LOCAL SETTINGS readonly = 1
-CREATE USER u1_01292 HOST LIKE \'%.%.myhost.com\' DEFAULT ROLE NONE SETTINGS PROFILE default
+CREATE USER u1_01292 HOST LIKE \'%.%.myhost.com\' DEFAULT ROLE NONE SETTINGS PROFILE `default`
 -- if not exists
 CREATE USER u1_01292
 GRANT r1_01292 TO u1_01292
diff --git a/tests/queries/0_stateless/01293_create_role.reference b/tests/queries/0_stateless/01293_create_role.reference
index 42f091bddd52..f1bd76322d4e 100644
--- a/tests/queries/0_stateless/01293_create_role.reference
+++ b/tests/queries/0_stateless/01293_create_role.reference
@@ -11,14 +11,14 @@ CREATE ROLE `r2_01293@%.myhost.com`
 CREATE ROLE `r2_01293@%.myhost.com`
 -- settings
 CREATE ROLE r1_01293
-CREATE ROLE r2_01293 SETTINGS PROFILE default
+CREATE ROLE r2_01293 SETTINGS PROFILE `default`
 CREATE ROLE r3_01293 SETTINGS max_memory_usage = 5000000
 CREATE ROLE r4_01293 SETTINGS max_memory_usage MIN 5000000
 CREATE ROLE r5_01293 SETTINGS max_memory_usage MAX 5000000
 CREATE ROLE r6_01293 SETTINGS max_memory_usage CONST
 CREATE ROLE r7_01293 SETTINGS max_memory_usage WRITABLE
 CREATE ROLE r8_01293 SETTINGS max_memory_usage = 5000000 MIN 4000000 MAX 6000000 CONST
-CREATE ROLE r9_01293 SETTINGS PROFILE default, max_memory_usage = 5000000 WRITABLE
+CREATE ROLE r9_01293 SETTINGS PROFILE `default`, max_memory_usage = 5000000 WRITABLE
 CREATE ROLE r1_01293 SETTINGS readonly = 1
 CREATE ROLE r2_01293 SETTINGS readonly = 1
 CREATE ROLE r3_01293
diff --git a/tests/queries/0_stateless/01294_create_settings_profile.reference b/tests/queries/0_stateless/01294_create_settings_profile.reference
index a10d5758752f..7e1838c8daec 100644
--- a/tests/queries/0_stateless/01294_create_settings_profile.reference
+++ b/tests/queries/0_stateless/01294_create_settings_profile.reference
@@ -1,57 +1,57 @@
 -- default
-CREATE SETTINGS PROFILE s1_01294
+CREATE SETTINGS PROFILE `s1_01294`
 -- same as default
-CREATE SETTINGS PROFILE s2_01294
-CREATE SETTINGS PROFILE s3_01294
+CREATE SETTINGS PROFILE `s2_01294`
+CREATE SETTINGS PROFILE `s3_01294`
 -- rename
-CREATE SETTINGS PROFILE s2_01294_renamed
+CREATE SETTINGS PROFILE `s2_01294_renamed`
 -- settings
-CREATE SETTINGS PROFILE s1_01294
-CREATE SETTINGS PROFILE s2_01294 SETTINGS INHERIT default
-CREATE SETTINGS PROFILE s3_01294 SETTINGS max_memory_usage = 5000000
-CREATE SETTINGS PROFILE s4_01294 SETTINGS max_memory_usage MIN 5000000
-CREATE SETTINGS PROFILE s5_01294 SETTINGS max_memory_usage MAX 5000000
-CREATE SETTINGS PROFILE s6_01294 SETTINGS max_memory_usage CONST
-CREATE SETTINGS PROFILE s7_01294 SETTINGS max_memory_usage WRITABLE
-CREATE SETTINGS PROFILE s8_01294 SETTINGS max_memory_usage = 5000000 MIN 4000000 MAX 6000000 CONST
-CREATE SETTINGS PROFILE s9_01294 SETTINGS INHERIT default, max_memory_usage = 5000000 WRITABLE
-CREATE SETTINGS PROFILE s10_01294 SETTINGS INHERIT s1_01294, INHERIT s3_01294, INHERIT default, readonly = 0, max_memory_usage MAX 6000000
-CREATE SETTINGS PROFILE s1_01294 SETTINGS readonly = 0
-CREATE SETTINGS PROFILE s2_01294 SETTINGS readonly = 1
-CREATE SETTINGS PROFILE s3_01294
+CREATE SETTINGS PROFILE `s1_01294`
+CREATE SETTINGS PROFILE `s2_01294` SETTINGS INHERIT `default`
+CREATE SETTINGS PROFILE `s3_01294` SETTINGS max_memory_usage = 5000000
+CREATE SETTINGS PROFILE `s4_01294` SETTINGS max_memory_usage MIN 5000000
+CREATE SETTINGS PROFILE `s5_01294` SETTINGS max_memory_usage MAX 5000000
+CREATE SETTINGS PROFILE `s6_01294` SETTINGS max_memory_usage CONST
+CREATE SETTINGS PROFILE `s7_01294` SETTINGS max_memory_usage WRITABLE
+CREATE SETTINGS PROFILE `s8_01294` SETTINGS max_memory_usage = 5000000 MIN 4000000 MAX 6000000 CONST
+CREATE SETTINGS PROFILE `s9_01294` SETTINGS INHERIT `default`, max_memory_usage = 5000000 WRITABLE
+CREATE SETTINGS PROFILE `s10_01294` SETTINGS INHERIT `s1_01294`, INHERIT `s3_01294`, INHERIT `default`, readonly = 0, max_memory_usage MAX 6000000
+CREATE SETTINGS PROFILE `s1_01294` SETTINGS readonly = 0
+CREATE SETTINGS PROFILE `s2_01294` SETTINGS readonly = 1
+CREATE SETTINGS PROFILE `s3_01294`
 -- to roles
-CREATE SETTINGS PROFILE s1_01294
-CREATE SETTINGS PROFILE s2_01294 TO ALL
-CREATE SETTINGS PROFILE s3_01294 TO r1_01294
-CREATE SETTINGS PROFILE s4_01294 TO u1_01294
-CREATE SETTINGS PROFILE s5_01294 TO r1_01294, u1_01294
-CREATE SETTINGS PROFILE s6_01294 TO ALL EXCEPT r1_01294
-CREATE SETTINGS PROFILE s7_01294 TO ALL EXCEPT r1_01294, u1_01294
-CREATE SETTINGS PROFILE s1_01294 TO u1_01294
-CREATE SETTINGS PROFILE s2_01294
+CREATE SETTINGS PROFILE `s1_01294`
+CREATE SETTINGS PROFILE `s2_01294` TO ALL
+CREATE SETTINGS PROFILE `s3_01294` TO r1_01294
+CREATE SETTINGS PROFILE `s4_01294` TO u1_01294
+CREATE SETTINGS PROFILE `s5_01294` TO r1_01294, u1_01294
+CREATE SETTINGS PROFILE `s6_01294` TO ALL EXCEPT r1_01294
+CREATE SETTINGS PROFILE `s7_01294` TO ALL EXCEPT r1_01294, u1_01294
+CREATE SETTINGS PROFILE `s1_01294` TO u1_01294
+CREATE SETTINGS PROFILE `s2_01294`
 -- complex
-CREATE SETTINGS PROFILE s1_01294 SETTINGS readonly = 0 TO r1_01294
-CREATE SETTINGS PROFILE s1_01294 SETTINGS INHERIT default
+CREATE SETTINGS PROFILE `s1_01294` SETTINGS readonly = 0 TO r1_01294
+CREATE SETTINGS PROFILE `s1_01294` SETTINGS INHERIT `default`
 -- multiple profiles in one command
-CREATE SETTINGS PROFILE s1_01294 SETTINGS max_memory_usage = 5000000
-CREATE SETTINGS PROFILE s2_01294 SETTINGS max_memory_usage = 5000000
-CREATE SETTINGS PROFILE s3_01294 TO ALL
-CREATE SETTINGS PROFILE s4_01294 TO ALL
-CREATE SETTINGS PROFILE s1_01294 SETTINGS max_memory_usage = 6000000
-CREATE SETTINGS PROFILE s2_01294 SETTINGS max_memory_usage = 6000000
-CREATE SETTINGS PROFILE s3_01294 TO ALL
-CREATE SETTINGS PROFILE s4_01294 TO ALL
-CREATE SETTINGS PROFILE s1_01294 SETTINGS max_memory_usage = 6000000
-CREATE SETTINGS PROFILE s2_01294 SETTINGS max_memory_usage = 6000000 TO r1_01294
-CREATE SETTINGS PROFILE s3_01294 TO r1_01294
-CREATE SETTINGS PROFILE s4_01294 TO r1_01294
+CREATE SETTINGS PROFILE `s1_01294` SETTINGS max_memory_usage = 5000000
+CREATE SETTINGS PROFILE `s2_01294` SETTINGS max_memory_usage = 5000000
+CREATE SETTINGS PROFILE `s3_01294` TO ALL
+CREATE SETTINGS PROFILE `s4_01294` TO ALL
+CREATE SETTINGS PROFILE `s1_01294` SETTINGS max_memory_usage = 6000000
+CREATE SETTINGS PROFILE `s2_01294` SETTINGS max_memory_usage = 6000000
+CREATE SETTINGS PROFILE `s3_01294` TO ALL
+CREATE SETTINGS PROFILE `s4_01294` TO ALL
+CREATE SETTINGS PROFILE `s1_01294` SETTINGS max_memory_usage = 6000000
+CREATE SETTINGS PROFILE `s2_01294` SETTINGS max_memory_usage = 6000000 TO r1_01294
+CREATE SETTINGS PROFILE `s3_01294` TO r1_01294
+CREATE SETTINGS PROFILE `s4_01294` TO r1_01294
 -- readonly ambiguity
-CREATE SETTINGS PROFILE s1_01294 SETTINGS readonly = 1
-CREATE SETTINGS PROFILE s2_01294 SETTINGS readonly CONST
-CREATE SETTINGS PROFILE s3_01294 SETTINGS INHERIT readonly
-CREATE SETTINGS PROFILE s4_01294 SETTINGS INHERIT readonly, INHERIT readonly
-CREATE SETTINGS PROFILE s5_01294 SETTINGS INHERIT readonly, readonly = 1
-CREATE SETTINGS PROFILE s6_01294 SETTINGS INHERIT readonly, readonly CONST
+CREATE SETTINGS PROFILE `s1_01294` SETTINGS readonly = 1
+CREATE SETTINGS PROFILE `s2_01294` SETTINGS readonly CONST
+CREATE SETTINGS PROFILE `s3_01294` SETTINGS INHERIT `readonly`
+CREATE SETTINGS PROFILE `s4_01294` SETTINGS INHERIT `readonly`, INHERIT `readonly`
+CREATE SETTINGS PROFILE `s5_01294` SETTINGS INHERIT `readonly`, readonly = 1
+CREATE SETTINGS PROFILE `s6_01294` SETTINGS INHERIT `readonly`, readonly CONST
 -- system.settings_profiles
 s1_01294	local_directory	0	0	[]	[]
 s2_01294	local_directory	1	0	['r1_01294']	[]
diff --git a/tests/queries/0_stateless/01295_create_row_policy.reference b/tests/queries/0_stateless/01295_create_row_policy.reference
index d73d9752bc10..2c300332a896 100644
--- a/tests/queries/0_stateless/01295_create_row_policy.reference
+++ b/tests/queries/0_stateless/01295_create_row_policy.reference
@@ -1,35 +1,35 @@
 -- default
-CREATE ROW POLICY p1_01295 ON db.table
+CREATE ROW POLICY p1_01295 ON db.`table`
 -- same as default
-CREATE ROW POLICY p2_01295 ON db.table
-CREATE ROW POLICY p3_01295 ON db.table
+CREATE ROW POLICY p2_01295 ON db.`table`
+CREATE ROW POLICY p3_01295 ON db.`table`
 -- rename
-CREATE ROW POLICY p2_01295_renamed ON db.table
+CREATE ROW POLICY p2_01295_renamed ON db.`table`
 -- filter
-CREATE ROW POLICY p1_01295 ON db.table FOR SELECT USING (a < b) AND (c > d)
-CREATE ROW POLICY p2_01295 ON db.table AS restrictive FOR SELECT USING id = currentUser()
-CREATE ROW POLICY p3_01295 ON db.table FOR SELECT USING 1
-CREATE ROW POLICY p1_01295 ON db.table AS restrictive FOR SELECT USING 0
+CREATE ROW POLICY p1_01295 ON db.`table` FOR SELECT USING (a < b) AND (c > d)
+CREATE ROW POLICY p2_01295 ON db.`table` AS restrictive FOR SELECT USING id = currentUser()
+CREATE ROW POLICY p3_01295 ON db.`table` FOR SELECT USING 1
+CREATE ROW POLICY p1_01295 ON db.`table` AS restrictive FOR SELECT USING 0
 -- to roles
-CREATE ROW POLICY p1_01295 ON db.table
-CREATE ROW POLICY p2_01295 ON db.table TO ALL
-CREATE ROW POLICY p3_01295 ON db.table TO r1_01295
-CREATE ROW POLICY p4_01295 ON db.table TO u1_01295
-CREATE ROW POLICY p5_01295 ON db.table TO r1_01295, u1_01295
-CREATE ROW POLICY p6_01295 ON db.table TO ALL EXCEPT r1_01295
-CREATE ROW POLICY p7_01295 ON db.table TO ALL EXCEPT r1_01295, u1_01295
-CREATE ROW POLICY p1_01295 ON db.table TO u1_01295
-CREATE ROW POLICY p2_01295 ON db.table
+CREATE ROW POLICY p1_01295 ON db.`table`
+CREATE ROW POLICY p2_01295 ON db.`table` TO ALL
+CREATE ROW POLICY p3_01295 ON db.`table` TO r1_01295
+CREATE ROW POLICY p4_01295 ON db.`table` TO u1_01295
+CREATE ROW POLICY p5_01295 ON db.`table` TO r1_01295, u1_01295
+CREATE ROW POLICY p6_01295 ON db.`table` TO ALL EXCEPT r1_01295
+CREATE ROW POLICY p7_01295 ON db.`table` TO ALL EXCEPT r1_01295, u1_01295
+CREATE ROW POLICY p1_01295 ON db.`table` TO u1_01295
+CREATE ROW POLICY p2_01295 ON db.`table`
 -- multiple policies in one command
-CREATE ROW POLICY p1_01295 ON db.table FOR SELECT USING 1
-CREATE ROW POLICY p2_01295 ON db.table FOR SELECT USING 1
-CREATE ROW POLICY p3_01295 ON db.table TO u1_01295
+CREATE ROW POLICY p1_01295 ON db.`table` FOR SELECT USING 1
+CREATE ROW POLICY p2_01295 ON db.`table` FOR SELECT USING 1
+CREATE ROW POLICY p3_01295 ON db.`table` TO u1_01295
 CREATE ROW POLICY p3_01295 ON db2.table2 TO u1_01295
-CREATE ROW POLICY p4_01295 ON db.table FOR SELECT USING a = b
+CREATE ROW POLICY p4_01295 ON db.`table` FOR SELECT USING a = b
 CREATE ROW POLICY p5_01295 ON db2.table2 FOR SELECT USING a = b
-CREATE ROW POLICY p1_01295 ON db.table FOR SELECT USING 1 TO ALL
-CREATE ROW POLICY p2_01295 ON db.table FOR SELECT USING 1 TO ALL
+CREATE ROW POLICY p1_01295 ON db.`table` FOR SELECT USING 1 TO ALL
+CREATE ROW POLICY p2_01295 ON db.`table` FOR SELECT USING 1 TO ALL
 -- system.row_policies
-p1_01295 ON db.table	p1_01295	db	table	local_directory	(a < b) AND (c > d)	0	0	[]	[]
-p2_01295 ON db.table	p2_01295	db	table	local_directory	id = currentUser()	1	0	['u1_01295']	[]
-p3_01295 ON db.table	p3_01295	db	table	local_directory	1	0	1	[]	['r1_01295']
+p1_01295 ON db.`table`	p1_01295	db	table	local_directory	(a < b) AND (c > d)	0	0	[]	[]
+p2_01295 ON db.`table`	p2_01295	db	table	local_directory	id = currentUser()	1	0	['u1_01295']	[]
+p3_01295 ON db.`table`	p3_01295	db	table	local_directory	1	0	1	[]	['r1_01295']
diff --git a/tests/queries/0_stateless/01296_create_row_policy_in_current_database.reference b/tests/queries/0_stateless/01296_create_row_policy_in_current_database.reference
index fa9c2f730216..bfca341bd7b7 100644
--- a/tests/queries/0_stateless/01296_create_row_policy_in_current_database.reference
+++ b/tests/queries/0_stateless/01296_create_row_policy_in_current_database.reference
@@ -1,20 +1,20 @@
 -- one policy
-CREATE ROW POLICY p1_01296 ON db_01296.table
-CREATE ROW POLICY p1_01296 ON db_01296.table
-CREATE ROW POLICY p1_01296 ON db_01296.table FOR SELECT USING 1
-CREATE ROW POLICY p1_01296 ON db_01296.table FOR SELECT USING 1
+CREATE ROW POLICY p1_01296 ON db_01296.`table`
+CREATE ROW POLICY p1_01296 ON db_01296.`table`
+CREATE ROW POLICY p1_01296 ON db_01296.`table` FOR SELECT USING 1
+CREATE ROW POLICY p1_01296 ON db_01296.`table` FOR SELECT USING 1
 -- multiple policies
-CREATE ROW POLICY p1_01296 ON db_01296.table FOR SELECT USING 1
-CREATE ROW POLICY p2_01296 ON db_01296.table FOR SELECT USING 1
-CREATE ROW POLICY p3_01296 ON db_01296.table TO u1_01296
+CREATE ROW POLICY p1_01296 ON db_01296.`table` FOR SELECT USING 1
+CREATE ROW POLICY p2_01296 ON db_01296.`table` FOR SELECT USING 1
+CREATE ROW POLICY p3_01296 ON db_01296.`table` TO u1_01296
 CREATE ROW POLICY p3_01296 ON db_01296.table2 TO u1_01296
-CREATE ROW POLICY p4_01296 ON db_01296.table FOR SELECT USING a = b
+CREATE ROW POLICY p4_01296 ON db_01296.`table` FOR SELECT USING a = b
 CREATE ROW POLICY p5_01296 ON db_01296.table2 FOR SELECT USING a = b
-CREATE ROW POLICY p1_01296 ON db_01296.table FOR SELECT USING 1
-CREATE ROW POLICY p2_01296 ON db_01296.table FOR SELECT USING 1
-CREATE ROW POLICY p3_01296 ON db_01296.table TO u1_01296
+CREATE ROW POLICY p1_01296 ON db_01296.`table` FOR SELECT USING 1
+CREATE ROW POLICY p2_01296 ON db_01296.`table` FOR SELECT USING 1
+CREATE ROW POLICY p3_01296 ON db_01296.`table` TO u1_01296
 CREATE ROW POLICY p3_01296 ON db_01296.table2 TO u1_01296
-CREATE ROW POLICY p4_01296 ON db_01296.table FOR SELECT USING a = b
+CREATE ROW POLICY p4_01296 ON db_01296.`table` FOR SELECT USING a = b
 CREATE ROW POLICY p5_01296 ON db_01296.table2 FOR SELECT USING a = b
-CREATE ROW POLICY p1_01296 ON db_01296.table FOR SELECT USING 1 TO ALL
-CREATE ROW POLICY p2_01296 ON db_01296.table FOR SELECT USING 1 TO ALL
+CREATE ROW POLICY p1_01296 ON db_01296.`table` FOR SELECT USING 1 TO ALL
+CREATE ROW POLICY p2_01296 ON db_01296.`table` FOR SELECT USING 1 TO ALL
diff --git a/tests/queries/0_stateless/01418_custom_settings.reference b/tests/queries/0_stateless/01418_custom_settings.reference
index 8484a5d0e6fa..923d43077d8d 100644
--- a/tests/queries/0_stateless/01418_custom_settings.reference
+++ b/tests/queries/0_stateless/01418_custom_settings.reference
@@ -30,10 +30,10 @@ custom_f	\'word\'
 --- compound identifier ---
 test	String
 custom_compound.identifier.v1	\'test\'
-CREATE SETTINGS PROFILE s1_01418 SETTINGS custom_compound.identifier.v2 = 100
+CREATE SETTINGS PROFILE `s1_01418` SETTINGS custom_compound.identifier.v2 = 100
 --- null type ---
 \N	Nullable(Nothing)
 custom_null	NULL
 \N	Nullable(Nothing)
 custom_null	NULL
-CREATE SETTINGS PROFILE s2_01418 SETTINGS custom_null = NULL
+CREATE SETTINGS PROFILE `s2_01418` SETTINGS custom_null = NULL
diff --git a/tests/queries/0_stateless/01602_show_create_view.reference b/tests/queries/0_stateless/01602_show_create_view.reference
index fac7f5035f64..b3a345f27421 100644
--- a/tests/queries/0_stateless/01602_show_create_view.reference
+++ b/tests/queries/0_stateless/01602_show_create_view.reference
@@ -3,4 +3,4 @@ CREATE MATERIALIZED VIEW test_1602.vv
(
    `EventDate` DateTime,
    `Counte
 CREATE VIEW test_1602.VIEW
(
    `EventDate` DateTime,
    `CounterID` UInt32,
    `UserID` UInt32
)
AS SELECT *
FROM test_1602.tbl
 CREATE VIEW test_1602.DATABASE
(
    `EventDate` DateTime,
    `CounterID` UInt32,
    `UserID` UInt32
)
AS SELECT *
FROM test_1602.tbl
 CREATE VIEW test_1602.DICTIONARY
(
    `EventDate` DateTime,
    `CounterID` UInt32,
    `UserID` UInt32
)
AS SELECT *
FROM test_1602.tbl
-CREATE VIEW test_1602.TABLE
(
    `EventDate` DateTime,
    `CounterID` UInt32,
    `UserID` UInt32
)
AS SELECT *
FROM test_1602.tbl
+CREATE VIEW test_1602.`TABLE`
(
    `EventDate` DateTime,
    `CounterID` UInt32,
    `UserID` UInt32
)
AS SELECT *
FROM test_1602.tbl
diff --git a/tests/queries/0_stateless/01732_explain_syntax_union_query.reference b/tests/queries/0_stateless/01732_explain_syntax_union_query.reference
index ccafa916b9f5..5246cfec7aa6 100644
--- a/tests/queries/0_stateless/01732_explain_syntax_union_query.reference
+++ b/tests/queries/0_stateless/01732_explain_syntax_union_query.reference
@@ -54,7 +54,6 @@ SELECT 1
 -
 SELECT 1
 -
-
 (
     SELECT 1
     UNION DISTINCT
diff --git a/tests/queries/0_stateless/01874_select_from_trailing_whitespaces.reference b/tests/queries/0_stateless/01874_select_from_trailing_whitespaces.reference
index a52505659d19..4dc5ccac840d 100644
--- a/tests/queries/0_stateless/01874_select_from_trailing_whitespaces.reference
+++ b/tests/queries/0_stateless/01874_select_from_trailing_whitespaces.reference
@@ -46,10 +46,12 @@ SELECT * FROM system.one UNION ALL SELECT * FROM system.one
 SELECT *
 FROM system.one
 UNION ALL
-SELECT *
-FROM system.one
+(
+    SELECT *
+    FROM system.one
+)
 # /* oneline */ select * from system.one union all (select * from system.one)
-SELECT * FROM system.one UNION ALL SELECT * FROM system.one
+SELECT * FROM system.one UNION ALL (SELECT * FROM system.one)
 # select 1 union all (select 1 union distinct select 1)
 SELECT 1
 UNION ALL
diff --git a/tests/queries/0_stateless/01999_grant_with_replace.reference b/tests/queries/0_stateless/01999_grant_with_replace.reference
index 740c55d53253..dc2047ab73c6 100644
--- a/tests/queries/0_stateless/01999_grant_with_replace.reference
+++ b/tests/queries/0_stateless/01999_grant_with_replace.reference
@@ -4,12 +4,12 @@ B
 GRANT SELECT ON db1.* TO test_user_01999
 GRANT SHOW TABLES, SHOW COLUMNS, SHOW DICTIONARIES ON db2.tb2 TO test_user_01999
 C
-GRANT SELECT(col1) ON db3.table TO test_user_01999
+GRANT SELECT(col1) ON db3.`table` TO test_user_01999
 D
 GRANT SELECT(col3) ON db3.table3 TO test_user_01999
 GRANT SELECT(col1, col2) ON db4.table4 TO test_user_01999
 E
-GRANT SELECT(cola) ON db5.table TO test_user_01999
+GRANT SELECT(cola) ON db5.`table` TO test_user_01999
 GRANT INSERT(colb) ON db6.tb61 TO test_user_01999
 GRANT SHOW ON db7.* TO test_user_01999
 F
diff --git a/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.reference b/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.reference
index beda9e362238..0bb8966cbe46 100644
--- a/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.reference
+++ b/tests/queries/0_stateless/02141_clickhouse_local_interactive_table.reference
@@ -1,2 +1,2 @@
-CREATE TABLE default.table
(
    `key` String
)
ENGINE = File(\'TSVWithNamesAndTypes\', \'/dev/null\')
-CREATE TABLE foo.table
(
    `key` String
)
ENGINE = File(\'TSVWithNamesAndTypes\', \'/dev/null\')
+CREATE TABLE default.`table`
(
    `key` String
)
ENGINE = File(\'TSVWithNamesAndTypes\', \'/dev/null\')
+CREATE TABLE foo.`table`
(
    `key` String
)
ENGINE = File(\'TSVWithNamesAndTypes\', \'/dev/null\')
diff --git a/tests/queries/0_stateless/02181_format_describe_query.reference b/tests/queries/0_stateless/02181_format_describe_query.reference
index 328ea19bd375..238a83df50a1 100644
--- a/tests/queries/0_stateless/02181_format_describe_query.reference
+++ b/tests/queries/0_stateless/02181_format_describe_query.reference
@@ -1,3 +1,3 @@
 DESCRIBE TABLE file('data.csv')
-DESCRIBE TABLE table
+DESCRIBE TABLE `table`
 DESCRIBE TABLE file('data.csv')
diff --git a/tests/queries/0_stateless/02206_information_schema_show_database.reference b/tests/queries/0_stateless/02206_information_schema_show_database.reference
index 8f5b425ad15f..2cc93c56e82a 100644
--- a/tests/queries/0_stateless/02206_information_schema_show_database.reference
+++ b/tests/queries/0_stateless/02206_information_schema_show_database.reference
@@ -1,5 +1,5 @@
 CREATE DATABASE INFORMATION_SCHEMA
ENGINE = Memory
-CREATE VIEW INFORMATION_SCHEMA.COLUMNS
(
    `table_catalog` String,
    `table_schema` String,
    `table_name` String,
    `column_name` String,
    `ordinal_position` UInt64,
    `column_default` String,
    `is_nullable` String,
    `data_type` String,
    `character_maximum_length` Nullable(UInt64),
    `character_octet_length` Nullable(UInt64),
    `numeric_precision` Nullable(UInt64),
    `numeric_precision_radix` Nullable(UInt64),
    `numeric_scale` Nullable(UInt64),
    `datetime_precision` Nullable(UInt64),
    `character_set_catalog` Nullable(String),
    `character_set_schema` Nullable(String),
    `character_set_name` Nullable(String),
    `collation_catalog` Nullable(String),
    `collation_schema` Nullable(String),
    `collation_name` Nullable(String),
    `domain_catalog` Nullable(String),
    `domain_schema` Nullable(String),
    `domain_name` Nullable(String),
    `extra` Nullable(String),
    `column_comment` String,
    `column_type` String,
    `TABLE_CATALOG` String,
    `TABLE_SCHEMA` String,
    `TABLE_NAME` String,
    `COLUMN_NAME` String,
    `ORDINAL_POSITION` UInt64,
    `COLUMN_DEFAULT` String,
    `IS_NULLABLE` String,
    `DATA_TYPE` String,
    `CHARACTER_MAXIMUM_LENGTH` Nullable(UInt64),
    `CHARACTER_OCTET_LENGTH` Nullable(UInt64),
    `NUMERIC_PRECISION` Nullable(UInt64),
    `NUMERIC_PRECISION_RADIX` Nullable(UInt64),
    `NUMERIC_SCALE` Nullable(UInt64),
    `DATETIME_PRECISION` Nullable(UInt64),
    `CHARACTER_SET_CATALOG` Nullable(String),
    `CHARACTER_SET_SCHEMA` Nullable(String),
    `CHARACTER_SET_NAME` Nullable(String),
    `COLLATION_CATALOG` Nullable(String),
    `COLLATION_SCHEMA` Nullable(String),
    `COLLATION_NAME` Nullable(String),
    `DOMAIN_CATALOG` Nullable(String),
    `DOMAIN_SCHEMA` Nullable(String),
    `DOMAIN_NAME` Nullable(String),
    `EXTRA` Nullable(String),
    `COLUMN_COMMENT` String,
    `COLUMN_TYPE` String
)
SQL SECURITY INVOKER
AS SELECT
    database AS table_catalog,
    database AS table_schema,
    table AS table_name,
    name AS column_name,
    position AS ordinal_position,
    default_expression AS column_default,
    type LIKE \'Nullable(%)\' AS is_nullable,
    type AS data_type,
    character_octet_length AS character_maximum_length,
    character_octet_length,
    numeric_precision,
    numeric_precision_radix,
    numeric_scale,
    datetime_precision,
    NULL AS character_set_catalog,
    NULL AS character_set_schema,
    NULL AS character_set_name,
    NULL AS collation_catalog,
    NULL AS collation_schema,
    NULL AS collation_name,
    NULL AS domain_catalog,
    NULL AS domain_schema,
    NULL AS domain_name,
    multiIf(default_kind = \'DEFAULT\', \'DEFAULT_GENERATED\', default_kind = \'MATERIALIZED\', \'STORED GENERATED\', default_kind = \'ALIAS\', \'VIRTUAL GENERATED\', \'\') AS extra,
    comment AS column_comment,
    type AS column_type,
    table_catalog AS TABLE_CATALOG,
    table_schema AS TABLE_SCHEMA,
    table_name AS TABLE_NAME,
    column_name AS COLUMN_NAME,
    ordinal_position AS ORDINAL_POSITION,
    column_default AS COLUMN_DEFAULT,
    is_nullable AS IS_NULLABLE,
    data_type AS DATA_TYPE,
    character_maximum_length AS CHARACTER_MAXIMUM_LENGTH,
    character_octet_length AS CHARACTER_OCTET_LENGTH,
    numeric_precision AS NUMERIC_PRECISION,
    numeric_precision_radix AS NUMERIC_PRECISION_RADIX,
    numeric_scale AS NUMERIC_SCALE,
    datetime_precision AS DATETIME_PRECISION,
    character_set_catalog AS CHARACTER_SET_CATALOG,
    character_set_schema AS CHARACTER_SET_SCHEMA,
    character_set_name AS CHARACTER_SET_NAME,
    collation_catalog AS COLLATION_CATALOG,
    collation_schema AS COLLATION_SCHEMA,
    collation_name AS COLLATION_NAME,
    domain_catalog AS DOMAIN_CATALOG,
    domain_schema AS DOMAIN_SCHEMA,
    domain_name AS DOMAIN_NAME,
    extra AS EXTRA,
    column_comment AS COLUMN_COMMENT,
    column_type AS COLUMN_TYPE
FROM system.columns
+CREATE VIEW INFORMATION_SCHEMA.COLUMNS
(
    `table_catalog` String,
    `table_schema` String,
    `table_name` String,
    `column_name` String,
    `ordinal_position` UInt64,
    `column_default` String,
    `is_nullable` String,
    `data_type` String,
    `character_maximum_length` Nullable(UInt64),
    `character_octet_length` Nullable(UInt64),
    `numeric_precision` Nullable(UInt64),
    `numeric_precision_radix` Nullable(UInt64),
    `numeric_scale` Nullable(UInt64),
    `datetime_precision` Nullable(UInt64),
    `character_set_catalog` Nullable(String),
    `character_set_schema` Nullable(String),
    `character_set_name` Nullable(String),
    `collation_catalog` Nullable(String),
    `collation_schema` Nullable(String),
    `collation_name` Nullable(String),
    `domain_catalog` Nullable(String),
    `domain_schema` Nullable(String),
    `domain_name` Nullable(String),
    `extra` Nullable(String),
    `column_comment` String,
    `column_type` String,
    `TABLE_CATALOG` String,
    `TABLE_SCHEMA` String,
    `TABLE_NAME` String,
    `COLUMN_NAME` String,
    `ORDINAL_POSITION` UInt64,
    `COLUMN_DEFAULT` String,
    `IS_NULLABLE` String,
    `DATA_TYPE` String,
    `CHARACTER_MAXIMUM_LENGTH` Nullable(UInt64),
    `CHARACTER_OCTET_LENGTH` Nullable(UInt64),
    `NUMERIC_PRECISION` Nullable(UInt64),
    `NUMERIC_PRECISION_RADIX` Nullable(UInt64),
    `NUMERIC_SCALE` Nullable(UInt64),
    `DATETIME_PRECISION` Nullable(UInt64),
    `CHARACTER_SET_CATALOG` Nullable(String),
    `CHARACTER_SET_SCHEMA` Nullable(String),
    `CHARACTER_SET_NAME` Nullable(String),
    `COLLATION_CATALOG` Nullable(String),
    `COLLATION_SCHEMA` Nullable(String),
    `COLLATION_NAME` Nullable(String),
    `DOMAIN_CATALOG` Nullable(String),
    `DOMAIN_SCHEMA` Nullable(String),
    `DOMAIN_NAME` Nullable(String),
    `EXTRA` Nullable(String),
    `COLUMN_COMMENT` String,
    `COLUMN_TYPE` String
)
SQL SECURITY INVOKER
AS SELECT
    database AS table_catalog,
    database AS table_schema,
    `table` AS table_name,
    name AS column_name,
    position AS ordinal_position,
    default_expression AS column_default,
    type LIKE \'Nullable(%)\' AS is_nullable,
    type AS data_type,
    character_octet_length AS character_maximum_length,
    character_octet_length,
    numeric_precision,
    numeric_precision_radix,
    numeric_scale,
    datetime_precision,
    NULL AS character_set_catalog,
    NULL AS character_set_schema,
    NULL AS character_set_name,
    NULL AS collation_catalog,
    NULL AS collation_schema,
    NULL AS collation_name,
    NULL AS domain_catalog,
    NULL AS domain_schema,
    NULL AS domain_name,
    multiIf(default_kind = \'DEFAULT\', \'DEFAULT_GENERATED\', default_kind = \'MATERIALIZED\', \'STORED GENERATED\', default_kind = \'ALIAS\', \'VIRTUAL GENERATED\', \'\') AS extra,
    comment AS column_comment,
    type AS column_type,
    table_catalog AS TABLE_CATALOG,
    table_schema AS TABLE_SCHEMA,
    table_name AS TABLE_NAME,
    column_name AS COLUMN_NAME,
    ordinal_position AS ORDINAL_POSITION,
    column_default AS COLUMN_DEFAULT,
    is_nullable AS IS_NULLABLE,
    data_type AS DATA_TYPE,
    character_maximum_length AS CHARACTER_MAXIMUM_LENGTH,
    character_octet_length AS CHARACTER_OCTET_LENGTH,
    numeric_precision AS NUMERIC_PRECISION,
    numeric_precision_radix AS NUMERIC_PRECISION_RADIX,
    numeric_scale AS NUMERIC_SCALE,
    datetime_precision AS DATETIME_PRECISION,
    character_set_catalog AS CHARACTER_SET_CATALOG,
    character_set_schema AS CHARACTER_SET_SCHEMA,
    character_set_name AS CHARACTER_SET_NAME,
    collation_catalog AS COLLATION_CATALOG,
    collation_schema AS COLLATION_SCHEMA,
    collation_name AS COLLATION_NAME,
    domain_catalog AS DOMAIN_CATALOG,
    domain_schema AS DOMAIN_SCHEMA,
    domain_name AS DOMAIN_NAME,
    extra AS EXTRA,
    column_comment AS COLUMN_COMMENT,
    column_type AS COLUMN_TYPE
FROM system.columns
 CREATE VIEW INFORMATION_SCHEMA.TABLES (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \'LOCAL TEMPORARY\', engine LIKE \'%View\', \'VIEW\', engine LIKE \'System%\', \'SYSTEM VIEW\', has_own_data = 0, \'FOREIGN TABLE\', \'BASE TABLE\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, \'utf8mb4_0900_ai_ci\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables
 CREATE VIEW INFORMATION_SCHEMA.tables (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \'LOCAL TEMPORARY\', engine LIKE \'%View\', \'VIEW\', engine LIKE \'System%\', \'SYSTEM VIEW\', has_own_data = 0, \'FOREIGN TABLE\', \'BASE TABLE\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, \'utf8mb4_0900_ai_ci\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables
 CREATE VIEW information_schema.TABLES (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` String, `table_rows` Nullable(UInt64), `data_length` Nullable(UInt64), `table_collation` Nullable(String), `table_comment` Nullable(String), `TABLE_CATALOG` String, `TABLE_SCHEMA` String, `TABLE_NAME` String, `TABLE_TYPE` String, `TABLE_ROWS` Nullable(UInt64), `DATA_LENGTH` Nullable(UInt64), `TABLE_COLLATION` Nullable(String), `TABLE_COMMENT` Nullable(String)) SQL SECURITY INVOKER AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, \'LOCAL TEMPORARY\', engine LIKE \'%View\', \'VIEW\', engine LIKE \'System%\', \'SYSTEM VIEW\', has_own_data = 0, \'FOREIGN TABLE\', \'BASE TABLE\') AS table_type, total_rows AS table_rows, total_bytes AS data_length, \'utf8mb4_0900_ai_ci\' AS table_collation, comment AS table_comment, table_catalog AS TABLE_CATALOG, table_schema AS TABLE_SCHEMA, table_name AS TABLE_NAME, table_type AS TABLE_TYPE, table_rows AS TABLE_ROWS, data_length AS DATA_LENGTH, table_collation AS TABLE_COLLATION, table_comment AS TABLE_COMMENT FROM system.tables
diff --git a/tests/queries/0_stateless/02449_check_dependencies_and_table_shutdown.reference b/tests/queries/0_stateless/02449_check_dependencies_and_table_shutdown.reference
index 37cd3d93e393..317dbe1c61c2 100644
--- a/tests/queries/0_stateless/02449_check_dependencies_and_table_shutdown.reference
+++ b/tests/queries/0_stateless/02449_check_dependencies_and_table_shutdown.reference
@@ -1,5 +1,5 @@
 CREATE DICTIONARY default.dict
(
    `id` UInt32,
    `value` String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST \'localhost\' PORT 9000 USER \'default\' DB \'default\' TABLE \'view\'))
LIFETIME(MIN 600 MAX 600)
LAYOUT(HASHED())
-CREATE TABLE default.table
(
    `col` String MATERIALIZED dictGet(\'default.dict\', \'value\', toUInt32(1))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
+CREATE TABLE default.`table`
(
    `col` String MATERIALIZED dictGet(\'default.dict\', \'value\', toUInt32(1))
)
ENGINE = MergeTree
ORDER BY tuple()
SETTINGS index_granularity = 8192
 1	v
 1	v
 1	v
diff --git a/tests/queries/0_stateless/02454_set_parameters_formatting.reference b/tests/queries/0_stateless/02454_set_parameters_formatting.reference
index 1098a8159f3e..c438c068635b 100644
--- a/tests/queries/0_stateless/02454_set_parameters_formatting.reference
+++ b/tests/queries/0_stateless/02454_set_parameters_formatting.reference
@@ -1,3 +1,3 @@
-SET param_a = 1
-SET max_threads = 1, param_a = 1
-SET max_threads = 1, param_a = 1
+SET param_a = '1'
+SET max_threads = 1, param_a = '1'
+SET max_threads = 1, param_a = '1'
diff --git a/tests/queries/0_stateless/02476_fix_lambda_parsing.reference b/tests/queries/0_stateless/02476_fix_lambda_parsing.reference
index de508c7a0d3e..04e64792b23b 100644
--- a/tests/queries/0_stateless/02476_fix_lambda_parsing.reference
+++ b/tests/queries/0_stateless/02476_fix_lambda_parsing.reference
@@ -1,4 +1,4 @@
-SELECT f(x, y -> z)
+SELECT f(x, (y -> z))
 SELECT f((x, y) -> z)
 SELECT f((x, y) -> z)
-SELECT f(x, (x, y) -> z)
+SELECT f(x, ((x, y) -> z))
diff --git a/tests/queries/0_stateless/02703_row_policy_for_database.reference b/tests/queries/0_stateless/02703_row_policy_for_database.reference
index ec03e538d95e..b67ea69ae723 100644
--- a/tests/queries/0_stateless/02703_row_policy_for_database.reference
+++ b/tests/queries/0_stateless/02703_row_policy_for_database.reference
@@ -3,7 +3,7 @@
 CREATE ROW POLICY db1_02703 ON db1_02703.* FOR SELECT USING 1 TO ALL
   -- SHOW CREATE POLICY ON db1_02703.*
 CREATE ROW POLICY db1_02703 ON db1_02703.* FOR SELECT USING 1 TO ALL
-CREATE ROW POLICY tbl1_02703 ON db1_02703.table FOR SELECT USING 1 TO ALL
+CREATE ROW POLICY tbl1_02703 ON db1_02703.`table` FOR SELECT USING 1 TO ALL
   -- SHOW CREATE POLICY ON db1_02703.`*`
 R1, R2: (x == 1) OR (x == 2)
 1
diff --git a/tests/queries/0_stateless/02813_create_index_noop.sql b/tests/queries/0_stateless/02813_create_index_noop.sql
index 3d65f81af9d5..0f32dc6bdf32 100644
--- a/tests/queries/0_stateless/02813_create_index_noop.sql
+++ b/tests/queries/0_stateless/02813_create_index_noop.sql
@@ -997,4 +997,4 @@ CREATE INDEX idx_tab4_5 ON tab4 (col4,col0 DESC);
 CREATE INDEX idx_tab4_5 ON tab4 (col4,col1 DESC);
 CREATE INDEX idx_tab4_5 ON tab4 (col4,col1 DESC,col3);
 CREATE INDEX idx_tab4_5 ON tab4 (col4,col3 DESC,col1 DESC);
-CREATE INDEX idx_tab4_5 ON tab4 (col4,col3);
\ No newline at end of file
+CREATE INDEX idx_tab4_5 ON tab4 (col4,col3);
diff --git a/tests/queries/0_stateless/02994_inconsistent_formatting.reference b/tests/queries/0_stateless/02994_inconsistent_formatting.reference
new file mode 100644
index 000000000000..b9db04e880c2
--- /dev/null
+++ b/tests/queries/0_stateless/02994_inconsistent_formatting.reference
@@ -0,0 +1,4 @@
+1
+2
+3
+(1)
\ No newline at end of file
diff --git a/tests/queries/0_stateless/02994_inconsistent_formatting.sql b/tests/queries/0_stateless/02994_inconsistent_formatting.sql
new file mode 100644
index 000000000000..f22f81513f6a
--- /dev/null
+++ b/tests/queries/0_stateless/02994_inconsistent_formatting.sql
@@ -0,0 +1,10 @@
+CREATE TEMPORARY TABLE table (x UInt8);
+INSERT INTO `table` FORMAT Values (1);
+INSERT INTO TABLE `table` FORMAT Values (2);
+INSERT INTO TABLE table FORMAT Values (3);
+SELECT * FROM table ORDER BY x;
+DROP TABLE table;
+
+CREATE TEMPORARY TABLE FORMAT (x UInt8);
+INSERT INTO table FORMAT Values (1);
+SELECT * FROM FORMAT FORMAT Values;
diff --git a/tests/queries/0_stateless/02995_bad_formatting_union_intersect.reference b/tests/queries/0_stateless/02995_bad_formatting_union_intersect.reference
new file mode 100644
index 000000000000..d00491fd7e5b
--- /dev/null
+++ b/tests/queries/0_stateless/02995_bad_formatting_union_intersect.reference
@@ -0,0 +1,1 @@
+1
diff --git a/tests/queries/0_stateless/02995_bad_formatting_union_intersect.sql b/tests/queries/0_stateless/02995_bad_formatting_union_intersect.sql
new file mode 100644
index 000000000000..227f407fc5cd
--- /dev/null
+++ b/tests/queries/0_stateless/02995_bad_formatting_union_intersect.sql
@@ -0,0 +1,2 @@
+create temporary table t1 engine=MergeTree() order by c as ( select 1 as c intersect (select 1 as c union all  select 2 as c ) );
+SELECT * FROM t1;
diff --git a/tests/queries/0_stateless/02998_operator_respect_nulls.reference b/tests/queries/0_stateless/02998_operator_respect_nulls.reference
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/queries/0_stateless/02998_operator_respect_nulls.sql b/tests/queries/0_stateless/02998_operator_respect_nulls.sql
new file mode 100644
index 000000000000..240992e1ff88
--- /dev/null
+++ b/tests/queries/0_stateless/02998_operator_respect_nulls.sql
@@ -0,0 +1,1 @@
+SELECT plus(1, 1) RESPECT NULLS; -- { serverError SYNTAX_ERROR }
