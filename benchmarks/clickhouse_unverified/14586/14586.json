{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 14586,
  "instance_id": "ClickHouse__ClickHouse-14586",
  "issue_numbers": [
    "9375"
  ],
  "base_commit": "6ad91d10182c7e4a4dbd8cf4fc4cfa8be8322ba2",
  "patch": "diff --git a/src/Core/Settings.h b/src/Core/Settings.h\nindex d367297f9006..09fff297e415 100644\n--- a/src/Core/Settings.h\n+++ b/src/Core/Settings.h\n@@ -439,6 +439,7 @@ class IColumn;\n     M(String, output_format_avro_codec, \"\", \"Compression codec used for output. Possible values: 'null', 'deflate', 'snappy'.\", 0) \\\n     M(UInt64, output_format_avro_sync_interval, 16 * 1024, \"Sync interval in bytes.\", 0) \\\n     M(Bool, output_format_tsv_crlf_end_of_line, false, \"If it is set true, end of line in TSV format will be \\\\r\\\\n instead of \\\\n.\", 0) \\\n+    M(String, output_format_tsv_null_representation, \"\\\\N\", \"Custom NULL representation in TSV format\", 0) \\\n     \\\n     M(UInt64, input_format_allow_errors_num, 0, \"Maximum absolute amount of errors while reading text formats (like CSV, TSV). In case of error, if at least absolute or relative amount of errors is lower than corresponding value, will skip until next line and continue.\", 0) \\\n     M(Float, input_format_allow_errors_ratio, 0, \"Maximum relative amount of errors while reading text formats (like CSV, TSV). In case of error, if at least absolute or relative amount of errors is lower than corresponding value, will skip until next line and continue.\", 0) \\\ndiff --git a/src/DataTypes/DataTypeNullable.cpp b/src/DataTypes/DataTypeNullable.cpp\nindex 847047850fda..67acf89ef42a 100644\n--- a/src/DataTypes/DataTypeNullable.cpp\n+++ b/src/DataTypes/DataTypeNullable.cpp\n@@ -217,7 +217,7 @@ void DataTypeNullable::serializeTextEscaped(const IColumn & column, size_t row_n\n     const ColumnNullable & col = assert_cast<const ColumnNullable &>(column);\n \n     if (col.isNullAt(row_num))\n-        writeCString(\"\\\\N\", ostr);\n+        writeString(settings.tsv.null_representation, ostr);\n     else\n         nested_data_type->serializeAsTextEscaped(col.getNestedColumn(), row_num, ostr, settings);\n }\ndiff --git a/src/Formats/FormatFactory.cpp b/src/Formats/FormatFactory.cpp\nindex 935d31d6541c..a1065b2c4524 100644\n--- a/src/Formats/FormatFactory.cpp\n+++ b/src/Formats/FormatFactory.cpp\n@@ -111,6 +111,7 @@ static FormatSettings getOutputFormatSetting(const Settings & settings, const Co\n     format_settings.template_settings.row_format = settings.format_template_row;\n     format_settings.template_settings.row_between_delimiter = settings.format_template_rows_between_delimiter;\n     format_settings.tsv.crlf_end_of_line = settings.output_format_tsv_crlf_end_of_line;\n+    format_settings.tsv.null_representation = settings.output_format_tsv_null_representation;\n     format_settings.write_statistics = settings.output_format_write_statistics;\n     format_settings.parquet.row_group_size = settings.output_format_parquet_row_group_size;\n     format_settings.schema.format_schema = settings.format_schema;\ndiff --git a/src/Formats/FormatSettings.h b/src/Formats/FormatSettings.h\nindex 299ec353f039..70173bc847d5 100644\n--- a/src/Formats/FormatSettings.h\n+++ b/src/Formats/FormatSettings.h\n@@ -78,6 +78,7 @@ struct FormatSettings\n     {\n         bool empty_as_default = false;\n         bool crlf_end_of_line = false;\n+        String null_representation = \"\\\\N\";\n     };\n \n     TSV tsv;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01474_custom_null_tsv.reference b/tests/queries/0_stateless/01474_custom_null_tsv.reference\nnew file mode 100644\nindex 000000000000..c1e23d80b034\n--- /dev/null\n+++ b/tests/queries/0_stateless/01474_custom_null_tsv.reference\n@@ -0,0 +1,1 @@\n+MyNull\ndiff --git a/tests/queries/0_stateless/01474_custom_null_tsv.sh b/tests/queries/0_stateless/01474_custom_null_tsv.sh\nnew file mode 100755\nindex 000000000000..ee9bb7900a07\n--- /dev/null\n+++ b/tests/queries/0_stateless/01474_custom_null_tsv.sh\n@@ -0,0 +1,14 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. \"$CURDIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_CLIENT --query=\"DROP TABLE IF EXISTS tsv_custom_null\";\n+$CLICKHOUSE_CLIENT --query=\"CREATE TABLE tsv_custom_null (id Nullable(UInt32)) ENGINE = Memory\";\n+\n+$CLICKHOUSE_CLIENT --query=\"INSERT INTO tsv_custom_null VALUES (NULL)\";\n+\n+$CLICKHOUSE_CLIENT --output_format_tsv_null_representation='MyNull' --query=\"SELECT * FROM tsv_custom_null FORMAT TSV\";\n+\n+$CLICKHOUSE_CLIENT --query=\"DROP TABLE tsv_custom_null\";\n+\n",
  "problem_statement": "Allow configurable NULL representation for TSV\nWhen using TSVWithNamesAndTypes or other TSV variants \\N is used to represent NULL and \\ is used to escape the expected characters in a string sequence. For tools such as pandas, the read_csv method allows you to specify the escape sequence to parse escaped strings correctly however this results in the escaped \\ being stripped from the NULL representation.\r\n\r\nCan the NULL representation be made configurable?\n",
  "hints_text": "Yes, it will be very easy to add support for custom substitution for NULL.",
  "created_at": "2020-09-08T12:41:12Z",
  "modified_files": [
    "src/Core/Settings.h",
    "src/DataTypes/DataTypeNullable.cpp",
    "src/Formats/FormatFactory.cpp",
    "src/Formats/FormatSettings.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01474_custom_null_tsv.reference",
    "b/tests/queries/0_stateless/01474_custom_null_tsv.sh"
  ]
}