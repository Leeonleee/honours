{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 29650,
  "instance_id": "ClickHouse__ClickHouse-29650",
  "issue_numbers": [
    "29559"
  ],
  "base_commit": "746964af88aa2b50c8cb119225720a2310bbc013",
  "patch": "diff --git a/src/Core/QualifiedTableName.h b/src/Core/QualifiedTableName.h\nindex c1cb9b27d15a..4642465f4614 100644\n--- a/src/Core/QualifiedTableName.h\n+++ b/src/Core/QualifiedTableName.h\n@@ -40,6 +40,22 @@ struct QualifiedTableName\n         return hash_state.get64();\n     }\n \n+    std::vector<std::string> getParts() const\n+    {\n+        if (database.empty())\n+            return {table};\n+        else\n+            return {database, table};\n+    }\n+\n+    std::string getFullName() const\n+    {\n+        if (database.empty())\n+            return table;\n+        else\n+            return database + '.' + table;\n+    }\n+\n     /// NOTE: It's different from compound identifier parsing and does not support escaping and dots in name.\n     /// Usually it's better to use ParserIdentifier instead,\n     /// but we parse DDL dictionary name (and similar things) this way for historical reasons.\ndiff --git a/src/Interpreters/AddDefaultDatabaseVisitor.h b/src/Interpreters/AddDefaultDatabaseVisitor.h\nindex 3d93118047fd..98d33db30215 100644\n--- a/src/Interpreters/AddDefaultDatabaseVisitor.h\n+++ b/src/Interpreters/AddDefaultDatabaseVisitor.h\n@@ -10,10 +10,14 @@\n #include <Parsers/ASTSelectWithUnionQuery.h>\n #include <Parsers/ASTTablesInSelectQuery.h>\n #include <Parsers/ASTFunction.h>\n+#include <Parsers/ASTCreateQuery.h>\n #include <Parsers/DumpASTNode.h>\n #include <Parsers/ASTAlterQuery.h>\n #include <Interpreters/DatabaseAndTableWithAlias.h>\n #include <Interpreters/IdentifierSemantic.h>\n+#include <Interpreters/Context.h>\n+#include <Interpreters/ExternalDictionariesLoader.h>\n+#include <Interpreters/misc.h>\n \n namespace DB\n {\n@@ -26,11 +30,12 @@ class AddDefaultDatabaseVisitor\n {\n public:\n     explicit AddDefaultDatabaseVisitor(\n-        const String & database_name_, bool only_replace_current_database_function_ = false, WriteBuffer * ostr_ = nullptr)\n-        : database_name(database_name_)\n+        ContextPtr context_,\n+        const String & database_name_,\n+        bool only_replace_current_database_function_ = false)\n+        : context(context_)\n+        , database_name(database_name_)\n         , only_replace_current_database_function(only_replace_current_database_function_)\n-        , visit_depth(0)\n-        , ostr(ostr_)\n     {}\n \n     void visitDDL(ASTPtr & ast) const\n@@ -64,11 +69,19 @@ class AddDefaultDatabaseVisitor\n         visit(select, unused);\n     }\n \n+    void visit(ASTColumns & columns) const\n+    {\n+        for (auto & child : columns.children)\n+            visit(child);\n+    }\n+\n private:\n+\n+    ContextPtr context;\n+\n     const String database_name;\n+\n     bool only_replace_current_database_function = false;\n-    mutable size_t visit_depth;\n-    WriteBuffer * ostr;\n \n     void visit(ASTSelectWithUnionQuery & select, ASTPtr &) const\n     {\n@@ -117,15 +130,8 @@ class AddDefaultDatabaseVisitor\n \n     void visit(ASTFunction & function, ASTPtr &) const\n     {\n-        bool is_operator_in = false;\n-        for (const auto * name : {\"in\", \"notIn\", \"globalIn\", \"globalNotIn\"})\n-        {\n-            if (function.name == name)\n-            {\n-                is_operator_in = true;\n-                break;\n-            }\n-        }\n+        bool is_operator_in = functionIsInOrGlobalInOperator(function.name);\n+        bool is_dict_get = functionIsDictGet(function.name);\n \n         for (auto & child : function.children)\n         {\n@@ -133,7 +139,30 @@ class AddDefaultDatabaseVisitor\n             {\n                 for (size_t i = 0; i < child->children.size(); ++i)\n                 {\n-                    if (is_operator_in && i == 1)\n+                    if (is_dict_get && i == 0)\n+                    {\n+                        if (auto * identifier = child->children[i]->as<ASTIdentifier>())\n+                        {\n+                            /// Identifier already qualified\n+                            if (identifier->compound())\n+                                continue;\n+\n+                            auto qualified_dictionary_name = context->getExternalDictionariesLoader().qualifyDictionaryNameWithDatabase(identifier->name(), context);\n+                            child->children[i] = std::make_shared<ASTIdentifier>(qualified_dictionary_name.getParts());\n+                        }\n+                        else if (auto * literal = child->children[i]->as<ASTLiteral>())\n+                        {\n+                            auto & literal_value = literal->value;\n+\n+                            if (literal_value.getType() != Field::Types::String)\n+                                continue;\n+\n+                            auto dictionary_name = literal_value.get<String>();\n+                            auto qualified_dictionary_name = context->getExternalDictionariesLoader().qualifyDictionaryNameWithDatabase(dictionary_name, context);\n+                            literal_value = qualified_dictionary_name.getFullName();\n+                        }\n+                    }\n+                    else if (is_operator_in && i == 1)\n                     {\n                         /// XXX: for some unknown reason this place assumes that argument can't be an alias,\n                         ///      like in the similar code in `MarkTableIdentifierVisitor`.\n@@ -151,11 +180,15 @@ class AddDefaultDatabaseVisitor\n                             visit(child->children[i]);\n                     }\n                     else\n+                    {\n                         visit(child->children[i]);\n+                    }\n                 }\n             }\n             else\n+            {\n                 visit(child);\n+            }\n         }\n     }\n \n@@ -170,7 +203,6 @@ class AddDefaultDatabaseVisitor\n     {\n         if (T * t = typeid_cast<T *>(ast.get()))\n         {\n-            DumpASTNode dump(*ast, ostr, visit_depth, \"addDefaultDatabaseName\");\n             visit(*t, ast);\n             return true;\n         }\ndiff --git a/src/Interpreters/ExternalDictionariesLoader.cpp b/src/Interpreters/ExternalDictionariesLoader.cpp\nindex bf2ce9e66eeb..c09ab8b78e55 100644\n--- a/src/Interpreters/ExternalDictionariesLoader.cpp\n+++ b/src/Interpreters/ExternalDictionariesLoader.cpp\n@@ -87,6 +87,28 @@ DictionaryStructure ExternalDictionariesLoader::getDictionaryStructure(const std\n     return ExternalDictionariesLoader::getDictionaryStructure(*load_result.config);\n }\n \n+QualifiedTableName ExternalDictionariesLoader::qualifyDictionaryNameWithDatabase(const std::string & dictionary_name, ContextPtr query_context) const\n+{\n+    auto qualified_name = QualifiedTableName::tryParseFromString(dictionary_name);\n+    if (!qualified_name)\n+    {\n+        QualifiedTableName qualified_dictionary_name;\n+        qualified_dictionary_name.table = dictionary_name;\n+        return qualified_dictionary_name;\n+    }\n+\n+    if (qualified_name->database.empty() && has(dictionary_name))\n+    {\n+        /// This is xml dictionary\n+        return *qualified_name;\n+    }\n+\n+    if (qualified_name->database.empty())\n+        qualified_name->database = query_context->getCurrentDatabase();\n+\n+    return *qualified_name;\n+}\n+\n std::string ExternalDictionariesLoader::resolveDictionaryName(const std::string & dictionary_name, const std::string & current_database_name) const\n {\n     if (has(dictionary_name))\ndiff --git a/src/Interpreters/ExternalDictionariesLoader.h b/src/Interpreters/ExternalDictionariesLoader.h\nindex f748d75d9084..421154a6d4fb 100644\n--- a/src/Interpreters/ExternalDictionariesLoader.h\n+++ b/src/Interpreters/ExternalDictionariesLoader.h\n@@ -27,6 +27,8 @@ class ExternalDictionariesLoader : public ExternalLoader, WithContext\n \n     void reloadDictionary(const std::string & dictionary_name, ContextPtr context) const;\n \n+    QualifiedTableName qualifyDictionaryNameWithDatabase(const std::string & dictionary_name, ContextPtr context) const;\n+\n     DictionaryStructure getDictionaryStructure(const std::string & dictionary_name, ContextPtr context) const;\n \n     static DictionaryStructure getDictionaryStructure(const Poco::Util::AbstractConfiguration & config, const std::string & key_in_config = \"dictionary\");\ndiff --git a/src/Interpreters/InterpreterAlterQuery.cpp b/src/Interpreters/InterpreterAlterQuery.cpp\nindex 1c613758ecc1..90d5da35df87 100644\n--- a/src/Interpreters/InterpreterAlterQuery.cpp\n+++ b/src/Interpreters/InterpreterAlterQuery.cpp\n@@ -80,7 +80,7 @@ BlockIO InterpreterAlterQuery::executeToTable(const ASTAlterQuery & alter)\n     auto metadata_snapshot = table->getInMemoryMetadataPtr();\n \n     /// Add default database to table identifiers that we can encounter in e.g. default expressions, mutation expression, etc.\n-    AddDefaultDatabaseVisitor visitor(table_id.getDatabaseName());\n+    AddDefaultDatabaseVisitor visitor(getContext(), table_id.getDatabaseName());\n     ASTPtr command_list_ptr = alter.command_list->ptr();\n     visitor.visit(command_list_ptr);\n \ndiff --git a/src/Interpreters/InterpreterCreateQuery.cpp b/src/Interpreters/InterpreterCreateQuery.cpp\nindex 530b10703c53..6d38c55bd62c 100644\n--- a/src/Interpreters/InterpreterCreateQuery.cpp\n+++ b/src/Interpreters/InterpreterCreateQuery.cpp\n@@ -920,10 +920,16 @@ BlockIO InterpreterCreateQuery::createTable(ASTCreateQuery & create)\n     {\n         // Expand CTE before filling default database\n         ApplyWithSubqueryVisitor().visit(*create.select);\n-        AddDefaultDatabaseVisitor visitor(current_database);\n+        AddDefaultDatabaseVisitor visitor(getContext(), current_database);\n         visitor.visit(*create.select);\n     }\n \n+    if (create.columns_list)\n+    {\n+        AddDefaultDatabaseVisitor visitor(getContext(), current_database);\n+        visitor.visit(*create.columns_list);\n+    }\n+\n     /// Set and retrieve list of columns, indices and constraints. Set table engine if needed. Rewrite query in canonical way.\n     TableProperties properties = getTablePropertiesAndNormalizeCreateQuery(create);\n \ndiff --git a/src/Interpreters/executeDDLQueryOnCluster.cpp b/src/Interpreters/executeDDLQueryOnCluster.cpp\nindex 576c1f3ffdd4..45e1c580f01d 100644\n--- a/src/Interpreters/executeDDLQueryOnCluster.cpp\n+++ b/src/Interpreters/executeDDLQueryOnCluster.cpp\n@@ -152,7 +152,7 @@ BlockIO executeDDLQueryOnCluster(const ASTPtr & query_ptr_, ContextPtr context,\n         }\n     }\n \n-    AddDefaultDatabaseVisitor visitor(current_database, !use_local_default_database);\n+    AddDefaultDatabaseVisitor visitor(context, current_database, !use_local_default_database);\n     visitor.visitDDL(query_ptr);\n \n     /// Check access rights, assume that all servers have the same users config\ndiff --git a/src/Storages/LiveView/StorageLiveView.cpp b/src/Storages/LiveView/StorageLiveView.cpp\nindex 4641a1631f2f..d387c5f5e531 100644\n--- a/src/Storages/LiveView/StorageLiveView.cpp\n+++ b/src/Storages/LiveView/StorageLiveView.cpp\n@@ -70,7 +70,7 @@ static StorageID extractDependentTable(ASTPtr & query, ContextPtr context, const\n         if (db_and_table->database.empty())\n         {\n             db_and_table->database = select_database_name;\n-            AddDefaultDatabaseVisitor visitor(select_database_name);\n+            AddDefaultDatabaseVisitor visitor(context, select_database_name);\n             visitor.visit(select_query);\n         }\n         else\ndiff --git a/src/Storages/SelectQueryDescription.cpp b/src/Storages/SelectQueryDescription.cpp\nindex 05747a9a2608..018a9f0ea980 100644\n--- a/src/Storages/SelectQueryDescription.cpp\n+++ b/src/Storages/SelectQueryDescription.cpp\n@@ -48,7 +48,7 @@ StorageID extractDependentTableFromSelectQuery(ASTSelectQuery & query, ContextPt\n {\n     if (add_default_db)\n     {\n-        AddDefaultDatabaseVisitor visitor(context->getCurrentDatabase(), false, nullptr);\n+        AddDefaultDatabaseVisitor visitor(context, context->getCurrentDatabase());\n         visitor.visit(query);\n     }\n \ndiff --git a/src/Storages/StorageMaterializedView.cpp b/src/Storages/StorageMaterializedView.cpp\nindex d2493ff7c43d..5436d306122a 100644\n--- a/src/Storages/StorageMaterializedView.cpp\n+++ b/src/Storages/StorageMaterializedView.cpp\n@@ -9,7 +9,6 @@\n #include <Interpreters/InterpreterDropQuery.h>\n #include <Interpreters/InterpreterRenameQuery.h>\n #include <Interpreters/getTableExpressions.h>\n-#include <Interpreters/AddDefaultDatabaseVisitor.h>\n #include <Interpreters/getHeaderForProcessingStage.h>\n #include <Access/AccessFlags.h>\n #include <DataStreams/IBlockOutputStream.h>\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02097_default_dict_get_add_database.reference b/tests/queries/0_stateless/02097_default_dict_get_add_database.reference\nnew file mode 100644\nindex 000000000000..9b0ac07a68a1\n--- /dev/null\n+++ b/tests/queries/0_stateless/02097_default_dict_get_add_database.reference\n@@ -0,0 +1,1 @@\n+CREATE TABLE `02097_db`.test_table_default (`data_1` UInt64 DEFAULT dictGetUInt64(\\'02097_db.test_dictionary\\', \\'data_column_1\\', toUInt64(0)), `data_2` UInt8 DEFAULT dictGet(`02097_db`.test_dictionary, \\'data_column_2\\', toUInt64(0))) ENGINE = TinyLog\ndiff --git a/tests/queries/0_stateless/02097_default_dict_get_add_database.sql b/tests/queries/0_stateless/02097_default_dict_get_add_database.sql\nnew file mode 100644\nindex 000000000000..af177566476b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02097_default_dict_get_add_database.sql\n@@ -0,0 +1,44 @@\n+-- Tags: no-parallel\n+\n+DROP DATABASE IF EXISTS 02097_db;\n+CREATE DATABASE 02097_db;\n+\n+USE 02097_db;\n+\n+DROP TABLE IF EXISTS test_table;\n+CREATE TABLE test_table\n+(\n+    key_column UInt64,\n+    data_column_1 UInt64,\n+    data_column_2 UInt8\n+)\n+ENGINE = MergeTree\n+ORDER BY key_column;\n+\n+DROP DICTIONARY IF EXISTS test_dictionary;\n+CREATE DICTIONARY test_dictionary\n+(\n+    key_column UInt64 DEFAULT 0,\n+    data_column_1 UInt64 DEFAULT 1,\n+    data_column_2 UInt8 DEFAULT 1\n+)\n+PRIMARY KEY key_column\n+LAYOUT(DIRECT())\n+SOURCE(CLICKHOUSE(TABLE 'test_table'));\n+\n+DROP TABLE IF EXISTS test_table_default;\n+CREATE TABLE test_table_default\n+(\n+    data_1 DEFAULT dictGetUInt64('test_dictionary', 'data_column_1', toUInt64(0)),\n+    data_2 DEFAULT dictGet(test_dictionary, 'data_column_2', toUInt64(0))\n+)\n+ENGINE=TinyLog;\n+\n+SELECT create_table_query FROM system.tables WHERE name = 'test_table_default' AND database = '02097_db';\n+\n+DROP DICTIONARY test_dictionary;\n+DROP TABLE test_table;\n+DROP TABLE test_table_default;\n+\n+DROP DATABASE 02097_db;\n+\n",
  "problem_statement": "Cannot restart server:  <Error> Application: DB::Exception: Dictionary (`...`) not found\nHow to reproduce: Run such query (from test 02015_column_default_dict_get_identifier.sql) in client with specified database (Ex: `clickhouse-client --database test_dict`)\r\n```sql\r\nDROP TABLE IF EXISTS test_table;\r\nCREATE TABLE test_table\r\n(\r\n    key_column UInt64,\r\n    data_column_1 UInt64,\r\n    data_column_2 UInt8\r\n)\r\nENGINE = MergeTree\r\nORDER BY key_column;\r\n\r\nINSERT INTO test_table VALUES (0, 0, 0);\r\n\r\nDROP DICTIONARY IF EXISTS test_dictionary;\r\nCREATE DICTIONARY test_dictionary\r\n(\r\n    key_column UInt64 DEFAULT 0,\r\n    data_column_1 UInt64 DEFAULT 1,\r\n    data_column_2 UInt8 DEFAULT 1\r\n)\r\nPRIMARY KEY key_column\r\nLAYOUT(DIRECT())\r\nSOURCE(CLICKHOUSE(TABLE 'test_table'));\r\n\r\nDROP TABLE IF EXISTS test_table_default;\r\nCREATE TABLE test_table_default\r\n(\r\n    data_1 DEFAULT dictGetUInt64('test_dictionary', 'data_column_1', toUInt64(0)),\r\n    data_2 DEFAULT dictGet(test_dictionary, 'data_column_2', toUInt64(0))\r\n)\r\nENGINE=TinyLog;\r\n\r\nINSERT INTO test_table_default(data_1) VALUES (5);\r\nSELECT * FROM test_table_default;\r\n```\r\nAfter such queries server failes to restart with error:\r\n```\r\n <Error> Application: DB::Exception: Dictionary (`test_dictionary`) not found: While processing _CAST(dictGetUInt64('test_dictionary', 'data_column_1', toUInt64(0)) AS data_1_tmp_alter14607434459480316400, 'UInt64') AS data_1: default expression and column type are incompatible.: Cannot attach table `test_dict`.`test_table_default` from metadata file /home/avogar/tmp/server/store/687/6874a1e6-7336-4ebc-a874-a1e673362ebc/test_table_default.sql from query ATTACH TABLE test_dict.test_table_default UUID 'dd4b41a4-e24a-4a54-9d4b-41a4e24a5a54' (`data_1` UInt64 DEFAULT dictGetUInt64('test_dictionary', 'data_column_1', toUInt64(0)), `data_2` UInt8 DEFAULT dictGet(test_dictionary, 'data_column_2', toUInt64(0))) ENGINE = TinyLog\r\n```\r\nFound in https://github.com/ClickHouse/ClickHouse/pull/27928.\n",
  "hints_text": "@kitaisreal you just changed the test without solving the problem. We still can create queries after which server fails to restart - such queries shouldn't exist.",
  "created_at": "2021-10-01T19:36:43Z",
  "modified_files": [
    "src/Core/QualifiedTableName.h",
    "src/Interpreters/AddDefaultDatabaseVisitor.h",
    "src/Interpreters/ExternalDictionariesLoader.cpp",
    "src/Interpreters/ExternalDictionariesLoader.h",
    "src/Interpreters/InterpreterAlterQuery.cpp",
    "src/Interpreters/InterpreterCreateQuery.cpp",
    "src/Interpreters/executeDDLQueryOnCluster.cpp",
    "src/Storages/LiveView/StorageLiveView.cpp",
    "src/Storages/SelectQueryDescription.cpp",
    "src/Storages/StorageMaterializedView.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02097_default_dict_get_add_database.reference",
    "b/tests/queries/0_stateless/02097_default_dict_get_add_database.sql"
  ]
}