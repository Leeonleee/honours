diff --git a/src/AggregateFunctions/AggregateFunctionMannWhitney.h b/src/AggregateFunctions/AggregateFunctionMannWhitney.h
index 1451536d5199..7efdebf16391 100644
--- a/src/AggregateFunctions/AggregateFunctionMannWhitney.h
+++ b/src/AggregateFunctions/AggregateFunctionMannWhitney.h
@@ -174,6 +174,8 @@ class AggregateFunctionMannWhitney final:
         return "mannWhitneyUTest";
     }
 
+    bool allocatesMemoryInArena() const override { return true; }
+
     DataTypePtr getReturnType() const override
     {
         DataTypes types
@@ -208,7 +210,7 @@ class AggregateFunctionMannWhitney final:
     void merge(AggregateDataPtr __restrict place, ConstAggregateDataPtr rhs, Arena * arena) const override
     {
         auto & a = this->data(place);
-        auto & b = this->data(rhs);
+        const auto & b = this->data(rhs);
 
         a.merge(b, arena);
     }
diff --git a/src/AggregateFunctions/AggregateFunctionRankCorrelation.h b/src/AggregateFunctions/AggregateFunctionRankCorrelation.h
index a7e0852378cd..fbba1b99ab91 100644
--- a/src/AggregateFunctions/AggregateFunctionRankCorrelation.h
+++ b/src/AggregateFunctions/AggregateFunctionRankCorrelation.h
@@ -58,6 +58,8 @@ class AggregateFunctionRankCorrelation :
         return "rankCorr";
     }
 
+    bool allocatesMemoryInArena() const override { return true; }
+
     DataTypePtr getReturnType() const override
     {
         return std::make_shared<DataTypeNumber<Float64>>();
diff --git a/src/Common/Arena.h b/src/Common/Arena.h
index 0f4f0420c380..4d14c15197d7 100644
--- a/src/Common/Arena.h
+++ b/src/Common/Arena.h
@@ -128,7 +128,7 @@ class Arena : private boost::noncopyable
     template <size_t> friend class AlignedArenaAllocator;
 
 public:
-    Arena(size_t initial_size_ = 4096, size_t growth_factor_ = 2, size_t linear_growth_threshold_ = 128 * 1024 * 1024)
+    explicit Arena(size_t initial_size_ = 4096, size_t growth_factor_ = 2, size_t linear_growth_threshold_ = 128 * 1024 * 1024)
         : growth_factor(growth_factor_), linear_growth_threshold(linear_growth_threshold_),
         head(new MemoryChunk(initial_size_, nullptr)), size_in_bytes(head->size()),
         page_size(static_cast<size_t>(::getPageSize()))
@@ -160,7 +160,7 @@ class Arena : private boost::noncopyable
             void * head_pos = head->pos;
             size_t space = head->end - head->pos;
 
-            auto res = static_cast<char *>(std::align(alignment, size, head_pos, space));
+            auto * res = static_cast<char *>(std::align(alignment, size, head_pos, space));
             if (res)
             {
                 head->pos = static_cast<char *>(head_pos);
