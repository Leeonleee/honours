{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 25962,
  "instance_id": "ClickHouse__ClickHouse-25962",
  "issue_numbers": [
    "5897"
  ],
  "base_commit": "b72413854115f260fcc9129e1421f3cadba6e311",
  "patch": "diff --git a/src/Common/CurrentMetrics.cpp b/src/Common/CurrentMetrics.cpp\nindex 1e482361f859..e9fa13e11e6e 100644\n--- a/src/Common/CurrentMetrics.cpp\n+++ b/src/Common/CurrentMetrics.cpp\n@@ -30,6 +30,8 @@\n     M(OpenFileForWrite, \"Number of files open for writing\") \\\n     M(Read, \"Number of read (read, pread, io_getevents, etc.) syscalls in fly\") \\\n     M(Write, \"Number of write (write, pwrite, io_getevents, etc.) syscalls in fly\") \\\n+    M(NetworkReceive, \"Number of threads receiving data from network. Only ClickHouse-related network interaction is included, not by 3rd party libraries.\") \\\n+    M(NetworkSend, \"Number of threads sending data to network. Only ClickHouse-related network interaction is included, not by 3rd party libraries.\") \\\n     M(SendScalars, \"Number of connections that are sending data for scalars to remote servers.\") \\\n     M(SendExternalTables, \"Number of connections that are sending data for external tables to remote servers. External tables are used to implement GLOBAL IN and GLOBAL JOIN operators with distributed subqueries.\") \\\n     M(QueryThread, \"Number of query processing threads\") \\\ndiff --git a/src/Common/ProfileEvents.cpp b/src/Common/ProfileEvents.cpp\nindex 86f06f274552..dffe2239e62a 100644\n--- a/src/Common/ProfileEvents.cpp\n+++ b/src/Common/ProfileEvents.cpp\n@@ -49,8 +49,10 @@\n     M(CreatedReadBufferMMapFailed, \"\") \\\n     M(DiskReadElapsedMicroseconds, \"Total time spent waiting for read syscall. This include reads from page cache.\") \\\n     M(DiskWriteElapsedMicroseconds, \"Total time spent waiting for write syscall. This include writes to page cache.\") \\\n-    M(NetworkReceiveElapsedMicroseconds, \"\") \\\n-    M(NetworkSendElapsedMicroseconds, \"\") \\\n+    M(NetworkReceiveElapsedMicroseconds, \"Total time spent waiting for data to receive or receiving data from network. Only ClickHouse-related network interaction is included, not by 3rd party libraries.\") \\\n+    M(NetworkSendElapsedMicroseconds, \"Total time spent waiting for data to send to network or sending data to network. Only ClickHouse-related network interaction is included, not by 3rd party libraries..\") \\\n+    M(NetworkReceiveBytes, \"Total number of bytes received from network. Only ClickHouse-related network interaction is included, not by 3rd party libraries.\") \\\n+    M(NetworkSendBytes, \"Total number of bytes send to network. Only ClickHouse-related network interaction is included, not by 3rd party libraries.\") \\\n     M(ThrottlerSleepMicroseconds, \"Total time a query was sleeping to conform the 'max_network_bandwidth' setting.\") \\\n     \\\n     M(QueryMaskingRulesMatch, \"Number of times query masking rules was successfully matched.\") \\\ndiff --git a/src/IO/ReadBufferFromPocoSocket.cpp b/src/IO/ReadBufferFromPocoSocket.cpp\nindex e043764d280a..5e8e41d0c3ef 100644\n--- a/src/IO/ReadBufferFromPocoSocket.cpp\n+++ b/src/IO/ReadBufferFromPocoSocket.cpp\n@@ -5,11 +5,19 @@\n #include <Common/Exception.h>\n #include <Common/NetException.h>\n #include <Common/Stopwatch.h>\n+#include <Common/ProfileEvents.h>\n+#include <Common/CurrentMetrics.h>\n \n \n namespace ProfileEvents\n {\n     extern const Event NetworkReceiveElapsedMicroseconds;\n+    extern const Event NetworkReceiveBytes;\n+}\n+\n+namespace CurrentMetrics\n+{\n+    extern const Metric NetworkReceive;\n }\n \n \n@@ -31,6 +39,8 @@ bool ReadBufferFromPocoSocket::nextImpl()\n     /// Add more details to exceptions.\n     try\n     {\n+        CurrentMetrics::Increment metric_increment(CurrentMetrics::NetworkReceive);\n+\n         /// If async_callback is specified, and read will block, run async_callback and try again later.\n         /// It is expected that file descriptor may be polled externally.\n         /// Note that receive timeout is not checked here. External code should check it while polling.\n@@ -57,6 +67,7 @@ bool ReadBufferFromPocoSocket::nextImpl()\n \n     /// NOTE: it is quite inaccurate on high loads since the thread could be replaced by another one\n     ProfileEvents::increment(ProfileEvents::NetworkReceiveElapsedMicroseconds, watch.elapsedMicroseconds());\n+    ProfileEvents::increment(ProfileEvents::NetworkReceiveBytes, bytes_read);\n \n     if (bytes_read)\n         working_buffer.resize(bytes_read);\ndiff --git a/src/IO/WriteBufferFromPocoSocket.cpp b/src/IO/WriteBufferFromPocoSocket.cpp\nindex 78705857ec49..a0e4de4c831b 100644\n--- a/src/IO/WriteBufferFromPocoSocket.cpp\n+++ b/src/IO/WriteBufferFromPocoSocket.cpp\n@@ -6,11 +6,19 @@\n #include <Common/NetException.h>\n #include <Common/Stopwatch.h>\n #include <Common/MemoryTracker.h>\n+#include <Common/ProfileEvents.h>\n+#include <Common/CurrentMetrics.h>\n \n \n namespace ProfileEvents\n {\n     extern const Event NetworkSendElapsedMicroseconds;\n+    extern const Event NetworkSendBytes;\n+}\n+\n+namespace CurrentMetrics\n+{\n+    extern const Metric NetworkSend;\n }\n \n \n@@ -40,6 +48,7 @@ void WriteBufferFromPocoSocket::nextImpl()\n         /// Add more details to exceptions.\n         try\n         {\n+            CurrentMetrics::Increment metric_increment(CurrentMetrics::NetworkSend);\n             res = socket.impl()->sendBytes(working_buffer.begin() + bytes_written, offset() - bytes_written);\n         }\n         catch (const Poco::Net::NetException & e)\n@@ -62,6 +71,7 @@ void WriteBufferFromPocoSocket::nextImpl()\n     }\n \n     ProfileEvents::increment(ProfileEvents::NetworkSendElapsedMicroseconds, watch.elapsedMicroseconds());\n+    ProfileEvents::increment(ProfileEvents::NetworkSendBytes, bytes_written);\n }\n \n WriteBufferFromPocoSocket::WriteBufferFromPocoSocket(Poco::Net::Socket & socket_, size_t buf_size)\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01939_network_receive_bytes_metrics.reference b/tests/queries/0_stateless/01939_network_receive_bytes_metrics.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01939_network_receive_bytes_metrics.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/01939_network_receive_bytes_metrics.sh b/tests/queries/0_stateless/01939_network_receive_bytes_metrics.sh\nnew file mode 100755\nindex 000000000000..03babad40f35\n--- /dev/null\n+++ b/tests/queries/0_stateless/01939_network_receive_bytes_metrics.sh\n@@ -0,0 +1,16 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+${CLICKHOUSE_CLIENT} --multiquery --query \"DROP TABLE IF EXISTS t; CREATE TABLE t (x UInt64) ENGINE = Memory;\"\n+\n+seq 1 1000 | ${CLICKHOUSE_CLIENT} --query \"INSERT INTO t FORMAT TSV\"\n+\n+${CLICKHOUSE_CLIENT} --multiquery --query \"SYSTEM FLUSH LOGS;\n+    WITH ProfileEvents['NetworkReceiveBytes'] AS bytes\n+    SELECT bytes >= 8000 AND bytes < 9000 ? 1 : bytes FROM system.query_log\n+        WHERE current_database = currentDatabase() AND query_kind = 'Insert' AND event_date >= yesterday() AND type = 2 ORDER BY event_time DESC LIMIT 1;\"\n+\n+${CLICKHOUSE_CLIENT} --query \"DROP TABLE t\"\ndiff --git a/tests/queries/0_stateless/01939_network_send_bytes_metrics.reference b/tests/queries/0_stateless/01939_network_send_bytes_metrics.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01939_network_send_bytes_metrics.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/01939_network_send_bytes_metrics.sh b/tests/queries/0_stateless/01939_network_send_bytes_metrics.sh\nnew file mode 100755\nindex 000000000000..e862a273de47\n--- /dev/null\n+++ b/tests/queries/0_stateless/01939_network_send_bytes_metrics.sh\n@@ -0,0 +1,16 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CURDIR\"/../shell_config.sh\n+\n+${CLICKHOUSE_CLIENT} --multiquery --query \"DROP TABLE IF EXISTS t; CREATE TABLE t (x UInt64) ENGINE = Memory;\"\n+\n+${CLICKHOUSE_CLIENT} --query \"SELECT number FROM numbers(1000)\" > /dev/null\n+\n+${CLICKHOUSE_CLIENT} --multiquery --query \"SYSTEM FLUSH LOGS;\n+    WITH ProfileEvents['NetworkSendBytes'] AS bytes\n+    SELECT bytes >= 8000 AND bytes < 9000 ? 1 : bytes FROM system.query_log\n+        WHERE current_database = currentDatabase() AND query_kind = 'Select' AND event_date >= yesterday() AND type = 2 ORDER BY event_time DESC LIMIT 1;\"\n+\n+${CLICKHOUSE_CLIENT} --query \"DROP TABLE t\"\n",
  "problem_statement": "There is no ProfileEvent for bytes transferred over network\n\n",
  "hints_text": "",
  "created_at": "2021-07-03T21:02:00Z",
  "modified_files": [
    "src/Common/CurrentMetrics.cpp",
    "src/Common/ProfileEvents.cpp",
    "src/IO/ReadBufferFromPocoSocket.cpp",
    "src/IO/WriteBufferFromPocoSocket.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01939_network_receive_bytes_metrics.reference",
    "b/tests/queries/0_stateless/01939_network_receive_bytes_metrics.sh",
    "b/tests/queries/0_stateless/01939_network_send_bytes_metrics.reference",
    "b/tests/queries/0_stateless/01939_network_send_bytes_metrics.sh"
  ]
}