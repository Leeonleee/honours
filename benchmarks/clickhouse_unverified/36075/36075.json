{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 36075,
  "instance_id": "ClickHouse__ClickHouse-36075",
  "issue_numbers": [
    "36071"
  ],
  "base_commit": "4691a428cb009d95f3a18dfaf88a78d49e6524f7",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/limitPushDown.cpp b/src/Processors/QueryPlan/Optimizations/limitPushDown.cpp\nindex eb65f49103b0..cb7313764734 100644\n--- a/src/Processors/QueryPlan/Optimizations/limitPushDown.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/limitPushDown.cpp\n@@ -3,6 +3,7 @@\n #include <Processors/QueryPlan/LimitStep.h>\n #include <Processors/QueryPlan/TotalsHavingStep.h>\n #include <Processors/QueryPlan/SortingStep.h>\n+#include <Processors/QueryPlan/WindowStep.h>\n #include <Common/typeid_cast.h>\n \n namespace DB::QueryPlanOptimizations\n@@ -66,6 +67,11 @@ size_t tryPushDownLimit(QueryPlan::Node * parent_node, QueryPlan::Nodes &)\n     if (typeid_cast<const TotalsHavingStep *>(child.get()))\n         return 0;\n \n+    /// Disable for WindowStep.\n+    /// TODO: we can push down limit in some cases if increase the limit value.\n+    if (typeid_cast<const WindowStep *>(child.get()))\n+        return 0;\n+\n     /// Now we should decide if pushing down limit possible for this step.\n \n     const auto & transform_traits = transforming->getTransformTraits();\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02265_limit_push_down_over_window_functions_bug.reference b/tests/queries/0_stateless/02265_limit_push_down_over_window_functions_bug.reference\nnew file mode 100644\nindex 000000000000..592637a91fc9\n--- /dev/null\n+++ b/tests/queries/0_stateless/02265_limit_push_down_over_window_functions_bug.reference\n@@ -0,0 +1,10 @@\n+0\t1\n+1\t2\n+2\t3\n+a\t2\n+0\t10000000\n+1\t10000000\n+2\t10000000\n+0\t10000000\n+1\t10000000\n+2\t10000000\ndiff --git a/tests/queries/0_stateless/02265_limit_push_down_over_window_functions_bug.sql b/tests/queries/0_stateless/02265_limit_push_down_over_window_functions_bug.sql\nnew file mode 100644\nindex 000000000000..208ec8ef11ff\n--- /dev/null\n+++ b/tests/queries/0_stateless/02265_limit_push_down_over_window_functions_bug.sql\n@@ -0,0 +1,16 @@\n+SELECT\n+    number,\n+    leadInFrame(number) OVER w AS W\n+FROM numbers(10)\n+WINDOW w AS (ORDER BY number ASC Rows BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n+LIMIT 3;\n+\n+WITH arrayJoin(['a', 'a', 'b', 'b']) AS field\n+SELECT\n+    field,\n+    count() OVER (PARTITION BY field)\n+ORDER BY field ASC\n+LIMIT 1;\n+\n+select * from (\u3000( select *, count() over () cnt from\u3000( select * from numbers(10000000) )\u3000)\u3000)  limit 3\u3000;\n+select * from (\u3000( select *, count() over () cnt from\u3000( select * from numbers(10000000) )\u3000)\u3000) order by number limit 3\u3000;\n",
  "problem_statement": "Window functions should not be affected by LIMIT\n```\r\nSELECT\r\n    number,\r\n    leadInFrame(number) OVER w AS W\r\nFROM numbers(10)\r\nWINDOW w AS (ORDER BY number ASC Rows BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\r\nLIMIT 3;\r\n\r\n\u250c\u2500number\u2500\u252c\u2500W\u2500\u2510\r\n\u2502      0 \u2502 1 \u2502\r\n\u2502      1 \u2502 2 \u2502\r\n\u2502      2 \u2502 0 \u2502 <-- W should be 3!\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\r\n```\r\n\r\nIn contrast:  https://www.db-fiddle.com/f/hNNECnp7YC3E2zBKBaxN6T/1\n",
  "hints_text": "Duplicate of https://github.com/ClickHouse/ClickHouse/issues/23125 ",
  "created_at": "2022-04-08T13:42:38Z",
  "modified_files": [
    "src/Processors/QueryPlan/Optimizations/limitPushDown.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02265_limit_push_down_over_window_functions_bug.reference",
    "b/tests/queries/0_stateless/02265_limit_push_down_over_window_functions_bug.sql"
  ]
}