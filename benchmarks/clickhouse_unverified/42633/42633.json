{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42633,
  "instance_id": "ClickHouse__ClickHouse-42633",
  "issue_numbers": [
    "42632"
  ],
  "base_commit": "2c902bbc650783bcd6fdcf0d4cb8cc6986055887",
  "patch": "diff --git a/src/Functions/FunctionsJSON.cpp b/src/Functions/FunctionsJSON.cpp\nindex 2f0a0889847e..493fc36ca3c5 100644\n--- a/src/Functions/FunctionsJSON.cpp\n+++ b/src/Functions/FunctionsJSON.cpp\n@@ -23,7 +23,6 @@\n #include <DataTypes/Serializations/SerializationDecimal.h>\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/DataTypeLowCardinality.h>\n-#include <DataTypes/DataTypeFixedString.h>\n #include <DataTypes/DataTypeString.h>\n #include <DataTypes/DataTypesDecimal.h>\n #include <DataTypes/DataTypeUUID.h>\n@@ -696,16 +695,8 @@ class JSONExtractNumericImpl\n         else\n             return false;\n \n-        if (dest.getDataType() == TypeIndex::LowCardinality)\n-        {\n-            ColumnLowCardinality & col_low = assert_cast<ColumnLowCardinality &>(dest);\n-            col_low.insertData(reinterpret_cast<const char *>(&value), sizeof(value));\n-        }\n-        else\n-        {\n-            auto & col_vec = assert_cast<ColumnVector<NumberType> &>(dest);\n-            col_vec.insertValue(value);\n-        }\n+        auto & col_vec = assert_cast<ColumnVector<NumberType> &>(dest);\n+        col_vec.insertValue(value);\n         return true;\n     }\n };\n@@ -782,17 +773,8 @@ class JSONExtractStringImpl\n             return JSONExtractRawImpl<JSONParser>::insertResultToColumn(dest, element, {});\n \n         auto str = element.getString();\n-\n-        if (dest.getDataType() == TypeIndex::LowCardinality)\n-        {\n-            ColumnLowCardinality & col_low = assert_cast<ColumnLowCardinality &>(dest);\n-            col_low.insertData(str.data(), str.size());\n-        }\n-        else\n-        {\n-            ColumnString & col_str = assert_cast<ColumnString &>(dest);\n-            col_str.insertData(str.data(), str.size());\n-        }\n+        ColumnString & col_str = assert_cast<ColumnString &>(dest);\n+        col_str.insertData(str.data(), str.size());\n         return true;\n     }\n };\n@@ -821,33 +803,25 @@ struct JSONExtractTree\n         }\n     };\n \n-    class LowCardinalityFixedStringNode : public Node\n+    class LowCardinalityNode : public Node\n     {\n     public:\n-        explicit LowCardinalityFixedStringNode(const size_t fixed_length_) : fixed_length(fixed_length_) {}\n+        LowCardinalityNode(DataTypePtr dictionary_type_, std::unique_ptr<Node> impl_)\n+            : dictionary_type(dictionary_type_), impl(std::move(impl_)) {}\n         bool insertResultToColumn(IColumn & dest, const Element & element) override\n         {\n-            // If element is an object we delegate the insertion to JSONExtractRawImpl\n-            if (element.isObject())\n-                return JSONExtractRawImpl<JSONParser>::insertResultToLowCardinalityFixedStringColumn(dest, element, fixed_length);\n-            else if (!element.isString())\n-                return false;\n-\n-            auto str = element.getString();\n-            if (str.size() > fixed_length)\n-                return false;\n-\n-            // For the non low cardinality case of FixedString, the padding is done in the FixedString Column implementation.\n-            // In order to avoid having to pass the data to a FixedString Column and read it back (which would slow down the execution)\n-            // the data is padded here and written directly to the Low Cardinality Column\n-            auto padded_str = str.data() + std::string(fixed_length - std::min(fixed_length, str.length()), '\\0');\n-\n-            assert_cast<ColumnLowCardinality &>(dest).insertData(padded_str.data(), padded_str.size());\n-            return true;\n+            auto from_col = dictionary_type->createColumn();\n+            if (impl->insertResultToColumn(*from_col, element))\n+            {\n+                std::string_view value = from_col->getDataAt(0).toView();\n+                assert_cast<ColumnLowCardinality &>(dest).insertData(value.data(), value.size());\n+                return true;\n+            }\n+            return false;\n         }\n-\n     private:\n-        const size_t fixed_length;\n+        DataTypePtr dictionary_type;\n+        std::unique_ptr<Node> impl;\n     };\n \n     class UUIDNode : public Node\n@@ -859,15 +833,7 @@ struct JSONExtractTree\n                 return false;\n \n             auto uuid = parseFromString<UUID>(element.getString());\n-            if (dest.getDataType() == TypeIndex::LowCardinality)\n-            {\n-                ColumnLowCardinality & col_low = assert_cast<ColumnLowCardinality &>(dest);\n-                col_low.insertData(reinterpret_cast<const char *>(&uuid), sizeof(uuid));\n-            }\n-            else\n-            {\n-                assert_cast<ColumnUUID &>(dest).insert(uuid);\n-            }\n+            assert_cast<ColumnUUID &>(dest).insert(uuid);\n             return true;\n         }\n     };\n@@ -887,7 +853,6 @@ struct JSONExtractTree\n             assert_cast<ColumnDecimal<DecimalType> &>(dest).insert(result);\n             return true;\n         }\n-\n     private:\n         DataTypePtr data_type;\n     };\n@@ -906,18 +871,13 @@ struct JSONExtractTree\n     public:\n         bool insertResultToColumn(IColumn & dest, const Element & element) override\n         {\n-            if (element.isNull())\n-                return false;\n-\n             if (!element.isString())\n-                return JSONExtractRawImpl<JSONParser>::insertResultToFixedStringColumn(dest, element, {});\n-\n-            auto str = element.getString();\n+                return false;\n             auto & col_str = assert_cast<ColumnFixedString &>(dest);\n+            auto str = element.getString();\n             if (str.size() > col_str.getN())\n                 return false;\n             col_str.insertData(str.data(), str.size());\n-\n             return true;\n         }\n     };\n@@ -1139,19 +1099,9 @@ struct JSONExtractTree\n             case TypeIndex::UUID: return std::make_unique<UUIDNode>();\n             case TypeIndex::LowCardinality:\n             {\n-                // The low cardinality case is treated in two different ways:\n-                // For FixedString type, an especial class is implemented for inserting the data in the destination column,\n-                // as the string length must be passed in order to check and pad the incoming data.\n-                // For the rest of low cardinality types, the insertion is done in their corresponding class, adapting the data\n-                // as needed for the insertData function of the ColumnLowCardinality.\n                 auto dictionary_type = typeid_cast<const DataTypeLowCardinality *>(type.get())->getDictionaryType();\n-                if ((*dictionary_type).getTypeId() == TypeIndex::FixedString)\n-                {\n-                    auto fixed_length = typeid_cast<const DataTypeFixedString *>(dictionary_type.get())->getN();\n-                    return std::make_unique<LowCardinalityFixedStringNode>(fixed_length);\n-                }\n                 auto impl = build(function_name, dictionary_type);\n-                return impl;\n+                return std::make_unique<LowCardinalityNode>(dictionary_type, std::move(impl));\n             }\n             case TypeIndex::Decimal256: return std::make_unique<DecimalNode<Decimal256>>(type);\n             case TypeIndex::Decimal128: return std::make_unique<DecimalNode<Decimal128>>(type);\n@@ -1313,37 +1263,6 @@ class JSONExtractRawImpl\n         return true;\n     }\n \n-    // We use insertResultToFixedStringColumn in case we are inserting raw data in a FixedString column\n-    static bool insertResultToFixedStringColumn(IColumn & dest, const Element & element, std::string_view)\n-    {\n-        ColumnFixedString & col_str = assert_cast<ColumnFixedString &>(dest);\n-        auto & chars = col_str.getChars();\n-        WriteBufferFromVector<ColumnFixedString::Chars> buf(chars, AppendModeTag());\n-        traverse(element, buf);\n-        buf.finalize();\n-        col_str.insertDefault();\n-        return true;\n-    }\n-\n-    // We use insertResultToLowCardinalityFixedStringColumn in case we are inserting raw data in a Low Cardinality FixedString column\n-    static bool insertResultToLowCardinalityFixedStringColumn(IColumn & dest, const Element & element, size_t fixed_length)\n-    {\n-        if (element.getObject().size() > fixed_length)\n-            return false;\n-\n-        ColumnFixedString::Chars chars;\n-        WriteBufferFromVector<ColumnFixedString::Chars> buf(chars, AppendModeTag());\n-        traverse(element, buf);\n-        buf.finalize();\n-        chars.push_back(0);\n-        std::string str = reinterpret_cast<const char *>(chars.data());\n-\n-        auto padded_str = str + std::string(fixed_length - std::min(fixed_length, str.length()), '\\0');\n-        assert_cast<ColumnLowCardinality &>(dest).insertData(padded_str.data(), padded_str.size());\n-\n-        return true;\n-    }\n-\n private:\n     static void traverse(const Element & element, WriteBuffer & buf)\n     {\n",
  "test_patch": "diff --git a/tests/performance/low_cardinality_from_json.xml b/tests/performance/low_cardinality_from_json.xml\ndeleted file mode 100644\nindex ac6542ac503e..000000000000\n--- a/tests/performance/low_cardinality_from_json.xml\n+++ /dev/null\n@@ -1,73 +0,0 @@\n-<test>\n-\n-    <substitutions>\n-        <substitution>\n-            <name>string_json</name>\n-            <values>\n-                <value>'{\"a\": \"hi\", \"b\": \"hello\", \"c\": \"hola\", \"d\": \"see you, bye, bye\"}'</value>\n-            </values>\n-        </substitution>\n-        <substitution>\n-            <name>int_json</name>\n-            <values>\n-                <value>'{\"a\": 11, \"b\": 2222, \"c\": 33333333, \"d\": 4444444444444444}'</value>\n-            </values>\n-        </substitution>\n-        <substitution>\n-            <name>uuid_json</name>\n-            <values>\n-                <value>'{\"a\": \"2d49dc6e-ddce-4cd0-afb8-790956df54c4\", \"b\": \"2d49dc6e-ddce-4cd0-afb8-790956df54c3\", \"c\": \"2d49dc6e-ddce-4cd0-afb8-790956df54c1\", \"d\": \"2d49dc6e-ddce-4cd0-afb8-790956df54c1\"}'</value>\n-            </values>\n-        </substitution>\n-        <substitution>\n-            <name>low_cardinality_tuple_string</name>\n-            <values>\n-                <value>'Tuple(a LowCardinality(String), b LowCardinality(String), c LowCardinality(String), d LowCardinality(String) )'</value>\n-            </values>\n-        </substitution>\n-        <substitution>\n-            <name>low_cardinality_tuple_fixed_string</name>\n-            <values>\n-                <value>'Tuple(a LowCardinality(FixedString(20)), b LowCardinality(FixedString(20)), c LowCardinality(FixedString(20)), d LowCardinality(FixedString(20)) )'</value>\n-            </values>\n-        </substitution>\n-        <substitution>\n-            <name>low_cardinality_tuple_int8</name>\n-            <values>\n-                <value>'Tuple(a LowCardinality(Int8), b LowCardinality(Int8), c LowCardinality(Int8), d LowCardinality(Int8) )'</value>\n-            </values>\n-        </substitution>\n-        <substitution>\n-            <name>low_cardinality_tuple_int16</name>\n-            <values>\n-                <value>'Tuple(a LowCardinality(Int16), b LowCardinality(Int16), c LowCardinality(Int16), d LowCardinality(Int16) )'</value>\n-            </values>\n-        </substitution>\n-        <substitution>\n-            <name>low_cardinality_tuple_int32</name>\n-            <values>\n-                <value>'Tuple(a LowCardinality(Int32), b LowCardinality(Int32), c LowCardinality(Int32), d LowCardinality(Int32) )'</value>\n-            </values>\n-        </substitution>\n-        <substitution>\n-            <name>low_cardinality_tuple_int64</name>\n-            <values>\n-                <value>'Tuple(a LowCardinality(Int64), b LowCardinality(Int64), c LowCardinality(Int64), d LowCardinality(Int64) )'</value>\n-            </values>\n-        </substitution>\n-        <substitution>\n-            <name>low_cardinality_tuple_uuid</name>\n-            <values>\n-                <value>'Tuple(a LowCardinality(UUID), b LowCardinality(UUID), c LowCardinality(UUID), d LowCardinality(UUID) )'</value>\n-            </values>\n-        </substitution>\n-    </substitutions>\n-\n-    <query>SELECT 'fixed_string_json' FROM zeros(500000) WHERE NOT ignore(JSONExtract(materialize({string_json}), {low_cardinality_tuple_fixed_string})) FORMAT Null </query>\n-    <query>SELECT 'string_json' FROM zeros(500000) WHERE NOT ignore(JSONExtract(materialize({string_json}), {low_cardinality_tuple_string})) FORMAT Null </query>\n-    <query>SELECT 'int8_json' FROM zeros(500000) WHERE NOT ignore(JSONExtract(materialize({int_json}), {low_cardinality_tuple_int8})) FORMAT Null </query>\n-    <query>SELECT 'int16_json' FROM zeros(500000) WHERE NOT ignore(JSONExtract(materialize({int_json}), {low_cardinality_tuple_int16})) FORMAT Null </query>\n-    <query>SELECT 'int32_json' FROM zeros(500000) WHERE NOT ignore(JSONExtract(materialize({int_json}), {low_cardinality_tuple_int32})) FORMAT Null </query>\n-    <query>SELECT 'int64_json' FROM zeros(500000) WHERE NOT ignore(JSONExtract(materialize({int_json}), {low_cardinality_tuple_int64})) FORMAT Null </query>\n-    <query>SELECT 'uuid_json' FROM zeros(500000) WHERE NOT ignore(JSONExtract(materialize({uuid_json}), {low_cardinality_tuple_uuid})) FORMAT Null </query>\n-</test>\n\\ No newline at end of file\ndiff --git a/tests/queries/0_stateless/02452_check_low_cardinality.reference b/tests/queries/0_stateless/02452_check_low_cardinality.reference\ndeleted file mode 100644\nindex dc5553d7886c..000000000000\n--- a/tests/queries/0_stateless/02452_check_low_cardinality.reference\n+++ /dev/null\n@@ -1,8 +0,0 @@\n-('hi','hello','hola','see you, bye, bye')\n-('hi\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','hello\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','hola\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','see you, bye, bye\\0\\0\\0')\n-(11,0,0,0)\n-(11,2222,0,0)\n-(11,2222,33333333,0)\n-(11,2222,33333333,4444444444444444)\n-('2d49dc6e-ddce-4cd0-afb8-790956df54c4','2d49dc6e-ddce-4cd0-afb8-790956df54c3','2d49dc6e-ddce-4cd0-afb8-790956df54c1','2d49dc6e-ddce-4cd0-afb8-790956df54c1')\n-('{\"b\":{\"c\":1,\"d\":\"str\"}}\\0\\0\\0\\0\\0\\0\\0','\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0','\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0')\ndiff --git a/tests/queries/0_stateless/02452_check_low_cardinality.sql b/tests/queries/0_stateless/02452_check_low_cardinality.sql\ndeleted file mode 100644\nindex d62f418139ef..000000000000\n--- a/tests/queries/0_stateless/02452_check_low_cardinality.sql\n+++ /dev/null\n@@ -1,73 +0,0 @@\n--- Tags: no-fasttest\n-DROP TABLE IF EXISTS test_low_cardinality_string;\n-DROP TABLE IF EXISTS test_low_cardinality_string_nested_json;\n-DROP TABLE IF EXISTS test_low_cardinality_uuid;\n-DROP TABLE IF EXISTS test_low_cardinality_int;\n-CREATE TABLE test_low_cardinality_string (data String) ENGINE MergeTree ORDER BY data;\n-CREATE TABLE test_low_cardinality_string_nested_json (data String) ENGINE MergeTree ORDER BY data;\n-CREATE TABLE test_low_cardinality_uuid (data String) ENGINE MergeTree ORDER BY data;\n-CREATE TABLE test_low_cardinality_int (data String) ENGINE MergeTree ORDER BY data;\n-INSERT INTO test_low_cardinality_string (data) VALUES ('{\"a\": \"hi\", \"b\": \"hello\", \"c\": \"hola\", \"d\": \"see you, bye, bye\"}');\n-INSERT INTO test_low_cardinality_string_nested_json (data) VALUES ('{\"a\" : {\"b\" : {\"c\" : 1, \"d\" : \"str\"}}}');\n-INSERT INTO test_low_cardinality_int (data) VALUES ('{\"a\": 11, \"b\": 2222, \"c\": 33333333, \"d\": 4444444444444444}');\n-INSERT INTO test_low_cardinality_uuid (data) VALUES ('{\"a\": \"2d49dc6e-ddce-4cd0-afb8-790956df54c4\", \"b\": \"2d49dc6e-ddce-4cd0-afb8-790956df54c3\", \"c\": \"2d49dc6e-ddce-4cd0-afb8-790956df54c1\", \"d\": \"2d49dc6e-ddce-4cd0-afb8-790956df54c1\"}');\n-SELECT JSONExtract(data, 'Tuple(\n-                            a LowCardinality(String),\n-                            b LowCardinality(String),\n-                            c LowCardinality(String),\n-                            d LowCardinality(String)\n-                            \n-                            )') AS json FROM test_low_cardinality_string;\n-SELECT JSONExtract(data, 'Tuple(\n-                            a LowCardinality(FixedString(20)),\n-                            b LowCardinality(FixedString(20)),\n-                            c LowCardinality(FixedString(20)),\n-                            d LowCardinality(FixedString(20))\n-                            \n-                            )') AS json FROM test_low_cardinality_string;\n-SELECT JSONExtract(data, 'Tuple(\n-                            a LowCardinality(Int8),\n-                            b LowCardinality(Int8),\n-                            c LowCardinality(Int8),\n-                            d LowCardinality(Int8)\n-                            \n-                            )') AS json FROM test_low_cardinality_int;\n-SELECT JSONExtract(data, 'Tuple(\n-                            a LowCardinality(Int16),\n-                            b LowCardinality(Int16),\n-                            c LowCardinality(Int16),\n-                            d LowCardinality(Int16)\n-                            \n-                            )') AS json FROM test_low_cardinality_int;\n-SELECT JSONExtract(data, 'Tuple(\n-                            a LowCardinality(Int32),\n-                            b LowCardinality(Int32),\n-                            c LowCardinality(Int32),\n-                            d LowCardinality(Int32)\n-                            \n-                            )') AS json FROM test_low_cardinality_int;\n-SELECT JSONExtract(data, 'Tuple(\n-                            a LowCardinality(Int64),\n-                            b LowCardinality(Int64),\n-                            c LowCardinality(Int64),\n-                            d LowCardinality(Int64)\n-                            \n-                            )') AS json FROM test_low_cardinality_int;\n-SELECT JSONExtract(data, 'Tuple(\n-                            a LowCardinality(UUID),\n-                            b LowCardinality(UUID),\n-                            c LowCardinality(UUID),\n-                            d LowCardinality(UUID)\n-                            \n-                            )') AS json FROM test_low_cardinality_uuid;\n-SELECT JSONExtract('{\"a\" : {\"b\" : {\"c\" : 1, \"d\" : \"str\"}}}', 'Tuple(\n-                            a LowCardinality(FixedString(30)),\n-                            b LowCardinality(FixedString(20)),\n-                            c LowCardinality(FixedString(20)),\n-                            d LowCardinality(FixedString(20))\n-\n-                            )') AS json FROM test_low_cardinality_string;\n-DROP TABLE test_low_cardinality_string_nested_json;\n-DROP TABLE test_low_cardinality_string;\n-DROP TABLE test_low_cardinality_uuid;\n-DROP TABLE test_low_cardinality_int;\ndiff --git a/tests/queries/0_stateless/02455_extract_fixed_string_from_nested_json.reference b/tests/queries/0_stateless/02455_extract_fixed_string_from_nested_json.reference\ndeleted file mode 100644\nindex 3a528a248216..000000000000\n--- a/tests/queries/0_stateless/02455_extract_fixed_string_from_nested_json.reference\n+++ /dev/null\n@@ -1,1 +0,0 @@\n-('{\"b\":{\"c\":1,\"d\":\"str\"}}\\0')\ndiff --git a/tests/queries/0_stateless/02455_extract_fixed_string_from_nested_json.sql b/tests/queries/0_stateless/02455_extract_fixed_string_from_nested_json.sql\ndeleted file mode 100644\nindex c3eee60f1618..000000000000\n--- a/tests/queries/0_stateless/02455_extract_fixed_string_from_nested_json.sql\n+++ /dev/null\n@@ -1,6 +0,0 @@\n--- Tags: no-fasttest\n-DROP TABLE IF EXISTS test_fixed_string_nested_json;\n-CREATE TABLE test_fixed_string_nested_json (data String) ENGINE MergeTree ORDER BY data;\n-INSERT INTO test_fixed_string_nested_json (data) VALUES ('{\"a\" : {\"b\" : {\"c\" : 1, \"d\" : \"str\"}}}');\n-SELECT JSONExtract(data, 'Tuple(a FixedString(24))') AS json FROM test_fixed_string_nested_json;\n-DROP TABLE test_fixed_string_nested_json;\n",
  "problem_statement": "Crash in function `JSONExtract` with `LowCardinality`\n**Describe the bug**\r\n[A link to the report\r\n](https://s3.amazonaws.com/clickhouse-test-reports/0/bef3c71453b14efc72e4b2ce37f2ec87f69b4e40/fuzzer_astfuzzerasan//report.html)\r\n**How to reproduce**\r\n```sql\r\nselect JSONExtract('{\"a\" : {\"b\" : {\"c\" : 1, \"d\" : \"str\"}}}', 'Tuple( a LowCardinality(String), b LowCardinality(String), c LowCardinality(String), d LowCardinality(String))')\r\n```\r\n\r\n```\r\n2022.10.24 23:07:03.404418 [ 875356 ] {daaaee1e-142e-4792-b640-0381dd1c7b39} <Debug> executeQuery: (from [::ffff:127.0.0.1]:57844) select JSONExtract('{\"a\" : {\"b\" : {\"c\" : 1, \"d\" : \"str\"}}}', 'Tuple( a LowCardinality(String), b LowCardinality(String), c LowCardinality(String), d LowCardinality(String))') (stage: Complete)\r\n2022.10.24 23:07:03.404876 [ 875349 ] {} <Trace> BaseDaemon: Received signal 11\r\n2022.10.24 23:07:03.405132 [ 875639 ] {} <Fatal> BaseDaemon: ########################################\r\n2022.10.24 23:07:03.405223 [ 875639 ] {} <Fatal> BaseDaemon: (version 22.10.1.1674 (official build), build id: 30C9EDE94CF3A917D6FB0B915707FA38D8271475) (from thread 875356) (query_id: daaaee1e-142e-4792-b640-0381dd1c7b39) (query: select JSONExtract('{\"a\" : {\"b\" : {\"c\" : 1, \"d\" : \"str\"}}}', 'Tuple( a LowCardinality(String), b LowCardinality(String), c LowCardinality(String), d LowCardinality(String))')) Received signal Segmentation fault (11)\r\n2022.10.24 23:07:03.405275 [ 875639 ] {} <Fatal> BaseDaemon: Address: NULL pointer. Access: write. Address not mapped to object.\r\n2022.10.24 23:07:03.405317 [ 875639 ] {} <Fatal> BaseDaemon: Stack trace: 0x88df8bb 0x88df3e9 0x88df0f2 0x88e73b7 0x88ebf1a 0x88e396b 0x7bf4b4a 0x1140dc31 0x1140d701 0x1140dbd5 0x1140e577 0x1140f868 0x11b00372 0x11fe3fad 0x11feea2f 0x11fe994a 0x11fec7d8 0x11fac95c 0x11fac6fe 0x11fbc745 0x11fc183d 0x124c1523 0x124b9c75 0x124b49c0 0x124ff382 0x124fd100 0x124736df 0x128035c0 0x12800ead 0x133c6084 0x133da079 0x161f05cf 0x161f295b 0x163ae1f2 0x163ab97d 0x7f8ad311d609 0x7f8ad3042163\r\n2022.10.24 23:07:04.165660 [ 875639 ] {} <Fatal> BaseDaemon: 2. DB::writeChar(char, DB::WriteBuffer&) @ 0x88df8bb in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:04.903069 [ 875639 ] {} <Fatal> BaseDaemon: 3. DB::JSONExtractRawImpl<DB::SimdJSONParser>::traverse(DB::SimdJSONParser::Element const&, DB::WriteBuffer&) @ 0x88df3e9 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:05.639914 [ 875639 ] {} <Fatal> BaseDaemon: 4. DB::JSONExtractRawImpl<DB::SimdJSONParser>::insertResultToColumn(DB::IColumn&, DB::SimdJSONParser::Element const&, std::__1::basic_string_view<char, std::__1::char_traits<char> >) @ 0x88df0f2 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:06.376322 [ 875639 ] {} <Fatal> BaseDaemon: 5. DB::JSONExtractTree<DB::SimdJSONParser>::StringNode::insertResultToColumn(DB::IColumn&, DB::SimdJSONParser::Element const&) @ 0x88e73b7 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:07.113269 [ 875639 ] {} <Fatal> BaseDaemon: 6. DB::JSONExtractTree<DB::SimdJSONParser>::TupleNode::insertResultToColumn(DB::IColumn&, DB::SimdJSONParser::Element const&) @ 0x88ebf1a in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:07.849269 [ 875639 ] {} <Fatal> BaseDaemon: 7. DB::ExecutableFunctionJSON<DB::NameJSONExtract, DB::JSONExtractImpl>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x88e396b in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:08.586973 [ 875639 ] {} <Fatal> BaseDaemon: 8. DB::IExecutableFunction::executeDryRunImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x7bf4b4a in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:08.595447 [ 875639 ] {} <Fatal> BaseDaemon: 9. ./build_docker/../src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x1140dc31 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:08.602987 [ 875639 ] {} <Fatal> BaseDaemon: 10. ./build_docker/../src/Functions/IFunction.cpp:0: DB::IExecutableFunction::defaultImplementationForConstantArguments(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x1140d701 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:08.610610 [ 875639 ] {} <Fatal> BaseDaemon: 11. ./build_docker/../src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x1140dbd5 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:08.618604 [ 875639 ] {} <Fatal> BaseDaemon: 12.1. inlined from ./build_docker/../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: intrusive_ptr\r\n2022.10.24 23:07:08.618627 [ 875639 ] {} <Fatal> BaseDaemon: 12.2. inlined from ./build_docker/../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:122: boost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n2022.10.24 23:07:08.618645 [ 875639 ] {} <Fatal> BaseDaemon: 12.3. inlined from ./build_docker/../src/Common/COW.h:136: COW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n2022.10.24 23:07:08.618679 [ 875639 ] {} <Fatal> BaseDaemon: 12. ./build_docker/../src/Functions/IFunction.cpp:302: DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x1140e577 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:08.627273 [ 875639 ] {} <Fatal> BaseDaemon: 13.1. inlined from ./build_docker/../contrib/libcxx/include/vector:399: ~vector\r\n2022.10.24 23:07:08.627320 [ 875639 ] {} <Fatal> BaseDaemon: 13. ./build_docker/../src/Functions/IFunction.cpp:373: DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x1140f868 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:08.697731 [ 875639 ] {} <Fatal> BaseDaemon: 14. ./build_docker/../src/Interpreters/ActionsDAG.cpp:0: DB::ActionsDAG::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<DB::ActionsDAG::Node const*, std::__1::allocator<DB::ActionsDAG::Node const*> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) @ 0x11b00372 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:08.739921 [ 875639 ] {} <Fatal> BaseDaemon: 15. ./build_docker/../src/Interpreters/ActionsVisitor.cpp:0: DB::ScopeStack::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) @ 0x11fe3fad in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:08.790495 [ 875639 ] {} <Fatal> BaseDaemon: 16.1. inlined from ./build_docker/../contrib/libcxx/include/string:1445: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__is_long() const\r\n2022.10.24 23:07:08.790519 [ 875639 ] {} <Fatal> BaseDaemon: 16.2. inlined from ./build_docker/../contrib/libcxx/include/string:2231: ~basic_string\r\n2022.10.24 23:07:08.790533 [ 875639 ] {} <Fatal> BaseDaemon: 16. ./build_docker/../src/Interpreters/ActionsVisitor.h:182: DB::ActionsMatcher::Data::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) @ 0x11feea2f in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:08.834041 [ 875639 ] {} <Fatal> BaseDaemon: 17.1. inlined from ./build_docker/../contrib/libcxx/include/string:1445: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__is_long() const\r\n2022.10.24 23:07:08.834064 [ 875639 ] {} <Fatal> BaseDaemon: 17.2. inlined from ./build_docker/../contrib/libcxx/include/string:2231: ~basic_string\r\n2022.10.24 23:07:08.834102 [ 875639 ] {} <Fatal> BaseDaemon: 17. ./build_docker/../src/Interpreters/ActionsVisitor.cpp:1296: DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x11fe994a in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:08.880922 [ 875639 ] {} <Fatal> BaseDaemon: 18. ./build_docker/../src/Interpreters/ActionsVisitor.cpp:826: DB::ActionsMatcher::visit(DB::ASTExpressionList&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x11fec7d8 in /usr/lib/debug/usr/bin/clickhouse.debug\r\n2022.10.24 23:07:08.917904 [ 875639 ] {} <Fatal> BaseDaemon: 19.1. inlined from ./build_docker/../contrib/libcxx/include/__memory/shared_ptr.h:816: std::__1::shared_ptr<DB::IAST>::operator->() const\r\n2022.10.24 23:07:08.917931 [ 875639 ] {} <Fatal> BaseDaemon: 19.2. inlined from ./build_docker/../src/Interpreters/InDepthNodeVisitor.h:56: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::__1::shared_ptr<DB::IAST> const>::visitChildren(std::__1::shared_ptr<DB::IAST> const&)\r\n2022.10.24 23:07:08.917947 [ 875639 ] {} <Fatal> BaseDaemon: 19. ./build_docker/../src/Interpreters/InDepthNodeVisitor.h:46: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) @ 0x11fac95c in /usr/lib/debug/usr/bin/clickhouse.debug\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2022-10-24T23:31:12Z",
  "modified_files": [
    "src/Functions/FunctionsJSON.cpp"
  ],
  "modified_test_files": [
    "tests/performance/low_cardinality_from_json.xml",
    "tests/queries/0_stateless/02452_check_low_cardinality.reference",
    "tests/queries/0_stateless/02452_check_low_cardinality.sql",
    "tests/queries/0_stateless/02455_extract_fixed_string_from_nested_json.reference",
    "tests/queries/0_stateless/02455_extract_fixed_string_from_nested_json.sql"
  ]
}