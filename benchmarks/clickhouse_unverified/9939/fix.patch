diff --git a/dbms/src/Interpreters/SubqueryForSet.cpp b/dbms/src/Interpreters/SubqueryForSet.cpp
index 47de516d1541..98f670e5c64a 100644
--- a/dbms/src/Interpreters/SubqueryForSet.cpp
+++ b/dbms/src/Interpreters/SubqueryForSet.cpp
@@ -53,7 +53,11 @@ bool SubqueryForSet::insertJoinedBlock(Block & block)
 void SubqueryForSet::setTotals()
 {
     if (join && source)
-        join->setTotals(source->getTotals());
+    {
+        Block totals = source->getTotals();
+        renameColumns(totals);
+        join->setTotals(totals);
+    }
 }
 
 }
diff --git a/dbms/src/Interpreters/SubqueryForSet.h b/dbms/src/Interpreters/SubqueryForSet.h
index 3463f708a46e..4c99e34a2fcb 100644
--- a/dbms/src/Interpreters/SubqueryForSet.h
+++ b/dbms/src/Interpreters/SubqueryForSet.h
@@ -42,6 +42,7 @@ struct SubqueryForSet
 private:
     NamesWithAliases joined_block_aliases; /// Rename column from joined block from this list.
 
+    /// Rename source right table column names into qualified column names if they conflicts with left table ones.
     void renameColumns(Block & block);
 };
 
diff --git a/dbms/src/Processors/Transforms/ExpressionTransform.cpp b/dbms/src/Processors/Transforms/ExpressionTransform.cpp
index cbc83692c4ba..bf52a13f08a3 100644
--- a/dbms/src/Processors/Transforms/ExpressionTransform.cpp
+++ b/dbms/src/Processors/Transforms/ExpressionTransform.cpp
@@ -26,7 +26,7 @@ void ExpressionTransform::transform(Chunk & chunk)
     {
         initialized = true;
 
-        if (expression->resultIsAlwaysEmpty())
+        if (expression->resultIsAlwaysEmpty() && !on_totals)
         {
             stopReading();
             chunk.clear();
diff --git a/dbms/src/Processors/Transforms/InflatingExpressionTransform.cpp b/dbms/src/Processors/Transforms/InflatingExpressionTransform.cpp
index b5d288197b14..017cfc7cf828 100644
--- a/dbms/src/Processors/Transforms/InflatingExpressionTransform.cpp
+++ b/dbms/src/Processors/Transforms/InflatingExpressionTransform.cpp
@@ -25,7 +25,7 @@ void InflatingExpressionTransform::transform(Chunk & chunk)
     {
         initialized = true;
 
-        if (expression->resultIsAlwaysEmpty())
+        if (expression->resultIsAlwaysEmpty() && !on_totals)
         {
             stopReading();
             chunk.clear();
