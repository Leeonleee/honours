{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 13251,
  "instance_id": "ClickHouse__ClickHouse-13251",
  "issue_numbers": [
    "12465"
  ],
  "base_commit": "9791be4effc3cb74d0e7460a13505b187f1e3f90",
  "patch": "diff --git a/src/Storages/MergeTree/KeyCondition.cpp b/src/Storages/MergeTree/KeyCondition.cpp\nindex 6847a09b85c3..1ce9b9c95278 100644\n--- a/src/Storages/MergeTree/KeyCondition.cpp\n+++ b/src/Storages/MergeTree/KeyCondition.cpp\n@@ -463,6 +463,32 @@ static Field applyFunctionForField(\n     return (*block.safeGetByPosition(1).column)[0];\n }\n \n+/// The case when arguments may have types different than in the primary key.\n+static std::pair<Field, DataTypePtr> applyFunctionForFieldOfUnknownType(\n+    const FunctionOverloadResolverPtr & func,\n+    const DataTypePtr & arg_type,\n+    const Field & arg_value)\n+{\n+    ColumnWithTypeAndName argument = { arg_type->createColumnConst(1, arg_value), arg_type, \"x\" };\n+\n+    FunctionBasePtr func_base = func->build({argument});\n+\n+    DataTypePtr return_type = func_base->getReturnType();\n+\n+    Block block\n+    {\n+        std::move(argument),\n+        { nullptr, return_type, \"result\" }\n+    };\n+\n+    func_base->execute(block, {0}, 1, 1);\n+\n+    Field result = (*block.safeGetByPosition(1).column)[0];\n+\n+    return {std::move(result), std::move(return_type)};\n+}\n+\n+\n static FieldRef applyFunction(const FunctionBasePtr & func, const DataTypePtr & current_type, const FieldRef & field)\n {\n     /// Fallback for fields without block reference.\n@@ -530,7 +556,7 @@ bool KeyCondition::canConstantBeWrappedByMonotonicFunctions(\n         return false;\n \n     bool found_transformation = false;\n-    for (const ExpressionAction & a : key_expr->getActions())\n+    for (const ExpressionAction & action : key_expr->getActions())\n     {\n         /** The key functional expression constraint may be inferred from a plain column in the expression.\n           * For example, if the key contains `toStartOfHour(Timestamp)` and query contains `WHERE Timestamp >= now()`,\n@@ -542,23 +568,27 @@ bool KeyCondition::canConstantBeWrappedByMonotonicFunctions(\n           * Instead, we can qualify only functions that do not transform the range (for example rounding),\n           * which while not strictly monotonic, are monotonic everywhere on the input range.\n           */\n-        const auto & action = a.argument_names;\n-        if (a.type == ExpressionAction::Type::APPLY_FUNCTION && action.size() == 1 && a.argument_names[0] == expr_name)\n+        const auto & argument_names = action.argument_names;\n+        if (action.type == ExpressionAction::Type::APPLY_FUNCTION\n+            && argument_names.size() == 1\n+            && argument_names[0] == expr_name)\n         {\n-            if (!a.function_base->hasInformationAboutMonotonicity())\n+            if (!action.function_base->hasInformationAboutMonotonicity())\n                 return false;\n \n-            // Range is irrelevant in this case\n-            IFunction::Monotonicity monotonicity = a.function_base->getMonotonicityForRange(*out_type, Field(), Field());\n+            /// Range is irrelevant in this case.\n+            IFunction::Monotonicity monotonicity = action.function_base->getMonotonicityForRange(*out_type, Field(), Field());\n             if (!monotonicity.is_always_monotonic)\n                 return false;\n \n-            // Apply the next transformation step\n-            out_value = applyFunctionForField(a.function_base, out_type, out_value);\n-            out_type = a.function_base->getReturnType();\n-            expr_name = a.result_name;\n+            /// Apply the next transformation step.\n+            std::tie(out_value, out_type) = applyFunctionForFieldOfUnknownType(\n+                action.function_builder,\n+                out_type, out_value);\n+\n+            expr_name = action.result_name;\n \n-            // Transformation results in a key expression, accept\n+            /// Transformation results in a key expression, accept.\n             auto it = key_columns.find(expr_name);\n             if (key_columns.end() != it)\n             {\n@@ -792,23 +822,23 @@ bool KeyCondition::tryParseAtomFromAST(const ASTPtr & node, const Context & cont\n                 is_set_const = true;\n             }\n             else if (getConstant(args[1], block_with_constants, const_value, const_type)\n-                     && isKeyPossiblyWrappedByMonotonicFunctions(args[0], context, key_column_num, key_expr_type, chain))\n+                && isKeyPossiblyWrappedByMonotonicFunctions(args[0], context, key_column_num, key_expr_type, chain))\n             {\n                 key_arg_pos = 0;\n             }\n             else if (getConstant(args[1], block_with_constants, const_value, const_type)\n-                     && canConstantBeWrappedByMonotonicFunctions(args[0], key_column_num, key_expr_type, const_value, const_type))\n+                && canConstantBeWrappedByMonotonicFunctions(args[0], key_column_num, key_expr_type, const_value, const_type))\n             {\n                 key_arg_pos = 0;\n                 is_constant_transformed = true;\n             }\n             else if (getConstant(args[0], block_with_constants, const_value, const_type)\n-                     && isKeyPossiblyWrappedByMonotonicFunctions(args[1], context, key_column_num, key_expr_type, chain))\n+                && isKeyPossiblyWrappedByMonotonicFunctions(args[1], context, key_column_num, key_expr_type, chain))\n             {\n                 key_arg_pos = 1;\n             }\n             else if (getConstant(args[0], block_with_constants, const_value, const_type)\n-                     && canConstantBeWrappedByMonotonicFunctions(args[1], key_column_num, key_expr_type, const_value, const_type))\n+                && canConstantBeWrappedByMonotonicFunctions(args[1], key_column_num, key_expr_type, const_value, const_type))\n             {\n                 key_arg_pos = 1;\n                 is_constant_transformed = true;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01427_pk_and_expression_with_different_type.reference b/tests/queries/0_stateless/01427_pk_and_expression_with_different_type.reference\nnew file mode 100644\nindex 000000000000..e69de29bb2d1\ndiff --git a/tests/queries/0_stateless/01427_pk_and_expression_with_different_type.sql b/tests/queries/0_stateless/01427_pk_and_expression_with_different_type.sql\nnew file mode 100644\nindex 000000000000..d905eac4ce2f\n--- /dev/null\n+++ b/tests/queries/0_stateless/01427_pk_and_expression_with_different_type.sql\n@@ -0,0 +1,4 @@\n+DROP TABLE IF EXISTS pk;\n+CREATE TABLE pk (x DateTime) ENGINE = MergeTree ORDER BY toStartOfMinute(x) SETTINGS index_granularity = 1;\n+SELECT * FROM pk WHERE x >= toDateTime(120) AND x <= toDateTime(NULL);\n+DROP TABLE pk;\n",
  "problem_statement": "defaultImplementationForNulls: Assertion `result_type->isNullable()' failed\n```\r\nCREATE TABLE default.pk ( `d` Date DEFAULT '2000-01-01', `x` DateTime, `y` UInt64, `z` UInt64 ) ENGINE = MergeTree(d, (toStartOfMinute(x), y, z), 1);\r\n\r\nSELECT toUInt32(x), y, z FROM pk WHERE (x >= toDateTime(120)) AND (x <= toDateTime(NULL));\r\n\r\n\r\n\r\nclickhouse-server: /home/akuzm/ch4/ch/src/Functions/IFunction.cpp:295: bool DB::ExecutableFunctionAdaptor::defaultImplementationForNulls(DB::Block &, const DB::ColumnNumbers &, size_t, size_t, bool): Assertion `result_type->isNullable()' failed.\r\n2020.07.13 16:31:20.073915 [ 49673 ] {} <Trace> BaseDaemon: Received signal 6\r\n2020.07.13 16:31:20.074204 [ 49749 ] {} <Fatal> BaseDaemon: ########################################\r\n2020.07.13 16:31:20.074579 [ 49749 ] {} <Fatal> BaseDaemon: (version 20.6.1.1, build id: F176DE2A5C050ABF) (from thread 49729) (query_id: e8bccb87-47ba-419b-b9f7-4b8ef1fbb049) Received signal Aborted (6)\r\n2020.07.13 16:31:20.074705 [ 49749 ] {} <Fatal> BaseDaemon: \r\n2020.07.13 16:31:20.074879 [ 49749 ] {} <Fatal> BaseDaemon: Stack trace: 0x7ff5832f918b 0x7ff5832d8859 0x7ff5832d8729 0x7ff5832e9f36 0x7ff57d9791f2 0x7ff57d979034 0x7ff57d978c5e 0x7ff57d979000 0x7ff57d97a18d 0x7ff57d21b1b9 0x7ff573fb1929 0x7ff573fb1492 0x7ff573fb0869 0x7ff573faff06 0x7ff573fafe5a 0x7ff573fafc4c 0x7ff574123cfa 0x7ff5741237f0 0x7ff574f6d039 0x7ff571e3fdd2 0x7ff576bef674 0x7ff576be4263 0x7ff576bde35d 0x7ff576bdd9d6 0x7ff576c4ad68 0x7ff576c4af96 0x7ff576f70c0a 0x7ff576f6fcca\r\n2020.07.13 16:31:20.075196 [ 49749 ] {} <Fatal> BaseDaemon: 4. /build/glibc-YYA7BZ/glibc-2.31/signal/../sysdeps/unix/sysv/linux/raise.c:51: __GI_raise @ 0x4618b in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.13 16:31:20.075365 [ 49749 ] {} <Fatal> BaseDaemon: 5. /build/glibc-YYA7BZ/glibc-2.31/stdlib/abort.c:81: abort @ 0x25859 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.13 16:31:20.075591 [ 49749 ] {} <Fatal> BaseDaemon: 6. /build/glibc-YYA7BZ/glibc-2.31/intl/loadmsgcat.c:509: _nl_load_domain.cold @ 0x25729 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.13 16:31:20.075873 [ 49749 ] {} <Fatal> BaseDaemon: 7. ? @ 0x36f36 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.31.so\r\n2020.07.13 16:31:20.077364 [ 49749 ] {} <Fatal> BaseDaemon: 8. /home/akuzm/ch4/ch/src/Functions/IFunction.cpp:311: DB::ExecutableFunctionAdaptor::defaultImplementationForNulls(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) @ 0x30c11f2 in /home/akuzm/ch4/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.07.13 16:31:20.078739 [ 49749 ] {} <Fatal> BaseDaemon: 9. /home/akuzm/ch4/ch/src/Functions/IFunction.cpp:319: DB::ExecutableFunctionAdaptor::executeWithoutLowCardinalityColumns(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) @ 0x30c1034 in /home/akuzm/ch4/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.07.13 16:31:20.080107 [ 49749 ] {} <Fatal> BaseDaemon: 10. /home/akuzm/ch4/ch/src/Functions/IFunction.cpp:266: DB::ExecutableFunctionAdaptor::defaultImplementationForConstantArguments(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) @ 0x30c0c5e in /home/akuzm/ch4/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.07.13 16:31:20.081437 [ 49749 ] {} <Fatal> BaseDaemon: 11. /home/akuzm/ch4/ch/src/Functions/IFunction.cpp:316: DB::ExecutableFunctionAdaptor::executeWithoutLowCardinalityColumns(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) @ 0x30c1000 in /home/akuzm/ch4/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.07.13 16:31:20.083187 [ 49749 ] {} <Fatal> BaseDaemon: 12. /home/akuzm/ch4/ch/src/Functions/IFunction.cpp:486: DB::ExecutableFunctionAdaptor::execute(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) @ 0x30c218d in /home/akuzm/ch4/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.07.13 16:31:20.085302 [ 49749 ] {} <Fatal> BaseDaemon: 13. /home/akuzm/ch4/ch/src/Functions/IFunction.h:78: DB::IFunctionBase::execute(DB::Block&, std::__1::vector<unsigned long, std::__1::allocator<unsigned long> > const&, unsigned long, unsigned long, bool) @ 0x29631b9 in /home/akuzm/ch4/build-clang10/src/Functions/libclickhouse_functionsd.so\r\n2020.07.13 16:31:20.085867 [ 49749 ] {} <Fatal> BaseDaemon: 14. /home/akuzm/ch4/ch/src/Storages/MergeTree/KeyCondition.cpp:462: DB::applyFunctionForField(std::__1::shared_ptr<DB::IFunctionBase> const&, std::__1::shared_ptr<DB::IDataType const> const&, DB::Field const&) @ 0x60a929 in /home/akuzm/ch4/build-clang10/src/libclickhouse_storages_mergetreed.so\r\n2020.07.13 16:31:20.086256 [ 49749 ] {} <Fatal> BaseDaemon: 15. /home/akuzm/ch4/ch/src/Storages/MergeTree/KeyCondition.cpp:557: DB::KeyCondition::canConstantBeWrappedByMonotonicFunctions(std::__1::shared_ptr<DB::IAST> const&, unsigned long&, std::__1::shared_ptr<DB::IDataType const>&, DB::Field&, std::__1::shared_ptr<DB::IDataType const>&) @ 0x60a492 in /home/akuzm/ch4/build-clang10/src/libclickhouse_storages_mergetreed.so\r\n2020.07.13 16:31:20.086624 [ 49749 ] {} <Fatal> BaseDaemon: 16. /home/akuzm/ch4/ch/src/Storages/MergeTree/KeyCondition.cpp:800: DB::KeyCondition::tryParseAtomFromAST(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::Block&, DB::KeyCondition::RPNElement&) @ 0x609869 in /home/akuzm/ch4/build-clang10/src/libclickhouse_storages_mergetreed.so\r\n2020.07.13 16:31:20.086986 [ 49749 ] {} <Fatal> BaseDaemon: 17. /home/akuzm/ch4/ch/src/Storages/MergeTree/KeyCondition.cpp:511: DB::KeyCondition::traverseAST(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::Block&) @ 0x608f06 in /home/akuzm/ch4/build-clang10/src/libclickhouse_storages_mergetreed.so\r\n2020.07.13 16:31:20.087394 [ 49749 ] {} <Fatal> BaseDaemon: 18. /home/akuzm/ch4/ch/src/Storages/MergeTree/KeyCondition.cpp:498: DB::KeyCondition::traverseAST(std::__1::shared_ptr<DB::IAST> const&, DB::Context const&, DB::Block&) @ 0x608e5a in /home/akuzm/ch4/build-clang10/src/libclickhouse_storages_mergetreed.so\r\n2020.07.13 16:31:20.087822 [ 49749 ] {} <Fatal> BaseDaemon: 19. /home/akuzm/ch4/ch/src/Storages/MergeTree/KeyCondition.cpp:401: DB::KeyCondition::KeyCondition(DB::SelectQueryInfo const&, DB::Context const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::ExpressionActions> const&) @ 0x608c4c in /home/akuzm/ch4/build-clang10/src/libclickhouse_storages_mergetreed.so\r\n2020.07.13 16:31:20.088860 [ 49749 ] {} <Fatal> BaseDaemon: 20. /home/akuzm/ch4/ch/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:233: DB::MergeTreeDataSelectExecutor::readFromParts(std::__1::vector<std::__1::shared_ptr<DB::IMergeTreeDataPart const>, std::__1::allocator<std::__1::shared_ptr<DB::IMergeTreeDataPart const> > >, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, DB::Context const&, unsigned long, unsigned int, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, long, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, long> > > const*) const @ 0x77ccfa in /home/akuzm/ch4/build-clang10/src/libclickhouse_storages_mergetreed.so\r\n2020.07.13 16:31:20.090030 [ 49749 ] {} <Fatal> BaseDaemon: 21. /home/akuzm/ch4/ch/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp:160: DB::MergeTreeDataSelectExecutor::read(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, DB::Context const&, unsigned long, unsigned int, std::__1::unordered_map<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, long, std::__1::hash<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::equal_to<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, std::__1::allocator<std::__1::pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const, long> > > const*) const @ 0x77c7f0 in /home/akuzm/ch4/build-clang10/src/libclickhouse_storages_mergetreed.so\r\n2020.07.13 16:31:20.091588 [ 49749 ] {} <Fatal> BaseDaemon: 22. /home/akuzm/ch4/ch/src/Storages/StorageMergeTree.cpp:184: DB::StorageMergeTree::read(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, DB::Context const&, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0xa69039 in /home/akuzm/ch4/build-clang10/src/libclickhouse_storagesd.so\r\n2020.07.13 16:31:20.092414 [ 49749 ] {} <Fatal> BaseDaemon: 23. /home/akuzm/ch4/ch/src/Processors/QueryPlan/ReadFromStorageStep.cpp:40: DB::ReadFromStorageStep::ReadFromStorageStep(std::__1::shared_ptr<DB::RWLockImpl::LockHolderImpl>, std::__1::shared_ptr<DB::StorageInMemoryMetadata const>&, DB::SelectQueryOptions, std::__1::shared_ptr<DB::IStorage>, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, DB::SelectQueryInfo const&, std::__1::shared_ptr<DB::Context>, DB::QueryProcessingStage::Enum, unsigned long, unsigned long) @ 0x21bdd2 in /home/akuzm/ch4/build-clang10/src/libclickhouse_processors_querypland.so\r\n2020.07.13 16:31:20.095310 [ 49749 ] {} <Fatal> BaseDaemon: 24. /home/akuzm/ch4/ch/contrib/libcxx/include/memory:3028: std::__1::__unique_if<DB::ReadFromStorageStep>::__unique_single std::__1::make_unique<DB::ReadFromStorageStep, std::__1::shared_ptr<DB::RWLockImpl::LockHolderImpl>&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const>&, DB::SelectQueryOptions&, std::__1::shared_ptr<DB::IStorage>&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, DB::SelectQueryInfo&, std::__1::shared_ptr<DB::Context>&, DB::QueryProcessingStage::Enum&, unsigned long&, unsigned long&>(std::__1::shared_ptr<DB::RWLockImpl::LockHolderImpl>&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const>&, DB::SelectQueryOptions&, std::__1::shared_ptr<DB::IStorage>&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > >&, DB::SelectQueryInfo&, std::__1::shared_ptr<DB::Context>&, DB::QueryProcessingStage::Enum&, unsigned long&, unsigned long&) @ 0x15f7674 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.13 16:31:20.097771 [ 49749 ] {} <Fatal> BaseDaemon: 25. /home/akuzm/ch4/ch/src/Interpreters/InterpreterSelectQuery.cpp:1359: DB::InterpreterSelectQuery::executeFetchColumns(DB::QueryProcessingStage::Enum, DB::QueryPlan&, std::__1::shared_ptr<DB::PrewhereInfo> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x15ec263 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.13 16:31:20.100101 [ 49749 ] {} <Fatal> BaseDaemon: 26. /home/akuzm/ch4/ch/src/Interpreters/InterpreterSelectQuery.cpp:793: DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>) @ 0x15e635d in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.13 16:31:20.102171 [ 49749 ] {} <Fatal> BaseDaemon: 27. /home/akuzm/ch4/ch/src/Interpreters/InterpreterSelectQuery.cpp:472: DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x15e59d6 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.13 16:31:20.104538 [ 49749 ] {} <Fatal> BaseDaemon: 28. /home/akuzm/ch4/ch/src/Interpreters/InterpreterSelectWithUnionQuery.cpp:183: DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x1652d68 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.13 16:31:20.106912 [ 49749 ] {} <Fatal> BaseDaemon: 29. /home/akuzm/ch4/ch/src/Interpreters/InterpreterSelectWithUnionQuery.cpp:198: DB::InterpreterSelectWithUnionQuery::execute() @ 0x1652f96 in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.13 16:31:20.110977 [ 49749 ] {} <Fatal> BaseDaemon: 30. /home/akuzm/ch4/ch/src/Interpreters/executeQuery.cpp:385: DB::executeQueryImpl(char const*, char const*, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool, DB::ReadBuffer*) @ 0x1978c0a in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n2020.07.13 16:31:20.115112 [ 49749 ] {} <Fatal> BaseDaemon: 31. /home/akuzm/ch4/ch/src/Interpreters/executeQuery.cpp:653: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0x1977cca in /home/akuzm/ch4/build-clang10/src/libclickhouse_interpretersd.so\r\n```\n",
  "hints_text": "",
  "created_at": "2020-08-02T20:57:16Z",
  "modified_files": [
    "src/Storages/MergeTree/KeyCondition.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01427_pk_and_expression_with_different_type.sql"
  ]
}