diff --git a/docker/test/integration/dotnet_client/.gitignore b/docker/test/integration/dotnet_client/.gitignore
new file mode 100644
index 000000000000..cd42ee34e873
--- /dev/null
+++ b/docker/test/integration/dotnet_client/.gitignore
@@ -0,0 +1,2 @@
+bin/
+obj/
diff --git a/docker/test/integration/dotnet_client/Dockerfile b/docker/test/integration/dotnet_client/Dockerfile
new file mode 100644
index 000000000000..f8d334151759
--- /dev/null
+++ b/docker/test/integration/dotnet_client/Dockerfile
@@ -0,0 +1,10 @@
+# docker build .
+# docker run -it --rm --network=host 14f23e59669c dotnet run --host localhost --port 8123 --user default --database default
+
+FROM mcr.microsoft.com/dotnet/sdk:3.1
+
+WORKDIR /client
+COPY *.cs *.csproj /client/
+
+ARG VERSION=4.1.0
+RUN dotnet add package ClickHouse.Client -v ${VERSION}
diff --git a/docker/test/integration/dotnet_client/Program.cs b/docker/test/integration/dotnet_client/Program.cs
new file mode 100644
index 000000000000..3f640d15e864
--- /dev/null
+++ b/docker/test/integration/dotnet_client/Program.cs
@@ -0,0 +1,90 @@
+ï»¿using System;
+using System.Threading.Tasks;
+using ClickHouse.Client.ADO;
+using ClickHouse.Client.Utility;
+
+namespace clickhouse.test
+{
+    class Program
+    {
+        static async Task Main(string[] args)
+        {
+            try
+            {
+                using var connection = new ClickHouseConnection(GetConnectionString(args));
+
+                await connection.ExecuteStatementAsync("CREATE DATABASE IF NOT EXISTS test");
+                await connection.ExecuteStatementAsync("TRUNCATE TABLE IF EXISTS test.dotnet_test");
+                await connection.ExecuteStatementAsync("CREATE TABLE IF NOT EXISTS test.dotnet_test (`age` Int32, `name` String) Engine = Memory");
+
+                using var command = connection.CreateCommand();
+                command.AddParameter("name", "Linus Torvalds");
+                command.AddParameter("age", 51);
+                command.CommandText = "INSERT INTO test.dotnet_test VALUES({age:Int32}, {name:String})";
+                await command.ExecuteNonQueryAsync();
+
+                using var result1 = await connection.ExecuteReaderAsync("SELECT * FROM test.dotnet_test");
+                while (result1.Read())
+                {
+                    var values = new object[result1.FieldCount];
+                    result1.GetValues(values);
+
+                    foreach (var row in values)
+                    {
+                        Console.WriteLine(row);
+                    }
+                }
+
+                using var result2 = await connection.ExecuteReaderAsync(selectSql);
+                while (result2.Read())
+                {
+                    var values = new object[result2.FieldCount];
+                    result2.GetValues(values);
+
+                    foreach (var row in values)
+                    {
+                        Console.WriteLine(row);
+                    }
+                }
+            }
+            catch (Exception e)
+            {
+                Console.Error.WriteLine(e);
+                Environment.ExitCode = 1;
+            }
+        }
+
+        private static string GetConnectionString(string[] args)
+        {
+            var builder = new ClickHouseConnectionStringBuilder();
+            int i = 0;
+            while (i < args.Length)
+            {
+                switch (args[i])
+                {
+                    case "--host":
+                        builder.Host = args[++i];
+                        break;
+                    case "--port":
+                        builder.Port = UInt16.Parse(args[++i]);
+                        break;
+                    case "--user":
+                        builder.Username = args[++i];
+                        break;
+                    case "--password":
+                        builder.Password = args[++i];
+                        break;
+                    case "--database":
+                        builder.Database = args[++i];
+                        break;
+                    default:
+                        i++;
+                        break;
+                }
+            }
+            return builder.ToString();
+        }
+
+        private static string selectSql = @"SELECT NULL, toInt8(-8), toUInt8(8), toInt16(-16), toUInt16(16), toInt16(-32), toUInt16(32), toInt64(-64), toUInt64(64), toFloat32(32e6), toFloat32(-32e6), toFloat64(64e6), toFloat64(-64e6), 'TestString', toFixedString('ASD',3), toFixedString('ASD',5), toUUID('00000000-0000-0000-0000-000000000000'), toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0'), toIPv4('1.2.3.4'), toIPv4('255.255.255.255'), CAST('a', 'Enum(\'a\' = 1, \'b\' = 2)'), CAST('a', 'Enum8(\'a\' = -1, \'b\' = 127)'), CAST('a', 'Enum16(\'a\' = -32768, \'b\' = 32767)'), array(1, 2, 3), array('a', 'b', 'c'), array(1, 2, NULL), toInt32OrNull('123'), toInt32OrNull(NULL), CAST(NULL AS Nullable(DateTime)), CAST(NULL AS LowCardinality(Nullable(String))), toLowCardinality('lowcardinality'), tuple(1, 'a', 8), tuple(123, tuple(5, 'a', 7)), toDateOrNull('1999-11-12'), toDateTime('1988-08-28 11:22:33'), toDateTime64('2043-03-01 18:34:04.4444444', 9), toDecimal32(123.45, 3), toDecimal32(-123.45, 3), toDecimal64(1.2345, 7), toDecimal64(-1.2345, 7), toDecimal128(12.34, 9), toDecimal128(-12.34, 9), toIPv6('2001:0db8:85a3:0000:0000:8a2e:0370:7334')";
+    }
+}
diff --git a/docker/test/integration/dotnet_client/clickhouse.test.csproj b/docker/test/integration/dotnet_client/clickhouse.test.csproj
new file mode 100644
index 000000000000..11704487bf6a
--- /dev/null
+++ b/docker/test/integration/dotnet_client/clickhouse.test.csproj
@@ -0,0 +1,13 @@
+<Project Sdk="Microsoft.NET.Sdk">
+
+  <PropertyGroup>
+    <OutputType>Exe</OutputType>
+    <TargetFramework>netcoreapp3.1</TargetFramework>
+  </PropertyGroup>
+
+  <ItemGroup>
+    <PackageReference Include="clickhouse.client" Version="4.1.0" />
+    <PackageReference Include="dapper" Version="2.0.30" />
+  </ItemGroup>
+
+</Project>
diff --git a/docker/test/integration/runner/compose/docker_compose_dotnet_client.yml b/docker/test/integration/runner/compose/docker_compose_dotnet_client.yml
new file mode 100644
index 000000000000..b63dac51522c
--- /dev/null
+++ b/docker/test/integration/runner/compose/docker_compose_dotnet_client.yml
@@ -0,0 +1,6 @@
+version: '2.3'
+services:
+  dotnet1:
+    image: clickhouse/dotnet-client:${DOCKER_DOTNET_CLIENT_TAG:-latest}
+    # to keep container running
+    command: sleep infinity
diff --git a/docker/test/integration/runner/dockerd-entrypoint.sh b/docker/test/integration/runner/dockerd-entrypoint.sh
index ad8a8e4eb84a..8109ef7ae64e 100755
--- a/docker/test/integration/runner/dockerd-entrypoint.sh
+++ b/docker/test/integration/runner/dockerd-entrypoint.sh
@@ -39,6 +39,7 @@ export CLICKHOUSE_ODBC_BRIDGE_BINARY_PATH=/clickhouse-odbc-bridge
 export CLICKHOUSE_LIBRARY_BRIDGE_BINARY_PATH=/clickhouse-library-bridge
 
 export DOCKER_MYSQL_GOLANG_CLIENT_TAG=${DOCKER_MYSQL_GOLANG_CLIENT_TAG:=latest}
+export DOCKER_DOTNET_CLIENT_TAG=${DOCKER_DOTNET_CLIENT_TAG:=latest}
 export DOCKER_MYSQL_JAVA_CLIENT_TAG=${DOCKER_MYSQL_JAVA_CLIENT_TAG:=latest}
 export DOCKER_MYSQL_JS_CLIENT_TAG=${DOCKER_MYSQL_JS_CLIENT_TAG:=latest}
 export DOCKER_MYSQL_PHP_CLIENT_TAG=${DOCKER_MYSQL_PHP_CLIENT_TAG:=latest}
diff --git a/tests/ci/integration_test_check.py b/tests/ci/integration_test_check.py
index 20e33f2f2dc0..e87528dd528f 100644
--- a/tests/ci/integration_test_check.py
+++ b/tests/ci/integration_test_check.py
@@ -33,6 +33,7 @@
     "clickhouse/integration-test",
     "clickhouse/kerberos-kdc",
     "clickhouse/integration-helper",
+    "clickhouse/dotnet-client",
 ]
 
 def get_json_params_dict(check_name, pr_info, docker_images, run_by_hash_total, run_by_hash_num):
diff --git a/tests/integration/ci-runner.py b/tests/integration/ci-runner.py
index 830b8e149f6a..6058a332c294 100755
--- a/tests/integration/ci-runner.py
+++ b/tests/integration/ci-runner.py
@@ -228,6 +228,7 @@ def get_images_names():
                 "clickhouse/mysql-java-client", "clickhouse/mysql-js-client",
                 "clickhouse/mysql-php-client", "clickhouse/postgresql-java-client",
                 "clickhouse/integration-test", "clickhouse/kerberos-kdc",
+                "clickhouse/dotnet-client",
                 "clickhouse/integration-helper", ]
 
 
@@ -252,7 +253,7 @@ def _install_clickhouse(self, debs_path):
                         logging.info("Executing installation cmd %s", cmd)
                         retcode = subprocess.Popen(cmd, shell=True, stderr=log, stdout=log).wait()
                         if retcode == 0:
-                            logging.info("Instsallation of %s successfull", full_path)
+                            logging.info("Installation of %s successfull", full_path)
                         else:
                             raise Exception("Installation of %s failed", full_path)
                     break
diff --git a/tests/integration/runner b/tests/integration/runner
index 4d01b9737d10..3687ca4068c6 100755
--- a/tests/integration/runner
+++ b/tests/integration/runner
@@ -226,6 +226,8 @@ if __name__ == "__main__":
             [image, tag] = img_tag.split(":")
             if image == "clickhouse/mysql-golang-client":
                 env_tags += "-e {}={} ".format("DOCKER_MYSQL_GOLANG_CLIENT_TAG", tag)
+            elif image == "clickhouse/dotnet-client":
+                env_tags += "-e {}={} ".format("DOCKER_DOTNET_CLIENT_TAG", tag)
             elif image == "clickhouse/mysql-java-client":
                 env_tags += "-e {}={} ".format("DOCKER_MYSQL_JAVA_CLIENT_TAG", tag)
             elif image == "clickhouse/mysql-js-client":
@@ -237,7 +239,7 @@ if __name__ == "__main__":
             elif image == "clickhouse/integration-test":
                 env_tags += "-e {}={} ".format("DOCKER_BASE_TAG", tag)
             elif image == "clickhouse/kerberos-kdc":
-                env_tags += "-e {}={}".format("DOCKER_KERBEROS_KDC_TAG", tag)
+                env_tags += "-e {}={} ".format("DOCKER_KERBEROS_KDC_TAG", tag)
             else:
                 logging.info("Unknown image %s" % (image))
 
diff --git a/tests/integration/test_dotnet_client/__init__.py b/tests/integration/test_dotnet_client/__init__.py
new file mode 100644
index 000000000000..e69de29bb2d1
diff --git a/tests/integration/test_dotnet_client/configs/config.xml b/tests/integration/test_dotnet_client/configs/config.xml
new file mode 100644
index 000000000000..9bcadc43f105
--- /dev/null
+++ b/tests/integration/test_dotnet_client/configs/config.xml
@@ -0,0 +1,16 @@
+<?xml version="1.0"?>
+<clickhouse>
+    <logger>
+        <level>trace</level>
+        <log>/var/log/clickhouse-server/clickhouse-server.log</log>
+        <errorlog>/var/log/clickhouse-server/clickhouse-server.err.log</errorlog>
+        <size>1000M</size>
+        <count>10</count>
+    </logger>
+
+    <http_port>8123</http_port>
+    <listen_host>127.0.0.1</listen_host>
+
+    <path>./clickhouse/</path>
+    <users_config>users.xml</users_config>
+</clickhouse>
diff --git a/tests/integration/test_dotnet_client/configs/users.xml b/tests/integration/test_dotnet_client/configs/users.xml
new file mode 100644
index 000000000000..1874371871a9
--- /dev/null
+++ b/tests/integration/test_dotnet_client/configs/users.xml
@@ -0,0 +1,32 @@
+<?xml version="1.0"?>
+<clickhouse>
+    <profiles>
+        <default>
+        </default>
+    </profiles>
+
+    <users>
+        <default>
+            <password>123</password>
+            <networks incl="networks" replace="replace">
+                <ip>::/0</ip>
+            </networks>
+            <profile>default</profile>
+            <quota>default</quota>
+        </default>
+
+        <user_with_empty_password>
+            <password></password>
+            <networks incl="networks" replace="replace">
+                <ip>::/0</ip>
+            </networks>
+            <profile>default</profile>
+            <quota>default</quota>
+        </user_with_empty_password>
+    </users>
+
+    <quotas>
+        <default>
+        </default>
+    </quotas>
+</clickhouse>
diff --git a/tests/integration/test_dotnet_client/dotnet.reference b/tests/integration/test_dotnet_client/dotnet.reference
new file mode 100644
index 000000000000..a3d6e1d5ba83
Binary files /dev/null and b/tests/integration/test_dotnet_client/dotnet.reference differ
diff --git a/tests/integration/test_dotnet_client/test.py b/tests/integration/test_dotnet_client/test.py
new file mode 100644
index 000000000000..4cc16ac826ef
--- /dev/null
+++ b/tests/integration/test_dotnet_client/test.py
@@ -0,0 +1,47 @@
+# coding: utf-8
+
+import datetime
+import math
+import os
+import time
+
+import logging
+import docker
+import pytest
+from docker.models.containers import Container
+from helpers.cluster import ClickHouseCluster, get_docker_compose_path, run_and_check
+
+SCRIPT_DIR = os.path.dirname(os.path.realpath(__file__))
+DOCKER_COMPOSE_PATH = get_docker_compose_path()
+
+cluster = ClickHouseCluster(__file__)
+node = cluster.add_instance('node',
+                            user_configs=["configs/users.xml"], env_variables={'UBSAN_OPTIONS': 'print_stacktrace=1'})
+
+@pytest.fixture(scope="module")
+def started_cluster():
+    cluster.start()
+    try:
+        yield cluster
+    finally:
+        cluster.shutdown()
+
+
+@pytest.fixture(scope='module')
+def dotnet_container():
+    docker_compose = os.path.join(DOCKER_COMPOSE_PATH, 'docker_compose_dotnet_client.yml')
+    run_and_check(
+        ['docker-compose', '-p', cluster.project_name, '-f', docker_compose, 'up', '--no-recreate', '-d', '--no-build'])
+    yield docker.from_env().containers.get(cluster.project_name + '_dotnet1_1')
+
+
+def test_dotnet_client(started_cluster, dotnet_container):
+    with open(os.path.join(SCRIPT_DIR, 'dotnet.reference'), 'rb') as fp:
+        reference = fp.read()
+
+    code, (stdout, stderr) = dotnet_container.exec_run(
+        'dotnet run --host {host} --port {port} --user default --password 123 --database default'
+        .format(host=started_cluster.get_instance_ip('node'), port=8123), demux=True)
+
+    assert code == 0
+    assert stdout == reference
