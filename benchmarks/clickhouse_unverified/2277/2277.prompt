You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
LLVM JIT interface
I hereby agree to the terms of the CLA available at: https://yandex.ru/legal/cla/?lang=en

This pull request adds the capability to compile built-in functions with numeric (possibly nullable) arguments and return type to native code through `llvm::IRBuilder`. Compilable functions are automatically inlined into each other for a performance boost. The function can then also decide where to evaluate each of its inlined arguments, allowing for some laziness (non-compilable subexpressions still have to be evaluated eagerly).

This PR also includes implementations of the interface for most arithmetic and logic functions. Don't have any performance comparisons yet, though.

Known problems:

 * ~~this code will break with LLVM 7 when it's released due to API incompatibilities;~~
 * LLVM has a ton of unused parameters in its header files, so I had to add `-Wno-unused-parameter` to clickhouse_functions;
 * *always* inlining compilable subexpressions completely undoes all of common subexpression eliminator's work â€” using a heuristic, e.g. thresholding based on the size of the subexpression's graph multiplied by the number of times it is used, might be better overall;
 * `and` has somewhat weird semantics in that `and(false, null)` is null. This means it's impossible for `and` to be lazy in the second argument if it's nullable. (`and(x, non-nullable)` and `and(null, x)` work fine, though.)
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
