{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 57000,
  "instance_id": "ClickHouse__ClickHouse-57000",
  "issue_numbers": [
    "56995"
  ],
  "base_commit": "2a59a688def02bb8095a2c274b2db6e567b7724c",
  "patch": "diff --git a/docs/en/sql-reference/functions/string-functions.md b/docs/en/sql-reference/functions/string-functions.md\nindex 4b6e03563013..1940993ce0b1 100644\n--- a/docs/en/sql-reference/functions/string-functions.md\n+++ b/docs/en/sql-reference/functions/string-functions.md\n@@ -439,7 +439,7 @@ concat(s1, s2, ...)\n \n **Arguments**\n \n-At least two values of arbitrary type.\n+At least one value of arbitrary type.\n \n Arguments which are not of types [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md) are converted to strings using their default serialization. As this decreases performance, it is not recommended to use non-String/FixedString arguments.\n \ndiff --git a/src/Functions/concat.cpp b/src/Functions/concat.cpp\nindex f426f662868e..6403c4b8416a 100644\n--- a/src/Functions/concat.cpp\n+++ b/src/Functions/concat.cpp\n@@ -207,6 +207,8 @@ class ConcatOverloadResolver : public IFunctionOverloadResolver\n \n     FunctionBasePtr buildImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & return_type) const override\n     {\n+        if (arguments.size() == 1)\n+            return FunctionFactory::instance().getImpl(\"toString\", context)->build(arguments);\n         if (std::ranges::all_of(arguments, [](const auto & elem) { return isArray(elem.type); }))\n             return FunctionFactory::instance().getImpl(\"arrayConcat\", context)->build(arguments);\n         if (std::ranges::all_of(arguments, [](const auto & elem) { return isMap(elem.type); }))\n@@ -221,10 +223,10 @@ class ConcatOverloadResolver : public IFunctionOverloadResolver\n \n     DataTypePtr getReturnTypeImpl(const DataTypes & arguments) const override\n     {\n-        if (arguments.size() < 2)\n+        if (arguments.empty())\n             throw Exception(\n                 ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH,\n-                \"Number of arguments for function {} doesn't match: passed {}, should be at least 2.\",\n+                \"Number of arguments for function {} doesn't match: passed {}, should be at least 1.\",\n                 getName(),\n                 arguments.size());\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00727_concat.reference b/tests/queries/0_stateless/00727_concat.reference\nindex 1e102051fd0f..6fb23c072d33 100644\n--- a/tests/queries/0_stateless/00727_concat.reference\n+++ b/tests/queries/0_stateless/00727_concat.reference\n@@ -64,4 +64,11 @@ Three arguments test\n 42144255\n 42144\n 42144255\n+-- Single argument tests\n+42\n+42\n+foo\n+foo\n+\\N\n+\\N\n Testing the alias\ndiff --git a/tests/queries/0_stateless/00727_concat.sql b/tests/queries/0_stateless/00727_concat.sql\nindex edeaf9340ddc..f5048dcaaae9 100644\n--- a/tests/queries/0_stateless/00727_concat.sql\n+++ b/tests/queries/0_stateless/00727_concat.sql\n@@ -83,7 +83,14 @@ SELECT concat(materialize(42 :: Int32), materialize(144 :: UInt64), materialize(\n SELECT concat(42, 144);\n SELECT concat(42, 144, 255);\n \n+SELECT '-- Single argument tests';\n+SELECT concat(42);\n+SELECT concat(materialize(42));\n+SELECT concat('foo');\n+SELECT concat(materialize('foo'));\n+SELECT concat(NULL);\n+SELECT concat(materialize(NULL :: Nullable(UInt64)));\n+\n SELECT CONCAT('Testing the ', 'alias');\n \n SELECT concat();  -- { serverError 42 }\n-SELECT concat(1); -- { serverError 42 }\n",
  "problem_statement": "MySQL compatibility: concat should also accept 1 argument\nTableau's `STR(x)` function uses `concat` under the hood with just one argument to convert the input to a String (instead of `CONVERT` or just `CAST x AS type`).\r\n\r\nA calculated field such as:\r\n```\r\nIF ISNULL([User Id]) THEN [Address] ELSE STR([User Id]) END\r\n```\r\n\r\ngenerates the following error:\r\n\r\n```\r\nCode: 42. DB::Exception: Number of arguments for function concat doesn't match: passed 1, should be at least 2.: While processing if(userId IS NULL, address, concat(userId)). (NUMBER_OF_ARGUMENTS_DOESNT_MATCH) (version 23.11.1.1442 (official build))\r\n```\n",
  "hints_text": "",
  "created_at": "2023-11-20T15:30:59Z",
  "modified_files": [
    "docs/en/sql-reference/functions/string-functions.md",
    "src/Functions/concat.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00727_concat.reference",
    "tests/queries/0_stateless/00727_concat.sql"
  ]
}