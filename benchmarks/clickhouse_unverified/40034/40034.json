{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 40034,
  "instance_id": "ClickHouse__ClickHouse-40034",
  "issue_numbers": [
    "39419"
  ],
  "base_commit": "99b9e85a8fb4fce1f6bea579a6588ca9e51b280b",
  "patch": "diff --git a/src/Columns/ColumnArray.cpp b/src/Columns/ColumnArray.cpp\nindex 24da96443355..93bcc3eb611e 100644\n--- a/src/Columns/ColumnArray.cpp\n+++ b/src/Columns/ColumnArray.cpp\n@@ -56,7 +56,9 @@ ColumnArray::ColumnArray(MutableColumnPtr && nested_column, MutableColumnPtr &&\n \n         /// This will also prevent possible overflow in offset.\n         if (data->size() != last_offset)\n-            throw Exception(\"offsets_column has data inconsistent with nested_column\", ErrorCodes::LOGICAL_ERROR);\n+            throw Exception(ErrorCodes::LOGICAL_ERROR,\n+                \"offsets_column has data inconsistent with nested_column. Data size: {}, last offset: {}\",\n+                data->size(), last_offset);\n     }\n \n     /** NOTE\ndiff --git a/src/DataTypes/Serializations/SerializationTuple.cpp b/src/DataTypes/Serializations/SerializationTuple.cpp\nindex 8dc15fc98410..8138b15c9aff 100644\n--- a/src/DataTypes/Serializations/SerializationTuple.cpp\n+++ b/src/DataTypes/Serializations/SerializationTuple.cpp\n@@ -135,20 +135,21 @@ void SerializationTuple::deserializeText(IColumn & column, ReadBuffer & istr, co\n             }\n             elems[i]->deserializeTextQuoted(extractElementColumn(column, i), istr, settings);\n         }\n-    });\n \n-    // Special format for one element tuple (1,)\n-    if (1 == elems.size())\n-    {\n+        // Special format for one element tuple (1,)\n+        if (1 == elems.size())\n+        {\n+            skipWhitespaceIfAny(istr);\n+            // Allow both (1) and (1,)\n+            checkChar(',', istr);\n+        }\n+\n         skipWhitespaceIfAny(istr);\n-        // Allow both (1) and (1,)\n-        checkChar(',', istr);\n-    }\n-    skipWhitespaceIfAny(istr);\n-    assertChar(')', istr);\n+        assertChar(')', istr);\n \n-    if (whole && !istr.eof())\n-        throwUnexpectedDataAfterParsedValue(column, istr, settings, \"Tuple\");\n+        if (whole && !istr.eof())\n+            throwUnexpectedDataAfterParsedValue(column, istr, settings, \"Tuple\");\n+    });\n }\n \n void SerializationTuple::serializeTextJSON(const IColumn & column, size_t row_num, WriteBuffer & ostr, const FormatSettings & settings) const\n@@ -213,19 +214,18 @@ void SerializationTuple::deserializeTextJSON(IColumn & column, ReadBuffer & istr\n                 auto & element_column = extractElementColumn(column, element_pos);\n                 elems[element_pos]->deserializeTextJSON(element_column, istr, settings);\n             }\n-        });\n \n-        skipWhitespaceIfAny(istr);\n-        assertChar('}', istr);\n+            skipWhitespaceIfAny(istr);\n+            assertChar('}', istr);\n+        });\n     }\n     else\n     {\n-        const size_t size = elems.size();\n         assertChar('[', istr);\n \n         addElementSafe(elems.size(), column, [&]\n         {\n-            for (size_t i = 0; i < size; ++i)\n+            for (size_t i = 0; i < elems.size(); ++i)\n             {\n                 skipWhitespaceIfAny(istr);\n                 if (i != 0)\n@@ -235,10 +235,10 @@ void SerializationTuple::deserializeTextJSON(IColumn & column, ReadBuffer & istr\n                 }\n                 elems[i]->deserializeTextJSON(extractElementColumn(column, i), istr, settings);\n             }\n-        });\n \n-        skipWhitespaceIfAny(istr);\n-        assertChar(']', istr);\n+            skipWhitespaceIfAny(istr);\n+            assertChar(']', istr);\n+        });\n     }\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02381_parse_array_of_tuples.reference b/tests/queries/0_stateless/02381_parse_array_of_tuples.reference\nnew file mode 100644\nindex 000000000000..fa7137d800db\n--- /dev/null\n+++ b/tests/queries/0_stateless/02381_parse_array_of_tuples.reference\n@@ -0,0 +1,3 @@\n+1\t[[]]\n+2\t[[(500,246)]]\n+3\t[[(500,10)]]\ndiff --git a/tests/queries/0_stateless/02381_parse_array_of_tuples.sql b/tests/queries/0_stateless/02381_parse_array_of_tuples.sql\nnew file mode 100644\nindex 000000000000..51db5a0fe9b4\n--- /dev/null\n+++ b/tests/queries/0_stateless/02381_parse_array_of_tuples.sql\n@@ -0,0 +1,14 @@\n+DROP TABLE IF EXISTS t_parse_tuples;\n+\n+CREATE TABLE t_parse_tuples\n+(\n+    id UInt32,\n+    arr Array(Array(Tuple(c1 Int32, c2 UInt8)))\n+)\n+ENGINE = Memory;\n+\n+INSERT INTO t_parse_tuples VALUES (1, [[]]), (2, [[(500, -10)]]), (3, [[(500, '10')]]);\n+\n+SELECT * FROM t_parse_tuples ORDER BY id;\n+\n+DROP TABLE IF EXISTS t_parse_tuples;\n",
  "problem_statement": "offsets_column has data inconsistent with nested_column: data for INSERT was parsed from query. (LOGICAL_ERROR)\nhttps://pastila.nl/?00ad187f/ecfb3d92d2e879533cc3aea0536ab3d7\r\n\r\n22.3 Exception on client:\r\nCode: 49. DB::Exception: offsets_column has data inconsistent with nested_column: data for INSERT was parsed from query. (LOGICAL_ERROR)\r\n\r\n22.7 the insert hangs\r\n\r\n21.8.4 Received exception from server (version 21.8.4): Code: 62. DB::Exception: Received from localhost:9000. DB::Exception: Empty query.\r\n\r\n\n",
  "hints_text": "It's a bug in interpreting of expressions in `Values` format.\r\n\r\n```sql\r\nDROP TABLE IF EXISTS transactions;\r\n\r\nCREATE TABLE transactions\r\n(\r\n    arr Array(Array(Tuple(bonus Int32, bonusPriority UInt8)))\r\n)\r\nENGINE = Memory;\r\n\r\nINSERT INTO transactions(arr) VALUES ([[]]), ([[(500, -10)]]); -- hangs or logical error\r\n\r\nINSERT INTO transactions(arr) VALUES ([[]]), ([[(500, 10)]]); -- ok\r\n\r\nINSERT INTO transactions(arr) FORMAT JSONEachRow {\"arr\": [[]]} {\"arr\": [[{\"bonus\": 500, \"bonusPriority\": -10}]]}\r\n\r\nException on client:\r\nCode: 72. DB::ParsingException: Unsigned type must not contain '-' symbol: (while reading the value of key arr): While executing ParallelParsingBlockInputFormat: data for INSERT was parsed from query: (at row 2)\r\n. (CANNOT_PARSE_NUMBER)\r\n```\r\n",
  "created_at": "2022-08-09T17:30:23Z",
  "modified_files": [
    "src/Columns/ColumnArray.cpp",
    "src/DataTypes/Serializations/SerializationTuple.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02381_parse_array_of_tuples.reference",
    "b/tests/queries/0_stateless/02381_parse_array_of_tuples.sql"
  ]
}