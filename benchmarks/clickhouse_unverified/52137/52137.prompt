You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Avro Union with Single Type Element incompatibility issue
When the AVRO schema has an element defined as a single Union type, the deserializer crashes because it doesn't know how to handle the mapping since it is assumed that an `AVRO_UNION` must define two types, as specific at https://github.com/ucasfl/ClickHouse/blob/f98e01d538b97123296932958404ef1ea21b9798/src/Processors/Formats/Impl/AvroRowInputFormat.cpp#L283 . The error is `Type Int64 is not compatible with Avro union`, when defined as follows:

```
            {
              "name": "test_element",
              "type": [
                "long"
              ]
            }
```

Clickhouse version: 23.4.5.22

The full error stack:
```
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 0. DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0xbc89a64 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 1. ? @ 0x105a62e8 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 2. DB::AvroDeserializer::createDeserializeFn(std::shared_ptr<avro::Node> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x115cd2d4 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 3. DB::AvroDeserializer::createDeserializeFn(std::shared_ptr<avro::Node> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x115cd124 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 4. DB::AvroDeserializer::createDeserializeFn(std::shared_ptr<avro::Node> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x115ccaf0 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 5. DB::AvroDeserializer::createDeserializeFn(std::shared_ptr<avro::Node> const&, std::shared_ptr<DB::IDataType const> const&) @ 0x115cc964 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 6. DB::AvroDeserializer::createAction(DB::Block const&, std::shared_ptr<avro::Node> const&, String const&) @ 0x115d03b0 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 7. DB::AvroDeserializer::createAction(DB::Block const&, std::shared_ptr<avro::Node> const&, String const&) @ 0x115d1294 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 8. DB::AvroDeserializer::AvroDeserializer(DB::Block const&, avro::ValidSchema, bool, bool, DB::FormatSettings const&) @ 0x115d2358 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 9. DB::AvroConfluentRowInputFormat::getOrCreateDeserializer(unsigned int) @ 0x115d5060 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 10. DB::AvroConfluentRowInputFormat::readRow(std::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn>>>&, DB::RowReadExtension&) @ 0x115d47b4 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 11. DB::IRowInputFormat::generate() @ 0x115efcc8 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 12. DB::ISource::tryGenerate() @ 0x115790ac in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 13. DB::ISource::work() @ 0x11578bb0 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 14. DB::StreamingFormatExecutor::execute() @ 0x11598260 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 15. DB::KafkaSource::generateImpl() @ 0x10ef1ce8 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 16. DB::KafkaSource::generate() @ 0x10ef4678 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 17. DB::ISource::tryGenerate() @ 0x115790ac in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 18. DB::ISource::work() @ 0x11578bb0 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 19. DB::ExecutionThreadContext::executeTask() @ 0x1158e04c in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 20. DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x11585398 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 21. DB::PipelineExecutor::executeImpl(unsigned long) @ 0x1158483c in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 22. DB::PipelineExecutor::execute(unsigned long) @ 0x11584494 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 23. DB::CompletedPipelineExecutor::execute() @ 0x11582bf8 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 24. DB::StorageKafka::streamToViews() @ 0x10ee2bd4 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 25. DB::StorageKafka::threadFunc(unsigned long) @ 0x10ee11bc in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 26. DB::BackgroundSchedulePoolTaskInfo::execute() @ 0xf8da35c in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 27. DB::BackgroundSchedulePool::threadFunction() @ 0xf8dd1bc in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 28. ? @ 0xf8ddf38 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 29. ThreadPoolImpl<std::thread>::worker(std::__list_iterator<std::thread, void*>) @ 0xbd411d4 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 30. ? @ 0xbd46388 in /usr/bin/clickhouse
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 31. start_thread @ 0x7624 in /usr/lib/aarch64-linux-gnu/libpthread-2.31.so
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2  (version 23.4.5.22 (official build))
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 2023.07.15 06:53:09.265133 [ 231 ] {} <Error> void DB::StorageKafka::threadFunc(size_t): Code: 44. DB::Exception: Type Int64 is not compatible with Avro union:
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 [
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2     "long"
chi-clickhouse-cluster-clickhouse-2-ch-cluster-0-1-0 clickhouse-cluster-clickhouse-2 ]: column transactions: while parsing Kafka message (topic: xxx, partition: 6, offset: 585030)': While executing Kafka. (ILLEGAL_COLUMN), Stack trace (when copying this message, always include the lines below):
```

**Expected behaviour**

Take the first type of the Union specified
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
