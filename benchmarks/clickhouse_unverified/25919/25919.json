{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 25919,
  "instance_id": "ClickHouse__ClickHouse-25919",
  "issue_numbers": [
    "25892"
  ],
  "base_commit": "f16e8c3a4bafa1ddcbc13ff412fabc8aa7bf1fdb",
  "patch": "diff --git a/src/AggregateFunctions/AggregateFunctionQuantile.cpp b/src/AggregateFunctions/AggregateFunctionQuantile.cpp\nindex cae0021082f0..11b145856532 100644\n--- a/src/AggregateFunctions/AggregateFunctionQuantile.cpp\n+++ b/src/AggregateFunctions/AggregateFunctionQuantile.cpp\n@@ -125,44 +125,47 @@ AggregateFunctionPtr createAggregateFunctionQuantile(\n \n void registerAggregateFunctionsQuantile(AggregateFunctionFactory & factory)\n {\n+    /// For aggregate functions returning array we cannot return NULL on empty set.\n+    AggregateFunctionProperties properties = { .returns_default_when_only_null = true };\n+\n     factory.registerFunction(NameQuantile::name, createAggregateFunctionQuantile<FuncQuantile>);\n-    factory.registerFunction(NameQuantiles::name, createAggregateFunctionQuantile<FuncQuantiles>);\n+    factory.registerFunction(NameQuantiles::name, { createAggregateFunctionQuantile<FuncQuantiles>, properties });\n \n     factory.registerFunction(NameQuantileDeterministic::name, createAggregateFunctionQuantile<FuncQuantileDeterministic>);\n-    factory.registerFunction(NameQuantilesDeterministic::name, createAggregateFunctionQuantile<FuncQuantilesDeterministic>);\n+    factory.registerFunction(NameQuantilesDeterministic::name, { createAggregateFunctionQuantile<FuncQuantilesDeterministic>, properties });\n \n     factory.registerFunction(NameQuantileExact::name, createAggregateFunctionQuantile<FuncQuantileExact>);\n-    factory.registerFunction(NameQuantilesExact::name, createAggregateFunctionQuantile<FuncQuantilesExact>);\n+    factory.registerFunction(NameQuantilesExact::name, { createAggregateFunctionQuantile<FuncQuantilesExact>, properties });\n \n     factory.registerFunction(NameQuantileExactLow::name, createAggregateFunctionQuantile<FuncQuantileExactLow>);\n-    factory.registerFunction(NameQuantilesExactLow::name, createAggregateFunctionQuantile<FuncQuantilesExactLow>);\n+    factory.registerFunction(NameQuantilesExactLow::name, { createAggregateFunctionQuantile<FuncQuantilesExactLow>, properties });\n \n     factory.registerFunction(NameQuantileExactHigh::name, createAggregateFunctionQuantile<FuncQuantileExactHigh>);\n-    factory.registerFunction(NameQuantilesExactHigh::name, createAggregateFunctionQuantile<FuncQuantilesExactHigh>);\n+    factory.registerFunction(NameQuantilesExactHigh::name, { createAggregateFunctionQuantile<FuncQuantilesExactHigh>, properties });\n \n     factory.registerFunction(NameQuantileExactExclusive::name, createAggregateFunctionQuantile<FuncQuantileExactExclusive>);\n-    factory.registerFunction(NameQuantilesExactExclusive::name, createAggregateFunctionQuantile<FuncQuantilesExactExclusive>);\n+    factory.registerFunction(NameQuantilesExactExclusive::name, { createAggregateFunctionQuantile<FuncQuantilesExactExclusive>, properties });\n \n     factory.registerFunction(NameQuantileExactInclusive::name, createAggregateFunctionQuantile<FuncQuantileExactInclusive>);\n-    factory.registerFunction(NameQuantilesExactInclusive::name, createAggregateFunctionQuantile<FuncQuantilesExactInclusive>);\n+    factory.registerFunction(NameQuantilesExactInclusive::name, { createAggregateFunctionQuantile<FuncQuantilesExactInclusive>, properties });\n \n     factory.registerFunction(NameQuantileExactWeighted::name, createAggregateFunctionQuantile<FuncQuantileExactWeighted>);\n-    factory.registerFunction(NameQuantilesExactWeighted::name, createAggregateFunctionQuantile<FuncQuantilesExactWeighted>);\n+    factory.registerFunction(NameQuantilesExactWeighted::name, { createAggregateFunctionQuantile<FuncQuantilesExactWeighted>, properties });\n \n     factory.registerFunction(NameQuantileTiming::name, createAggregateFunctionQuantile<FuncQuantileTiming>);\n-    factory.registerFunction(NameQuantilesTiming::name, createAggregateFunctionQuantile<FuncQuantilesTiming>);\n+    factory.registerFunction(NameQuantilesTiming::name, { createAggregateFunctionQuantile<FuncQuantilesTiming>, properties });\n \n     factory.registerFunction(NameQuantileTimingWeighted::name, createAggregateFunctionQuantile<FuncQuantileTimingWeighted>);\n-    factory.registerFunction(NameQuantilesTimingWeighted::name, createAggregateFunctionQuantile<FuncQuantilesTimingWeighted>);\n+    factory.registerFunction(NameQuantilesTimingWeighted::name, { createAggregateFunctionQuantile<FuncQuantilesTimingWeighted>, properties });\n \n     factory.registerFunction(NameQuantileTDigest::name, createAggregateFunctionQuantile<FuncQuantileTDigest>);\n-    factory.registerFunction(NameQuantilesTDigest::name, createAggregateFunctionQuantile<FuncQuantilesTDigest>);\n+    factory.registerFunction(NameQuantilesTDigest::name, { createAggregateFunctionQuantile<FuncQuantilesTDigest>, properties });\n \n     factory.registerFunction(NameQuantileTDigestWeighted::name, createAggregateFunctionQuantile<FuncQuantileTDigestWeighted>);\n-    factory.registerFunction(NameQuantilesTDigestWeighted::name, createAggregateFunctionQuantile<FuncQuantilesTDigestWeighted>);\n+    factory.registerFunction(NameQuantilesTDigestWeighted::name, { createAggregateFunctionQuantile<FuncQuantilesTDigestWeighted>, properties });\n \n     factory.registerFunction(NameQuantileBFloat16::name, createAggregateFunctionQuantile<FuncQuantileBFloat16>);\n-    factory.registerFunction(NameQuantilesBFloat16::name, createAggregateFunctionQuantile<FuncQuantilesBFloat16>);\n+    factory.registerFunction(NameQuantilesBFloat16::name, { createAggregateFunctionQuantile<FuncQuantilesBFloat16>, properties });\n \n     /// 'median' is an alias for 'quantile'\n     factory.registerAlias(\"median\", NameQuantile::name);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01936_quantiles_cannot_return_null.reference b/tests/queries/0_stateless/01936_quantiles_cannot_return_null.reference\nnew file mode 100644\nindex 000000000000..f9b4a3157f77\n--- /dev/null\n+++ b/tests/queries/0_stateless/01936_quantiles_cannot_return_null.reference\n@@ -0,0 +1,4 @@\n+[nan]\n+[nan]\n+[nan]\n+[nan]\ndiff --git a/tests/queries/0_stateless/01936_quantiles_cannot_return_null.sql b/tests/queries/0_stateless/01936_quantiles_cannot_return_null.sql\nnew file mode 100644\nindex 000000000000..81ac6224268b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01936_quantiles_cannot_return_null.sql\n@@ -0,0 +1,9 @@\n+set aggregate_functions_null_for_empty=0;\n+\n+SELECT quantiles(0.95)(x)\u3000FROM\u3000(SELECT 1 x WHERE 0);\n+SELECT quantiles(0.95)(number)\u3000FROM\u3000(SELECT number FROM numbers(10) WHERE number > 10);\n+\n+set aggregate_functions_null_for_empty=1;\n+\n+SELECT quantiles(0.95)(x)\u3000FROM\u3000(SELECT 1 x WHERE 0);\n+SELECT quantiles(0.95)(number)\u3000FROM\u3000(SELECT number FROM numbers(10) WHERE number > 10);\n",
  "problem_statement": "Error if quantiles is used with aggregate_functions_null_for_empty\n```sql\r\nset aggregate_functions_null_for_empty=1;\r\n\r\nSELECT quantiles(0.95)(x)\u3000FROM\u3000(\u3000    SELECT 1 x    WHERE 0\u3000);\r\n\r\nDB::Exception: Nested type Array(Float64) cannot be inside Nullable type.\r\n\r\nSELECT quantiles(0.95)(number)\u3000FROM\u3000(\u3000    SELECT number\u3000    FROM numbers(10)\u3000    WHERE number > 10\u3000);\r\n\r\nDB::Exception: Nested type Array(Float64) cannot be inside Nullable type.\r\n```\n",
  "hints_text": "",
  "created_at": "2021-07-02T19:48:19Z",
  "modified_files": [
    "src/AggregateFunctions/AggregateFunctionQuantile.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01936_quantiles_cannot_return_null.reference",
    "b/tests/queries/0_stateless/01936_quantiles_cannot_return_null.sql"
  ]
}