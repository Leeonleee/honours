{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 80448,
  "instance_id": "ClickHouse__ClickHouse-80448",
  "issue_numbers": [
    "79987"
  ],
  "base_commit": "d741624c3a6e1e51bea171f3487a2fc1c84631c9",
  "patch": "diff --git a/src/Processors/QueryPlan/ReadFromMergeTree.cpp b/src/Processors/QueryPlan/ReadFromMergeTree.cpp\nindex ce2cb5c48934..e57e09fd0ec8 100644\n--- a/src/Processors/QueryPlan/ReadFromMergeTree.cpp\n+++ b/src/Processors/QueryPlan/ReadFromMergeTree.cpp\n@@ -237,6 +237,7 @@ static bool checkAllPartsOnRemoteFS(const RangesInDataParts & parts)\n static SortDescription getSortDescriptionForOutputHeader(\n     const Header & output_header,\n     const Names & sorting_key_columns,\n+    const std::vector<bool> & reverse_flags,\n     const int sort_direction,\n     InputOrderInfoPtr input_order_info,\n     PrewhereInfoPtr prewhere_info,\n@@ -273,15 +274,21 @@ static SortDescription getSortDescriptionForOutputHeader(\n \n     SortDescription sort_description;\n     const Block & header = output_header;\n-    for (const auto & sorting_key : sorting_key_columns)\n+    size_t sort_columns_size = sorting_key_columns.size();\n+    sort_description.reserve(sort_columns_size);\n+    for (size_t i = 0; i < sort_columns_size; ++i)\n     {\n+        const auto & sorting_key = sorting_key_columns[i];\n         const auto it = std::find_if(\n             original_header.begin(), original_header.end(), [&sorting_key](const auto & column) { return column.name == sorting_key; });\n         if (it == original_header.end())\n             break;\n \n         const size_t column_pos = std::distance(original_header.begin(), it);\n-        sort_description.emplace_back((header.begin() + column_pos)->name, sort_direction);\n+        if (!reverse_flags.empty() && reverse_flags[i])\n+            sort_description.emplace_back((header.begin() + column_pos)->name, sort_direction * -1);\n+        else\n+            sort_description.emplace_back((header.begin() + column_pos)->name, sort_direction);\n     }\n \n     if (input_order_info && !enable_vertical_final)\n@@ -659,8 +666,8 @@ Pipe ReadFromMergeTree::readInOrder(\n         else\n             algorithm = std::make_unique<MergeTreeInOrderSelectAlgorithm>(i);\n \n-        auto processor\n-            = std::make_unique<MergeTreeSelectProcessor>(pool, std::move(algorithm), prewhere_info, lazily_read_info, actions_settings, reader_settings);\n+        auto processor = std::make_unique<MergeTreeSelectProcessor>(\n+            pool, std::move(algorithm), prewhere_info, lazily_read_info, actions_settings, reader_settings);\n \n         processor->addPartLevelToChunk(isQueryWithFinal());\n \n@@ -855,12 +862,19 @@ Pipe ReadFromMergeTree::readByLayers(const RangesInDataParts & parts_with_ranges\n         }\n         auto sorting_expr = storage_snapshot->metadata->getSortingKey().expression;\n         const auto & sorting_columns = storage_snapshot->metadata->getSortingKey().column_names;\n+        std::vector<bool> reverse_flags = storage_snapshot->metadata->getSortingKeyReverseFlags();\n \n         sort_description.compile_sort_description = settings[Setting::compile_sort_description];\n         sort_description.min_count_to_compile_sort_description = settings[Setting::min_count_to_compile_sort_description];\n \n-        for (size_t j = 0; j < input_order_info->used_prefix_of_sorting_key_size; ++j)\n-            sort_description.emplace_back(sorting_columns[j], input_order_info->direction);\n+        sort_description.reserve(input_order_info->used_prefix_of_sorting_key_size);\n+        for (size_t i = 0; i < input_order_info->used_prefix_of_sorting_key_size; ++i)\n+        {\n+            if (!reverse_flags.empty() && reverse_flags[i])\n+                sort_description.emplace_back(sorting_columns[i], input_order_info->direction * -1);\n+            else\n+                sort_description.emplace_back(sorting_columns[i], input_order_info->direction);\n+        }\n \n         reading_step_getter = [this, &in_order_column_names_to_read, &info, sorting_expr, &sort_description](auto parts)\n         {\n@@ -889,8 +903,17 @@ Pipe ReadFromMergeTree::readByLayers(const RangesInDataParts & parts_with_ranges\n             if (pipe.numOutputPorts() != 1)\n             {\n                 auto transform = std::make_shared<MergingSortedTransform>(\n-                    pipe.getHeader(), pipe.numOutputPorts(), sort_description, block_size.max_block_size_rows, /*max_block_size_bytes=*/0, SortingQueueStrategy::Batch,\n-                    0, false, nullptr, false, /*apply_virtual_row_conversions*/ false);\n+                    pipe.getHeader(),\n+                    pipe.numOutputPorts(),\n+                    sort_description,\n+                    block_size.max_block_size_rows,\n+                    /*max_block_size_bytes=*/0,\n+                    SortingQueueStrategy::Batch,\n+                    0,\n+                    false,\n+                    nullptr,\n+                    false,\n+                    /*apply_virtual_row_conversions*/ false);\n \n                 pipe.addTransform(std::move(transform));\n             }\n@@ -1262,13 +1285,20 @@ Pipe ReadFromMergeTree::spreadMarkRangesAmongStreamsWithOrder(\n         auto syntax_result = TreeRewriter(context).analyze(order_key_prefix_ast, storage_snapshot->metadata->getColumns().get(GetColumnsOptions(GetColumnsOptions::AllPhysical).withSubcolumns()));\n         auto sorting_key_prefix_expr = ExpressionAnalyzer(order_key_prefix_ast, syntax_result, context).getActionsDAG(false);\n         const auto & sorting_columns = storage_snapshot->metadata->getSortingKey().column_names;\n+        std::vector<bool> reverse_flags = storage_snapshot->metadata->getSortingKeyReverseFlags();\n \n         SortDescription sort_description;\n         sort_description.compile_sort_description = settings[Setting::compile_sort_description];\n         sort_description.min_count_to_compile_sort_description = settings[Setting::min_count_to_compile_sort_description];\n \n-        for (size_t j = 0; j < prefix_size; ++j)\n-            sort_description.emplace_back(sorting_columns[j], input_order_info->direction);\n+        sort_description.reserve(prefix_size);\n+        for (size_t i = 0; i < prefix_size; ++i)\n+        {\n+            if (!reverse_flags.empty() && reverse_flags[i])\n+                sort_description.emplace_back(sorting_columns[i], input_order_info->direction * -1);\n+            else\n+                sort_description.emplace_back(sorting_columns[i], input_order_info->direction);\n+        }\n \n         auto sorting_key_expr = std::make_shared<ExpressionActions>(std::move(sorting_key_prefix_expr));\n \n@@ -1280,8 +1310,17 @@ Pipe ReadFromMergeTree::spreadMarkRangesAmongStreamsWithOrder(\n             if (pipe.numOutputPorts() > 1)\n             {\n                 auto transform = std::make_shared<MergingSortedTransform>(\n-                    pipe.getHeader(), pipe.numOutputPorts(), sort_description, block_size.max_block_size_rows, /*max_block_size_bytes=*/0, SortingQueueStrategy::Batch,\n-                    0, false, nullptr, false, /*apply_virtual_row_conversions*/ false);\n+                    pipe.getHeader(),\n+                    pipe.numOutputPorts(),\n+                    sort_description,\n+                    block_size.max_block_size_rows,\n+                    /*max_block_size_bytes=*/0,\n+                    SortingQueueStrategy::Batch,\n+                    0,\n+                    false,\n+                    nullptr,\n+                    false,\n+                    /*apply_virtual_row_conversions*/ false);\n \n                 pipe.addTransform(std::move(transform));\n             }\n@@ -1554,9 +1593,9 @@ Pipe ReadFromMergeTree::spreadMarkRangesAmongStreamsFinal(\n         for (size_t i = 0; i < sort_columns_size; ++i)\n         {\n             if (!reverse_flags.empty() && reverse_flags[i])\n-                sort_description.emplace_back(sort_columns[i], -1, 1);\n+                sort_description.emplace_back(sort_columns[i], -1);\n             else\n-                sort_description.emplace_back(sort_columns[i], 1, 1);\n+                sort_description.emplace_back(sort_columns[i], 1);\n         }\n \n         for (auto & pipe : pipes)\n@@ -2032,6 +2071,7 @@ void ReadFromMergeTree::updateSortDescription()\n     result_sort_description = getSortDescriptionForOutputHeader(\n         *output_header,\n         storage_snapshot->metadata->getSortingKeyColumns(),\n+        storage_snapshot->metadata->getSortingKeyReverseFlags(),\n         getSortDirection(),\n         query_info.input_order_info,\n         prewhere_info,\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03459-reverse-sorting-key-stable-result.reference b/tests/queries/0_stateless/03459-reverse-sorting-key-stable-result.reference\nnew file mode 100644\nindex 000000000000..fc35398c6c73\n--- /dev/null\n+++ b/tests/queries/0_stateless/03459-reverse-sorting-key-stable-result.reference\n@@ -0,0 +1,11 @@\n+-- { echo ON }\n+\n+drop table if exists t;\n+create table t(A Int64) partition by (A % 64) order by A desc settings allow_experimental_reverse_key=1\n+as select intDiv(number,11111) from numbers(7e5) union all select number from numbers(7e5);\n+set max_threads=1;\n+select cityHash64(groupArray(A)) from (select A from t order by A desc limit 10);\n+17781438751011572588\n+select cityHash64(groupArray(A))  from (select A from t order by identity(A) desc limit 10);\n+17781438751011572588\n+drop table t;\ndiff --git a/tests/queries/0_stateless/03459-reverse-sorting-key-stable-result.sql b/tests/queries/0_stateless/03459-reverse-sorting-key-stable-result.sql\nnew file mode 100644\nindex 000000000000..21df7f78dab7\n--- /dev/null\n+++ b/tests/queries/0_stateless/03459-reverse-sorting-key-stable-result.sql\n@@ -0,0 +1,14 @@\n+-- { echo ON }\n+\n+drop table if exists t;\n+\n+create table t(A Int64) partition by (A % 64) order by A desc settings allow_experimental_reverse_key=1\n+as select intDiv(number,11111) from numbers(7e5) union all select number from numbers(7e5);\n+\n+set max_threads=1;\n+\n+select cityHash64(groupArray(A)) from (select A from t order by A desc limit 10);\n+\n+select cityHash64(groupArray(A))  from (select A from t order by identity(A) desc limit 10);\n+\n+drop table t;\n",
  "problem_statement": "allow_experimental_reverse_key produces unexpected results\n### Company or project name\n\n_No response_\n\n### Describe the unexpected behaviour\n\n@amosbird \n\nWhen I execute `order by A desc` and `order by identity(A) desc` I expect the same result.\n\nI got 3 different results here https://fiddle.clickhouse.com/9dc3d794-1850-494b-a596-8de4fd5be7e7\nBut I expect that all results must be same.\n\nI'm not really sure that the issue is in `allow_experimental_reverse_key`, I found it accidentally.\n\n### How to reproduce\n\n```\ncreate table t1(A Int64) partition by (A % 100) order by A desc\nsettings allow_experimental_reverse_key=1   \nas \nselect intDiv(number,1111) from numbers(100000) \nunion all\nselect intHash32(number) from numbers(1e6);\n\ncreate table t2(A Int64) partition by (A % 10) order by A desc\nsettings allow_experimental_reverse_key=1  \nas select intHash32(-number) from numbers(1e4);\n\nset max_parallel_replicas=1;\n\n-- distributed table / emulates 3 shards\ncreate table d1 as remote('127.0.0{0,1,2}', default, t1);\n\n-- distributed table\ncreate table d2 as remote('127.0.0.0', default, t2);\n\ncreate table m as t1 Engine=Merge('default', 'd');\n\n\nselect cityHash64(groupArray(A)) from (\n   select A from m order by A desc LIMIT 10\n);\n\n   +-cityHash64(groupArray(A))-+\n1. |      16468920258867734457 |\n   +---------------------------+\n\nselect cityHash64(groupArray(A)) from (\nselect A from ( select A from d1 union all select A from d2) \norder by A desc LIMIT 10\n);\n\n   +-cityHash64(groupArray(A))-+\n1. |       9143693836475351760 |\n   +---------------------------+\n\n-- Let's use hacks to disable index optimization\n\nselect cityHash64(groupArray(A)) from (\n   select A from m order by identity(A) desc LIMIT 10  -- identity\n);\n\n   +-cityHash64(groupArray(A))-+\n1. |        872953963431779801 | -- I think it's correct \n   +---------------------------+\n\nselect cityHash64(groupArray(A)) from (\nselect A from ( select A from d1 union all select A from d2 \n  limit toUInt64(-1) -- LIMIT to prevent a pushdown\n) \norder by A desc LIMIT 10\n);\n\n   +-cityHash64(groupArray(A))-+\n1. |        872953963431779801 |  \n   +---------------------------+\n```\n\n\n```\nselect A from m order by A desc LIMIT 10;\n\n   +----------A-+\n 1. | 4294247773 |\n 2. | 4294051345 |\n 3. | 4293815635 |\n 4. | 4293337241 |\n 5. | 4293221813 |\n 6. | 4291742056 |\n 7. | 4291245786 |\n 8. | 4290325296 |\n 9. | 4289790196 |\n10. | 4289427441 |\n    +------------+\n\n\nselect A from (\nselect A from d1 union all select A from d2 \n) order by A desc LIMIT 10;\n\n    +----------A-+\n 1. | 4294966773 |\n 2. | 4294965595 |\n 3. | 4294961104 |\n 4. | 4294957861 |\n 5. | 4294954196 |\n 6. | 4294952750 |\n 7. | 4294947712 |\n 8. | 4294947337 |\n 9. | 4294937972 |\n10. | 4294934648 |\n    +------------+\n\n-- Let's use hacks to disable index optimization\n\nselect A from m order by identity(A) desc LIMIT 10;   -- identity\n\n    +----------A-+\n 1. | 4294966773 |\n 2. | 4294966773 |\n 3. | 4294966773 |\n 4. | 4294965595 |\n 5. | 4294965595 |\n 6. | 4294965595 |\n 7. | 4294961104 |\n 8. | 4294961104 |\n 9. | 4294961104 |\n10. | 4294957861 |\n    +------------+\n\nselect A from (\nselect A from d1 union all select A from d2 \nlimit toUInt64(-1) -- LIMIT to prevent a pushdown\n) order by A desc LIMIT 10;\n\n    +----------A-+\n 1. | 4294966773 |\n 2. | 4294966773 |\n 3. | 4294966773 |\n 4. | 4294965595 |\n 5. | 4294965595 |\n 6. | 4294965595 |\n 7. | 4294961104 |\n 8. | 4294961104 |\n 9. | 4294961104 |\n10. | 4294957861 |\n    +------------+\n```\n\n----\n\n## Expected result\n\nWithout allow_experimental_reverse_key (order by tuple) https://fiddle.clickhouse.com/94fa148f-d22d-4f22-bea2-b9c57220655d\n\n```\n   +-cityHash64(groupArray(A))-+\n1. |        872953963431779801 |\n   +---------------------------+\n\n    +----------A-+\n 1. | 4294966773 |\n 2. | 4294966773 |\n 3. | 4294966773 |\n 4. | 4294965595 |\n 5. | 4294965595 |\n 6. | 4294965595 |\n 7. | 4294961104 |\n 8. | 4294961104 |\n 9. | 4294961104 |\n10. | 4294957861 |\n    +------------+\n```\n",
  "hints_text": "Though, I over-complicated it.\n\n```sql\ndrop table if exists t;\n\ncreate table t(A Int64) partition by (A % 64) order by A desc settings allow_experimental_reverse_key=1\nas select intDiv(number,11111) from numbers(100000) union all select number from numbers(1e6);\n\nset max_threads=1;\n\nselect cityHash64(groupArray(A)) from (\n  select A from t order by A desc limit 10);\n--\n15235196910405456233\n\nselect cityHash64(groupArray(A))  from (\n   select A from t order by identity(A) desc limit 10);\n--\n9654669979140457179\n```",
  "created_at": "2025-05-19T11:06:32Z",
  "modified_files": [
    "src/Processors/QueryPlan/ReadFromMergeTree.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03459-reverse-sorting-key-stable-result.reference",
    "b/tests/queries/0_stateless/03459-reverse-sorting-key-stable-result.sql"
  ]
}