diff --git a/src/IO/S3/Client.cpp b/src/IO/S3/Client.cpp
index 7f0ede727408..182e7ad18cd2 100644
--- a/src/IO/S3/Client.cpp
+++ b/src/IO/S3/Client.cpp
@@ -27,7 +27,6 @@
 
 #include <base/sleep.h>
 
-#include <algorithm>
 
 namespace ProfileEvents
 {
@@ -48,7 +47,6 @@ namespace ErrorCodes
 {
     extern const int LOGICAL_ERROR;
     extern const int TOO_MANY_REDIRECTS;
-    extern const int BAD_ARGUMENTS;
 }
 
 namespace S3
@@ -106,19 +104,6 @@ void verifyClientConfiguration(const Aws::Client::ClientConfiguration & client_c
     assert_cast<const Client::RetryStrategy &>(*client_config.retryStrategy);
 }
 
-void validateCredentials(const Aws::Auth::AWSCredentials& auth_credentials)
-{
-    if (auth_credentials.GetAWSAccessKeyId().empty())
-    {
-        return;
-    }
-    /// Follow https://docs.aws.amazon.com/IAM/latest/APIReference/API_AccessKey.html
-    if (!std::all_of(auth_credentials.GetAWSAccessKeyId().begin(), auth_credentials.GetAWSAccessKeyId().end(), isWordCharASCII))
-    {
-        throw Exception(ErrorCodes::BAD_ARGUMENTS, "Access key id has an invalid character");
-    }
-}
-
 void addAdditionalAMZHeadersToCanonicalHeadersList(
     Aws::AmazonWebServiceRequest & request,
     const HTTPHeaderEntries & extra_headers
@@ -144,7 +129,6 @@ std::unique_ptr<Client> Client::create(
     const ClientSettings & client_settings)
 {
     verifyClientConfiguration(client_configuration);
-    validateCredentials(credentials_provider->GetAWSCredentials());
     return std::unique_ptr<Client>(
         new Client(max_redirects_, std::move(sse_kms_config_), credentials_provider, client_configuration, sign_payloads, client_settings));
 }
