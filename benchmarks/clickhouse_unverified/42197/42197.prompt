You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Feature request: evaluate and prune constant expressions before columns' scanning
### The issue

Suppose the following table exists:

```sql
CREATE TABLE events (
    EventDate Date,
    ClientID UInt32
) Engine = MergeTree(EventDate, (EventDate, ClientID), 8192);
```

We use the following query template for counting the number of events for the given client on the given date:

```sql
SELECT count(*) FROM events
WHERE EventDate = <EventDate> AND (ClientID = <ClientID> OR -1 = <ClientID>)
```

The `-1 = <ClientID>` part is used for selecting the total number of events for the given `EventDate`. `<ClientID>` is substituted by `-1` in this case.

Unfortunately, this part disables `(EventDate, ClientID)` key usage, so the `clickhouse` scans all the rows for the given `EventDate` even if `ClientID` isn't equal to `-1`.

### The solution

It would be great if `clickhouse` could evaluate and prune constant expressions before columns' scanning.

For instance, for `EventDate = '2017-04-01'` and `ClientID = 42` the query becomes:
```sql
SELECT count(*) FROM events
WHERE EventDate = '2017-04-01' AND (ClientID = 42 OR -1 = 42)
```
The `-1 = 42` constant part is always evaluated to `false`, so it could be safely pruned. Then the query transforms to:
```sql
SELECT count(*) FROM events
WHERE EventDate = '2017-04-01' AND ClientID = 42
```
This query successfully uses `(EventDate, ClientID)` key.

For `ClientID = -1` the query looks like:
```sql
SELECT count(*) FROM events
WHERE EventDate = '2017-04-01' AND (ClientID = -1 OR -1 = -1)
```
The `-1 = -1` part is always evaluated to `true`, so the `ClientID = -1` part could be safely pruned. Then the query transforms to:
```sql
SELECT count(*) FROM events
WHERE EventDate = '2017-04-01'
```

It would be great if the constant expression evaluation would work for `IN` operators too, so the following construction could be optimized:

`(ClientID IN (<ClientIDs>) OR -1 IN (<ClientIDs>))`

### Possible workaround

- To use distinct query templates depending on whether the `ClientID` is selected or not. Unfortunately, this doesn't work for `grafana` templates when using [clickhouse-grafana](https://github.com/Vertamedia/clickhouse-grafana).
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
