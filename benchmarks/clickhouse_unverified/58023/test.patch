diff --git a/tests/queries/0_stateless/02008_materialize_column.sql b/tests/queries/0_stateless/02008_materialize_column.sql
index a78920d2525b..cc7d3096402c 100644
--- a/tests/queries/0_stateless/02008_materialize_column.sql
+++ b/tests/queries/0_stateless/02008_materialize_column.sql
@@ -17,6 +17,7 @@ ALTER TABLE tmp MATERIALIZE COLUMN s;
 ALTER TABLE tmp MODIFY COLUMN s String DEFAULT toString(x+2);
 SELECT arraySort(groupArray(x)), groupArray(s) FROM tmp;
 
+ALTER TABLE tmp CLEAR COLUMN s; -- Need to clear because MATERIALIZE COLUMN won't override past values;
 ALTER TABLE tmp MATERIALIZE COLUMN s;
 ALTER TABLE tmp MODIFY COLUMN s String DEFAULT toString(x+3);
 SELECT arraySort(groupArray(x)), groupArray(s) FROM tmp;
diff --git a/tests/queries/0_stateless/02946_materialize_column_must_not_override_past_values.reference b/tests/queries/0_stateless/02946_materialize_column_must_not_override_past_values.reference
new file mode 100644
index 000000000000..461075e9607e
--- /dev/null
+++ b/tests/queries/0_stateless/02946_materialize_column_must_not_override_past_values.reference
@@ -0,0 +1,45 @@
+DEFAULT expressions
+-- Compact parts
+Before materialize
+1	1
+2	54321
+After materialize
+1	1
+2	54321
+-- Wide parts
+Before materialize
+1	1
+2	54321
+After materialize
+1	1
+2	54321
+-- Nullable column != physically absent
+Before materialize
+1	1
+2	\N
+3	54321
+After materialize
+1	1
+2	\N
+3	54321
+-- Parts with renamed column
+Before materialize
+1	1
+2	54321
+After rename
+1	1
+2	54321
+After materialize
+1	1
+2	54321
+MATERIALIZED expressions
+-- Compact parts
+Before materialize
+1	54321
+After materialize
+1	65432
+-- Compact parts
+Before materialize
+1	54321
+After materialize
+1	65432
diff --git a/tests/queries/0_stateless/02946_materialize_column_must_not_override_past_values.sql b/tests/queries/0_stateless/02946_materialize_column_must_not_override_past_values.sql
new file mode 100644
index 000000000000..cfdde2877121
--- /dev/null
+++ b/tests/queries/0_stateless/02946_materialize_column_must_not_override_past_values.sql
@@ -0,0 +1,85 @@
+SET mutations_sync = 2;
+
+DROP TABLE IF EXISTS tab;
+
+-- Tests that existing parts which contain a non-default value in columns with DEFAULT expression remain unchanged by MATERIALIZE COLUMN>
+SELECT 'DEFAULT expressions';
+
+SELECT '-- Compact parts';
+
+CREATE TABLE tab (id Int64, dflt Int64 DEFAULT 54321) ENGINE MergeTree ORDER BY id;
+INSERT INTO tab (id, dflt) VALUES (1, 1);
+INSERT INTO tab (id) VALUES (2);
+SELECT 'Before materialize';
+SELECT * FROM tab ORDER BY id;
+ALTER TABLE tab MATERIALIZE COLUMN dflt;
+SELECT 'After materialize';
+SELECT * FROM tab ORDER BY id;
+DROP TABLE tab;
+
+SELECT '-- Wide parts';
+
+CREATE TABLE tab (id Int64, dflt Int64 DEFAULT 54321) ENGINE MergeTree ORDER BY id SETTINGS min_bytes_for_wide_part = 1;
+INSERT INTO tab (id, dflt) VALUES (1, 1);
+INSERT INTO tab (id) VALUES (2);
+SELECT 'Before materialize';
+SELECT * FROM tab ORDER BY id;
+ALTER TABLE tab MATERIALIZE COLUMN dflt;
+SELECT 'After materialize';
+SELECT * FROM tab ORDER BY id;
+DROP TABLE tab;
+
+SELECT '-- Nullable column != physically absent';
+
+CREATE TABLE tab (id Int64, dflt Nullable(Int64) DEFAULT 54321) ENGINE MergeTree ORDER BY id SETTINGS min_bytes_for_wide_part = 1;
+INSERT INTO tab (id, dflt) VALUES (1, 1);
+INSERT INTO tab (id, dflt) VALUES (2, NULL);
+INSERT INTO tab (id) VALUES (3);
+SELECT 'Before materialize';
+SELECT * FROM tab ORDER BY id;
+ALTER TABLE tab MATERIALIZE COLUMN dflt;
+SELECT 'After materialize';
+SELECT * FROM tab ORDER BY id;
+DROP TABLE tab;
+
+SELECT '-- Parts with renamed column';
+
+CREATE TABLE tab (id Int64, dflt Int64 DEFAULT 54321) ENGINE MergeTree ORDER BY id;
+INSERT INTO tab (id, dflt) VALUES (1, 1);
+INSERT INTO tab (id) VALUES (2);
+SELECT 'Before materialize';
+SELECT * FROM tab ORDER BY id;
+ALTER TABLE tab RENAME COLUMN dflt TO dflt2;
+SELECT 'After rename';
+SELECT * FROM tab ORDER BY id;
+ALTER TABLE tab MATERIALIZE COLUMN dflt2;
+SELECT 'After materialize';
+SELECT * FROM tab ORDER BY id;
+DROP TABLE tab;
+
+-- But for columns with MATERIALIZED expression, all existing parts should be rewritten in case a new expression was set in the meantime.
+SELECT 'MATERIALIZED expressions';
+
+SELECT '-- Compact parts';
+
+CREATE TABLE tab (id Int64, mtrl Int64 MATERIALIZED 54321) ENGINE MergeTree ORDER BY id;
+INSERT INTO tab (id) VALUES (1);
+SELECT 'Before materialize';
+SELECT id, mtrl FROM tab ORDER BY id;
+ALTER TABLE tab MODIFY COLUMN mtrl Int64 MATERIALIZED 65432;
+ALTER TABLE tab MATERIALIZE COLUMN mtrl;
+SELECT 'After materialize';
+SELECT id, mtrl FROM tab ORDER BY id;
+DROP TABLE tab;
+
+SELECT '-- Compact parts';
+
+CREATE TABLE tab (id Int64, mtrl Int64 MATERIALIZED 54321) ENGINE MergeTree ORDER BY id SETTINGS min_bytes_for_wide_part = 1;
+INSERT INTO tab (id) VALUES (1);
+SELECT 'Before materialize';
+SELECT id, mtrl FROM tab ORDER BY id;
+ALTER TABLE tab MODIFY COLUMN mtrl Int64 MATERIALIZED 65432;
+ALTER TABLE tab MATERIALIZE COLUMN mtrl;
+SELECT 'After materialize';
+SELECT id, mtrl FROM tab ORDER BY id;
+DROP TABLE tab;
