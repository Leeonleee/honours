diff --git a/tests/performance/group_array_sorted.xml b/tests/performance/group_array_sorted.xml
deleted file mode 100644
index d0092e38659f..000000000000
--- a/tests/performance/group_array_sorted.xml
+++ /dev/null
@@ -1,11 +0,0 @@
-<test>
-    <create_query>CREATE TABLE test (`id` UInt64, `value` UInt64, `text` String ) ENGINE = Memory</create_query>
-    <fill_query>INSERT INTO test SELECT number as id, rand64() as value, toString(number) as text FROM system.numbers_mt LIMIT 10000000</fill_query>
-
-    <query>SELECT groupArraySorted(100000)(id, value) FROM test</query>
-    <query>SELECT groupArraySorted(100000)(text, value) FROM test</query>
-    <query>SELECT groupArraySorted(100000)((id, text), value) FROM test</query>
-    <query>SELECT groupArraySorted(100000)(text) FROM test</query>
-
-    <drop_query>DROP TABLE IF EXISTS test</drop_query>
-</test>
diff --git a/tests/queries/0_stateless/02158_grouparraysorted.reference b/tests/queries/0_stateless/02158_grouparraysorted.reference
deleted file mode 100644
index 2d93478c9cbb..000000000000
--- a/tests/queries/0_stateless/02158_grouparraysorted.reference
+++ /dev/null
@@ -1,18 +0,0 @@
-[0,1,2,3,4]
-[0,1,2,3,4,5,6,7,8,9]
-[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]
-[999,998,997,996,995,994,993,992,991,990,989,988,987,986,985,984,983,982,981,980,979,978,977,976,975,974,973,972,971,970,969,968,967,966,965,964,963,962,961,960,959,958,957,956,955,954,953,952,951,950,949,948,947,946,945,944,943,942,941,940,939,938,937,936,935,934,933,932,931,930,929,928,927,926,925,924,923,922,921,920,919,918,917,916,915,914,913,912,911,910,909,908,907,906,905,904,903,902,901,900]
-['0','1','2','3','4']
-['0','1','2','3','4']
-['9','8','7','6','5']
-[(0,'0'),(1,'1'),(2,'2'),(3,'3'),(4,'4')]
-['0','1','10','11','12']
-['0','1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49']
-[0,0,1,1,2,2,3,3,4,4]
-pablo	[1,2]
-luis	[1,3]
-pablo	[1,2]
-luis	[1,3]
-[4,5,6,7,8]
-[10,11,12,13,14]
-['10','11','12','13','14']
diff --git a/tests/queries/0_stateless/02158_grouparraysorted.sql b/tests/queries/0_stateless/02158_grouparraysorted.sql
deleted file mode 100644
index 00cb32142ca9..000000000000
--- a/tests/queries/0_stateless/02158_grouparraysorted.sql
+++ /dev/null
@@ -1,43 +0,0 @@
-
-SELECT groupArraySorted(5)(number) from numbers(100);
-
-SELECT groupArraySorted(number, number) from numbers(100);
-
-SELECT groupArraySorted(100)(number, number) from numbers(1000);
-
-SELECT groupArraySorted(100)(number, -number) from numbers(1000);
-
-SELECT groupArraySorted(5)(str, number) FROM (SELECT toString(number) as str, number FROM numbers(10));
-
-SELECT groupArraySorted(5)(text) FROM (select toString(number) as text from numbers(10));
-
-SELECT groupArraySorted(5)(text, -number) FROM (select toString(number) as text, number from numbers(10));
-
-SELECT groupArraySorted(5)((number,text)) from (SELECT toString(number) as text, number FROM numbers(100));
-
-SELECT groupArraySorted(5)(text,text) from (SELECT toString(number) as text FROM numbers(100));
-
-SELECT groupArraySorted(50)(text,(number,text)) from (SELECT toString(number) as text, number FROM numbers(100));
-
-SELECT groupArraySorted(10)(toInt64(number/2)) FROM numbers(100);
-
-
-DROP TABLE IF EXISTS test;
-DROP VIEW IF EXISTS mv_test;
-CREATE TABLE test (`n` String, `h` Int64) ENGINE = MergeTree ORDER BY n;
-CREATE MATERIALIZED VIEW mv_test (`n` String, `h` AggregateFunction(groupArraySorted(2), Int64, Int64)) ENGINE = AggregatingMergeTree ORDER BY n AS SELECT n, groupArraySortedState(2)(h, h) as h FROM test GROUP BY n;
-INSERT INTO test VALUES ('pablo',1)('pablo', 2)('luis', 1)('luis', 3)('pablo', 5)('pablo',4)('pablo', 5)('luis', 6)('luis', 7)('pablo', 8)('pablo',9)('pablo',10)('luis',11)('luis',12)('pablo',13);
-SELECT n, groupArraySortedMerge(2)(h) from mv_test GROUP BY n;
-
-DROP TABLE IF EXISTS test;
-DROP VIEW IF EXISTS mv_test;
-CREATE TABLE test (`n` String, `h` Int64) ENGINE = MergeTree ORDER BY n;
-CREATE MATERIALIZED VIEW mv_test (`n` String, `h` AggregateFunction(groupArraySorted(2), Int64)) ENGINE = AggregatingMergeTree ORDER BY n AS SELECT n, groupArraySortedState(2)(h) as h FROM test GROUP BY n;
-INSERT INTO test VALUES ('pablo',1)('pablo', 2)('luis', 1)('luis', 3)('pablo', 5)('pablo',4)('pablo', 5)('luis', 6)('luis', 7)('pablo', 8)('pablo',9)('pablo',10)('luis',11)('luis',12)('pablo',13);
-SELECT n, groupArraySortedMerge(2)(h) from mv_test GROUP BY n;
-DROP TABLE test;
-DROP VIEW mv_test;
-
-SELECT groupArraySortedIf(5)(number, number, number>3) from numbers(100);
-SELECT groupArraySortedIf(5)(number, toString(number), number>3) from numbers(100);
-SELECT groupArraySortedIf(5)(toString(number), number>3) from numbers(100);
diff --git a/tests/queries/0_stateless/02233_optimize_aggregation_in_order_prefix_with_merge.reference b/tests/queries/0_stateless/02233_optimize_aggregation_in_order_prefix_with_merge.reference
index c4eb90020119..0b689506ed35 100644
--- a/tests/queries/0_stateless/02233_optimize_aggregation_in_order_prefix_with_merge.reference
+++ b/tests/queries/0_stateless/02233_optimize_aggregation_in_order_prefix_with_merge.reference
@@ -1,69 +1,5 @@
--- { echoOn }
-explain pipeline select groupArraySorted(partition), parent_key, child_key, sum(value) from data_02233 group by parent_key, child_key with totals order by parent_key, child_key settings max_threads=1, optimize_aggregation_in_order=1;
-(Expression)
-ExpressionTransform × 2
-  (Sorting)
-  MergeSortingTransform
-    LimitsCheckingTransform
-      PartialSortingTransform
-        (Expression)
-        ExpressionTransform × 2
-          (TotalsHaving)
-          TotalsHavingTransform 1 → 2
-            (Aggregating)
-            MergingAggregatedBucketTransform
-              FinishAggregatingInOrderTransform 2 → 1
-                AggregatingInOrderTransform × 2
-                  (Expression)
-                  ExpressionTransform × 2
-                    (SettingQuotaAndLimits)
-                      (ReadFromMergeTree)
-                      MergeTreeInOrder × 2 0 → 1
-explain pipeline select groupArraySorted(partition), parent_key, child_key, sum(value) from data_02233 group by parent_key, child_key with totals order by parent_key, child_key settings max_threads=1;
-(Expression)
-ExpressionTransform × 2
-  (Sorting)
-  MergeSortingTransform
-    LimitsCheckingTransform
-      PartialSortingTransform
-        (Expression)
-        ExpressionTransform × 2
-          (TotalsHaving)
-          TotalsHavingTransform 1 → 2
-            (Aggregating)
-            AggregatingTransform
-              (Expression)
-              ExpressionTransform
-                (SettingQuotaAndLimits)
-                  (ReadFromMergeTree)
-                  Concat 2 → 1
-                    MergeTreeInOrder × 2 0 → 1
-select groupArraySorted(partition), parent_key, child_key, sum(value) from data_02233 group by parent_key, child_key with totals order by parent_key, child_key settings optimize_aggregation_in_order=1;
-[1,2]	10	100	2000
-[1,2]	20	200	4000
-
-[1,1,2,2]	0	0	6000
-select groupArraySorted(partition), parent_key, child_key, sum(value) from data_02233 group by parent_key, child_key with totals order by parent_key, child_key settings optimize_aggregation_in_order=1, max_block_size=1;
-[1,2]	10	100	2000
-[1,2]	20	200	4000
-
-[1,1,2,2]	0	0	6000
--- sum() can be compiled, check that compiled version works correctly
-select groupArraySorted(partition), parent_key, child_key, sum(value) from data_02233 group by parent_key, child_key with totals order by parent_key, child_key settings optimize_aggregation_in_order=1, compile_aggregate_expressions=1, min_count_to_compile_aggregate_expression=0;
-[1,2]	10	100	2000
-[1,2]	20	200	4000
-
-[1,1,2,2]	0	0	6000
-select groupArraySorted(partition), parent_key, child_key, sum(value) from data_02233 group by parent_key, child_key with totals order by parent_key, child_key;
-[1,2]	10	100	2000
-[1,2]	20	200	4000
-
-[1,1,2,2]	0	0	6000
--- fuzzer
-SELECT child_key, parent_key, child_key FROM data_02233 GROUP BY parent_key, child_key, child_key ORDER BY child_key, parent_key ASC NULLS LAST SETTINGS max_threads = 1, optimize_aggregation_in_order = 1;
 100	10	100
 200	20	200
-SELECT child_key, parent_key, child_key FROM data_02233 GROUP BY parent_key, child_key, child_key WITH TOTALS ORDER BY child_key, parent_key ASC NULLS LAST SETTINGS max_threads = 1, optimize_aggregation_in_order = 1;
 100	10	100
 200	20	200
 
diff --git a/tests/queries/0_stateless/02233_optimize_aggregation_in_order_prefix_with_merge.sql b/tests/queries/0_stateless/02233_optimize_aggregation_in_order_prefix_with_merge.sql
index f9eeca3da3c8..19812fe733f2 100644
--- a/tests/queries/0_stateless/02233_optimize_aggregation_in_order_prefix_with_merge.sql
+++ b/tests/queries/0_stateless/02233_optimize_aggregation_in_order_prefix_with_merge.sql
@@ -4,18 +4,8 @@ create table data_02233 (partition Int, parent_key Int, child_key Int, value Int
 insert into data_02233 values (1, 10, 100, 1000)(1, 20, 200, 2000);
 insert into data_02233 values (2, 10, 100, 1000)(2, 20, 200, 2000);
 
--- { echoOn }
-explain pipeline select groupArraySorted(partition), parent_key, child_key, sum(value) from data_02233 group by parent_key, child_key with totals order by parent_key, child_key settings max_threads=1, optimize_aggregation_in_order=1;
-explain pipeline select groupArraySorted(partition), parent_key, child_key, sum(value) from data_02233 group by parent_key, child_key with totals order by parent_key, child_key settings max_threads=1;
-select groupArraySorted(partition), parent_key, child_key, sum(value) from data_02233 group by parent_key, child_key with totals order by parent_key, child_key settings optimize_aggregation_in_order=1;
-select groupArraySorted(partition), parent_key, child_key, sum(value) from data_02233 group by parent_key, child_key with totals order by parent_key, child_key settings optimize_aggregation_in_order=1, max_block_size=1;
--- sum() can be compiled, check that compiled version works correctly
-select groupArraySorted(partition), parent_key, child_key, sum(value) from data_02233 group by parent_key, child_key with totals order by parent_key, child_key settings optimize_aggregation_in_order=1, compile_aggregate_expressions=1, min_count_to_compile_aggregate_expression=0;
-select groupArraySorted(partition), parent_key, child_key, sum(value) from data_02233 group by parent_key, child_key with totals order by parent_key, child_key;
-
 -- fuzzer
 SELECT child_key, parent_key, child_key FROM data_02233 GROUP BY parent_key, child_key, child_key ORDER BY child_key, parent_key ASC NULLS LAST SETTINGS max_threads = 1, optimize_aggregation_in_order = 1;
 SELECT child_key, parent_key, child_key FROM data_02233 GROUP BY parent_key, child_key, child_key WITH TOTALS ORDER BY child_key, parent_key ASC NULLS LAST SETTINGS max_threads = 1, optimize_aggregation_in_order = 1;
 
--- { echoOff }
 drop table data_02233;
