diff --git a/programs/client/Client.cpp b/programs/client/Client.cpp
index 26b4f5d018a6..a3f5c0ab1c71 100644
--- a/programs/client/Client.cpp
+++ b/programs/client/Client.cpp
@@ -1126,7 +1126,12 @@ void Client::processOptions(const OptionsDescription & options_description,
     {
         const auto & name = setting.getName();
         if (options.count(name))
-            config().setString(name, options[name].as<String>());
+        {
+            if (allow_repeated_settings)
+                config().setString(name, options[name].as<Strings>().back());
+            else
+                config().setString(name, options[name].as<String>());
+        }
     }
 
     if (options.count("config-file") && options.count("config"))
diff --git a/src/Client/ClientBase.cpp b/src/Client/ClientBase.cpp
index a9529c706bd8..f89e3504c442 100644
--- a/src/Client/ClientBase.cpp
+++ b/src/Client/ClientBase.cpp
@@ -1872,6 +1872,8 @@ void ClientBase::readArguments(
                     prev_port_arg = port_arg;
                 }
             }
+            else if (arg == "--allow_repeated_settings"sv)
+                allow_repeated_settings = true;
             else
                 common_arguments.emplace_back(arg);
         }
@@ -1884,7 +1886,10 @@ void ClientBase::readArguments(
 
 void ClientBase::parseAndCheckOptions(OptionsDescription & options_description, po::variables_map & options, Arguments & arguments)
 {
-    cmd_settings.addProgramOptions(options_description.main_description.value());
+    if (allow_repeated_settings)
+        cmd_settings.addProgramOptionsAsMultitokens(options_description.main_description.value());
+    else
+        cmd_settings.addProgramOptions(options_description.main_description.value());
     /// Parse main commandline options.
     auto parser = po::command_line_parser(arguments).options(options_description.main_description.value()).allow_unregistered();
     po::parsed_options parsed = parser.run();
diff --git a/src/Client/ClientBase.h b/src/Client/ClientBase.h
index a92888868a4c..406e5aa66b7a 100644
--- a/src/Client/ClientBase.h
+++ b/src/Client/ClientBase.h
@@ -260,6 +260,8 @@ class ClientBase : public Poco::Util::Application, public IHints<2, ClientBase>
 
     std::vector<HostAndPort> hosts_and_ports{};
 
+    bool allow_repeated_settings = false;
+
     bool cancelled = false;
 };
 
diff --git a/src/Core/Settings.cpp b/src/Core/Settings.cpp
index 87d7eee0daa2..411e73bdf1a0 100644
--- a/src/Core/Settings.cpp
+++ b/src/Core/Settings.cpp
@@ -89,6 +89,14 @@ void Settings::addProgramOptions(boost::program_options::options_description & o
     }
 }
 
+void Settings::addProgramOptionsAsMultitokens(boost::program_options::options_description & options)
+{
+    for (const auto & field : all())
+    {
+        addProgramOptionAsMultitoken(options, field);
+    }
+}
+
 void Settings::addProgramOption(boost::program_options::options_description & options, const SettingFieldRef & field)
 {
     const std::string_view name = field.getName();
@@ -97,6 +105,14 @@ void Settings::addProgramOption(boost::program_options::options_description & op
         name.data(), boost::program_options::value<std::string>()->composing()->notifier(on_program_option), field.getDescription())));
 }
 
+void Settings::addProgramOptionAsMultitoken(boost::program_options::options_description & options, const SettingFieldRef & field)
+{
+    const std::string_view name = field.getName();
+    auto on_program_option = boost::function1<void, const Strings &>([this, name](const Strings & values) { set(name, values.back()); });
+    options.add(boost::shared_ptr<boost::program_options::option_description>(new boost::program_options::option_description(
+        name.data(), boost::program_options::value<Strings>()->multitoken()->composing()->notifier(on_program_option), field.getDescription())));
+}
+
 void Settings::checkNoSettingNamesAtTopLevel(const Poco::Util::AbstractConfiguration & config, const String & config_path)
 {
     if (config.getBool("skip_check_for_incorrect_settings", false))
diff --git a/src/Core/Settings.h b/src/Core/Settings.h
index 987d8e5edd2e..5280e4b3eeb6 100644
--- a/src/Core/Settings.h
+++ b/src/Core/Settings.h
@@ -722,6 +722,11 @@ struct Settings : public BaseSettings<SettingsTraits>, public IHints<2, Settings
     /// (Don't forget to call notify() on the `variables_map` after parsing it!)
     void addProgramOptions(boost::program_options::options_description & options);
 
+    /// Adds program options as to set the settings from a command line.
+    /// Allows to set one setting multiple times, the last value will be used.
+    /// (Don't forget to call notify() on the `variables_map` after parsing it!)
+    void addProgramOptionsAsMultitokens(boost::program_options::options_description & options);
+
     /// Check that there is no user-level settings at the top level in config.
     /// This is a common source of mistake (user don't know where to write user-level setting).
     static void checkNoSettingNamesAtTopLevel(const Poco::Util::AbstractConfiguration & config, const String & config_path);
@@ -729,6 +734,8 @@ struct Settings : public BaseSettings<SettingsTraits>, public IHints<2, Settings
     std::vector<String> getAllRegisteredNames() const override;
 
     void addProgramOption(boost::program_options::options_description & options, const SettingFieldRef & field);
+
+    void addProgramOptionAsMultitoken(boost::program_options::options_description & options, const SettingFieldRef & field);
 };
 
 /*
