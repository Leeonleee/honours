You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Data race in ReverseIndex::setColumn
https://s3.amazonaws.com/clickhouse-test-reports/42761/3768641bf76e8c057ae4c9612d52ad321c2ad2d3/fuzzer_astfuzzertsan//report.html

```
WARNING: ThreadSanitizer: data race (pid=159)
  Read of size 8 at 0x7b2c0017c068 by thread T224:
    #0 DB::ReverseIndex<unsigned long, DB::ColumnVector<float>>::setColumn(DB::ColumnVector<float>*) build_docker/../src/Columns/R
everseIndex.h:407:9 (clickhouse+0x1b633911) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #1 DB::ColumnUnique<DB::ColumnVector<float>>::forEachSubcolumn(std::__1::function<void (COW<DB::IColumn>::chameleon_ptr<DB::IC
olumn>&)>) build_docker/../src/Columns/ColumnUnique.h:111:23 (clickhouse+0x1b633911)
    #2 DB::IColumn::dumpStructure() const build_docker/../src/Columns/IColumn.cpp:28:33 (clickhouse+0x1d1ad7f2) (BuildId: fb8e058e
f54aea63a7b5a37fdfb350152ad24750)
    #3 DB::IColumn::dumpStructure() const::$_0::operator()(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&) const build_docker/../sr
c/Columns/IColumn.cpp:25:35 (clickhouse+0x1d1ae12f) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #4 decltype(std::declval<DB::IColumn::dumpStructure() const::$_0&>()(std::declval<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>
&>())) std::__1::__invoke[abi:v15003]<DB::IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&>(DB:
:IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docker/../contrib/libcxx/include/__fun
ctional/invoke.h:394:23 (clickhouse+0x1d1ae12f)
    #5 void std::__1::__invoke_void_return_wrapper<void, true>::__call<DB::IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>:
:chameleon_ptr<DB::IColumn>&>(DB::IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docke
r/../contrib/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0x1d1ae12f)
    #6 std::__1::__function::__default_alloc_func<DB::IColumn::dumpStructure() const::$_0, void (COW<DB::IColumn>::chameleon_ptr<D
B::IColumn>&)>::operator()[abi:v15003](COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docker/../contrib/libcxx/include/__fun
ctional/function.h:235:12 (clickhouse+0x1d1ae12f)
    #7 void std::__1::__function::__policy_invoker<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>::__call_impl<std::__1::__
function::__default_alloc_func<DB::IColumn::dumpStructure() const::$_0, void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>>(std
::__1::__function::__policy_storage const*, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docker/../contrib/libcxx/include/
__functional/function.h:716:16 (clickhouse+0x1d1ae12f)
    #8 std::__1::__function::__policy_func<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>::operator()[abi:v15003](COW<DB::I
Column>::chameleon_ptr<DB::IColumn>&) const build_docker/../contrib/libcxx/include/__functional/function.h:848:16 (clickhouse+0x1c
eefcf8) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #9 std::__1::function<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>::operator()(COW<DB::IColumn>::chameleon_ptr<DB::IC
olumn>&) const build_docker/../contrib/libcxx/include/__functional/function.h:1197:12 (clickhouse+0x1ceefcf8)
    #10 DB::ColumnLowCardinality::forEachSubcolumn(std::__1::function<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>) build
_docker/../src/Columns/ColumnLowCardinality.h:173:13 (clickhouse+0x1ceefcf8)
    #11 DB::IColumn::dumpStructure() const build_docker/../src/Columns/IColumn.cpp:28:33 (clickhouse+0x1d1ad7f2) (BuildId: fb8e058
ef54aea63a7b5a37fdfb350152ad24750)
    #12 DB::ColumnWithTypeAndName::dumpStructure(DB::WriteBuffer&) const build_docker/../src/Core/ColumnWithTypeAndName.cpp:45:31
(clickhouse+0x1b2b73b0) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #13 DB::ColumnWithTypeAndName::dumpStructure() const build_docker/../src/Core/ColumnWithTypeAndName.cpp:53:5 (clickhouse+0x1b2
b74da) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #14 bool DB::checkColumnStructure<bool>(DB::ColumnWithTypeAndName const&, DB::ColumnWithTypeAndName const&, std::__1::basic_st
ring_view<char, std::__1::char_traits<char>>, bool, int) build_docker/../src/Core/Block.cpp:53:56 (clickhouse+0x1b2ac939) (BuildId
: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #15 bool DB::checkBlockStructure<bool>(DB::Block const&, DB::Block const&, std::__1::basic_string_view<char, std::__1::char_tr
aits<char>>, bool) build_docker/../src/Core/Block.cpp:124:18 (clickhouse+0x1b2ac939)
    #16 DB::blocksHaveEqualStructure(DB::Block const&, DB::Block const&) build_docker/../src/Core/Block.cpp:678:12 (clickhouse+0x1
b2ab5ca) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #17 DB::adoptBlock(DB::Block const&, DB::Block const&, Poco::Logger*) build_docker/../src/Storages/Distributed/DistributedSink
.cpp:64:9 (clickhouse+0x1d7a7d19) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #18 DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long)::$_0::operator()() c
onst build_docker/../src/Storages/Distributed/DistributedSink.cpp:390:41 (clickhouse+0x1d7a9f56) (BuildId: fb8e058ef54aea63a7b5a37
fdfb350152ad24750)
    #19 decltype(std::declval<DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long
)::$_0&>()()) std::__1::__invoke[abi:v15003]<DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&
, unsigned long)::$_0&>(DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long)::$_0
&) build_docker/../contrib/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0x1d7a9f56)
    #20 void std::__1::__invoke_void_return_wrapper<void, true>::__call<DB::DistributedSink::runWritingJob(DB::DistributedSink::Jo
bReplica&, DB::Block const&, unsigned long)::$_0&>(DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block
const&, unsigned long)::$_0&) build_docker/../contrib/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0x1d7a9f56)
    #21 std::__1::__function::__default_alloc_func<DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block
const&, unsigned long)::$_0, void ()>::operator()[abi:v15003]() build_docker/../contrib/libcxx/include/__functional/function.h:235
:12 (clickhouse+0x1d7a9f56)
    #22 void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::Distribut
edSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long)::$_0, void ()>>(std::__1::__function::__p
olicy_storage const*) build_docker/../contrib/libcxx/include/__functional/function.h:716:16 (clickhouse+0x1d7a9f56)
    #23 std::__1::__function::__policy_func<void ()>::operator()[abi:v15003]() const build_docker/../contrib/libcxx/include/__func
tional/function.h:848:16 (clickhouse+0x139c9f90) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #24 std::__1::function<void ()>::operator()() const build_docker/../contrib/libcxx/include/__functional/function.h:1197:12 (cl
ickhouse+0x139c9f90)
    #25 ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__1::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>)
 build_docker/../src/Common/ThreadPool.cpp:294:17 (clickhouse+0x139c9f90)
    #26 void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::opti
onal<unsigned long>, bool)::'lambda0'()::operator()() const build_docker/../src/Common/ThreadPool.cpp:144:73 (clickhouse+0x139ce41
7) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #27 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15003]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::sche
duleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()&>(void&&) build_docker/../
contrib/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0x139ce417)
    #28 decltype(auto) std::__1::__apply_tuple_impl[abi:v15003]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl
<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std:
:__1::tuple<>&, std::__1::__tuple_indices<>) build_docker/../contrib/libcxx/include/tuple:1789:1 (clickhouse+0x139ce417)
    #29 decltype(auto) std::__1::apply[abi:v15003]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::_
_1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>
&) build_docker/../contrib/libcxx/include/tuple:1798:1 (clickhouse+0x139ce417)
    #30 ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleIm
pl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()
() build_docker/../src/Common/ThreadPool.h:196:13 (clickhouse+0x139ce417)
    #31 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15003]<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<
void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<uns
igned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(void&&) build_docker/../contrib/libcxx/include/__functional/invoke.h:394:23
 (clickhouse+0x139ce381) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #32 void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<
void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<uns
igned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolIm
pl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool
)::'lambda0'()>(void&&)::'lambda'()&) build_docker/../contrib/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0x139ce381)
    #33 std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<T
hreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'
lambda0'()>(void&&)::'lambda'(), void ()>::operator()[abi:v15003]() build_docker/../contrib/libcxx/include/__functional/function.h
:235:12 (clickhouse+0x139ce381)
    #34 void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlo
balPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::fu
nction<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__1::__function:
:__policy_storage const*) build_docker/../contrib/libcxx/include/__functional/function.h:716:16 (clickhouse+0x139ce381)
    #35 std::__1::__function::__policy_func<void ()>::operator()[abi:v15003]() const build_docker/../contrib/libcxx/include/__func
tional/function.h:848:16 (clickhouse+0x139c7230) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #36 std::__1::function<void ()>::operator()() const build_docker/../contrib/libcxx/include/__functional/function.h:1197:12 (cl
ickhouse+0x139c7230)
    #37 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) build_docker/../src/Common/Th
readPool.cpp:294:17 (clickhouse+0x139c7230)
    #38 void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned l
ong>, bool)::'lambda0'()::operator()() const build_docker/../src/Common/ThreadPool.cpp:144:73 (clickhouse+0x139cb951) (BuildId: fb
8e058ef54aea63a7b5a37fdfb350152ad24750)
    #39 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15003]<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(
std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&) build_docker/../contrib/libcxx/i
nclude/__functional/invoke.h:394:23 (clickhouse+0x139cb951)
    #40 void std::__1::__thread_execute[abi:v15003]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::
__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::opt
ional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1
::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<>) build_docker/../c
ontrib/libcxx/include/thread:284:5 (clickhouse+0x139cb951)
    #41 void* std::__1::__thread_proxy[abi:v15003]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::defau
lt_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long
, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*) build_docker/../contrib/libcxx/include/thread:295:5 (clickhouse+0
x139cb951)

  Previous write of size 8 at 0x7b2c0017c068 by thread T228:
    #0 DB::ReverseIndex<unsigned long, DB::ColumnVector<float>>::setColumn(DB::ColumnVector<float>*) build_docker/../src/Columns/R
everseIndex.h:413:12 (clickhouse+0x1b6339ce) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #1 DB::ColumnUnique<DB::ColumnVector<float>>::forEachSubcolumn(std::__1::function<void (COW<DB::IColumn>::chameleon_ptr<DB::IC
olumn>&)>) build_docker/../src/Columns/ColumnUnique.h:111:23 (clickhouse+0x1b6339ce)
    #2 DB::IColumn::dumpStructure() const build_docker/../src/Columns/IColumn.cpp:28:33 (clickhouse+0x1d1ad7f2) (BuildId: fb8e058e
f54aea63a7b5a37fdfb350152ad24750)
    #3 DB::IColumn::dumpStructure() const::$_0::operator()(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&) const build_docker/../sr
c/Columns/IColumn.cpp:25:35 (clickhouse+0x1d1ae12f) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #4 decltype(std::declval<DB::IColumn::dumpStructure() const::$_0&>()(std::declval<COW<DB::IColumn>::chameleon_ptr<DB::IColumn>
&>())) std::__1::__invoke[abi:v15003]<DB::IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&>(DB:
:IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docker/../contrib/libcxx/include/__fun
ctional/invoke.h:394:23 (clickhouse+0x1d1ae12f)
    #5 void std::__1::__invoke_void_return_wrapper<void, true>::__call<DB::IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>:
:chameleon_ptr<DB::IColumn>&>(DB::IColumn::dumpStructure() const::$_0&, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docke
r/../contrib/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0x1d1ae12f)
    #6 std::__1::__function::__default_alloc_func<DB::IColumn::dumpStructure() const::$_0, void (COW<DB::IColumn>::chameleon_ptr<D
B::IColumn>&)>::operator()[abi:v15003](COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docker/../contrib/libcxx/include/__fun
ctional/function.h:235:12 (clickhouse+0x1d1ae12f)
    #7 void std::__1::__function::__policy_invoker<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>::__call_impl<std::__1::__
function::__default_alloc_func<DB::IColumn::dumpStructure() const::$_0, void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>>(std
::__1::__function::__policy_storage const*, COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&) build_docker/../contrib/libcxx/include/
__functional/function.h:716:16 (clickhouse+0x1d1ae12f)
    #8 std::__1::__function::__policy_func<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>::operator()[abi:v15003](COW<DB::I
Column>::chameleon_ptr<DB::IColumn>&) const build_docker/../contrib/libcxx/include/__functional/function.h:848:16 (clickhouse+0x1c
eefcf8) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #9 std::__1::function<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>::operator()(COW<DB::IColumn>::chameleon_ptr<DB::IC
olumn>&) const build_docker/../contrib/libcxx/include/__functional/function.h:1197:12 (clickhouse+0x1ceefcf8)
    #10 DB::ColumnLowCardinality::forEachSubcolumn(std::__1::function<void (COW<DB::IColumn>::chameleon_ptr<DB::IColumn>&)>) build
_docker/../src/Columns/ColumnLowCardinality.h:173:13 (clickhouse+0x1ceefcf8)
    #11 DB::IColumn::dumpStructure() const build_docker/../src/Columns/IColumn.cpp:28:33 (clickhouse+0x1d1ad7f2) (BuildId: fb8e058
ef54aea63a7b5a37fdfb350152ad24750)
    #12 DB::ColumnWithTypeAndName::dumpStructure(DB::WriteBuffer&) const build_docker/../src/Core/ColumnWithTypeAndName.cpp:45:31
(clickhouse+0x1b2b73b0) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #13 DB::Block::dumpStructure() const build_docker/../src/Core/Block.cpp:419:13 (clickhouse+0x1b2a83f9) (BuildId: fb8e058ef54ae
a63a7b5a37fdfb350152ad24750)
    #14 DB::adoptBlock(DB::Block const&, DB::Block const&, Poco::Logger*) build_docker/../src/Storages/Distributed/DistributedSink
.cpp:67:5 (clickhouse+0x1d7a7f47) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #15 DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long)::$_0::operator()() c
onst build_docker/../src/Storages/Distributed/DistributedSink.cpp:390:41 (clickhouse+0x1d7a9f56) (BuildId: fb8e058ef54aea63a7b5a37
fdfb350152ad24750)
    #16 decltype(std::declval<DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long
)::$_0&>()()) std::__1::__invoke[abi:v15003]<DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&
, unsigned long)::$_0&>(DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long)::$_0
&) build_docker/../contrib/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0x1d7a9f56)
    #17 void std::__1::__invoke_void_return_wrapper<void, true>::__call<DB::DistributedSink::runWritingJob(DB::DistributedSink::Jo
bReplica&, DB::Block const&, unsigned long)::$_0&>(DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block
const&, unsigned long)::$_0&) build_docker/../contrib/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0x1d7a9f56)
    #18 std::__1::__function::__default_alloc_func<DB::DistributedSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block
const&, unsigned long)::$_0, void ()>::operator()[abi:v15003]() build_docker/../contrib/libcxx/include/__functional/function.h:235
:12 (clickhouse+0x1d7a9f56)
    #19 void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::Distribut
edSink::runWritingJob(DB::DistributedSink::JobReplica&, DB::Block const&, unsigned long)::$_0, void ()>>(std::__1::__function::__p
olicy_storage const*) build_docker/../contrib/libcxx/include/__functional/function.h:716:16 (clickhouse+0x1d7a9f56)
    #20 std::__1::__function::__policy_func<void ()>::operator()[abi:v15003]() const build_docker/../contrib/libcxx/include/__func
tional/function.h:848:16 (clickhouse+0x139c9f90) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #21 std::__1::function<void ()>::operator()() const build_docker/../contrib/libcxx/include/__functional/function.h:1197:12 (cl
ickhouse+0x139c9f90)
    #22 ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::worker(std::__1::__list_iterator<ThreadFromGlobalPoolImpl<false>, void*>)
 build_docker/../src/Common/ThreadPool.cpp:294:17 (clickhouse+0x139c9f90)
    #23 void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::opti
onal<unsigned long>, bool)::'lambda0'()::operator()() const build_docker/../src/Common/ThreadPool.cpp:144:73 (clickhouse+0x139ce41
7) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #24 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15003]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::sche
duleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()&>(void&&) build_docker/../
contrib/libcxx/include/__functional/invoke.h:394:23 (clickhouse+0x139ce417)
    #25 decltype(auto) std::__1::__apply_tuple_impl[abi:v15003]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl
<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std:
:__1::tuple<>&, std::__1::__tuple_indices<>) build_docker/../contrib/libcxx/include/tuple:1789:1 (clickhouse+0x139ce417)
    #26 decltype(auto) std::__1::apply[abi:v15003]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::_
_1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>
&) build_docker/../contrib/libcxx/include/tuple:1798:1 (clickhouse+0x139ce417)
    #27 ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleIm
pl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()
() build_docker/../src/Common/ThreadPool.h:196:13 (clickhouse+0x139ce417)
    #28 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15003]<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<
void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<uns
igned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(void&&) build_docker/../contrib/libcxx/include/__functional/invoke.h:394:23
 (clickhouse+0x139ce381) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #29 void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<
void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<uns
igned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolIm
pl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool
)::'lambda0'()>(void&&)::'lambda'()&) build_docker/../contrib/libcxx/include/__functional/invoke.h:479:9 (clickhouse+0x139ce381)
    #30 std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<T
hreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'
lambda0'()>(void&&)::'lambda'(), void ()>::operator()[abi:v15003]() build_docker/../contrib/libcxx/include/__functional/function.h
:235:12 (clickhouse+0x139ce381)
    #31 void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlo
balPoolImpl<false>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false>>::scheduleImpl<void>(std::__1::fu
nction<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__1::__function:
:__policy_storage const*) build_docker/../contrib/libcxx/include/__functional/function.h:716:16 (clickhouse+0x139ce381)
    #32 std::__1::__function::__policy_func<void ()>::operator()[abi:v15003]() const build_docker/../contrib/libcxx/include/__func
tional/function.h:848:16 (clickhouse+0x139c7230) (BuildId: fb8e058ef54aea63a7b5a37fdfb350152ad24750)
    #33 std::__1::function<void ()>::operator()() const build_docker/../contrib/libcxx/include/__functional/function.h:1197:12 (cl
ickhouse+0x139c7230)
    #34 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) build_docker/../src/Common/Th
readPool.cpp:294:17 (clickhouse+0x139c7230)
    #35 void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::optional<unsigned l
ong>, bool)::'lambda0'()::operator()() const build_docker/../src/Common/ThreadPool.cpp:144:73 (clickhouse+0x139cb951) (BuildId: fb
8e058ef54aea63a7b5a37fdfb350152ad24750)
    #36 decltype(std::declval<void>()()) std::__1::__invoke[abi:v15003]<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(
std::__1::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&) build_docker/../contrib/libcxx/i
nclude/__functional/invoke.h:394:23 (clickhouse+0x139cb951)
    #37 void std::__1::__thread_execute[abi:v15003]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::
__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long, std::__1::opt
ional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1
::function<void ()>, long, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<>) build_docker/../c
ontrib/libcxx/include/thread:284:5 (clickhouse+0x139cb951)
    #38 void* std::__1::__thread_proxy[abi:v15003]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::defau
lt_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, long
, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*) build_docker/../contrib/libcxx/include/thread:295:5 (clickhouse+0
x139cb951)
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
