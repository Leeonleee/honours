diff --git a/docs/en/sql-reference/functions/bit-functions.md b/docs/en/sql-reference/functions/bit-functions.md
index a48893b93bf8..5ab7e07fcad0 100644
--- a/docs/en/sql-reference/functions/bit-functions.md
+++ b/docs/en/sql-reference/functions/bit-functions.md
@@ -173,7 +173,7 @@ See function [substring](string-functions.md#substring).
 
 ## bitTest
 
-Takes any integer and converts it into [binary form](https://en.wikipedia.org/wiki/Binary_number), returns the value of a bit at specified position. The countdown starts from 0 from the right to the left.
+Takes any integer and converts it into [binary form](https://en.wikipedia.org/wiki/Binary_number), returns the value of a bit at specified position. Counting is right-to-left, starting at 0.
 
 **Syntax**
 
@@ -226,7 +226,7 @@ Result:
 
 ## bitTestAll
 
-Returns result of [logical conjuction](https://en.wikipedia.org/wiki/Logical_conjunction) (AND operator) of all bits at given positions. The countdown starts from 0 from the right to the left.
+Returns result of [logical conjuction](https://en.wikipedia.org/wiki/Logical_conjunction) (AND operator) of all bits at given positions. Counting is right-to-left, starting at 0.
 
 The conjuction for bit-wise operations:
 
@@ -289,7 +289,7 @@ Result:
 
 ## bitTestAny
 
-Returns result of [logical disjunction](https://en.wikipedia.org/wiki/Logical_disjunction) (OR operator) of all bits at given positions. The countdown starts from 0 from the right to the left.
+Returns result of [logical disjunction](https://en.wikipedia.org/wiki/Logical_disjunction) (OR operator) of all bits at given positions. Counting is right-to-left, starting at 0.
 
 The disjunction for bit-wise operations:
 
diff --git a/src/Functions/FunctionBitTestMany.h b/src/Functions/FunctionBitTestMany.h
index 71e94b1e71df..950e4ab4ea8e 100644
--- a/src/Functions/FunctionBitTestMany.h
+++ b/src/Functions/FunctionBitTestMany.h
@@ -16,6 +16,7 @@ namespace ErrorCodes
 {
     extern const int ILLEGAL_COLUMN;
     extern const int ILLEGAL_TYPE_OF_ARGUMENT;
+    extern const int PARAMETER_OUT_OF_BOUND;
     extern const int TOO_FEW_ARGUMENTS_FOR_FUNCTION;
 }
 
@@ -146,6 +147,9 @@ struct FunctionBitTestMany : public IFunction
                 const auto pos = pos_col_const->getUInt(0);
                 if (pos < 8 * sizeof(ValueType))
                     mask = mask | (ValueType(1) << pos);
+                else
+                    throw Exception(ErrorCodes::PARAMETER_OUT_OF_BOUND,
+                                   "The bit position argument {} is out of bounds for number", static_cast<UInt64>(pos));
             }
             else
             {
@@ -186,13 +190,20 @@ struct FunctionBitTestMany : public IFunction
             for (const auto i : collections::range(0, mask.size()))
                 if (pos[i] < 8 * sizeof(ValueType))
                     mask[i] = mask[i] | (ValueType(1) << pos[i]);
+                else
+                    throw Exception(ErrorCodes::PARAMETER_OUT_OF_BOUND,
+                                    "The bit position argument {} is out of bounds for number", static_cast<UInt64>(pos[i]));
 
             return true;
         }
         else if (const auto pos_col_const = checkAndGetColumnConst<ColumnVector<PosType>>(pos_col_untyped))
         {
             const auto & pos = pos_col_const->template getValue<PosType>();
-            const auto new_mask = pos < 8 * sizeof(ValueType) ? ValueType(1) << pos : 0;
+            if (pos >= 8 * sizeof(ValueType))
+                throw Exception(ErrorCodes::PARAMETER_OUT_OF_BOUND,
+                                "The bit position argument {} is out of bounds for number", static_cast<UInt64>(pos));
+
+            const auto new_mask = ValueType(1) << pos;
 
             for (const auto i : collections::range(0, mask.size()))
                 mask[i] = mask[i] | new_mask;
diff --git a/src/Functions/bitTest.cpp b/src/Functions/bitTest.cpp
index 78ec9c8b7739..cb6b83c1cf1c 100644
--- a/src/Functions/bitTest.cpp
+++ b/src/Functions/bitTest.cpp
@@ -8,6 +8,7 @@ namespace DB
 namespace ErrorCodes
 {
     extern const int NOT_IMPLEMENTED;
+    extern const int PARAMETER_OUT_OF_BOUND;
 }
 
 namespace
@@ -21,12 +22,21 @@ struct BitTestImpl
     static const constexpr bool allow_string_integer = false;
 
     template <typename Result = ResultType>
-    NO_SANITIZE_UNDEFINED static Result apply(A a [[maybe_unused]], B b [[maybe_unused]])
+    static Result apply(A a [[maybe_unused]], B b [[maybe_unused]])
     {
         if constexpr (is_big_int_v<A> || is_big_int_v<B>)
             throw Exception(ErrorCodes::NOT_IMPLEMENTED, "bitTest is not implemented for big integers as second argument");
         else
-            return (typename NumberTraits::ToInteger<A>::Type(a) >> typename NumberTraits::ToInteger<B>::Type(b)) & 1;
+        {
+            typename NumberTraits::ToInteger<A>::Type a_int = a;
+            typename NumberTraits::ToInteger<B>::Type b_int = b;
+            const auto max_position = static_cast<decltype(b)>((8 * sizeof(a)) - 1);
+            if (b_int > max_position || b_int < 0)
+                throw Exception(ErrorCodes::PARAMETER_OUT_OF_BOUND,
+                                "The bit position argument needs to a positive value and less or equal to {} for integer {}",
+                                std::to_string(max_position), std::to_string(a_int));
+            return (a_int >> b_int) & 1;
+        }
     }
 
 #if USE_EMBEDDED_COMPILER
