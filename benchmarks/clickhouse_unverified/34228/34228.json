{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 34228,
  "instance_id": "ClickHouse__ClickHouse-34228",
  "issue_numbers": [
    "34073"
  ],
  "base_commit": "805690cbdc2f79308a200090b4642c46a11ccfc7",
  "patch": "diff --git a/src/DataTypes/Serializations/ISerialization.cpp b/src/DataTypes/Serializations/ISerialization.cpp\nindex 5cdc037d5cbd..7df4a956c1a2 100644\n--- a/src/DataTypes/Serializations/ISerialization.cpp\n+++ b/src/DataTypes/Serializations/ISerialization.cpp\n@@ -167,8 +167,10 @@ String getNameForSubstreamPath(\n             /// Because nested data may be represented not by Array of Tuple,\n             ///  but by separate Array columns with names in a form of a.b,\n             ///  and name is encoded as a whole.\n-            stream_name += (escape_tuple_delimiter && it->escape_tuple_delimiter ?\n-                escapeForFileName(\".\") : \".\") + escapeForFileName(it->tuple_element_name);\n+            if (escape_tuple_delimiter && it->escape_tuple_delimiter)\n+                stream_name += escapeForFileName(\".\" + it->tuple_element_name);\n+            else\n+                stream_name += \".\" + it->tuple_element_name;\n         }\n     }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02191_nested_with_dots.reference b/tests/queries/0_stateless/02191_nested_with_dots.reference\nnew file mode 100644\nindex 000000000000..86cee7a8110d\n--- /dev/null\n+++ b/tests/queries/0_stateless/02191_nested_with_dots.reference\n@@ -0,0 +1,7 @@\n+[1]\t[[1]]\n+[[1]]\n+[(1,[1])]\n+[[1]]\n+(('a',1),'b')\n+a\t1\n+a\tb\ndiff --git a/tests/queries/0_stateless/02191_nested_with_dots.sql b/tests/queries/0_stateless/02191_nested_with_dots.sql\nnew file mode 100644\nindex 000000000000..cf649ca30131\n--- /dev/null\n+++ b/tests/queries/0_stateless/02191_nested_with_dots.sql\n@@ -0,0 +1,33 @@\n+DROP TABLE IF EXISTS t_nested_with_dots;\n+\n+CREATE TABLE t_nested_with_dots (n Nested(id UInt64, `values.id` Array(UInt64)))\n+ENGINE = MergeTree ORDER BY tuple();\n+\n+INSERT INTO t_nested_with_dots VALUES ([1], [[1]]);\n+\n+SELECT * FROM t_nested_with_dots;\n+SELECT n.values.id FROM t_nested_with_dots;\n+\n+DROP TABLE IF EXISTS t_nested_with_dots;\n+SET flatten_nested = 0;\n+\n+CREATE TABLE t_nested_with_dots (n Nested(id UInt64, `values.id` Array(UInt64)))\n+ENGINE = MergeTree ORDER BY tuple();\n+\n+INSERT INTO t_nested_with_dots VALUES ([(1, [1])]);\n+\n+SELECT * FROM t_nested_with_dots;\n+SELECT n.values.id FROM t_nested_with_dots;\n+\n+DROP TABLE IF EXISTS t_nested_with_dots;\n+\n+CREATE TABLE t_nested_with_dots (`t.t2` Tuple(`t3.t4.t5` Tuple(`s1.s2` String, `u1.u2` UInt64), `s3.s4.s5` String))\n+ENGINE = MergeTree ORDER BY tuple();\n+\n+INSERT INTO t_nested_with_dots VALUES ((('a', 1), 'b'));\n+\n+SELECT * FROM t_nested_with_dots;\n+SELECT t.t2.t3.t4.t5.s1.s2, t.t2.t3.t4.t5.u1.u2 FROM t_nested_with_dots;\n+SELECT t.t2.t3.t4.t5.s1.s2, t.t2.s3.s4.s5 FROM t_nested_with_dots;\n+\n+DROP TABLE IF EXISTS t_nested_with_dots;\n",
  "problem_statement": "Get Exception while query from Nested Array table in CH version 21.11.2.2 and upper\nClickhouse version 21.10.6.2,21.10.5.3 and lower:\r\n```\r\nCREATE TABLE repro (\r\n`id` UInt64,\r\n`version` UInt16,\r\n`conversations.id` Array(UInt64),\r\n`conversations.routings.id` Array(Array(UInt64))\r\n)\r\nENGINE = ReplacingMergeTree(version)\r\nORDER BY (id)\r\nSETTINGS min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0;\r\n\r\nINSERT INTO repro (`id`, `version`, `conversations.id`, `conversations.routings.id`)\r\nVALUES (1, 1, [1], [[1]]);\r\n\r\nselect * from repro;\r\n\r\n\u250c\u2500id\u2500\u252c\u2500version\u2500\u252c\u2500conversations.id\u2500\u252c\u2500conversations.routings.id\u2500\u2510\r\n\u2502  1 \u2502       1 \u2502 [1]              \u2502 [[1]]                     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\r\nCH version: 21.11.2.2 and upper:\r\n\r\n```\r\nCREATE TABLE repro (\r\n`id` UInt64,\r\n`version` UInt16,\r\n`conversations.id` Array(UInt64),\r\n`conversations.routings.id` Array(Array(UInt64))\r\n)\r\nENGINE = ReplacingMergeTree(version)\r\nORDER BY (id)\r\nSETTINGS min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0;\r\n\r\nINSERT INTO repro (`id`, `version`, `conversations.id`, `conversations.routings.id`)\r\nVALUES (1, 1, [1], [[1]]);\r\n\r\nselect * from repro;\r\n\r\nReceived exception from server (version 21.11.2):                        <------------- unexpected, it should have results.\r\nCode: 44. DB::Exception: Received from localhost:9000. DB::Exception: There is no subcolumn routings.id in type Nested(id UInt64, `routings.id` Array(UInt64)): While executing MergeTreeInOrder. (ILLEGAL_COLUMN)\r\n\r\n```\r\n\r\n**Unexpected Behaviour:**\r\nIt should not have an exception in the select query.\r\n\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2022-02-01T14:34:55Z",
  "modified_files": [
    "src/DataTypes/Serializations/ISerialization.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02191_nested_with_dots.reference",
    "b/tests/queries/0_stateless/02191_nested_with_dots.sql"
  ]
}