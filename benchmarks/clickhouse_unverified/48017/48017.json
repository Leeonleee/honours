{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 48017,
  "instance_id": "ClickHouse__ClickHouse-48017",
  "issue_numbers": [
    "46437"
  ],
  "base_commit": "614f8b313e91f9c4996bc29a6cde53753899d6d3",
  "patch": "diff --git a/docs/en/sql-reference/statements/show.md b/docs/en/sql-reference/statements/show.md\nindex 544c556d4b31..c0ab51ae444f 100644\n--- a/docs/en/sql-reference/statements/show.md\n+++ b/docs/en/sql-reference/statements/show.md\n@@ -30,7 +30,7 @@ This statement is identical to the query:\n SELECT name FROM system.databases [WHERE name [NOT] LIKE | ILIKE '<pattern>'] [LIMIT <N>] [INTO OUTFILE filename] [FORMAT format]\n ```\n \n-### Examples\n+**Examples**\n \n Getting database names, containing the symbols sequence 'de' in their names:\n \n@@ -92,7 +92,7 @@ Result:\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n-### See Also\n+**See also**\n \n -   [CREATE DATABASE](https://clickhouse.com/docs/en/sql-reference/statements/create/database/#query-language-create-database)\n \n@@ -128,7 +128,7 @@ This statement is identical to the query:\n SELECT name FROM system.tables [WHERE name [NOT] LIKE | ILIKE '<pattern>'] [LIMIT <N>] [INTO OUTFILE <filename>] [FORMAT <format>]\n ```\n \n-### Examples\n+**Examples**\n \n Getting table names, containing the symbols sequence 'user' in their names:\n \n@@ -191,11 +191,59 @@ Result:\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n-### See Also\n+**See also**\n \n -   [Create Tables](https://clickhouse.com/docs/en/getting-started/tutorial/#create-tables)\n -   [SHOW CREATE TABLE](https://clickhouse.com/docs/en/sql-reference/statements/show/#show-create-table)\n \n+## SHOW COLUMNS\n+\n+Displays a list of columns\n+\n+```sql\n+SHOW [EXTENDED] [FULL] COLUMNS {FROM | IN} <table> [{FROM | IN} <db>] [{[NOT] {LIKE | ILIKE} '<pattern>' | WHERE <expr>}] [LIMIT <N>] [INTO\n+OUTFILE <filename>] [FORMAT <format>]\n+```\n+\n+The database and table name can be specified in abbreviated form as `<db>.<table>`, i.e. `FROM tab FROM db` and `FROM db.tab` are\n+equivalent. If no database is specified, the query returns the list of columns from the current database.\n+\n+The optional keyword `EXTENDED` currently has no effect, it only exists for MySQL compatibility.\n+\n+The optional keyword `FULL` causes the output to include the collation, comment and privilege columns.\n+\n+`SHOW COLUMNS` produces a result table with the following structure:\n+- field - The name of the column (String)\n+- type - The column data type (String)\n+- null - If the column data type is Nullable (UInt8)\n+- key - `PRI` if the column is part of the primary key, `SOR` if the column is part of the sorting key, empty otherwise (String)\n+- default - Default expression of the column if it is of type `ALIAS`, `DEFAULT`, or `MATERIALIZED`, otherwise `NULL`. (Nullable(String))\n+- extra - Additional information, currently unused (String)\n+- collation - Collation of the column, always `NULL` because ClickHouse has no per-column collations, only if `FULL` keyword was specified (Nullable(String))\n+- comment - Comment on the column, only if `FULL` keyword was specified (String)\n+- privilege - The privilege you have on this column, currently not available, only if `FULL` keyword was specified (String)\n+\n+**Examples**\n+\n+Getting information about all columns in table 'order' starting with 'delivery_':\n+\n+```sql\n+SHOW COLUMNS FROM 'orders' LIKE 'delivery_%'\n+```\n+\n+Result:\n+\n+``` text\n+\u250c\u2500field\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500type\u2500\u2500\u2500\u2500\u2500\u252c\u2500null\u2500\u252c\u2500key\u2500\u2500\u2500\u2500\u2500\u252c\u2500default\u2500\u252c\u2500extra\u2500\u2510\n+\u2502 delivery_date   \u2502 DateTime \u2502    0 \u2502 PRI SOR \u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502       \u2502\n+\u2502 delivery_status \u2502 Bool     \u2502    0 \u2502         \u2502 \u1d3a\u1d41\u1d38\u1d38    \u2502       \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+```\n+\n+**See also**\n+\n+-    [system.columns](https://clickhouse.com/docs/en/operations/system-tables/columns)\n+\n ## SHOW DICTIONARIES\n \n Displays a list of [Dictionaries](../../sql-reference/dictionaries/index.md).\n@@ -212,7 +260,7 @@ You can get the same results as the `SHOW DICTIONARIES` query in the following w\n SELECT name FROM system.dictionaries WHERE database = <db> [AND name LIKE <pattern>] [LIMIT <N>] [INTO OUTFILE <filename>] [FORMAT <format>]\n ```\n \n-**Example**\n+**Examples**\n \n The following query selects the first two rows from the list of tables in the `system` database, whose names contain `reg`.\n \n@@ -231,7 +279,7 @@ SHOW DICTIONARIES FROM db LIKE '%reg%' LIMIT 2\n \n Shows privileges for a user.\n \n-### Syntax\n+**Syntax**\n \n ``` sql\n SHOW GRANTS [FOR user1 [, user2 ...]]\n@@ -245,7 +293,7 @@ Shows parameters that were used at a [user creation](../../sql-reference/stateme\n \n `SHOW CREATE USER` does not output user passwords.\n \n-### Syntax\n+**Syntax**\n \n ``` sql\n SHOW CREATE USER [name1 [, name2 ...] | CURRENT_USER]\n@@ -255,7 +303,7 @@ SHOW CREATE USER [name1 [, name2 ...] | CURRENT_USER]\n \n Shows parameters that were used at a [role creation](../../sql-reference/statements/create/role.md).\n \n-### Syntax\n+**Syntax**\n \n ``` sql\n SHOW CREATE ROLE name1 [, name2 ...]\n@@ -265,7 +313,7 @@ SHOW CREATE ROLE name1 [, name2 ...]\n \n Shows parameters that were used at a [row policy creation](../../sql-reference/statements/create/row-policy.md).\n \n-### Syntax\n+**Syntax**\n \n ``` sql\n SHOW CREATE [ROW] POLICY name ON [database1.]table1 [, [database2.]table2 ...]\n@@ -275,7 +323,7 @@ SHOW CREATE [ROW] POLICY name ON [database1.]table1 [, [database2.]table2 ...]\n \n Shows parameters that were used at a [quota creation](../../sql-reference/statements/create/quota.md).\n \n-### Syntax\n+**Syntax**\n \n ``` sql\n SHOW CREATE QUOTA [name1 [, name2 ...] | CURRENT]\n@@ -285,7 +333,7 @@ SHOW CREATE QUOTA [name1 [, name2 ...] | CURRENT]\n \n Shows parameters that were used at a [settings profile creation](../../sql-reference/statements/create/settings-profile.md).\n \n-### Syntax\n+**Syntax**\n \n ``` sql\n SHOW CREATE [SETTINGS] PROFILE name1 [, name2 ...]\n@@ -295,7 +343,7 @@ SHOW CREATE [SETTINGS] PROFILE name1 [, name2 ...]\n \n Returns a list of [user account](../../guides/sre/user-management/index.md#user-account-management) names. To view user accounts parameters, see the system table [system.users](../../operations/system-tables/users.md#system_tables-users).\n \n-### Syntax\n+**Syntax**\n \n ``` sql\n SHOW USERS\n@@ -305,7 +353,7 @@ SHOW USERS\n \n Returns a list of [roles](../../guides/sre/user-management/index.md#role-management). To view another parameters, see system tables [system.roles](../../operations/system-tables/roles.md#system_tables-roles) and [system.role_grants](../../operations/system-tables/role-grants.md#system_tables-role_grants).\n \n-### Syntax\n+**Syntax**\n \n ``` sql\n SHOW [CURRENT|ENABLED] ROLES\n@@ -314,7 +362,7 @@ SHOW [CURRENT|ENABLED] ROLES\n \n Returns a list of [setting profiles](../../guides/sre/user-management/index.md#settings-profiles-management). To view user accounts parameters, see the system table [settings_profiles](../../operations/system-tables/settings_profiles.md#system_tables-settings_profiles).\n \n-### Syntax\n+**Syntax**\n \n ``` sql\n SHOW [SETTINGS] PROFILES\n@@ -324,7 +372,7 @@ SHOW [SETTINGS] PROFILES\n \n Returns a list of [row policies](../../guides/sre/user-management/index.md#row-policy-management) for the specified table. To view user accounts parameters, see the system table [system.row_policies](../../operations/system-tables/row_policies.md#system_tables-row_policies).\n \n-### Syntax\n+**Syntax**\n \n ``` sql\n SHOW [ROW] POLICIES [ON [db.]table]\n@@ -334,7 +382,7 @@ SHOW [ROW] POLICIES [ON [db.]table]\n \n Returns a list of [quotas](../../guides/sre/user-management/index.md#quotas-management). To view quotas parameters, see the system table [system.quotas](../../operations/system-tables/quotas.md#system_tables-quotas).\n \n-### Syntax\n+**Syntax**\n \n ``` sql\n SHOW QUOTAS\n@@ -344,7 +392,7 @@ SHOW QUOTAS\n \n Returns a [quota](../../operations/quotas.md) consumption for all users or for current user. To view another parameters, see system tables [system.quotas_usage](../../operations/system-tables/quotas_usage.md#system_tables-quotas_usage) and [system.quota_usage](../../operations/system-tables/quota_usage.md#system_tables-quota_usage).\n \n-### Syntax\n+**Syntax**\n \n ``` sql\n SHOW [CURRENT] QUOTA\n@@ -353,7 +401,7 @@ SHOW [CURRENT] QUOTA\n \n Shows all [users](../../guides/sre/user-management/index.md#user-account-management), [roles](../../guides/sre/user-management/index.md#role-management), [profiles](../../guides/sre/user-management/index.md#settings-profiles-management), etc. and all their [grants](../../sql-reference/statements/grant.md#grant-privileges).\n \n-### Syntax\n+**Syntax**\n \n ``` sql\n SHOW ACCESS\n@@ -366,13 +414,14 @@ Returns a list of clusters. All available clusters are listed in the [system.clu\n `SHOW CLUSTER name` query displays the contents of system.clusters table for this cluster.\n :::\n \n-### Syntax\n+**Syntax**\n \n ``` sql\n SHOW CLUSTER '<name>'\n SHOW CLUSTERS [[NOT] LIKE|ILIKE '<pattern>'] [LIMIT <N>]\n ```\n-### Examples\n+\n+**Examples**\n \n Query:\n \ndiff --git a/src/Interpreters/InterpreterFactory.cpp b/src/Interpreters/InterpreterFactory.cpp\nindex 502de459156a..fb013ce45699 100644\n--- a/src/Interpreters/InterpreterFactory.cpp\n+++ b/src/Interpreters/InterpreterFactory.cpp\n@@ -20,6 +20,7 @@\n #include <Parsers/ASTShowEngineQuery.h>\n #include <Parsers/ASTShowProcesslistQuery.h>\n #include <Parsers/ASTShowTablesQuery.h>\n+#include <Parsers/ASTShowColumnsQuery.h>\n #include <Parsers/ASTUseQuery.h>\n #include <Parsers/ASTWatchQuery.h>\n #include <Parsers/ASTCreateNamedCollectionQuery.h>\n@@ -77,6 +78,7 @@\n #include <Interpreters/InterpreterShowEngineQuery.h>\n #include <Interpreters/InterpreterShowProcesslistQuery.h>\n #include <Interpreters/InterpreterShowTablesQuery.h>\n+#include <Interpreters/InterpreterShowColumnsQuery.h>\n #include <Interpreters/InterpreterSystemQuery.h>\n #include <Interpreters/InterpreterUseQuery.h>\n #include <Interpreters/InterpreterWatchQuery.h>\n@@ -169,6 +171,10 @@ std::unique_ptr<IInterpreter> InterpreterFactory::get(ASTPtr & query, ContextMut\n     {\n         return std::make_unique<InterpreterShowTablesQuery>(query, context);\n     }\n+    else if (query->as<ASTShowColumnsQuery>())\n+    {\n+        return std::make_unique<InterpreterShowColumnsQuery>(query, context);\n+    }\n     else if (query->as<ASTShowEnginesQuery>())\n     {\n         return std::make_unique<InterpreterShowEnginesQuery>(query, context);\ndiff --git a/src/Interpreters/InterpreterShowColumnsQuery.cpp b/src/Interpreters/InterpreterShowColumnsQuery.cpp\nnew file mode 100644\nindex 000000000000..4474be21d8b0\n--- /dev/null\n+++ b/src/Interpreters/InterpreterShowColumnsQuery.cpp\n@@ -0,0 +1,103 @@\n+#include <Interpreters/InterpreterShowColumnsQuery.h>\n+\n+#include <IO/WriteBufferFromString.h>\n+#include <Parsers/ASTShowColumnsQuery.h>\n+#include <Parsers/formatAST.h>\n+#include <Interpreters/Context.h>\n+#include <Interpreters/executeQuery.h>\n+#include <IO/Operators.h>\n+#include <boost/algorithm/string.hpp>\n+\n+\n+namespace DB\n+{\n+\n+\n+InterpreterShowColumnsQuery::InterpreterShowColumnsQuery(const ASTPtr & query_ptr_, ContextMutablePtr context_)\n+    : WithMutableContext(context_)\n+    , query_ptr(query_ptr_)\n+{\n+}\n+\n+\n+String InterpreterShowColumnsQuery::getRewrittenQuery()\n+{\n+    const auto & query = query_ptr->as<ASTShowColumnsQuery &>();\n+\n+    WriteBufferFromOwnString rewritten_query;\n+\n+    rewritten_query << \"SELECT name AS field, type AS type, startsWith(type, 'Nullable') AS null, trim(concatWithSeparator(' ', if(is_in_primary_key, 'PRI', ''), if (is_in_sorting_key, 'SOR', ''))) AS key, if(default_kind IN ('ALIAS', 'DEFAULT', 'MATERIALIZED'), default_expression, NULL) AS default, '' AS extra \";\n+\n+    // TODO Interpret query.extended. It is supposed to show internal/virtual columns. Need to fetch virtual column names, see\n+    // IStorage::getVirtuals(). We can't easily do that via SQL.\n+\n+    if (query.full)\n+    {\n+        /// \"Full\" mode is mostly for MySQL compat\n+        /// - collation: no such thing in ClickHouse\n+        /// - comment\n+        /// - privileges: <not implemented, TODO ask system.grants>\n+        rewritten_query << \", NULL AS collation, comment, '' AS privileges \";\n+    }\n+\n+    rewritten_query << \"FROM system.columns WHERE \";\n+\n+    String database;\n+    String table;\n+    if (query.from_table.contains(\".\"))\n+    {\n+        /// FROM <db>.<table> (abbreviated form)\n+        chassert(query.from_database.empty());\n+        std::vector<String> split;\n+        boost::split(split, query.from_table, boost::is_any_of(\".\"));\n+        chassert(split.size() == 2);\n+        database = split[0];\n+        table = split[1];\n+    }\n+    else if (query.from_database.empty())\n+    {\n+        /// FROM <table>\n+        chassert(!query.from_table.empty());\n+        database = getContext()->getCurrentDatabase();\n+        table = query.from_table;\n+    }\n+    else\n+    {\n+        /// FROM <database> FROM <table>\n+        chassert(!query.from_database.empty());\n+        chassert(!query.from_table.empty());\n+        database = query.from_database;\n+        table = query.from_table;\n+    }\n+    rewritten_query << \"database = \" << DB::quote << database;\n+    rewritten_query << \" AND table = \" << DB::quote << table;\n+\n+    if (!query.like.empty())\n+        rewritten_query\n+            << \" AND name \"\n+            << (query.not_like ? \"NOT \" : \"\")\n+            << (query.case_insensitive_like ? \"ILIKE \" : \"LIKE \")\n+            << DB::quote << query.like;\n+    else if (query.where_expression)\n+        rewritten_query << \" AND (\" << query.where_expression << \")\";\n+\n+    /// Sorting is strictly speaking not necessary but 1. it is convenient for users, 2. SQL currently does not allow to\n+    /// sort the output of SHOW COLUMNS otherwise (SELECT * FROM (SHOW COLUMNS ...) ORDER BY ...) is rejected) and 3. some\n+    /// SQL tests can take advantage of this.\n+    rewritten_query << \" ORDER BY field, type, null, key, default, extra\";\n+\n+    if (query.limit_length)\n+        rewritten_query << \" LIMIT \" << query.limit_length;\n+\n+    return rewritten_query.str();\n+\n+}\n+\n+\n+BlockIO InterpreterShowColumnsQuery::execute()\n+{\n+    return executeQuery(getRewrittenQuery(), getContext(), true);\n+}\n+\n+\n+}\ndiff --git a/src/Interpreters/InterpreterShowColumnsQuery.h b/src/Interpreters/InterpreterShowColumnsQuery.h\nnew file mode 100644\nindex 000000000000..ee6dcabd97ba\n--- /dev/null\n+++ b/src/Interpreters/InterpreterShowColumnsQuery.h\n@@ -0,0 +1,32 @@\n+#pragma once\n+\n+#include <Interpreters/IInterpreter.h>\n+#include <Parsers/IAST_fwd.h>\n+\n+\n+namespace DB\n+{\n+\n+class Context;\n+\n+\n+/// Returns a list of columns which meet some conditions.\n+class InterpreterShowColumnsQuery : public IInterpreter, WithMutableContext\n+{\n+public:\n+    InterpreterShowColumnsQuery(const ASTPtr & query_ptr_, ContextMutablePtr context_);\n+\n+    BlockIO execute() override;\n+\n+    /// Ignore quota and limits here because execute() produces a SELECT query which checks quotas/limits by itself.\n+    bool ignoreQuota() const override { return true; }\n+    bool ignoreLimits() const override { return true; }\n+\n+private:\n+    ASTPtr query_ptr;\n+\n+    String getRewrittenQuery();\n+};\n+\n+\n+}\ndiff --git a/src/Interpreters/InterpreterShowTablesQuery.cpp b/src/Interpreters/InterpreterShowTablesQuery.cpp\nindex 4e0dfdc9236a..026057a8309d 100644\n--- a/src/Interpreters/InterpreterShowTablesQuery.cpp\n+++ b/src/Interpreters/InterpreterShowTablesQuery.cpp\n@@ -1,4 +1,4 @@\n-#include <IO/ReadBufferFromString.h>\n+#include <IO/WriteBufferFromString.h>\n #include <Parsers/ASTShowTablesQuery.h>\n #include <Parsers/formatAST.h>\n #include <Interpreters/Context.h>\n@@ -24,7 +24,8 @@ namespace ErrorCodes\n \n \n InterpreterShowTablesQuery::InterpreterShowTablesQuery(const ASTPtr & query_ptr_, ContextMutablePtr context_)\n-    : WithMutableContext(context_), query_ptr(query_ptr_)\n+    : WithMutableContext(context_)\n+    , query_ptr(query_ptr_)\n {\n }\n \ndiff --git a/src/Interpreters/InterpreterShowTablesQuery.h b/src/Interpreters/InterpreterShowTablesQuery.h\nindex 16fc9ef2cf4b..2693e5b08edb 100644\n--- a/src/Interpreters/InterpreterShowTablesQuery.h\n+++ b/src/Interpreters/InterpreterShowTablesQuery.h\n@@ -20,8 +20,7 @@ class InterpreterShowTablesQuery : public IInterpreter, WithMutableContext\n \n     BlockIO execute() override;\n \n-    /// We ignore the quota and limits here because execute() will rewrite a show query as a SELECT query and then\n-    /// the SELECT query will checks the quota and limits.\n+    /// Ignore quota and limits here because execute() produces a SELECT query which checks quotas/limits by itself.\n     bool ignoreQuota() const override { return true; }\n     bool ignoreLimits() const override { return true; }\n \ndiff --git a/src/Parsers/ASTIdentifier_fwd.h b/src/Parsers/ASTIdentifier_fwd.h\nindex c4434477fdb7..01cfbb8fec71 100644\n--- a/src/Parsers/ASTIdentifier_fwd.h\n+++ b/src/Parsers/ASTIdentifier_fwd.h\n@@ -17,17 +17,21 @@ class ASTTableIdentifier;\n void setIdentifierSpecial(ASTPtr & ast);\n \n String getIdentifierName(const IAST * ast);\n+\n std::optional<String> tryGetIdentifierName(const IAST * ast);\n+\n bool tryGetIdentifierNameInto(const IAST * ast, String & name);\n \n inline String getIdentifierName(const ASTPtr & ast)\n {\n     return getIdentifierName(ast.get());\n }\n+\n inline std::optional<String> tryGetIdentifierName(const ASTPtr & ast)\n {\n     return tryGetIdentifierName(ast.get());\n }\n+\n inline bool tryGetIdentifierNameInto(const ASTPtr & ast, String & name)\n {\n     return tryGetIdentifierNameInto(ast.get(), name);\ndiff --git a/src/Parsers/ASTShowColumnsQuery.cpp b/src/Parsers/ASTShowColumnsQuery.cpp\nnew file mode 100644\nindex 000000000000..d14cbdc9b841\n--- /dev/null\n+++ b/src/Parsers/ASTShowColumnsQuery.cpp\n@@ -0,0 +1,53 @@\n+#include <Parsers/ASTShowColumnsQuery.h>\n+\n+#include <iomanip>\n+#include <Common/quoteString.h>\n+#include <IO/Operators.h>\n+\n+namespace DB\n+{\n+\n+ASTPtr ASTShowColumnsQuery::clone() const\n+{\n+    auto res = std::make_shared<ASTShowColumnsQuery>(*this);\n+    res->children.clear();\n+    cloneOutputOptions(*res);\n+    return res;\n+}\n+\n+void ASTShowColumnsQuery::formatQueryImpl(const FormatSettings & settings, FormatState & state, FormatStateStacked frame) const\n+{\n+    settings.ostr << (settings.hilite ? hilite_keyword : \"\")\n+                  << \"SHOW \"\n+                  << (extended ? \"EXTENDED \" : \"\")\n+                  << (full ? \"FULL \" : \"\")\n+                  << \"COLUMNS\"\n+                  << (settings.hilite ? hilite_none : \"\");\n+\n+    if (from_database.empty())\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" FROM \" << (settings.hilite ? hilite_none : \"\") << backQuoteIfNeed(from_table);\n+    else\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" FROM \" << (settings.hilite ? hilite_none : \"\") << backQuoteIfNeed(from_database) << \".\" << backQuoteIfNeed(from_table);\n+\n+\n+    if (!like.empty())\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\")\n+                      << (not_like ? \" NOT \" : \"\")\n+                      << (case_insensitive_like ? \" ILIKE \" : \" LIKE\")\n+                      << (settings.hilite ? hilite_none : \"\")\n+                      << DB::quote << like;\n+\n+    if (where_expression)\n+    {\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" WHERE \" << (settings.hilite ? hilite_none : \"\");\n+        where_expression->formatImpl(settings, state, frame);\n+    }\n+\n+    if (limit_length)\n+    {\n+        settings.ostr << (settings.hilite ? hilite_keyword : \"\") << \" LIMIT \" << (settings.hilite ? hilite_none : \"\");\n+        limit_length->formatImpl(settings, state, frame);\n+    }\n+}\n+\n+}\ndiff --git a/src/Parsers/ASTShowColumnsQuery.h b/src/Parsers/ASTShowColumnsQuery.h\nnew file mode 100644\nindex 000000000000..79e8a67b5580\n--- /dev/null\n+++ b/src/Parsers/ASTShowColumnsQuery.h\n@@ -0,0 +1,34 @@\n+#pragma once\n+\n+#include <Parsers/IAST_fwd.h>\n+#include <Parsers/ASTQueryWithOutput.h>\n+\n+namespace DB\n+{\n+\n+/// Query SHOW COLUMNS\n+class ASTShowColumnsQuery : public ASTQueryWithOutput\n+{\n+public:\n+    bool extended = false;\n+    bool full = false;\n+    bool not_like = false;\n+    bool case_insensitive_like = false;\n+\n+    ASTPtr where_expression;\n+    ASTPtr limit_length;\n+\n+    String from_database;\n+    String from_table;\n+\n+    String like;\n+\n+    String getID(char) const override { return \"ShowColumns\"; }\n+    ASTPtr clone() const override;\n+    QueryKind getQueryKind() const override { return QueryKind::Show; }\n+\n+protected:\n+    void formatQueryImpl(const FormatSettings & settings, FormatState &, FormatStateStacked) const override;\n+};\n+\n+}\ndiff --git a/src/Parsers/ASTShowTablesQuery.h b/src/Parsers/ASTShowTablesQuery.h\nindex b58d65e37ab9..2878df54bcc5 100644\n--- a/src/Parsers/ASTShowTablesQuery.h\n+++ b/src/Parsers/ASTShowTablesQuery.h\n@@ -14,31 +14,28 @@ namespace DB\n class ASTShowTablesQuery : public ASTQueryWithOutput\n {\n public:\n-    bool databases{false};\n-    bool clusters{false};\n-    bool cluster{false};\n-    bool dictionaries{false};\n-    bool m_settings{false};\n-    bool changed{false};\n-    bool temporary{false};\n-    bool caches{false};\n-    bool full{false};\n+    bool databases = false;\n+    bool clusters = false;\n+    bool cluster = false;\n+    bool dictionaries = false;\n+    bool m_settings = false;\n+    bool changed = false;\n+    bool temporary = false;\n+    bool caches = false;\n+    bool full = false;\n \n     String cluster_str;\n     String from;\n     String like;\n \n-    bool not_like{false};\n-    bool case_insensitive_like{false};\n+    bool not_like = false;\n+    bool case_insensitive_like = false;\n \n     ASTPtr where_expression;\n     ASTPtr limit_length;\n \n-    /** Get the text that identifies this element. */\n     String getID(char) const override { return \"ShowTables\"; }\n-\n     ASTPtr clone() const override;\n-\n     QueryKind getQueryKind() const override { return QueryKind::Show; }\n \n protected:\ndiff --git a/src/Parsers/ParserQueryWithOutput.cpp b/src/Parsers/ParserQueryWithOutput.cpp\nindex 7024d8cbe11a..518f0e7e50eb 100644\n--- a/src/Parsers/ParserQueryWithOutput.cpp\n+++ b/src/Parsers/ParserQueryWithOutput.cpp\n@@ -15,6 +15,7 @@\n #include <Parsers/ParserSetQuery.h>\n #include <Parsers/ParserShowProcesslistQuery.h>\n #include <Parsers/ParserShowTablesQuery.h>\n+#include <Parsers/ParserShowColumnsQuery.h>\n #include <Parsers/ParserShowEngineQuery.h>\n #include <Parsers/ParserTablePropertiesQuery.h>\n #include <Parsers/ParserWatchQuery.h>\n@@ -34,6 +35,7 @@ namespace DB\n bool ParserQueryWithOutput::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n {\n     ParserShowTablesQuery show_tables_p;\n+    ParserShowColumnsQuery show_columns_p;\n     ParserShowEnginesQuery show_engine_p;\n     ParserSelectWithUnionQuery select_p;\n     ParserTablePropertiesQuery table_p;\n@@ -62,6 +64,7 @@ bool ParserQueryWithOutput::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n         || select_p.parse(pos, query, expected)\n         || show_create_access_entity_p.parse(pos, query, expected) /// should be before `show_tables_p`\n         || show_tables_p.parse(pos, query, expected)\n+        || show_columns_p.parse(pos, query, expected)\n         || show_engine_p.parse(pos, query, expected)\n         || table_p.parse(pos, query, expected)\n         || describe_cache_p.parse(pos, query, expected)\ndiff --git a/src/Parsers/ParserShowColumnsQuery.cpp b/src/Parsers/ParserShowColumnsQuery.cpp\nnew file mode 100644\nindex 000000000000..1db31601437a\n--- /dev/null\n+++ b/src/Parsers/ParserShowColumnsQuery.cpp\n@@ -0,0 +1,80 @@\n+#include <Parsers/ParserShowColumnsQuery.h>\n+\n+#include <Parsers/ASTIdentifier_fwd.h>\n+#include <Parsers/ASTLiteral.h>\n+#include <Parsers/ASTShowColumnsQuery.h>\n+#include <Parsers/CommonParsers.h>\n+#include <Parsers/ExpressionElementParsers.h>\n+#include <Parsers/ExpressionListParsers.h>\n+\n+namespace DB\n+{\n+\n+bool ParserShowColumnsQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expected)\n+{\n+    ASTPtr like;\n+    ASTPtr from_db;\n+    ASTPtr from_table;\n+\n+    auto query = std::make_shared<ASTShowColumnsQuery>();\n+\n+    if (!ParserKeyword(\"SHOW\").ignore(pos, expected))\n+        return false;\n+\n+    if (ParserKeyword(\"EXTENDED\").ignore(pos, expected))\n+        query->extended = true;\n+\n+    if (ParserKeyword(\"FULL\").ignore(pos, expected))\n+        query->full = true;\n+\n+    if (!ParserKeyword(\"COLUMNS\").ignore(pos, expected) || ParserKeyword(\"FIELDS\").ignore(pos, expected))\n+        return false;\n+\n+    if (ParserKeyword(\"FROM\").ignore(pos, expected) || ParserKeyword(\"IN\").ignore(pos, expected))\n+    {\n+        if (!ParserCompoundIdentifier().parse(pos, from_table, expected))\n+            return false;\n+    }\n+    else\n+        return false;\n+\n+    tryGetIdentifierNameInto(from_table, query->from_table);\n+    bool abbreviated_form = query->from_table.contains(\".\"); /// FROM <db>.<table>\n+\n+    if (!abbreviated_form)\n+        if (ParserKeyword(\"FROM\").ignore(pos, expected) || ParserKeyword(\"IN\").ignore(pos, expected))\n+            if (!ParserIdentifier().parse(pos, from_db, expected))\n+                return false;\n+\n+    tryGetIdentifierNameInto(from_db, query->from_database);\n+\n+    if (ParserKeyword(\"NOT\").ignore(pos, expected))\n+        query->not_like = true;\n+\n+    if (bool insensitive = ParserKeyword(\"ILIKE\").ignore(pos, expected); insensitive || ParserKeyword(\"LIKE\").ignore(pos, expected))\n+    {\n+        if (insensitive)\n+            query->case_insensitive_like = true;\n+\n+        if (!ParserStringLiteral().parse(pos, like, expected))\n+            return false;\n+    }\n+    else if (query->not_like)\n+        return false;\n+    else if (ParserKeyword(\"WHERE\").ignore(pos, expected))\n+        if (!ParserExpressionWithOptionalAlias(false).parse(pos, query->where_expression, expected))\n+            return false;\n+\n+    if (ParserKeyword(\"LIMIT\").ignore(pos, expected))\n+        if (!ParserExpressionWithOptionalAlias(false).parse(pos, query->limit_length, expected))\n+            return false;\n+\n+    if (like)\n+        query->like = like->as<ASTLiteral &>().value.safeGet<const String &>();\n+\n+    node = query;\n+\n+    return true;\n+}\n+\n+}\ndiff --git a/src/Parsers/ParserShowColumnsQuery.h b/src/Parsers/ParserShowColumnsQuery.h\nnew file mode 100644\nindex 000000000000..999acf722afa\n--- /dev/null\n+++ b/src/Parsers/ParserShowColumnsQuery.h\n@@ -0,0 +1,19 @@\n+#pragma once\n+\n+#include <Parsers/IParserBase.h>\n+\n+namespace DB\n+{\n+\n+/** Parses queries of the form\n+ * SHOW [EXTENDED] [FULL] COLUMNS (FROM|IN) tbl [(FROM|IN) db] [(([NOT] (LIKE|ILIKE) expr) | (WHERE expr))] [LIMIT n]\n+ */\n+class ParserShowColumnsQuery : public IParserBase\n+{\n+protected:\n+    const char * getName() const override { return \"SHOW COLUMNS query\"; }\n+\n+    bool parseImpl(Pos & pos, ASTPtr & node, Expected & expected) override;\n+};\n+\n+}\ndiff --git a/src/Parsers/ParserShowTablesQuery.cpp b/src/Parsers/ParserShowTablesQuery.cpp\nindex 1647dd9a5b48..3540a6d3fc80 100644\n--- a/src/Parsers/ParserShowTablesQuery.cpp\n+++ b/src/Parsers/ParserShowTablesQuery.cpp\n@@ -149,10 +149,8 @@ bool ParserShowTablesQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n         }\n \n         if (s_from.ignore(pos, expected) || s_in.ignore(pos, expected))\n-        {\n             if (!name_p.parse(pos, database, expected))\n                 return false;\n-        }\n \n         if (s_not.ignore(pos, expected))\n             query->not_like = true;\n@@ -168,16 +166,12 @@ bool ParserShowTablesQuery::parseImpl(Pos & pos, ASTPtr & node, Expected & expec\n         else if (query->not_like)\n             return false;\n         else if (s_where.ignore(pos, expected))\n-        {\n             if (!exp_elem.parse(pos, query->where_expression, expected))\n                 return false;\n-        }\n \n         if (s_limit.ignore(pos, expected))\n-        {\n             if (!exp_elem.parse(pos, query->limit_length, expected))\n                 return false;\n-        }\n     }\n \n     tryGetIdentifierNameInto(database, query->from);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/25402_show_columns.reference b/tests/queries/0_stateless/25402_show_columns.reference\nnew file mode 100644\nindex 000000000000..da967d59cda7\n--- /dev/null\n+++ b/tests/queries/0_stateless/25402_show_columns.reference\n@@ -0,0 +1,38 @@\n+int32\tNullable(Int32)\t1\t\t\\N\t\n+str\tString\t0\tSOR\t\\N\t\n+uint64\tUInt64\t0\tPRI SOR\t\\N\t\n+--- EXTENDED\n+int32\tNullable(Int32)\t1\t\t\\N\t\n+str\tString\t0\tSOR\t\\N\t\n+uint64\tUInt64\t0\tPRI SOR\t\\N\t\n+--- FULL\n+int32\tNullable(Int32)\t1\t\t\\N\t\t\\N\texample comment\t\n+str\tString\t0\tSOR\t\\N\t\t\\N\t\t\n+uint64\tUInt64\t0\tPRI SOR\t\\N\t\t\\N\t\t\n+--- LIKE\n+int32\tNullable(Int32)\t1\t\t\\N\t\n+uint64\tUInt64\t0\tPRI SOR\t\\N\t\n+--- NOT LIKE\n+str\tString\t0\tSOR\t\\N\t\n+--- ILIKE\n+int32\tNullable(Int32)\t1\t\t\\N\t\n+uint64\tUInt64\t0\tPRI SOR\t\\N\t\n+--- NOT ILIKE\n+str\tString\t0\tSOR\t\\N\t\n+--- WHERE\n+int32\tNullable(Int32)\t1\t\t\\N\t\n+uint64\tUInt64\t0\tPRI SOR\t\\N\t\n+--- LIMIT\n+int32\tNullable(Int32)\t1\t\t\\N\t\n+--- Original table\n+int32\tNullable(Int32)\t1\t\t\\N\t\n+str\tString\t0\tSOR\t\\N\t\n+uint64\tUInt64\t0\tPRI SOR\t\\N\t\n+--- Equally named table in other database\n+int32\tInt32\t0\t\t\\N\t\n+str\tString\t0\t\t\\N\t\n+uint64\tUInt64\t0\tPRI SOR\t\\N\t\n+--- Short form\n+int32\tInt32\t0\t\t\\N\t\n+str\tString\t0\t\t\\N\t\n+uint64\tUInt64\t0\tPRI SOR\t\\N\t\ndiff --git a/tests/queries/0_stateless/25402_show_columns.sql b/tests/queries/0_stateless/25402_show_columns.sql\nnew file mode 100644\nindex 000000000000..ce206fedee43\n--- /dev/null\n+++ b/tests/queries/0_stateless/25402_show_columns.sql\n@@ -0,0 +1,70 @@\n+-- Tags: no-parallel\n+-- no-parallel: creates a custom database schema and expects to use it exclusively\n+\n+-- Create a test table and verify that the output of SHOW COLUMNS is sane.\n+-- The matching of actual/expected results relies on the fact that the output of SHOW COLUMNS is sorted.\n+DROP TABLE IF EXISTS tab;\n+CREATE TABLE tab\n+(\n+    `uint64` UInt64,\n+    `int32` Nullable(Int32) COMMENT 'example comment',\n+    `str` String,\n+    INDEX idx str TYPE set(1000)\n+)\n+ENGINE = MergeTree\n+PRIMARY KEY (uint64)\n+ORDER BY (uint64, str);\n+\n+SHOW COLUMNS FROM tab;\n+\n+SELECT '--- EXTENDED';\n+SHOW EXTENDED COLUMNS FROM tab;\n+\n+SELECT '--- FULL';\n+SHOW FULL COLUMNS FROM tab;\n+\n+SELECT '--- LIKE';\n+SHOW COLUMNS FROM tab LIKE '%int%';\n+\n+SELECT '--- NOT LIKE';\n+SHOW COLUMNS FROM tab NOT LIKE '%int%';\n+\n+SELECT '--- ILIKE';\n+SHOW COLUMNS FROM tab ILIKE '%INT%';\n+\n+SELECT '--- NOT ILIKE';\n+SHOW COLUMNS FROM tab NOT ILIKE '%INT%';\n+\n+SELECT '--- WHERE';\n+SHOW COLUMNS FROM tab WHERE field LIKE '%int%';\n+\n+SELECT '--- LIMIT';\n+SHOW COLUMNS FROM tab LIMIT 1;\n+\n+-- Create a table in a different database. Intentionally useing the same table/column names as above so\n+-- we notice if something is buggy in the implementation of SHOW COLUMNS.\n+DROP DATABASE IF EXISTS database_123456789abcde;\n+CREATE DATABASE database_123456789abcde; -- pseudo-random database name\n+\n+DROP TABLE IF EXISTS database_123456789abcde.tab;\n+CREATE TABLE database_123456789abcde.tab\n+(\n+    `uint64` UInt64,\n+    `int32` Int32,\n+    `str` String\n+)\n+ENGINE = MergeTree\n+ORDER BY uint64;\n+\n+SELECT '--- Original table';\n+SHOW COLUMNS FROM tab;\n+\n+SELECT '--- Equally named table in other database';\n+SHOW COLUMNS FROM tab FROM database_123456789abcde;\n+\n+SELECT '--- Short form';\n+SHOW COLUMNS FROM database_123456789abcde.tab;\n+\n+DROP DATABASE database_123456789abcde;\n+\n+DROP TABLE tab;\n",
  "problem_statement": "MySQL compatibility: add support for SHOW COLUMNS, SHOW FULL TABLES\n**Use case**\r\n\r\nClickHouse with [Looker](https://cloud.google.com/looker) via MySQL protocol.\r\n\r\n**Describe the solution you'd like**\r\n\r\nWhen Looker scans a table \r\n\r\n> SHOW FULL COLUMNS FROM `hits_v1` FROM `datasets` LIKE '%'\r\n\r\nthe operation fails with \r\n>  <Error> executeQuery: Code: 62. DB::Exception: Syntax error: failed at position 11 ('COLUMNS'): COLUMNS FROM `hits_v1` FROM `datasets` LIKE '%'. Expected one of: DATABASES, CLUSTERS, \r\n\r\nThe scan table operation must succeed.\r\n\r\n**Additional context**\r\nhttps://github.com/ClickHouse/ClickHouse/issues/9336#issuecomment-1001090069 \r\nreports `SHOW FULL TABLES FROM .*` failed as well. I confirm the problem exists in `2023.1` release. Maybe we can fix both incompatibility problems. \r\n\r\ncc @alexey-milovidov \n",
  "hints_text": "Reference: https://dev.mysql.com/doc/refman/8.0/en/show-columns.html\nField - field name\r\nType - the type name adapted for MySQL compatibility\r\nNull - String, YES or NO\r\nKey - String, MUL for the columns included in the primary key expression, otherwise empty String\r\nDefault - full default expression\r\nExtra - empty string\r\nPrivileges - String, `Select`\r\nCollation - Nullable(String), always NULL\r\nComment - column's comment\nHi, @mshustov @alexey-milovidov , I am new here and am very interested in clickhouse. I want to try to complete this task. Could you please assign me? I will try my best to do it!\n@Yukang-Lian Thank you! This will be very helpful!\n@Yukang-Lian do you need any help with the issue? \n> @Yukang-Lian do you need any help with the issue?\r\n\r\nHi, @mshustov, thanks for your concern. Sorry for not updating the status in time. I just implemented a feature for Apache Doris some time ago. Recently, I have free time. I will complete this issue as soon as possible. If there is any problem, I will ask for your advice. Thanks a lot!",
  "created_at": "2023-03-26T15:04:53Z",
  "modified_files": [
    "docs/en/sql-reference/statements/show.md",
    "src/Interpreters/InterpreterFactory.cpp",
    "b/src/Interpreters/InterpreterShowColumnsQuery.cpp",
    "b/src/Interpreters/InterpreterShowColumnsQuery.h",
    "src/Interpreters/InterpreterShowTablesQuery.cpp",
    "src/Interpreters/InterpreterShowTablesQuery.h",
    "src/Parsers/ASTIdentifier_fwd.h",
    "b/src/Parsers/ASTShowColumnsQuery.cpp",
    "b/src/Parsers/ASTShowColumnsQuery.h",
    "src/Parsers/ASTShowTablesQuery.h",
    "src/Parsers/ParserQueryWithOutput.cpp",
    "b/src/Parsers/ParserShowColumnsQuery.cpp",
    "b/src/Parsers/ParserShowColumnsQuery.h",
    "src/Parsers/ParserShowTablesQuery.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/25402_show_columns.reference",
    "b/tests/queries/0_stateless/25402_show_columns.sql"
  ]
}