{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 19339,
  "instance_id": "ClickHouse__ClickHouse-19339",
  "issue_numbers": [
    "19184"
  ],
  "base_commit": "af4afff723e956c51add81712a9689b36f0dccd4",
  "patch": "diff --git a/src/DataTypes/DataTypeNumberBase.h b/src/DataTypes/DataTypeNumberBase.h\nindex 0390da2cb6f1..cbbc203bf4f1 100644\n--- a/src/DataTypes/DataTypeNumberBase.h\n+++ b/src/DataTypes/DataTypeNumberBase.h\n@@ -51,7 +51,13 @@ class DataTypeNumberBase : public DataTypeWithSimpleSerialization\n \n     bool isParametric() const override { return false; }\n     bool haveSubtypes() const override { return false; }\n-    bool shouldAlignRightInPrettyFormats() const override { return true; }\n+\n+    bool shouldAlignRightInPrettyFormats() const override\n+    {\n+        /// Just a number, without customizations. Counterexample: IPv4.\n+        return !custom_text_serialization;\n+    }\n+\n     bool textCanContainOnlyValidUTF8() const override { return true; }\n     bool isComparable() const override { return true; }\n     bool isValueRepresentedByNumber() const override { return true; }\ndiff --git a/src/DataTypes/IDataType.h b/src/DataTypes/IDataType.h\nindex b67c5ee18462..cb9fc7f122c3 100644\n--- a/src/DataTypes/IDataType.h\n+++ b/src/DataTypes/IDataType.h\n@@ -497,7 +497,7 @@ class IDataType : private boost::noncopyable\n     /// For all other substreams (like ArraySizes, NullMasks, etc.) we use only\n     /// generic compression codecs like LZ4.\n     static bool isSpecialCompressionAllowed(const SubstreamPath & path);\n-private:\n+protected:\n     friend class DataTypeFactory;\n     friend class AggregateFunctionSimpleState;\n     /// Customize this DataType\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01656_ipv4_bad_formatting.reference b/tests/queries/0_stateless/01656_ipv4_bad_formatting.reference\nnew file mode 100644\nindex 000000000000..a7b5c448f132\n--- /dev/null\n+++ b/tests/queries/0_stateless/01656_ipv4_bad_formatting.reference\n@@ -0,0 +1,4 @@\n+\u250c\u2500x\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500y\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500z\u2500\u2510\n+\u2502 1.1.1.1         \u2502 1.1.1.1         \u2502   16843009 \u2502\n+\u2502 255.255.255.255 \u2502 255.255.255.255 \u2502 4294967295 \u2502\n+\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\ndiff --git a/tests/queries/0_stateless/01656_ipv4_bad_formatting.sql b/tests/queries/0_stateless/01656_ipv4_bad_formatting.sql\nnew file mode 100644\nindex 000000000000..a0b253ea31ae\n--- /dev/null\n+++ b/tests/queries/0_stateless/01656_ipv4_bad_formatting.sql\n@@ -0,0 +1,1 @@\n+SELECT arrayJoin(['1.1.1.1', '255.255.255.255']) AS x, toIPv4(x) AS y, toUInt32(y) AS z FORMAT PrettyCompactNoEscapes;\n",
  "problem_statement": "Misleading indentation of IPv4 addresses in Pretty formats\n**Describe the issue**\r\n\r\n```\r\nSELECT\r\n    extract(log, '\\\\*   Trying ([0-9a-z\\\\.\\\\:\\\\[\\\\]]+):\\\\d+\\\\.\\\\.\\\\.') AS resolved_address,\r\n    toIPv4(resolved_address) AS ipv4\r\nFROM minicrawl\r\nLIMIT 10\r\n\r\n\u250c\u2500resolved_address\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500ipv4\u2500\u2510\r\n\u2502 89.46.106.77     \u2502   89.46.106.77 \u2502\r\n\u2502 13.33.243.83     \u2502   13.33.243.83 \u2502\r\n\u2502 93.95.100.90     \u2502   93.95.100.90 \u2502\r\n\u2502 23.227.38.32     \u2502   23.227.38.32 \u2502\r\n\u2502 203.113.174.46   \u2502 203.113.174.46 \u2502\r\n\u2502 13.70.20.161     \u2502   13.70.20.161 \u2502\r\n\u2502 60.199.172.227   \u2502 60.199.172.227 \u2502\r\n\u2502                  \u2502        0.0.0.0 \u2502\r\n\u2502                  \u2502        0.0.0.0 \u2502\r\n\u2502 82.149.228.245   \u2502 82.149.228.245 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n",
  "hints_text": "Bug was introduced here: #3669\nAnother bugs:\r\n\r\n```\r\nSELECT toIPv4('::ffff:1.2.3.4')\r\n\r\n\u250c\u2500toIPv4('::ffff:1.2.3.4')\u2500\u2510\r\n\u2502                  0.0.0.0 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nCC @Enmk \nipv4 should display with left align \n@l1t1 Exactly.",
  "created_at": "2021-01-21T00:26:04Z",
  "modified_files": [
    "src/DataTypes/DataTypeNumberBase.h",
    "src/DataTypes/IDataType.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01656_ipv4_bad_formatting.reference",
    "b/tests/queries/0_stateless/01656_ipv4_bad_formatting.sql"
  ]
}