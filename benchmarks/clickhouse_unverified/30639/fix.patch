diff --git a/src/Functions/now.cpp b/src/Functions/now.cpp
index b244d054cfe5..653a39b38d0d 100644
--- a/src/Functions/now.cpp
+++ b/src/Functions/now.cpp
@@ -43,13 +43,13 @@ class ExecutableFunctionNow : public IExecutableFunction
 class FunctionBaseNow : public IFunctionBase
 {
 public:
-    explicit FunctionBaseNow(time_t time_, DataTypePtr return_type_) : time_value(time_), return_type(return_type_) {}
+    explicit FunctionBaseNow(time_t time_, DataTypes argument_types_, DataTypePtr return_type_)
+        : time_value(time_), argument_types(std::move(argument_types_)), return_type(std::move(return_type_)) {}
 
     String getName() const override { return "now"; }
 
     const DataTypes & getArgumentTypes() const override
     {
-        static const DataTypes argument_types;
         return argument_types;
     }
 
@@ -69,6 +69,7 @@ class FunctionBaseNow : public IFunctionBase
 
 private:
     time_t time_value;
+    DataTypes argument_types;
     DataTypePtr return_type;
 };
 
@@ -117,8 +118,10 @@ class NowOverloadResolver : public IFunctionOverloadResolver
         }
         if (arguments.size() == 1)
             return std::make_unique<FunctionBaseNow>(
-                time(nullptr), std::make_shared<DataTypeDateTime>(extractTimeZoneNameFromFunctionArguments(arguments, 0, 0)));
-        return std::make_unique<FunctionBaseNow>(time(nullptr), std::make_shared<DataTypeDateTime>());
+                time(nullptr), DataTypes{arguments.front().type},
+                std::make_shared<DataTypeDateTime>(extractTimeZoneNameFromFunctionArguments(arguments, 0, 0)));
+
+        return std::make_unique<FunctionBaseNow>(time(nullptr), DataTypes(), std::make_shared<DataTypeDateTime>());
     }
 };
 
diff --git a/src/Functions/now64.cpp b/src/Functions/now64.cpp
index 4a3f4dbfb221..bd1038b1fc6e 100644
--- a/src/Functions/now64.cpp
+++ b/src/Functions/now64.cpp
@@ -67,13 +67,13 @@ class ExecutableFunctionNow64 : public IExecutableFunction
 class FunctionBaseNow64 : public IFunctionBase
 {
 public:
-    explicit FunctionBaseNow64(Field time_, DataTypePtr return_type_) : time_value(time_), return_type(return_type_) {}
+    explicit FunctionBaseNow64(Field time_, DataTypes argument_types_, DataTypePtr return_type_)
+        : time_value(time_), argument_types(std::move(argument_types_)), return_type(std::move(return_type_)) {}
 
     String getName() const override { return "now64"; }
 
     const DataTypes & getArgumentTypes() const override
     {
-        static const DataTypes argument_types;
         return argument_types;
     }
 
@@ -93,6 +93,7 @@ class FunctionBaseNow64 : public IFunctionBase
 
 private:
     Field time_value;
+    DataTypes argument_types;
     DataTypePtr return_type;
 };
 
@@ -139,14 +140,19 @@ class Now64OverloadResolver : public IFunctionOverloadResolver
         return std::make_shared<DataTypeDateTime64>(scale, timezone_name);
     }
 
-    FunctionBasePtr buildImpl(const ColumnsWithTypeAndName &, const DataTypePtr & result_type) const override
+    FunctionBasePtr buildImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr & result_type) const override
     {
         UInt32 scale = DataTypeDateTime64::default_scale;
         auto res_type = removeNullable(result_type);
         if (const auto * type = typeid_cast<const DataTypeDateTime64 *>(res_type.get()))
             scale = type->getScale();
 
-        return std::make_unique<FunctionBaseNow64>(nowSubsecond(scale), result_type);
+        DataTypes arg_types;
+        arg_types.reserve(arguments.size());
+        for (const auto & arg : arguments)
+            arg_types.push_back(arg.type);
+
+        return std::make_unique<FunctionBaseNow64>(nowSubsecond(scale), std::move(arg_types), std::move(result_type));
     }
 };
 
