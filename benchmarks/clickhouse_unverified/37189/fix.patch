diff --git a/src/Functions/h3kRing.cpp b/src/Functions/h3kRing.cpp
index a801fd299d65..a68f2a5e23d8 100644
--- a/src/Functions/h3kRing.cpp
+++ b/src/Functions/h3kRing.cpp
@@ -11,6 +11,7 @@
 #include <Functions/FunctionFactory.h>
 #include <Functions/IFunction.h>
 #include <Common/typeid_cast.h>
+#include <Interpreters/castColumn.h>
 
 #include <h3api.h>
 
@@ -51,10 +52,10 @@ class FunctionH3KRing : public IFunction
                 arg->getName(), 1, getName());
 
         arg = arguments[1].get();
-        if (!WhichDataType(arg).isUInt16())
+        if (!WhichDataType(arg).isNativeUInt())
             throw Exception(
                 ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT,
-                "Illegal type {} of argument {} of function {}. Must be UInt16",
+                "Illegal type {} of argument {} of function {}. Must be unsigned native integer.",
                 arg->getName(),
                 2,
                 getName());
@@ -80,7 +81,8 @@ class FunctionH3KRing : public IFunction
         const auto & data_hindex = col_hindex->getData();
 
         /// ColumnUInt16 is sufficient as the max value of 2nd arg is checked (arg > 0 < 10000) in implementation below
-        const auto * col_k = checkAndGetColumn<ColumnUInt16>(non_const_arguments[1].column.get());
+        auto cast_result = castColumnAccurate(non_const_arguments[1], std::make_shared<DataTypeUInt16>());
+        const auto * col_k = checkAndGetColumn<ColumnUInt16>(cast_result.get());
         if (!col_k)
             throw Exception(
                 ErrorCodes::ILLEGAL_COLUMN,
