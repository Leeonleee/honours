diff --git a/src/Databases/DatabaseDictionary.cpp b/src/Databases/DatabaseDictionary.cpp
index 6c5433cab38a..986e36de8cf6 100644
--- a/src/Databases/DatabaseDictionary.cpp
+++ b/src/Databases/DatabaseDictionary.cpp
@@ -28,7 +28,11 @@ namespace
             if (!load_result.config)
                 return nullptr;
             DictionaryStructure dictionary_structure = ExternalDictionariesLoader::getDictionaryStructure(*load_result.config);
-            return StorageDictionary::create(StorageID(database_name, load_result.name), load_result.name, dictionary_structure);
+            return StorageDictionary::create(
+                StorageID(database_name, load_result.name),
+                load_result.name,
+                dictionary_structure,
+                StorageDictionary::Location::DictionaryDatabase);
         }
         catch (Exception & e)
         {
diff --git a/src/Databases/DatabaseWithDictionaries.cpp b/src/Databases/DatabaseWithDictionaries.cpp
index e0f2aa9286b2..9be7e4d8b3e1 100644
--- a/src/Databases/DatabaseWithDictionaries.cpp
+++ b/src/Databases/DatabaseWithDictionaries.cpp
@@ -49,7 +49,8 @@ void DatabaseWithDictionaries::attachDictionary(const String & dictionary_name,
                 StorageDictionary::create(
                     StorageID(getDatabaseName(), dictionary_name),
                     full_name,
-                    ExternalDictionariesLoader::getDictionaryStructure(*attach_info.config)),
+                    ExternalDictionariesLoader::getDictionaryStructure(*attach_info.config),
+                    StorageDictionary::Location::SameDatabaseAndNameAsDictionary),
                 lock);
         }
         catch (...)
diff --git a/src/Storages/StorageDictionary.cpp b/src/Storages/StorageDictionary.cpp
index 83a093d56357..4ea028c7ca8d 100644
--- a/src/Storages/StorageDictionary.cpp
+++ b/src/Storages/StorageDictionary.cpp
@@ -96,19 +96,31 @@ String StorageDictionary::generateNamesAndTypesDescription(const NamesAndTypesLi
 StorageDictionary::StorageDictionary(
     const StorageID & table_id_,
     const String & dictionary_name_,
-    const DictionaryStructure & dictionary_structure_)
+    const ColumnsDescription & columns_,
+    Location location_)
     : IStorage(table_id_)
     , dictionary_name(dictionary_name_)
+    , location(location_)
 {
     StorageInMemoryMetadata storage_metadata;
-    storage_metadata.setColumns(ColumnsDescription{getNamesAndTypes(dictionary_structure_)});
+    storage_metadata.setColumns(columns_);
     setInMemoryMetadata(storage_metadata);
 }
 
 
+StorageDictionary::StorageDictionary(
+    const StorageID & table_id_, const String & dictionary_name_, const DictionaryStructure & dictionary_structure_, Location location_)
+    : StorageDictionary(table_id_, dictionary_name_, ColumnsDescription{getNamesAndTypes(dictionary_structure_)}, location_)
+{
+}
+
+
 void StorageDictionary::checkTableCanBeDropped() const
 {
-    throw Exception("Cannot detach dictionary " + backQuote(dictionary_name) + " as table, use DETACH DICTIONARY query.", ErrorCodes::CANNOT_DETACH_DICTIONARY_AS_TABLE);
+    if (location == Location::SameDatabaseAndNameAsDictionary)
+        throw Exception("Cannot detach dictionary " + backQuote(dictionary_name) + " as table, use DETACH DICTIONARY query", ErrorCodes::CANNOT_DETACH_DICTIONARY_AS_TABLE);
+    if (location == Location::DictionaryDatabase)
+        throw Exception("Cannot detach table " + getStorageID().getFullTableName() + " from a database with DICTIONARY engine", ErrorCodes::CANNOT_DETACH_DICTIONARY_AS_TABLE);
 }
 
 Pipes StorageDictionary::read(
@@ -141,11 +153,14 @@ void registerStorageDictionary(StorageFactory & factory)
         args.engine_args[0] = evaluateConstantExpressionOrIdentifierAsLiteral(args.engine_args[0], args.local_context);
         String dictionary_name = args.engine_args[0]->as<ASTLiteral &>().value.safeGet<String>();
 
-        const auto & dictionary = args.context.getExternalDictionariesLoader().getDictionary(dictionary_name);
-        const DictionaryStructure & dictionary_structure = dictionary->getStructure();
-        checkNamesAndTypesCompatibleWithDictionary(dictionary_name, args.columns, dictionary_structure);
+        if (!args.attach)
+        {
+            const auto & dictionary = args.context.getExternalDictionariesLoader().getDictionary(dictionary_name);
+            const DictionaryStructure & dictionary_structure = dictionary->getStructure();
+            checkNamesAndTypesCompatibleWithDictionary(dictionary_name, args.columns, dictionary_structure);
+        }
 
-        return StorageDictionary::create(args.table_id, dictionary_name, dictionary_structure);
+        return StorageDictionary::create(args.table_id, dictionary_name, args.columns, StorageDictionary::Location::Custom);
     });
 }
 
diff --git a/src/Storages/StorageDictionary.h b/src/Storages/StorageDictionary.h
index 6175902381b8..f152f8c9932d 100644
--- a/src/Storages/StorageDictionary.h
+++ b/src/Storages/StorageDictionary.h
@@ -30,14 +30,40 @@ class StorageDictionary final : public ext::shared_ptr_helper<StorageDictionary>
 
     const String & dictionaryName() const { return dictionary_name; }
 
+    /// Specifies where the table is located relative to the dictionary.
+    enum class Location
+    {
+        /// Table was created automatically as an element of a database with the Dictionary engine.
+        DictionaryDatabase,
+
+        /// Table was created automatically along with a dictionary
+        /// and has the same database and name as the dictionary.
+        /// It provides table-like access to the dictionary.
+        /// User cannot drop that table.
+        SameDatabaseAndNameAsDictionary,
+
+        /// Table was created explicitly by a statement like
+        /// CREATE TABLE ... ENGINE=Dictionary
+        /// User chose the table's database and name and can drop that table.
+        Custom,
+    };
+
 private:
-    String dictionary_name;
+    const String dictionary_name;
+    const Location location;
 
 protected:
     StorageDictionary(
         const StorageID & table_id_,
         const String & dictionary_name_,
-        const DictionaryStructure & dictionary_structure);
+        const ColumnsDescription & columns_,
+        Location location_);
+
+    StorageDictionary(
+        const StorageID & table_id_,
+        const String & dictionary_name_,
+        const DictionaryStructure & dictionary_structure,
+        Location location_);
 };
 
 }
