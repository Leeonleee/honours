{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12378,
  "instance_id": "ClickHouse__ClickHouse-12378",
  "issue_numbers": [
    "12333"
  ],
  "base_commit": "c16d8e094b1de33b9ac11d34499f3d0bae647c85",
  "patch": "diff --git a/src/Storages/AlterCommands.cpp b/src/Storages/AlterCommands.cpp\nindex fc72effca9a3..1d3ccb3f0ae7 100644\n--- a/src/Storages/AlterCommands.cpp\n+++ b/src/Storages/AlterCommands.cpp\n@@ -844,20 +844,24 @@ void AlterCommands::validate(const StorageInMemoryMetadata & metadata, const Con\n         {\n             if (all_columns.has(command.column_name) || all_columns.hasNested(command.column_name))\n             {\n-                for (const ColumnDescription & column : all_columns)\n+                if (!command.clear) /// CLEAR column is Ok even if there are dependencies.\n                 {\n-                    const auto & default_expression = column.default_desc.expression;\n-                    if (default_expression)\n+                    /// Check if we are going to DROP a column that some other columns depend on.\n+                    for (const ColumnDescription & column : all_columns)\n                     {\n-                        ASTPtr query = default_expression->clone();\n-                        auto syntax_result = SyntaxAnalyzer(context).analyze(query, all_columns.getAll());\n-                        const auto actions = ExpressionAnalyzer(query, syntax_result, context).getActions(true);\n-                        const auto required_columns = actions->getRequiredColumns();\n-\n-                        if (required_columns.end() != std::find(required_columns.begin(), required_columns.end(), command.column_name))\n-                            throw Exception(\n-                                \"Cannot drop column \" + backQuote(command.column_name) + \", because column \" + backQuote(column.name) + \" depends on it\",\n-                                ErrorCodes::ILLEGAL_COLUMN);\n+                        const auto & default_expression = column.default_desc.expression;\n+                        if (default_expression)\n+                        {\n+                            ASTPtr query = default_expression->clone();\n+                            auto syntax_result = SyntaxAnalyzer(context).analyze(query, all_columns.getAll());\n+                            const auto actions = ExpressionAnalyzer(query, syntax_result, context).getActions(true);\n+                            const auto required_columns = actions->getRequiredColumns();\n+\n+                            if (required_columns.end() != std::find(required_columns.begin(), required_columns.end(), command.column_name))\n+                                throw Exception(\"Cannot drop column \" + backQuote(command.column_name)\n+                                        + \", because column \" + backQuote(column.name) + \" depends on it\",\n+                                    ErrorCodes::ILLEGAL_COLUMN);\n+                        }\n                     }\n                 }\n                 all_columns.remove(command.column_name);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01387_clear_column_default_depends.reference b/tests/queries/0_stateless/01387_clear_column_default_depends.reference\nnew file mode 100644\nindex 000000000000..308a6ca52fbb\n--- /dev/null\n+++ b/tests/queries/0_stateless/01387_clear_column_default_depends.reference\n@@ -0,0 +1,18 @@\n+1\t2\n+2\t3\n+3\t4\n+0\t2\n+0\t3\n+0\t4\n+1\t2\n+2\t3\n+3\t4\n+0\t2\n+0\t3\n+0\t4\n+1\t2\n+2\t3\n+3\t4\n+0\t1\n+0\t1\n+0\t1\ndiff --git a/tests/queries/0_stateless/01387_clear_column_default_depends.sql b/tests/queries/0_stateless/01387_clear_column_default_depends.sql\nnew file mode 100644\nindex 000000000000..21a41f09df6c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01387_clear_column_default_depends.sql\n@@ -0,0 +1,36 @@\n+-- It's Ok to CLEAR column when there are columns with default expression depending on it.\n+-- But it's not Ok to DROP such column.\n+\n+DROP TABLE IF EXISTS test;\n+CREATE TABLE test (x UInt8, y UInt8 DEFAULT x + 1) ENGINE = MergeTree ORDER BY tuple();\n+INSERT INTO test (x) VALUES (1), (2), (3);\n+SELECT * FROM test ORDER BY x, y;\n+ALTER TABLE test CLEAR COLUMN x;\n+SELECT * FROM test ORDER BY x, y;\n+ALTER TABLE test DROP COLUMN x; -- { serverError 44 }\n+DROP TABLE test;\n+\n+DROP TABLE IF EXISTS test;\n+CREATE TABLE test (x UInt8, y UInt8 MATERIALIZED x + 1) ENGINE = MergeTree ORDER BY tuple();\n+INSERT INTO test (x) VALUES (1), (2), (3);\n+SELECT x, y FROM test ORDER BY x, y;\n+ALTER TABLE test CLEAR COLUMN x;\n+SELECT x, y FROM test ORDER BY x, y;\n+ALTER TABLE test DROP COLUMN x; -- { serverError 44 }\n+DROP TABLE test;\n+\n+DROP TABLE IF EXISTS test;\n+CREATE TABLE test (x UInt8, y UInt8 ALIAS x + 1, z String DEFAULT 'Hello') ENGINE = MergeTree ORDER BY tuple();\n+INSERT INTO test (x) VALUES (1), (2), (3);\n+SELECT x, y FROM test ORDER BY x, y;\n+ALTER TABLE test CLEAR COLUMN x;\n+SELECT x, y FROM test ORDER BY x, y;\n+ALTER TABLE test DROP COLUMN x; -- { serverError 44 }\n+DROP TABLE test;\n+\n+\n+-- The original report from Mikhail Petrov\n+DROP TABLE IF EXISTS Test;\n+create table Test (impression_id String,impression_id_compressed FixedString(16) DEFAULT UUIDStringToNum(substring(impression_id, 1, 36)), impression_id_hashed UInt16 DEFAULT reinterpretAsUInt16(impression_id_compressed), event_date Date ) ENGINE = MergeTree(event_date, impression_id_hashed, (event_date, impression_id_hashed), 8192);\n+alter table Test clear column impression_id in partition '202001';\n+DROP TABLE Test;\n",
  "problem_statement": "Clear column in partition failed for columns used in other's defaults\nNewer versions can't clear columns which are used in default expressions for other columns. Maybe it's caused by https://github.com/ClickHouse/ClickHouse/issues/6913\r\n\r\nCH version 20.5.2\r\n\r\n\r\ncreate database Temp;\r\ncreate table Temp.Test (`impression_id` String,`impression_id_compressed` FixedString(16) DEFAULT UUIDStringToNum(substring(impression_id, 1, 36)), `impression_id_hashed` UInt16 DEFAULT reinterpretAsUInt16(impression_id_compressed), `event_date` Date ) ENGINE = MergeTree(event_date, impression_id_hashed, (event_date, impression_id_hashed), 8192);\r\nalter table Temp.Test clear column `impression_id` in partition '202001';\r\n\r\n\r\nReceived exception from server (version 20.5.2):\r\nCode: 44. DB::Exception: Received from ch7r1.local:9000. DB::Exception: Cannot drop column `impression_id`, because column `impression_id_compressed` depends on it. \r\n\r\n\r\n\r\n\r\nOlder versions (tested with 19.17.4 and 20.3.5):\r\n\r\nCREATE DATABASE Temp;\r\ncreate table Temp.Test (`impression_id` String,`impression_id_compressed` FixedString(16) DEFAULT UUIDStringToNum(substring(impression_id, 1, 36)), `impression_id_hashed` UInt16 DEFAULT reinterpretAsUInt16(impression_id_compressed), `event_date` Date ) ENGINE = MergeTree(event_date, impression_id_hashed, (event_date, impression_id_hashed), 8192);\r\nalter table Temp.Test clear column `impression_id` in partition '202001';\r\n\r\nALTER TABLE Temp.Test\r\n    CLEAR COLUMN impression_id     IN PARTITION '202001'\r\n\r\n\r\nOk.\r\n\n",
  "hints_text": "Accepted. Clear column is not like drop column, we should not argue.",
  "created_at": "2020-07-10T05:55:32Z",
  "modified_files": [
    "src/Storages/AlterCommands.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01387_clear_column_default_depends.reference",
    "b/tests/queries/0_stateless/01387_clear_column_default_depends.sql"
  ]
}