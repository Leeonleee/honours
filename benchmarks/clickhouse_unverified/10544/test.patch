diff --git a/src/Common/tests/CMakeLists.txt b/src/Common/tests/CMakeLists.txt
index 2ddbee43f5f2..44d43ada3009 100644
--- a/src/Common/tests/CMakeLists.txt
+++ b/src/Common/tests/CMakeLists.txt
@@ -71,3 +71,6 @@ target_link_libraries (chaos_sanitizer PRIVATE clickhouse_common_io)
 
 add_executable (memory_statistics_os_perf memory_statistics_os_perf.cpp)
 target_link_libraries (memory_statistics_os_perf PRIVATE clickhouse_common_io)
+
+add_executable (procfs_metrics_provider_perf procfs_metrics_provider_perf.cpp)
+target_link_libraries (procfs_metrics_provider_perf PRIVATE clickhouse_common_io)
diff --git a/src/Common/tests/procfs_metrics_provider_perf.cpp b/src/Common/tests/procfs_metrics_provider_perf.cpp
new file mode 100644
index 000000000000..022da09b779f
--- /dev/null
+++ b/src/Common/tests/procfs_metrics_provider_perf.cpp
@@ -0,0 +1,41 @@
+#if defined(__linux__)
+#include <Common/ProcfsMetricsProvider.h>
+
+#include <iostream>
+#include <linux/taskstats.h>
+#endif
+
+
+#if defined(__linux__)
+int main(int argc, char ** argv)
+{
+    using namespace DB;
+
+    size_t num_iterations = argc >= 2 ? std::stoull(argv[1]) : 1000000;
+
+    if (!ProcfsMetricsProvider::isAvailable())
+    {
+        std::cerr << "Procfs statistics is not available on this system" << std::endl;
+        return -1;
+    }
+
+    ProcfsMetricsProvider stats_provider(0);
+
+    ::taskstats stats;
+    stats_provider.getTaskStats(stats);
+
+    const auto start_cpu_time = stats.cpu_run_virtual_total;
+    for (size_t i = 0; i < num_iterations; ++i)
+    {
+        stats_provider.getTaskStats(stats);
+    }
+
+    if (num_iterations)
+        std::cerr << stats.cpu_run_virtual_total - start_cpu_time << '
';
+    return 0;
+}
+#else
+int main()
+{
+}
+#endif
diff --git a/tests/queries/0_stateless/01268_procfs_metrics.reference b/tests/queries/0_stateless/01268_procfs_metrics.reference
new file mode 100644
index 000000000000..e9ec4d01307c
--- /dev/null
+++ b/tests/queries/0_stateless/01268_procfs_metrics.reference
@@ -0,0 +1,2 @@
+1
+Test OK
diff --git a/tests/queries/0_stateless/01268_procfs_metrics.sh b/tests/queries/0_stateless/01268_procfs_metrics.sh
new file mode 100755
index 000000000000..e258f7faafac
--- /dev/null
+++ b/tests/queries/0_stateless/01268_procfs_metrics.sh
@@ -0,0 +1,41 @@
+#!/usr/bin/env bash
+
+# Sandbox does not provide CAP_NET_ADMIN capability but does have ProcFS mounted at /proc
+# This ensures that OS metrics can be collected
+
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+. $CURDIR/../shell_config.sh
+
+function read_numbers_func()
+{
+    $CLICKHOUSE_CLIENT -q "
+        SELECT * FROM numbers(600000000) FORMAT Null SETTINGS max_threads = 1
+    ";
+}
+
+
+function show_processes_func()
+{
+    sleep 0.1;
+    
+    # These two system metrics for the generating query above are guaranteed to be nonzero when ProcFS is mounted at /proc
+    $CLICKHOUSE_CLIENT -q "
+        SELECT count() > 0 FROM system.processes\
+        WHERE has(ProfileEvents.Names, 'OSCPUVirtualTimeMicroseconds') AND has(ProfileEvents.Names, 'OSReadChars')\
+        SETTINGS max_threads = 1
+    ";
+}
+
+
+export -f read_numbers_func;
+export -f show_processes_func;
+
+TIMEOUT=3
+
+timeout $TIMEOUT bash -c read_numbers_func &
+timeout $TIMEOUT bash -c show_processes_func &
+
+wait
+
+echo "Test OK"
