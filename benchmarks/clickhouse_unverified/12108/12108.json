{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12108,
  "instance_id": "ClickHouse__ClickHouse-12108",
  "issue_numbers": [
    "12086"
  ],
  "base_commit": "b3ec449e352c3f74e4491d86ee233936d464a8ed",
  "patch": "diff --git a/src/Processors/Formats/Impl/ArrowColumnToCHColumn.cpp b/src/Processors/Formats/Impl/ArrowColumnToCHColumn.cpp\nindex a8aac2d51ee3..a998378125ff 100644\n--- a/src/Processors/Formats/Impl/ArrowColumnToCHColumn.cpp\n+++ b/src/Processors/Formats/Impl/ArrowColumnToCHColumn.cpp\n@@ -14,6 +14,7 @@\n #include <Columns/ColumnNullable.h>\n #include <Interpreters/castColumn.h>\n #include <algorithm>\n+#include <DataTypes/DataTypeLowCardinality.h>\n \n \n namespace DB\n@@ -263,6 +264,7 @@ namespace DB\n         for (size_t column_i = 0, columns = header.columns(); column_i < columns; ++column_i)\n         {\n             ColumnWithTypeAndName header_column = header.getByPosition(column_i);\n+            const auto column_type = recursiveRemoveLowCardinality(header_column.type);\n \n             if (name_to_column_ptr.find(header_column.name) == name_to_column_ptr.end())\n                 // TODO: What if some columns were not presented? Insert NULLs? What if a column is not nullable?\n@@ -273,13 +275,13 @@ namespace DB\n             arrow::Type::type arrow_type = arrow_column->type()->id();\n \n             // TODO: check if a column is const?\n-            if (!header_column.type->isNullable() && arrow_column->null_count())\n+            if (!column_type->isNullable() && arrow_column->null_count())\n             {\n                 throw Exception{\"Can not insert NULL data into non-nullable column \\\"\" + header_column.name + \"\\\"\",\n                                 ErrorCodes::CANNOT_INSERT_NULL_IN_ORDINARY_COLUMN};\n             }\n \n-            const bool target_column_is_nullable = header_column.type->isNullable() || arrow_column->null_count();\n+            const bool target_column_is_nullable = column_type->isNullable() || arrow_column->null_count();\n \n             DataTypePtr internal_nested_type;\n \n@@ -304,15 +306,6 @@ namespace DB\n \n             const DataTypePtr internal_type = target_column_is_nullable ? makeNullable(internal_nested_type)\n                                                                         : internal_nested_type;\n-            const std::string internal_nested_type_name = internal_nested_type->getName();\n-\n-            const DataTypePtr column_nested_type = header_column.type->isNullable()\n-                                                   ? static_cast<const DataTypeNullable *>(header_column.type.get())->getNestedType()\n-                                                   : header_column.type;\n-\n-            const DataTypePtr column_type = header_column.type;\n-\n-            const std::string column_nested_type_name = column_nested_type->getName();\n \n             ColumnWithTypeAndName column;\n             column.name = header_column.name;\n@@ -373,8 +366,8 @@ namespace DB\n             else\n                 column.column = std::move(read_column);\n \n-            column.column = castColumn(column, column_type);\n-            column.type = column_type;\n+            column.column = castColumn(column, header_column.type);\n+            column.type = header_column.type;\n             num_rows = column.column->size();\n             columns_list.push_back(std::move(column.column));\n         }\ndiff --git a/src/Processors/Formats/Impl/CHColumnToArrowColumn.cpp b/src/Processors/Formats/Impl/CHColumnToArrowColumn.cpp\nindex 29268d3894c4..c1fce04f3b2d 100644\n--- a/src/Processors/Formats/Impl/CHColumnToArrowColumn.cpp\n+++ b/src/Processors/Formats/Impl/CHColumnToArrowColumn.cpp\n@@ -12,6 +12,7 @@\n #include <Processors/Formats/IOutputFormat.h>\n #include <arrow/api.h>\n #include <arrow/util/decimal.h>\n+#include <DataTypes/DataTypeLowCardinality.h>\n \n \n namespace DB\n@@ -220,7 +221,8 @@ namespace DB\n         {\n             // TODO: constructed every iteration\n             ColumnWithTypeAndName column = header.safeGetByPosition(column_i);\n-            column.column = chunk.getColumns()[column_i];\n+            column.column = recursiveRemoveLowCardinality(chunk.getColumns()[column_i]);\n+            column.type = recursiveRemoveLowCardinality(column.type);\n \n             const bool is_column_nullable = column.type->isNullable();\n             const auto & column_nested_type\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01358_lc_parquet.reference b/tests/queries/0_stateless/01358_lc_parquet.reference\nnew file mode 100644\nindex 000000000000..450af4cf648f\n--- /dev/null\n+++ b/tests/queries/0_stateless/01358_lc_parquet.reference\n@@ -0,0 +1,3 @@\n+abc\n+ghi\n+\\N\ndiff --git a/tests/queries/0_stateless/01358_lc_parquet.sh b/tests/queries/0_stateless/01358_lc_parquet.sh\nnew file mode 100755\nindex 000000000000..859bb2ebac71\n--- /dev/null\n+++ b/tests/queries/0_stateless/01358_lc_parquet.sh\n@@ -0,0 +1,25 @@\n+#!/usr/bin/env bash\n+\n+CURDIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+. $CURDIR/../shell_config.sh\n+\n+$CLICKHOUSE_CLIENT -q \"drop table if exists test_lc\"\n+$CLICKHOUSE_CLIENT -q \"drop table if exists test\"\n+$CLICKHOUSE_CLIENT -q \"create table test (a String) Engine = MergeTree order by tuple()\"\n+$CLICKHOUSE_CLIENT -q \"create table test_lc (a LowCardinality(String)) Engine = MergeTree order by tuple()\"\n+$CLICKHOUSE_CLIENT -q \"select 'abc' as a format Parquet\" | $CLICKHOUSE_CLIENT -q \"insert into test_lc format Parquet\"\n+$CLICKHOUSE_CLIENT -q \"select a from test_lc format Parquet\" | $CLICKHOUSE_CLIENT -q \"insert into test format Parquet\"\n+$CLICKHOUSE_CLIENT -q \"select a from test order by a\"\n+$CLICKHOUSE_CLIENT -q \"drop table if exists test_lc\"\n+$CLICKHOUSE_CLIENT -q \"drop table if exists test\"\n+\n+$CLICKHOUSE_CLIENT -q \"drop table if exists test_lc\"\n+$CLICKHOUSE_CLIENT -q \"drop table if exists test\"\n+$CLICKHOUSE_CLIENT -q \"create table test (a Nullable(String)) Engine = MergeTree order by tuple()\"\n+$CLICKHOUSE_CLIENT -q \"create table test_lc (a LowCardinality(Nullable(String))) Engine = MergeTree order by tuple()\"\n+$CLICKHOUSE_CLIENT -q \"select 'ghi' as a format Parquet\" | $CLICKHOUSE_CLIENT -q \"insert into test_lc format Parquet\"\n+$CLICKHOUSE_CLIENT -q \"select cast(Null as Nullable(String)) as a format Parquet\" | $CLICKHOUSE_CLIENT -q \"insert into test_lc format Parquet\"\n+$CLICKHOUSE_CLIENT -q \"select a from test_lc format Parquet\" | $CLICKHOUSE_CLIENT -q \"insert into test format Parquet\"\n+$CLICKHOUSE_CLIENT -q \"select a from test order by a\"\n+$CLICKHOUSE_CLIENT -q \"drop table if exists test_lc\"\n+$CLICKHOUSE_CLIENT -q \"drop table if exists test\"\n",
  "problem_statement": "LowCardinality can not be used with Parquet format\n```\r\ncreate table test_lc(a LowCardinality(String)) Engine = MergeTree order by tuple();\r\n\r\ninsert into test_lc values ('abcd');\r\n\r\nselect * from test_lc format Parquet;\r\n\r\nException on client:\r\nCode: 50. DB::Exception: The type \"LowCardinality\" of a column \"a\" is not supported for conversion into a Parquet data format\r\n\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 20.3.12 revision 54433.\r\n```\r\n\r\nShorter version of the test:\r\n```\r\nselect toLowCardinality('abcd') format Parquet;\r\n\r\nException on client:\r\nCode: 50. DB::Exception: The type \"LowCardinality\" of a column \"toLowCardinality('abcd')\" is not supported for conversion into a Parquet data format\r\n\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 20.3.12 revision 54433.\r\n```\r\n\r\n<s>P.S. Insert works ok.</s>\r\n```\r\n# clickhouse-client --query=\"select 'ab' as a format Parquet\" | clickhouse-client --query=\"insert into test_lc format Parquet\"\r\n```\r\n\r\nUPD: not ok with `LowCardinality(Nullable(String))` (see comment). \n",
  "hints_text": "In the opposite direction there is an issue with LowCardinality(Nullable(String)):\r\n\r\nWorks:\r\n```\r\nclickhouse-client -q \"select CAST(NULL, 'Nullable(String)') as a FORMAT Parquet\" | clickhouse-local --structure 'a Nullable(String)' --input-format Parquet -q 'select a from table'\r\n\\N\r\n```\r\n\r\nWith LowCardinality - not:\r\n```\r\n clickhouse-client -q \"select CAST(NULL, 'Nullable(String)') as a FORMAT Parquet\" | clickhouse-local --structure 'a LowCardinality(Nullable(String))' --input-format Parquet -q 'select a from table' --stacktrace\r\nCode: 349, e.displayText() = DB::Exception: Can not insert NULL data into non-nullable column \"a\": While executing File, Stack trace (when copying this message, always include the lines below):\r\n\r\n0. /build/obj-x86_64-linux-gnu/../contrib/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x10c74340 in /usr/lib/debug/usr/bin/clickhouse\r\n1. /build/obj-x86_64-linux-gnu/../src/Common/Exception.cpp:37: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x94bd23d in /usr/lib/debug/usr/bin/clickhouse\r\n2. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/string:2134: DB::ArrowColumnToCHColumn::arrowTableToCHChunk(DB::Chunk&, std::__1::shared_ptr<arrow::Table>&, DB::Block const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) (.cold) @ 0xe4e0be4 in /usr/lib/debug/usr/bin/clickhouse\r\n3. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/string:2134: DB::ParquetBlockInputFormat::generate() @ 0xe5b7d76 in /usr/lib/debug/usr/bin/clickhouse\r\n4. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/vector:1003: DB::ISource::work() @ 0xe480eab in /usr/lib/debug/usr/bin/clickhouse\r\n5. /build/obj-x86_64-linux-gnu/../src/Processors/Formats/InputStreamFromInputFormat.h:49: DB::InputStreamFromInputFormat::readImpl() @ 0xe448fbd in /usr/lib/debug/usr/bin/clickhouse\r\n6. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/vector:1003: DB::IBlockInputStream::read() @ 0xd73f72d in /usr/lib/debug/usr/bin/clickhouse\r\n7. /build/obj-x86_64-linux-gnu/../src/Storages/StorageFile.cpp:316: DB::StorageFileSource::generate() @ 0xdf96f09 in /usr/lib/debug/usr/bin/clickhouse\r\n8. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/vector:1003: DB::ISource::work() @ 0xe480eab in /usr/lib/debug/usr/bin/clickhouse\r\n9. /build/obj-x86_64-linux-gnu/../src/Processors/Sources/SourceWithProgress.cpp:32: DB::SourceWithProgress::work() @ 0xe6c2e97 in /usr/lib/debug/usr/bin/clickhouse\r\n10. /build/obj-x86_64-linux-gnu/../src/Processors/Executors/PipelineExecutor.cpp:167: std::__1::__function::__func<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::'lambda'(), std::__1::allocator<DB::PipelineExecutor::addJob(DB::PipelineExecutor::ExecutionState*)::'lambda'()>, void ()>::operator()() @ 0xe4ae521 in /usr/lib/debug/usr/bin/clickhouse\r\n11. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/exception:180: DB::PipelineExecutor::executeStepImpl(unsigned long, unsigned long, std::__1::atomic<bool>*) (.constprop.0) @ 0xe4b2ca6 in /usr/lib/debug/usr/bin/clickhouse\r\n12. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/vector:461: DB::PipelineExecutor::executeImpl(unsigned long) @ 0xe4b422d in /usr/lib/debug/usr/bin/clickhouse\r\n13. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/vector:1516: DB::PipelineExecutor::execute(unsigned long) @ 0xe4b4c61 in /usr/lib/debug/usr/bin/clickhouse\r\n14. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/memory:4206: DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0xde1db2d in /usr/lib/debug/usr/bin/clickhouse\r\n15. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/functional:1825: DB::LocalServer::processQueries() @ 0x95d158e in /usr/lib/debug/usr/bin/clickhouse\r\n16. /build/obj-x86_64-linux-gnu/../programs/local/LocalServer.cpp:228: DB::LocalServer::main(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x95d5af7 in /usr/lib/debug/usr/bin/clickhouse\r\n17. /build/obj-x86_64-linux-gnu/../contrib/poco/Util/src/Application.cpp:334: Poco::Util::Application::run() @ 0x10ba3397 in /usr/lib/debug/usr/bin/clickhouse\r\n18. /build/obj-x86_64-linux-gnu/../programs/local/LocalServer.cpp:515: mainEntryClickHouseLocal(int, char**) @ 0x95d0192 in /usr/lib/debug/usr/bin/clickhouse\r\n19. /build/obj-x86_64-linux-gnu/../contrib/libcxx/include/vector:461: main @ 0x94b8919 in /usr/lib/debug/usr/bin/clickhouse\r\n20. /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:344: __libc_start_main @ 0x21b97 in /usr/lib/debug/lib/x86_64-linux-gnu/libc-2.27.so\r\n21. _start @ 0x94b802e in /usr/lib/debug/usr/bin/clickhouse\r\n (version 20.5.1.3830 (official build))\r\n```",
  "created_at": "2020-07-03T11:50:56Z",
  "modified_files": [
    "src/Processors/Formats/Impl/ArrowColumnToCHColumn.cpp",
    "src/Processors/Formats/Impl/CHColumnToArrowColumn.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01358_lc_parquet.reference",
    "b/tests/queries/0_stateless/01358_lc_parquet.sh"
  ]
}