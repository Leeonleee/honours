diff --git a/dbms/src/Storages/System/StorageSystemNumbers.cpp b/dbms/src/Storages/System/StorageSystemNumbers.cpp
index dbf5bb547836..f0bd4cfb0ff9 100644
--- a/dbms/src/Storages/System/StorageSystemNumbers.cpp
+++ b/dbms/src/Storages/System/StorageSystemNumbers.cpp
@@ -43,7 +43,7 @@ class NumbersBlockInputStream : public IBlockInputStream
 };
 
 
-StorageSystemNumbers::StorageSystemNumbers(const std::string & name_, bool multithreaded_, size_t limit_, size_t offset_)
+StorageSystemNumbers::StorageSystemNumbers(const std::string & name_, bool multithreaded_, std::optional<size_t> limit_, size_t offset_)
     : name(name_), multithreaded(multithreaded_), limit(limit_), offset(offset_)
 {
     setColumns(ColumnsDescription({{"number", std::make_shared<DataTypeUInt64>()}}));
@@ -60,9 +60,9 @@ BlockInputStreams StorageSystemNumbers::read(
 {
     check(column_names);
 
-    if (limit && limit < max_block_size)
+    if (limit && *limit < max_block_size)
     {
-        max_block_size = std::min(max_block_size, limit);
+        max_block_size = std::min(max_block_size, *limit);
         multithreaded = false;
     }
 
@@ -75,7 +75,7 @@ BlockInputStreams StorageSystemNumbers::read(
         res[i] = std::make_shared<NumbersBlockInputStream>(max_block_size, offset + i * max_block_size, num_streams * max_block_size);
 
         if (limit)  /// This formula is how to split 'limit' elements to 'num_streams' chunks almost uniformly.
-            res[i] = std::make_shared<LimitBlockInputStream>(res[i], limit * (i + 1) / num_streams - limit * i / num_streams, 0);
+            res[i] = std::make_shared<LimitBlockInputStream>(res[i], *limit * (i + 1) / num_streams - *limit * i / num_streams, 0);
     }
 
     return res;
diff --git a/dbms/src/Storages/System/StorageSystemNumbers.h b/dbms/src/Storages/System/StorageSystemNumbers.h
index 926e336e1629..d8465343be61 100644
--- a/dbms/src/Storages/System/StorageSystemNumbers.h
+++ b/dbms/src/Storages/System/StorageSystemNumbers.h
@@ -1,6 +1,7 @@
 #pragma once
 
 #include <ext/shared_ptr_helper.h>
+#include <optional>
 #include <Storages/IStorage.h>
 
 
@@ -36,12 +37,11 @@ class StorageSystemNumbers : public ext::shared_ptr_helper<StorageSystemNumbers>
 private:
     const std::string name;
     bool multithreaded;
-    size_t limit;
+    std::optional<size_t> limit;
     size_t offset;
 
 protected:
-    /// limit: 0 means unlimited.
-    StorageSystemNumbers(const std::string & name_, bool multithreaded_, size_t limit_ = 0, size_t offset_ = 0);
+    StorageSystemNumbers(const std::string & name_, bool multithreaded_, std::optional<size_t> limit_ = std::nullopt, size_t offset_ = 0);
 };
 
 }
