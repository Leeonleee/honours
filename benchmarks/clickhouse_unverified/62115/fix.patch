diff --git a/src/Core/ExternalTable.cpp b/src/Core/ExternalTable.cpp
index e043a2f94921..f8bbd16d0383 100644
--- a/src/Core/ExternalTable.cpp
+++ b/src/Core/ExternalTable.cpp
@@ -81,8 +81,10 @@ void BaseExternalTable::parseStructureFromStructureField(const std::string & arg
     for (auto & child : columns_list_raw->children)
     {
         auto * column = child->as<ASTNameTypePair>();
+        /// We use `formatWithPossiblyHidingSensitiveData` instead of `getColumnNameWithoutAlias` because `column->type` is an ASTFunction.
+        /// `getColumnNameWithoutAlias` will return name of the function with `(arguments)` even if arguments is empty.
         if (column)
-            structure.emplace_back(column->name, column->type->getColumnNameWithoutAlias());
+            structure.emplace_back(column->name, column->type->formatWithPossiblyHidingSensitiveData(0, true, true));
         else
             throw Exception(ErrorCodes::BAD_ARGUMENTS, "Error while parsing table structure: expected column definition, got {}", child->formatForErrorMessage());
     }
@@ -99,7 +101,7 @@ void BaseExternalTable::parseStructureFromTypesField(const std::string & argumen
         throw Exception(ErrorCodes::BAD_ARGUMENTS, "Error while parsing table structure: {}", error);
 
     for (size_t i = 0; i < type_list_raw->children.size(); ++i)
-        structure.emplace_back("_" + toString(i + 1), type_list_raw->children[i]->getColumnNameWithoutAlias());
+        structure.emplace_back("_" + toString(i + 1), type_list_raw->children[i]->formatWithPossiblyHidingSensitiveData(0, true, true));
 }
 
 void BaseExternalTable::initSampleBlock()
