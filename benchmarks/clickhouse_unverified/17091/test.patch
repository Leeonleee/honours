diff --git a/src/Core/tests/mysql_protocol.cpp b/src/Core/tests/mysql_protocol.cpp
index 9dc468912416..98555ddcfe00 100644
--- a/src/Core/tests/mysql_protocol.cpp
+++ b/src/Core/tests/mysql_protocol.cpp
@@ -304,7 +304,8 @@ int main(int argc, char ** argv)
                 "user", boost::program_options::value<std::string>()->default_value("root"), "master user")(
                 "password", boost::program_options::value<std::string>()->required(), "master password")(
                 "gtid", boost::program_options::value<std::string>()->default_value(""), "executed GTID sets")(
-                "db", boost::program_options::value<std::string>()->required(), "replicate do db");
+                "db", boost::program_options::value<std::string>()->required(), "replicate do db")(
+                "binlog_checksum", boost::program_options::value<std::string>()->default_value("CRC32"), "master binlog_checksum");
 
             boost::program_options::variables_map options;
             boost::program_options::store(boost::program_options::parse_command_line(argc, argv, desc), options);
@@ -319,6 +320,7 @@ int main(int argc, char ** argv)
             auto master_password = options.at("password").as<DB::String>();
             auto gtid_sets = options.at("gtid").as<DB::String>();
             auto replicate_db = options.at("db").as<DB::String>();
+            auto binlog_checksum = options.at("binlog_checksum").as<String>();
 
             std::cerr << "Master Host: " << host << ", Port: " << port << ", User: " << master_user << ", Password: " << master_password
                       << ", Replicate DB: " << replicate_db << ", GTID: " << gtid_sets << std::endl;
@@ -328,7 +330,7 @@ int main(int argc, char ** argv)
 
             /// Connect to the master.
             slave.connect();
-            slave.startBinlogDumpGTID(slave_id, replicate_db, gtid_sets);
+            slave.startBinlogDumpGTID(slave_id, replicate_db, gtid_sets, binlog_checksum);
 
             WriteBufferFromOStream cerr(std::cerr);
 
diff --git a/src/IO/tests/gtest_mysql_binlog_event_read_buffer.cpp b/src/IO/tests/gtest_mysql_binlog_event_read_buffer.cpp
index f4d39c73a7c8..536e5a89ca97 100644
--- a/src/IO/tests/gtest_mysql_binlog_event_read_buffer.cpp
+++ b/src/IO/tests/gtest_mysql_binlog_event_read_buffer.cpp
@@ -13,7 +13,7 @@ TEST(MySQLBinlogEventReadBuffer, CheckBoundary)
         std::vector<char> memory_data(index, 0x01);
         ReadBufferFromMemory nested_in(memory_data.data(), index);
 
-        EXPECT_THROW({ MySQLBinlogEventReadBuffer binlog_in(nested_in); }, Exception);
+        EXPECT_THROW({ MySQLBinlogEventReadBuffer binlog_in(nested_in, 4); }, Exception);
     }
 }
 
@@ -23,7 +23,7 @@ TEST(MySQLBinlogEventReadBuffer, NiceBufferSize)
     std::vector<char> memory_data(6, 0x01);
     ReadBufferFromMemory nested_in(memory_data.data(), 6);
 
-    MySQLBinlogEventReadBuffer binlog_in(nested_in);
+    MySQLBinlogEventReadBuffer binlog_in(nested_in, 4);
     binlog_in.readStrict(res, 2);
     ASSERT_EQ(res[0], 0x01);
     ASSERT_EQ(res[1], 0x01);
@@ -46,7 +46,7 @@ TEST(MySQLBinlogEventReadBuffer, BadBufferSizes)
     }
 
     ConcatReadBuffer concat_buffer(nested_buffers);
-    MySQLBinlogEventReadBuffer binlog_in(concat_buffer);
+    MySQLBinlogEventReadBuffer binlog_in(concat_buffer, 4);
     binlog_in.readStrict(res, 4);
 
     for (const auto & res_byte : res)
@@ -71,7 +71,7 @@ TEST(MySQLBinlogEventReadBuffer, NiceAndBadBufferSizes)
     }
 
     ConcatReadBuffer concat_buffer(nested_buffers);
-    MySQLBinlogEventReadBuffer binlog_in(concat_buffer);
+    MySQLBinlogEventReadBuffer binlog_in(concat_buffer, 4);
     binlog_in.readStrict(res, 12);
 
     for (const auto & res_byte : res)
diff --git a/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py b/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py
index 387064dd70af..f0b69c84be9c 100644
--- a/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py
+++ b/tests/integration/test_materialize_mysql_database/materialize_with_ddl.py
@@ -456,6 +456,7 @@ def query_event_with_empty_transaction(clickhouse_node, mysql_node, service_name
     clickhouse_node.query("DROP DATABASE test_database")
     mysql_node.query("DROP DATABASE test_database")
 
+
 def select_without_columns(clickhouse_node, mysql_node, service_name):
     mysql_node.query("DROP DATABASE IF EXISTS db")
     clickhouse_node.query("DROP DATABASE IF EXISTS db")
@@ -489,6 +490,26 @@ def select_without_columns(clickhouse_node, mysql_node, service_name):
     mysql_node.query("DROP DATABASE db")
 
 
+def insert_with_modify_binlog_checksum(clickhouse_node, mysql_node, service_name):
+    mysql_node.query("CREATE DATABASE test_checksum")
+    mysql_node.query("CREATE TABLE test_checksum.t (a INT PRIMARY KEY, b varchar(200))")
+    clickhouse_node.query("CREATE DATABASE test_checksum ENGINE = MaterializeMySQL('{}:3306', 'test_checksum', 'root', 'clickhouse')".format(service_name))
+    check_query(clickhouse_node, "SHOW TABLES FROM test_checksum FORMAT TSV", "t
")
+    mysql_node.query("INSERT INTO test_checksum.t VALUES(1, '1111')")
+    check_query(clickhouse_node, "SELECT * FROM test_checksum.t ORDER BY a FORMAT TSV", "1\t1111
")
+
+    mysql_node.query("SET GLOBAL binlog_checksum=NONE")
+    mysql_node.query("INSERT INTO test_checksum.t VALUES(2, '2222')")
+    check_query(clickhouse_node, "SELECT * FROM test_checksum.t ORDER BY a FORMAT TSV", "1\t1111
2\t2222
")
+
+    mysql_node.query("SET GLOBAL binlog_checksum=CRC32")
+    mysql_node.query("INSERT INTO test_checksum.t VALUES(3, '3333')")
+    check_query(clickhouse_node, "SELECT * FROM test_checksum.t ORDER BY a FORMAT TSV", "1\t1111
2\t2222
3\t3333
")
+
+    clickhouse_node.query("DROP DATABASE test_checksum")
+    mysql_node.query("DROP DATABASE test_checksum")
+
+
 def err_sync_user_privs_with_materialize_mysql_database(clickhouse_node, mysql_node, service_name):
     clickhouse_node.query("DROP DATABASE IF EXISTS priv_err_db")
     mysql_node.query("DROP DATABASE IF EXISTS priv_err_db")
diff --git a/tests/integration/test_materialize_mysql_database/test.py b/tests/integration/test_materialize_mysql_database/test.py
index 3befd708b2e7..7881dcc222ef 100644
--- a/tests/integration/test_materialize_mysql_database/test.py
+++ b/tests/integration/test_materialize_mysql_database/test.py
@@ -167,10 +167,19 @@ def test_materialize_database_ddl_with_empty_transaction_8_0(started_cluster, st
 def test_select_without_columns_5_7(started_cluster, started_mysql_5_7):
     materialize_with_ddl.select_without_columns(clickhouse_node, started_mysql_5_7, "mysql1")
 
+
 def test_select_without_columns_8_0(started_cluster, started_mysql_8_0):
     materialize_with_ddl.select_without_columns(clickhouse_node, started_mysql_8_0, "mysql8_0")
 
 
+def test_insert_with_modify_binlog_checksum_5_7(started_cluster, started_mysql_5_7):
+    materialize_with_ddl.insert_with_modify_binlog_checksum(clickhouse_node, started_mysql_5_7, "mysql1")
+
+
+def test_insert_with_modify_binlog_checksum_8_0(started_cluster, started_mysql_8_0):
+    materialize_with_ddl.insert_with_modify_binlog_checksum(clickhouse_node, started_mysql_8_0, "mysql8_0")
+
+
 def test_materialize_database_err_sync_user_privs_5_7(started_cluster, started_mysql_5_7):
     try:
         materialize_with_ddl.err_sync_user_privs_with_materialize_mysql_database(clickhouse_node, started_mysql_5_7, "mysql1")
