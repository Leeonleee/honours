{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 39533,
  "instance_id": "ClickHouse__ClickHouse-39533",
  "issue_numbers": [
    "39522"
  ],
  "base_commit": "73c04b64e35354264a5943b131f879753f3eaaca",
  "patch": "diff --git a/docs/en/sql-reference/functions/date-time-functions.md b/docs/en/sql-reference/functions/date-time-functions.md\nindex 621429fb02cb..d6ef387840a4 100644\n--- a/docs/en/sql-reference/functions/date-time-functions.md\n+++ b/docs/en/sql-reference/functions/date-time-functions.md\n@@ -836,7 +836,7 @@ Result:\n \n ## now\n \n-Returns the current date and time.\n+Returns the current date and time at the moment of query analysis. The function is a constant expression.\n \n **Syntax**\n \n@@ -884,14 +884,20 @@ Result:\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n+## nowInBlock\n+\n+Returns the current date and time at the moment of processing of each block of data. In contrast to the function `now`, it is not a constant expression, and the returned value will be different in different blocks for long-running queries.\n+\n+It makes sense to use this function to generate the current time in long-running INSERT SELECT queries.\n+\n ## today\n \n-Accepts zero arguments and returns the current date at one of the moments of request execution.\n+Accepts zero arguments and returns the current date at one of the moments of query analysis.\n The same as \u2018toDate(now())\u2019.\n \n ## yesterday\n \n-Accepts zero arguments and returns yesterday\u2019s date at one of the moments of request execution.\n+Accepts zero arguments and returns yesterday\u2019s date at one of the moments of query analysis.\n The same as \u2018today() - 1\u2019.\n \n ## timeSlot\ndiff --git a/src/Functions/blockNumber.cpp b/src/Functions/blockNumber.cpp\nindex e88fc68d01fb..a62a0ac873fc 100644\n--- a/src/Functions/blockNumber.cpp\n+++ b/src/Functions/blockNumber.cpp\n@@ -44,7 +44,10 @@ class FunctionBlockNumber : public IFunction\n         return 0;\n     }\n \n-    bool isDeterministic() const override { return false; }\n+    bool isDeterministic() const override\n+    {\n+        return false;\n+    }\n \n     bool isDeterministicInScopeOfQuery() const override\n     {\ndiff --git a/src/Functions/now.cpp b/src/Functions/now.cpp\nindex 95ab1a652a87..b2cfa7aa2b12 100644\n--- a/src/Functions/now.cpp\n+++ b/src/Functions/now.cpp\n@@ -3,7 +3,6 @@\n #include <Functions/IFunction.h>\n #include <Core/DecimalFunctions.h>\n #include <Functions/FunctionFactory.h>\n-#include <Core/Field.h>\n \n #include <Functions/extractTimeZoneFromFunctionArguments.h>\n \ndiff --git a/src/Functions/nowInBlock.cpp b/src/Functions/nowInBlock.cpp\nnew file mode 100644\nindex 000000000000..b657bc920856\n--- /dev/null\n+++ b/src/Functions/nowInBlock.cpp\n@@ -0,0 +1,88 @@\n+#include <Functions/IFunction.h>\n+#include <Functions/FunctionFactory.h>\n+#include <Functions/extractTimeZoneFromFunctionArguments.h>\n+#include <DataTypes/DataTypeDateTime.h>\n+#include <Columns/ColumnsNumber.h>\n+\n+\n+namespace DB\n+{\n+\n+namespace ErrorCodes\n+{\n+    extern const int NUMBER_OF_ARGUMENTS_DOESNT_MATCH;\n+    extern const int ILLEGAL_TYPE_OF_ARGUMENT;\n+}\n+\n+namespace\n+{\n+\n+/** Returns current time at calculation of every block.\n+  * In contrast to 'now' function, it's not a constant expression and is not a subject of constant folding.\n+  */\n+class FunctionNowInBlock : public IFunction\n+{\n+public:\n+    static constexpr auto name = \"nowInBlock\";\n+    static FunctionPtr create(ContextPtr)\n+    {\n+        return std::make_shared<FunctionNowInBlock>();\n+    }\n+\n+    String getName() const override\n+    {\n+        return name;\n+    }\n+\n+    bool isSuitableForShortCircuitArgumentsExecution(const DataTypesWithConstInfo & /*arguments*/) const override\n+    {\n+        return false;\n+    }\n+\n+    /// Optional timezone argument.\n+    bool isVariadic() const override { return true; }\n+\n+    size_t getNumberOfArguments() const override { return 0; }\n+\n+    bool isDeterministic() const override\n+    {\n+        return false;\n+    }\n+\n+    bool isDeterministicInScopeOfQuery() const override\n+    {\n+        return false;\n+    }\n+\n+    DataTypePtr getReturnTypeImpl(const ColumnsWithTypeAndName & arguments) const override\n+    {\n+        if (arguments.size() > 1)\n+        {\n+            throw Exception(\"Arguments size of function \" + getName() + \" should be 0 or 1\", ErrorCodes::NUMBER_OF_ARGUMENTS_DOESNT_MATCH);\n+        }\n+        if (arguments.size() == 1 && !isStringOrFixedString(arguments[0].type))\n+        {\n+            throw Exception(\n+                \"Arguments of function \" + getName() + \" should be String or FixedString\", ErrorCodes::ILLEGAL_TYPE_OF_ARGUMENT);\n+        }\n+        if (arguments.size() == 1)\n+        {\n+            return std::make_shared<DataTypeDateTime>(extractTimeZoneNameFromFunctionArguments(arguments, 0, 0));\n+        }\n+        return std::make_shared<DataTypeDateTime>();\n+    }\n+\n+    ColumnPtr executeImpl(const ColumnsWithTypeAndName &, const DataTypePtr &, size_t input_rows_count) const override\n+    {\n+        return ColumnUInt32::create(input_rows_count, time(nullptr));\n+    }\n+};\n+\n+}\n+\n+void registerFunctionNowInBlock(FunctionFactory & factory)\n+{\n+    factory.registerFunction<FunctionNowInBlock>();\n+}\n+\n+}\ndiff --git a/src/Functions/registerFunctionsDateTime.cpp b/src/Functions/registerFunctionsDateTime.cpp\nindex 5f733b072811..b3fcca42bed3 100644\n--- a/src/Functions/registerFunctionsDateTime.cpp\n+++ b/src/Functions/registerFunctionsDateTime.cpp\n@@ -43,6 +43,7 @@ void registerFunctionToRelativeMinuteNum(FunctionFactory &);\n void registerFunctionToRelativeSecondNum(FunctionFactory &);\n void registerFunctionToTime(FunctionFactory &);\n void registerFunctionNow(FunctionFactory &);\n+void registerFunctionNowInBlock(FunctionFactory &);\n void registerFunctionNow64(FunctionFactory &);\n void registerFunctionToday(FunctionFactory &);\n void registerFunctionYesterday(FunctionFactory &);\n@@ -126,6 +127,7 @@ void registerFunctionsDateTime(FunctionFactory & factory)\n     registerFunctionToTime(factory);\n     registerFunctionNow(factory);\n     registerFunctionNow64(factory);\n+    registerFunctionNowInBlock(factory);\n     registerFunctionToday(factory);\n     registerFunctionYesterday(factory);\n     registerFunctionTimeSlot(factory);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02372_now_in_block.reference b/tests/queries/0_stateless/02372_now_in_block.reference\nnew file mode 100644\nindex 000000000000..5f1d0ecea5d7\n--- /dev/null\n+++ b/tests/queries/0_stateless/02372_now_in_block.reference\n@@ -0,0 +1,2 @@\n+2\n+1\ndiff --git a/tests/queries/0_stateless/02372_now_in_block.sql b/tests/queries/0_stateless/02372_now_in_block.sql\nnew file mode 100644\nindex 000000000000..7c884c0ba7d2\n--- /dev/null\n+++ b/tests/queries/0_stateless/02372_now_in_block.sql\n@@ -0,0 +1,4 @@\n+SELECT count() FROM (SELECT DISTINCT nowInBlock(), nowInBlock('Pacific/Pitcairn') FROM system.numbers LIMIT 2);\n+SELECT nowInBlock(1); -- { serverError 43 }\n+SELECT nowInBlock(NULL) IS NULL;\n+SELECT nowInBlock('UTC', 'UTC'); -- { serverError 42 }\n",
  "problem_statement": "`nowInBlock` function\n**Use case**\r\n\r\nWorkload generation with continuous queries.\r\n\r\n**Describe the solution you'd like**\r\n\r\nSimilar to now() but non-constant.\r\n\n",
  "hints_text": "",
  "created_at": "2022-07-24T18:01:25Z",
  "modified_files": [
    "docs/en/sql-reference/functions/date-time-functions.md",
    "src/Functions/blockNumber.cpp",
    "src/Functions/now.cpp",
    "b/src/Functions/nowInBlock.cpp",
    "src/Functions/registerFunctionsDateTime.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02372_now_in_block.reference",
    "b/tests/queries/0_stateless/02372_now_in_block.sql"
  ]
}