{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 32464,
  "instance_id": "ClickHouse__ClickHouse-32464",
  "issue_numbers": [
    "31538"
  ],
  "base_commit": "5b06e30ea2cb7d5abdfec2ae1bbaba0603aed09c",
  "patch": "diff --git a/src/Interpreters/MutationsInterpreter.cpp b/src/Interpreters/MutationsInterpreter.cpp\nindex d2bd47d0908a..fef31d906c60 100644\n--- a/src/Interpreters/MutationsInterpreter.cpp\n+++ b/src/Interpreters/MutationsInterpreter.cpp\n@@ -569,6 +569,12 @@ ASTPtr MutationsInterpreter::prepare(bool dry_run)\n                 stages.emplace_back(context);\n \n             const auto & column = columns_desc.get(command.column_name);\n+\n+            if (!column.default_desc.expression)\n+                throw Exception(\n+                    ErrorCodes::BAD_ARGUMENTS,\n+                    \"Cannot materialize column `{}` because it doesn't have default expression\", column.name);\n+\n             auto materialized_column = makeASTFunction(\n                 \"_CAST\", column.default_desc.expression->clone(), std::make_shared<ASTLiteral>(column.type->getName()));\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02008_materialize_column.sql b/tests/queries/0_stateless/02008_materialize_column.sql\nindex 4136a04568e8..8a8eb2afe830 100644\n--- a/tests/queries/0_stateless/02008_materialize_column.sql\n+++ b/tests/queries/0_stateless/02008_materialize_column.sql\n@@ -5,6 +5,8 @@ SET mutations_sync = 2;\n CREATE TABLE tmp (x Int64) ENGINE = MergeTree() ORDER BY tuple() PARTITION BY tuple();\n INSERT INTO tmp SELECT * FROM system.numbers LIMIT 20;\n \n+ALTER TABLE tmp MATERIALIZE COLUMN x; -- { serverError 36 }\n+\n ALTER TABLE tmp ADD COLUMN s String DEFAULT toString(x);\n SELECT groupArray(x), groupArray(s) FROM tmp;\n \n",
  "problem_statement": "Crash on materializing column\n**Describe what's wrong**\r\n\r\nCrash on executing `alter table tbl_name materialize column col_name`. Column is `col_name Uint8`\r\n\r\n**Does it reproduce on recent release?**\r\n\r\nReproducible from official Docker image version 21.11.3.6\r\n\r\n**How to reproduce**\r\n\r\n* 21.11.3.6\r\n* Using CLI client\r\n\r\n**Expected behavior**\r\n\r\nColumn is materialized\r\n\r\n**Error message and/or stacktrace**\r\n\r\n```\r\n[e27227f83079] 2021.11.19 14:03:57.811793 [ 403 ] <Fatal> BaseDaemon: ########################################\r\n[e27227f83079] 2021.11.19 14:03:57.811982 [ 403 ] <Fatal> BaseDaemon: (version 21.11.3.6 (official build), build id: 18F71364524E9B66F4365E590A43D87EF75AD9BA) (from thread 102) (query_id: 406c69fb-b639-4080-980c-0f6f69d4c1a2) Received signal Segmentation fault (11)\r\n[e27227f83079] 2021.11.19 14:03:57.811997 [ 403 ] <Fatal> BaseDaemon: Address: NULL pointer. Access: read. Address not mapped to object.\r\n[e27227f83079] 2021.11.19 14:03:57.812012 [ 403 ] <Fatal> BaseDaemon: Stack trace: 0x12569d28 0x12566a4d 0x1203c121 0x1203a869 0x1273d189 0x1273b113 0x130ca9f0 0x130de499 0x15d193cf 0x15d1b7c1 0x15e30169 0x15e2d8a0 0x7f862cabc609 0x7f862c9b6293\r\n[e27227f83079] 2021.11.19 14:03:57.812217 [ 403 ] <Fatal> BaseDaemon: 2. DB::MutationsInterpreter::prepare(bool) @ 0x12569d28 in /usr/bin/clickhouse\r\n[e27227f83079] 2021.11.19 14:03:57.812242 [ 403 ] <Fatal> BaseDaemon: 3. DB::MutationsInterpreter::MutationsInterpreter(std::__1::shared_ptr<DB::IStorage>, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::MutationCommands, std::__1::shared_ptr<DB::Context const>, bool) @ 0x12566a4d in /usr/bin/clickhouse\r\n[e27227f83079] 2021.11.19 14:03:57.812273 [ 403 ] <Fatal> BaseDaemon: 4. DB::InterpreterAlterQuery::executeToTable(DB::ASTAlterQuery const&) @ 0x1203c121 in /usr/bin/clickhouse\r\n[e27227f83079] 2021.11.19 14:03:57.812287 [ 403 ] <Fatal> BaseDaemon: 5. DB::InterpreterAlterQuery::execute() @ 0x1203a869 in /usr/bin/clickhouse\r\n[e27227f83079] 2021.11.19 14:03:57.812302 [ 403 ] <Fatal> BaseDaemon: 6. ? @ 0x1273d189 in /usr/bin/clickhouse\r\n[e27227f83079] 2021.11.19 14:03:57.812316 [ 403 ] <Fatal> BaseDaemon: 7. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x1273b113 in /usr/bin/clickhouse\r\n[e27227f83079] 2021.11.19 14:03:57.812338 [ 403 ] <Fatal> BaseDaemon: 8. DB::TCPHandler::runImpl() @ 0x130ca9f0 in /usr/bin/clickhouse\r\n[e27227f83079] 2021.11.19 14:03:57.812349 [ 403 ] <Fatal> BaseDaemon: 9. DB::TCPHandler::run() @ 0x130de499 in /usr/bin/clickhouse\r\n[e27227f83079] 2021.11.19 14:03:57.812366 [ 403 ] <Fatal> BaseDaemon: 10. Poco::Net::TCPServerConnection::start() @ 0x15d193cf in /usr/bin/clickhouse\r\n[e27227f83079] 2021.11.19 14:03:57.812377 [ 403 ] <Fatal> BaseDaemon: 11. Poco::Net::TCPServerDispatcher::run() @ 0x15d1b7c1 in /usr/bin/clickhouse\r\n[e27227f83079] 2021.11.19 14:03:57.812388 [ 403 ] <Fatal> BaseDaemon: 12. Poco::PooledThread::run() @ 0x15e30169 in /usr/bin/clickhouse\r\n[e27227f83079] 2021.11.19 14:03:57.812400 [ 403 ] <Fatal> BaseDaemon: 13. Poco::ThreadImpl::runnableEntry(void*) @ 0x15e2d8a0 in /usr/bin/clickhouse\r\n[e27227f83079] 2021.11.19 14:03:57.812411 [ 403 ] <Fatal> BaseDaemon: 14. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n[e27227f83079] 2021.11.19 14:03:57.812425 [ 403 ] <Fatal> BaseDaemon: 15. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n[e27227f83079] 2021.11.19 14:03:57.934476 [ 403 ] <Fatal> BaseDaemon: Checksum of the binary: 9911BB0CC38DE5BCDEC7F55FCCAACC88, integrity check passed.\r\n```\r\n\r\n**Additional context**\r\n\r\n> Add any other context about the problem here.\r\n\n",
  "hints_text": "The bug is here:\r\nhttps://github.com/ClickHouse/ClickHouse/blob/cfb98d381c4445808059622958c8dc1b447131d9/src/Interpreters/MutationsInterpreter.cpp#L572\r\n\r\n#27038\r\ncc: @excitoon \nNot fixed.\r\n\r\n@excitoon PTAL.\n@akamensky -- what do you expect from materializing the column with no default? It does not make practical sense.\n@alex-zaitsev i expect that the server don't segfault when I try to do that. But respond with an error (if that's legitimately impossible to materialize column with no default). So just fixing the segfault would be fine in my opinion.\n\nBut if we consider semantics here -- for basic types there is a default value. Numeric types default is 0 (or 0.0). String types default is \"\".\n@akamensky , right, we are going to throw an exception. Materializing type default values does not make practical sense, since it slows ClickHouse down :)\nStill not fixed.\r\n\r\n@alex-zaitsev Materializing columns with DEFAULT expression makes sense if this expression is difficult to calculate.\r\n\r\nAnd ClickHouse should never crash.\r\nIf this issue will not be fixed, we are going to remove this feature from the releases.\r\n\n@excitoon PTAL.\n> Materializing type default values does not make practical sense, since it slows ClickHouse down\n\nIMO, it is expected that when materializing a column (with nulls, or defaults, or expression) it would consume some resources (cpu, io, ram and most of all time). Just that whoever does use it needs to understand this.",
  "created_at": "2021-12-09T15:58:54Z",
  "modified_files": [
    "src/Interpreters/MutationsInterpreter.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/02008_materialize_column.sql"
  ]
}