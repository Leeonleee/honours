diff --git a/src/Processors/QueryPlan/FillingStep.cpp b/src/Processors/QueryPlan/FillingStep.cpp
index a4306ffed2bf..ba3588efa726 100644
--- a/src/Processors/QueryPlan/FillingStep.cpp
+++ b/src/Processors/QueryPlan/FillingStep.cpp
@@ -38,9 +38,10 @@ FillingStep::FillingStep(const DataStream & input_stream_, SortDescription sort_
 
 void FillingStep::transformPipeline(QueryPipeline & pipeline, const BuildQueryPipelineSettings &)
 {
-    pipeline.addSimpleTransform([&](const Block & header)
+    pipeline.addSimpleTransform([&](const Block & header, QueryPipeline::StreamType stream_type) -> ProcessorPtr
     {
-        return std::make_shared<FillingTransform>(header, sort_description);
+        bool on_totals = stream_type == QueryPipeline::StreamType::Totals;
+        return std::make_shared<FillingTransform>(header, sort_description, on_totals);
     });
 }
 
diff --git a/src/Processors/Transforms/FillingTransform.cpp b/src/Processors/Transforms/FillingTransform.cpp
index 8419daf91867..45e46649b3a4 100644
--- a/src/Processors/Transforms/FillingTransform.cpp
+++ b/src/Processors/Transforms/FillingTransform.cpp
@@ -30,12 +30,16 @@ Block FillingTransform::transformHeader(Block header, const SortDescription & so
 }
 
 FillingTransform::FillingTransform(
-        const Block & header_, const SortDescription & sort_description_)
+        const Block & header_, const SortDescription & sort_description_, bool on_totals_)
         : ISimpleTransform(header_, transformHeader(header_, sort_description_), true)
         , sort_description(sort_description_)
+        , on_totals(on_totals_)
         , filling_row(sort_description_)
         , next_row(sort_description_)
 {
+    if (on_totals)
+        return;
+
     auto try_convert_fields = [](auto & descr, const auto & type)
     {
         auto max_type = Field::Types::Null;
@@ -106,7 +110,7 @@ FillingTransform::FillingTransform(
 
 IProcessor::Status FillingTransform::prepare()
 {
-    if (input.isFinished() && !output.isFinished() && !has_input && !generate_suffix)
+    if (!on_totals && input.isFinished() && !output.isFinished() && !has_input && !generate_suffix)
     {
         should_insert_first = next_row < filling_row;
 
@@ -126,6 +130,9 @@ IProcessor::Status FillingTransform::prepare()
 
 void FillingTransform::transform(Chunk & chunk)
 {
+    if (on_totals)
+        return;
+
     Columns old_fill_columns;
     Columns old_other_columns;
     MutableColumns res_fill_columns;
diff --git a/src/Processors/Transforms/FillingTransform.h b/src/Processors/Transforms/FillingTransform.h
index 33717b079a05..7ccebadfb6da 100644
--- a/src/Processors/Transforms/FillingTransform.h
+++ b/src/Processors/Transforms/FillingTransform.h
@@ -13,7 +13,7 @@ namespace DB
 class FillingTransform : public ISimpleTransform
 {
 public:
-    FillingTransform(const Block & header_, const SortDescription & sort_description_);
+    FillingTransform(const Block & header_, const SortDescription & sort_description_, bool on_totals_);
 
     String getName() const override { return "FillingTransform"; }
 
@@ -28,6 +28,8 @@ class FillingTransform : public ISimpleTransform
     void setResultColumns(Chunk & chunk, MutableColumns & fill_columns, MutableColumns & other_columns) const;
 
     const SortDescription sort_description; /// Contains only rows with WITH FILL.
+    const bool on_totals; /// FillingTransform does nothing on totals.
+
     FillingRow filling_row; /// Current row, which is used to fill gaps.
     FillingRow next_row; /// Row to which we need to generate filling rows.
 
