{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 63097,
  "instance_id": "ClickHouse__ClickHouse-63097",
  "issue_numbers": [
    "63082"
  ],
  "base_commit": "dffcc51b8389734c7476b6baafa15c3535ada8d7",
  "patch": "diff --git a/src/Functions/abs.cpp b/src/Functions/abs.cpp\nindex 25ff6cc93d0a..0cd313caf1e3 100644\n--- a/src/Functions/abs.cpp\n+++ b/src/Functions/abs.cpp\n@@ -45,7 +45,7 @@ template <> struct FunctionUnaryArithmeticMonotonicity<NameAbs>\n         if ((left_float < 0 && right_float > 0) || (left_float > 0 && right_float < 0))\n             return {};\n \n-        return { .is_monotonic = true, .is_positive = left_float > 0, .is_strict = true, };\n+        return { .is_monotonic = true, .is_positive = std::min(left_float, right_float) >= 0, .is_strict = true, };\n     }\n };\n \ndiff --git a/src/Storages/MergeTree/KeyCondition.cpp b/src/Storages/MergeTree/KeyCondition.cpp\nindex 2d57ea40c9cb..304bfb567c3e 100644\n--- a/src/Storages/MergeTree/KeyCondition.cpp\n+++ b/src/Storages/MergeTree/KeyCondition.cpp\n@@ -2860,9 +2860,9 @@ bool KeyCondition::mayBeTrueInRange(\n String KeyCondition::RPNElement::toString() const\n {\n     if (argument_num_of_space_filling_curve)\n-        return toString(fmt::format(\"argument {} of column {}\", *argument_num_of_space_filling_curve, key_column), false);\n+        return toString(fmt::format(\"argument {} of column {}\", *argument_num_of_space_filling_curve, key_column), true);\n     else\n-        return toString(fmt::format(\"column {}\", key_column), false);\n+        return toString(fmt::format(\"column {}\", key_column), true);\n }\n \n String KeyCondition::RPNElement::toString(std::string_view column_name, bool print_constants) const\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03130_abs_in_key_condition_bug.reference b/tests/queries/0_stateless/03130_abs_in_key_condition_bug.reference\nnew file mode 100644\nindex 000000000000..0cfbf08886fc\n--- /dev/null\n+++ b/tests/queries/0_stateless/03130_abs_in_key_condition_bug.reference\n@@ -0,0 +1,1 @@\n+2\ndiff --git a/tests/queries/0_stateless/03130_abs_in_key_condition_bug.sql b/tests/queries/0_stateless/03130_abs_in_key_condition_bug.sql\nnew file mode 100644\nindex 000000000000..eec0d034d10b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03130_abs_in_key_condition_bug.sql\n@@ -0,0 +1,10 @@\n+DROP TABLE IF EXISTS t;\n+\n+CREATE TABLE t (id UInt64, ts DateTime) ENGINE = MergeTree() ORDER BY (id, ts) SETTINGS index_granularity = 2;\n+\n+INSERT INTO t VALUES\n+    (1, toDateTime('2023-05-04 21:17:23', 'UTC')), (1, toDateTime('2023-05-04 22:17:23', 'UTC')), (2, toDateTime('2023-05-04 22:17:23', 'UTC')), (2, toDateTime('2023-05-04 23:17:23', 'UTC'));\n+\n+SELECT  count(abs(toUnixTimestamp(ts, 'UTC') - toUnixTimestamp('2023-05-04 22:17:23', 'UTC')) AS error) FROM t WHERE error < 3600;\n+\n+DROP TABLE IF EXISTS t;\n",
  "problem_statement": "Wrong query result when using abs function for index analysis\n> Please make sure that the version you're using is still supported (you can find the list [here](https://github.com/ClickHouse/ClickHouse/blob/master/SECURITY.md#scope-and-supported-versions)).\r\n\r\n> You have to provide the following information whenever possible.\r\n\r\n**Describe what's wrong**\r\n\r\n> A clear and concise description of what works not as it is supposed to.\r\n\r\nA query that use `abs` for index analysis may incorrectly skip some ranges.\r\n\r\nReproduce:\r\n\r\n```sql\r\nCREATE TABLE t (id UInt64, ts DateTime) ENGINE = MergeTree() ORDER BY (id, ts) SETTINGS index_granularity = 2;\r\n\r\nINSERT INTO t VALUES (1, '2023-05-04 21:17:23') (1, '2023-05-04 22:17:23') (2, '2023-05-04 22:17:23') (2, '2023-05-04 23:17:23');\r\n\r\n-- This query should return two rows with ts = '2023-05-04 22:17:23'\r\nSELECT *, abs(toUnixTimestamp(ts) - toUnixTimestamp(1683238643)) AS error FROM t WHERE error < 3600;\r\n\r\n1\t2023-05-04 22:17:23\t0\r\n\r\n```\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\n[The list of releases](https://github.com/ClickHouse/ClickHouse/blob/master/utils/list-versions/version_date.tsv)\r\n\r\nYes, in HEAD https://fiddle.clickhouse.com/0ccd5f20-f35b-4d79-9300-2e92cfc257c7\r\n\r\n**Additional context**\r\n\r\n> Add any other context about the problem here.\r\n\r\nCan assign to me as I'm working on the fix already\r\n\n",
  "hints_text": "",
  "created_at": "2024-04-29T01:36:46Z",
  "modified_files": [
    "src/Functions/abs.cpp",
    "src/Storages/MergeTree/KeyCondition.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03130_abs_in_key_condition_bug.reference",
    "b/tests/queries/0_stateless/03130_abs_in_key_condition_bug.sql"
  ]
}