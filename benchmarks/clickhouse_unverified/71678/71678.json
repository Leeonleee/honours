{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 71678,
  "instance_id": "ClickHouse__ClickHouse-71678",
  "issue_numbers": [
    "71677"
  ],
  "base_commit": "49e41f23ee18a4ab90bf045a7e1eee9c74074954",
  "patch": "diff --git a/src/Functions/nested.cpp b/src/Functions/nested.cpp\nindex 85c342b5e7cd..29d99b8a6df9 100644\n--- a/src/Functions/nested.cpp\n+++ b/src/Functions/nested.cpp\n@@ -108,27 +108,29 @@ class FunctionNested : public IFunction\n     {\n         size_t arguments_size = arguments.size();\n \n-        const auto * lhs_array = assert_cast<const ColumnArray *>(arguments.at(1).column.get());\n+        ColumnPtr first_array_materialized = arguments[1].column->convertToFullColumnIfConst();\n+        const ColumnArray & first_array = assert_cast<const ColumnArray &>(*first_array_materialized);\n \n         Columns data_columns;\n         data_columns.reserve(arguments_size);\n-        data_columns.push_back(lhs_array->getDataPtr());\n+        data_columns.push_back(first_array.getDataPtr());\n \n         for (size_t i = 2; i < arguments_size; ++i)\n         {\n-            const auto * rhs_array = assert_cast<const ColumnArray *>(arguments[i].column.get());\n+            ColumnPtr other_array_materialized = arguments[i].column->convertToFullColumnIfConst();\n+            const ColumnArray & other_array = assert_cast<const ColumnArray &>(*other_array_materialized);\n \n-            if (!lhs_array->hasEqualOffsets(*rhs_array))\n+            if (!first_array.hasEqualOffsets(other_array))\n                 throw Exception(ErrorCodes::SIZES_OF_ARRAYS_DONT_MATCH,\n                     \"The argument 2 and argument {} of function {} have different array offsets\",\n                     i + 1,\n                     getName());\n \n-            data_columns.push_back(rhs_array->getDataPtr());\n+            data_columns.push_back(other_array.getDataPtr());\n         }\n \n         auto tuple_column = ColumnTuple::create(std::move(data_columns));\n-        auto array_column = ColumnArray::create(std::move(tuple_column), lhs_array->getOffsetsPtr());\n+        auto array_column = ColumnArray::create(std::move(tuple_column), first_array.getOffsetsPtr());\n \n         return array_column;\n     }\n@@ -168,7 +170,12 @@ REGISTER_FUNCTION(Nested)\n {\n     factory.registerFunction<FunctionNested>(FunctionDocumentation{\n         .description=R\"(\n+This is a function used internally by the ClickHouse engine and not meant to be used directly.\n+\n Returns the array of tuples from multiple arrays.\n+\n+The first argument must be a constant array of Strings determining the names of the resulting Tuple.\n+The other arguments must be arrays of the same size.\n )\",\n         .examples{{\"nested\", \"SELECT nested(['keys', 'values'], ['key_1', 'key_2'], ['value_1','value_2'])\", \"\"}},\n         .categories{\"OtherFunctions\"}\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03268_nested_analyzer.reference b/tests/queries/0_stateless/03268_nested_analyzer.reference\nnew file mode 100644\nindex 000000000000..01dabfe4ba71\n--- /dev/null\n+++ b/tests/queries/0_stateless/03268_nested_analyzer.reference\n@@ -0,0 +1,3 @@\n+[(1,3),(2,4)]\n+0\t0\n+0\t0\t1\ndiff --git a/tests/queries/0_stateless/03268_nested_analyzer.sql b/tests/queries/0_stateless/03268_nested_analyzer.sql\nnew file mode 100644\nindex 000000000000..920cf2b31747\n--- /dev/null\n+++ b/tests/queries/0_stateless/03268_nested_analyzer.sql\n@@ -0,0 +1,16 @@\n+SELECT nested(['a', 'b'], [1, 2], materialize([3, 4]));\n+\n+DROP TABLE IF EXISTS test;\n+CREATE TABLE test\n+(\n+    x UInt8,\n+    \u201cstruct.x\u201d DEFAULT [0],\n+    \u201cstruct.y\u201d ALIAS [1],\n+)\n+ENGINE = Memory;\n+\n+insert into test (x) values (0);\n+select * from test array join struct;\n+select x, struct.x, struct.y from test array join struct;\n+\n+DROP TABLE test;\n",
  "problem_statement": "Array join with a nested data structure, which contains an alias to a constant array leads to a null pointer dereference\n```\r\nCREATE TABLE test\r\n(\r\n    x UInt8,\r\n    \u201cstruct.x\u201d DEFAULT [0],\r\n    \u201cstruct.y\u201d ALIAS [1],\r\n)\r\nENGINE = Memory;\r\n\r\ninsert into test (x) values (0);\r\nselect * from test array join struct;\r\n```\n",
  "hints_text": "Minimal example:\r\n```\r\nSELECT nested(['a', 'b'], [1, 2], materialize([3, 4]))\r\n```\r\n\r\nThe bug was introduced here: https://github.com/ClickHouse/ClickHouse/pull/46471",
  "created_at": "2024-11-09T01:31:55Z",
  "modified_files": [
    "src/Functions/nested.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03268_nested_analyzer.reference",
    "b/tests/queries/0_stateless/03268_nested_analyzer.sql"
  ]
}