You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Variant of executable dictionary source with pool of processes.
Executable dictionary runs a program (spawns a child process) for every block to process (typically 65536 rows), pipes data to its stdin, reads data from stdout. Program can work in streaming fashion, so it can read and write simultanously (it does not have to buffer any data).

The drawback is that we spawn and wait for child process to exit for every processed block of data.
It is not efficient if the child process takes long time to initialize.

We can make another dictionary source (let's name it `executable_pool`) that will spawn up to N child processes (the pool size) and keep them running until they exit. The program should read data from stdin while it is available and output result to stdout, and it can wait for next block of data on stdin. We will not close stdin after processing a block of data but will pipe another chunk of data when we will need it.

The program should be ready for this way of data processing - it should poll stdin and flush data to stdout early (when more data in stdin is not available at this moment).

Additional uses:
- this mechanism will be used to reimplement `library` dictionary source;
- this mechanism will be used to implement simple UDFs;
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
