diff --git a/src/Parsers/tests/gtest_dictionary_parser.cpp b/src/Parsers/tests/gtest_dictionary_parser.cpp
index 967f68484042..25f48fc27c84 100644
--- a/src/Parsers/tests/gtest_dictionary_parser.cpp
+++ b/src/Parsers/tests/gtest_dictionary_parser.cpp
@@ -42,8 +42,8 @@ TEST(ParserDictionaryDDL, SimpleDictionary)
     ParserCreateDictionaryQuery parser;
     ASTPtr ast = parseQuery(parser, input.data(), input.data() + input.size(), "", 0, 0);
     ASTCreateQuery * create = ast->as<ASTCreateQuery>();
-    EXPECT_EQ(create->table, "dict1");
-    EXPECT_EQ(create->database, "test");
+    EXPECT_EQ(create->getTable(), "dict1");
+    EXPECT_EQ(create->getDatabase(), "test");
     EXPECT_EQ(create->is_dictionary, true);
     EXPECT_NE(create->dictionary, nullptr);
     EXPECT_NE(create->dictionary->lifetime, nullptr);
@@ -138,8 +138,8 @@ TEST(ParserDictionaryDDL, AttributesWithMultipleProperties)
     ParserCreateDictionaryQuery parser;
     ASTPtr ast = parseQuery(parser, input.data(), input.data() + input.size(), "", 0, 0);
     ASTCreateQuery * create = ast->as<ASTCreateQuery>();
-    EXPECT_EQ(create->table, "dict2");
-    EXPECT_EQ(create->database, "");
+    EXPECT_EQ(create->getTable(), "dict2");
+    EXPECT_EQ(create->getDatabase(), "");
 
     /// test attributes
     EXPECT_NE(create->dictionary_attributes_list, nullptr);
@@ -240,8 +240,8 @@ TEST(ParserDictionaryDDL, NestedSource)
     ParserCreateDictionaryQuery parser;
     ASTPtr ast = parseQuery(parser, input.data(), input.data() + input.size(), "", 0, 0);
     ASTCreateQuery * create = ast->as<ASTCreateQuery>();
-    EXPECT_EQ(create->table, "dict4");
-    EXPECT_EQ(create->database, "");
+    EXPECT_EQ(create->getTable(), "dict4");
+    EXPECT_EQ(create->getDatabase(), "");
 
     /// source test
     EXPECT_EQ(create->dictionary->source->name, "mysql");
@@ -301,8 +301,8 @@ TEST(ParserDictionaryDDL, ParseDropQuery)
     ASTDropQuery * drop1 = ast1->as<ASTDropQuery>();
 
     EXPECT_TRUE(drop1->is_dictionary);
-    EXPECT_EQ(drop1->database, "test");
-    EXPECT_EQ(drop1->table, "dict1");
+    EXPECT_EQ(drop1->getDatabase(), "test");
+    EXPECT_EQ(drop1->getTable(), "dict1");
     auto str1 = serializeAST(*drop1, true);
     EXPECT_EQ(input1, str1);
 
@@ -312,8 +312,8 @@ TEST(ParserDictionaryDDL, ParseDropQuery)
     ASTDropQuery * drop2 = ast2->as<ASTDropQuery>();
 
     EXPECT_TRUE(drop2->is_dictionary);
-    EXPECT_EQ(drop2->database, "");
-    EXPECT_EQ(drop2->table, "dict2");
+    EXPECT_EQ(drop2->getDatabase(), "");
+    EXPECT_EQ(drop2->getTable(), "dict2");
     auto str2 = serializeAST(*drop2, true);
     EXPECT_EQ(input2, str2);
 }
@@ -326,8 +326,8 @@ TEST(ParserDictionaryDDL, ParsePropertiesQueries)
     ASTPtr ast1 = parseQuery(parser, input1.data(), input1.data() + input1.size(), "", 0, 0);
     ASTShowCreateDictionaryQuery * show1 = ast1->as<ASTShowCreateDictionaryQuery>();
 
-    EXPECT_EQ(show1->table, "dict1");
-    EXPECT_EQ(show1->database, "test");
+    EXPECT_EQ(show1->getTable(), "dict1");
+    EXPECT_EQ(show1->getDatabase(), "test");
     EXPECT_EQ(serializeAST(*show1), input1);
 
     String input2 = "EXISTS DICTIONARY dict2";
@@ -335,7 +335,7 @@ TEST(ParserDictionaryDDL, ParsePropertiesQueries)
     ASTPtr ast2 = parseQuery(parser, input2.data(), input2.data() + input2.size(), "", 0, 0);
     ASTExistsDictionaryQuery * show2 = ast2->as<ASTExistsDictionaryQuery>();
 
-    EXPECT_EQ(show2->table, "dict2");
-    EXPECT_EQ(show2->database, "");
+    EXPECT_EQ(show2->getTable(), "dict2");
+    EXPECT_EQ(show2->getDatabase(), "");
     EXPECT_EQ(serializeAST(*show2), input2);
 }
diff --git a/tests/queries/0_stateless/01604_explain_ast_of_nonselect_query.reference b/tests/queries/0_stateless/01604_explain_ast_of_nonselect_query.reference
index 3c92ffb0a8cd..887c701a5e4d 100644
--- a/tests/queries/0_stateless/01604_explain_ast_of_nonselect_query.reference
+++ b/tests/queries/0_stateless/01604_explain_ast_of_nonselect_query.reference
@@ -1,4 +1,4 @@
-AlterQuery  t1 (children 1)
+AlterQuery  t1 (children 2)
  ExpressionList (children 1)
   AlterCommand 33 (children 1)
    Function equals (children 1)
@@ -6,3 +6,4 @@ AlterQuery  t1 (children 1)
      Identifier date
      Function today (children 1)
       ExpressionList
+ Identifier t1
diff --git a/tests/queries/0_stateless/02014_query_parameters.reference b/tests/queries/0_stateless/02014_query_parameters.reference
new file mode 100644
index 000000000000..d126b1e773e5
--- /dev/null
+++ b/tests/queries/0_stateless/02014_query_parameters.reference
@@ -0,0 +1,4 @@
+1	2
+1
+4
+2
diff --git a/tests/queries/0_stateless/02014_query_parameters.sh b/tests/queries/0_stateless/02014_query_parameters.sh
new file mode 100755
index 000000000000..b3d718fa578b
--- /dev/null
+++ b/tests/queries/0_stateless/02014_query_parameters.sh
@@ -0,0 +1,20 @@
+#!/usr/bin/env bash
+# Tags: no-parallel
+
+CURDIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)
+# shellcheck source=../shell_config.sh
+. "$CURDIR"/../shell_config.sh
+
+${CLICKHOUSE_CLIENT} --query "DROP DATABASE IF EXISTS test_db";
+
+${CLICKHOUSE_CLIENT} --param_db="test_db" --param_tbl="test_t" --query "CREATE DATABASE {db:Identifier}";
+${CLICKHOUSE_CLIENT} --param_db="test_db" --param_tbl="test_t" --query "CREATE TABLE {db:Identifier}.{tbl:Identifier} (id UInt64, col1 UInt64) ENGINE = MergeTree() ORDER BY id";
+${CLICKHOUSE_CLIENT} --param_db="test_db" --param_tbl="test_t" --query "INSERT INTO {db:Identifier}.{tbl:Identifier} VALUES (1,2)";
+${CLICKHOUSE_CLIENT} --param_db="test_db" --param_tbl="test_t" --query "SELECT * FROM {db:Identifier}.{tbl:Identifier}";
+${CLICKHOUSE_CLIENT} --param_db="test_db" --param_tbl="test_t" --query "OPTIMIZE TABLE {db:Identifier}.{tbl:Identifier}";
+${CLICKHOUSE_CLIENT} --param_db="test_db" --param_tbl="test_t" --query "ALTER TABLE {db:Identifier}.{tbl:Identifier} RENAME COLUMN col1 to col2";
+${CLICKHOUSE_CLIENT} --param_db="test_db" --param_tbl="test_t" --query "EXISTS TABLE {db:Identifier}.{tbl:Identifier}";
+${CLICKHOUSE_CLIENT} --param_db="test_db" --param_tbl="test_t" --query "INSERT INTO {db:Identifier}.{tbl:Identifier} VALUES (3,4)";
+${CLICKHOUSE_CLIENT} --param_db="test_db" --param_tbl="test_t" --query "SELECT col2 FROM {db:Identifier}.{tbl:Identifier} ORDER BY col2 DESC";
+${CLICKHOUSE_CLIENT} --param_db="test_db" --param_tbl="test_t" --query "DROP TABLE {db:Identifier}.{tbl:Identifier}";
+${CLICKHOUSE_CLIENT} --param_db="test_db" --param_tbl="test_t" --query "DROP DATABASE {db:Identifier}";
