diff --git a/tests/queries/0_stateless/01130_in_memory_parts_nested.reference b/tests/queries/0_stateless/01130_in_memory_parts_nested.reference
new file mode 100644
index 000000000000..3882abb94676
--- /dev/null
+++ b/tests/queries/0_stateless/01130_in_memory_parts_nested.reference
@@ -0,0 +1,25 @@
+[0]
+[0,0,0]
+[0,0,0,0,0]
+[0,0,0,0,0,0,0]
+[0,0,0,0,0,0,0,0,0]
+[0]
+[0,0,0]
+[0,0,0,0,0]
+[0,0,0,0,0,0,0]
+[0,0,0,0,0,0,0,0,0]
+[0]
+[0,0,0]
+[0,0,0,0,0]
+[0,0,0,0,0,0,0]
+[0,0,0,0,0,0,0,0,0]
+[0]
+[0,2,4]
+[0,2,4,6,8]
+[0,2,4,6,8,10,12]
+[0,2,4,6,8,10,12,14,16]
+[0]	[0]
+[0,1,2]	[0,2,4]
+[0,1,2,3,4]	[0,2,4,6,8]
+[0,1,2,3,4,5,6]	[0,2,4,6,8,10,12]
+[0,1,2,3,4,5,6,7,8]	[0,2,4,6,8,10,12,14,16]
diff --git a/tests/queries/0_stateless/01130_in_memory_parts_nested.sql b/tests/queries/0_stateless/01130_in_memory_parts_nested.sql
new file mode 100644
index 000000000000..76e5a6d7751b
--- /dev/null
+++ b/tests/queries/0_stateless/01130_in_memory_parts_nested.sql
@@ -0,0 +1,18 @@
+-- Test 00576_nested_and_prewhere, but with in-memory parts.
+DROP TABLE IF EXISTS nested;
+
+CREATE TABLE nested (x UInt64, filter UInt8, n Nested(a UInt64)) ENGINE = MergeTree ORDER BY x
+    SETTINGS min_rows_for_compact_part = 200000, min_rows_for_wide_part = 300000;
+
+INSERT INTO nested SELECT number, number % 2, range(number % 10) FROM system.numbers LIMIT 100000;
+
+ALTER TABLE nested ADD COLUMN n.b Array(UInt64);
+SELECT DISTINCT n.b FROM nested PREWHERE filter;
+SELECT DISTINCT n.b FROM nested PREWHERE filter SETTINGS max_block_size = 10;
+SELECT DISTINCT n.b FROM nested PREWHERE filter SETTINGS max_block_size = 123;
+
+ALTER TABLE nested ADD COLUMN n.c Array(UInt64) DEFAULT arrayMap(x -> x * 2, n.a);
+SELECT DISTINCT n.c FROM nested PREWHERE filter;
+SELECT DISTINCT n.a, n.c FROM nested PREWHERE filter;
+
+DROP TABLE nested;
