{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12456,
  "instance_id": "ClickHouse__ClickHouse-12456",
  "issue_numbers": [
    "12437"
  ],
  "base_commit": "7108f88de5bc2c968911c3242a6d2f840eb6563a",
  "patch": "diff --git a/src/Storages/MergeTree/MergeTreeReaderInMemory.cpp b/src/Storages/MergeTree/MergeTreeReaderInMemory.cpp\nindex 83f1ac5b86ad..e684205658a3 100644\n--- a/src/Storages/MergeTree/MergeTreeReaderInMemory.cpp\n+++ b/src/Storages/MergeTree/MergeTreeReaderInMemory.cpp\n@@ -74,8 +74,9 @@ size_t MergeTreeReaderInMemory::readRows(size_t from_mark, bool continue_reading\n \n             auto mutable_column = res_columns[i]->assumeMutable();\n             auto & res_offstes = assert_cast<ColumnArray &>(*mutable_column).getOffsets();\n+            size_t start_offset = total_rows_read ? source_offsets[total_rows_read - 1] : 0;\n             for (size_t row = 0; row < rows_to_read; ++row)\n-                res_offstes.push_back(source_offsets[total_rows_read + row]);\n+                res_offstes.push_back(source_offsets[total_rows_read + row] - start_offset);\n \n             res_columns[i] = std::move(mutable_column);\n         }\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01130_in_memory_parts_nested.reference b/tests/queries/0_stateless/01130_in_memory_parts_nested.reference\nnew file mode 100644\nindex 000000000000..3882abb94676\n--- /dev/null\n+++ b/tests/queries/0_stateless/01130_in_memory_parts_nested.reference\n@@ -0,0 +1,25 @@\n+[0]\n+[0,0,0]\n+[0,0,0,0,0]\n+[0,0,0,0,0,0,0]\n+[0,0,0,0,0,0,0,0,0]\n+[0]\n+[0,0,0]\n+[0,0,0,0,0]\n+[0,0,0,0,0,0,0]\n+[0,0,0,0,0,0,0,0,0]\n+[0]\n+[0,0,0]\n+[0,0,0,0,0]\n+[0,0,0,0,0,0,0]\n+[0,0,0,0,0,0,0,0,0]\n+[0]\n+[0,2,4]\n+[0,2,4,6,8]\n+[0,2,4,6,8,10,12]\n+[0,2,4,6,8,10,12,14,16]\n+[0]\t[0]\n+[0,1,2]\t[0,2,4]\n+[0,1,2,3,4]\t[0,2,4,6,8]\n+[0,1,2,3,4,5,6]\t[0,2,4,6,8,10,12]\n+[0,1,2,3,4,5,6,7,8]\t[0,2,4,6,8,10,12,14,16]\ndiff --git a/tests/queries/0_stateless/01130_in_memory_parts_nested.sql b/tests/queries/0_stateless/01130_in_memory_parts_nested.sql\nnew file mode 100644\nindex 000000000000..76e5a6d7751b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01130_in_memory_parts_nested.sql\n@@ -0,0 +1,18 @@\n+-- Test 00576_nested_and_prewhere, but with in-memory parts.\n+DROP TABLE IF EXISTS nested;\n+\n+CREATE TABLE nested (x UInt64, filter UInt8, n Nested(a UInt64)) ENGINE = MergeTree ORDER BY x\n+    SETTINGS min_rows_for_compact_part = 200000, min_rows_for_wide_part = 300000;\n+\n+INSERT INTO nested SELECT number, number % 2, range(number % 10) FROM system.numbers LIMIT 100000;\n+\n+ALTER TABLE nested ADD COLUMN n.b Array(UInt64);\n+SELECT DISTINCT n.b FROM nested PREWHERE filter;\n+SELECT DISTINCT n.b FROM nested PREWHERE filter SETTINGS max_block_size = 10;\n+SELECT DISTINCT n.b FROM nested PREWHERE filter SETTINGS max_block_size = 123;\n+\n+ALTER TABLE nested ADD COLUMN n.c Array(UInt64) DEFAULT arrayMap(x -> x * 2, n.a);\n+SELECT DISTINCT n.c FROM nested PREWHERE filter;\n+SELECT DISTINCT n.a, n.c FROM nested PREWHERE filter;\n+\n+DROP TABLE nested;\n",
  "problem_statement": "Test for Nested in in-memory data parts fails with uneven block size\n**Describe the bug**\r\n```\r\nclickhouse-client --max_block_size 123 -n < 01130_in_memory_parts_nested.sql\r\n```\r\n\r\nOutputs an array with huge number of zeros that is definitely incorrect.\n",
  "hints_text": "",
  "created_at": "2020-07-13T09:15:33Z",
  "modified_files": [
    "src/Storages/MergeTree/MergeTreeReaderInMemory.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01130_in_memory_parts_nested.reference",
    "b/tests/queries/0_stateless/01130_in_memory_parts_nested.sql"
  ]
}