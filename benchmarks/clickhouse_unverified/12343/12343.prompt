You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
ReplicatedMergeTree in Atomic database
What is the proper way to create replicated table in database with Atomic engine?
Should I use some template or it's a bug?

UPD: I found out that after about 8-9 minutes I can recreate table.
```
create database db1 engine=Atomic;

create table db1.test 
(i1 Int32) 
engine=ReplicatedMergeTree('/clickhouse/tables/db1/test', '{replica}') 
order by i1;

drop table db1.test;

create table db1.test 
(i1 Int32) 
engine=ReplicatedMergeTree('/clickhouse/tables/db1/test', '{replica}') 
order by i1;
```

When executing last CREATE query I got 
>2020.07.04 23:14:10.409366 [ 85 ] {} <Error> DynamicQueryHandler: Code: 253, e.displayText() = DB::Exception: Replica /clickhouse/tables/db1/test/replicas/1A already exists., Stack trace (when copying this message, always include the lines below):
>0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x103fa390 in /usr/bin/clickhouse
>1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x900b8ad in /usr/bin/clickhouse
>2. ? @ 0xd749a87 in /usr/bin/clickhouse
>3. DB::StorageReplicatedMergeTree::StorageReplicatedMergeTree(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool, DB::StorageID const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::StorageInMemoryMetadata const&, DB::Context&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::MergeTreeData::MergingParams const&, std::__1::unique_ptr<DB::MergeTreeSettings, std::__1::default_delete<DB::MergeTreeSettings> >, bool) @ 0xd720d9c in /usr/bin/clickhouse
>4. ? @ 0xda63dca in /usr/bin/clickhouse
>5. std::__1::__function::__func<std::__1::shared_ptr<DB::IStorage> (*)(DB::StorageFactory::Arguments const&), std::__1::allocator<std::__1::shared_ptr<DB::IStorage> (*)(DB::StorageFactory::Arguments const&)>, std::__1::shared_ptr<DB::IStorage> (DB::StorageFactory::Arguments const&)>::operator()(DB::StorageFactory::Arguments const&) @ 0xda67447 in /usr/bin/clickhouse
>6. DB::StorageFactory::get(DB::ASTCreateQuery const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, DB::Context&, DB::ColumnsDescription const&, DB::ConstraintsDescription const&, bool) const @ 0xd66797d in /usr/bin/clickhouse
>7. DB::InterpreterCreateQuery::doCreateTable(DB::ASTCreateQuery&, DB::InterpreterCreateQuery::TableProperties const&) @ 0xd157429 in /usr/bin/clickhouse
>8. DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0xd15798d in /usr/bin/clickhouse
>9. DB::InterpreterCreateQuery::execute() @ 0xd158ea1 in /usr/bin/clickhouse
>10. ? @ 0xd52ecc9 in /usr/bin/clickhouse
>11. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::__1::function<void (std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&)>) @ 0xd532700 in /usr/bin/clickhouse
>12. DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&) @ 0x90efb4c in /usr/bin/clickhouse
>13. DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&) @ 0x90f35a6 in /usr/bin/clickhouse
>14. Poco::Net::HTTPServerConnection::run() @ 0x102aad43 in /usr/bin/clickhouse
>15. Poco::Net::TCPServerConnection::start() @ 0x102e610b in /usr/bin/clickhouse
>16. Poco::Net::TCPServerDispatcher::run() @ 0x102e659b in /usr/bin/clickhouse
>17. Poco::PooledThread::run() @ 0x10494166 in /usr/bin/clickhouse
>18. Poco::ThreadImpl::runnableEntry(void*) @ 0x1048f420 in /usr/bin/clickhouse
v19. start_thread @ 0x7ea5 in /usr/lib64/libpthread-2.17.so
>20. __clone @ 0xfe8dd in /usr/lib64/libc-2.17.so
 (version 20.4.5.36 (official build))
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
