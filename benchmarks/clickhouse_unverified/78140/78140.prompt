You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
groupArraySorted SEGV
### Describe the bug

This is a regression since v24.8.

### How to reproduce

Run Fiddle: https://fiddle.clickhouse.com/c5a659dc-4e77-478e-add0-2766e8929f76

### Error message and/or stacktrace

Stack trace:
```
2025.03.21 15:42:10.335922 [ 83815 ] {} <Fatal> BaseDaemon: 4.0. inlined from src/AggregateFunctions/AggregateFunctionGroupArraySorted.cpp:0: DB::(anonymous namespace)::GroupArraySortedData<DB::Field, (DB::(anonymous namespace)::GroupArraySortedStrategy)0>::addElement(DB::Field&&, unsigned long, DB::Arena*)
2025.03.21 15:42:10.335968 [ 83815 ] {} <Fatal> BaseDaemon: 4. src/AggregateFunctions/AggregateFunctionGroupArraySorted.cpp:264: DB::(anonymous namespace)::GroupArraySorted<DB::(anonymous namespace)::GroupArraySortedData<DB::Field, (DB::(anonymous namespace)::GroupArraySortedStrategy)0>, DB::Field>::add(char*, DB::IColumn const**, unsigned long, DB::Arena*) const @ 0x000000002485c094
2025.03.21 15:42:10.413749 [ 83815 ] {} <Fatal> BaseDaemon: 5. src/AggregateFunctions/IAggregateFunction.h:552: DB::IAggregateFunctionHelper<DB::(anonymous namespace)::GroupArraySorted<DB::(anonymous namespace)::GroupArraySortedData<DB::Field, (DB::(anonymous namespace)::GroupArraySortedStrategy)0>, DB::Field>>::addBatchSinglePlace(unsigned long, unsigned long, char*, DB::IColumn const**, DB::Arena*, long) const @ 0x0000000024860060
2025.03.21 15:42:10.450603 [ 83815 ] {} <Fatal> BaseDaemon: 6. src/Processors/Transforms/WindowTransform.cpp:1034: DB::WindowTransform::updateAggregationState() @ 0x0000000031e8fdc9
2025.03.21 15:42:10.485620 [ 83815 ] {} <Fatal> BaseDaemon: 7. src/Processors/Transforms/WindowTransform.cpp:1234: DB::WindowTransform::appendChunk(DB::Chunk&) @ 0x0000000031e91a9a
2025.03.21 15:42:10.521976 [ 83815 ] {} <Fatal> BaseDaemon: 8. src/Processors/Transforms/WindowTransform.cpp:1462: DB::WindowTransform::work() @ 0x0000000031e95e04
2025.03.21 15:42:10.527807 [ 83815 ] {} <Fatal> BaseDaemon: 9.0. inlined from src/Processors/Executors/ExecutionThreadContext.cpp:53: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)
2025.03.21 15:42:10.527842 [ 83815 ] {} <Fatal> BaseDaemon: 9. src/Processors/Executors/ExecutionThreadContext.cpp:102: DB::ExecutionThreadContext::executeTask() @ 0x000000003178066e
2025.03.21 15:42:10.542429 [ 83815 ] {} <Fatal> BaseDaemon: 10. src/Processors/Executors/PipelineExecutor.cpp:296: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*) @ 0x000000003176bb9f
2025.03.21 15:42:10.555666 [ 83815 ] {} <Fatal> BaseDaemon: 11.0. inlined from src/Processors/Executors/PipelineExecutor.cpp:262: DB::PipelineExecutor::executeSingleThread(unsigned long)
2025.03.21 15:42:10.555701 [ 83815 ] {} <Fatal> BaseDaemon: 11. src/Processors/Executors/PipelineExecutor.cpp:454: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x000000003176ad65
2025.03.21 15:42:10.569641 [ 83815 ] {} <Fatal> BaseDaemon: 12. src/Processors/Executors/PipelineExecutor.cpp:128: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x000000003176a76a
2025.03.21 15:42:10.580782 [ 83815 ] {} <Fatal> BaseDaemon: 13.0. inlined from src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:76: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long, bool)
2025.03.21 15:42:10.580815 [ 83815 ] {} <Fatal> BaseDaemon: 13.1. inlined from src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:102: operator()
2025.03.21 15:42:10.580840 [ 83815 ] {} <Fatal> BaseDaemon: 13.2. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:149: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>()()) std::__invoke[abi:ne190107]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&)
2025.03.21 15:42:10.580871 [ 83815 ] {} <Fatal> BaseDaemon: 13.3. inlined from contrib/llvm-project/libcxx/include/tuple:1354: decltype(auto) std::__apply_tuple_impl[abi:ne190107]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&, std::__tuple_indices<...>)
2025.03.21 15:42:10.580931 [ 83815 ] {} <Fatal> BaseDaemon: 13.4. inlined from contrib/llvm-project/libcxx/include/tuple:1358: decltype(auto) std::apply[abi:ne190107]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&)
2025.03.21 15:42:10.580988 [ 83815 ] {} <Fatal> BaseDaemon: 13.5. inlined from src/Common/ThreadPool.h:312: operator()
2025.03.21 15:42:10.581048 [ 83815 ] {} <Fatal> BaseDaemon: 13.6. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:149: decltype(std::declval<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>()()) std::__invoke[abi:ne190107]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)
2025.03.21 15:42:10.581112 [ 83815 ] {} <Fatal> BaseDaemon: 13.7. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:224: void std::__invoke_void_return_wrapper<void, true>::__call[abi:ne190107]<ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<true, true>::ThreadFromGlobalPoolImpl<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&&)::'lambda'()&)
2025.03.21 15:42:10.581169 [ 83815 ] {} <Fatal> BaseDaemon: 13.8. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:210: ?
2025.03.21 15:42:10.581215 [ 83815 ] {} <Fatal> BaseDaemon: 13. contrib/llvm-project/libcxx/include/__functional/function.h:610: ? @ 0x0000000031785677
2025.03.21 15:42:10.592267 [ 83815 ] {} <Fatal> BaseDaemon: 14.0. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:716: ?
2025.03.21 15:42:10.592298 [ 83815 ] {} <Fatal> BaseDaemon: 14.1. inlined from contrib/llvm-project/libcxx/include/__functional/function.h:989: ?
2025.03.21 15:42:10.592350 [ 83815 ] {} <Fatal> BaseDaemon: 14. src/Common/ThreadPool.cpp:809: ThreadPoolImpl<std::thread>::ThreadFromThreadPool::worker() @ 0x0000000023b3c32f
2025.03.21 15:42:10.612112 [ 83815 ] {} <Fatal> BaseDaemon: 15.0. inlined from contrib/llvm-project/libcxx/include/__type_traits/invoke.h:117: decltype(*std::declval<ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>().*std::declval<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)()>()()) std::__invoke[abi:ne190107]<void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, void>(void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*&&)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*&&)
2025.03.21 15:42:10.612154 [ 83815 ] {} <Fatal> BaseDaemon: 15.1. inlined from contrib/llvm-project/libcxx/include/__thread/thread.h:192: void std::__thread_execute[abi:ne190107]<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*, 2ul>(std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>&, std::__tuple_indices<2ul>)
2025.03.21 15:42:10.612226 [ 83815 ] {} <Fatal> BaseDaemon: 15. contrib/llvm-project/libcxx/include/__thread/thread.h:201: void* std::__thread_proxy[abi:ne190107]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void (ThreadPoolImpl<std::thread>::ThreadFromThreadPool::*)(), ThreadPoolImpl<std::thread>::ThreadFromThreadPool*>>(void*) @ 0x0000000023b43fca
2025.03.21 15:42:10.612280 [ 83815 ] {} <Fatal> BaseDaemon: 16. ? @ 0x00007ffff7ca1e2e
2025.03.21 15:42:10.612331 [ 83815 ] {} <Fatal> BaseDaemon: 17. ? @ 0x00007ffff7d33a4c
2025.03.21 15:42:10.875553 [ 83815 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: DF8FE130FCE935555E74F28FEE0F819A)
2025.03.21 15:42:11.307034 [ 83815 ] {} <Fatal> BaseDaemon: Changed settings: allow_reorder_prewhere_conditions = true, allow_suspicious_low_cardinality_types = true, allow_suspicious_fixed_string_types = true, allow_suspicious_indices = true, allow_suspicious_ttl_expressions = true, allow_suspicious_variant_types = true, allow_suspicious_primary_key = true, allow_suspicious_types_in_group_by = true, allow_suspicious_types_in_order_by = true, allow_not_comparable_types_in_order_by = true, allow_not_comparable_types_in_comparison_functions = true, allow_nonconst_timezone_arguments = true, allow_nondeterministic_optimize_skip_unused_shards = true, allow_distributed_ddl = true, allow_suspicious_codecs = true, enable_zstd_qat_codec = true, enable_deflate_qpl_codec = true, max_execution_time = 25., allow_custom_error_code_in_throwif = true, allow_ddl = true, allow_introspection_functions = true, allow_execute_multiif_columnar = true, allow_drop_detached = true, allow_materialized_view_with_bad_select = true, allow_settings_after_format_in_insert = true, allow_nondeterministic_mutations = true, allow_non_metadata_alters = true, allow_experimental_kafka_offsets_storage_in_keeper = true, allow_unrestricted_reads_from_keeper = true, allow_deprecated_database_ordinary = true, allow_deprecated_syntax_for_merge_tree = true, allow_get_client_http_header = true, allow_create_index_without_type = true, allow_named_collection_override_by_default = true, allow_deprecated_error_prone_window_functions = true, allow_deprecated_snowflake_conversion_functions = true, allow_experimental_parallel_reading_from_replicas = 1, cluster_for_parallel_replicas = 'test_cluster_one_shard_two_replicas', parallel_replicas_for_non_replicated_merge_tree = true, parallel_replicas_for_cluster_engines = false, allow_experimental_analyzer = true, allow_experimental_variant_type = true, allow_experimental_dynamic_type = true, allow_experimental_json_type = true, allow_experimental_materialized_postgresql_table = true, allow_experimental_funnel_functions = true, allow_experimental_nlp_functions = true, allow_experimental_hash_functions = true, allow_experimental_object_type = true, allow_experimental_time_series_table = true, allow_experimental_vector_similarity_index = true, allow_experimental_codecs = true, allow_experimental_shared_set_join = true, allow_experimental_join_right_table_sorting = true, allow_experimental_statistics = true, allow_archive_path_syntax = true, allow_experimental_inverted_index = true, allow_experimental_full_text_index = true, allow_experimental_join_condition = true, allow_experimental_live_view = true, allow_experimental_window_view = true, allow_experimental_database_materialized_postgresql = true, allow_experimental_database_iceberg = true, allow_experimental_kusto_dialect = true, allow_experimental_prql_dialect = true, allow_experimental_ts_to_grid_aggregate_function = true, allow_experimental_bfloat16_type = true, type_json_skip_duplicated_paths = true
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
