diff --git a/src/Storages/IndicesDescription.cpp b/src/Storages/IndicesDescription.cpp
index 06518a52c614..c723fa4225c2 100644
--- a/src/Storages/IndicesDescription.cpp
+++ b/src/Storages/IndicesDescription.cpp
@@ -10,6 +10,8 @@
 #include <Parsers/parseQuery.h>
 #include <Storages/extractKeyExpressionList.h>
 
+#include <Storages/ReplaceAliasByExpressionVisitor.h>
+
 #include <Core/Defines.h>
 #include "Common/Exception.h"
 
@@ -22,6 +24,11 @@ namespace ErrorCodes
     extern const int LOGICAL_ERROR;
 }
 
+namespace
+{
+using ReplaceAliasToExprVisitor = InDepthNodeVisitor<ReplaceAliasByExpressionMatcher, true>;
+}
+
 IndexDescription::IndexDescription(const IndexDescription & other)
     : definition_ast(other.definition_ast ? other.definition_ast->clone() : nullptr)
     , expression_list_ast(other.expression_list_ast ? other.expression_list_ast->clone() : nullptr)
@@ -94,6 +101,10 @@ IndexDescription IndexDescription::getIndexFromAST(const ASTPtr & definition_ast
     if (index_definition->expr)
     {
         expr_list = extractKeyExpressionList(index_definition->expr->clone());
+
+        ReplaceAliasToExprVisitor::Data data{columns};
+        ReplaceAliasToExprVisitor{data}.visit(expr_list);
+
         result.expression_list_ast = expr_list->clone();
     }
     else
diff --git a/src/Storages/ReplaceAliasByExpressionVisitor.cpp b/src/Storages/ReplaceAliasByExpressionVisitor.cpp
new file mode 100644
index 000000000000..b7836cfa9c46
--- /dev/null
+++ b/src/Storages/ReplaceAliasByExpressionVisitor.cpp
@@ -0,0 +1,32 @@
+#include <Storages/ReplaceAliasByExpressionVisitor.h>
+
+#include <Parsers/ASTIdentifier.h>
+#include <Parsers/ASTLiteral.h>
+#include <Storages/ColumnsDescription.h>
+#include <Common/typeid_cast.h>
+
+namespace DB
+{
+
+void ReplaceAliasByExpressionMatcher::visit(ASTPtr & ast, Data & data)
+{
+    if (auto * identifier = ast->as<ASTIdentifier>())
+    {
+        visit(*identifier, ast, data);
+    }
+}
+
+void ReplaceAliasByExpressionMatcher::visit(const ASTIdentifier & column, ASTPtr & ast, Data & data)
+{
+    const auto & column_name = column.name();
+    if (data.columns.hasAlias(column_name))
+    {
+        /// Alias expr is saved in default expr.
+        if (auto col_default = data.columns.getDefault(column_name))
+        {
+            ast = col_default->expression->clone();
+        }
+    }
+}
+
+}
diff --git a/src/Storages/ReplaceAliasByExpressionVisitor.h b/src/Storages/ReplaceAliasByExpressionVisitor.h
new file mode 100644
index 000000000000..4acc1fd4be7e
--- /dev/null
+++ b/src/Storages/ReplaceAliasByExpressionVisitor.h
@@ -0,0 +1,40 @@
+#pragma once
+
+#include <Parsers/IAST.h>
+#include <Interpreters/InDepthNodeVisitor.h>
+
+namespace DB
+{
+
+class ASTFunction;
+class ColumnsDescription;
+class ASTIdentifier;
+
+
+/* The Visitor is used to replace ALIAS by EXPRESSION when we refer to ALIAS
+ * column in index definition.
+ *
+ * For example, if we have following create statement:
+ * CREATE TABLE t
+ * (
+ *     col UInt8,
+ *     col_alias ALIAS  col + 1
+ *     INDEX idx (col_alias) TYPE minmax
+ * ) ENGINE = MergeTree ORDER BY col;
+ * we need call the visitor to replace `col_alias` by `col` + 1 when get index
+ * description from index definition AST.
+*/
+class ReplaceAliasByExpressionMatcher
+{
+public:
+    struct Data
+    {
+        const ColumnsDescription & columns;
+    };
+
+    static void visit(ASTPtr & ast, Data &);
+    static void visit(const ASTIdentifier &, ASTPtr & ast, Data &);
+    static bool needChildVisit(const ASTPtr &, const ASTPtr &) { return true; }
+};
+
+}
