{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 68262,
  "instance_id": "ClickHouse__ClickHouse-68262",
  "issue_numbers": [
    "68162"
  ],
  "base_commit": "6e42dfd7617096cada6d0c3817d66ee377d52151",
  "patch": "diff --git a/src/Processors/Transforms/WindowTransform.cpp b/src/Processors/Transforms/WindowTransform.cpp\nindex 85e6b2ec55e4..bd11aa4cd28a 100644\n--- a/src/Processors/Transforms/WindowTransform.cpp\n+++ b/src/Processors/Transforms/WindowTransform.cpp\n@@ -1157,8 +1157,7 @@ void WindowTransform::appendChunk(Chunk & chunk)\n         // Initialize output columns.\n         for (auto & ws : workspaces)\n         {\n-            if (ws.window_function_impl)\n-                block.casted_columns.push_back(ws.window_function_impl->castColumn(block.input_columns, ws.argument_column_indices));\n+            block.casted_columns.push_back(ws.window_function_impl ? ws.window_function_impl->castColumn(block.input_columns, ws.argument_column_indices) : nullptr);\n \n             block.output_columns.push_back(ws.aggregate_function->getResultType()\n                 ->createColumn());\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03210_lag_lead_inframe_types.reference b/tests/queries/0_stateless/03210_lag_lead_inframe_types.reference\nindex d4734a85e729..4ecf7f56b077 100644\n--- a/tests/queries/0_stateless/03210_lag_lead_inframe_types.reference\n+++ b/tests/queries/0_stateless/03210_lag_lead_inframe_types.reference\n@@ -38,3 +38,19 @@\n 7\n 8\n 9\n+15\t\\N\t3\t15\t15\t15\t15\n+14\t\\N\t2\t10\t10\t10\t154\n+13\t\\N\t2\t10\t10\t10\t143\n+12\t\\N\t2\t10\t10\t10\t14\n+11\t\\N\t2\t10\t10\t10\t12\n+10\t\\N\t2\t10\t10\t10\t10\n+9\t\\N\t1\t5\t5\t5\t99\n+8\t\\N\t1\t5\t5\t5\t88\n+7\t\\N\t1\t5\t5\t5\t9\n+6\t\\N\t1\t5\t5\t5\t7\n+5\t\\N\t1\t5\t5\t5\t5\n+4\t\\N\t0\t0\t0\t0\t44\n+3\t\\N\t0\t0\t0\t0\t33\n+2\t\\N\t0\t0\t0\t0\t4\n+1\t\\N\t0\t0\t0\t0\t2\n+0\t\\N\t0\t0\t0\t0\t0\ndiff --git a/tests/queries/0_stateless/03210_lag_lead_inframe_types.sql b/tests/queries/0_stateless/03210_lag_lead_inframe_types.sql\nindex f6017ee66907..cc6746e428f6 100644\n--- a/tests/queries/0_stateless/03210_lag_lead_inframe_types.sql\n+++ b/tests/queries/0_stateless/03210_lag_lead_inframe_types.sql\n@@ -2,3 +2,23 @@ SELECT lagInFrame(2::UInt128, 2, number) OVER w FROM numbers(10) WINDOW w AS (OR\n SELECT leadInFrame(2::UInt128, 2, number) OVER w FROM numbers(10) WINDOW w AS (ORDER BY number);\n SELECT lagInFrame(2::UInt64, 2, number) OVER w FROM numbers(10) WINDOW w AS (ORDER BY number);\n SELECT leadInFrame(2::UInt64, 2, number) OVER w FROM numbers(10) WINDOW w AS (ORDER BY number);\n+\n+SELECT\n+    number,\n+    YYYYMMDDToDate(1, toLowCardinality(11), max(YYYYMMDDToDate(YYYYMMDDToDate(toLowCardinality(1), 11, materialize(NULL), 19700101.1, 1, 27, 7, materialize(toUInt256(37)), 9, 19, 9), 1, toUInt128(11), NULL, 19700101.1, 1, 27, 7, 37, 9, 19, 9), toUInt256(30)) IGNORE NULLS OVER w, NULL, 19700101.1, toNullable(1), 27, materialize(7), 37, 9, 19, 9),\n+    p,\n+    pp,\n+    lagInFrame(number, number - pp) OVER w AS lag2,\n+    lagInFrame(number, number - pp, number * 11) OVER w AS lag,\n+    leadInFrame(number, number - pp, number * 11) OVER w AS lead\n+FROM\n+(\n+    SELECT\n+        number,\n+        intDiv(number, 5) AS p,\n+        p * 5 AS pp\n+    FROM numbers(16)\n+)\n+WHERE toLowCardinality(1)\n+WINDOW w AS (PARTITION BY p ORDER BY number ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\n+ORDER BY number DESC NULLS LAST;\n",
  "problem_statement": "Segfault with lagInFlame()\n**Describe the bug**\r\n[A link to the report](https://s3.amazonaws.com/clickhouse-test-reports/67700/f2b60c4f7410311afd18d03c458e780a924b6f94/ast_fuzzer__debug_.html)\r\n\r\n**How to reproduce**\r\nStack from debug build\r\n```\r\n[ip-10-2-2-126] 2024.08.11 18:36:03.980439 [ 165758 ] <Fatal> BaseDaemon: ########################################\r\n[ip-10-2-2-126] 2024.08.11 18:36:03.980556 [ 165758 ] <Fatal> BaseDaemon: (version 24.8.1.1, build id: 0C398F147D358D967328485E6D99FCA1DB3451E8, git hash: f2b60c4f7410311afd18d03c458e780a924b6f94) (from thread 165620) (query_id: 89524b8e-47c8-4bfc-a642-62383d1433e6) (query: SELECT\r\n    number,\r\n    YYYYMMDDToDate(1, toLowCardinality(11), max(YYYYMMDDToDate(YYYYMMDDToDate(toLowCardinality(1), 11, materialize(NULL), 19700101.1, 1, 27, 7, materialize(toUInt256(37)), 9, 19, 9), 1, toUInt128(11), NULL, 19700101.1, 1, 27, 7, 37, 9, 19, 9), toUInt256(30)) IGNORE NULLS OVER w, NULL, 19700101.1, toNullable(1), 27, materialize(7), 37, 9, 19, 9),\r\n    p,\r\n    pp,\r\n    lagInFrame(number, number - pp) OVER w AS lag2,\r\n    lagInFrame(number, number - pp, number * 11) OVER w AS lag,\r\n    leadInFrame(number, number - pp, number * 11) OVER w AS lead\r\nFROM\r\n(\r\n    SELECT\r\n        number,\r\n        intDiv(number, 5) AS p,\r\n        p * 5 AS pp\r\n    FROM numbers(16)\r\n)\r\nWHERE toLowCardinality(1)\r\nWINDOW w AS (PARTITION BY p ORDER BY number ASC NULLS FIRST ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)\r\nORDER BY number DESC NULLS LAST\r\nSETTINGS max_block_size = 3) Received signal Aborted (6)\r\n[ip-10-2-2-126] 2024.08.11 18:36:03.980637 [ 165758 ] <Fatal> BaseDaemon:\r\n[ip-10-2-2-126] 2024.08.11 18:36:03.980684 [ 165758 ] <Fatal> BaseDaemon: Stack trace: 0x000000000c745088 0x000000000c983abe 0x0000727893c42520 0x0000727893c969fd 0x0000727893c42476 0x0000727893c287f3 0x000000001867161d 0x00000000130cbe7a 0x00000000130b979c 0x00000000130b9b43 0x00000000130bc883 0x0000000012de3b2b 0x0000000012dd97b1 0x0000000012dd842c 0x0000000012dd7e45 0x0000000012de69ff 0x000000000c7ba901 0x000000000c7bee45 0x0000727893c94ac3 0x0000727893d26850\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.004720 [ 165758 ] <Fatal> BaseDaemon: 0.0. inlined from /home/ubuntu/git/ClickHouse/src/Common/StackTrace.cpp:349: StackTrace::tryCapture()\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.004785 [ 165758 ] <Fatal> BaseDaemon: 0. /home/ubuntu/git/ClickHouse/src/Common/StackTrace.cpp:318: StackTrace::StackTrace(ucontext_t const&) @ 0x000000000c745088\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.039807 [ 165758 ] <Fatal> BaseDaemon: 1. /home/ubuntu/git/ClickHouse/src/Common/SignalHandlers.cpp:0: signalHandler(int, siginfo_t*, void*) @ 0x000000000c983abe\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.039882 [ 165758 ] <Fatal> BaseDaemon: 2. ? @ 0x0000727893c42520\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.039926 [ 165758 ] <Fatal> BaseDaemon: 3. ? @ 0x0000727893c969fd\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.039970 [ 165758 ] <Fatal> BaseDaemon: 4. ? @ 0x0000727893c42476\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.040010 [ 165758 ] <Fatal> BaseDaemon: 5. ? @ 0x0000727893c287f3\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.133246 [ 165758 ] <Fatal> BaseDaemon: 6. ? @ 0x000000001867161d\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.295045 [ 165758 ] <Fatal> BaseDaemon: 7.0. inlined from /home/ubuntu/git/ClickHouse/contrib/llvm-project/libcxx/include/vector:1500: std::vector<unsigned long, std::allocator<unsigned long>>::operator[][abi:v15007](unsigned long) const\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.295111 [ 165758 ] <Fatal> BaseDaemon: 7. /home/ubuntu/git/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:2417: DB::WindowFunctionLagLeadInFrame<true>::windowInsertResultInto(DB::WindowTransform const*, unsigned long) const @ 0x00000000130cbe7a\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.385997 [ 165758 ] <Fatal> BaseDaemon: 8. /home/ubuntu/git/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:1052: DB::WindowTransform::writeOutCurrentRow() @ 0x00000000130b979c\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.477163 [ 165758 ] <Fatal> BaseDaemon: 9.0. inlined from /home/ubuntu/git/ClickHouse/contrib/llvm-project/libcxx/include/atomic:958: bool std::__cxx_atomic_load[abi:v15007]<bool>(std::__cxx_atomic_base_impl<bool> const*, std::memory_order)\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.477217 [ 165758 ] <Fatal> BaseDaemon: 9.1. inlined from /home/ubuntu/git/ClickHouse/contrib/llvm-project/libcxx/include/atomic:1560: std::__atomic_base<bool, false>::load[abi:v15007](std::memory_order) const\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.477252 [ 165758 ] <Fatal> BaseDaemon: 9.2. inlined from /home/ubuntu/git/ClickHouse/src/Processors/IProcessor.h:257: DB::IProcessor::isCancelled() const\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.477283 [ 165758 ] <Fatal> BaseDaemon: 9. /home/ubuntu/git/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:1247: DB::WindowTransform::appendChunk(DB::Chunk&) @ 0x00000000130b9b43\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.572089 [ 165758 ] <Fatal> BaseDaemon: 10.0. inlined from /home/ubuntu/git/ClickHouse/src/Processors/Transforms/WindowTransform.h:41: DB::RowNumber::operator<=>(DB::RowNumber const&) const\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.572136 [ 165758 ] <Fatal> BaseDaemon: 10. /home/ubuntu/git/ClickHouse/src/Processors/Transforms/WindowTransform.cpp:1487: DB::WindowTransform::work() @ 0x00000000130bc883\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.581845 [ 165758 ] <Fatal> BaseDaemon: 11.0. inlined from /home/ubuntu/git/ClickHouse/src/Processors/Executors/ExecutionThreadContext.cpp:0: DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*)\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.581884 [ 165758 ] <Fatal> BaseDaemon: 11. /home/ubuntu/git/ClickHouse/src/Processors/Executors/ExecutionThreadContext.cpp:96: DB::ExecutionThreadContext::executeTask() @ 0x0000000012de3b2b\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.613069 [ 165758 ] <Fatal> BaseDaemon: 12.0. inlined from /home/ubuntu/git/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:273: DB::PipelineExecutor::executeStepImpl(unsigned long, std::atomic<bool>*)\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.613113 [ 165758 ] <Fatal> BaseDaemon: 12. /home/ubuntu/git/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:239: DB::PipelineExecutor::executeSingleThread(unsigned long) @ 0x0000000012dd97b1\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.639633 [ 165758 ] <Fatal> BaseDaemon: 13.0. inlined from /home/ubuntu/git/ClickHouse/contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:701: ~shared_ptr\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.639677 [ 165758 ] <Fatal> BaseDaemon: 13. /home/ubuntu/git/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:412: DB::PipelineExecutor::executeImpl(unsigned long, bool) @ 0x0000000012dd842c\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.668869 [ 165758 ] <Fatal> BaseDaemon: 14.0. inlined from /home/ubuntu/git/ClickHouse/contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:274: std::unique_ptr<DB::ExecutingGraph, std::default_delete<DB::ExecutingGraph>>::operator->[abi:v15007]() const\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.668917 [ 165758 ] <Fatal> BaseDaemon: 14. /home/ubuntu/git/ClickHouse/src/Processors/Executors/PipelineExecutor.cpp:114: DB::PipelineExecutor::execute(unsigned long, bool) @ 0x0000000012dd7e45\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.696277 [ 165758 ] <Fatal> BaseDaemon: 15.0. inlined from /home/ubuntu/git/ClickHouse/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:0: DB::threadFunction(DB::PullingAsyncPipelineExecutor::Data&, std::shared_ptr<DB::ThreadGroup>, unsigned long, bool)\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.696321 [ 165758 ] <Fatal> BaseDaemon: 15.1. inlined from /home/ubuntu/git/ClickHouse/src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:109: operator()\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.696351 [ 165758 ] <Fatal> BaseDaemon: 15.2. inlined from /home/ubuntu/git/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394: ?\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.696384 [ 165758 ] <Fatal> BaseDaemon: 15.3. inlined from /home/ubuntu/git/ClickHouse/contrib/llvm-project/libcxx/include/tuple:1789: decltype(auto) std::__apply_tuple_impl[abi:v15007]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&, std::__tuple_indices<>)\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.696421 [ 165758 ] <Fatal> BaseDaemon: 15.4. inlined from /home/ubuntu/git/ClickHouse/contrib/llvm-project/libcxx/include/tuple:1798: decltype(auto) std::apply[abi:v15007]<DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&>(DB::PullingAsyncPipelineExecutor::pull(DB::Chunk&, unsigned long)::$_0&, std::tuple<>&)\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.696450 [ 165758 ] <Fatal> BaseDaemon: 15.5. inlined from /home/ubuntu/git/ClickHouse/src/Common/ThreadPool.h:251: operator()\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.696479 [ 165758 ] <Fatal> BaseDaemon: 15.6. inlined from /home/ubuntu/git/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:394: ?\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.696507 [ 165758 ] <Fatal> BaseDaemon: 15.7. inlined from /home/ubuntu/git/ClickHouse/contrib/llvm-project/libcxx/include/__functional/invoke.h:479: ?\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.696531 [ 165758 ] <Fatal> BaseDaemon: 15.8. inlined from /home/ubuntu/git/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:235: ?\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.696561 [ 165758 ] <Fatal> BaseDaemon: 15. /home/ubuntu/git/ClickHouse/contrib/llvm-project/libcxx/include/__functional/function.h:716: ? @ 0x0000000012de69ff\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.719481 [ 165758 ] <Fatal> BaseDaemon: 16.0. inlined from /home/ubuntu/git/ClickHouse/base/base/../base/strong_typedef.h:23: StrongTypedef<std::integral_constant<bool, true> >\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.719542 [ 165758 ] <Fatal> BaseDaemon: 16.1. inlined from /home/ubuntu/git/ClickHouse/src/Common/OpenTelemetryTraceContext.h:65: DB::OpenTelemetry::Span::isTraceEnabled() const\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.719578 [ 165758 ] <Fatal> BaseDaemon: 16. /home/ubuntu/git/ClickHouse/src/Common/ThreadPool.cpp:464: ThreadPoolImpl<std::thread>::worker(std::__list_iterator<std::thread, void*>) @ 0x000000000c7ba901\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.757412 [ 165758 ] <Fatal> BaseDaemon: 17.0. inlined from /home/ubuntu/git/ClickHouse/contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:302: std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>, std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>>::reset[abi:v15007](std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>*)\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.757478 [ 165758 ] <Fatal> BaseDaemon: 17.1. inlined from /home/ubuntu/git/ClickHouse/contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:259: ~unique_ptr\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.757529 [ 165758 ] <Fatal> BaseDaemon: 17. /home/ubuntu/git/ClickHouse/contrib/llvm-project/libcxx/include/thread:297: void* std::__thread_proxy[abi:v15007]<std::tuple<std::unique_ptr<std::__thread_struct, std::default_delete<std::__thread_struct>>, void ThreadPoolImpl<std::thread>::scheduleImpl<void>(std::function<void ()>, Priority, std::optional<unsigned long>, bool)::'lambda0'()>>(void*) @ 0x000000000c7bee45\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.757577 [ 165758 ] <Fatal> BaseDaemon: 18. ? @ 0x0000727893c94ac3\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.757623 [ 165758 ] <Fatal> BaseDaemon: 19. ? @ 0x0000727893d26850\r\n[ip-10-2-2-126] 2024.08.11 18:36:04.757667 [ 165758 ] <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\n[ip-10-2-2-126] 2024.08.11 18:36:05.471128 [ 165758 ] <Fatal> BaseDaemon: This ClickHouse version is not official and should be upgraded to the official build.\r\n[ip-10-2-2-126] 2024.08.11 18:36:05.471255 [ 165758 ] <Fatal> BaseDaemon: Changed settings: max_block_size = 3, log_queries = true, allow_introspection_functions = true\r\n\u2198 Progress: 16.00 rows, 128.00 B (3.24 rows/s., 25.96 B/s.)  99%Error on processing query: Code: 32. DB::Exception: Attempt to read after eof: while receiving packet from localhost:9000. (ATTEMPT_TO_READ_AFTER_EOF) (version 24.8.1.1)\r\n```\r\n\r\nCan be related to https://github.com/ClickHouse/ClickHouse/issues/67594\n",
  "hints_text": "There is four functions in the window, `function_index` is out of bounds of `current_block.casted_columns`.\r\n Since the first function is not WindowFunction, `current_block.casted_columns`'s size is 3. But `function_index` is 3.\r\n\r\n```c++\r\n// in WindowFunctionLagLeadInFrame::windowInsertResultInto\r\n                // Column with default values is specified.\r\n                const IColumn & default_column = current_block.casted_columns[function_index]\r\n                    ? *current_block.casted_columns[function_index].get()\r\n                    : *current_block.input_columns[workspace.argument_column_indices[2]].get();\r\n```\r\n\r\n```c++\r\n// in WindowTransform::appendChunk\r\n        // Initialize output columns.\r\n        for (auto & ws : workspaces)\r\n        {\r\n            if (ws.window_function_impl)\r\n                block.casted_columns.push_back(ws.window_function_impl->castColumn(block.input_columns, ws.argument_column_indices));\r\n\r\n            block.output_columns.push_back(ws.aggregate_function->getResultType()->createColumn());\r\n            block.output_columns.back()->reserve(block.rows);\r\n        }\r\n\r\n```\r\n\r\nMay fix by following\r\n```c++\r\n        // Initialize output columns.\r\n        for (auto & ws : workspaces)\r\n        {\r\n            if (ws.window_function_impl)\r\n                block.casted_columns.push_back(ws.window_function_impl->castColumn(block.input_columns, ws.argument_column_indices));\r\n            else\r\n            {\r\n                /// Put a empty column as a placeholder\r\n                block.casted_columns.push_back({});\r\n            }\r\n\r\n            block.output_columns.push_back(ws.aggregate_function->getResultType()->createColumn());\r\n            block.output_columns.back()->reserve(block.rows);\r\n        }\r\n```\r\n",
  "created_at": "2024-08-13T02:22:28Z",
  "modified_files": [
    "src/Processors/Transforms/WindowTransform.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/03210_lag_lead_inframe_types.reference",
    "tests/queries/0_stateless/03210_lag_lead_inframe_types.sql"
  ]
}