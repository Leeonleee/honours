{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 45065,
  "instance_id": "ClickHouse__ClickHouse-45065",
  "issue_numbers": [
    "45028"
  ],
  "base_commit": "742887ce53b7365c9c6dbf4fc1b6ad619f214dac",
  "patch": "diff --git a/src/Functions/FunctionsMiscellaneous.h b/src/Functions/FunctionsMiscellaneous.h\nindex d5c92c5d6668..1e9258f75b4f 100644\n--- a/src/Functions/FunctionsMiscellaneous.h\n+++ b/src/Functions/FunctionsMiscellaneous.h\n@@ -55,6 +55,8 @@ class ExecutableFunctionExpression : public IExecutableFunction\n     /// default implementation for Nothing.\n     /// Example: arrayMap(x -> CAST(x, 'UInt8'), []);\n     bool useDefaultImplementationForNothing() const override { return false; }\n+    /// Example: SELECT arrayMap(x -> (x + (arrayMap(y -> ((x + y) + toLowCardinality(1)), [])[1])), [])\n+    bool useDefaultImplementationForLowCardinalityColumns() const override { return false; }\n \n private:\n     ExpressionActionsPtr expression_actions;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00752_low_cardinality_lambda_argument.reference b/tests/queries/0_stateless/00752_low_cardinality_lambda_argument.reference\nindex b2e236400b0a..e48c1b8b2872 100644\n--- a/tests/queries/0_stateless/00752_low_cardinality_lambda_argument.reference\n+++ b/tests/queries/0_stateless/00752_low_cardinality_lambda_argument.reference\n@@ -9,3 +9,4 @@\n [0,2,4,6]\n [0,2,4,6,8]\n [['a']]\n+[]\ndiff --git a/tests/queries/0_stateless/00752_low_cardinality_lambda_argument.sql b/tests/queries/0_stateless/00752_low_cardinality_lambda_argument.sql\nindex 76c3d485ccb8..a4bdbd5653cf 100644\n--- a/tests/queries/0_stateless/00752_low_cardinality_lambda_argument.sql\n+++ b/tests/queries/0_stateless/00752_low_cardinality_lambda_argument.sql\n@@ -9,3 +9,5 @@ CREATE TABLE test_array(resources_host Array(LowCardinality(String))) ENGINE = M\n insert into test_array values (['a']);\n SELECT arrayMap(i -> [resources_host[i]], arrayEnumerate(resources_host)) FROM test_array;\n drop table if exists test_array;\n+\n+SELECT arrayMap(x -> (x + (arrayMap(y -> ((x + y) + toLowCardinality(1)), [])[1])), []);\n",
  "problem_statement": "Logical error: cannot capture column in lambda functions\nhttps://s3.amazonaws.com/clickhouse-test-reports/45013/8ca1740c37d7b4f19cc00ec1ee108d5ba9c51bad/fuzzer_astfuzzerubsan/report.html\r\n\r\n```\r\n2023.01.07 05:41:59.938242 [ 142 ] {689f7c9b-be6f-477a-94e9-1b4b52a90545} <Fatal> : Logical error: 'Cannot capture column 3 because it has incompatible type: got Int256, but LowCardinality(Int256) is expected.'.\r\n2023.01.07 05:41:59.939975 [ 442 ] {} <Fatal> BaseDaemon: ########################################\r\n2023.01.07 05:41:59.940013 [ 442 ] {} <Fatal> BaseDaemon: (version 22.13.1.1, build id: 6DC020D880ABD19775A54A5DC6544FB36B991393) (from thread 142) (query_id: 689f7c9b-be6f-477a-94e9-1b4b52a90545) (query: SELECT arrayMap(x -> (x + (arrayMap(y -> ((x + y) + id), [NULL])[1])), [-2147483647, 65537, 100]) FROM test_table__fuzz_17) Received signal Aborted (6)\r\n2023.01.07 05:41:59.940030 [ 442 ] {} <Fatal> BaseDaemon: \r\n2023.01.07 05:41:59.940069 [ 442 ] {} <Fatal> BaseDaemon: Stack trace: 0x7f56041ea00b 0x7f56041c9859 0x21890863 0x21890b6f 0x16fe11b5 0x2de9a331 0x2de95267 0x2de94fdb 0x2cb1c664 0x2cb1bd9f 0x2bf3b509 0x2bf3ca2c 0x2bf3e311 0x2ca960d4 0x2ca944a3 0x2ca97037 0x2cb1e028 0x2bf3b509 0x2bf3cd3b 0x2bf3e311 0x16fe0226 0x2de9b049 0x21079e22 0x16fe2b1f 0x16fe17a8 0x2bf3b499 0x2bf3cd3b 0x2bf3e311 0x2c869e1f 0x2f5255a5 0x2f79277c 0x2d6fa63c 0x2d6e7fb7 0x2d6e47d6 0x2d7bdc3b 0x2d7bf0fb 0x2dc269da 0x2dc2200c 0x2f08e870 0x2f0afdba 0x3010160c 0x30101afa\r\n2023.01.07 05:41:59.940097 [ 442 ] {} <Fatal> BaseDaemon: 3. gsignal @ 0x7f56041ea00b in ?\r\n2023.01.07 05:41:59.940114 [ 442 ] {} <Fatal> BaseDaemon: 4. abort @ 0x7f56041c9859 in ?\r\n2023.01.07 05:41:59.963429 [ 442 ] {} <Fatal> BaseDaemon: 5. ./build_docker/../src/Common/Exception.cpp:48: DB::abortOnFailedAssertion(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) @ 0x21890863 in /workspace/clickhouse\r\n2023.01.07 05:41:59.985394 [ 442 ] {} <Fatal> BaseDaemon: 6. ./build_docker/../src/Common/Exception.cpp:78: DB::Exception::Exception(DB::Exception::MessageMasked const&, int, bool) @ 0x21890b6f in /workspace/clickhouse\r\n2023.01.07 05:42:01.097763 [ 442 ] {} <Fatal> BaseDaemon: 7. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, int, bool) @ 0x16fe11b5 in /workspace/clickhouse\r\n2023.01.07 05:42:01.109678 [ 442 ] {} <Fatal> BaseDaemon: 8. ./build_docker/../src/Columns/ColumnFunction.cpp:0: DB::ColumnFunction::appendArgument(DB::ColumnWithTypeAndName const&) @ 0x2de9a331 in /workspace/clickhouse\r\n2023.01.07 05:42:01.120874 [ 442 ] {} <Fatal> BaseDaemon: 9.1. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__iterator/wrap_iter.h:100: std::__1::__wrap_iter<DB::ColumnWithTypeAndName const*>::operator++[abi:v15000]()\r\n2023.01.07 05:42:01.120936 [ 442 ] {} <Fatal> BaseDaemon: 9. ./build_docker/../src/Columns/ColumnFunction.cpp:256: DB::ColumnFunction::appendArguments(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&) @ 0x2de95267 in /workspace/clickhouse\r\n2023.01.07 05:42:01.132016 [ 442 ] {} <Fatal> BaseDaemon: 10. ./build_docker/../src/Columns/ColumnFunction.cpp:0: DB::ColumnFunction::ColumnFunction(unsigned long, std::__1::shared_ptr<DB::IFunctionBase const>, std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, bool, bool, bool) @ 0x2de94fdb in /workspace/clickhouse\r\n2023.01.07 05:42:01.271562 [ 442 ] {} <Fatal> BaseDaemon: 11. ./build_docker/../src/Common/COW.h:284: COW<DB::IColumn>::mutable_ptr<DB::ColumnFunction> COWHelper<DB::IColumn, DB::ColumnFunction>::create<unsigned long&, std::__1::unique_ptr<DB::FunctionExpression, std::__1::default_delete<DB::FunctionExpression>>, std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&>(unsigned long&, std::__1::unique_ptr<DB::FunctionExpression, std::__1::default_delete<DB::FunctionExpression>>&&, std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&) @ 0x2cb1c664 in /workspace/clickhouse\r\n2023.01.07 05:42:01.408473 [ 442 ] {} <Fatal> BaseDaemon: 12. ./build_docker/../src/Functions/FunctionsMiscellaneous.h:149: DB::ExecutableFunctionCapture::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x2cb1bd9f in /workspace/clickhouse\r\n2023.01.07 05:42:01.422477 [ 442 ] {} <Fatal> BaseDaemon: 13. ./build_docker/../src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x2bf3b509 in /workspace/clickhouse\r\n2023.01.07 05:42:01.437304 [ 442 ] {} <Fatal> BaseDaemon: 14.1. inlined from ./build_docker/../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: intrusive_ptr\r\n2023.01.07 05:42:01.437355 [ 442 ] {} <Fatal> BaseDaemon: 14.2. inlined from ./build_docker/../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:122: boost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n2023.01.07 05:42:01.437385 [ 442 ] {} <Fatal> BaseDaemon: 14.3. inlined from ./build_docker/../src/Common/COW.h:136: COW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n2023.01.07 05:42:01.437416 [ 442 ] {} <Fatal> BaseDaemon: 14. ./build_docker/../src/Functions/IFunction.cpp:306: DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x2bf3ca2c in /workspace/clickhouse\r\n2023.01.07 05:42:01.452773 [ 442 ] {} <Fatal> BaseDaemon: 15. ./build_docker/../src/Functions/IFunction.cpp:0: DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x2bf3e311 in /workspace/clickhouse\r\n2023.01.07 05:42:01.516894 [ 442 ] {} <Fatal> BaseDaemon: 16.1. inlined from ./build_docker/../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: intrusive_ptr\r\n2023.01.07 05:42:01.516967 [ 442 ] {} <Fatal> BaseDaemon: 16.2. inlined from ./build_docker/../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:122: boost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n2023.01.07 05:42:01.516998 [ 442 ] {} <Fatal> BaseDaemon: 16.3. inlined from ./build_docker/../src/Common/COW.h:136: COW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n2023.01.07 05:42:01.517029 [ 442 ] {} <Fatal> BaseDaemon: 16. ./build_docker/../src/Interpreters/ExpressionActions.cpp:607: DB::executeAction(DB::ExpressionActions::Action const&, DB::(anonymous namespace)::ExecutionContext&, bool) @ 0x2ca960d4 in /workspace/clickhouse\r\n2023.01.07 05:42:01.570027 [ 442 ] {} <Fatal> BaseDaemon: 17. ./build_docker/../src/Interpreters/ExpressionActions.cpp:0: DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const @ 0x2ca944a3 in /workspace/clickhouse\r\n2023.01.07 05:42:01.623182 [ 442 ] {} <Fatal> BaseDaemon: 18.1. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/vector:537: std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>>::size[abi:v15000]() const\r\n2023.01.07 05:42:01.623240 [ 442 ] {} <Fatal> BaseDaemon: 18.2. inlined from ./build_docker/../src/Core/Block.h:108: DB::Block::columns() const\r\n2023.01.07 05:42:01.623273 [ 442 ] {} <Fatal> BaseDaemon: 18.3. inlined from ./build_docker/../src/Core/Block.h:119: DB::Block::operator bool() const\r\n2023.01.07 05:42:01.623301 [ 442 ] {} <Fatal> BaseDaemon: 18.4. inlined from ./build_docker/../src/Core/Block.h:120: DB::Block::operator!() const\r\n2023.01.07 05:42:01.623333 [ 442 ] {} <Fatal> BaseDaemon: 18. ./build_docker/../src/Interpreters/ExpressionActions.cpp:770: DB::ExpressionActions::execute(DB::Block&, bool) const @ 0x2ca97037 in /workspace/clickhouse\r\n2023.01.07 05:42:01.760466 [ 442 ] {} <Fatal> BaseDaemon: 19. ./build_docker/../src/Functions/FunctionsMiscellaneous.h:50: DB::ExecutableFunctionExpression::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x2cb1e028 in /workspace/clickhouse\r\n2023.01.07 05:42:01.774399 [ 442 ] {} <Fatal> BaseDaemon: 20. ./build_docker/../src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x2bf3b509 in /workspace/clickhouse\r\n2023.01.07 05:42:01.789314 [ 442 ] {} <Fatal> BaseDaemon: 21.1. inlined from ./build_docker/../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: intrusive_ptr\r\n2023.01.07 05:42:01.789380 [ 442 ] {} <Fatal> BaseDaemon: 21.2. inlined from ./build_docker/../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:122: boost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n2023.01.07 05:42:01.789403 [ 442 ] {} <Fatal> BaseDaemon: 21.3. inlined from ./build_docker/../src/Common/COW.h:136: COW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n2023.01.07 05:42:01.789417 [ 442 ] {} <Fatal> BaseDaemon: 21. ./build_docker/../src/Functions/IFunction.cpp:302: DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x2bf3cd3b in /workspace/clickhouse\r\n2023.01.07 05:42:01.804840 [ 442 ] {} <Fatal> BaseDaemon: 22. ./build_docker/../src/Functions/IFunction.cpp:0: DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x2bf3e311 in /workspace/clickhouse\r\n2023.01.07 05:42:02.896754 [ 442 ] {} <Fatal> BaseDaemon: 23. DB::IFunctionBase::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x16fe0226 in /workspace/clickhouse\r\n2023.01.07 05:42:02.909681 [ 442 ] {} <Fatal> BaseDaemon: 24.1. inlined from ./build_docker/../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: intrusive_ptr\r\n2023.01.07 05:42:02.909738 [ 442 ] {} <Fatal> BaseDaemon: 24.2. inlined from ./build_docker/../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:122: boost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n2023.01.07 05:42:02.909753 [ 442 ] {} <Fatal> BaseDaemon: 24.3. inlined from ./build_docker/../src/Common/COW.h:136: COW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n2023.01.07 05:42:02.909767 [ 442 ] {} <Fatal> BaseDaemon: 24. ./build_docker/../src/Columns/ColumnFunction.cpp:310: DB::ColumnFunction::reduce() const @ 0x2de9b049 in /workspace/clickhouse\r\n2023.01.07 05:42:04.007525 [ 442 ] {} <Fatal> BaseDaemon: 25. DB::FunctionArrayMapped<DB::ArrayMapImpl, DB::NameArrayMap>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x21079e22 in /workspace/clickhouse\r\n2023.01.07 05:42:05.099321 [ 442 ] {} <Fatal> BaseDaemon: 26. DB::IFunction::executeImplDryRun(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x16fe2b1f in /workspace/clickhouse\r\n2023.01.07 05:42:06.202613 [ 442 ] {} <Fatal> BaseDaemon: 27. DB::FunctionToExecutableFunctionAdaptor::executeDryRunImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x16fe17a8 in /workspace/clickhouse\r\n2023.01.07 05:42:06.216505 [ 442 ] {} <Fatal> BaseDaemon: 28. ./build_docker/../src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x2bf3b499 in /workspace/clickhouse\r\n2023.01.07 05:42:06.231404 [ 442 ] {} <Fatal> BaseDaemon: 29.1. inlined from ./build_docker/../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: intrusive_ptr\r\n2023.01.07 05:42:06.231475 [ 442 ] {} <Fatal> BaseDaemon: 29.2. inlined from ./build_docker/../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:122: boost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n2023.01.07 05:42:06.231493 [ 442 ] {} <Fatal> BaseDaemon: 29.3. inlined from ./build_docker/../src/Common/COW.h:136: COW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n2023.01.07 05:42:06.231507 [ 442 ] {} <Fatal> BaseDaemon: 29. ./build_docker/../src/Functions/IFunction.cpp:302: DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x2bf3cd3b in /workspace/clickhouse\r\n2023.01.07 05:42:06.246917 [ 442 ] {} <Fatal> BaseDaemon: 30. ./build_docker/../src/Functions/IFunction.cpp:0: DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x2bf3e311 in /workspace/clickhouse\r\n2023.01.07 05:42:06.438448 [ 442 ] {} <Fatal> BaseDaemon: 31.1. inlined from ./build_docker/../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: intrusive_ptr\r\n2023.01.07 05:42:06.438508 [ 442 ] {} <Fatal> BaseDaemon: 31.2. inlined from ./build_docker/../contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:122: boost::intrusive_ptr<DB::IColumn const>::operator=(boost::intrusive_ptr<DB::IColumn const>&&)\r\n2023.01.07 05:42:06.438524 [ 442 ] {} <Fatal> BaseDaemon: 31.3. inlined from ./build_docker/../src/Common/COW.h:136: COW<DB::IColumn>::immutable_ptr<DB::IColumn>::operator=(COW<DB::IColumn>::immutable_ptr<DB::IColumn>&&)\r\n2023.01.07 05:42:06.438541 [ 442 ] {} <Fatal> BaseDaemon: 31.4. inlined from ./build_docker/../src/Interpreters/ActionsDAG.cpp:499: DB::executeActionForHeader(DB::ActionsDAG::Node const*, std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>>)\r\n2023.01.07 05:42:06.438571 [ 442 ] {} <Fatal> BaseDaemon: 31. ./build_docker/../src/Interpreters/ActionsDAG.cpp:616: DB::ActionsDAG::updateHeader(DB::Block) const @ 0x2c869e1f in /workspace/clickhouse\r\n2023.01.07 05:42:06.451238 [ 442 ] {} <Fatal> BaseDaemon: 32. ./build_docker/../src/Processors/Transforms/ExpressionTransform.cpp:0: DB::ExpressionTransform::transformHeader(DB::Block, DB::ActionsDAG const&) @ 0x2f5255a5 in /workspace/clickhouse\r\n2023.01.07 05:42:06.474835 [ 442 ] {} <Fatal> BaseDaemon: 33.1. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:815: std::__1::shared_ptr<DB::ActionsDAG>::operator->[abi:v15000]() const\r\n2023.01.07 05:42:06.474891 [ 442 ] {} <Fatal> BaseDaemon: 33.2. inlined from ./build_docker/../src/Processors/QueryPlan/ExpressionStep.cpp:18: DB::getTraits(std::__1::shared_ptr<DB::ActionsDAG> const&, DB::Block const&, DB::SortDescription const&)\r\n2023.01.07 05:42:06.474919 [ 442 ] {} <Fatal> BaseDaemon: 33. ./build_docker/../src/Processors/QueryPlan/ExpressionStep.cpp:33: DB::ExpressionStep::ExpressionStep(DB::DataStream const&, std::__1::shared_ptr<DB::ActionsDAG> const&) @ 0x2f79277c in /workspace/clickhouse\r\n2023.01.07 05:42:06.589942 [ 442 ] {} <Fatal> BaseDaemon: 34. ./build_docker/../src/Interpreters/InterpreterSelectQuery.cpp:2609: DB::InterpreterSelectQuery::executeExpression(DB::QueryPlan&, std::__1::shared_ptr<DB::ActionsDAG> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) @ 0x2d6fa63c in /workspace/clickhouse\r\n2023.01.07 05:42:06.702325 [ 442 ] {} <Fatal> BaseDaemon: 35.1. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/string:1499: std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__is_long[abi:v15000]() const\r\n2023.01.07 05:42:06.702396 [ 442 ] {} <Fatal> BaseDaemon: 35.2. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/string:2333: ~basic_string\r\n2023.01.07 05:42:06.702427 [ 442 ] {} <Fatal> BaseDaemon: 35. ./build_docker/../src/Interpreters/InterpreterSelectQuery.cpp:1560: DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::__1::optional<DB::Pipe>) @ 0x2d6e7fb7 in /workspace/clickhouse\r\n2023.01.07 05:42:06.814037 [ 442 ] {} <Fatal> BaseDaemon: 36.1. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/optional:260: ~__optional_destruct_base\r\n2023.01.07 05:42:06.814115 [ 442 ] {} <Fatal> BaseDaemon: 36. ./build_docker/../src/Interpreters/InterpreterSelectQuery.cpp:731: DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x2d6e47d6 in /workspace/clickhouse\r\n2023.01.07 05:42:06.855142 [ 442 ] {} <Fatal> BaseDaemon: 37. ./build_docker/../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:304: DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x2d7bdc3b in /workspace/clickhouse\r\n2023.01.07 05:42:06.896131 [ 442 ] {} <Fatal> BaseDaemon: 38. ./build_docker/../src/Interpreters/InterpreterSelectWithUnionQuery.cpp:0: DB::InterpreterSelectWithUnionQuery::execute() @ 0x2d7bf0fb in /workspace/clickhouse\r\n2023.01.07 05:42:06.954013 [ 442 ] {} <Fatal> BaseDaemon: 39. ./build_docker/../src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x2dc269da in /workspace/clickhouse\r\n2023.01.07 05:42:07.015642 [ 442 ] {} <Fatal> BaseDaemon: 40. ./build_docker/../src/Interpreters/executeQuery.cpp:1104: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x2dc2200c in /workspace/clickhouse\r\n2023.01.07 05:42:07.071618 [ 442 ] {} <Fatal> BaseDaemon: 41. ./build_docker/../src/Server/TCPHandler.cpp:378: DB::TCPHandler::runImpl() @ 0x2f08e870 in /workspace/clickhouse\r\n2023.01.07 05:42:07.140328 [ 442 ] {} <Fatal> BaseDaemon: 42. ./build_docker/../src/Server/TCPHandler.cpp:1933: DB::TCPHandler::run() @ 0x2f0afdba in /workspace/clickhouse\r\n2023.01.07 05:42:07.146001 [ 442 ] {} <Fatal> BaseDaemon: 43. ./build_docker/../contrib/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x3010160c in /workspace/clickhouse\r\n2023.01.07 05:42:07.153488 [ 442 ] {} <Fatal> BaseDaemon: 44.1. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: std::__1::default_delete<Poco::Net::TCPServerConnection>::operator()[abi:v15000](Poco::Net::TCPServerConnection*) const\r\n2023.01.07 05:42:07.153540 [ 442 ] {} <Fatal> BaseDaemon: 44.2. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:305: std::__1::unique_ptr<Poco::Net::TCPServerConnection, std::__1::default_delete<Poco::Net::TCPServerConnection>>::reset[abi:v15000](Poco::Net::TCPServerConnection*)\r\n2023.01.07 05:42:07.153567 [ 442 ] {} <Fatal> BaseDaemon: 44.3. inlined from ./build_docker/../contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:259: ~unique_ptr\r\n2023.01.07 05:42:07.153595 [ 442 ] {} <Fatal> BaseDaemon: 44. ./build_docker/../contrib/poco/Net/src/TCPServerDispatcher.cpp:116: Poco::Net::TCPServerDispatcher::run() @ 0x30101afa in /workspace/clickhouse\r\n2023.01.07 05:42:07.153628 [ 442 ] {} <Fatal> BaseDaemon: Integrity check of the executable skipped because the reference checksum could not be read.\r\n2023.01.07 05:43:02.587357 [ 133 ] {} <Fatal> Application: Child process was terminated by signal 6.\r\n```\n",
  "hints_text": "```\r\nSELECT arrayMap(x -> (x + (arrayMap(y -> ((x + y) + toLowCardinality(1)), [])[1])), [])\r\n\r\nQuery id: 1f8ec6f7-506e-4d3a-b74e-4fd0615e1564\r\n\r\n\r\n0 rows in set. Elapsed: 0.002 sec. \r\n\r\nReceived exception from server (version 22.13.1):\r\nCode: 49. DB::Exception: Received from localhost:9000. DB::Exception: Cannot capture column 3 because it has incompatible type: got UInt8, but LowCardinality(UInt8) is expected.: while executing 'FUNCTION Capture[Nothing, LowCardinality(UInt8)](Nothing) -> Nothing(x : 0, toLowCardinality(1) :: 3) -> __lambda Function(Nothing -> Nothing) : 4'. Stack trace:\r\n\r\n0. ./build/./contrib/llvm-project/libcxx/include/exception:134: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, int) @ 0x166e3ef3 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n1. ./build/./src/Common/Exception.cpp:77: DB::Exception::Exception(DB::Exception::MessageMasked const&, int, bool) @ 0xfa7ba1a in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n2. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, int, bool) @ 0xac5dd4d in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n3. ./build/./src/Columns/ColumnFunction.cpp:0: DB::ColumnFunction::appendArgument(DB::ColumnWithTypeAndName const&) @ 0x1515eb88 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n4. ./build/./contrib/llvm-project/libcxx/include/__iterator/wrap_iter.h:100: DB::ColumnFunction::appendArguments(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&) @ 0x1515bddb in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n5. ./build/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:596: DB::ColumnFunction::ColumnFunction(unsigned long, std::__1::shared_ptr<DB::IFunctionBase const>, std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, bool, bool, bool) @ 0x1515bb8b in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n6. ./build/./src/Common/COW.h:284: DB::ExecutableFunctionCapture::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x14607a5f in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n7. ./build/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dd3647 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n8. ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dd3db1 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n9. ./build/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dd4f2d in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n10. ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool) const @ 0x145b6dad in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n11. ./build/./contrib/llvm-project/libcxx/include/vector:537: DB::ExpressionActions::execute(DB::Block&, bool) const @ 0x145b7c78 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n12. ./build/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:815: DB::ExecutableFunctionExpression::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0x14608c21 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n13. ./build/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dd3647 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n14. ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dd3e8c in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n15. ./build/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dd4f2d in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n16. DB::IFunctionBase::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0xac5da2d in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n17. ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: DB::ColumnFunction::reduce() const @ 0x1515f307 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n18. DB::FunctionArrayMapped<DB::ArrayMapImpl, DB::NameArrayMap>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xf71c753 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n19. DB::IFunction::executeImplDryRun(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xac5e1ea in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n20. DB::FunctionToExecutableFunctionAdaptor::executeDryRunImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xac5deee in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n21. ./build/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dd362e in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n22. ./build/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dd3e8c in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n23. ./build/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dd4f2d in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n24. ./build/./src/Interpreters/ActionsDAG.cpp:0: DB::ActionsDAG::updateHeader(DB::Block) const @ 0x1444db76 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n25. ./build/./src/Processors/Transforms/ExpressionTransform.cpp:0: DB::ExpressionTransform::transformHeader(DB::Block, DB::ActionsDAG const&) @ 0x15d72a4d in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n26. ./build/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:815: DB::ExpressionStep::ExpressionStep(DB::DataStream const&, std::__1::shared_ptr<DB::ActionsDAG> const&) @ 0x15e92204 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n27. ./build/./contrib/llvm-project/libcxx/include/string:1499: DB::InterpreterSelectQuery::executeExpression(DB::QueryPlan&, std::__1::shared_ptr<DB::ActionsDAG> const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&) @ 0x14cc9867 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n28. ./build/./contrib/llvm-project/libcxx/include/string:1499: DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::__1::optional<DB::Pipe>) @ 0x14cc0767 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n29. ./build/./contrib/llvm-project/libcxx/include/optional:260: DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x14cbed84 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n30. ./build/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:0: DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x14d55013 in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n31. ./build/./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:603: DB::InterpreterSelectWithUnionQuery::execute() @ 0x14d55c7b in /home/ubuntu/dev/ClickHouse/build/programs/clickhouse\r\n. (LOGICAL_ERROR)\r\n\r\n```",
  "created_at": "2023-01-09T14:59:14Z",
  "modified_files": [
    "src/Functions/FunctionsMiscellaneous.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00752_low_cardinality_lambda_argument.reference",
    "tests/queries/0_stateless/00752_low_cardinality_lambda_argument.sql"
  ]
}