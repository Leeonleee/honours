{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 34866,
  "instance_id": "ClickHouse__ClickHouse-34866",
  "issue_numbers": [
    "34864"
  ],
  "base_commit": "e3ca6931c7522e5e6818a7b6a5e471284ee3087f",
  "patch": "diff --git a/src/Interpreters/AsynchronousInsertQueue.cpp b/src/Interpreters/AsynchronousInsertQueue.cpp\nindex 5321d5f6fd35..9f300c36b81a 100644\n--- a/src/Interpreters/AsynchronousInsertQueue.cpp\n+++ b/src/Interpreters/AsynchronousInsertQueue.cpp\n@@ -184,7 +184,10 @@ void AsynchronousInsertQueue::push(ASTPtr query, ContextPtr query_context)\n     if (!FormatFactory::instance().isInputFormat(insert_query.format))\n         throw Exception(ErrorCodes::UNKNOWN_FORMAT, \"Unknown input format {}\", insert_query.format);\n \n-    query_context->checkAccess(AccessType::INSERT, insert_query.table_id, sample_block.getNames());\n+    /// For table functions we check access while executing\n+    /// InterpreterInsertQuery::getTable() -> ITableFunction::execute().\n+    if (insert_query.table_id)\n+        query_context->checkAccess(AccessType::INSERT, insert_query.table_id, sample_block.getNames());\n \n     String bytes;\n     {\n@@ -411,7 +414,7 @@ try\n     };\n \n     std::shared_ptr<ISimpleTransform> adding_defaults_transform;\n-    if (insert_context->getSettingsRef().input_format_defaults_for_omitted_fields)\n+    if (insert_context->getSettingsRef().input_format_defaults_for_omitted_fields && insert_query.table_id)\n     {\n         StoragePtr storage = DatabaseCatalog::instance().getTable(insert_query.table_id, insert_context);\n         auto metadata_snapshot = storage->getInMemoryMetadataPtr();\ndiff --git a/src/Interpreters/InterpreterInsertQuery.cpp b/src/Interpreters/InterpreterInsertQuery.cpp\nindex f43d108de9e7..c12a57782750 100644\n--- a/src/Interpreters/InterpreterInsertQuery.cpp\n+++ b/src/Interpreters/InterpreterInsertQuery.cpp\n@@ -283,6 +283,9 @@ BlockIO InterpreterInsertQuery::execute()\n     auto metadata_snapshot = table->getInMemoryMetadataPtr();\n \n     auto query_sample_block = getSampleBlock(query, table, metadata_snapshot);\n+\n+    /// For table functions we check access while executing\n+    /// getTable() -> ITableFunction::execute().\n     if (!query.table_function)\n         getContext()->checkAccess(AccessType::INSERT, query.table_id, query_sample_block.getNames());\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02226_async_insert_table_function.reference b/tests/queries/0_stateless/02226_async_insert_table_function.reference\nnew file mode 100644\nindex 000000000000..60d475a7393b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02226_async_insert_table_function.reference\n@@ -0,0 +1,2 @@\n+1\taaa\n+2\tbbb\ndiff --git a/tests/queries/0_stateless/02226_async_insert_table_function.sql b/tests/queries/0_stateless/02226_async_insert_table_function.sql\nnew file mode 100644\nindex 000000000000..fc4aadfbfcd2\n--- /dev/null\n+++ b/tests/queries/0_stateless/02226_async_insert_table_function.sql\n@@ -0,0 +1,11 @@\n+DROP TABLE IF EXISTS t_async_insert_table_function;\n+\n+CREATE TABLE t_async_insert_table_function (id UInt32, s String) ENGINE = Memory;\n+\n+SET async_insert = 1;\n+\n+INSERT INTO function remote('127.0.0.1', currentDatabase(), t_async_insert_table_function) values (1, 'aaa') (2, 'bbb');\n+\n+SELECT * FROM t_async_insert_table_function ORDER BY id;\n+\n+DROP TABLE t_async_insert_table_function;\n",
  "problem_statement": "async_insert to table function gives exception 'Both table name and UUID are empty'\n```\r\ncreate table test (x UInt64) engine=Null;\r\ninsert into function remote('127.0.0.1',default,test) values (1);\r\n-- ok\r\nset async_insert=1;\r\ninsert into function remote('127.0.0.1',default,test) values (1);\r\n-- fail\r\n```\r\n\r\nexception\r\n\r\n```\r\nReceived exception from server (version 22.3.1):\r\nCode: 60. DB::Exception: Received from localhost:9000. DB::Exception: Both table name and UUID are empty. Stack trace:\r\n\r\n0. ./build_docker/../contrib/libcxx/include/exception:133: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x15bff96c in /usr/bin/clickhouse\r\n1. ./build_docker/../src/Common/Exception.cpp:58: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xa8d817a in /usr/bin/clickhouse\r\n2. DB::StorageID::assertNotEmpty() const @ 0x10225ff1 in /usr/bin/clickhouse\r\n3. ./build_docker/../contrib/libcxx/include/string:1444: DB::StorageID::getDatabaseName() const @ 0x131ec0d6 in /usr/bin/clickhouse\r\n4. ./build_docker/../src/Interpreters/Context.cpp:0: DB::Context::checkAccess(DB::AccessFlags const&, DB::StorageID const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) const @ 0x12b96564 in /usr/bin/clickhouse\r\n5. ./build_docker/../contrib/libcxx/include/vector:463: DB::AsynchronousInsertQueue::push(std::__1::shared_ptr<DB::IAST>, std::__1::shared_ptr<DB::Context const>) @ 0x12b61130 in /usr/bin/clickhouse\r\n6. ./build_docker/../src/Interpreters/executeQuery.cpp:0: DB::executeQueryImpl(char const*, char const*, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x132fbb4e in /usr/bin/clickhouse\r\n7. ./build_docker/../src/Interpreters/executeQuery.cpp:985: DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum) @ 0x132fa4cd in /usr/bin/clickhouse\r\n8. ./build_docker/../src/Server/TCPHandler.cpp:0: DB::TCPHandler::runImpl() @ 0x13b66440 in /usr/bin/clickhouse\r\n9. ./build_docker/../src/Server/TCPHandler.cpp:1918: DB::TCPHandler::run() @ 0x13b75759 in /usr/bin/clickhouse\r\n10. ./build_docker/../contrib/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x15aef967 in /usr/bin/clickhouse\r\n11. ./build_docker/../contrib/libcxx/include/memory:1397: Poco::Net::TCPServerDispatcher::run() @ 0x15aefe27 in /usr/bin/clickhouse\r\n12. ./build_docker/../contrib/poco/Foundation/src/ThreadPool.cpp:213: Poco::PooledThread::run() @ 0x15c619e7 in /usr/bin/clickhouse\r\n13. ./build_docker/../contrib/poco/Foundation/include/Poco/SharedPtr.h:156: Poco::ThreadImpl::runnableEntry(void*) @ 0x15c5f3c6 in /usr/bin/clickhouse\r\n14. ? @ 0x7f742d0b7609 in ?\r\n15. clone @ 0x7f742cfde293 in ?\r\n. (UNKNOWN_TABLE)\r\n```\n",
  "hints_text": "",
  "created_at": "2022-02-24T11:28:02Z",
  "modified_files": [
    "src/Interpreters/AsynchronousInsertQueue.cpp",
    "src/Interpreters/InterpreterInsertQuery.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02226_async_insert_table_function.reference",
    "b/tests/queries/0_stateless/02226_async_insert_table_function.sql"
  ]
}