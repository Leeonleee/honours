You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Redis Storage engine support for point queries
### Company or project name

_No response_

### Describe the unexpected behaviour

We've identified a major performance regression when running point queries against Redis. Instead of performing a direct key lookup, the engine is now scanning all keys using a SCAN followed by an MGET, even for simple lookups by key like:

`SELECT * FROM redis_table WHERE id = 'user:123';`
should be a performant point query


### Which ClickHouse versions are affected?

This was introduced between 23 and 25, not clear when this was introduced, but the recent latest stable versions have the issue.

### How to reproduce

example:
```
-- Create a Redis-backed table
CREATE TABLE redis_table
(
    id String,
    value String
)
ENGINE = Redis('localhost:6379')
primary key id;

-- Insert test data into Redis separately
-- For example, using redis-cli:
-- SET user:123 '{"value":"John"}'
-- SET user:456 '{"value":"Alice"}'

-- Run a point query
SELECT * FROM redis_table WHERE id = 'user:123';

```
Observe that the logs in redis show a SCAN of all keys followed by an MGET and the query is unacceptably slow for this usecase

### Expected behavior

`SELECT * FROM redis_table WHERE id = 'user:123';` should generate a `GET` on redis

### Error message and/or stacktrace

_No response_

### Additional context

This regression turns what should be a constant-time key lookup into a slow linear scan, I am thinking it likely stems from changes made in recent ClickHouse versions that broke this feature for the Redis engine. To clarify,  we have been utilizing this integration in production in the past 1-2 years with high performance on clickhouse 23.8.4.69
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
