diff --git a/src/Storages/StorageFile.cpp b/src/Storages/StorageFile.cpp
index 672727b1478d..4f66c76f1eb2 100644
--- a/src/Storages/StorageFile.cpp
+++ b/src/Storages/StorageFile.cpp
@@ -444,36 +444,24 @@ class StorageFileSource : public ISource
 
     using FilesInfoPtr = std::shared_ptr<FilesInfo>;
 
-    static Block getHeader(const StorageMetadataPtr & metadata_snapshot, bool need_path_column, bool need_file_column)
+    static Block getBlockForSource(const Block & block_for_format, const FilesInfoPtr & files_info)
     {
-        auto header = metadata_snapshot->getSampleBlock();
-
-        /// Note: AddingDefaultsTransform doesn't change header.
-
-        if (need_path_column)
-            header.insert(
+        auto res = block_for_format;
+        if (files_info->need_path_column)
+        {
+            res.insert(
                 {DataTypeLowCardinality{std::make_shared<DataTypeString>()}.createColumn(),
                  std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()),
                  "_path"});
-        if (need_file_column)
-            header.insert(
+        }
+        if (files_info->need_file_column)
+        {
+            res.insert(
                 {DataTypeLowCardinality{std::make_shared<DataTypeString>()}.createColumn(),
                  std::make_shared<DataTypeLowCardinality>(std::make_shared<DataTypeString>()),
                  "_file"});
-
-        return header;
-    }
-
-    static Block getBlockForSource(
-        const StorageFilePtr & storage,
-        const StorageSnapshotPtr & storage_snapshot,
-        const ColumnsDescription & columns_description,
-        const FilesInfoPtr & files_info)
-    {
-        if (storage->supportsSubsetOfColumns())
-            return storage_snapshot->getSampleBlockForColumns(columns_description.getNamesOfPhysical());
-        else
-            return getHeader(storage_snapshot->metadata, files_info->need_path_column, files_info->need_file_column);
+        }
+        return res;
     }
 
     StorageFileSource(
@@ -483,13 +471,15 @@ class StorageFileSource : public ISource
         UInt64 max_block_size_,
         FilesInfoPtr files_info_,
         ColumnsDescription columns_description_,
+        const Block & block_for_format_,
         std::unique_ptr<ReadBuffer> read_buf_)
-        : ISource(getBlockForSource(storage_, storage_snapshot_, columns_description_, files_info_))
+        : ISource(getBlockForSource(block_for_format_, files_info_))
         , storage(std::move(storage_))
         , storage_snapshot(storage_snapshot_)
         , files_info(std::move(files_info_))
         , read_buf(std::move(read_buf_))
         , columns_description(std::move(columns_description_))
+        , block_for_format(block_for_format_)
         , context(context_)
         , max_block_size(max_block_size_)
     {
@@ -533,15 +523,8 @@ class StorageFileSource : public ISource
                 if (!read_buf)
                     read_buf = createReadBuffer(current_path, storage->use_table_fd, storage->getName(), storage->table_fd, storage->compression_method, context);
 
-                auto get_block_for_format = [&]() -> Block
-                {
-                    if (storage->supportsSubsetOfColumns())
-                        return storage_snapshot->getSampleBlockForColumns(columns_description.getNamesOfPhysical());
-                    return storage_snapshot->metadata->getSampleBlock();
-                };
-
-                auto format = context->getInputFormat(
-                    storage->format_name, *read_buf, get_block_for_format(), max_block_size, storage->format_settings);
+                auto format
+                    = context->getInputFormat(storage->format_name, *read_buf, block_for_format, max_block_size, storage->format_settings);
 
                 QueryPipelineBuilder builder;
                 builder.init(Pipe(format));
@@ -627,6 +610,7 @@ class StorageFileSource : public ISource
     std::unique_ptr<PullingPipelineExecutor> reader;
 
     ColumnsDescription columns_description;
+    Block block_for_format;
 
     ContextPtr context;    /// TODO Untangle potential issues with context lifetime.
     UInt64 max_block_size;
@@ -693,13 +677,30 @@ Pipe StorageFile::read(
 
     for (size_t i = 0; i < num_streams; ++i)
     {
-        const auto get_columns_for_format = [&]() -> ColumnsDescription
+        ColumnsDescription columns_description;
+        Block block_for_format;
+        if (supportsSubsetOfColumns())
         {
-            if (supportsSubsetOfColumns())
-                return storage_snapshot->getDescriptionForColumns(column_names);
-            else
-                return storage_snapshot->metadata->getColumns();
-        };
+            auto fetch_columns = column_names;
+            const auto & virtuals = getVirtuals();
+            std::erase_if(
+                fetch_columns,
+                [&](const String & col)
+                {
+                    return std::any_of(
+                        virtuals.begin(), virtuals.end(), [&](const NameAndTypePair & virtual_col) { return col == virtual_col.name; });
+                });
+
+            if (fetch_columns.empty())
+                fetch_columns.push_back(ExpressionActions::getSmallestColumn(storage_snapshot->metadata->getColumns().getAllPhysical()));
+            columns_description = storage_snapshot->getDescriptionForColumns(fetch_columns);
+        }
+        else
+        {
+            columns_description = storage_snapshot->metadata->getColumns();
+        }
+
+        block_for_format = storage_snapshot->getSampleBlockForColumns(columns_description.getNamesOfPhysical());
 
         /// In case of reading from fd we have to check whether we have already created
         /// the read buffer from it in Storage constructor (for schema inference) or not.
@@ -710,7 +711,14 @@ Pipe StorageFile::read(
             read_buffer = std::move(peekable_read_buffer_from_fd);
 
         pipes.emplace_back(std::make_shared<StorageFileSource>(
-            this_ptr, storage_snapshot, context, max_block_size, files_info, get_columns_for_format(), std::move(read_buffer)));
+            this_ptr,
+            storage_snapshot,
+            context,
+            max_block_size,
+            files_info,
+            columns_description,
+            block_for_format,
+            std::move(read_buffer)));
     }
 
     return Pipe::unitePipes(std::move(pipes));
