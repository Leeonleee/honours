diff --git a/src/Functions/array/arrayElement.cpp b/src/Functions/array/arrayElement.cpp
index d3255d6412e8..a7b27bae2684 100644
--- a/src/Functions/array/arrayElement.cpp
+++ b/src/Functions/array/arrayElement.cpp
@@ -475,10 +475,11 @@ ColumnPtr FunctionArrayElement::executeNumberConst(
 
     auto col_res = ColumnVector<DataType>::create();
 
-    if (index.getType() == Field::Types::UInt64)
+    if (index.getType() == Field::Types::UInt64
+        || (index.getType() == Field::Types::Int64 && get<Int64>(index) >= 0))
     {
         ArrayElementNumImpl<DataType>::template vectorConst<false>(
-            col_nested->getData(), col_array->getOffsets(), safeGet<UInt64>(index) - 1, col_res->getData(), builder);
+            col_nested->getData(), col_array->getOffsets(), get<UInt64>(index) - 1, col_res->getData(), builder);
     }
     else if (index.getType() == Field::Types::Int64)
     {
@@ -537,12 +538,13 @@ FunctionArrayElement::executeStringConst(const ColumnsWithTypeAndName & argument
 
     auto col_res = ColumnString::create();
 
-    if (index.getType() == Field::Types::UInt64)
+    if (index.getType() == Field::Types::UInt64
+        || (index.getType() == Field::Types::Int64 && get<Int64>(index) >= 0))
         ArrayElementStringImpl::vectorConst<false>(
             col_nested->getChars(),
             col_array->getOffsets(),
             col_nested->getOffsets(),
-            safeGet<UInt64>(index) - 1,
+            get<UInt64>(index) - 1,
             col_res->getChars(),
             col_res->getOffsets(),
             builder);
@@ -551,7 +553,7 @@ FunctionArrayElement::executeStringConst(const ColumnsWithTypeAndName & argument
             col_nested->getChars(),
             col_array->getOffsets(),
             col_nested->getOffsets(),
-            -(UInt64(safeGet<Int64>(index)) + 1),
+            -(UInt64(get<Int64>(index)) + 1),
             col_res->getChars(),
             col_res->getOffsets(),
             builder);
@@ -600,12 +602,13 @@ ColumnPtr FunctionArrayElement::executeGenericConst(
     const auto & col_nested = col_array->getData();
     auto col_res = col_nested.cloneEmpty();
 
-    if (index.getType() == Field::Types::UInt64)
+    if (index.getType() == Field::Types::UInt64
+        || (index.getType() == Field::Types::Int64 && get<Int64>(index) >= 0))
         ArrayElementGenericImpl::vectorConst<false>(
-            col_nested, col_array->getOffsets(), safeGet<UInt64>(index) - 1, *col_res, builder);
+            col_nested, col_array->getOffsets(), get<UInt64>(index) - 1, *col_res, builder);
     else if (index.getType() == Field::Types::Int64)
         ArrayElementGenericImpl::vectorConst<true>(
-            col_nested, col_array->getOffsets(), -(static_cast<UInt64>(safeGet<Int64>(index) + 1)), *col_res, builder);
+            col_nested, col_array->getOffsets(), -(static_cast<UInt64>(get<Int64>(index) + 1)), *col_res, builder);
     else
         throw Exception("Illegal type of array index", ErrorCodes::LOGICAL_ERROR);
 
