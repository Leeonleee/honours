You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
`Cannot find column` with constant tuple in distributed query (analyzer)
```
:) SELECT (-9, 0) + (number,  number)  from remote('127.0.0.{1,2}', numbers(2)) order by number

SELECT (-9, 0) + (number, number)
FROM remote('127.0.0.{1,2}', numbers(2))
ORDER BY number ASC

Query id: 21f422c6-6962-4069-90b6-d2400ed6b335


Elapsed: 0.004 sec. 

Received exception from server (version 25.5.1):
Code: 8. DB::Exception: Received from localhost:9000. DB::Exception: Cannot find column `plus((-9, 0)_Tuple(Int8, UInt8), tuple(__table1.number, __table1.number))` in source stream, there are only columns: [__table1.number, plus(_CAST((-9, 0)_Tuple(Int8, UInt8), 'Tuple(Int8, UInt8)'_String), tuple(__table1.number, __table1.number))]. (THERE_IS_NO_COLUMN)

```
Cannot find column `tuple` in source stream. Parallel replicas
Not reproduced with `enable_named_columns_in_function_tuple = 0`

Repro:
```
SET enable_analyzer = 1;
SET enable_named_columns_in_function_tuple = 1;

DROP TABLE IF EXISTS src;
DROP TABLE IF EXISTS dst;

CREATE TABLE src (id UInt32, type String, data String) ENGINE=MergeTree ORDER BY tuple();
CREATE TABLE dst (id UInt32, a Tuple (col_a Nullable(String), type String), b Tuple (col_b Nullable(String), type String)) ENGINE = MergeTree ORDER BY id;

INSERT INTO src VALUES (1, 'ok', 'data');
SELECT id, tuple(replaceAll(data, 'a', 'e') AS col_a, type) AS a, tuple(replaceAll(data, 'a', 'e') AS col_b, type) AS b FROM src;

DROP TABLE src;
```

```
03240_insert_select_named_tuple:                                        [ FAIL ]
Reason: return code:  8
[nikpc] 2025.01.08 22:59:45.517145 [ 49046 ] {7a4b11c7-621f-46dd-b144-438a525490dd} <Error> executeQuery: Code: 8. DB::Exception: Cannot find column `tuple(col_a, type)` in source stream, there are only columns: [__table1.id, tuple(replaceAll(__table1.data, 'a'_String, 'e'_String), __table1.type), tuple(replaceAll(__table1.data, 'a'_String, 'e'_String), __table1.type)]. (THERE_IS_NO_COLUMN) (version 25.1.1.1921 (official build)) (from [::ffff:127.0.0.1]:42160) (comment: 03240_insert_select_named_tuple.sql) (in query: SELECT id, tuple(replaceAll(data, 'a', 'e') AS col_a, type) AS a, tuple(replaceAll(data, 'a', 'e') AS col_b, type) AS b FROM src;), Stack trace (when copying this message, always include the lines below):

0. ./build_docker/./src/Common/Exception.cpp:107: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000d87b63b
1. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x00000000086ff62c
2. DB::Exception::Exception<String const&, String>(int, FormatStringHelperImpl<std::type_identity<String const&>::type, std::type_identity<String>::type>, String const&, String&&) @ 0x0000000008d7030b
3. ./build_docker/./src/Interpreters/ActionsDAG.cpp:1518: DB::ActionsDAG::makeConvertingActions(std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, std::vector<DB::ColumnWithTypeAndName, std::allocator<DB::ColumnWithTypeAndName>> const&, DB::ActionsDAG::MatchColumnsMode, bool, bool, std::unordered_map<String, String, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, String>>>*) @ 0x00000000117ae51a
4. ./build_docker/./src/Processors/QueryPlan/ConvertingActions.cpp:20: DB::addConvertingActions(DB::QueryPlan&, DB::Block const&, bool) @ 0x0000000013bcf9bd
5. ./build_docker/./src/Processors/QueryPlan/ParallelReplicasLocalPlan.cpp:102: DB::createLocalPlanForParallelReplicas(std::shared_ptr<DB::IAST> const&, DB::Block const&, std::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, std::shared_ptr<DB::ParallelReplicasReadingCoordinator>, std::unique_ptr<DB::IQueryPlanStep, std::default_delete<DB::IQueryPlanStep>>, unsigned long) @ 0x0000000013c07460
6. ./build_docker/./src/Interpreters/ClusterProxy/executeQuery.cpp:625: DB::ClusterProxy::executeQueryWithParallelReplicas(DB::QueryPlan&, DB::StorageID const&, DB::Block const&, DB::QueryProcessingStage::Enum, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, std::shared_ptr<std::list<DB::StorageLimits, std::allocator<DB::StorageLimits>> const>, std::unique_ptr<DB::IQueryPlanStep, std::default_delete<DB::IQueryPlanStep>>) @ 0x00000000126ad8e7
7. ./build_docker/./src/Interpreters/ClusterProxy/executeQuery.cpp:719: DB::ClusterProxy::executeQueryWithParallelReplicas(DB::QueryPlan&, DB::StorageID const&, DB::QueryProcessingStage::Enum, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::PlannerContext> const&, std::shared_ptr<DB::Context const>, std::shared_ptr<std::list<DB::StorageLimits, std::allocator<DB::StorageLimits>> const>, std::unique_ptr<DB::IQueryPlanStep, std::default_delete<DB::IQueryPlanStep>>) @ 0x00000000126b0a27
8. ./build_docker/./src/Planner/PlannerJoinTree.cpp:1076: DB::(anonymous namespace)::buildQueryPlanForTableExpression(std::shared_ptr<DB::IQueryTreeNode>, std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryInfo const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::PlannerContext>&, bool, bool) @ 0x0000000012130aab
9. ./build_docker/./src/Planner/PlannerJoinTree.cpp:2150: DB::buildJoinTreeQueryPlan(std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryInfo const&, DB::SelectQueryOptions&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::PlannerContext>&) @ 0x0000000012121ab7
10. ./build_docker/./src/Planner/Planner.cpp:1546: DB::Planner::buildPlanForQueryNode() @ 0x000000001210d7e6
11. ./build_docker/./src/Planner/Planner.cpp:1300: DB::Planner::buildQueryPlanIfNeeded() @ 0x0000000012108a3e
12. ./src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:241: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x0000000012484ebd
13. ./build_docker/./src/Interpreters/executeQuery.cpp:1602: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000001248029c
14. ./build_docker/./src/Server/TCPHandler.cpp:658: DB::TCPHandler::runImpl() @ 0x000000001372856c
15. ./build_docker/./src/Server/TCPHandler.cpp:2625: DB::TCPHandler::run() @ 0x00000000137433b9
16. ./build_docker/./base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x0000000016c568a7
17. ./build_docker/./base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x0000000016c56cf9
18. ./build_docker/./base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x0000000016c2329b
19. ./base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000016c2177d
20. ? @ 0x00007fe59de9ca94
21. ? @ 0x00007fe59df29c3c

```

Affected tests:
```
03240_insert_select_named_tuple.sql
```

Version 25.1.1.1921
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
