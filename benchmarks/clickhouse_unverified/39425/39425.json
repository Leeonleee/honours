{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 39425,
  "instance_id": "ClickHouse__ClickHouse-39425",
  "issue_numbers": [
    "28216"
  ],
  "base_commit": "c05190237a95ba86222870e46cd0592fa4c9bb64",
  "patch": "diff --git a/docs/en/sql-reference/data-types/date32.md b/docs/en/sql-reference/data-types/date32.md\nindex e1d6e2363e86..b5a82128e697 100644\n--- a/docs/en/sql-reference/data-types/date32.md\n+++ b/docs/en/sql-reference/data-types/date32.md\n@@ -5,7 +5,7 @@ sidebar_label: Date32\n \n # Date32\n \n-A date. Supports the date range same with [Datetime64](../../sql-reference/data-types/datetime64.md). Stored in four bytes as the number of days since 1925-01-01. Allows storing values till 2283-11-11. \n+A date. Supports the date range same with [Datetime64](../../sql-reference/data-types/datetime64.md). Stored in four bytes as the number of days since 1900-01-01. Allows storing values till 2299-12-31.\n \n **Examples**\n \n@@ -36,5 +36,5 @@ SELECT * FROM new;\n \n -   [toDate32](../../sql-reference/functions/type-conversion-functions.md#todate32)\n -   [toDate32OrZero](../../sql-reference/functions/type-conversion-functions.md#todate32-or-zero)\n--   [toDate32OrNull](../../sql-reference/functions/type-conversion-functions.md#todate32-or-null) \n+-   [toDate32OrNull](../../sql-reference/functions/type-conversion-functions.md#todate32-or-null)\n \ndiff --git a/docs/en/sql-reference/data-types/datetime64.md b/docs/en/sql-reference/data-types/datetime64.md\nindex ddc71e75e44c..a5a520a978e1 100644\n--- a/docs/en/sql-reference/data-types/datetime64.md\n+++ b/docs/en/sql-reference/data-types/datetime64.md\n@@ -18,7 +18,7 @@ DateTime64(precision, [timezone])\n \n Internally, stores data as a number of \u2018ticks\u2019 since epoch start (1970-01-01 00:00:00 UTC) as Int64. The tick resolution is determined by the precision parameter. Additionally, the `DateTime64` type can store time zone that is the same for the entire column, that affects how the values of the `DateTime64` type values are displayed in text format and how the values specified as strings are parsed (\u20182020-01-01 05:00:01.000\u2019). The time zone is not stored in the rows of the table (or in resultset), but is stored in the column metadata. See details in [DateTime](../../sql-reference/data-types/datetime.md).\n \n-Supported range of values: \\[1925-01-01 00:00:00, 2283-11-11 23:59:59.99999999\\] (Note: The precision of the maximum value is 8).\n+Supported range of values: \\[1900-01-01 00:00:00, 2299-12-31 23:59:59.99999999\\] (Note: The precision of the maximum value is 8).\n \n ## Examples\n \ndiff --git a/docs/en/sql-reference/functions/date-time-functions.md b/docs/en/sql-reference/functions/date-time-functions.md\nindex d6ef387840a4..e56f362ec783 100644\n--- a/docs/en/sql-reference/functions/date-time-functions.md\n+++ b/docs/en/sql-reference/functions/date-time-functions.md\n@@ -266,8 +266,8 @@ Result:\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n-:::note    \n-The return type `toStartOf*` functions described below is `Date` or `DateTime`. Though these functions can take `DateTime64` as an argument, passing them a `DateTime64` that is out of the normal range (years 1925 - 2283) will give an incorrect result.\n+:::note\n+The return type `toStartOf*` functions described below is `Date` or `DateTime`. Though these functions can take `DateTime64` as an argument, passing them a `DateTime64` that is out of the normal range (years 1900 - 2299) will give an incorrect result.\n :::\n \n ## toStartOfYear\n@@ -291,7 +291,7 @@ Returns the date.\n Rounds down a date or date with time to the first day of the month.\n Returns the date.\n \n-:::note    \n+:::note\n The behavior of parsing incorrect dates is implementation specific. ClickHouse may return zero date, throw an exception or do \u201cnatural\u201d overflow.\n :::\n \ndiff --git a/docs/en/sql-reference/functions/type-conversion-functions.md b/docs/en/sql-reference/functions/type-conversion-functions.md\nindex c51445675f51..d7cac34022ed 100644\n--- a/docs/en/sql-reference/functions/type-conversion-functions.md\n+++ b/docs/en/sql-reference/functions/type-conversion-functions.md\n@@ -218,23 +218,23 @@ SELECT toDate32('1955-01-01') AS value, toTypeName(value);\n 2. The value is outside the range:\n \n ``` sql\n-SELECT toDate32('1924-01-01') AS value, toTypeName(value);\n+SELECT toDate32('1899-01-01') AS value, toTypeName(value);\n ```\n \n ``` text\n-\u250c\u2500\u2500\u2500\u2500\u2500\u2500value\u2500\u252c\u2500toTypeName(toDate32('1925-01-01'))\u2500\u2510\n-\u2502 1925-01-01 \u2502 Date32                             \u2502\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500value\u2500\u252c\u2500toTypeName(toDate32('1899-01-01'))\u2500\u2510\n+\u2502 1900-01-01 \u2502 Date32                             \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n 3. With `Date`-type argument:\n \n ``` sql\n-SELECT toDate32(toDate('1924-01-01')) AS value, toTypeName(value);\n+SELECT toDate32(toDate('1899-01-01')) AS value, toTypeName(value);\n ```\n \n ``` text\n-\u250c\u2500\u2500\u2500\u2500\u2500\u2500value\u2500\u252c\u2500toTypeName(toDate32(toDate('1924-01-01')))\u2500\u2510\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500value\u2500\u252c\u2500toTypeName(toDate32(toDate('1899-01-01')))\u2500\u2510\n \u2502 1970-01-01 \u2502 Date32                                     \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n@@ -248,14 +248,14 @@ The same as [toDate32](#todate32) but returns the min value of [Date32](../../sq\n Query:\n \n ``` sql\n-SELECT toDate32OrZero('1924-01-01'), toDate32OrZero('');\n+SELECT toDate32OrZero('1899-01-01'), toDate32OrZero('');\n ```\n \n Result:\n \n ``` text\n-\u250c\u2500toDate32OrZero('1924-01-01')\u2500\u252c\u2500toDate32OrZero('')\u2500\u2510\n-\u2502                   1925-01-01 \u2502         1925-01-01 \u2502\n+\u250c\u2500toDate32OrZero('1899-01-01')\u2500\u252c\u2500toDate32OrZero('')\u2500\u2510\n+\u2502                   1900-01-01 \u2502         1900-01-01 \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \ndiff --git a/docs/ru/sql-reference/data-types/date32.md b/docs/ru/sql-reference/data-types/date32.md\nindex 31b2258b70b8..1fc5ff6e5e2c 100644\n--- a/docs/ru/sql-reference/data-types/date32.md\n+++ b/docs/ru/sql-reference/data-types/date32.md\n@@ -5,7 +5,7 @@ sidebar_label: Date32\n \n # Date32 {#data_type-datetime32}\n \n-\u0414\u0430\u0442\u0430. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u0430\u043a\u043e\u0439 \u0436\u0435 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u0430\u0442, \u043a\u0430\u043a \u0434\u043b\u044f \u0442\u0438\u043f\u0430 [Datetime64](../../sql-reference/data-types/datetime64.md). \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u0431\u0430\u0439\u0442\u0430\u0445 \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0447\u0438\u0441\u043b\u0443 \u0434\u043d\u0435\u0439 \u0441 1925-01-01 \u043f\u043e 2283-11-11. \n+\u0414\u0430\u0442\u0430. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u0430\u043a\u043e\u0439 \u0436\u0435 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0434\u0430\u0442, \u043a\u0430\u043a \u0434\u043b\u044f \u0442\u0438\u043f\u0430 [Datetime64](../../sql-reference/data-types/datetime64.md). \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u0447\u0435\u0442\u044b\u0440\u0435\u0445 \u0431\u0430\u0439\u0442\u0430\u0445 \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0447\u0438\u0441\u043b\u0443 \u0434\u043d\u0435\u0439 \u0441 1900-01-01 \u043f\u043e 2299-12-31.\n \n **\u041f\u0440\u0438\u043c\u0435\u0440**\n \n@@ -36,5 +36,5 @@ SELECT * FROM new;\n \n -   [toDate32](../../sql-reference/functions/type-conversion-functions.md#todate32)\n -   [toDate32OrZero](../../sql-reference/functions/type-conversion-functions.md#todate32-or-zero)\n--   [toDate32OrNull](../../sql-reference/functions/type-conversion-functions.md#todate32-or-null) \n+-   [toDate32OrNull](../../sql-reference/functions/type-conversion-functions.md#todate32-or-null)\n \ndiff --git a/docs/ru/sql-reference/data-types/datetime64.md b/docs/ru/sql-reference/data-types/datetime64.md\nindex 8428c5b73091..0473d8256e9a 100644\n--- a/docs/ru/sql-reference/data-types/datetime64.md\n+++ b/docs/ru/sql-reference/data-types/datetime64.md\n@@ -18,7 +18,7 @@ DateTime64(precision, [timezone])\n \n \u0414\u0430\u043d\u043d\u044b\u0435 \u0445\u0440\u0430\u043d\u044f\u0442\u0441\u044f \u0432 \u0432\u0438\u0434\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u2018\u0442\u0438\u043a\u043e\u0432\u2019, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u0441 \u043c\u043e\u043c\u0435\u043d\u0442\u0430 \u043d\u0430\u0447\u0430\u043b\u0430 \u044d\u043f\u043e\u0445\u0438 (1970-01-01 00:00:00 UTC), \u0432 Int64. \u0420\u0430\u0437\u043c\u0435\u0440 \u0442\u0438\u043a\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c precision. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e, \u0442\u0438\u043f `DateTime64` \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441, \u0435\u0434\u0438\u043d\u044b\u0439 \u0434\u043b\u044f \u0432\u0441\u0435\u0439 \u043a\u043e\u043b\u043e\u043d\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043b\u0438\u044f\u0435\u0442 \u043d\u0430 \u0442\u043e, \u043a\u0430\u043a \u0431\u0443\u0434\u0443\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0442\u0438\u043f\u0430 `DateTime64` \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0432\u0438\u0434\u0435 \u0438 \u043a\u0430\u043a \u0431\u0443\u0434\u0443\u0442 \u043f\u0430\u0440\u0441\u0438\u0442\u044c\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a (\u20182020-01-01 05:00:01.000\u2019). \u0427\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441 \u043d\u0435 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0442\u0430\u0431\u043b\u0438\u0446\u044b (\u0432\u044b\u0431\u043e\u0440\u043a\u0438), \u0430 \u0445\u0440\u0430\u043d\u0438\u0442\u0441\u044f \u0432 \u043c\u0435\u0442\u0430\u0434\u0430\u043d\u043d\u044b\u0445 \u043a\u043e\u043b\u043e\u043d\u043a\u0438. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0441\u043c. [DateTime](datetime.md).\n \n-\u0414\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439: \\[1925-01-01 00:00:00, 2283-11-11 23:59:59.99999999\\] (\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 8).\n+\u0414\u0438\u0430\u043f\u0430\u0437\u043e\u043d \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439: \\[1900-01-01 00:00:00, 2299-12-31 23:59:59.99999999\\] (\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435: \u0422\u043e\u0447\u043d\u043e\u0441\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 8).\n \n ## \u041f\u0440\u0438\u043c\u0435\u0440\u044b {#examples}\n \ndiff --git a/docs/ru/sql-reference/functions/date-time-functions.md b/docs/ru/sql-reference/functions/date-time-functions.md\nindex da48cd940a72..242861af0d9c 100644\n--- a/docs/ru/sql-reference/functions/date-time-functions.md\n+++ b/docs/ru/sql-reference/functions/date-time-functions.md\n@@ -57,7 +57,7 @@ toTimezone(value, timezone)\n **\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b**\n \n -   `value` \u2014 \u0432\u0440\u0435\u043c\u044f \u0438\u043b\u0438 \u0434\u0430\u0442\u0430 \u0441 \u0432\u0440\u0435\u043c\u0435\u043d\u0435\u043c. [DateTime64](../../sql-reference/data-types/datetime64.md).\n--   `timezone` \u2014 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441 \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. [String](../../sql-reference/data-types/string.md). \u042d\u0442\u043e\u0442 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043e\u0439, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e `toTimezone` \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 (\u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c \u0442\u0438\u043f\u043e\u0432 `DateTime*`). \n+-   `timezone` \u2014 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441 \u0434\u043b\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f. [String](../../sql-reference/data-types/string.md). \u042d\u0442\u043e\u0442 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442\u043e\u0439, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e `toTimezone` \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441 \u0441\u0442\u043e\u043b\u0431\u0446\u0430 (\u0447\u0430\u0441\u043e\u0432\u043e\u0439 \u043f\u043e\u044f\u0441 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u043e\u043c \u0442\u0438\u043f\u043e\u0432 `DateTime*`).\n \n **\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435**\n \n@@ -267,7 +267,7 @@ SELECT toUnixTimestamp('2017-11-05 08:07:47', 'Asia/Tokyo') AS unix_timestamp;\n ```\n \n     :::note \"Attention\"\n-    `Date` \u0438\u043b\u0438 `DateTime` \u044d\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 `toStartOf*`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043f\u0438\u0441\u0430\u043d \u043d\u0438\u0436\u0435. \u041d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u044d\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c `DateTime64` \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 `DateTime64` \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u044b \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 (\u0441 1925 \u043f\u043e 2283 \u0433\u043e\u0434), \u0442\u043e \u044d\u0442\u043e \u0434\u0430\u0441\u0442 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n+    `Date` \u0438\u043b\u0438 `DateTime` \u044d\u0442\u043e \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0439 \u0442\u0438\u043f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 `toStartOf*`, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043e\u043f\u0438\u0441\u0430\u043d \u043d\u0438\u0436\u0435. \u041d\u0435\u0441\u043c\u043e\u0442\u0440\u044f \u043d\u0430 \u0442\u043e, \u0447\u0442\u043e \u044d\u0442\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c `DateTime64` \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430, \u0435\u0441\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 `DateTime64` \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0437\u0430 \u043f\u0440\u0435\u0434\u0435\u043b\u044b \u043d\u043e\u0440\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430 (\u0441 1900 \u043f\u043e 2299 \u0433\u043e\u0434), \u0442\u043e \u044d\u0442\u043e \u0434\u0430\u0441\u0442 \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.\n     :::\n ## toStartOfYear {#tostartofyear}\n \ndiff --git a/docs/ru/sql-reference/functions/type-conversion-functions.md b/docs/ru/sql-reference/functions/type-conversion-functions.md\nindex 946abddf3d05..71caeddea028 100644\n--- a/docs/ru/sql-reference/functions/type-conversion-functions.md\n+++ b/docs/ru/sql-reference/functions/type-conversion-functions.md\n@@ -209,7 +209,7 @@ SELECT toDate32('1955-01-01') AS value, toTypeName(value);\n ```\n \n ``` text\n-\u250c\u2500\u2500\u2500\u2500\u2500\u2500value\u2500\u252c\u2500toTypeName(toDate32('1925-01-01'))\u2500\u2510\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500value\u2500\u252c\u2500toTypeName(toDate32('1955-01-01'))\u2500\u2510\n \u2502 1955-01-01 \u2502 Date32                             \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n@@ -217,23 +217,23 @@ SELECT toDate32('1955-01-01') AS value, toTypeName(value);\n 2. \u0417\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0432\u044b\u0445\u043e\u0434\u0438\u0442 \u0437\u0430 \u0433\u0440\u0430\u043d\u0438\u0446\u044b \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430:\n \n ``` sql\n-SELECT toDate32('1924-01-01') AS value, toTypeName(value);\n+SELECT toDate32('1899-01-01') AS value, toTypeName(value);\n ```\n \n ``` text\n-\u250c\u2500\u2500\u2500\u2500\u2500\u2500value\u2500\u252c\u2500toTypeName(toDate32('1925-01-01'))\u2500\u2510\n-\u2502 1925-01-01 \u2502 Date32                             \u2502\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500value\u2500\u252c\u2500toTypeName(toDate32('1899-01-01'))\u2500\u2510\n+\u2502 1900-01-01 \u2502 Date32                             \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n 3. \u0421 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0442\u0438\u043f\u0430 `Date`:\n \n ``` sql\n-SELECT toDate32(toDate('1924-01-01')) AS value, toTypeName(value);\n+SELECT toDate32(toDate('1899-01-01')) AS value, toTypeName(value);\n ```\n \n ``` text\n-\u250c\u2500\u2500\u2500\u2500\u2500\u2500value\u2500\u252c\u2500toTypeName(toDate32(toDate('1924-01-01')))\u2500\u2510\n+\u250c\u2500\u2500\u2500\u2500\u2500\u2500value\u2500\u252c\u2500toTypeName(toDate32(toDate('1899-01-01')))\u2500\u2510\n \u2502 1970-01-01 \u2502 Date32                                     \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n@@ -247,14 +247,14 @@ SELECT toDate32(toDate('1924-01-01')) AS value, toTypeName(value);\n \u0417\u0430\u043f\u0440\u043e\u0441:\n \n ``` sql\n-SELECT toDate32OrZero('1924-01-01'), toDate32OrZero('');\n+SELECT toDate32OrZero('1899-01-01'), toDate32OrZero('');\n ```\n \n \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:\n \n ``` text\n-\u250c\u2500toDate32OrZero('1924-01-01')\u2500\u252c\u2500toDate32OrZero('')\u2500\u2510\n-\u2502                   1925-01-01 \u2502         1925-01-01 \u2502\n+\u250c\u2500toDate32OrZero('1899-01-01')\u2500\u252c\u2500toDate32OrZero('')\u2500\u2510\n+\u2502                   1900-01-01 \u2502         1900-01-01 \u2502\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \ndiff --git a/docs/zh/sql-reference/data-types/datetime64.md b/docs/zh/sql-reference/data-types/datetime64.md\nindex 571bcffd66ed..da637929180b 100644\n--- a/docs/zh/sql-reference/data-types/datetime64.md\n+++ b/docs/zh/sql-reference/data-types/datetime64.md\n@@ -19,7 +19,7 @@ DateTime64(precision, [timezone])\n \n \u5728\u5185\u90e8\uff0c\u6b64\u7c7b\u578b\u4ee5Int64\u7c7b\u578b\u5c06\u6570\u636e\u5b58\u50a8\u4e3a\u81eaLinux\u7eaa\u5143\u5f00\u59cb(1970-01-01 00:00:00UTC)\u7684\u65f6\u95f4\u523b\u5ea6\u6570\uff08ticks\uff09\u3002\u65f6\u95f4\u523b\u5ea6\u7684\u5206\u8fa8\u7387\u7531precision\u53c2\u6570\u786e\u5b9a\u3002\u6b64\u5916\uff0c`DateTime64` \u7c7b\u578b\u53ef\u4ee5\u50cf\u5b58\u50a8\u5176\u4ed6\u6570\u636e\u5217\u4e00\u6837\u5b58\u50a8\u65f6\u533a\u4fe1\u606f\uff0c\u65f6\u533a\u4f1a\u5f71\u54cd `DateTime64` \u7c7b\u578b\u7684\u503c\u5982\u4f55\u4ee5\u6587\u672c\u683c\u5f0f\u663e\u793a\uff0c\u4ee5\u53ca\u5982\u4f55\u89e3\u6790\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u6307\u5b9a\u7684\u65f6\u95f4\u6570\u636e (\u20182020-01-01 05:00:01.000\u2019)\u3002\u65f6\u533a\u4e0d\u5b58\u50a8\u5728\u8868\u7684\u884c\u4e2d\uff08\u4e5f\u4e0d\u5728resultset\u4e2d\uff09\uff0c\u800c\u662f\u5b58\u50a8\u5728\u5217\u7684\u5143\u6570\u636e\u4e2d\u3002\u8be6\u7ec6\u4fe1\u606f\u8bf7\u53c2\u8003 [DateTime](datetime.md) \u6570\u636e\u7c7b\u578b.\n \n-\u503c\u7684\u8303\u56f4: \\[1925-01-01 00:00:00, 2283-11-11 23:59:59.99999999\\] (\u6ce8\u610f: \u6700\u5927\u503c\u7684\u7cbe\u5ea6\u662f8)\u3002\n+\u503c\u7684\u8303\u56f4: \\[1900-01-01 00:00:00, 2299-12-31 23:59:59.99999999\\] (\u6ce8\u610f: \u6700\u5927\u503c\u7684\u7cbe\u5ea6\u662f8)\u3002\n \n ## \u793a\u4f8b {#examples}\n \ndiff --git a/docs/zh/sql-reference/functions/date-time-functions.md b/docs/zh/sql-reference/functions/date-time-functions.md\nindex f268e9584cef..b9fdc4e21f22 100644\n--- a/docs/zh/sql-reference/functions/date-time-functions.md\n+++ b/docs/zh/sql-reference/functions/date-time-functions.md\n@@ -263,8 +263,8 @@ SELECT toUnixTimestamp('2017-11-05 08:07:47', 'Asia/Tokyo') AS unix_timestamp\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n-:::\u6ce8\u610f    \n-\u4e0b\u9762\u63cf\u8ff0\u7684\u8fd4\u56de\u7c7b\u578b `toStartOf` \u51fd\u6570\u662f `Date` \u6216 `DateTime`\u3002\u5c3d\u7ba1\u8fd9\u4e9b\u51fd\u6570\u53ef\u4ee5\u5c06 `DateTime64` \u4f5c\u4e3a\u53c2\u6570\uff0c\u4f46\u5c06\u8d85\u51fa\u6b63\u5e38\u8303\u56f4\uff081925\u5e74-2283\u5e74\uff09\u7684 `DateTime64` \u4f20\u9012\u7ed9\u5b83\u4eec\u4f1a\u7ed9\u51fa\u4e0d\u6b63\u786e\u7684\u7ed3\u679c\u3002\n+:::\u6ce8\u610f\n+\u4e0b\u9762\u63cf\u8ff0\u7684\u8fd4\u56de\u7c7b\u578b `toStartOf` \u51fd\u6570\u662f `Date` \u6216 `DateTime`\u3002\u5c3d\u7ba1\u8fd9\u4e9b\u51fd\u6570\u53ef\u4ee5\u5c06 `DateTime64` \u4f5c\u4e3a\u53c2\u6570\uff0c\u4f46\u5c06\u8d85\u51fa\u6b63\u5e38\u8303\u56f4\uff081900\u5e74-2299\u5e74\uff09\u7684 `DateTime64` \u4f20\u9012\u7ed9\u5b83\u4eec\u4f1a\u7ed9\u51fa\u4e0d\u6b63\u786e\u7684\u7ed3\u679c\u3002\n :::\n \n ## toStartOfYear {#tostartofyear}\n@@ -1221,4 +1221,4 @@ SELECT fromModifiedJulianDayOrNull(58849);\n \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n ```\n \n-[Original article](https://clickhouse.com/docs/en/query_language/functions/date_time_functions/) <!--hide-->\n\\ No newline at end of file\n+[Original article](https://clickhouse.com/docs/en/query_language/functions/date_time_functions/) <!--hide-->\ndiff --git a/src/Common/DateLUTImpl.h b/src/Common/DateLUTImpl.h\nindex 4bc9614abcb6..f9361e809a92 100644\n--- a/src/Common/DateLUTImpl.h\n+++ b/src/Common/DateLUTImpl.h\n@@ -10,20 +10,23 @@\n #include <type_traits>\n \n \n-#define DATE_LUT_MIN_YEAR 1925 /// 1925 since wast majority of timezones changed to 15-minute aligned offsets somewhere in 1924 or earlier.\n-#define DATE_LUT_MAX_YEAR 2283 /// Last supported year (complete)\n+#define DATE_LUT_MIN_YEAR 1900 /// 1900 since majority of financial organizations consider 1900 as an initial year.\n+#define DATE_LUT_MAX_YEAR 2299 /// Last supported year (complete)\n #define DATE_LUT_YEARS (1 + DATE_LUT_MAX_YEAR - DATE_LUT_MIN_YEAR) /// Number of years in lookup table\n \n-#define DATE_LUT_SIZE 0x20000\n+#define DATE_LUT_SIZE 0x23AB1\n \n #define DATE_LUT_MAX (0xFFFFFFFFU - 86400)\n #define DATE_LUT_MAX_DAY_NUM 0xFFFF\n+\n+#define DAYNUM_OFFSET_EPOCH 25567\n+\n /// Max int value of Date32, DATE LUT cache size minus daynum_offset_epoch\n-#define DATE_LUT_MAX_EXTEND_DAY_NUM (DATE_LUT_SIZE - 16436)\n+#define DATE_LUT_MAX_EXTEND_DAY_NUM (DATE_LUT_SIZE - DAYNUM_OFFSET_EPOCH)\n \n /// A constant to add to time_t so every supported time point becomes non-negative and still has the same remainder of division by 3600.\n /// If we treat \"remainder of division\" operation in the sense of modular arithmetic (not like in C++).\n-#define DATE_LUT_ADD ((1970 - DATE_LUT_MIN_YEAR) * 366 * 86400)\n+#define DATE_LUT_ADD ((1970 - DATE_LUT_MIN_YEAR) * 366L * 86400)\n \n \n #if defined(__PPC__)\n@@ -64,62 +67,78 @@ class DateLUTImpl\n     // Same as above but select different function overloads for zero saturation.\n     STRONG_TYPEDEF(UInt32, LUTIndexWithSaturation)\n \n+    static inline LUTIndex normalizeLUTIndex(UInt32 index)\n+    {\n+        if (index >= DATE_LUT_SIZE)\n+            return LUTIndex(DATE_LUT_SIZE - 1);\n+        return LUTIndex{index};\n+    }\n+\n+    static inline LUTIndex normalizeLUTIndex(Int64 index)\n+    {\n+        if (unlikely(index < 0))\n+            return LUTIndex(0);\n+        if (index >= DATE_LUT_SIZE)\n+            return LUTIndex(DATE_LUT_SIZE - 1);\n+        return LUTIndex{index};\n+    }\n+\n     template <typename T>\n     friend inline LUTIndex operator+(const LUTIndex & index, const T v)\n     {\n-        return LUTIndex{(index.toUnderType() + UInt32(v)) & date_lut_mask};\n+        return normalizeLUTIndex(index.toUnderType() + UInt32(v));\n     }\n \n     template <typename T>\n     friend inline LUTIndex operator+(const T v, const LUTIndex & index)\n     {\n-        return LUTIndex{(v + index.toUnderType()) & date_lut_mask};\n+        return normalizeLUTIndex(static_cast<Int64>(v + index.toUnderType()));\n     }\n \n     friend inline LUTIndex operator+(const LUTIndex & index, const LUTIndex & v)\n     {\n-        return LUTIndex{(index.toUnderType() + v.toUnderType()) & date_lut_mask};\n+        return normalizeLUTIndex(static_cast<UInt32>(index.toUnderType() + v.toUnderType()));\n     }\n \n     template <typename T>\n     friend inline LUTIndex operator-(const LUTIndex & index, const T v)\n     {\n-        return LUTIndex{(index.toUnderType() - UInt32(v)) & date_lut_mask};\n+        return normalizeLUTIndex(static_cast<Int64>(index.toUnderType() - UInt32(v)));\n     }\n \n     template <typename T>\n     friend inline LUTIndex operator-(const T v, const LUTIndex & index)\n     {\n-        return LUTIndex{(v - index.toUnderType()) & date_lut_mask};\n+        return normalizeLUTIndex(static_cast<Int64>(v - index.toUnderType()));\n     }\n \n     friend inline LUTIndex operator-(const LUTIndex & index, const LUTIndex & v)\n     {\n-        return LUTIndex{(index.toUnderType() - v.toUnderType()) & date_lut_mask};\n+        return normalizeLUTIndex(static_cast<Int64>(index.toUnderType() - v.toUnderType()));\n     }\n \n     template <typename T>\n     friend inline LUTIndex operator*(const LUTIndex & index, const T v)\n     {\n-        return LUTIndex{(index.toUnderType() * UInt32(v)) & date_lut_mask};\n+        return normalizeLUTIndex(index.toUnderType() * UInt32(v));\n     }\n \n     template <typename T>\n     friend inline LUTIndex operator*(const T v, const LUTIndex & index)\n     {\n-        return LUTIndex{(v * index.toUnderType()) & date_lut_mask};\n+        return normalizeLUTIndex(v * index.toUnderType());\n     }\n \n     template <typename T>\n     friend inline LUTIndex operator/(const LUTIndex & index, const T v)\n     {\n-        return LUTIndex{(index.toUnderType() / UInt32(v)) & date_lut_mask};\n+        return normalizeLUTIndex(index.toUnderType() / UInt32(v));\n     }\n \n     template <typename T>\n     friend inline LUTIndex operator/(const T v, const LUTIndex & index)\n     {\n-        return LUTIndex{(UInt32(v) / index.toUnderType()) & date_lut_mask};\n+        return normalizeLUTIndex(UInt32(v) / index.toUnderType());\n     }\n \n public:\n@@ -168,14 +187,9 @@ class DateLUTImpl\n     static_assert(sizeof(Values) == 16);\n \n private:\n-\n-    /// Mask is all-ones to allow efficient protection against overflow.\n-    static constexpr UInt32 date_lut_mask = 0x1ffff;\n-    static_assert(date_lut_mask == DATE_LUT_SIZE - 1);\n-\n     /// Offset to epoch in days (ExtendedDayNum) of the first day in LUT.\n     /// \"epoch\" is the Unix Epoch (starts at unix timestamp zero)\n-    static constexpr UInt32 daynum_offset_epoch = 16436;\n+    static constexpr UInt32 daynum_offset_epoch = 25567;\n     static_assert(daynum_offset_epoch == (1970 - DATE_LUT_MIN_YEAR) * 365 + (1970 - DATE_LUT_MIN_YEAR / 4 * 4) / 4);\n \n     /// Lookup table is indexed by LUTIndex.\n@@ -232,12 +246,12 @@ class DateLUTImpl\n \n     static inline LUTIndex toLUTIndex(DayNum d)\n     {\n-        return LUTIndex{(d + daynum_offset_epoch) & date_lut_mask};\n+        return normalizeLUTIndex(d + daynum_offset_epoch);\n     }\n \n     static inline LUTIndex toLUTIndex(ExtendedDayNum d)\n     {\n-        return LUTIndex{static_cast<UInt32>(d + daynum_offset_epoch) & date_lut_mask};\n+        return normalizeLUTIndex(static_cast<UInt32>(d + daynum_offset_epoch));\n     }\n \n     inline LUTIndex toLUTIndex(Time t) const\n@@ -1062,7 +1076,7 @@ class DateLUTImpl\n \n         auto year_lut_index = (year - DATE_LUT_MIN_YEAR) * 12 + month - 1;\n         UInt32 index = years_months_lut[year_lut_index].toUnderType() + day_of_month - 1;\n-        /// When date is out of range, default value is DATE_LUT_SIZE - 1 (2283-11-11)\n+        /// When date is out of range, default value is DATE_LUT_SIZE - 1 (2299-12-31)\n         return LUTIndex{std::min(index, static_cast<UInt32>(DATE_LUT_SIZE - 1))};\n     }\n \ndiff --git a/src/Functions/FunctionsConversion.h b/src/Functions/FunctionsConversion.h\nindex b666602e366f..97fe2e45d053 100644\n--- a/src/Functions/FunctionsConversion.h\n+++ b/src/Functions/FunctionsConversion.h\n@@ -536,8 +536,9 @@ template <typename Name> struct ConvertImpl<DataTypeFloat32, DataTypeDateTime, N\n template <typename Name> struct ConvertImpl<DataTypeFloat64, DataTypeDateTime, Name>\n     : DateTimeTransformImpl<DataTypeFloat64, DataTypeDateTime, ToDateTimeTransform64Signed<Float64, UInt32>> {};\n \n-const time_t LUT_MIN_TIME = -1420070400l;       // 1925-01-01 UTC\n-const time_t LUT_MAX_TIME = 9877248000l;        // 2282-12-31 UTC\n+const time_t LUT_MIN_TIME = -2208988800l;           //  1900-01-01 UTC\n+\n+const time_t LUT_MAX_TIME = 10413791999l;           // 2299-12-31 UTC\n \n /** Conversion of numeric to DateTime64\n   */\ndiff --git a/src/Functions/makeDate.cpp b/src/Functions/makeDate.cpp\nindex dbf293227877..d107625ffe5f 100644\n--- a/src/Functions/makeDate.cpp\n+++ b/src/Functions/makeDate.cpp\n@@ -164,9 +164,9 @@ struct MakeDate32Traits\n     using ReturnDataType = DataTypeDate32;\n     using ReturnColumnType = ColumnInt32;\n \n-    static constexpr auto MIN_YEAR = 1925;\n-    static constexpr auto MAX_YEAR = 2283;\n-    static constexpr auto MAX_DATE = YearMonthDayToSingleInt(MAX_YEAR, 11, 11);\n+    static constexpr auto MIN_YEAR = 1900;\n+    static constexpr auto MAX_YEAR = 2299;\n+    static constexpr auto MAX_DATE = YearMonthDayToSingleInt(MAX_YEAR, 12, 31);\n };\n \n /// Common implementation for makeDateTime, makeDateTime64\ndiff --git a/src/Storages/StorageGenerateRandom.cpp b/src/Storages/StorageGenerateRandom.cpp\nindex d875b4ee80cc..9cac1e572977 100644\n--- a/src/Storages/StorageGenerateRandom.cpp\n+++ b/src/Storages/StorageGenerateRandom.cpp\n@@ -220,7 +220,10 @@ ColumnPtr fillColumnWithRandomData(\n         {\n             auto column = ColumnInt32::create();\n             column->getData().resize(limit);\n-            fillBufferWithRandomData(reinterpret_cast<char *>(column->getData().data()), limit * sizeof(Int32), rng);\n+\n+            for (size_t i = 0; i < limit; ++i)\n+                column->getData()[i] = (rng() % static_cast<UInt64>(DATE_LUT_SIZE)) - DAYNUM_OFFSET_EPOCH;\n+\n             return column;\n         }\n         case TypeIndex::UInt32: [[fallthrough]];\n",
  "test_patch": "diff --git a/src/Common/tests/gtest_DateLUTImpl.cpp b/src/Common/tests/gtest_DateLUTImpl.cpp\nindex d522448d3378..49013625ed34 100644\n--- a/src/Common/tests/gtest_DateLUTImpl.cpp\n+++ b/src/Common/tests/gtest_DateLUTImpl.cpp\n@@ -79,12 +79,13 @@ FailuresCount countFailures(const ::testing::TestResult & test_result)\n TEST(DateLUTTest, makeDayNumTest)\n {\n     const DateLUTImpl & lut = DateLUT::instance(\"UTC\");\n-    EXPECT_EQ(0, lut.makeDayNum(1924, 12, 31));\n-    EXPECT_EQ(-1, lut.makeDayNum(1924, 12, 31, -1));\n+    EXPECT_EQ(0, lut.makeDayNum(1899, 12, 31));\n+    EXPECT_EQ(-1, lut.makeDayNum(1899, 12, 31, -1));\n+    EXPECT_EQ(-25567, lut.makeDayNum(1900, 1, 1));\n     EXPECT_EQ(-16436, lut.makeDayNum(1925, 1, 1));\n     EXPECT_EQ(0, lut.makeDayNum(1970, 1, 1));\n-    EXPECT_EQ(114635, lut.makeDayNum(2283, 11, 11));\n-    EXPECT_EQ(114635, lut.makeDayNum(2500, 12, 25));\n+    EXPECT_EQ(120529, lut.makeDayNum(2300, 12, 31));\n+    EXPECT_EQ(120529, lut.makeDayNum(2500, 12, 25));\n }\n \n \ndiff --git a/tests/integration/test_materialized_mysql_database/materialize_with_ddl.py b/tests/integration/test_materialized_mysql_database/materialize_with_ddl.py\nindex d7ea0c13a939..22d4633685ea 100644\n--- a/tests/integration/test_materialized_mysql_database/materialize_with_ddl.py\n+++ b/tests/integration/test_materialized_mysql_database/materialize_with_ddl.py\n@@ -2126,9 +2126,9 @@ def materialized_database_mysql_date_type_to_date32(\n     mysql_node.query(\n         \"CREATE TABLE test_database.a (a INT(11) NOT NULL PRIMARY KEY, b date DEFAULT NULL)\"\n     )\n-    # can't support date that less than 1925 year for now\n-    mysql_node.query(\"INSERT INTO test_database.a VALUES(1, '1900-04-16')\")\n-    # test date that is older than 1925\n+    # can't support date that less than 1900 year for now\n+    mysql_node.query(\"INSERT INTO test_database.a VALUES(1, '1899-04-16')\")\n+    # test date that is older than 1900\n     mysql_node.query(\"INSERT INTO test_database.a VALUES(3, '1971-02-16')\")\n     mysql_node.query(\"INSERT INTO test_database.a VALUES(4, '2101-05-16')\")\n \ndiff --git a/tests/integration/test_timezone_config/test.py b/tests/integration/test_timezone_config/test.py\nindex e4a9f75ababa..180026c58187 100644\n--- a/tests/integration/test_timezone_config/test.py\n+++ b/tests/integration/test_timezone_config/test.py\n@@ -26,9 +26,9 @@ def test_overflow_toDate(start_cluster):\n \n \n def test_overflow_toDate32(start_cluster):\n-    assert node.query(\"SELECT toDate32('2999-12-31','UTC')\") == \"2283-11-11\\n\"\n+    assert node.query(\"SELECT toDate32('2999-12-31','UTC')\") == \"2299-12-31\\n\"\n     assert node.query(\"SELECT toDate32('2021-12-21','UTC')\") == \"2021-12-21\\n\"\n-    assert node.query(\"SELECT toDate32('1000-12-31','UTC')\") == \"1925-01-01\\n\"\n+    assert node.query(\"SELECT toDate32('1000-12-31','UTC')\") == \"1900-01-01\\n\"\n \n \n def test_overflow_toDateTime(start_cluster):\ndiff --git a/tests/queries/0_stateless/00189_time_zones_long.reference b/tests/queries/0_stateless/00189_time_zones_long.reference\nindex e53ec7ca8151..8717a662771c 100644\n--- a/tests/queries/0_stateless/00189_time_zones_long.reference\n+++ b/tests/queries/0_stateless/00189_time_zones_long.reference\n@@ -137,7 +137,7 @@ toStartOfInterval\n 2015-01-01\n 2019-01-01\n 2019-01-01\n-2018-10-01\n+2018-07-01\n 2019-02-01\n 2019-01-01\n 2018-10-01\n@@ -164,7 +164,7 @@ toStartOfInterval\n 2015-01-01\n 2019-01-01\n 2019-01-01\n-2018-10-01\n+2018-07-01\n 2019-02-01\n 2019-01-01\n 2018-10-01\ndiff --git a/tests/queries/0_stateless/01087_table_function_generate.reference b/tests/queries/0_stateless/01087_table_function_generate.reference\nindex d62ff5618fc8..53792bfb579a 100644\n--- a/tests/queries/0_stateless/01087_table_function_generate.reference\n+++ b/tests/queries/0_stateless/01087_table_function_generate.reference\n@@ -70,16 +70,16 @@ DateTime64(3, \\'UTC\\')\tDateTime64(6, \\'UTC\\')\tDateTime64(6, \\'UTC\\')\n 1992-12-28 09:26:04.030\t1971-07-29 06:20:38.230976\t1980-03-26 15:49:55.428516\n 2051-12-11 07:09:13.162\t1982-01-12 00:25:45.754492\t2010-05-17 07:01:28.452864\n Date32\n-1934-01-06\n-2039-08-16\n-2103-11-03\n-2064-08-14\n-2187-08-21\n-2099-04-08\n-1947-06-22\n-2012-01-19\n-2170-07-09\n-2263-01-17\n+2120-04-24\n+1908-10-02\n+2105-09-04\n+2129-03-23\n+1921-04-05\n+2020-04-14\n+2251-12-25\n+2266-03-27\n+2161-02-18\n+2172-07-24\n -\n Float32\tFloat64\n -1.3551149e32\t1.2262973812461839e235\ndiff --git a/tests/queries/0_stateless/01277_fromUnixTimestamp64.reference b/tests/queries/0_stateless/01277_fromUnixTimestamp64.reference\nindex a9ffd259af0c..28006c1d168a 100644\n--- a/tests/queries/0_stateless/01277_fromUnixTimestamp64.reference\n+++ b/tests/queries/0_stateless/01277_fromUnixTimestamp64.reference\n@@ -4,6 +4,6 @@ Asia/Makassar\t1234567891011\t2009-02-14 07:31:31.011\t1970-01-15 14:56:07.891011\t1\n non-const column\n 1234567891011\t2009-02-13 23:31:31.011\t1970-01-15 06:56:07.891011\t1970-01-01 00:20:34.567891011\n upper range bound\n-9904447342\t2283-11-10 19:22:22.123\t2283-11-10 19:22:22.123456\t1925-01-01 00:00:00.413905173\n+10413688942\t2299-12-30 19:22:22.123\t2299-12-30 19:22:22.123456\t1900-01-01 00:00:00.413905173\n lower range bound\n--1420066799\t1925-01-01 01:00:00.877\t1925-01-01 01:00:00.876544\t1925-01-01 01:00:00.876543211\n+-2208985199\t1900-01-01 01:00:00.877\t1900-01-01 01:00:00.876544\t1900-01-01 01:00:00.876543211\ndiff --git a/tests/queries/0_stateless/01277_fromUnixTimestamp64.sql b/tests/queries/0_stateless/01277_fromUnixTimestamp64.sql\nindex e76a4db7a27e..846ffa094a5a 100644\n--- a/tests/queries/0_stateless/01277_fromUnixTimestamp64.sql\n+++ b/tests/queries/0_stateless/01277_fromUnixTimestamp64.sql\n@@ -46,10 +46,10 @@ SELECT\n \n SELECT 'upper range bound';\n WITH\n-    9904447342 AS timestamp,\n-    CAST(9904447342123 AS Int64) AS milli,\n-    CAST(9904447342123456 AS Int64) AS micro,\n-    CAST(9904447342123456789 AS Int64) AS nano,\n+    10413688942 AS timestamp,\n+    CAST(10413688942123 AS Int64) AS milli,\n+    CAST(10413688942123456 AS Int64) AS micro,\n+    CAST(10413688942123456789 AS Int64) AS nano,\n     'UTC' AS tz\n SELECT\n     timestamp,\n@@ -59,13 +59,13 @@ SELECT\n \n SELECT 'lower range bound';\n WITH\n-    -1420066799 AS timestamp,\n-    CAST(-1420066799123 AS Int64) AS milli,\n-    CAST(-1420066799123456 AS Int64) AS micro,\n-    CAST(-1420066799123456789 AS Int64) AS nano,\n+    -2208985199 AS timestamp,\n+    CAST(-2208985199123 AS Int64) AS milli,\n+    CAST(-2208985199123456 AS Int64) AS micro,\n+    CAST(-2208985199123456789 AS Int64) AS nano,\n     'UTC' AS tz\n SELECT\n     timestamp,\n     fromUnixTimestamp64Milli(milli, tz),\n     fromUnixTimestamp64Micro(micro, tz),\n-    fromUnixTimestamp64Nano(nano, tz);\n\\ No newline at end of file\n+    fromUnixTimestamp64Nano(nano, tz);\ndiff --git a/tests/queries/0_stateless/01691_DateTime64_clamp.reference b/tests/queries/0_stateless/01691_DateTime64_clamp.reference\nindex 6272103440c0..75435aebd678 100644\n--- a/tests/queries/0_stateless/01691_DateTime64_clamp.reference\n+++ b/tests/queries/0_stateless/01691_DateTime64_clamp.reference\n@@ -18,10 +18,10 @@ SELECT toDateTime64(toFloat32(bitShiftLeft(toUInt64(1),33)), 2, 'Asia/Istanbul')\n SELECT toDateTime64(toFloat64(bitShiftLeft(toUInt64(1),33)), 2, 'Asia/Istanbul') FORMAT Null;\n -- These are outsize of extended range and hence clamped\n SELECT toDateTime64(-1 * bitShiftLeft(toUInt64(1), 35), 2, 'Asia/Istanbul');\n-1925-01-01 02:00:00.00\n+1900-01-01 01:56:56.00\n SELECT CAST(-1 * bitShiftLeft(toUInt64(1), 35) AS DateTime64(3, 'Asia/Istanbul'));\n-1925-01-01 02:00:00.000\n+1900-01-01 01:56:56.000\n SELECT CAST(bitShiftLeft(toUInt64(1), 35) AS DateTime64(3, 'Asia/Istanbul'));\n-2282-12-31 03:00:00.000\n+2299-12-31 23:59:59.000\n SELECT toDateTime64(bitShiftLeft(toUInt64(1), 35), 2, 'Asia/Istanbul');\n-2282-12-31 03:00:00.00\n+2299-12-31 23:59:59.00\ndiff --git a/tests/queries/0_stateless/01702_toDateTime_from_string_clamping.reference b/tests/queries/0_stateless/01702_toDateTime_from_string_clamping.reference\nindex f27bf42c7a5b..ecea0a9f69f4 100644\n--- a/tests/queries/0_stateless/01702_toDateTime_from_string_clamping.reference\n+++ b/tests/queries/0_stateless/01702_toDateTime_from_string_clamping.reference\n@@ -1,4 +1,4 @@\n 1940-10-09 21:13:17.6\n-2283-11-11 23:46:43.6\n-2283-11-11 23:46:40.1\n-1925-01-01 00:00:00.9\n+2284-06-04 23:46:43.6\n+2299-12-31 23:40:00.1\n+1900-01-01 00:00:00.9\ndiff --git a/tests/queries/0_stateless/01702_toDateTime_from_string_clamping.sql b/tests/queries/0_stateless/01702_toDateTime_from_string_clamping.sql\nindex b0dbd1dfc842..e84bb35b3a50 100644\n--- a/tests/queries/0_stateless/01702_toDateTime_from_string_clamping.sql\n+++ b/tests/queries/0_stateless/01702_toDateTime_from_string_clamping.sql\n@@ -1,4 +1,4 @@\n SELECT toString(toDateTime('-922337203.6854775808', 1, 'Asia/Istanbul'));\n SELECT toString(toDateTime('9922337203.6854775808', 1, 'Asia/Istanbul'));\n-SELECT toDateTime64(CAST('10000000000.1' AS Decimal64(1)), 1, 'Asia/Istanbul');\n-SELECT toDateTime64(CAST('-10000000000.1' AS Decimal64(1)), 1, 'Asia/Istanbul');\n+SELECT toDateTime64(CAST('10500000000.1' AS Decimal64(1)), 1, 'Asia/Istanbul');\n+SELECT toDateTime64(CAST('-10500000000.1' AS Decimal64(1)), 1, 'Asia/Istanbul');\ndiff --git a/tests/queries/0_stateless/01821_to_date_time_ubsan.reference b/tests/queries/0_stateless/01821_to_date_time_ubsan.reference\nindex 0a762ec3b77a..28c4987125c3 100644\n--- a/tests/queries/0_stateless/01821_to_date_time_ubsan.reference\n+++ b/tests/queries/0_stateless/01821_to_date_time_ubsan.reference\n@@ -1,2 +1,2 @@\n-2283-11-11 23:48:05.4775806\n-2283-11-11 23:52:48.54775806\n+2299-12-31 23:48:05.4775806\n+2299-12-31 23:52:48.54775806\ndiff --git a/tests/queries/0_stateless/01921_datatype_date32.reference b/tests/queries/0_stateless/01921_datatype_date32.reference\nindex 70eebc76c01e..acb0cc4ca598 100644\n--- a/tests/queries/0_stateless/01921_datatype_date32.reference\n+++ b/tests/queries/0_stateless/01921_datatype_date32.reference\n@@ -1,19 +1,19 @@\n-1925-01-01\n-1925-01-01\n-2282-12-31\n-2283-11-11\n+1900-01-01\n+1900-01-01\n+2299-12-15\n+2299-12-31\n 2021-06-22\n -------toYear---------\n-1925\n-1925\n-2282\n-2283\n+1900\n+1900\n+2299\n+2299\n 2021\n -------toMonth---------\n 1\n 1\n 12\n-11\n+12\n 6\n -------toQuarter---------\n 1\n@@ -24,83 +24,83 @@\n -------toDayOfMonth---------\n 1\n 1\n+15\n 31\n-11\n 22\n -------toDayOfWeek---------\n-4\n-4\n-7\n+1\n+1\n+5\n 7\n 2\n -------toDayOfYear---------\n 1\n 1\n-365\n-315\n+349\n+364\n 173\n -------toHour---------\n -------toMinute---------\n -------toSecond---------\n -------toStartOfDay---------\n-2061-02-06 07:28:16\n-2061-02-06 07:28:16\n-2010-10-17 11:03:28\n-2011-08-28 11:03:28\n+2036-02-07 07:31:20\n+2036-02-07 07:31:20\n+2027-10-01 11:03:28\n+2027-10-17 11:03:28\n 2021-06-22 00:00:00\n -------toMonday---------\n-2104-06-04\n-2104-06-04\n-2103-07-21\n-2104-05-31\n+2079-06-07\n+2079-06-07\n+2120-07-06\n+2120-07-20\n 2021-06-21\n -------toISOWeek---------\n 1\n 1\n+50\n 52\n-45\n 25\n -------toISOYear---------\n-1925\n-1925\n-2282\n-2283\n+1900\n+1900\n+2299\n+2299\n 2021\n -------toWeek---------\n 0\n 0\n+50\n 53\n-45\n 25\n -------toYearWeek---------\n-192452\n-192452\n-228253\n-228345\n+189953\n+189953\n+229950\n+229953\n 202125\n -------toStartOfWeek---------\n-2104-06-03\n-2104-06-03\n-2103-07-27\n-2104-06-06\n+2079-06-06\n+2079-06-06\n+2120-07-05\n+2120-07-26\n 2021-06-20\n -------toStartOfMonth---------\n-2104-06-07\n-2104-06-07\n-2103-06-27\n-2104-05-27\n+2079-06-07\n+2079-06-07\n+2120-06-26\n+2120-06-26\n 2021-06-01\n -------toStartOfQuarter---------\n-2104-06-07\n-2104-06-07\n-2103-04-27\n-2104-04-26\n+2079-06-07\n+2079-06-07\n+2120-04-26\n+2120-04-26\n 2021-04-01\n -------toStartOfYear---------\n-2104-06-07\n-2104-06-07\n-2102-07-28\n-2103-07-28\n+2079-06-07\n+2079-06-07\n+2119-07-28\n+2119-07-28\n 2021-01-01\n -------toStartOfSecond---------\n -------toStartOfMinute---------\n@@ -109,183 +109,183 @@\n -------toStartOfFifteenMinutes---------\n -------toStartOfHour---------\n -------toStartOfISOYear---------\n-2104-06-04\n-2104-06-04\n-2102-07-29\n-2103-07-28\n+2079-06-07\n+2079-06-07\n+2119-07-29\n+2119-07-29\n 2021-01-04\n -------toRelativeYearNum---------\n-1925\n-1925\n-2282\n-2283\n+1900\n+1900\n+2299\n+2299\n 2021\n -------toRelativeQuarterNum---------\n-7700\n-7700\n-9131\n-9135\n+7600\n+7600\n+9199\n+9199\n 8085\n -------toRelativeMonthNum---------\n-23101\n-23101\n-27396\n-27407\n+22801\n+22801\n+27600\n+27600\n 24258\n -------toRelativeWeekNum---------\n-63189\n-63189\n-16331\n-63188\n+61885\n+61885\n+17216\n+17217\n 2686\n -------toRelativeDayNum---------\n-49100\n-49100\n-48784\n-49099\n+39969\n+39969\n+54977\n+54993\n 18800\n -------toRelativeHourNum---------\n-4294572852\n-4294572852\n-2743677\n-2751237\n+4294353708\n+4294353708\n+2892309\n+2892693\n 451197\n -------toRelativeMinuteNum---------\n-4271299336\n-4271299336\n-164620620\n-165074220\n+4258150699\n+4258150699\n+173538540\n+173561580\n 27071820\n -------toRelativeSecondNum---------\n-2874889696\n-2874889696\n-1287302608\n-1314518608\n+2085971480\n+2085971480\n+1822377808\n+1823760208\n 1624309200\n -------toTime---------\n -------toYYYYMM---------\n-192501\n-192501\n-228212\n-228311\n+190001\n+190001\n+229912\n+229912\n 202106\n -------toYYYYMMDD---------\n-19250101\n-19250101\n-22821231\n-22831111\n+19000101\n+19000101\n+22991215\n+22991231\n 20210622\n -------toYYYYMMDDhhmmss---------\n-19250101000000\n-19250101000000\n-22821231000000\n-22831111000000\n+19000101000000\n+19000101000000\n+22991215000000\n+22991231000000\n 20210622000000\n -------addSeconds---------\n-1925-01-01 01:00:00.000\n-1925-01-01 01:00:00.000\n-2282-12-31 01:00:00.000\n-2283-11-11 01:00:00.000\n+1900-01-01 01:00:00.000\n+1900-01-01 01:00:00.000\n+2299-12-15 01:00:00.000\n+2299-12-31 01:00:00.000\n 2021-06-22 01:00:00.000\n -------addMinutes---------\n-1925-01-01 01:00:00.000\n-1925-01-01 01:00:00.000\n-2282-12-31 01:00:00.000\n-2283-11-11 01:00:00.000\n+1900-01-01 01:00:00.000\n+1900-01-01 01:00:00.000\n+2299-12-15 01:00:00.000\n+2299-12-31 01:00:00.000\n 2021-06-22 01:00:00.000\n -------addHours---------\n-1925-01-01 01:00:00.000\n-1925-01-01 01:00:00.000\n-2282-12-31 01:00:00.000\n-2283-11-11 01:00:00.000\n+1900-01-01 01:00:00.000\n+1900-01-01 01:00:00.000\n+2299-12-15 01:00:00.000\n+2299-12-31 01:00:00.000\n 2021-06-22 01:00:00.000\n -------addDays---------\n-1925-01-08\n-1925-01-08\n-2283-01-07\n-1925-01-07\n+1900-01-08\n+1900-01-08\n+2299-12-22\n+2299-12-31\n 2021-06-29\n -------addWeeks---------\n-1925-01-08\n-1925-01-08\n-2283-01-07\n-1925-01-07\n+1900-01-08\n+1900-01-08\n+2299-12-22\n+2299-12-31\n 2021-06-29\n -------addMonths---------\n-1925-02-01\n-1925-02-01\n-2283-01-31\n-2283-11-11\n+1900-02-01\n+1900-02-01\n+2299-12-31\n+2299-12-31\n 2021-07-22\n -------addQuarters---------\n-1925-04-01\n-1925-04-01\n-2283-03-31\n-2283-11-11\n+1900-04-01\n+1900-04-01\n+2299-12-31\n+2299-12-31\n 2021-09-22\n -------addYears---------\n-1926-01-01\n-1926-01-01\n-2283-11-11\n-2283-11-11\n+1901-01-01\n+1901-01-01\n+2299-12-31\n+2299-12-31\n 2022-06-22\n -------subtractSeconds---------\n-1925-01-01 00:00:00.000\n-1925-01-01 00:00:00.000\n-2282-12-30 23:00:00.000\n-2283-11-10 23:00:00.000\n+1900-01-01 00:00:00.000\n+1900-01-01 00:00:00.000\n+2299-12-14 23:00:00.000\n+2299-12-30 23:00:00.000\n 2021-06-21 23:00:00.000\n -------subtractMinutes---------\n-1925-01-01 00:00:00.000\n-1925-01-01 00:00:00.000\n-2282-12-30 23:00:00.000\n-2283-11-10 23:00:00.000\n+1900-01-01 00:00:00.000\n+1900-01-01 00:00:00.000\n+2299-12-14 23:00:00.000\n+2299-12-30 23:00:00.000\n 2021-06-21 23:00:00.000\n -------subtractHours---------\n-1925-01-01 00:00:00.000\n-1925-01-01 00:00:00.000\n-2282-12-30 23:00:00.000\n-2283-11-10 23:00:00.000\n+1900-01-01 00:00:00.000\n+1900-01-01 00:00:00.000\n+2299-12-14 23:00:00.000\n+2299-12-30 23:00:00.000\n 2021-06-21 23:00:00.000\n -------subtractDays---------\n-2283-11-05\n-2283-11-05\n-2282-12-24\n-2283-11-04\n+2299-12-31\n+2299-12-31\n+2299-12-08\n+2299-12-24\n 2021-06-15\n -------subtractWeeks---------\n-2283-11-05\n-2283-11-05\n-2282-12-24\n-2283-11-04\n+2299-12-31\n+2299-12-31\n+2299-12-08\n+2299-12-24\n 2021-06-15\n -------subtractMonths---------\n-1925-01-01\n-1925-01-01\n-2282-11-30\n-2283-10-11\n+1900-01-01\n+1900-01-01\n+2299-11-15\n+2299-11-30\n 2021-05-22\n -------subtractQuarters---------\n-1925-01-01\n-1925-01-01\n-2282-09-30\n-2283-08-11\n+1900-01-01\n+1900-01-01\n+2299-09-15\n+2299-09-30\n 2021-03-22\n -------subtractYears---------\n-1925-01-01\n-1925-01-01\n-2281-12-31\n-2282-11-11\n+1900-01-01\n+1900-01-01\n+2298-12-15\n+2298-12-31\n 2020-06-22\n -------toDate32---------\n-1925-01-01\t2000-01-01\n-1925-01-01\t1925-01-01\n-1925-01-01\t\\N\n-1925-01-01\n+1900-01-01\t2000-01-01\n+1900-01-01\t1900-01-01\n+1900-01-01\t\\N\n+1900-01-01\n \\N\n-1925-01-01\n+1900-01-01\n 1969-12-31\n 1970-01-01\n 2149-06-06\n 2149-06-07\n-2283-11-11\n+2299-12-31\ndiff --git a/tests/queries/0_stateless/01921_datatype_date32.sql b/tests/queries/0_stateless/01921_datatype_date32.sql\nindex ef6e3e5ee899..8b65f82825f3 100644\n--- a/tests/queries/0_stateless/01921_datatype_date32.sql\n+++ b/tests/queries/0_stateless/01921_datatype_date32.sql\n@@ -1,7 +1,7 @@\n drop table if exists t1;\n create table t1(x1 Date32) engine Memory;\n \n-insert into t1 values ('1925-01-01'),('1924-01-01'),('2282-12-31'),('2283-12-31'),('2021-06-22');\n+insert into t1 values ('1900-01-01'),('1899-01-01'),('2299-12-15'),('2300-12-31'),('2021-06-22');\n \n select x1 from t1;\n select '-------toYear---------';\n@@ -113,20 +113,19 @@ select subtractQuarters(x1, 1) from t1;\n select '-------subtractYears---------';\n select subtractYears(x1, 1) from t1;\n select '-------toDate32---------';\n-select toDate32('1925-01-01'), toDate32(toDate('2000-01-01'));\n-select toDate32OrZero('1924-01-01'), toDate32OrNull('1924-01-01');\n+select toDate32('1900-01-01'), toDate32(toDate('2000-01-01'));\n+select toDate32OrZero('1899-01-01'), toDate32OrNull('1899-01-01');\n select toDate32OrZero(''), toDate32OrNull('');\n select (select toDate32OrZero(''));\n select (select toDate32OrNull(''));\n SELECT toString(T.d) dateStr\n FROM\n     (\n-    SELECT '1925-01-01'::Date32 d\n+    SELECT '1900-01-01'::Date32 d\n     UNION ALL SELECT '1969-12-31'::Date32\n     UNION ALL SELECT '1970-01-01'::Date32\n     UNION ALL SELECT '2149-06-06'::Date32\n     UNION ALL SELECT '2149-06-07'::Date32\n-    UNION ALL SELECT '2283-11-11'::Date32\n+    UNION ALL SELECT '2299-12-31'::Date32\n     ) AS T\n ORDER BY T.d\n-\ndiff --git a/tests/queries/0_stateless/02243_make_date32.reference b/tests/queries/0_stateless/02243_make_date32.reference\nindex ac4b10d371ac..b986cd285f47 100644\n--- a/tests/queries/0_stateless/02243_make_date32.reference\n+++ b/tests/queries/0_stateless/02243_make_date32.reference\n@@ -28,10 +28,9 @@ Nullable(Date32)\n 1969-01-01\n 1969-12-01\n 1969-12-31\n-2282-01-01\n-2283-01-01\n-2283-11-11\n-1970-01-01\n+2298-01-01\n+2299-01-01\n+2299-12-31\n 1970-01-01\n 1970-01-01\n 1970-01-01\ndiff --git a/tests/queries/0_stateless/02243_make_date32.sql b/tests/queries/0_stateless/02243_make_date32.sql\nindex c01855546c54..2cf4ac6b358d 100644\n--- a/tests/queries/0_stateless/02243_make_date32.sql\n+++ b/tests/queries/0_stateless/02243_make_date32.sql\n@@ -39,14 +39,13 @@ select makeDate32(2150,1,1);\n select makeDate32(1969,1,1);\n select makeDate32(1969,12,1);\n select makeDate32(1969,12,31);\n-select makeDate32(2282,1,1);\n-select makeDate32(2283,1,1);\n-select makeDate32(2283,11,11);\n-select makeDate32(2283,11,12);\n-select makeDate32(2284,1,1);\n-select makeDate32(1924,1,1);\n-select makeDate32(1924,12,1);\n-select makeDate32(1924,12,31);\n+select makeDate32(2298,1,1);\n+select makeDate32(2299,1,1);\n+select makeDate32(2299,12,31);\n+select makeDate32(2300,1,1);\n+select makeDate32(1899,1,1);\n+select makeDate32(1899,12,1);\n+select makeDate32(1899,12,31);\n select makeDate32(1970,0,0);\n select makeDate32(1970,0,1);\n select makeDate32(1970,1,0);\ndiff --git a/tests/queries/0_stateless/02245_make_datetime64.reference b/tests/queries/0_stateless/02245_make_datetime64.reference\nindex eea768f1dc73..0ac672ae54dc 100644\n--- a/tests/queries/0_stateless/02245_make_datetime64.reference\n+++ b/tests/queries/0_stateless/02245_make_datetime64.reference\n@@ -8,9 +8,9 @@ DateTime64(3)\n DateTime64(6)\n DateTime64(7, \\'CET\\')\n DateTime64(7, \\'UTC\\')\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n-2283-11-11 23:59:59.99999999\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+2299-12-31 23:59:59.99999999\n 2262-04-11 23:47:16.854775807\n 2262-04-11 23:47:16.85477581\n 1991-08-24 21:04:00\n@@ -23,10 +23,10 @@ DateTime64(7, \\'UTC\\')\n 1991-08-24 21:04:00.0001234\n 1991-08-24 21:04:00.00001234\n 1991-08-24 21:04:00.000001234\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n 1984-01-02 01:00:00.000000000\n 1984-01-01 01:10:00.000000000\n 1984-01-01 00:01:10.000000000\n@@ -37,22 +37,22 @@ DateTime64(7, \\'UTC\\')\n 1983-03-02 02:03:04.000000005\n 1984-03-02 02:03:04.000000005\n 1983-03-03 02:03:04.000000005\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n 1984-01-01 02:03:04.000000000\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n-1925-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n+1900-01-01 00:00:00.000000000\n 1984-01-01 00:00:00.000000000\n 1984-01-01 00:00:00.000000000\n 1984-01-01 00:00:00.000000000\n@@ -61,9 +61,9 @@ DateTime64(7, \\'UTC\\')\n 1984-01-01 00:00:00.000000000\n 1984-01-01 00:00:00.000000000\n 1984-01-01 00:00:00.000000000\n-2283-11-11 23:59:59.999\n-1925-01-01 00:00:00.000\n-1925-01-01 00:00:00.000\n-1925-01-01 00:00:00.000\n-1925-01-01 00:00:00.000\n-1925-01-01 00:00:00.000\n+2299-12-31 23:59:59.999\n+1900-01-01 00:00:00.000\n+1900-01-01 00:00:00.000\n+1900-01-01 00:00:00.000\n+1900-01-01 00:00:00.000\n+1900-01-01 00:00:00.000\ndiff --git a/tests/queries/0_stateless/02245_make_datetime64.sql b/tests/queries/0_stateless/02245_make_datetime64.sql\nindex 2e2d81fa3636..054cbd8956d4 100644\n--- a/tests/queries/0_stateless/02245_make_datetime64.sql\n+++ b/tests/queries/0_stateless/02245_make_datetime64.sql\n@@ -10,10 +10,10 @@ select toTypeName(makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 6));\n select toTypeName(makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 7, 'CET'));\n select toTypeName(cast(makeDateTime64(1991, 8, 24, 21, 4, 0, 1234, 7, 'CET') as DateTime64(7, 'UTC')));\n \n-select makeDateTime64(1925, 1, 1, 0, 0, 0, 0, 9, 'UTC');\n-select makeDateTime64(1924, 12, 31, 23, 59, 59, 999999999, 9, 'UTC');\n-select makeDateTime64(2283, 11, 11, 23, 59, 59, 99999999, 8, 'UTC');\n-select makeDateTime64(2283, 11, 11, 23, 59, 59, 999999999, 9, 'UTC'); -- { serverError 407 }\n+select makeDateTime64(1900, 1, 1, 0, 0, 0, 0, 9, 'UTC');\n+select makeDateTime64(1899, 12, 31, 23, 59, 59, 999999999, 9, 'UTC');\n+select makeDateTime64(2299, 12, 31, 23, 59, 59, 99999999, 8, 'UTC');\n+select makeDateTime64(2299, 12, 31, 23, 59, 59, 999999999, 9, 'UTC'); -- { serverError 407 }\n select makeDateTime64(2262, 4, 11, 23, 47, 16, 854775807, 9, 'UTC');\n select makeDateTime64(2262, 4, 11, 23, 47, 16, 854775808, 9, 'UTC'); -- { serverError 407 }\n select makeDateTime64(2262, 4, 11, 23, 47, 16, 85477581, 8, 'UTC');\ndiff --git a/tests/queries/0_stateless/02346_non_negative_derivative.reference b/tests/queries/0_stateless/02346_non_negative_derivative.reference\nindex 51fe2359bd01..b81af45962ee 100644\n--- a/tests/queries/0_stateless/02346_non_negative_derivative.reference\n+++ b/tests/queries/0_stateless/02346_non_negative_derivative.reference\n@@ -1,63 +1,63 @@\n 1\n 1979-12-12 21:21:21.127\t3.7\t0\n-2283-11-11 23:37:36.788\t1.1\t0\n-2283-11-11 23:37:36.789\t2.34\t0\n+2299-12-31 23:37:36.788\t1.1\t0\n+2299-12-31 23:37:36.789\t2.34\t0\n 1979-12-12 21:21:21.129\t2.1\t0\n 1979-12-12 21:21:22.000\t1.3345\t0\n 1979-12-12 21:21:23.000\t1.54\t0.20550000000000002\n 1979-12-12 21:21:23.000\t1.54\t0\n 1979-12-12 21:21:21.127\t3.7\t0\n-2283-11-11 23:37:36.788\t1.1\t0\n-2283-11-11 23:37:36.789\t2.34\t0\n+2299-12-31 23:37:36.788\t1.1\t0\n+2299-12-31 23:37:36.789\t2.34\t0\n 1979-12-12 21:21:21.129\t2.1\t0\n 1979-12-12 21:21:22.000\t1.3345\t0\n 1979-12-12 21:21:23.000\t1.54\t6.165000000000001e-10\n 1979-12-12 21:21:23.000\t1.54\t0\n 1979-12-12 21:21:21.127\t3.7\t0\n-2283-11-11 23:37:36.788\t1.1\t0\n-2283-11-11 23:37:36.789\t2.34\t0\n+2299-12-31 23:37:36.788\t1.1\t0\n+2299-12-31 23:37:36.789\t2.34\t0\n 1979-12-12 21:21:21.129\t2.1\t0\n 1979-12-12 21:21:22.000\t1.3345\t0\n 1979-12-12 21:21:23.000\t1.54\t8.22e-7\n 1979-12-12 21:21:23.000\t1.54\t0\n 1979-12-12 21:21:21.127\t3.7\t0\n-2283-11-11 23:37:36.788\t1.1\t0\n-2283-11-11 23:37:36.789\t2.34\t0\n+2299-12-31 23:37:36.788\t1.1\t0\n+2299-12-31 23:37:36.789\t2.34\t0\n 1979-12-12 21:21:21.129\t2.1\t0\n 1979-12-12 21:21:22.000\t1.3345\t0\n 1979-12-12 21:21:23.000\t1.54\t0.0010275000000000002\n 1979-12-12 21:21:23.000\t1.54\t0\n 1979-12-12 21:21:21.127\t3.7\t0\n-2283-11-11 23:37:36.788\t1.1\t0\n-2283-11-11 23:37:36.789\t2.34\t0\n+2299-12-31 23:37:36.788\t1.1\t0\n+2299-12-31 23:37:36.789\t2.34\t0\n 1979-12-12 21:21:21.129\t2.1\t0\n 1979-12-12 21:21:22.000\t1.3345\t0\n 1979-12-12 21:21:23.000\t1.54\t1.233\n 1979-12-12 21:21:23.000\t1.54\t0\n 1979-12-12 21:21:21.127\t3.7\t0\n-2283-11-11 23:37:36.788\t1.1\t0\n-2283-11-11 23:37:36.789\t2.34\t0\n+2299-12-31 23:37:36.788\t1.1\t0\n+2299-12-31 23:37:36.789\t2.34\t0\n 1979-12-12 21:21:21.129\t2.1\t0\n 1979-12-12 21:21:22.000\t1.3345\t0\n 1979-12-12 21:21:23.000\t1.54\t86.31\n 1979-12-12 21:21:23.000\t1.54\t0\n 1979-12-12 21:21:21.127\t3.7\t0\n-2283-11-11 23:37:36.788\t1.1\t0\n-2283-11-11 23:37:36.789\t2.34\t0\n+2299-12-31 23:37:36.788\t1.1\t0\n+2299-12-31 23:37:36.789\t2.34\t0\n 1979-12-12 21:21:21.129\t2.1\t0\n 1979-12-12 21:21:22.000\t1.3345\t0\n 1979-12-12 21:21:23.000\t1.54\t5918.400000000001\n 1979-12-12 21:21:23.000\t1.54\t0\n 1979-12-12 21:21:21.127\t3.7\t0\n-2283-11-11 23:37:36.788\t1.1\t0\n-2283-11-11 23:37:36.789\t2.34\t0\n+2299-12-31 23:37:36.788\t1.1\t0\n+2299-12-31 23:37:36.789\t2.34\t0\n 1979-12-12 21:21:21.129\t2.1\t0\n 1979-12-12 21:21:22.000\t1.3345\t0\n 1979-12-12 21:21:23.000\t1.54\t159796.80000000002\n 1979-12-12 21:21:23.000\t1.54\t0\n 1979-12-12 21:21:21.127\t3.7\t0\n-2283-11-11 23:37:36.788\t1.1\t0\n-2283-11-11 23:37:36.789\t2.34\t0\n+2299-12-31 23:37:36.788\t1.1\t0\n+2299-12-31 23:37:36.789\t2.34\t0\n 1979-12-12 21:21:21.129\t2.1\t0\n 1979-12-12 21:21:22.000\t1.3345\t0\n 1979-12-12 21:21:23.000\t1.54\t1242864\n",
  "problem_statement": "Extend range of Datetime64 and Date32\nNot long ago, I submitted a pull request for Date32\uff08https://github.com/ClickHouse/ClickHouse/pull/25774\uff09, in order to solve the problem of too small date range, but for some banking systems, there are still data dates before 1925. I want to extend the existing date range, for example to 1900.\r\n\r\nI want to know if this approach can be accepted by the community.\n",
  "hints_text": "@alexey-milovidov, any idea? if it is ok, we can submit PR soon\nReason why range was limited by 1925, it's because implementing calendar further would  complicate LUT a lot.\r\n\r\nhttps://github.com/ClickHouse/ClickHouse/pull/9404\r\n\r\n```\r\n The Year 1925 is a starting point because most of the timezones switched to saner (mostly 15-minutes based) offsets somewhere during 1924 or before. And that significantly simplifies implementation.\r\n ```\nunfortunately, some corporate databases use 1900-01-01 as the \"default\" datetime value. It is not possible to transfer such datasets to CH unchanged\nAnd you do care about difference between 1900-01-01 and 1925-01-01?\r\n\r\n```\r\nSELECT toDate32('1900-01-01')\r\n\r\nQuery id: 8277b900-19fb-426c-a60b-bdc3f4d1c200\r\n\r\n\u250c\u2500toDate32('1900-01-01')\u2500\u2510\r\n\u2502             1925-01-01 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```",
  "created_at": "2022-07-20T16:02:02Z",
  "modified_files": [
    "docs/en/sql-reference/data-types/date32.md",
    "docs/en/sql-reference/data-types/datetime64.md",
    "docs/en/sql-reference/functions/date-time-functions.md",
    "docs/en/sql-reference/functions/type-conversion-functions.md",
    "docs/ru/sql-reference/data-types/date32.md",
    "docs/ru/sql-reference/data-types/datetime64.md",
    "docs/ru/sql-reference/functions/date-time-functions.md",
    "docs/ru/sql-reference/functions/type-conversion-functions.md",
    "docs/zh/sql-reference/data-types/datetime64.md",
    "docs/zh/sql-reference/functions/date-time-functions.md",
    "src/Common/DateLUTImpl.h",
    "src/Functions/FunctionsConversion.h",
    "src/Functions/makeDate.cpp",
    "src/Storages/StorageGenerateRandom.cpp"
  ],
  "modified_test_files": [
    "src/Common/tests/gtest_DateLUTImpl.cpp",
    "tests/integration/test_materialized_mysql_database/materialize_with_ddl.py",
    "tests/integration/test_timezone_config/test.py",
    "tests/queries/0_stateless/00189_time_zones_long.reference",
    "tests/queries/0_stateless/01087_table_function_generate.reference",
    "tests/queries/0_stateless/01277_fromUnixTimestamp64.reference",
    "tests/queries/0_stateless/01277_fromUnixTimestamp64.sql",
    "tests/queries/0_stateless/01691_DateTime64_clamp.reference",
    "tests/queries/0_stateless/01702_toDateTime_from_string_clamping.reference",
    "tests/queries/0_stateless/01702_toDateTime_from_string_clamping.sql",
    "tests/queries/0_stateless/01821_to_date_time_ubsan.reference",
    "tests/queries/0_stateless/01921_datatype_date32.reference",
    "tests/queries/0_stateless/01921_datatype_date32.sql",
    "tests/queries/0_stateless/02243_make_date32.reference",
    "tests/queries/0_stateless/02243_make_date32.sql",
    "tests/queries/0_stateless/02245_make_datetime64.reference",
    "tests/queries/0_stateless/02245_make_datetime64.sql",
    "tests/queries/0_stateless/02346_non_negative_derivative.reference"
  ]
}