{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 47028,
  "instance_id": "ClickHouse__ClickHouse-47028",
  "issue_numbers": [
    "45218"
  ],
  "base_commit": "19f6446d8ca5dbb0e4ba49a398366a00e0156738",
  "patch": "diff --git a/src/Interpreters/ActionsDAG.cpp b/src/Interpreters/ActionsDAG.cpp\nindex bfb010b6105d..daba4c1608db 100644\n--- a/src/Interpreters/ActionsDAG.cpp\n+++ b/src/Interpreters/ActionsDAG.cpp\n@@ -1946,7 +1946,7 @@ ActionsDAGPtr ActionsDAG::cloneActionsForFilterPushDown(\n     }\n \n     auto conjunction = getConjunctionNodes(predicate, allowed_nodes);\n-    if (conjunction.rejected.size() == 1 && WhichDataType{conjunction.rejected.front()->result_type}.isFloat())\n+    if (conjunction.rejected.size() == 1 && WhichDataType{removeNullable(conjunction.rejected.front()->result_type)}.isFloat())\n         return nullptr;\n \n     auto actions = cloneActionsForConjunction(conjunction.allowed, all_inputs);\n@@ -2014,7 +2014,7 @@ ActionsDAGPtr ActionsDAG::cloneActionsForFilterPushDown(\n                 node.children.swap(new_children);\n                 *predicate = std::move(node);\n             }\n-            else if (!WhichDataType{new_children.front()->result_type}.isFloat())\n+            else if (!WhichDataType{removeNullable(new_children.front()->result_type)}.isFloat())\n             {\n                 /// If type is different, cast column.\n                 /// This case is possible, cause AND can use any numeric type as argument.\n@@ -2045,7 +2045,7 @@ ActionsDAGPtr ActionsDAG::cloneActionsForFilterPushDown(\n             /// remove the AND.\n             /// Just update children and rebuild it.\n             predicate->children.swap(new_children);\n-            if (WhichDataType{predicate->children.front()->result_type}.isFloat())\n+            if (WhichDataType{removeNullable(predicate->children.front()->result_type)}.isFloat())\n             {\n                 Node node;\n                 node.type = ActionType::COLUMN;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02674_and_consistency.reference b/tests/queries/0_stateless/02674_and_consistency.reference\nnew file mode 100644\nindex 000000000000..e74ab1928c5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02674_and_consistency.reference\n@@ -0,0 +1,4 @@\n+10\n+#45218\n+10\n+=\ndiff --git a/tests/queries/0_stateless/02674_and_consistency.sql b/tests/queries/0_stateless/02674_and_consistency.sql\nnew file mode 100644\nindex 000000000000..5988832ba68b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02674_and_consistency.sql\n@@ -0,0 +1,21 @@\n+SELECT SUM(number)\n+FROM\n+(\n+    SELECT 10 AS number\n+)\n+GROUP BY number\n+HAVING 1 AND sin(SUMOrNull(number))\n+SETTINGS enable_optimize_predicate_expression = 0;\n+\n+select '#45218';\n+\n+SELECT SUM(number)\n+FROM\n+(\n+    SELECT 10 AS number\n+)\n+GROUP BY cos(min2(number, number) % number) - number\n+HAVING ((-sign(-233841197)) IS NOT NULL) AND sin(lcm(SUM(number), SUM(number)) >= ('372497213' IS NOT NULL))\n+SETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0;\n+\n+select '=';\n",
  "problem_statement": "Incorrect HAVING filtering\nStrange situation. HAVING is always true in this 3 queries.\r\nWhen we use `cond1 AND cond2` it returns no rows. \r\n\r\nSo here we this conditions computed separately: \r\n```\r\nSELECT (-sign(-233841197)) IS NOT NULL\r\n\r\n\u250c\u2500isNotNull(negate(sign(-233841197)))\u2500\u2510\r\n\u2502                                   1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT sin(lcm(10, 10) >= ('372497213' IS NOT NULL))\r\n\r\n\u250c\u2500sin(greaterOrEquals(lcm(10, 10), isNotNull('372497213')))\u2500\u2510\r\n\u2502                                        0.8414709848078965 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT ((-sign(-233841197)) IS NOT NULL) AND sin(lcm(10, 10) >= ('372497213' IS NOT NULL))\r\n\r\n\u250c\u2500and(isNotNull(negate(sign(-233841197))), sin(greaterOrEquals(lcm(10, 10), isNotNull('372497213'))))\u2500\u2510\r\n\u2502                                                                                                   1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nThis is a query with issue. Nothing is returned.\r\n```\r\nSELECT SUM(number)\r\nFROM\r\n(\r\n    SELECT 10 AS number\r\n)\r\nGROUP BY cos(min2(number, number) % number) - number\r\nHAVING ((-sign(-233841197)) IS NOT NULL) AND sin(lcm(SUM(number), SUM(number)) >= ('372497213' IS NOT NULL))\r\nSETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0\r\n\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.002 sec.\r\n\r\n```\r\n\r\nIf I remove second half of condition it returns answer \r\n```\r\nSELECT SUM(number)\r\nFROM\r\n(\r\n    SELECT 10 AS number\r\n)\r\nGROUP BY cos(min2(number, number) % number) - number\r\nHAVING (-sign(-233841197)) IS NOT NULL\r\nSETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0\r\n\r\n\u250c\u2500SUM(number)\u2500\u2510\r\n\u2502          10 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.001 sec.\r\n```\r\n\r\nIf I replace `((-sign(-233841197)) IS NOT NULL)` to `true` it also works \r\n```\r\nSELECT SUM(number)\r\nFROM\r\n(\r\n    SELECT 10 AS number\r\n)\r\nGROUP BY cos(min2(number, number) % number) - number\r\nHAVING true AND sin(lcm(SUM(number), SUM(number)) >= ('372497213' IS NOT NULL))\r\nSETTINGS aggregate_functions_null_for_empty = 1, enable_optimize_predicate_expression = 0\r\n\r\nQuery id: 44e373a8-9987-4202-840a-cc025bfa27d3\r\n\r\n\u250c\u2500SUM(number)\u2500\u2510\r\n\u2502          10 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 row in set. Elapsed: 0.002 sec.\r\n```\r\n\r\nPS\r\nAnd we do not allow to use Float as WHERE contition, but allow to boolean logic with Float. \r\nSo we may force ClickHouse to use Float in condition using `true AND ...`. Maybe it is time to just allow other types in WHERE as workaround is just `true and`.\n",
  "hints_text": "",
  "created_at": "2023-02-28T15:45:23Z",
  "modified_files": [
    "src/Interpreters/ActionsDAG.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02674_and_consistency.reference",
    "b/tests/queries/0_stateless/02674_and_consistency.sql"
  ]
}