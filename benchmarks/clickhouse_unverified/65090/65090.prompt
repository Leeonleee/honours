You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Interpolate + remote + new analyzer => Unknown expression identifier
```
SELECT
    toStartOfInterval(event_time, toIntervalMinute(5)) AS period,
    uniqExact(query_id) AS count
FROM remote('127.0.0.{1,2}', system.query_log)
WHERE (period > (NOW() - toIntervalHour(24))) AND ((Settings['log_comment']) != 'abc') AND (user NOT IN ('def', 'gh')) AND (is_initial_query = 1) AND (exception_code != 0)
GROUP BY period
ORDER BY period ASC WITH FILL STEP toIntervalMinute(5)
INTERPOLATE ( count AS 0 )

Query id: 5e4b3158-d006-474d-8b13-4f1f74beda35


Elapsed: 0.012 sec. 

Received exception from server (version 24.6.1):
Code: 47. DB::Exception: Received from localhost:9000. DB::Exception: Unknown expression identifier 'uniqExact(__table1.query_id)' in scope SELECT toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) AS period, uniqExact(__table1.query_id) AS count FROM system.query_log AS __table1 WHERE (toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) > _CAST(1716986418, 'DateTime')) AND ((__table1.Settings['log_comment']) != 'abc') AND (__table1.user NOT IN ('def', 'gh')) AND (__table1.is_initial_query = 1) AND (__table1.exception_code != 0) GROUP BY toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) ORDER BY toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) ASC WITH FILL STEP _CAST(5, 'IntervalMinute') INTERPOLATE ( uniqExact(__table1.query_id) AS 0 ). (UNKNOWN_IDENTIFIER)

```

```
2024.05.30 12:41:38.266680 [ 3835182 ] {7388c76f-2f6e-4e60-b9f3-d1785d5f1fa4} <Error> TCPHandler: Code: 47. DB::Exception: Unknown expression identifier 'uniqExact(__table1.query_id)' in scope SELECT toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) AS period, uniqExact(__table1.query_id) AS count FROM system.query_log AS __table1 WHERE (toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) > _CAST(1716986498, 'DateTime')) AND ((__table1.Settings['log_comment']) != 'abc') AND (__table1.user NOT IN ('def', 'gh')) AND (__table1.is_initial_query = 1) AND (__table1.exception_code != 0) GROUP BY toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) ORDER BY toStartOfInterval(__table1.event_time, _CAST(5, 'IntervalMinute')) ASC WITH FILL STEP _CAST(5, 'IntervalMinute') INTERPOLATE ( uniqExact(__table1.query_id) AS 0 ). (UNKNOWN_IDENTIFIER), Stack trace (when copying this message, always include the lines below):

0. ./contrib/llvm-project/libcxx/include/exception:141: Poco::Exception::Exception(String const&, int) @ 0x0000000011780ad2
1. ./build/./src/Common/Exception.cpp:101: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000000a3332f9
2. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000005c42dcc
3. ./contrib/llvm-project/libcxx/include/vector:434: DB::Exception::Exception<char const*, String&, String const&, String, String>(int, FormatStringHelperImpl<std::type_identity<char const*>::type, std::type_identity<String&>::type, std::type_identity<String const&>::type, std::type_identity<String>::type, std::type_identity<String>::type>, char const*&&, String&, String const&, String&&, String&&) @ 0x000000000f011379
4. ./build/./src/Analyzer/Resolve/QueryAnalyzer.cpp:0: DB::QueryAnalyzer::resolveExpressionNode(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&, bool, bool, bool) @ 0x000000000efda8cb
5. ./contrib/llvm-project/libcxx/include/vector:434: DB::QueryAnalyzer::resolveInterpolateColumnsNodeList(std::shared_ptr<DB::IQueryTreeNode>&, DB::IdentifierResolveScope&) @ 0x000000000f007f36
6. ./build/./src/Analyzer/Resolve/QueryAnalyzer.cpp:0: DB::QueryAnalyzer::resolveQuery(std::shared_ptr<DB::IQueryTreeNode> const&, DB::IdentifierResolveScope&) @ 0x000000000efd3236
7. ./build/./src/Analyzer/Resolve/QueryAnalyzer.cpp:0: DB::QueryAnalyzer::resolve(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::IQueryTreeNode> const&, std::shared_ptr<DB::Context const>) @ 0x000000000efd1e6c
8. ./build/./src/Analyzer/Resolve/QueryAnalysisPass.cpp:0: DB::QueryAnalysisPass::run(std::shared_ptr<DB::IQueryTreeNode>&, std::shared_ptr<DB::Context const>) @ 0x000000000efd16b5
9. ./build/./src/Analyzer/QueryTreePassManager.cpp:208: DB::QueryTreePassManager::run(std::shared_ptr<DB::IQueryTreeNode>, unsigned long) @ 0x000000000efd00a1
10. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:596: DB::QueryTreePassManager::runOnlyResolve(std::shared_ptr<DB::IQueryTreeNode>) @ 0x000000000efcffc8
11. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:833: DB::(anonymous namespace)::buildQueryTreeAndRunPasses(std::shared_ptr<DB::IAST> const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<DB::IStorage> const&) @ 0x000000000f282ed4
12. ./build/./src/Interpreters/InterpreterSelectQueryAnalyzer.cpp:160: DB::InterpreterSelectQueryAnalyzer::InterpreterSelectQueryAnalyzer(std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const> const&, DB::SelectQueryOptions const&, std::vector<String, std::allocator<String>> const&) @ 0x000000000f2812da
13. ./contrib/llvm-project/libcxx/include/vector:434: DB::createLocalPlan(std::shared_ptr<DB::IAST> const&, DB::Block const&, std::shared_ptr<DB::Context const>, DB::QueryProcessingStage::Enum, unsigned long, unsigned long, bool) @ 0x00000000109e9a90
14. ./build/./src/Interpreters/ClusterProxy/SelectStreamFactory.cpp:160: DB::ClusterProxy::SelectStreamFactory::createForShardImpl(DB::Cluster::ShardInfo const&, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::IQueryTreeNode> const&, DB::StorageID const&, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, std::vector<std::unique_ptr<DB::QueryPlan, std::default_delete<DB::QueryPlan>>, std::allocator<std::unique_ptr<DB::QueryPlan, std::default_delete<DB::QueryPlan>>>>&, std::vector<DB::ClusterProxy::SelectStreamFactory::Shard, std::allocator<DB::ClusterProxy::SelectStreamFactory::Shard>>&, unsigned int, bool, std::function<std::shared_ptr<DB::IAST> (unsigned long)>, bool)::$_0::operator()() const @ 0x000000000f73332f
15. ./build/./src/Interpreters/ClusterProxy/SelectStreamFactory.cpp:233: DB::ClusterProxy::SelectStreamFactory::createForShardImpl(DB::Cluster::ShardInfo const&, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::IQueryTreeNode> const&, DB::StorageID const&, std::shared_ptr<DB::IAST> const&, std::shared_ptr<DB::Context const>, std::vector<std::unique_ptr<DB::QueryPlan, std::default_delete<DB::QueryPlan>>, std::allocator<std::unique_ptr<DB::QueryPlan, std::default_delete<DB::QueryPlan>>>>&, std::vector<DB::ClusterProxy::SelectStreamFactory::Shard, std::allocator<DB::ClusterProxy::SelectStreamFactory::Shard>>&, unsigned int, bool, std::function<std::shared_ptr<DB::IAST> (unsigned long)>, bool) @ 0x000000000f731b13
16. ./contrib/llvm-project/libcxx/include/__functional/function.h:818: ? @ 0x000000000f7335e1
17. ./contrib/llvm-project/libcxx/include/__functional/function.h:818: ? @ 0x000000000f728d56
18. ./contrib/llvm-project/libcxx/include/__functional/function.h:818: ? @ 0x000000000fb1405c
19. ./build/./src/Planner/PlannerJoinTree.cpp:0: DB::(anonymous namespace)::buildQueryPlanForTableExpression(std::shared_ptr<DB::IQueryTreeNode>, DB::SelectQueryInfo const&, DB::SelectQueryOptions const&, std::shared_ptr<DB::PlannerContext>&, bool, bool) @ 0x000000000f2b028e
20. ./build/./src/Planner/PlannerJoinTree.cpp:1679: DB::buildJoinTreeQueryPlan(std::shared_ptr<DB::IQueryTreeNode> const&, DB::SelectQueryInfo const&, DB::SelectQueryOptions&, std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>> const&, std::shared_ptr<DB::PlannerContext>&) @ 0x000000000f2a77a1
21. ./build/./src/Planner/Planner.cpp:0: DB::Planner::buildPlanForQueryNode() @ 0x000000000f28938d
22. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:815: DB::Planner::buildQueryPlanIfNeeded() @ 0x000000000f285d47
23. ./src/Planner/Planner.h:44: DB::InterpreterSelectQueryAnalyzer::getQueryPlan() @ 0x000000000f283f8d
24. ./build/./src/Interpreters/executeQuery.cpp:1161: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x000000000f621720
25. ./build/./src/Interpreters/executeQuery.cpp:1375: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x000000000f61e7d5
26. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:612: DB::TCPHandler::runImpl() @ 0x00000000105bc155
27. ./contrib/llvm-project/libcxx/include/__memory/shared_ptr.h:593: DB::TCPHandler::run() @ 0x00000000105d3579
28. ./build/./base/poco/Net/src/TCPServerConnection.cpp:57: Poco::Net::TCPServerConnection::start() @ 0x000000001176f067
29. ./contrib/llvm-project/libcxx/include/__memory/unique_ptr.h:48: Poco::Net::TCPServerDispatcher::run() @ 0x000000001176f53a
30. ./build/./base/poco/Foundation/src/ThreadPool.cpp:202: Poco::PooledThread::run() @ 0x00000000117d5fe7
31. ./base/poco/Foundation/include/Poco/SharedPtr.h:139: Poco::ThreadImpl::runnableEntry(void*) @ 0x00000000117d3b03

```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
