diff --git a/src/Analyzer/InterpolateNode.cpp b/src/Analyzer/InterpolateNode.cpp
index e4f7e22b8039..97dc79f565bd 100644
--- a/src/Analyzer/InterpolateNode.cpp
+++ b/src/Analyzer/InterpolateNode.cpp
@@ -10,9 +10,12 @@
 namespace DB
 {
 
-InterpolateNode::InterpolateNode(QueryTreeNodePtr expression_, QueryTreeNodePtr interpolate_expression_)
+InterpolateNode::InterpolateNode(std::shared_ptr<IdentifierNode> expression_, QueryTreeNodePtr interpolate_expression_)
     : IQueryTreeNode(children_size)
 {
+    if (expression_)
+        expression_name = expression_->getIdentifier().getFullName();
+
     children[expression_child_index] = std::move(expression_);
     children[interpolate_expression_child_index] = std::move(interpolate_expression_);
 }
@@ -41,13 +44,23 @@ void InterpolateNode::updateTreeHashImpl(HashState &, CompareOptions) const
 
 QueryTreeNodePtr InterpolateNode::cloneImpl() const
 {
-    return std::make_shared<InterpolateNode>(nullptr /*expression*/, nullptr /*interpolate_expression*/);
+    auto cloned = std::make_shared<InterpolateNode>(nullptr /*expression*/, nullptr /*interpolate_expression*/);
+    cloned->expression_name = expression_name;
+    return cloned;
 }
 
 ASTPtr InterpolateNode::toASTImpl(const ConvertToASTOptions & options) const
 {
     auto result = std::make_shared<ASTInterpolateElement>();
-    result->column = getExpression()->toAST(options)->getColumnName();
+
+    /// Interpolate parser supports only identifier node.
+    /// In case of alias, identifier is replaced to expression, which can't be parsed.
+    /// In this case, keep original alias name.
+    if (const auto * identifier = getExpression()->as<IdentifierNode>())
+        result->column = identifier->toAST(options)->getColumnName();
+    else
+        result->column = expression_name;
+
     result->children.push_back(getInterpolateExpression()->toAST(options));
     result->expr = result->children.back();
 
diff --git a/src/Analyzer/InterpolateNode.h b/src/Analyzer/InterpolateNode.h
index 9269d3924f5b..ec493ed8bdde 100644
--- a/src/Analyzer/InterpolateNode.h
+++ b/src/Analyzer/InterpolateNode.h
@@ -1,6 +1,6 @@
 #pragma once
 
-#include <Analyzer/IQueryTreeNode.h>
+#include <Analyzer/IdentifierNode.h>
 #include <Analyzer/ListNode.h>
 
 namespace DB
@@ -19,7 +19,7 @@ class InterpolateNode final : public IQueryTreeNode
 {
 public:
     /// Initialize interpolate node with expression and interpolate expression
-    explicit InterpolateNode(QueryTreeNodePtr expression_, QueryTreeNodePtr interpolate_expression_);
+    explicit InterpolateNode(std::shared_ptr<IdentifierNode> expression_, QueryTreeNodePtr interpolate_expression_);
 
     /// Get expression to interpolate
     const QueryTreeNodePtr & getExpression() const
@@ -61,6 +61,9 @@ class InterpolateNode final : public IQueryTreeNode
 
     ASTPtr toASTImpl(const ConvertToASTOptions & options) const override;
 
+    /// Initial name from column identifier.
+    std::string expression_name;
+
 private:
     static constexpr size_t expression_child_index = 0;
     static constexpr size_t interpolate_expression_child_index = 1;
