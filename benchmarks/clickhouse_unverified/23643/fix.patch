diff --git a/src/Processors/Formats/Impl/ParallelParsingInputFormat.cpp b/src/Processors/Formats/Impl/ParallelParsingInputFormat.cpp
index f295fe002994..7152c9d99165 100644
--- a/src/Processors/Formats/Impl/ParallelParsingInputFormat.cpp
+++ b/src/Processors/Formats/Impl/ParallelParsingInputFormat.cpp
@@ -147,6 +147,13 @@ void ParallelParsingInputFormat::onBackgroundException(size_t offset)
 
 Chunk ParallelParsingInputFormat::generate()
 {
+    /// Delayed launching of segmentator thread
+    if (unlikely(!parsing_started.exchange(true)))
+    {
+        segmentator_thread = ThreadFromGlobalPool(
+            &ParallelParsingInputFormat::segmentatorThreadFunction, this, CurrentThread::getGroup());
+    }
+
     if (isCancelled() || parsing_finished)
     {
         /**
diff --git a/src/Processors/Formats/Impl/ParallelParsingInputFormat.h b/src/Processors/Formats/Impl/ParallelParsingInputFormat.h
index 559507055b9c..dafaf9bed72c 100644
--- a/src/Processors/Formats/Impl/ParallelParsingInputFormat.h
+++ b/src/Processors/Formats/Impl/ParallelParsingInputFormat.h
@@ -97,9 +97,6 @@ class ParallelParsingInputFormat : public IInputFormat
         // bump into reader thread on wraparound.
         processing_units.resize(params.max_threads + 2);
 
-        segmentator_thread = ThreadFromGlobalPool(
-            &ParallelParsingInputFormat::segmentatorThreadFunction, this, CurrentThread::getGroup());
-
         LOG_TRACE(&Poco::Logger::get("ParallelParsingInputFormat"), "Parallel parsing is used");
     }
 
@@ -205,6 +202,7 @@ class ParallelParsingInputFormat : public IInputFormat
 
     Poco::Event first_parser_finished;
 
+    std::atomic<bool> parsing_started{false};
     std::atomic<bool> parsing_finished{false};
 
     /// There are multiple "parsers", that's why we use thread pool.
