You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Crash in MergeTreeRangeReader
```
2020.02.10 16:08:10.340353 [ 70 ] {} <Fatal> BaseDaemon: ########################################
2020.02.10 16:08:10.340480 [ 70 ] {} <Fatal> BaseDaemon: (version 20.1.3.7 (official build)) (from thread 60) (query_id: e3ad3aef-c6fb-4f93-aafc-9ac8182f7cc1) Received signal Segmentation fault (11).
2020.02.10 16:08:10.340559 [ 70 ] {} <Fatal> BaseDaemon: Address: 0x18 Access: read. Address not mapped to object.
2020.02.10 16:08:10.340604 [ 70 ] {} <Fatal> BaseDaemon: Stack trace: 0x8e5378e 0x97a27f5 0x97a5f3f 0x97684c6 0x9769cc3 0x91a4c87 0x91d6e84 0x91d70a3 0x8a6d24f 0x94a6871 0x8a6d24f 0x949c1c8 0x8a6d24f 0x94e9580 0x94e9b05 0x4fa3a77 0x4fa202f 0x7f80b7a84fa3 0x7f80b79a64cf
2020.02.10 16:08:10.434034 [ 70 ] {} <Fatal> BaseDaemon: 3. 0x8e5378e DB::ColumnVector<long>::filter(DB::PODArray<unsigned char, 4096ul, Allocator<false, false>, 15ul, 16ul> const&, long) const  in /usr/bin/clickhouse
2020.02.10 16:08:10.434106 [ 70 ] {} <Fatal> BaseDaemon: 4. 0x97a27f5 DB::MergeTreeRangeReader::filterColumns(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >&, DB::PODArray<unsigned char, 4096ul, Allocator<false, false>, 15ul, 16ul> const&) const  in /usr/bin/clickhouse
2020.02.10 16:08:10.620361 [ 70 ] {} <Fatal> BaseDaemon: 5. 0x97a5f3f DB::MergeTreeRangeReader::read(unsigned long, std::__1::vector<DB::MarkRange, std::__1::allocator<DB::MarkRange> >&)  in /usr/bin/clickhouse
2020.02.10 16:08:10.620406 [ 70 ] {} <Fatal> BaseDaemon: 6. 0x97684c6 DB::MergeTreeBaseSelectProcessor::readFromPartImpl()  in /usr/bin/clickhouse
2020.02.10 16:08:10.620426 [ 70 ] {} <Fatal> BaseDaemon: 7. 0x9769cc3 DB::MergeTreeBaseSelectProcessor::generate()  in /usr/bin/clickhouse
2020.02.10 16:08:10.620452 [ 70 ] {} <Fatal> BaseDaemon: 8. 0x91a4c87 DB::ISource::work()  in /usr/bin/clickhouse
2020.02.10 16:08:10.751008 [ 70 ] {} <Fatal> BaseDaemon: 9. 0x91d6e84 DB::TreeExecutorBlockInputStream::execute()  in /usr/bin/clickhouse
2020.02.10 16:08:10.751049 [ 70 ] {} <Fatal> BaseDaemon: 10. 0x91d70a3 DB::TreeExecutorBlockInputStream::readImpl()  in /usr/bin/clickhouse
2020.02.10 16:08:10.839856 [ 70 ] {} <Fatal> BaseDaemon: 11. 0x8a6d24f DB::IBlockInputStream::read()  in /usr/bin/clickhouse
2020.02.10 16:08:10.982566 [ 70 ] {} <Fatal> BaseDaemon: 12. 0x94a6871 DB::FilterBlockInputStream::readImpl()  in /usr/bin/clickhouse
2020.02.10 16:08:10.982608 [ 70 ] {} <Fatal> BaseDaemon: 13. 0x8a6d24f DB::IBlockInputStream::read()  in /usr/bin/clickhouse
2020.02.10 16:08:10.982628 [ 70 ] {} <Fatal> BaseDaemon: 14. 0x949c1c8 DB::ExpressionBlockInputStream::readImpl()  in /usr/bin/clickhouse
2020.02.10 16:08:10.982647 [ 70 ] {} <Fatal> BaseDaemon: 15. 0x8a6d24f DB::IBlockInputStream::read()  in /usr/bin/clickhouse
2020.02.10 16:08:10.982676 [ 70 ] {} <Fatal> BaseDaemon: 16. 0x94e9580 DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::thread(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long)  in /usr/bin/clickhouse
2020.02.10 16:08:10.982727 [ 70 ] {} <Fatal> BaseDaemon: 17. 0x94e9b05 ThreadFromGlobalPool::ThreadFromGlobalPool<void (DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::*)(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long), DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>*, std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long&>(void (DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>::*&&)(std::__1::shared_ptr<DB::ThreadGroupStatus>, unsigned long), DB::ParallelInputsProcessor<DB::ParallelAggregatingBlockInputStream::Handler>*&&, std::__1::shared_ptr<DB::ThreadGroupStatus>&&, unsigned long&)::'lambda'()::operator()() const  in /usr/bin/clickhouse
2020.02.10 16:08:11.105574 [ 70 ] {} <Fatal> BaseDaemon: 18. 0x4fa3a77 ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>)  in /usr/bin/clickhouse
2020.02.10 16:08:11.172058 [ 70 ] {} <Fatal> BaseDaemon: 19. 0x4fa202f ?  in /usr/bin/clickhouse
2020.02.10 16:08:11.172139 [ 70 ] {} <Fatal> BaseDaemon: 20. 0x7fa3 start_thread  in /lib/x86_64-linux-gnu/libpthread-2.28.so
2020.02.10 16:08:11.172176 [ 70 ] {} <Fatal> BaseDaemon: 21. 0xf94cf __clone  in /lib/x86_64-linux-gnu/libc-2.28.so
```

Schema
```
CREATE TABLE yad_auto.yad_stats_b (`date` Date, `client` String, `cid` Int64, `bid` Int64, `gid` Int64, `type` UInt8, `device` UInt8, `slot` UInt8, `shows` Int32, `clicks` Int32, `sum` Float64, `trans` Float64, `trans_mcf` Int32, `val` Float64, `marg` Float64, `calls` Int32, `bcalls` Int32, `goal1` Int32, `goal2` Int32, `goal3` Int32, `goal4` Int32, `goal5` Int32, `goal6` Int32, `goal7` Int32, `goal8` Int32, `goal9` Int32, `goal10` Int32, `goal11` Int32, `goal12` Int32, `goal13` Int32, `goal14` Int32, `goal15` Int32, `goal16` Int32, `goal17` Int32, `goal18` Int32, `goal19` Int32, `goal20` Int32, `newUsers` Int32, `bounces` Int32, `sessions` Int32, `timeOnPage` Int32, `pageviews` Int32, `exits` Int32, `pageDepthOnSession` Int32, `avg_show_pos` Float64, `avg_click_pos` Float64, `clicks_avr` Int32, `shows_avr` Int32, `val_mcf` Float64 DEFAULT 0.) ENGINE = ReplicatedSummingMergeTree('/clickhouse_perftest/tables/{shard}/yad_stats_b', '{replica}', date, (client, cid, bid, gid, device, date, type, slot), 8192)
```

Affected query
```
SELECT
date,
client,
 
SUM(shows) AS sshows,
SUM(clicks) AS clicks,
SUM(sum) AS sum,
 
SUM(trans) AS trans,
SUM(val) AS val,
SUM(marg) AS marg,
SUM(trans_mcf) AS trans_mcf,
SUM(val_mcf) AS val_mcf,
 
SUM(calls) AS calls,
SUM(bcalls) AS bcalls,
 
SUM(goal1) AS goal1,
SUM(goal2) AS goal2,
SUM(goal3) AS goal3,
SUM(goal4) AS goal4,
SUM(goal5) AS goal5,
SUM(goal6) AS goal6,
SUM(goal7) AS goal7,
SUM(goal8) AS goal8,
SUM(goal9) AS goal9,
SUM(goal10) AS goal10,
SUM(goal11) AS goal11,
SUM(goal12) AS goal12,
SUM(goal13) AS goal13,
SUM(goal14) AS goal14,
SUM(goal15) AS goal15,
SUM(goal16) AS goal16,
SUM(goal17) AS goal17,
SUM(goal18) AS goal18,
SUM(goal19) AS goal19,
SUM(goal20) AS goal20,
 
SUM(newUsers) AS newUsers,
SUM(bounces) AS bounces,
SUM(sessions) AS sessions,
SUM(timeOnPage) AS timeOnPage,
SUM(pageviews) AS pageviews,
SUM(exits) AS exits,
 
SUM(avg_click_pos) AS avg_click_pos,
SUM(avg_show_pos) AS avg_show_pos,
SUM(shows_avr) AS shows_pos,
SUM(clicks_avr) AS clicks_pos,
 
sumIf(shows, slot=0) as shows_premium,
sumIf(shows, slot=1) as shows_other
FROM `yad_stats_b`
WHERE ( (client='pro-vseinstrumenti' and cid !=0 ) ) and (date BETWEEN '2019-01-01' AND '2020-06-02') and (cid+bid > 0)
GROUP BY date, client
ORDER BY date asc
```

Query is OK if replace `cid !=0` with `cid> 0`
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
