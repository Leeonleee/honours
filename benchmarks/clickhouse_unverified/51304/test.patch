diff --git a/tests/queries/0_stateless/00725_comment_columns_long.sql b/tests/queries/0_stateless/00725_comment_columns_long.sql
index fe4ee48909f8..139f8ba006fa 100644
--- a/tests/queries/0_stateless/00725_comment_columns_long.sql
+++ b/tests/queries/0_stateless/00725_comment_columns_long.sql
@@ -1,4 +1,5 @@
--- Tags: long
+-- Tags: long, no-replicated-database
+-- Tag no-replicated-database: Unsupported type of ALTER query
 
 DROP TABLE IF EXISTS check_query_comment_column;
 
diff --git a/tests/queries/0_stateless/02020_alter_table_modify_comment.reference b/tests/queries/0_stateless/02020_alter_table_modify_comment.reference
index a9c37eb2ba5e..d2e74fd07f08 100644
--- a/tests/queries/0_stateless/02020_alter_table_modify_comment.reference
+++ b/tests/queries/0_stateless/02020_alter_table_modify_comment.reference
@@ -124,21 +124,21 @@ CREATE TABLE default.comment_test_table
(
    `k` UInt64,
    `s` String
)

 comment=	Test table with comment
 
 change a comment
-CREATE TABLE default.comment_test_table
(
    `k` UInt64,
    `s` String
)
ENGINE = ReplicatedMergeTree(\'/clickhouse/02020_alter_table_modify_comment_default\', \'1\')
ORDER BY k
SETTINGS index_granularity = 8192
COMMENT \'Test table with comment\'
-comment=	Test table with comment
+CREATE TABLE default.comment_test_table
(
    `k` UInt64,
    `s` String
)
ENGINE = ReplicatedMergeTree(\'/clickhouse/02020_alter_table_modify_comment_default\', \'1\')
ORDER BY k
SETTINGS index_granularity = 8192
COMMENT \'new comment on a table\'
+comment=	new comment on a table
 
 remove a comment
-CREATE TABLE default.comment_test_table
(
    `k` UInt64,
    `s` String
)
ENGINE = ReplicatedMergeTree(\'/clickhouse/02020_alter_table_modify_comment_default\', \'1\')
ORDER BY k
SETTINGS index_granularity = 8192
COMMENT \'Test table with comment\'
-comment=	Test table with comment
+CREATE TABLE default.comment_test_table
(
    `k` UInt64,
    `s` String
)
ENGINE = ReplicatedMergeTree(\'/clickhouse/02020_alter_table_modify_comment_default\', \'1\')
ORDER BY k
SETTINGS index_granularity = 8192
+comment=	
 
 add a comment back
-CREATE TABLE default.comment_test_table
(
    `k` UInt64,
    `s` String
)
ENGINE = ReplicatedMergeTree(\'/clickhouse/02020_alter_table_modify_comment_default\', \'1\')
ORDER BY k
SETTINGS index_granularity = 8192
COMMENT \'Test table with comment\'
-comment=	Test table with comment
+CREATE TABLE default.comment_test_table
(
    `k` UInt64,
    `s` String
)
ENGINE = ReplicatedMergeTree(\'/clickhouse/02020_alter_table_modify_comment_default\', \'1\')
ORDER BY k
SETTINGS index_granularity = 8192
COMMENT \'another comment on a table\'
+comment=	another comment on a table
 
 detach table
-CREATE TABLE default.comment_test_table
(
    `k` UInt64,
    `s` String
)
ENGINE = ReplicatedMergeTree(\'/clickhouse/02020_alter_table_modify_comment_default\', \'1\')
ORDER BY k
SETTINGS index_granularity = 8192
COMMENT \'Test table with comment\'
+CREATE TABLE default.comment_test_table
(
    `k` UInt64,
    `s` String
)
ENGINE = ReplicatedMergeTree(\'/clickhouse/02020_alter_table_modify_comment_default\', \'1\')
ORDER BY k
SETTINGS index_granularity = 8192
COMMENT \'another comment on a table\'
 
 re-attach table
-CREATE TABLE default.comment_test_table
(
    `k` UInt64,
    `s` String
)
ENGINE = ReplicatedMergeTree(\'/clickhouse/02020_alter_table_modify_comment_default\', \'1\')
ORDER BY k
SETTINGS index_granularity = 8192
COMMENT \'Test table with comment\'
-comment=	Test table with comment
+CREATE TABLE default.comment_test_table
(
    `k` UInt64,
    `s` String
)
ENGINE = ReplicatedMergeTree(\'/clickhouse/02020_alter_table_modify_comment_default\', \'1\')
ORDER BY k
SETTINGS index_granularity = 8192
COMMENT \'another comment on a table\'
+comment=	another comment on a table
 
diff --git a/tests/queries/0_stateless/02792_alter_table_modify_comment.reference b/tests/queries/0_stateless/02792_alter_table_modify_comment.reference
new file mode 100644
index 000000000000..b148993285c4
--- /dev/null
+++ b/tests/queries/0_stateless/02792_alter_table_modify_comment.reference
@@ -0,0 +1,20 @@
+Hello
+World
+Hello
+World
+Hello
+World
+Hello
+World
+Hello
+World
+
+World
+
+World
+
+World
+
+World
+
+World
diff --git a/tests/queries/0_stateless/02792_alter_table_modify_comment.sql b/tests/queries/0_stateless/02792_alter_table_modify_comment.sql
new file mode 100644
index 000000000000..ba30833905d3
--- /dev/null
+++ b/tests/queries/0_stateless/02792_alter_table_modify_comment.sql
@@ -0,0 +1,72 @@
+-- Tags: no-replicated-database
+-- Tag no-replicated-database: Unsupported type of ALTER query
+
+DROP TABLE IF EXISTS t;
+
+# Memory, MergeTree, and ReplicatedMergeTree
+
+CREATE TABLE t (x UInt8) ENGINE = Memory COMMENT 'Hello';
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+ALTER TABLE t MODIFY COMMENT 'World';
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+DROP TABLE t;
+
+CREATE TABLE t (x UInt8) ENGINE = MergeTree ORDER BY () COMMENT 'Hello';
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+ALTER TABLE t MODIFY COMMENT 'World';
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+DROP TABLE t;
+
+# The case when there are many operations in one ALTER
+
+CREATE TABLE t (x UInt8) ENGINE = MergeTree ORDER BY () COMMENT 'Hello';
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+ALTER TABLE t MODIFY COMMENT 'World', MODIFY COLUMN x UInt16;
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+DROP TABLE t;
+
+# Note that the table comment is not replicated. We can implement it later.
+
+CREATE TABLE t (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_comment_table1/t', '1') ORDER BY () COMMENT 'Hello';
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+ALTER TABLE t MODIFY COMMENT 'World';
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+DROP TABLE t SYNC;
+
+CREATE TABLE t (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_comment_table2/t', '1') ORDER BY () COMMENT 'Hello';
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+ALTER TABLE t MODIFY COMMENT 'World', MODIFY COLUMN x UInt16;
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+DROP TABLE t SYNC;
+
+# The cases when there is no comment on creation
+
+CREATE TABLE t (x UInt8) ENGINE = Memory;
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+ALTER TABLE t MODIFY COMMENT 'World';
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+DROP TABLE t;
+
+CREATE TABLE t (x UInt8) ENGINE = MergeTree ORDER BY ();
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+ALTER TABLE t MODIFY COMMENT 'World';
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+DROP TABLE t;
+
+CREATE TABLE t (x UInt8) ENGINE = MergeTree ORDER BY ();
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+ALTER TABLE t MODIFY COMMENT 'World', MODIFY COLUMN x UInt16;
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+DROP TABLE t;
+
+CREATE TABLE t (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_comment_table3/t', '1') ORDER BY ();
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+ALTER TABLE t MODIFY COMMENT 'World';
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+DROP TABLE t SYNC;
+
+CREATE TABLE t (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test_comment_table4/t', '1') ORDER BY ();
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+ALTER TABLE t MODIFY COMMENT 'World', MODIFY COLUMN x UInt16;
+SELECT comment FROM system.tables WHERE database = currentDatabase() AND table = 't';
+DROP TABLE t SYNC;
