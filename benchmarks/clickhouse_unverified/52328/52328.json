{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 52328,
  "instance_id": "ClickHouse__ClickHouse-52328",
  "issue_numbers": [
    "51510"
  ],
  "base_commit": "5f767b0dfa6c950af064c9399ec7b2e11fdac2e4",
  "patch": "diff --git a/src/Interpreters/ActionsVisitor.cpp b/src/Interpreters/ActionsVisitor.cpp\nindex b769011e3d4f..fcc20f85412b 100644\n--- a/src/Interpreters/ActionsVisitor.cpp\n+++ b/src/Interpreters/ActionsVisitor.cpp\n@@ -1210,22 +1210,16 @@ void ActionsMatcher::visit(const ASTFunction & node, const ASTPtr & ast, Data &\n             else if (data.is_create_parameterized_view && query_parameter)\n             {\n                 const auto data_type = DataTypeFactory::instance().get(query_parameter->type);\n-                /// Use getUniqueName() to allow multiple use of query parameter in the query:\n-                ///\n-                ///     CREATE VIEW view AS\n-                ///     SELECT *\n-                ///     FROM system.one\n-                ///     WHERE dummy = {k1:Int}+1 OR dummy = {k1:Int}+2\n-                ///                    ^^                    ^^\n-                ///\n-                /// NOTE: query in the VIEW will not be modified this is needed\n-                /// only during analysis for CREATE VIEW to avoid duplicated\n-                /// column names.\n-                ColumnWithTypeAndName column(data_type, data.getUniqueName(\"__\" + query_parameter->getColumnName()));\n-                data.addColumn(column);\n+                /// During analysis for CREATE VIEW of a parameterized view, if parameter is\n+                /// used multiple times, column is only added once\n+                if (!data.hasColumn(query_parameter->name))\n+                {\n+                    ColumnWithTypeAndName column(data_type, query_parameter->name);\n+                    data.addColumn(column);\n+                }\n \n                 argument_types.push_back(data_type);\n-                argument_names.push_back(column.name);\n+                argument_names.push_back(query_parameter->name);\n             }\n             else\n             {\n",
  "test_patch": "diff --git a/tests/analyzer_tech_debt.txt b/tests/analyzer_tech_debt.txt\nindex 1d56b2c3a717..0d745a05f557 100644\n--- a/tests/analyzer_tech_debt.txt\n+++ b/tests/analyzer_tech_debt.txt\n@@ -129,6 +129,7 @@\n 02581_share_big_sets_between_mutation_tasks_long\n 02581_share_big_sets_between_multiple_mutations_tasks_long\n 00992_system_parts_race_condition_zookeeper_long\n+02818_parameterized_view_with_cte_multiple_usage\n 02790_optimize_skip_unused_shards_join\n 01940_custom_tld_sharding_key\n 02815_range_dict_no_direct_join\ndiff --git a/tests/queries/0_stateless/02818_parameterized_view_with_cte_multiple_usage.reference b/tests/queries/0_stateless/02818_parameterized_view_with_cte_multiple_usage.reference\nnew file mode 100644\nindex 000000000000..004d27bacad9\n--- /dev/null\n+++ b/tests/queries/0_stateless/02818_parameterized_view_with_cte_multiple_usage.reference\n@@ -0,0 +1,2 @@\n+3\t2\n+3\t2\t3\ndiff --git a/tests/queries/0_stateless/02818_parameterized_view_with_cte_multiple_usage.sql b/tests/queries/0_stateless/02818_parameterized_view_with_cte_multiple_usage.sql\nnew file mode 100644\nindex 000000000000..d56d9c4e181d\n--- /dev/null\n+++ b/tests/queries/0_stateless/02818_parameterized_view_with_cte_multiple_usage.sql\n@@ -0,0 +1,16 @@\n+create view test_param_view as\n+with {param_test_val:UInt8} as param_test_val\n+select param_test_val,\n+       arrayCount((a)->(a < param_test_val), t.arr) as cnt1\n+from (select [1,2,3,4,5] as arr) t;\n+\n+select * from test_param_view(param_test_val = 3);\n+\n+create view test_param_view2 as\n+with {param_test_val:UInt8} as param_test_val\n+select param_test_val,\n+       arrayCount((a)->(a < param_test_val), t.arr) as cnt1,\n+       arrayCount((a)->(a < param_test_val+1), t.arr) as cnt2\n+from (select [1,2,3,4,5] as arr) t;\n+\n+select * from test_param_view2(param_test_val = 3);\n\\ No newline at end of file\n",
  "problem_statement": "Parametrized view does not work with many usage of one parameter\nClickhouse v.23.3.5.9\r\n\r\nWorking example\r\n```\r\ncreate view default.test_param_view as\r\nwith {param_test_val:UInt8} as param_test_val\r\nselect param_test_val,\r\n       arrayCount((a)->(a < param_test_val), t.arr) as cnt1\r\nfrom (select [1,2,3,4,5] as arr) t;\r\n```\r\n\r\n\r\nNot working example\r\n```\r\ncreate view default.test_param_view as\r\nwith {param_test_val:UInt8} as param_test_val\r\nselect param_test_val,\r\n       arrayCount((a)->(a < param_test_val), t.arr) as cnt1,\r\n       arrayCount((a)->(a < param_test_val+1), t.arr) as cnt2\r\nfrom (select [1,2,3,4,5] as arr) t;\r\n```\r\n\r\nGot error message\r\n```\r\nDB::Exception: Column 'param_test_val' already exists: While processing {param_test_val:UInt8} AS param_test_val, arrayCount(a -> (a < param_test_val), arr) AS cnt1, arrayCount(a -> (a < (param_test_val + 1)), arr) AS cnt2. Stack trace:\r\n```\r\n\r\n\r\n\r\nBut it will be work, if i will use `identity` function, example:\r\n```\r\ncreate view default.test_param_view as\r\nwith {param_test_val:UInt8} as param_test_val\r\nselect identity(param_test_val) as new_param_test_val,\r\n       arrayCount((a)->(a < new_param_test_val), t.arr) as cnt1,\r\n       arrayCount((a)->(a < new_param_test_val+1), t.arr) as cnt2\r\nfrom (select [1,2,3,4,5] as arr) t;\r\n```\n",
  "hints_text": "",
  "created_at": "2023-07-19T15:06:42Z",
  "modified_files": [
    "src/Interpreters/ActionsVisitor.cpp"
  ],
  "modified_test_files": [
    "tests/analyzer_tech_debt.txt",
    "b/tests/queries/0_stateless/02818_parameterized_view_with_cte_multiple_usage.reference",
    "b/tests/queries/0_stateless/02818_parameterized_view_with_cte_multiple_usage.sql"
  ]
}