diff --git a/tests/integration/test_mysql_protocol/golang.reference b/tests/integration/test_mysql_protocol/golang.reference
index 4069b2a086af..7680c8c74dcc 100644
--- a/tests/integration/test_mysql_protocol/golang.reference
+++ b/tests/integration/test_mysql_protocol/golang.reference
@@ -14,6 +14,7 @@ a UNSIGNED TINYINT
 Result:
 tables 1
 tables 1
+tables 1
 Columns:
 a
 b
diff --git a/tests/integration/test_mysql_protocol/test.py b/tests/integration/test_mysql_protocol/test.py
index 5e03c4883b4c..494af3c219d9 100644
--- a/tests/integration/test_mysql_protocol/test.py
+++ b/tests/integration/test_mysql_protocol/test.py
@@ -679,7 +679,7 @@ def test_php_client(started_cluster, php_container):
         demux=True,
     )
     assert code == 0
-    assert stdout.decode() == "tables
tables
"
+    assert stdout.decode() == "tables
tables
tables
"
 
     code, (stdout, stderr) = php_container.exec_run(
         "php -f test_ssl.php {host} {port} default 123".format(
@@ -688,7 +688,7 @@ def test_php_client(started_cluster, php_container):
         demux=True,
     )
     assert code == 0
-    assert stdout.decode() == "tables
tables
"
+    assert stdout.decode() == "tables
tables
tables
"
 
     code, (stdout, stderr) = php_container.exec_run(
         "php -f test.php {host} {port} user_with_double_sha1 abacaba".format(
@@ -697,7 +697,7 @@ def test_php_client(started_cluster, php_container):
         demux=True,
     )
     assert code == 0
-    assert stdout.decode() == "tables
tables
"
+    assert stdout.decode() == "tables
tables
tables
"
 
     code, (stdout, stderr) = php_container.exec_run(
         "php -f test_ssl.php {host} {port} user_with_double_sha1 abacaba".format(
@@ -706,7 +706,7 @@ def test_php_client(started_cluster, php_container):
         demux=True,
     )
     assert code == 0
-    assert stdout.decode() == "tables
tables
"
+    assert stdout.decode() == "tables
tables
tables
"
 
 
 def test_mysqljs_client(started_cluster, nodejs_container):
diff --git a/tests/integration/test_select_access_rights/test_from_system_tables.py b/tests/integration/test_select_access_rights/test_from_system_tables.py
index ac938a9694a7..cd29183561a8 100644
--- a/tests/integration/test_select_access_rights/test_from_system_tables.py
+++ b/tests/integration/test_select_access_rights/test_from_system_tables.py
@@ -190,3 +190,15 @@ def test_information_schema():
         )
         == "1
"
     )
+    assert (
+        node.query(
+            "SELECT count() FROM information_schema.TABLES WHERE table_name='TABLES'"
+        )
+        == "2
"
+    )
+    assert (
+        node.query(
+            "SELECT count() FROM INFORMATION_SCHEMA.tables WHERE table_name='tables'"
+        )
+        == "3
"
+    )
diff --git a/tests/queries/0_stateless/01161_information_schema.reference b/tests/queries/0_stateless/01161_information_schema.reference
index 5331e30b899c..4ec33a70be08 100644
--- a/tests/queries/0_stateless/01161_information_schema.reference
+++ b/tests/queries/0_stateless/01161_information_schema.reference
@@ -1,3 +1,7 @@
+COLUMNS
+SCHEMATA
+TABLES
+VIEWS
 columns
 schemata
 tables
@@ -6,6 +10,10 @@ COLUMNS
 SCHEMATA
 TABLES
 VIEWS
+columns
+schemata
+tables
+views
 INFORMATION_SCHEMA	INFORMATION_SCHEMA	default	\N	\N	\N	\N
 information_schema	information_schema	default	\N	\N	\N	\N
 default	default	mv	VIEW
diff --git a/tests/queries/0_stateless/02206_information_schema_show_database.reference b/tests/queries/0_stateless/02206_information_schema_show_database.reference
index 821fddbb9338..0cf7913e28ed 100644
--- a/tests/queries/0_stateless/02206_information_schema_show_database.reference
+++ b/tests/queries/0_stateless/02206_information_schema_show_database.reference
@@ -1,4 +1,6 @@
 CREATE DATABASE INFORMATION_SCHEMA
ENGINE = Memory
 CREATE VIEW INFORMATION_SCHEMA.COLUMNS
(
    `table_catalog` String,
    `table_schema` String,
    `table_name` String,
    `TABLE_SCHEMA` String,
    `TABLE_NAME` String,
    `column_name` String,
    `ordinal_position` UInt64,
    `column_default` String,
    `is_nullable` String,
    `data_type` String,
    `character_maximum_length` Nullable(UInt64),
    `character_octet_length` Nullable(UInt64),
    `numeric_precision` Nullable(UInt64),
    `numeric_precision_radix` Nullable(UInt64),
    `numeric_scale` Nullable(UInt64),
    `datetime_precision` Nullable(UInt64),
    `character_set_catalog` Nullable(String),
    `character_set_schema` Nullable(String),
    `character_set_name` Nullable(String),
    `collation_catalog` Nullable(String),
    `collation_schema` Nullable(String),
    `collation_name` Nullable(String),
    `domain_catalog` Nullable(String),
    `domain_schema` Nullable(String),
    `domain_name` Nullable(String),
    `column_comment` String,
    `column_type` String,
    `TABLE_CATALOG` String ALIAS table_catalog,
    `COLUMN_NAME` String ALIAS column_name,
    `ORDINAL_POSITION` UInt64 ALIAS ordinal_position,
    `COLUMN_DEFAULT` String ALIAS column_default,
    `IS_NULLABLE` String ALIAS is_nullable,
    `DATA_TYPE` String ALIAS data_type,
    `CHARACTER_MAXIMUM_LENGTH` Nullable(UInt64) ALIAS character_maximum_length,
    `CHARACTER_OCTET_LENGTH` Nullable(UInt64) ALIAS character_octet_length,
    `NUMERIC_PRECISION` Nullable(UInt64) ALIAS numeric_precision,
    `NUMERIC_PRECISION_RADIX` Nullable(UInt64) ALIAS numeric_precision_radix,
    `NUMERIC_SCALE` Nullable(UInt64) ALIAS numeric_scale,
    `DATETIME_PRECISION` Nullable(UInt64) ALIAS datetime_precision,
    `CHARACTER_SET_CATALOG` Nullable(String) ALIAS character_set_catalog,
    `CHARACTER_SET_SCHEMA` Nullable(String) ALIAS character_set_schema,
    `CHARACTER_SET_NAME` Nullable(String) ALIAS character_set_name,
    `COLLATION_CATALOG` Nullable(String) ALIAS collation_catalog,
    `COLLATION_SCHEMA` Nullable(String) ALIAS collation_schema,
    `COLLATION_NAME` Nullable(String) ALIAS collation_name,
    `DOMAIN_CATALOG` Nullable(String) ALIAS domain_catalog,
    `DOMAIN_SCHEMA` Nullable(String) ALIAS domain_schema,
    `DOMAIN_NAME` Nullable(String) ALIAS domain_name,
    `COLUMN_COMMENT` String ALIAS column_comment,
    `COLUMN_TYPE` String ALIAS column_type
) AS
SELECT
    database AS table_catalog,
    database AS table_schema,
    database AS TABLE_SCHEMA,
    table AS table_name,
    table AS TABLE_NAME,
    name AS column_name,
    position AS ordinal_position,
    default_expression AS column_default,
    type LIKE \'Nullable(%)\' AS is_nullable,
    type AS data_type,
    character_octet_length AS character_maximum_length,
    character_octet_length,
    numeric_precision,
    numeric_precision_radix,
    numeric_scale,
    datetime_precision,
    NULL AS character_set_catalog,
    NULL AS character_set_schema,
    NULL AS character_set_name,
    NULL AS collation_catalog,
    NULL AS collation_schema,
    NULL AS collation_name,
    NULL AS domain_catalog,
    NULL AS domain_schema,
    NULL AS domain_name,
    comment AS column_comment,
    type AS column_type
FROM system.columns
 CREATE VIEW INFORMATION_SCHEMA.TABLES (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` Enum8(\'BASE TABLE\' = 1, \'VIEW\' = 2, \'FOREIGN TABLE\' = 3, \'LOCAL TEMPORARY\' = 4, \'SYSTEM VIEW\' = 5), `TABLE_CATALOG` String ALIAS table_catalog, `TABLE_SCHEMA` String ALIAS table_schema, `TABLE_NAME` String ALIAS table_name, `TABLE_TYPE` Enum8(\'BASE TABLE\' = 1, \'VIEW\' = 2, \'FOREIGN TABLE\' = 3, \'LOCAL TEMPORARY\' = 4, \'SYSTEM VIEW\' = 5) ALIAS table_type) AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, 4, engine LIKE \'%View\', 2, engine LIKE \'System%\', 5, has_own_data = 0, 3, 1) AS table_type FROM system.tables
+CREATE VIEW INFORMATION_SCHEMA.tables (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` Enum8(\'BASE TABLE\' = 1, \'VIEW\' = 2, \'FOREIGN TABLE\' = 3, \'LOCAL TEMPORARY\' = 4, \'SYSTEM VIEW\' = 5), `TABLE_CATALOG` String ALIAS table_catalog, `TABLE_SCHEMA` String ALIAS table_schema, `TABLE_NAME` String ALIAS table_name, `TABLE_TYPE` Enum8(\'BASE TABLE\' = 1, \'VIEW\' = 2, \'FOREIGN TABLE\' = 3, \'LOCAL TEMPORARY\' = 4, \'SYSTEM VIEW\' = 5) ALIAS table_type) AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, 4, engine LIKE \'%View\', 2, engine LIKE \'System%\', 5, has_own_data = 0, 3, 1) AS table_type FROM system.tables
+CREATE VIEW information_schema.TABLES (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` Enum8(\'BASE TABLE\' = 1, \'VIEW\' = 2, \'FOREIGN TABLE\' = 3, \'LOCAL TEMPORARY\' = 4, \'SYSTEM VIEW\' = 5), `TABLE_CATALOG` String ALIAS table_catalog, `TABLE_SCHEMA` String ALIAS table_schema, `TABLE_NAME` String ALIAS table_name, `TABLE_TYPE` Enum8(\'BASE TABLE\' = 1, \'VIEW\' = 2, \'FOREIGN TABLE\' = 3, \'LOCAL TEMPORARY\' = 4, \'SYSTEM VIEW\' = 5) ALIAS table_type) AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, 4, engine LIKE \'%View\', 2, engine LIKE \'System%\', 5, has_own_data = 0, 3, 1) AS table_type FROM system.tables
 CREATE VIEW information_schema.tables (`table_catalog` String, `table_schema` String, `table_name` String, `table_type` Enum8(\'BASE TABLE\' = 1, \'VIEW\' = 2, \'FOREIGN TABLE\' = 3, \'LOCAL TEMPORARY\' = 4, \'SYSTEM VIEW\' = 5), `TABLE_CATALOG` String ALIAS table_catalog, `TABLE_SCHEMA` String ALIAS table_schema, `TABLE_NAME` String ALIAS table_name, `TABLE_TYPE` Enum8(\'BASE TABLE\' = 1, \'VIEW\' = 2, \'FOREIGN TABLE\' = 3, \'LOCAL TEMPORARY\' = 4, \'SYSTEM VIEW\' = 5) ALIAS table_type) AS SELECT database AS table_catalog, database AS table_schema, name AS table_name, multiIf(is_temporary, 4, engine LIKE \'%View\', 2, engine LIKE \'System%\', 5, has_own_data = 0, 3, 1) AS table_type FROM system.tables
