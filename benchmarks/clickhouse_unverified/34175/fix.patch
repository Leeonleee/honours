diff --git a/src/Access/AccessRights.cpp b/src/Access/AccessRights.cpp
index 19b069546ee2..ca8609f39845 100644
--- a/src/Access/AccessRights.cpp
+++ b/src/Access/AccessRights.cpp
@@ -1,8 +1,8 @@
 #include <Access/AccessRights.h>
 #include <base/logger_useful.h>
+#include <base/sort.h>
 #include <boost/container/small_vector.hpp>
 #include <boost/range/adaptor/map.hpp>
-#include <boost/range/algorithm/sort.hpp>
 #include <unordered_map>
 
 namespace DB
@@ -101,7 +101,7 @@ namespace
         AccessRightsElements getResult() const
         {
             ProtoElements sorted = *this;
-            boost::range::sort(sorted);
+            ::sort(sorted.begin(), sorted.end());
             AccessRightsElements res;
             res.reserve(sorted.size());
 
diff --git a/src/Access/RolesOrUsersSet.cpp b/src/Access/RolesOrUsersSet.cpp
index 810198eeb987..2c302fde229c 100644
--- a/src/Access/RolesOrUsersSet.cpp
+++ b/src/Access/RolesOrUsersSet.cpp
@@ -7,8 +7,8 @@
 #include <IO/ReadHelpers.h>
 #include <IO/WriteHelpers.h>
 #include <boost/range/algorithm/set_algorithm.hpp>
-#include <boost/range/algorithm/sort.hpp>
 #include <boost/range/algorithm_ext/push_back.hpp>
+#include <base/sort.h>
 
 
 namespace DB
@@ -132,7 +132,7 @@ std::shared_ptr<ASTRolesOrUsersSet> RolesOrUsersSet::toAST() const
         ast->names.reserve(ids.size());
         for (const UUID & id : ids)
             ast->names.emplace_back(::DB::toString(id));
-        boost::range::sort(ast->names);
+        ::sort(ast->names.begin(), ast->names.end());
     }
 
     if (!except_ids.empty())
@@ -140,7 +140,7 @@ std::shared_ptr<ASTRolesOrUsersSet> RolesOrUsersSet::toAST() const
         ast->except_names.reserve(except_ids.size());
         for (const UUID & except_id : except_ids)
             ast->except_names.emplace_back(::DB::toString(except_id));
-        boost::range::sort(ast->except_names);
+        ::sort(ast->except_names.begin(), ast->except_names.end());
     }
 
     return ast;
@@ -161,7 +161,7 @@ std::shared_ptr<ASTRolesOrUsersSet> RolesOrUsersSet::toASTWithNames(const Access
             if (name)
                 ast->names.emplace_back(std::move(*name));
         }
-        boost::range::sort(ast->names);
+        ::sort(ast->names.begin(), ast->names.end());
     }
 
     if (!except_ids.empty())
@@ -173,7 +173,7 @@ std::shared_ptr<ASTRolesOrUsersSet> RolesOrUsersSet::toASTWithNames(const Access
             if (except_name)
                 ast->except_names.emplace_back(std::move(*except_name));
         }
-        boost::range::sort(ast->except_names);
+        ::sort(ast->except_names.begin(), ast->except_names.end());
     }
 
     return ast;
diff --git a/src/AggregateFunctions/AggregateFunctionIntervalLengthSum.h b/src/AggregateFunctions/AggregateFunctionIntervalLengthSum.h
index 8c53e807f052..92f527f7c43b 100644
--- a/src/AggregateFunctions/AggregateFunctionIntervalLengthSum.h
+++ b/src/AggregateFunctions/AggregateFunctionIntervalLengthSum.h
@@ -90,11 +90,11 @@ struct AggregateFunctionIntervalLengthSumData
 
     void sort()
     {
-        if (!sorted)
-        {
-            ::sort(std::begin(segments), std::end(segments));
-            sorted = true;
-        }
+        if (sorted)
+            return;
+
+        ::sort(std::begin(segments), std::end(segments));
+        sorted = true;
     }
 
     void serialize(WriteBuffer & buf) const
diff --git a/src/AggregateFunctions/AggregateFunctionSequenceMatch.h b/src/AggregateFunctions/AggregateFunctionSequenceMatch.h
index 3ae5d779cc63..248454bef02e 100644
--- a/src/AggregateFunctions/AggregateFunctionSequenceMatch.h
+++ b/src/AggregateFunctions/AggregateFunctionSequenceMatch.h
@@ -75,11 +75,11 @@ struct AggregateFunctionSequenceMatchData final
 
     void sort()
     {
-        if (!sorted)
-        {
-            ::sort(std::begin(events_list), std::end(events_list), Comparator{});
-            sorted = true;
-        }
+        if (sorted)
+            return;
+
+        ::sort(std::begin(events_list), std::end(events_list), Comparator{});
+        sorted = true;
     }
 
     void serialize(WriteBuffer & buf) const
diff --git a/src/AggregateFunctions/ReservoirSamplerDeterministic.h b/src/AggregateFunctions/ReservoirSamplerDeterministic.h
index 72ccb0e95a26..2baeea76996c 100644
--- a/src/AggregateFunctions/ReservoirSamplerDeterministic.h
+++ b/src/AggregateFunctions/ReservoirSamplerDeterministic.h
@@ -260,7 +260,8 @@ class ReservoirSamplerDeterministic
         if (sorted)
             return;
 
-        ::sort(samples.begin(), samples.end(), [](const auto & lhs, const auto & rhs) { return lhs.first < rhs.first; });
+        /// In order to provide deterministic result we must sort by value and hash
+        ::sort(samples.begin(), samples.end(), [](const auto & lhs, const auto & rhs) { return lhs < rhs; });
         sorted = true;
     }
 
diff --git a/src/Functions/array/arrayAUC.cpp b/src/Functions/array/arrayAUC.cpp
index 72dc165550d7..9bebcf7fd8c4 100644
--- a/src/Functions/array/arrayAUC.cpp
+++ b/src/Functions/array/arrayAUC.cpp
@@ -1,6 +1,5 @@
 #include <algorithm>
 #include <vector>
-#include <base/sort.h>
 #include <DataTypes/DataTypesNumber.h>
 #include <Functions/FunctionFactory.h>
 #include "arrayScalarProduct.h"
@@ -113,7 +112,8 @@ class ArrayAUCImpl
             sorted_labels[i].label = label;
         }
 
-        ::sort(sorted_labels.begin(), sorted_labels.end(), [](const auto & lhs, const auto & rhs) { return lhs.score > rhs.score; });
+        /// Stable sort is required for for labels to apply in same order if score is equal
+        std::stable_sort(sorted_labels.begin(), sorted_labels.end(), [](const auto & lhs, const auto & rhs) { return lhs.score > rhs.score; });
 
         /// We will first calculate non-normalized area.
 
diff --git a/src/Interpreters/Access/InterpreterShowAccessQuery.cpp b/src/Interpreters/Access/InterpreterShowAccessQuery.cpp
index 26c47507ce2c..e16ee03c7110 100644
--- a/src/Interpreters/Access/InterpreterShowAccessQuery.cpp
+++ b/src/Interpreters/Access/InterpreterShowAccessQuery.cpp
@@ -10,7 +10,7 @@
 #include <Access/Common/AccessFlags.h>
 #include <Access/AccessControl.h>
 #include <base/range.h>
-#include <boost/range/algorithm/sort.hpp>
+#include <base/sort.h>
 #include <boost/range/algorithm_ext/push_back.hpp>
 
 
@@ -61,7 +61,7 @@ std::vector<AccessEntityPtr> InterpreterShowAccessQuery::getEntities() const
         }
     }
 
-    boost::range::sort(entities, IAccessEntity::LessByTypeAndName{});
+    ::sort(entities.begin(), entities.end(), IAccessEntity::LessByTypeAndName{});
     return entities;
 }
 
diff --git a/src/Interpreters/Access/InterpreterShowCreateAccessEntityQuery.cpp b/src/Interpreters/Access/InterpreterShowCreateAccessEntityQuery.cpp
index 284b3cd1b48e..163cb57cab56 100644
--- a/src/Interpreters/Access/InterpreterShowCreateAccessEntityQuery.cpp
+++ b/src/Interpreters/Access/InterpreterShowCreateAccessEntityQuery.cpp
@@ -27,7 +27,7 @@
 #include <Interpreters/Context.h>
 #include <Processors/Sources/SourceFromSingleChunk.h>
 #include <base/range.h>
-#include <boost/range/algorithm/sort.hpp>
+#include <base/sort.h>
 
 
 namespace DB
@@ -341,7 +341,7 @@ std::vector<AccessEntityPtr> InterpreterShowCreateAccessEntityQuery::getEntities
             entities.push_back(access_control.read(access_control.getID(show_query.type, name)));
     }
 
-    boost::range::sort(entities, IAccessEntity::LessByName{});
+    ::sort(entities.begin(), entities.end(), IAccessEntity::LessByName{});
     return entities;
 }
 
diff --git a/src/Interpreters/Access/InterpreterShowGrantsQuery.cpp b/src/Interpreters/Access/InterpreterShowGrantsQuery.cpp
index 17d9f321b565..c82088847d3d 100644
--- a/src/Interpreters/Access/InterpreterShowGrantsQuery.cpp
+++ b/src/Interpreters/Access/InterpreterShowGrantsQuery.cpp
@@ -13,8 +13,8 @@
 #include <DataTypes/DataTypeString.h>
 #include <Interpreters/Context.h>
 #include <Processors/Sources/SourceFromSingleChunk.h>
-#include <boost/range/algorithm/sort.hpp>
 #include <boost/range/algorithm_ext/push_back.hpp>
+#include <base/sort.h>
 
 
 namespace DB
@@ -159,7 +159,7 @@ std::vector<AccessEntityPtr> InterpreterShowGrantsQuery::getEntities() const
             entities.push_back(entity);
     }
 
-    boost::range::sort(entities, IAccessEntity::LessByTypeAndName{});
+    ::sort(entities.begin(), entities.end(), IAccessEntity::LessByTypeAndName{});
     return entities;
 }
 
diff --git a/src/Storages/System/StorageSystemGrants.cpp b/src/Storages/System/StorageSystemGrants.cpp
index f55145ccfc78..26bd241023a4 100644
--- a/src/Storages/System/StorageSystemGrants.cpp
+++ b/src/Storages/System/StorageSystemGrants.cpp
@@ -23,7 +23,7 @@ NamesAndTypesList StorageSystemGrants::getNamesAndTypes()
     NamesAndTypesList names_and_types{
         {"user_name", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeString>())},
         {"role_name", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeString>())},
-        {"access_type", std::make_shared<DataTypeEnum8>(StorageSystemPrivileges::getAccessTypeEnumValues())},
+        {"access_type", std::make_shared<DataTypeEnum16>(StorageSystemPrivileges::getAccessTypeEnumValues())},
         {"database", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeString>())},
         {"table", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeString>())},
         {"column", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeString>())},
@@ -46,7 +46,7 @@ void StorageSystemGrants::fillData(MutableColumns & res_columns, ContextPtr cont
     auto & column_user_name_null_map = assert_cast<ColumnNullable &>(*res_columns[column_index++]).getNullMapData();
     auto & column_role_name = assert_cast<ColumnString &>(assert_cast<ColumnNullable &>(*res_columns[column_index]).getNestedColumn());
     auto & column_role_name_null_map = assert_cast<ColumnNullable &>(*res_columns[column_index++]).getNullMapData();
-    auto & column_access_type = assert_cast<ColumnInt8 &>(*res_columns[column_index++]).getData();
+    auto & column_access_type = assert_cast<ColumnInt16 &>(*res_columns[column_index++]).getData();
     auto & column_database = assert_cast<ColumnString &>(assert_cast<ColumnNullable &>(*res_columns[column_index]).getNestedColumn());
     auto & column_database_null_map = assert_cast<ColumnNullable &>(*res_columns[column_index++]).getNullMapData();
     auto & column_table = assert_cast<ColumnString &>(assert_cast<ColumnNullable &>(*res_columns[column_index]).getNestedColumn());
@@ -82,7 +82,7 @@ void StorageSystemGrants::fillData(MutableColumns & res_columns, ContextPtr cont
         else
             assert(false);
 
-        column_access_type.push_back(static_cast<Int8>(access_type));
+        column_access_type.push_back(static_cast<Int16>(access_type));
 
         if (database)
         {
diff --git a/src/Storages/System/StorageSystemPrivileges.cpp b/src/Storages/System/StorageSystemPrivileges.cpp
index 6a4d2e1087ec..8cf1accfe340 100644
--- a/src/Storages/System/StorageSystemPrivileges.cpp
+++ b/src/Storages/System/StorageSystemPrivileges.cpp
@@ -44,11 +44,11 @@ namespace
 }
 
 
-const std::vector<std::pair<String, Int8>> & StorageSystemPrivileges::getAccessTypeEnumValues()
+const std::vector<std::pair<String, Int16>> & StorageSystemPrivileges::getAccessTypeEnumValues()
 {
-    static const std::vector<std::pair<String, Int8>> values = []
+    static const std::vector<std::pair<String, Int16>> values = []
     {
-        std::vector<std::pair<String, Int8>> res;
+        std::vector<std::pair<String, Int16>> res;
 
 #define ADD_ACCESS_TYPE_ENUM_VALUE(name, aliases, node_type, parent_group_name) \
         res.emplace_back(toString(AccessType::name), static_cast<size_t>(AccessType::name));
@@ -65,10 +65,10 @@ const std::vector<std::pair<String, Int8>> & StorageSystemPrivileges::getAccessT
 NamesAndTypesList StorageSystemPrivileges::getNamesAndTypes()
 {
     NamesAndTypesList names_and_types{
-        {"privilege", std::make_shared<DataTypeEnum8>(getAccessTypeEnumValues())},
+        {"privilege", std::make_shared<DataTypeEnum16>(getAccessTypeEnumValues())},
         {"aliases", std::make_shared<DataTypeArray>(std::make_shared<DataTypeString>())},
         {"level", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeEnum8>(getLevelEnumValues()))},
-        {"parent_group", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeEnum8>(getAccessTypeEnumValues()))},
+        {"parent_group", std::make_shared<DataTypeNullable>(std::make_shared<DataTypeEnum16>(getAccessTypeEnumValues()))},
     };
     return names_and_types;
 }
@@ -77,17 +77,17 @@ NamesAndTypesList StorageSystemPrivileges::getNamesAndTypes()
 void StorageSystemPrivileges::fillData(MutableColumns & res_columns, ContextPtr, const SelectQueryInfo &) const
 {
     size_t column_index = 0;
-    auto & column_access_type = assert_cast<ColumnInt8 &>(*res_columns[column_index++]).getData();
+    auto & column_access_type = assert_cast<ColumnInt16 &>(*res_columns[column_index++]).getData();
     auto & column_aliases = assert_cast<ColumnString &>(assert_cast<ColumnArray &>(*res_columns[column_index]).getData());
     auto & column_aliases_offsets = assert_cast<ColumnArray &>(*res_columns[column_index++]).getOffsets();
     auto & column_level = assert_cast<ColumnInt8 &>(assert_cast<ColumnNullable &>(*res_columns[column_index]).getNestedColumn()).getData();
     auto & column_level_null_map = assert_cast<ColumnNullable &>(*res_columns[column_index++]).getNullMapData();
-    auto & column_parent_group = assert_cast<ColumnInt8 &>(assert_cast<ColumnNullable &>(*res_columns[column_index]).getNestedColumn()).getData();
+    auto & column_parent_group = assert_cast<ColumnInt16 &>(assert_cast<ColumnNullable &>(*res_columns[column_index]).getNestedColumn()).getData();
     auto & column_parent_group_null_map = assert_cast<ColumnNullable &>(*res_columns[column_index++]).getNullMapData();
 
     auto add_row = [&](AccessType access_type, const std::string_view & aliases, Level max_level, AccessType parent_group)
     {
-        column_access_type.push_back(static_cast<Int8>(access_type));
+        column_access_type.push_back(static_cast<Int16>(access_type));
 
         for (size_t pos = 0; pos < aliases.length();)
         {
@@ -121,7 +121,7 @@ void StorageSystemPrivileges::fillData(MutableColumns & res_columns, ContextPtr,
         }
         else
         {
-            column_parent_group.push_back(static_cast<Int8>(parent_group));
+            column_parent_group.push_back(static_cast<Int16>(parent_group));
             column_parent_group_null_map.push_back(false);
         }
     };
diff --git a/src/Storages/System/StorageSystemPrivileges.h b/src/Storages/System/StorageSystemPrivileges.h
index dad12d14ac0d..5eaba9bed79a 100644
--- a/src/Storages/System/StorageSystemPrivileges.h
+++ b/src/Storages/System/StorageSystemPrivileges.h
@@ -14,7 +14,7 @@ class StorageSystemPrivileges final : public shared_ptr_helper<StorageSystemPriv
 public:
     std::string getName() const override { return "SystemPrivileges"; }
     static NamesAndTypesList getNamesAndTypes();
-    static const std::vector<std::pair<String, Int8>> & getAccessTypeEnumValues();
+    static const std::vector<std::pair<String, Int16>> & getAccessTypeEnumValues();
 
 protected:
     friend struct shared_ptr_helper<StorageSystemPrivileges>;
