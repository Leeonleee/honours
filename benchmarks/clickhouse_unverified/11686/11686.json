{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 11686,
  "instance_id": "ClickHouse__ClickHouse-11686",
  "issue_numbers": [
    "3853"
  ],
  "base_commit": "d6e69211b1ba074f5e51fd467e51b892a7e091a6",
  "patch": "diff --git a/programs/client/Client.cpp b/programs/client/Client.cpp\nindex 63467c1129db..e396ae9c8689 100644\n--- a/programs/client/Client.cpp\n+++ b/programs/client/Client.cpp\n@@ -986,7 +986,10 @@ class Client : public Poco::Util::Application\n     /// Process the query that doesn't require transferring data blocks to the server.\n     void processOrdinaryQuery()\n     {\n-        /// We will always rewrite query (even if there are no query_parameters) because it will help to find errors in query formatter.\n+        /// Rewrite query only when we have query parameters.\n+        /// Note that if query is rewritten, comments in query are lost.\n+        /// But the user often wants to see comments in server logs, query log, processlist, etc.\n+        if (!query_parameters.empty())\n         {\n             /// Replace ASTQueryParameter with ASTLiteral for prepared statements.\n             ReplaceQueryParameterVisitor visitor(query_parameters);\ndiff --git a/src/Interpreters/executeQuery.cpp b/src/Interpreters/executeQuery.cpp\nindex e1e2108c0fce..cff020e62f64 100644\n--- a/src/Interpreters/executeQuery.cpp\n+++ b/src/Interpreters/executeQuery.cpp\n@@ -22,6 +22,8 @@\n #include <Parsers/ParserQuery.h>\n #include <Parsers/parseQuery.h>\n #include <Parsers/queryToString.h>\n+#include <Parsers/ASTWatchQuery.h>\n+#include <Parsers/Lexer.h>\n \n #include <Storages/StorageInput.h>\n \n@@ -41,7 +43,6 @@\n #include <Processors/Transforms/LimitsCheckingTransform.h>\n #include <Processors/Transforms/MaterializingTransform.h>\n #include <Processors/Formats/IOutputFormat.h>\n-#include <Parsers/ASTWatchQuery.h>\n \n \n namespace ProfileEvents\n@@ -70,11 +71,35 @@ static void checkASTSizeLimits(const IAST & ast, const Settings & settings)\n         ast.checkSize(settings.max_ast_elements);\n }\n \n-/// NOTE This is wrong in case of single-line comments and in case of multiline string literals.\n+\n static String joinLines(const String & query)\n {\n-    String res = query;\n-    std::replace(res.begin(), res.end(), '\\n', ' ');\n+    /// Care should be taken. We don't join lines inside non-whitespace tokens (e.g. multiline string literals)\n+    ///  and we don't join line after comment (because it can be single-line comment).\n+    /// All other whitespaces replaced to a single whitespace.\n+\n+    String res;\n+    const char * begin = query.data();\n+    const char * end = begin + query.size();\n+\n+    Lexer lexer(begin, end);\n+    Token token = lexer.nextToken();\n+    for (; !token.isEnd(); token = lexer.nextToken())\n+    {\n+        if (token.type == TokenType::Whitespace)\n+        {\n+            res += ' ';\n+        }\n+        else if (token.type == TokenType::Comment)\n+        {\n+            res.append(token.begin, token.end);\n+            if (token.end < end && *token.end == '\\n')\n+                res += '\\n';\n+        }\n+        else\n+            res.append(token.begin, token.end);\n+    }\n+\n     return res;\n }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01070_exception_code_in_query_log_table.sql b/tests/queries/0_stateless/01070_exception_code_in_query_log_table.sql\nindex 2c99ba541129..b9627a0f8a8c 100644\n--- a/tests/queries/0_stateless/01070_exception_code_in_query_log_table.sql\n+++ b/tests/queries/0_stateless/01070_exception_code_in_query_log_table.sql\n@@ -3,5 +3,5 @@ SELECT * FROM test_table_for_01070_exception_code_in_query_log_table; -- { serve\n CREATE TABLE test_table_for_01070_exception_code_in_query_log_table (value UInt64) ENGINE=Memory();\n SELECT * FROM test_table_for_01070_exception_code_in_query_log_table;\n SYSTEM FLUSH LOGS;\n-SELECT exception_code FROM system.query_log WHERE query = 'SELECT * FROM test_table_for_01070_exception_code_in_query_log_table' AND event_date >= yesterday() AND event_time > now() - INTERVAL 5 MINUTE ORDER BY exception_code;\n+SELECT exception_code FROM system.query_log WHERE lower(query) LIKE lower('SELECT * FROM test_table_for_01070_exception_code_in_query_log_table%') AND event_date >= yesterday() AND event_time > now() - INTERVAL 5 MINUTE ORDER BY exception_code;\n DROP TABLE IF EXISTS test_table_for_01070_exception_code_in_query_log_table;\ndiff --git a/tests/queries/0_stateless/01091_num_threads.sql b/tests/queries/0_stateless/01091_num_threads.sql\nindex 876a2d15d1a1..dc397d623058 100644\n--- a/tests/queries/0_stateless/01091_num_threads.sql\n+++ b/tests/queries/0_stateless/01091_num_threads.sql\n@@ -4,7 +4,7 @@ set log_query_threads=1;\n SELECT 1;\n SYSTEM FLUSH LOGS;\n \n-WITH \n+WITH\n     (\n         SELECT query_id\n         FROM system.query_log\n@@ -19,11 +19,11 @@ WHERE (event_date >= (today() - 1)) AND (query_id = id) AND (thread_id != master\n select sum(number) from numbers(1000000);\n SYSTEM FLUSH LOGS;\n \n-WITH \n+WITH\n     (\n         SELECT query_id\n         FROM system.query_log\n-        WHERE (query = 'SELECT sum(number) FROM numbers(1000000)') AND (event_date >= (today() - 1))\n+        WHERE (query LIKE 'select sum(number) from numbers(1000000);%') AND (event_date >= (today() - 1))\n         ORDER BY event_time DESC\n         LIMIT 1\n     ) AS id\n@@ -34,11 +34,11 @@ WHERE (event_date >= (today() - 1)) AND (query_id = id) AND (thread_id != master\n select sum(number) from numbers_mt(1000000);\n SYSTEM FLUSH LOGS;\n \n-WITH \n+WITH\n     (\n         SELECT query_id\n         FROM system.query_log\n-        WHERE (query = 'SELECT sum(number) FROM numbers_mt(1000000)') AND (event_date >= (today() - 1))\n+        WHERE (query LIKE 'select sum(number) from numbers_mt(1000000);%') AND (event_date >= (today() - 1))\n         ORDER BY event_time DESC\n         LIMIT 1\n     ) AS id\ndiff --git a/tests/queries/0_stateless/01319_query_formatting_in_server_log.reference b/tests/queries/0_stateless/01319_query_formatting_in_server_log.reference\nnew file mode 100644\nindex 000000000000..5fb3cc3a5998\n--- /dev/null\n+++ b/tests/queries/0_stateless/01319_query_formatting_in_server_log.reference\n@@ -0,0 +1,4 @@\n+ab\\ncd\t1\n+SeLeCt 'ab\n+cd' /* hello */ -- world\n+ , 1;\ndiff --git a/tests/queries/0_stateless/01319_query_formatting_in_server_log.sql b/tests/queries/0_stateless/01319_query_formatting_in_server_log.sql\nnew file mode 100644\nindex 000000000000..dc88d3d48f7c\n--- /dev/null\n+++ b/tests/queries/0_stateless/01319_query_formatting_in_server_log.sql\n@@ -0,0 +1,6 @@\n+SeLeCt 'ab\n+cd' /* hello */ -- world\n+, 1;\n+\n+SYSTEM FLUSH LOGS;\n+SELECT extract(message, 'SeL.+?;') FROM system.text_log WHERE event_date >= yesterday() AND message LIKE '%SeLeCt \\'ab\\n%' ORDER BY event_time DESC LIMIT 1 FORMAT TSVRaw;\n",
  "problem_statement": "Handle comments in queries properly when logging\nFor example, the following query:\r\n\r\n    -- Should fail because second shard is unavailable\r\n    SELECT count(*)\r\n    -- don't do SELECT count(*)\r\n    FROM test.distributed;\r\n\r\nwill appear in the logs as one-liner: `-- Should fail because second shard is unavailable SELECT count(*) -- don't SELECT count(*) FROM test.distributed`, in which case it's hard to understand what query was actually executed.\r\n\r\nThere are two proposed solutions: leave such queries multi-line (not good), or convert sql-comments to c-style comments (better, but hacky).\n",
  "hints_text": "Accidentially solved in https://github.com/yandex/ClickHouse/pull/5630\r\n\r\nNow queries are logged after reformatting and all comments are lost:\r\n\r\n```\r\nmilovidov-Pro-P30 :) SET send_logs_level = 'trace'\r\n\r\nSET send_logs_level = 'trace'\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.007 sec. \r\n\r\nmilovidov-Pro-P30 :) SELECT /* test */ 1 -- hello\r\n\r\nSELECT 1\r\n\r\n[milovidov-Pro-P30] 2019.07.17 13:37:18.369449 {efb444af-a2fb-4c3e-8681-528135fb95d1} [ 44 ] <Debug> executeQuery: (from [::ffff:127.0.0.1]:34098) SELECT 1\r\n\u2198 Progress: 0.00 rows, 0.00 B (0.00 rows/s., 0.00 B/s.) [milovidov-Pro-P30] 2019.07.17 13:37:18.372603 {efb444af-a2fb-4c3e-8681-528135fb95d1} [ 44 ] <Trace> InterpreterSelectQuery: FetchColumns -> Complete\r\n[milovidov-Pro-P30] 2019.07.17 13:37:18.372964 {efb444af-a2fb-4c3e-8681-528135fb95d1} [ 44 ] <Debug> executeQuery: Query pipeline:\r\nExpression\r\n Expression\r\n  One\r\n\r\n\u250c\u25001\u2500\u2510\r\n\u2502 1 \u2502\r\n\u2514\u2500\u2500\u2500\u2518\r\n[milovidov-Pro-P30] 2019.07.17 13:37:18.374281 {efb444af-a2fb-4c3e-8681-528135fb95d1} [ 44 ] <Information> executeQuery: Read 1 rows, 1.00 B in 0.004 sec., 250 rows/sec., 250.07 B/sec.\r\n[milovidov-Pro-P30] 2019.07.17 13:37:18.374444 {efb444af-a2fb-4c3e-8681-528135fb95d1} [ 44 ] <Debug> MemoryTracker: Peak memory usage (for query): 1.07 MiB.\r\n\r\n1 rows in set. Elapsed: 0.019 sec.\r\n```\nIt's also written in query_log without comments.\r\nThat is an issue, because users rely on these comments.\nBut that's only for queries from clickhouse-client.\nThe issue is still relevant and it can be solved pretty easily.\r\nJust replace single-line comments with multi-line comments with the help of Lexer.",
  "created_at": "2020-06-15T20:04:22Z",
  "modified_files": [
    "programs/client/Client.cpp",
    "src/Interpreters/executeQuery.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01070_exception_code_in_query_log_table.sql",
    "tests/queries/0_stateless/01091_num_threads.sql",
    "b/tests/queries/0_stateless/01319_query_formatting_in_server_log.reference",
    "b/tests/queries/0_stateless/01319_query_formatting_in_server_log.sql"
  ]
}