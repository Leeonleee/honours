{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 26118,
  "instance_id": "ClickHouse__ClickHouse-26118",
  "issue_numbers": [
    "25993"
  ],
  "base_commit": "69c30d658cabe2b5b4360f9e167ae4b2e3069bfe",
  "patch": "diff --git a/src/Functions/FunctionJoinGet.h b/src/Functions/FunctionJoinGet.h\nindex 2250fa3ccf06..c701625e9cd9 100644\n--- a/src/Functions/FunctionJoinGet.h\n+++ b/src/Functions/FunctionJoinGet.h\n@@ -28,7 +28,7 @@ class ExecutableFunctionJoinGet final : public IExecutableFunction\n     static constexpr auto name = or_null ? \"joinGetOrNull\" : \"joinGet\";\n \n     bool useDefaultImplementationForNulls() const override { return false; }\n-    bool useDefaultImplementationForLowCardinalityColumns() const override { return true; }\n+    bool useDefaultImplementationForLowCardinalityColumns() const override { return false; }\n     bool useDefaultImplementationForConstants() const override { return true; }\n \n     ColumnPtr executeImpl(const ColumnsWithTypeAndName & arguments, const DataTypePtr &, size_t input_rows_count) const override;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01735_join_get_low_card_fix.reference b/tests/queries/0_stateless/01735_join_get_low_card_fix.reference\nindex 0b20aead00e7..a9e2f17562ae 100644\n--- a/tests/queries/0_stateless/01735_join_get_low_card_fix.reference\n+++ b/tests/queries/0_stateless/01735_join_get_low_card_fix.reference\n@@ -1,1 +1,6 @@\n-yyy\n+1\n+1\n+1\n+1\n+1\n+1\ndiff --git a/tests/queries/0_stateless/01735_join_get_low_card_fix.sql b/tests/queries/0_stateless/01735_join_get_low_card_fix.sql\nindex bdc979bc11eb..e2002112360e 100644\n--- a/tests/queries/0_stateless/01735_join_get_low_card_fix.sql\n+++ b/tests/queries/0_stateless/01735_join_get_low_card_fix.sql\n@@ -1,9 +1,14 @@\n-drop table if exists join_tbl;\n+DROP TABLE IF EXISTS join_tbl;\n \n-create table join_tbl (`id` String, `name` String) engine Join(any, left, id);\n+CREATE TABLE join_tbl (`id` String, `name` String, lcname LowCardinality(String)) ENGINE = Join(any, left, id);\n \n-insert into join_tbl values ('xxx', 'yyy');\n+INSERT INTO join_tbl VALUES ('xxx', 'yyy', 'yyy');\n \n-select joinGet('join_tbl', 'name', toLowCardinality('xxx'));\n+SELECT joinGet('join_tbl', 'name', 'xxx') == 'yyy';\n+SELECT joinGet('join_tbl', 'name', toLowCardinality('xxx')) == 'yyy';\n+SELECT joinGet('join_tbl', 'name', toLowCardinality(materialize('xxx'))) == 'yyy';\n+SELECT joinGet('join_tbl', 'lcname', 'xxx') == 'yyy';\n+SELECT joinGet('join_tbl', 'lcname', toLowCardinality('xxx')) == 'yyy';\n+SELECT joinGet('join_tbl', 'lcname', toLowCardinality(materialize('xxx'))) == 'yyy';\n \n-drop table if exists join_tbl;\n+DROP TABLE IF EXISTS join_tbl;\n",
  "problem_statement": "joinGet Error: Invalid column type for ColumnUnique::insertRangeFrom. Expected String, got ColumnLowCardinality\n**Describe the bug**\r\n\r\nWhen doing `joinGet(<join table>, <column with LowCardinality(String) type>, <key>)`, ClickHouse returns `Error: Invalid column type for ColumnUnique::insertRangeFrom. Expected String, got ColumnLowCardinality`\r\n\r\n**Version**\r\n\r\n**21.5.4.6809**\r\n\r\n**How to reproduce**\r\n\r\n```sql\r\nClickHouse client version 21.5.4.6809.\r\nConnecting to localhost:9000 as user default.\r\nConnected to ClickHouse server version 21.5.4 revision 54448.\r\n\r\nx390 :) create table j (a String, b LowCardinality(String), c String) Engine = Join(ANY, LEFT, a)\r\n\r\nCREATE TABLE j\r\n(\r\n    `a` String,\r\n    `b` LowCardinality(String),\r\n    `c` String\r\n)\r\nENGINE = Join(ANY, LEFT, a)\r\n\r\nQuery id: a373b613-b438-47fe-8fd6-dfabb93f9ed9\r\n\r\nOk.\r\n\r\n0 rows in set. Elapsed: 0.005 sec. \r\n\r\nx390 :) insert into j values ('a', 'b', 'c')\r\n\r\nINSERT INTO j VALUES\r\n\r\nQuery id: ce8ba17b-43c7-4992-b901-2eb24d7ac2bb\r\n\r\nOk.\r\n\r\n1 rows in set. Elapsed: 0.005 sec. \r\n\r\nx390 :) select joinGet('j', 'b', 'a')\r\n\r\nSELECT joinGet('j', 'b', 'a')\r\n\r\nQuery id: 52fa0fd7-6967-4fbb-9aea-13fd600ecf6b\r\n\r\n\r\n0 rows in set. Elapsed: 0.005 sec. \r\n\r\nReceived exception from server (version 21.5.4):\r\nCode: 44. DB::Exception: Received from localhost:9000. DB::Exception: Invalid column type for ColumnUnique::insertRangeFrom. Expected String, got ColumnLowCardinality: While processing joinGet('j', 'b', 'a'). \r\n\r\nx390 :) select joinGet('j', 'c', 'a')\r\n\r\nSELECT joinGet('j', 'c', 'a')\r\n\r\nQuery id: f125b316-f017-4e6e-9eac-9c5278fda6a9\r\n\r\n\u250c\u2500joinGet('j', 'c', 'a')\u2500\u2510\r\n\u2502 c                      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n1 rows in set. Elapsed: 0.005 sec. \r\n```\r\n**Expected behavior**\r\n\r\n```sql\r\n\r\nSELECT joinGet('j', 'b', 'a')\r\n\r\n\r\n\u250c\u2500joinGet('j', 'b', 'a')\u2500\u2510\r\n\u2502 b                      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n**Additional context**\r\n\r\nTested with **20.7.2.30** too\n",
  "hints_text": "@vdimir can you please take a look at it ?",
  "created_at": "2021-07-09T09:17:33Z",
  "modified_files": [
    "src/Functions/FunctionJoinGet.h"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01735_join_get_low_card_fix.reference",
    "tests/queries/0_stateless/01735_join_get_low_card_fix.sql"
  ]
}