{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 32695,
  "instance_id": "ClickHouse__ClickHouse-32695",
  "issue_numbers": [
    "28280"
  ],
  "base_commit": "60fae3af767093ca0785f543dac6f69110df75f4",
  "patch": "diff --git a/src/Interpreters/MutationsInterpreter.cpp b/src/Interpreters/MutationsInterpreter.cpp\nindex fef31d906c60..ac8dcce35d01 100644\n--- a/src/Interpreters/MutationsInterpreter.cpp\n+++ b/src/Interpreters/MutationsInterpreter.cpp\n@@ -421,6 +421,7 @@ ASTPtr MutationsInterpreter::prepare(bool dry_run)\n \n     NameSet updated_columns;\n     bool materialize_ttl_recalculate_only = materializeTTLRecalculateOnly(storage);\n+\n     for (const MutationCommand & command : commands)\n     {\n         if (command.type == MutationCommand::Type::UPDATE\n@@ -631,7 +632,9 @@ ASTPtr MutationsInterpreter::prepare(bool dry_run)\n                         dependencies.insert(dependency);\n                 }\n             }\n-            else if (metadata_snapshot->hasRowsTTL())\n+            else if (metadata_snapshot->hasRowsTTL()\n+                || metadata_snapshot->hasAnyRowsWhereTTL()\n+                || metadata_snapshot->hasAnyGroupByTTL())\n             {\n                 for (const auto & column : all_columns)\n                     dependencies.emplace(column.name, ColumnDependency::TTL_TARGET);\ndiff --git a/src/Storages/StorageInMemoryMetadata.cpp b/src/Storages/StorageInMemoryMetadata.cpp\nindex dcdf3a097e64..061319bc1c0d 100644\n--- a/src/Storages/StorageInMemoryMetadata.cpp\n+++ b/src/Storages/StorageInMemoryMetadata.cpp\n@@ -254,16 +254,24 @@ ColumnDependencies StorageInMemoryMetadata::getColumnDependencies(const NameSet\n     for (const auto & projection : getProjections())\n         add_dependent_columns(&projection, projections_columns);\n \n-    if (hasRowsTTL())\n+    auto add_for_rows_ttl = [&](const auto & expression, auto & to_set)\n     {\n-        auto rows_expression = getRowsTTL().expression;\n-        if (add_dependent_columns(rows_expression, required_ttl_columns) && include_ttl_target)\n+        if (add_dependent_columns(expression, to_set) && include_ttl_target)\n         {\n             /// Filter all columns, if rows TTL expression have to be recalculated.\n             for (const auto & column : getColumns().getAllPhysical())\n                 updated_ttl_columns.insert(column.name);\n         }\n-    }\n+    };\n+\n+    if (hasRowsTTL())\n+        add_for_rows_ttl(getRowsTTL().expression, required_ttl_columns);\n+\n+    for (const auto & entry : getRowsWhereTTLs())\n+        add_for_rows_ttl(entry.expression, required_ttl_columns);\n+\n+    for (const auto & entry : getGroupByTTLs())\n+        add_for_rows_ttl(entry.expression, required_ttl_columns);\n \n     for (const auto & entry : getRecompressionTTLs())\n         add_dependent_columns(entry.expression, required_ttl_columns);\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02129_add_column_add_ttl.reference b/tests/queries/0_stateless/02129_add_column_add_ttl.reference\nnew file mode 100644\nindex 000000000000..8b3280ef095d\n--- /dev/null\n+++ b/tests/queries/0_stateless/02129_add_column_add_ttl.reference\n@@ -0,0 +1,41 @@\n+0\t\t2021-01-01\t0\n+0\t\t2021-01-01\t0\n+1\t\t2021-01-01\t0\n+1\t\t2021-01-01\t0\n+2\t\t2021-01-01\t0\n+2\t\t2021-01-01\t0\n+3\t\t2021-01-01\t0\n+3\t\t2021-01-01\t0\n+4\t\t2021-01-01\t0\n+4\t\t2021-01-01\t0\n+5\t\t2021-01-01\t0\n+5\t\t2021-01-01\t0\n+6\t\t2021-01-01\t0\n+6\t\t2021-01-01\t0\n+7\t\t2021-01-01\t0\n+7\t\t2021-01-01\t0\n+8\t\t2021-01-01\t0\n+8\t\t2021-01-01\t0\n+9\t\t2021-01-01\t0\n+9\t\t2021-01-01\t0\n+==========\n+0\t\t2021-01-01\t0\n+0\t\t2021-01-01\t0\n+1\t\t2021-01-01\t0\n+1\t\t2021-01-01\t0\n+2\t\t2021-01-01\t0\n+2\t\t2021-01-01\t0\n+3\t\t2021-01-01\t0\n+3\t\t2021-01-01\t0\n+4\t\t2021-01-01\t0\n+4\t\t2021-01-01\t0\n+5\t\t2021-01-01\t0\n+5\t\t2021-01-01\t0\n+6\t\t2021-01-01\t0\n+6\t\t2021-01-01\t0\n+7\t\t2021-01-01\t0\n+7\t\t2021-01-01\t0\n+8\t\t2021-01-01\t0\n+8\t\t2021-01-01\t0\n+9\t\t2021-01-01\t0\n+9\t\t2021-01-01\t0\ndiff --git a/tests/queries/0_stateless/02129_add_column_add_ttl.sql b/tests/queries/0_stateless/02129_add_column_add_ttl.sql\nnew file mode 100644\nindex 000000000000..7a6dd928a3f5\n--- /dev/null\n+++ b/tests/queries/0_stateless/02129_add_column_add_ttl.sql\n@@ -0,0 +1,31 @@\n+drop table if exists ttl_test_02129;\n+\n+create table ttl_test_02129(a Int64, b String, d Date)\n+Engine=MergeTree partition by d order by a\n+settings min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0, materialize_ttl_recalculate_only = 0;\n+\n+insert into ttl_test_02129 select number, '', '2021-01-01' from numbers(10);\n+alter table ttl_test_02129 add column c Int64 settings mutations_sync=2;\n+\n+insert into ttl_test_02129 select number, '', '2021-01-01', 0 from numbers(10);\n+alter table  ttl_test_02129 modify TTL (d + INTERVAL 1 MONTH) DELETE WHERE c=1 settings mutations_sync=2;\n+\n+select * from ttl_test_02129 order by a, b, d, c;\n+drop table ttl_test_02129;\n+\n+drop table if exists ttl_test_02129;\n+\n+select '==========';\n+\n+create table ttl_test_02129(a Int64, b String, d Date)\n+Engine=MergeTree partition by d order by a\n+settings min_bytes_for_wide_part = 0, min_rows_for_wide_part = 0, materialize_ttl_recalculate_only = 1;\n+\n+insert into ttl_test_02129 select number, '', '2021-01-01' from numbers(10);\n+alter table ttl_test_02129 add column c Int64 settings mutations_sync=2;\n+\n+insert into ttl_test_02129 select number, '', '2021-01-01', 0 from numbers(10);\n+alter table  ttl_test_02129 modify TTL (d + INTERVAL 1 MONTH) DELETE WHERE c=1 settings mutations_sync=2;\n+\n+select * from ttl_test_02129 order by a, b, d, c;\n+drop table ttl_test_02129;\n",
  "problem_statement": "alter table add column + TTL on this column == Not found column .. in block\n```\r\ncreate table ttl_test(a Int64, b String, d Date)Engine=MergeTree partition by d order by a; \r\ninsert into ttl_test select number, '', today() from numbers(1000);\r\nalter table ttl_test add column c Int64;\r\ninsert into ttl_test select number, '', today(), 0 from numbers(1000);\r\n\r\nalter table  ttl_test modify TTL (d + INTERVAL 1 MONTH) DELETE WHERE c=1;\r\n\r\n(version 21.9.1):\r\nCode: 341. DB::Exception: Received from localhost:9000. DB::Exception: \r\nException happened during execution of mutation 'mutation_3.txt' with part '20210827_1_1_0' reason: 'Code: 10. DB::Exception: Not found column c in block. There are only columns: a, b, d.\r\n (NOT_FOUND_COLUMN_IN_BLOCK) (version 21.9.1.7603)'.\r\n This error maybe retryable or not. In case of unretryable error, mutation can be killed with KILL MUTATION query. (UNFINISHED)\r\n```\r\n\r\nWA: \r\n```\r\nalter table ttl_test update c=c where 1 settings mutations_sync=2;\r\nalter table ttl_test modify TTL (d + INTERVAL 1 MONTH) DELETE WHERE c=1;\r\n```\n",
  "hints_text": "",
  "created_at": "2021-12-13T14:28:59Z",
  "modified_files": [
    "src/Interpreters/MutationsInterpreter.cpp",
    "src/Storages/StorageInMemoryMetadata.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02129_add_column_add_ttl.reference",
    "b/tests/queries/0_stateless/02129_add_column_add_ttl.sql"
  ]
}