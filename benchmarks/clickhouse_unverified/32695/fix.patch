diff --git a/src/Interpreters/MutationsInterpreter.cpp b/src/Interpreters/MutationsInterpreter.cpp
index fef31d906c60..ac8dcce35d01 100644
--- a/src/Interpreters/MutationsInterpreter.cpp
+++ b/src/Interpreters/MutationsInterpreter.cpp
@@ -421,6 +421,7 @@ ASTPtr MutationsInterpreter::prepare(bool dry_run)
 
     NameSet updated_columns;
     bool materialize_ttl_recalculate_only = materializeTTLRecalculateOnly(storage);
+
     for (const MutationCommand & command : commands)
     {
         if (command.type == MutationCommand::Type::UPDATE
@@ -631,7 +632,9 @@ ASTPtr MutationsInterpreter::prepare(bool dry_run)
                         dependencies.insert(dependency);
                 }
             }
-            else if (metadata_snapshot->hasRowsTTL())
+            else if (metadata_snapshot->hasRowsTTL()
+                || metadata_snapshot->hasAnyRowsWhereTTL()
+                || metadata_snapshot->hasAnyGroupByTTL())
             {
                 for (const auto & column : all_columns)
                     dependencies.emplace(column.name, ColumnDependency::TTL_TARGET);
diff --git a/src/Storages/StorageInMemoryMetadata.cpp b/src/Storages/StorageInMemoryMetadata.cpp
index dcdf3a097e64..061319bc1c0d 100644
--- a/src/Storages/StorageInMemoryMetadata.cpp
+++ b/src/Storages/StorageInMemoryMetadata.cpp
@@ -254,16 +254,24 @@ ColumnDependencies StorageInMemoryMetadata::getColumnDependencies(const NameSet
     for (const auto & projection : getProjections())
         add_dependent_columns(&projection, projections_columns);
 
-    if (hasRowsTTL())
+    auto add_for_rows_ttl = [&](const auto & expression, auto & to_set)
     {
-        auto rows_expression = getRowsTTL().expression;
-        if (add_dependent_columns(rows_expression, required_ttl_columns) && include_ttl_target)
+        if (add_dependent_columns(expression, to_set) && include_ttl_target)
         {
             /// Filter all columns, if rows TTL expression have to be recalculated.
             for (const auto & column : getColumns().getAllPhysical())
                 updated_ttl_columns.insert(column.name);
         }
-    }
+    };
+
+    if (hasRowsTTL())
+        add_for_rows_ttl(getRowsTTL().expression, required_ttl_columns);
+
+    for (const auto & entry : getRowsWhereTTLs())
+        add_for_rows_ttl(entry.expression, required_ttl_columns);
+
+    for (const auto & entry : getGroupByTTLs())
+        add_for_rows_ttl(entry.expression, required_ttl_columns);
 
     for (const auto & entry : getRecompressionTTLs())
         add_dependent_columns(entry.expression, required_ttl_columns);
