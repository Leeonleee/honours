{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 48563,
  "instance_id": "ClickHouse__ClickHouse-48563",
  "issue_numbers": [
    "48554"
  ],
  "base_commit": "90ebdedfdd54a0351ffb3909db2708d5b4c5c76f",
  "patch": "diff --git a/programs/keeper/Keeper.cpp b/programs/keeper/Keeper.cpp\nindex 266b363eb474..3853c955171d 100644\n--- a/programs/keeper/Keeper.cpp\n+++ b/programs/keeper/Keeper.cpp\n@@ -17,7 +17,6 @@\n #include <Poco/Net/TCPServerParams.h>\n #include <Poco/Net/TCPServer.h>\n #include <Poco/Util/HelpFormatter.h>\n-#include <Poco/Version.h>\n #include <Poco/Environment.h>\n #include <sys/stat.h>\n #include <pwd.h>\ndiff --git a/programs/server/Server.cpp b/programs/server/Server.cpp\nindex 9ef9f704f619..164e1ce14e56 100644\n--- a/programs/server/Server.cpp\n+++ b/programs/server/Server.cpp\n@@ -981,7 +981,7 @@ try\n \n     StatusFile status{path / \"status\", StatusFile::write_full_info};\n \n-    DB::ServerUUID::load(path / \"uuid\", log);\n+    ServerUUID::load(path / \"uuid\", log);\n \n     /// Try to increase limit on number of open files.\n     {\ndiff --git a/src/Common/Exception.h b/src/Common/Exception.h\nindex 8e50c1114f47..170e0d32b3ce 100644\n--- a/src/Common/Exception.h\n+++ b/src/Common/Exception.h\n@@ -4,7 +4,6 @@\n #include <vector>\n #include <memory>\n \n-#include <Poco/Version.h>\n #include <Poco/Exception.h>\n \n #include <base/defines.h>\ndiff --git a/src/Common/Macros.cpp b/src/Common/Macros.cpp\nindex e5d4be446c13..f43fed6c4992 100644\n--- a/src/Common/Macros.cpp\n+++ b/src/Common/Macros.cpp\n@@ -1,8 +1,9 @@\n #include <Poco/Util/AbstractConfiguration.h>\n #include <Common/Macros.h>\n #include <Common/Exception.h>\n-#include <IO/WriteHelpers.h>\n #include <Common/logger_useful.h>\n+#include <Core/ServerUUID.h>\n+#include <IO/WriteHelpers.h>\n \n \n namespace DB\n@@ -11,6 +12,8 @@ namespace DB\n namespace ErrorCodes\n {\n     extern const int SYNTAX_ERROR;\n+    extern const int BAD_ARGUMENTS;\n+    extern const int NO_ELEMENTS_IN_CONFIG;\n }\n \n Macros::Macros(const Poco::Util::AbstractConfiguration & config, const String & root_key, Poco::Logger * log)\n@@ -95,7 +98,7 @@ String Macros::expand(const String & s,\n         else if (macro_name == \"uuid\" && !info.expand_special_macros_only)\n         {\n             if (info.table_id.uuid == UUIDHelpers::Nil)\n-                throw Exception(ErrorCodes::SYNTAX_ERROR, \"Macro 'uuid' and empty arguments of ReplicatedMergeTree \"\n+                throw Exception(ErrorCodes::BAD_ARGUMENTS, \"Macro 'uuid' and empty arguments of ReplicatedMergeTree \"\n                                 \"are supported only for ON CLUSTER queries with Atomic database engine\");\n             /// For ON CLUSTER queries we don't want to require all macros definitions in initiator's config.\n             /// However, initiator must check that for cross-replication cluster zookeeper_path does not contain {uuid} macro.\n@@ -105,6 +108,15 @@ String Macros::expand(const String & s,\n             res += toString(info.table_id.uuid);\n             info.expanded_uuid = true;\n         }\n+        else if (macro_name == \"server_uuid\")\n+        {\n+            auto uuid = ServerUUID::get();\n+            if (UUIDHelpers::Nil == uuid)\n+                throw Exception(ErrorCodes::BAD_ARGUMENTS,\n+                    \"Macro {server_uuid} expanded to zero, which means the UUID is not initialized (most likely it's not a server application)\");\n+            res += toString(uuid);\n+            info.expanded_other = true;\n+        }\n         else if (info.shard && macro_name == \"shard\")\n         {\n             res += *info.shard;\n@@ -125,7 +137,7 @@ String Macros::expand(const String & s,\n             info.has_unknown = true;\n         }\n         else\n-            throw Exception(ErrorCodes::SYNTAX_ERROR, \"No macro '{}' in config while processing substitutions in \"\n+            throw Exception(ErrorCodes::NO_ELEMENTS_IN_CONFIG, \"No macro '{}' in config while processing substitutions in \"\n                             \"'{}' at '{}' or macro is not supported here\", macro_name, s, toString(begin));\n \n         pos = end + 1;\n@@ -142,7 +154,7 @@ String Macros::getValue(const String & key) const\n {\n     if (auto it = macros.find(key); it != macros.end())\n         return it->second;\n-    throw Exception(ErrorCodes::SYNTAX_ERROR, \"No macro {} in config\", key);\n+    throw Exception(ErrorCodes::NO_ELEMENTS_IN_CONFIG, \"No macro {} in config\", key);\n }\n \n \ndiff --git a/src/Daemon/BaseDaemon.h b/src/Daemon/BaseDaemon.h\nindex d28f9403c16f..f90f403364b2 100644\n--- a/src/Daemon/BaseDaemon.h\n+++ b/src/Daemon/BaseDaemon.h\n@@ -15,7 +15,6 @@\n #include <Poco/Util/Application.h>\n #include <Poco/Util/ServerApplication.h>\n #include <Poco/Net/SocketAddress.h>\n-#include <Poco/Version.h>\n #include <base/types.h>\n #include <Common/logger_useful.h>\n #include <base/getThreadId.h>\ndiff --git a/src/Dictionaries/MongoDBDictionarySource.cpp b/src/Dictionaries/MongoDBDictionarySource.cpp\nindex a9555a94304f..922e1e71bbb7 100644\n--- a/src/Dictionaries/MongoDBDictionarySource.cpp\n+++ b/src/Dictionaries/MongoDBDictionarySource.cpp\n@@ -67,7 +67,6 @@ void registerDictionarySourceMongoDB(DictionarySourceFactory & factory)\n #include <Poco/MongoDB/ObjectId.h>\n #include <Poco/URI.h>\n #include <Poco/Util/AbstractConfiguration.h>\n-#include <Poco/Version.h>\n \n // only after poco\n // naming conflict:\ndiff --git a/src/Disks/ObjectStorages/S3/registerDiskS3.cpp b/src/Disks/ObjectStorages/S3/registerDiskS3.cpp\nindex 1c192a0d89cc..70f39d893f77 100644\n--- a/src/Disks/ObjectStorages/S3/registerDiskS3.cpp\n+++ b/src/Disks/ObjectStorages/S3/registerDiskS3.cpp\n@@ -8,7 +8,6 @@\n \n #if USE_AWS_S3\n \n-#include <aws/core/client/DefaultRetryStrategy.h>\n #include <base/getFQDNOrHostName.h>\n \n #include <Disks/DiskLocal.h>\n@@ -19,9 +18,7 @@\n #include <Disks/ObjectStorages/S3/diskSettings.h>\n #include <Disks/ObjectStorages/MetadataStorageFromDisk.h>\n #include <Disks/ObjectStorages/MetadataStorageFromPlainObjectStorage.h>\n-#include <IO/S3Common.h>\n \n-#include <Storages/StorageS3Settings.h>\n #include <Core/ServerUUID.h>\n #include <Common/Macros.h>\n \n@@ -87,10 +84,10 @@ class CheckAccess\n private:\n     static String getServerUUID()\n     {\n-        DB::UUID server_uuid = DB::ServerUUID::get();\n-        if (server_uuid == DB::UUIDHelpers::Nil)\n+        UUID server_uuid = ServerUUID::get();\n+        if (server_uuid == UUIDHelpers::Nil)\n             throw Exception(ErrorCodes::LOGICAL_ERROR, \"Server UUID is not initialized\");\n-        return DB::toString(server_uuid);\n+        return toString(server_uuid);\n     }\n };\n \ndiff --git a/src/IO/HTTPCommon.cpp b/src/IO/HTTPCommon.cpp\nindex 551ce7977579..9eabe3573f45 100644\n--- a/src/IO/HTTPCommon.cpp\n+++ b/src/IO/HTTPCommon.cpp\n@@ -7,8 +7,6 @@\n #include <Common/ProfileEvents.h>\n #include <Common/SipHash.h>\n \n-#include <Poco/Version.h>\n-\n #include \"config.h\"\n \n #if USE_SSL\ndiff --git a/src/IO/ReadWriteBufferFromHTTP.h b/src/IO/ReadWriteBufferFromHTTP.h\nindex 784110f735ed..28f7a7f600bb 100644\n--- a/src/IO/ReadWriteBufferFromHTTP.h\n+++ b/src/IO/ReadWriteBufferFromHTTP.h\n@@ -21,7 +21,6 @@\n #include <Poco/Net/HTTPResponse.h>\n #include <Poco/URI.h>\n #include <Poco/URIStreamFactory.h>\n-#include <Poco/Version.h>\n #include <Common/DNSResolver.h>\n #include <Common/RemoteHostFilter.h>\n #include \"config.h\"\ndiff --git a/src/Processors/Sources/MongoDBSource.cpp b/src/Processors/Sources/MongoDBSource.cpp\nindex a8bfefdf8a65..9e50cdcf6ab0 100644\n--- a/src/Processors/Sources/MongoDBSource.cpp\n+++ b/src/Processors/Sources/MongoDBSource.cpp\n@@ -15,7 +15,6 @@\n #include <Common/quoteString.h>\n #include <base/range.h>\n #include <Poco/URI.h>\n-#include <Poco/Version.h>\n \n // only after poco\n // naming conflict:\ndiff --git a/src/Storages/StorageMongoDB.cpp b/src/Storages/StorageMongoDB.cpp\nindex 0bad4ab8bf0b..63b8c2d00a11 100644\n--- a/src/Storages/StorageMongoDB.cpp\n+++ b/src/Storages/StorageMongoDB.cpp\n@@ -7,7 +7,6 @@\n #include <Poco/MongoDB/Connection.h>\n #include <Poco/MongoDB/Cursor.h>\n #include <Poco/MongoDB/Database.h>\n-#include <Poco/Version.h>\n #include <Interpreters/evaluateConstantExpression.h>\n #include <Core/Settings.h>\n #include <Interpreters/Context.h>\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01148_zookeeper_path_macros_unfolding.sql b/tests/queries/0_stateless/01148_zookeeper_path_macros_unfolding.sql\nindex 7234cee96e0e..505c406c2cca 100644\n--- a/tests/queries/0_stateless/01148_zookeeper_path_macros_unfolding.sql\n+++ b/tests/queries/0_stateless/01148_zookeeper_path_macros_unfolding.sql\n@@ -12,7 +12,7 @@ DETACH TABLE rmt1;\n ATTACH TABLE rmt1;\n SHOW CREATE TABLE rmt1;\n \n-CREATE TABLE rmt (n UInt64, s String) ENGINE = ReplicatedMergeTree('{default_path_test}{uuid}', '{default_name_test}') ORDER BY n;    -- { serverError 62 }\n+CREATE TABLE rmt (n UInt64, s String) ENGINE = ReplicatedMergeTree('{default_path_test}{uuid}', '{default_name_test}') ORDER BY n;    -- { serverError 36 }\n CREATE TABLE rmt (n UInt64, s String) ENGINE = ReplicatedMergeTree('{default_path_test}test_01148', '{default_name_test}') ORDER BY n;\n SHOW CREATE TABLE rmt;\n RENAME TABLE rmt TO rmt2;   -- { serverError 48 }\n@@ -24,7 +24,7 @@ SET distributed_ddl_output_mode='none';\n DROP DATABASE IF EXISTS test_01148_atomic;\n CREATE DATABASE test_01148_atomic ENGINE=Atomic;\n CREATE TABLE test_01148_atomic.rmt2 ON CLUSTER test_shard_localhost (n int, PRIMARY KEY n) ENGINE=ReplicatedMergeTree;\n-CREATE TABLE test_01148_atomic.rmt3 AS test_01148_atomic.rmt2; -- { serverError 62 }\n+CREATE TABLE test_01148_atomic.rmt3 AS test_01148_atomic.rmt2; -- { serverError 36 }\n CREATE TABLE test_01148_atomic.rmt4 ON CLUSTER test_shard_localhost AS test_01148_atomic.rmt2;\n SHOW CREATE TABLE test_01148_atomic.rmt2;\n RENAME TABLE test_01148_atomic.rmt4 to test_01148_atomic.rmt3;\ndiff --git a/tests/queries/0_stateless/02711_server_uuid_macro.reference b/tests/queries/0_stateless/02711_server_uuid_macro.reference\nnew file mode 100644\nindex 000000000000..d00491fd7e5b\n--- /dev/null\n+++ b/tests/queries/0_stateless/02711_server_uuid_macro.reference\n@@ -0,0 +1,1 @@\n+1\ndiff --git a/tests/queries/0_stateless/02711_server_uuid_macro.sql b/tests/queries/0_stateless/02711_server_uuid_macro.sql\nnew file mode 100644\nindex 000000000000..f10ed7f8f6f7\n--- /dev/null\n+++ b/tests/queries/0_stateless/02711_server_uuid_macro.sql\n@@ -0,0 +1,15 @@\n+DROP TABLE IF EXISTS test;\n+\n+-- You can create a table with the {server_uuid} substituted.\n+CREATE TABLE test (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test', 'replica-{server_uuid}') ORDER BY x;\n+\n+-- The server UUID is correctly substituted.\n+SELECT engine_full LIKE ('%replica-' || serverUUID()::String || '%') FROM system.tables WHERE database = currentDatabase() AND name = 'test';\n+\n+-- An attempt to create a second table with the same UUID results in error.\n+CREATE TABLE test2 (x UInt8) ENGINE = ReplicatedMergeTree('/clickhouse/tables/{database}/test', 'replica-{server_uuid}') ORDER BY x; -- { serverError REPLICA_ALREADY_EXISTS }\n+\n+-- The macro {server_uuid} is special, not a configuration-type macro. It's normal that it is inaccessible with the getMacro function.\n+SELECT getMacro('server_uuid'); -- { serverError NO_ELEMENTS_IN_CONFIG }\n+\n+DROP TABLE test NO DELAY;\n",
  "problem_statement": "Add `server_uuid` as a predefined macro\n**Use case**\r\n\r\nI was experimenting with a toy cloud cluster over shared storage.\r\n\r\nIt has Replicated databases defined as\r\n```\r\nCREATE DATABASE default\r\nENGINE = Replicated('/clickhouse/databases/default', '{shard}', '{replica}')\r\n```\r\n\r\nThe `{replica}` macro was defined as a hostname. The hostname was defined by AWS based on the private IP address in my subnet.\r\n\r\nand a table created as\r\n```\r\n... ENGINE = SharedMergeTree\r\n```\r\n(with no arguments)\r\n\r\nI scaled it up to 50 replicas, successfully tested it, then scaled it down to 1 replica and deleted all Replicated databases in Keeper instead of one. I didn't delete table replicas.\r\n\r\nThen I scaled it up to 20 replicas again. But some replicated databases on new servers did not create the existing tables with the \"replica already exists\" error due to the collision of private IP addresses.\r\n\r\n**Proposed solution**\r\n\r\nTrivial: use `{server_uuid}` instead of `{replica}`.\n",
  "hints_text": "",
  "created_at": "2023-04-09T01:27:19Z",
  "modified_files": [
    "programs/keeper/Keeper.cpp",
    "programs/server/Server.cpp",
    "src/Common/Exception.h",
    "src/Common/Macros.cpp",
    "src/Daemon/BaseDaemon.h",
    "src/Dictionaries/MongoDBDictionarySource.cpp",
    "src/Disks/ObjectStorages/S3/registerDiskS3.cpp",
    "src/IO/HTTPCommon.cpp",
    "src/IO/ReadWriteBufferFromHTTP.h",
    "src/Processors/Sources/MongoDBSource.cpp",
    "src/Storages/StorageMongoDB.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/01148_zookeeper_path_macros_unfolding.sql",
    "b/tests/queries/0_stateless/02711_server_uuid_macro.reference",
    "b/tests/queries/0_stateless/02711_server_uuid_macro.sql"
  ]
}