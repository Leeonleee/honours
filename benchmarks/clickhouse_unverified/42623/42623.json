{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 42623,
  "instance_id": "ClickHouse__ClickHouse-42623",
  "issue_numbers": [
    "42533"
  ],
  "base_commit": "b5d51e8a8f24578e80f12a22e5c2a6d8549c177e",
  "patch": "diff --git a/src/Functions/array/arrayElement.cpp b/src/Functions/array/arrayElement.cpp\nindex acd8f89ffe50..59224096d3c1 100644\n--- a/src/Functions/array/arrayElement.cpp\n+++ b/src/Functions/array/arrayElement.cpp\n@@ -1025,12 +1025,14 @@ ColumnPtr FunctionArrayElement::executeMap(\n     if (col_const_map)\n         values_array = ColumnConst::create(values_array, input_rows_count);\n \n+    const auto & type_map = assert_cast<const DataTypeMap &>(*arguments[0].type);\n+\n     /// Prepare arguments to call arrayElement for array with values and calculated indices at previous step.\n     ColumnsWithTypeAndName new_arguments =\n     {\n         {\n             values_array,\n-            std::make_shared<DataTypeArray>(result_type),\n+            std::make_shared<DataTypeArray>(type_map.getValueType()),\n             \"\"\n         },\n         {\n@@ -1086,7 +1088,9 @@ ColumnPtr FunctionArrayElement::executeImpl(const ColumnsWithTypeAndName & argum\n \n     col_array = checkAndGetColumn<ColumnArray>(arguments[0].column.get());\n     if (col_array)\n+    {\n         is_array_of_nullable = isColumnNullable(col_array->getData());\n+    }\n     else\n     {\n         col_const_array = checkAndGetColumnConstData<ColumnArray>(arguments[0].column.get());\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02473_map_element_nullable.reference b/tests/queries/0_stateless/02473_map_element_nullable.reference\nnew file mode 100644\nindex 000000000000..84a9ba03bb41\n--- /dev/null\n+++ b/tests/queries/0_stateless/02473_map_element_nullable.reference\n@@ -0,0 +1,16 @@\n+2\t\\N\t\\N\n+2\t\\N\t\\N\n+2\t\\N\t\\N\n+2\t\\N\t\\N\n+2\t\\N\t\\N\n+2\t\\N\t\\N\n+2\t\\N\t\\N\n+2\t\\N\t\\N\n+2\t\\N\t\\N\n+2\t\\N\t\\N\n+2\t\\N\t\\N\n+2\t\\N\t\\N\n+2\t\\N\t\\N\n+2\t\\N\t\\N\n+2\t\\N\t\\N\n+2\t\\N\t\\N\ndiff --git a/tests/queries/0_stateless/02473_map_element_nullable.sql b/tests/queries/0_stateless/02473_map_element_nullable.sql\nnew file mode 100644\nindex 000000000000..e9c351d112ce\n--- /dev/null\n+++ b/tests/queries/0_stateless/02473_map_element_nullable.sql\n@@ -0,0 +1,19 @@\n+WITH map(1, 2, 3, NULL) AS m SELECT m[toNullable(1)], m[toNullable(2)], m[toNullable(3)];\n+WITH map(1, 2, 3, NULL) AS m SELECT m[materialize(toNullable(1))], m[materialize(toNullable(2))], m[materialize(toNullable(3))];\n+WITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[toNullable(1)], m[toNullable(2)], m[toNullable(3)];\n+WITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[materialize(toNullable(1))], m[materialize(toNullable(2))], m[materialize(toNullable(3))];\n+\n+WITH map('a', 2, 'b', NULL) AS m SELECT m[toNullable('a')], m[toNullable('b')], m[toNullable('c')];\n+WITH map('a', 2, 'b', NULL) AS m SELECT m[materialize(toNullable('a'))], m[materialize(toNullable('b'))], m[materialize(toNullable('c'))];\n+WITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m[toNullable('a')], m[toNullable('b')], m[toNullable('c')];\n+WITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m[materialize(toNullable('a'))], m[materialize(toNullable('b'))], m[materialize(toNullable('c'))];\n+\n+WITH map(1, 2, 3, NULL) AS m SELECT m[1], m[2], m[3];\n+WITH map(1, 2, 3, NULL) AS m SELECT m[materialize(1)], m[materialize(2)], m[materialize(3)];\n+WITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[1], m[2], m[3];\n+WITH materialize(map(1, 2, 3, NULL)) AS m SELECT m[materialize(1)], m[materialize(2)], m[materialize(3)];\n+\n+WITH map('a', 2, 'b', NULL) AS m SELECT m['a'], m['b'], m['c'];\n+WITH map('a', 2, 'b', NULL) AS m SELECT m[materialize('a')], m[materialize('b')], m[materialize('c')];\n+WITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m['a'], m['b'], m['c'];\n+WITH materialize(map('a', 2, 'b', NULL)) AS m SELECT m[materialize('a')], m[materialize('b')], m[materialize('c')];\n",
  "problem_statement": "Bad cast in `arrayElement` with type `Map` and `Nullable` value and `Nullable` index\n**Describe the bug**\r\n[A link to the report\r\n](https://s3.amazonaws.com/clickhouse-test-reports/42516/00f9ae99249c636320141607ee51dac170ae6938/fuzzer_astfuzzerasan//report.html)\r\n\r\n**How to reproduce**\r\n```sql\r\nWITH map(1, 2, 3, NULL) AS m\r\nSELECT toTypeName(m);\r\n\r\n\u250c\u2500toTypeName(m)\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 Map(UInt8, Nullable(UInt8)) \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nSELECT\r\n    map(1, 2, 3, NULL) AS m,\r\n    m[toNullable(1)]\r\n```\r\n\r\n```\r\n2022.10.20 13:32:01.108662 [ 1119659 ] {3b38465f-ef53-477d-9274-3f7284a05c8c} <Debug> executeQuery: (from [::ffff:127.0.0.1]:41364) select map(1, 2, 3, NULL) as m, m[toNullable(1)] (stage: Complete)\r\n2022.10.20 13:32:01.109375 [ 1119659 ] {3b38465f-ef53-477d-9274-3f7284a05c8c} <Error> executeQuery: Code: 49. DB::Exception: Bad cast from type DB::DataTypeNumber<char8_t> to DB::DataTypeNullable: While processing map(1, 2, 3, NULL) AS m, m[toNullable(1)]. (LOGICAL_ERROR) (version 22.10.1.1) (from [::ffff:127.0.0.1]:41364) (in query: select map(1, 2, 3, NULL) as m, m[toNullable(1)]), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. ./build_clang/./contrib/libcxx/include/exception:133: Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x17db630c in /usr/local/bin/clickhouse\r\n1. ./build_clang/./src/Common/Exception.cpp:69: DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int, bool) @ 0xfe75d5a in /usr/local/bin/clickhouse\r\n2. DB::DataTypeNullable const& typeid_cast<DB::DataTypeNullable const&, DB::IDataType const>(DB::IDataType const&) @ 0xfad5a3f in /usr/local/bin/clickhouse\r\n3. DB::FunctionArrayElement::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xfac1ac3 in /usr/local/bin/clickhouse\r\n4. DB::FunctionArrayElement::executeMap(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xfac11f9 in /usr/local/bin/clickhouse\r\n5. DB::FunctionArrayElement::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xfac19cf in /usr/local/bin/clickhouse\r\n6. DB::IFunction::executeImplDryRun(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xb4eb80a in /usr/local/bin/clickhouse\r\n7. DB::FunctionToExecutableFunctionAdaptor::executeDryRunImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const @ 0xb4eb4ce in /usr/local/bin/clickhouse\r\n8. ./build_clang/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dbd911 in /usr/local/bin/clickhouse\r\n9. ./build_clang/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::defaultImplementationForNulls(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dbdb4e in /usr/local/bin/clickhouse\r\n10. ./build_clang/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dbd8dd in /usr/local/bin/clickhouse\r\n11. ./build_clang/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:200: DB::IExecutableFunction::defaultImplementationForConstantArguments(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dbd43c in /usr/local/bin/clickhouse\r\n12. ./build_clang/./src/Functions/IFunction.cpp:0: DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dbd8b5 in /usr/local/bin/clickhouse\r\n13. ./build_clang/./contrib/boost/boost/smart_ptr/intrusive_ptr.hpp:115: DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dbe140 in /usr/local/bin/clickhouse\r\n14. ./build_clang/./src/Functions/IFunction.cpp:372: DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName> > const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const @ 0x13dbf0dc in /usr/local/bin/clickhouse\r\n15. ./build_clang/./src/Interpreters/ActionsDAG.cpp:0: DB::ActionsDAG::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<DB::ActionsDAG::Node const*, std::__1::allocator<DB::ActionsDAG::Node const*> >, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) @ 0x1434bc2a in /usr/local/bin/clickhouse\r\n16. ./build_clang/./src/Interpreters/ActionsVisitor.cpp:0: DB::ScopeStack::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) @ 0x1478115c in /usr/local/bin/clickhouse\r\n17. ./build_clang/./contrib/libcxx/include/string:1445: DB::ActionsMatcher::Data::addFunction(std::__1::shared_ptr<DB::IFunctionOverloadResolver> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >) @ 0x1478c72f in /usr/local/bin/clickhouse\r\n18. ./build_clang/./contrib/libcxx/include/string:1445: DB::ActionsMatcher::visit(DB::ASTFunction const&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x14785ec9 in /usr/local/bin/clickhouse\r\n19. ./build_clang/./src/Interpreters/ActionsVisitor.cpp:0: DB::ActionsMatcher::visit(DB::ASTExpressionList&, std::__1::shared_ptr<DB::IAST> const&, DB::ActionsMatcher::Data&) @ 0x14788b4b in /usr/local/bin/clickhouse\r\n20. ./build_clang/./src/Interpreters/InDepthNodeVisitor.h:46: DB::InDepthNodeVisitor<DB::ActionsMatcher, true, false, std::__1::shared_ptr<DB::IAST> const>::visit(std::__1::shared_ptr<DB::IAST> const&) @ 0x1476bf5a in /usr/local/bin/clickhouse\r\n21. ./build_clang/./src/Interpreters/ActionsVisitor.h:187: DB::ExpressionAnalyzer::getRootActions(std::__1::shared_ptr<DB::IAST> const&, bool, std::__1::shared_ptr<DB::ActionsDAG>&, bool) @ 0x1475b9de in /usr/local/bin/clickhouse\r\n22. ./build_clang/./contrib/libcxx/include/__memory/shared_ptr.h:702: DB::SelectQueryExpressionAnalyzer::appendSelect(DB::ExpressionActionsChain&, bool) @ 0x14764bb4 in /usr/local/bin/clickhouse\r\n23. ./build_clang/./src/Interpreters/ExpressionAnalyzer.cpp:0: DB::ExpressionAnalysisResult::ExpressionAnalysisResult(DB::SelectQueryExpressionAnalyzer&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, bool, bool, bool, std::__1::shared_ptr<DB::FilterDAGInfo> const&, std::__1::shared_ptr<DB::FilterDAGInfo> const&, DB::Block const&) @ 0x14768d0e in /usr/local/bin/clickhouse\r\n24. ./build_clang/./src/Interpreters/InterpreterSelectQuery.cpp:804: DB::InterpreterSelectQuery::getSampleBlockImpl() @ 0x14bb1ae6 in /usr/local/bin/clickhouse\r\n25. ./build_clang/./src/Interpreters/InterpreterSelectQuery.cpp:637: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::PreparedSets>)::$_1::operator()(bool) const @ 0x14babf03 in /usr/local/bin/clickhouse\r\n26. ./build_clang/./contrib/libcxx/include/__memory/shared_ptr.h:816: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context> const&, std::__1::optional<DB::Pipe>, std::__1::shared_ptr<DB::IStorage> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::__1::shared_ptr<DB::PreparedSets>) @ 0x14ba7efb in /usr/local/bin/clickhouse\r\n27. ./build_clang/./contrib/libcxx/include/optional:237: DB::InterpreterSelectQuery::InterpreterSelectQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context> const&, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x14ba5eb1 in /usr/local/bin/clickhouse\r\n28. ./build_clang/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:247: DB::InterpreterSelectWithUnionQuery::buildCurrentChildInterpreter(std::__1::shared_ptr<DB::IAST> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x14bea15a in /usr/local/bin/clickhouse\r\n29. ./build_clang/./src/Interpreters/InterpreterSelectWithUnionQuery.cpp:146: DB::InterpreterSelectWithUnionQuery::InterpreterSelectWithUnionQuery(std::__1::shared_ptr<DB::IAST> const&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x14be8741 in /usr/local/bin/clickhouse\r\n30. ./build_clang/./contrib/libcxx/include/vector:399: std::__1::__unique_if<DB::InterpreterSelectWithUnionQuery>::__unique_single std::__1::make_unique<DB::InterpreterSelectWithUnionQuery, std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>&, DB::SelectQueryOptions const&>(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>&, DB::SelectQueryOptions const&) @ 0x14b76153 in /usr/local/bin/clickhouse\r\n31. ./build_clang/./src/Interpreters/InterpreterFactory.cpp:0: DB::InterpreterFactory::get(std::__1::shared_ptr<DB::IAST>&, std::__1::shared_ptr<DB::Context>, DB::SelectQueryOptions const&) @ 0x14b75556 in /usr/local/bin/clickhouse\n",
  "hints_text": "Looks similar:\r\n```\r\n<Fatal> : Logical error: 'Bad cast from type DB::DataTypeNumber<signed char> to DB::DataTypeNullable'.\r\n```\r\n\r\n``` sql\r\nSELECT\r\n    m[toInt8(number - 2147483647)]\r\nFROM \r\n    table_map_with_key_integer__fuzz_5 \r\n    ARRAY JOIN [-2, 0., NULL, 100, 255, 1] AS number\r\n```\r\nhttps://s3.amazonaws.com/clickhouse-test-reports/42598/8b6f84cbc6d076e3535c43d22a7498aa3d889c18/fuzzer_astfuzzermsan//report.html",
  "created_at": "2022-10-24T17:35:18Z",
  "modified_files": [
    "src/Functions/array/arrayElement.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02473_map_element_nullable.reference",
    "b/tests/queries/0_stateless/02473_map_element_nullable.sql"
  ]
}