{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 64084,
  "instance_id": "ClickHouse__ClickHouse-64084",
  "issue_numbers": [
    "61993"
  ],
  "base_commit": "e9e4e5b2d2ddda811495515ee44daed1a7285d9f",
  "patch": "diff --git a/src/Columns/ColumnNullable.cpp b/src/Columns/ColumnNullable.cpp\nindex fa5fdfb8c21a..30e62548ad65 100644\n--- a/src/Columns/ColumnNullable.cpp\n+++ b/src/Columns/ColumnNullable.cpp\n@@ -22,6 +22,7 @@ namespace ErrorCodes\n     extern const int LOGICAL_ERROR;\n     extern const int ILLEGAL_COLUMN;\n     extern const int NOT_IMPLEMENTED;\n+    extern const int BAD_ARGUMENTS;\n }\n \n \n@@ -116,6 +117,38 @@ void ColumnNullable::get(size_t n, Field & res) const\n         getNestedColumn().get(n, res);\n }\n \n+Float64 ColumnNullable::getFloat64(size_t n) const\n+{\n+    if (isNullAt(n))\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"The value of {} at {} is NULL while calling method getFloat64\", getName(), n);\n+    else\n+        return getNestedColumn().getFloat64(n);\n+}\n+\n+Float32 ColumnNullable::getFloat32(size_t n) const\n+{\n+    if (isNullAt(n))\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"The value of {} at {} is NULL while calling method getFloat32\", getName(), n);\n+    else\n+        return getNestedColumn().getFloat32(n);\n+}\n+\n+UInt64 ColumnNullable::getUInt(size_t n) const\n+{\n+    if (isNullAt(n))\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"The value of {} at {} is NULL while calling method getUInt\", getName(), n);\n+    else\n+        return getNestedColumn().getUInt(n);\n+}\n+\n+Int64 ColumnNullable::getInt(size_t n) const\n+{\n+    if (isNullAt(n))\n+        throw Exception(ErrorCodes::BAD_ARGUMENTS, \"The value of {} at {} is NULL while calling method getInt\", getName(), n);\n+    else\n+        return getNestedColumn().getInt(n);\n+}\n+\n void ColumnNullable::insertData(const char * pos, size_t length)\n {\n     if (pos == nullptr)\ndiff --git a/src/Columns/ColumnNullable.h b/src/Columns/ColumnNullable.h\nindex ef4bf4fa41b7..c7ebb6ed7b66 100644\n--- a/src/Columns/ColumnNullable.h\n+++ b/src/Columns/ColumnNullable.h\n@@ -57,6 +57,10 @@ class ColumnNullable final : public COWHelper<IColumnHelper<ColumnNullable>, Col\n     void get(size_t n, Field & res) const override;\n     bool getBool(size_t n) const override { return isNullAt(n) ? false : nested_column->getBool(n); }\n     UInt64 get64(size_t n) const override { return nested_column->get64(n); }\n+    Float64 getFloat64(size_t n) const override;\n+    Float32 getFloat32(size_t n) const override;\n+    UInt64 getUInt(size_t n) const override;\n+    Int64 getInt(size_t n) const override;\n     bool isDefaultAt(size_t n) const override { return isNullAt(n); }\n     StringRef getDataAt(size_t) const override;\n     /// Will insert null value if pos=nullptr\ndiff --git a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp\nindex 086b5bfada20..b1dbe68579fa 100644\n--- a/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp\n+++ b/src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp\n@@ -7,6 +7,8 @@\n #include <Common/UTF8Helpers.h>\n #include <Common/PODArray.h>\n #include <Common/formatReadable.h>\n+#include <DataTypes/DataTypeLowCardinality.h>\n+#include <DataTypes/DataTypeNullable.h>\n \n \n namespace DB\n@@ -16,7 +18,14 @@ PrettyBlockOutputFormat::PrettyBlockOutputFormat(\n     WriteBuffer & out_, const Block & header_, const FormatSettings & format_settings_, bool mono_block_, bool color_)\n      : IOutputFormat(header_, out_), format_settings(format_settings_), serializations(header_.getSerializations()), color(color_), mono_block(mono_block_)\n {\n-    readable_number_tip = header_.getColumns().size() == 1 && WhichDataType(header_.getDataTypes()[0]->getTypeId()).isNumber();\n+    /// Decide whether we should print a tip near the single number value in the result.\n+    if (header_.getColumns().size() == 1)\n+    {\n+        /// Check if it is a numeric type, possible wrapped by Nullable or LowCardinality.\n+        DataTypePtr type = removeNullable(recursiveRemoveLowCardinality(header_.getDataTypes().at(0)));\n+        if (isNumber(type))\n+            readable_number_tip = true;\n+    }\n }\n \n \n@@ -497,6 +506,9 @@ void PrettyBlockOutputFormat::writeReadableNumberTip(const Chunk & chunk)\n     if (!is_single_number)\n         return;\n \n+    if (columns[0]->isNullAt(0))\n+        return;\n+\n     auto value = columns[0]->getFloat64(0);\n     auto threshold = format_settings.pretty.output_format_pretty_single_large_number_tip_threshold;\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03156_nullable_number_tips.reference b/tests/queries/0_stateless/03156_nullable_number_tips.reference\nnew file mode 100644\nindex 000000000000..cb4e12684d89\n--- /dev/null\n+++ b/tests/queries/0_stateless/03156_nullable_number_tips.reference\n@@ -0,0 +1,43 @@\n+   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u2510\n+1. \u2502 123456789 \u2502 -- 123.46 million\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u2510\n+1. \u2502 123456789 \u2502 -- 123.46 million\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u2510\n+1. \u2502 123456789 \u2502 -- 123.46 million\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u2510\n+1. \u2502 123456789 \u2502 -- 123.46 million\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500x\u2500\u2510\n+1. \u2502 123456789 \u2502 -- 123.46 million\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+Nullable(UInt64), Nullable(size = 10, UInt64(size = 10), UInt8(size = 10))\n+   \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+   \u2503          x \u2503\n+   \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+1. \u2502 1111111101 \u2502 -- 1.11 billion\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+   \u2503         x \u2503\n+   \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+1. \u2502 123456789 \u2502 -- 123.46 million\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+       x\n+\n+1.  \u1d3a\u1d41\u1d38\u1d38 \n+UInt64, Sparse(size = 10, UInt64(size = 6), UInt64(size = 5))\n+   \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n+   \u2503          x \u2503\n+   \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n+1. \u2502 1111111101 \u2502 -- 1.11 billion\n+   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   \u250f\u2501\u2501\u2501\u2513\n+   \u2503 x \u2503\n+   \u2521\u2501\u2501\u2501\u2529\n+1. \u2502 0 \u2502\n+   \u2514\u2500\u2500\u2500\u2518\n+    x\n+\n+1.  0 \ndiff --git a/tests/queries/0_stateless/03156_nullable_number_tips.sql b/tests/queries/0_stateless/03156_nullable_number_tips.sql\nnew file mode 100644\nindex 000000000000..e6f2fa36d86b\n--- /dev/null\n+++ b/tests/queries/0_stateless/03156_nullable_number_tips.sql\n@@ -0,0 +1,24 @@\n+SELECT 123456789 AS x FORMAT PrettyCompact;\n+SELECT toNullable(123456789) AS x FORMAT PrettyCompact;\n+SELECT toLowCardinality(toNullable(123456789)) AS x FORMAT PrettyCompact;\n+SELECT toNullable(toLowCardinality(123456789)) AS x FORMAT PrettyCompact;\n+SELECT toLowCardinality(123456789) AS x FORMAT PrettyCompact;\n+\n+CREATE TEMPORARY TABLE test (x Nullable(UInt64), PRIMARY KEY ()) ENGINE = MergeTree SETTINGS ratio_of_defaults_for_sparse_serialization = 0;\n+INSERT INTO test SELECT number % 2 ? number * 123456789 : NULL FROM numbers(10);\n+\n+SELECT DISTINCT dumpColumnStructure(*) FROM test;\n+\n+SELECT * FROM test ORDER BY ALL DESC NULLS LAST LIMIT 1 FORMAT PRETTY;\n+SELECT * FROM test ORDER BY ALL ASC NULLS LAST LIMIT 1 FORMAT PRETTY;\n+SELECT * FROM test ORDER BY ALL ASC NULLS FIRST LIMIT 1 FORMAT PrettySpace;\n+\n+DROP TEMPORARY TABLE test;\n+CREATE TEMPORARY TABLE test (x UInt64, PRIMARY KEY ()) ENGINE = MergeTree SETTINGS ratio_of_defaults_for_sparse_serialization = 0;\n+INSERT INTO test SELECT number % 2 ? number * 123456789 : NULL FROM numbers(10);\n+\n+SELECT DISTINCT dumpColumnStructure(*) FROM test;\n+\n+SELECT * FROM test ORDER BY ALL DESC NULLS LAST LIMIT 1 FORMAT PRETTY;\n+SELECT * FROM test ORDER BY ALL ASC NULLS LAST LIMIT 1 FORMAT PRETTY;\n+SELECT * FROM test ORDER BY ALL ASC NULLS FIRST LIMIT 1 FORMAT PrettySpace;\n",
  "problem_statement": "Highlighting numbers does not work for Nullable\n\n",
  "hints_text": "Hi, can you please provide more description?\n@pheepa If you execute\r\n\r\n```\r\nselect toUInt64(-1) format PrettyCompact;\r\n```\r\nyou see the output with Highlighted thousands\r\n\r\nBut not in case of Nullable type\r\n\r\n```\r\nselect toNullable(toUInt64(-1)) format PrettyCompact;\r\n```\r\n<img width=\"625\" alt=\"Screenshot 2024-04-03 at 5 09 27\u202fPM\" src=\"https://github.com/ClickHouse/ClickHouse/assets/19737682/e6f9ff39-be15-41eb-991b-91a999e22ebf\">\r\n\r\n\n@alexey-milovidov Hi, I want to try it.\n@skyoct Try it!",
  "created_at": "2024-05-18T04:44:57Z",
  "modified_files": [
    "src/Columns/ColumnNullable.cpp",
    "src/Columns/ColumnNullable.h",
    "src/Processors/Formats/Impl/PrettyBlockOutputFormat.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03156_nullable_number_tips.reference",
    "b/tests/queries/0_stateless/03156_nullable_number_tips.sql"
  ]
}