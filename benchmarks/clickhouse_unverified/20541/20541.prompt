You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Map Type: can't insert UInt256 value
Can't insert `115792089237316195423570985008687907853269984665640564039457584007913129639935` value
into `Map(Int8, UInt256)` column.
 
```
 Feb 21,2021 7:42:41         ⟥  Example UInt256
                                  Check what values we can insert into map type column with value integer.
                                  Requirements
                                    RQ.SRS-018.ClickHouse.Map.DataType.Value.Integer
                                      version 1.0
                                  Arguments
                                    type
                                      Map(Int8, UInt256)
                                    data
                                      ('2020-01-01', map(1,0,2,115792089237316195423570985008687907853269984665640564039457584007913129639935))
                                    output
                                      {"d":"2020-01-01","m":{1:"0",2:"115792089237316195423570985008687907853269984665640564039457584007913129639935"}}
 Feb 21,2021 7:42:41           ⟥  Given table definition with Map(Int8, UInt256), flags:MANDATORY
               400us           ⟥⟤ OK table definition with Map(Int8, UInt256), /map type/tests/table map with value integer/UInt256/table definition with Map(Int8, UInt256)
 Feb 21,2021 7:42:41           ⟥  And I create a table, flags:MANDATORY
                                    CREATE TABLE {name} (d DATE, m Map(Int8, UInt256)) ENGINE = MergeTree() PARTITION BY m ORDER BY d
 Feb 21,2021 7:42:41             ⟥  And I have a table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 table, flags:MANDATORY
 Feb 21,2021 7:42:41               ⟥  By executing command
                                        echo -e "CREATE TABLE table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 (d DATE, m Map(Int8, UInt256)) ENGINE = MergeTree() PARTITION BY m ORDER BY d" | clickhouse client -n --allow_experimental_map_type "1"
                 2ms                    [clickhouse1] bash# echo -e "CREATE TABLE table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 (d DATE, m Map(Int8, UInt256)) ENGINE = MergeTree() PARTITION BY m ORDER BY d" | clickhouse client -n --allow_experimental_map_type "1"
                37ms                    [clickhouse1] bash# echo $?
                37ms                    [clickhouse1] 0
                37ms                    [clickhouse1] bash#
                37ms               ⟥⟤ OK executing command, /map type/tests/table map with value integer/UInt256/I create a table/I have a table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 table/executing command
 Feb 21,2021 7:42:41               ⟥  Then check if output has exception
               482us               ⟥⟤ OK check if output has exception, /map type/tests/table map with value integer/UInt256/I create a table/I have a table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 table/check if output has exception
                38ms             ⟥⟤ OK I have a table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 table, /map type/tests/table map with value integer/UInt256/I create a table/I have a table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 table
                39ms           ⟥⟤ OK I create a table, /map type/tests/table map with value integer/UInt256/I create a table
 Feb 21,2021 7:42:41           ⟥  When I insert data
                                    ('2020-01-01', map(1,0,2,115792089237316195423570985008687907853269984665640564039457584007913129639935))
 Feb 21,2021 7:42:41             ⟥  By executing command
                                      echo -e "INSERT INTO table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(1,0,2,115792089237316195423570985008687907853269984665640564039457584007913129639935))" | clickhouse client -n --allow_experimental_map_type "1"
                 2ms                  [clickhouse1] bash# echo -e "INSERT INTO table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(1,0,2,115792089237316195423570985008687907853269984665640564039457584007913129639935))" | clickhouse client -n --allow_experimental_map_type "1"
                59ms                  [clickhouse1] Error on processing query 'INSERT INTO table_map_with_value_integer_49ab6e1c_7442_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(1,0,2,115792089237316195423570985008687907853269984665640564039457584007913129639935))':
                68ms                  [clickhouse1] Code: 53, e.displayText() = DB::Exception: Type mismatch in IN or VALUES section. Expected: Map(Int8,UInt256). Got: Map: data for INSERT was parsed from query, Stack trace (when copying this message, always include the lines below):
                68ms                  [clickhouse1] 
                68ms                  [clickhouse1] 0. ? @ 0xef62fae in /usr/bin/clickhouse
                68ms                  [clickhouse1] 1. DB::convertFieldToType(DB::Field const&, DB::IDataType const&, DB::IDataType const*) @ 0xef61d24 in /usr/bin/clickhouse
                68ms                  [clickhouse1] 2. DB::ValuesBlockInputFormat::parseExpression(DB::IColumn&, unsigned long) @ 0xf7f274b in /usr/bin/clickhouse
                68ms                  [clickhouse1] 3. DB::ValuesBlockInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, unsigned long) @ 0xf7f0398 in /usr/bin/clickhouse
                68ms                  [clickhouse1] 4. DB::ValuesBlockInputFormat::generate() @ 0xf7ef73c in /usr/bin/clickhouse
                68ms                  [clickhouse1] 5. DB::ISource::tryGenerate() @ 0xf6df1b5 in /usr/bin/clickhouse
                69ms                  [clickhouse1] 6. DB::ISource::work() @ 0xf6deeca in /usr/bin/clickhouse
                69ms                  [clickhouse1] 7. DB::InputStreamFromInputFormat::readImpl() @ 0xce6517f in /usr/bin/clickhouse
                69ms                  [clickhouse1] 8. DB::IBlockInputStream::read() @ 0xe710385 in /usr/bin/clickhouse
                69ms                  [clickhouse1] 9. DB::AsynchronousBlockInputStream::calculate() @ 0xe70c701 in /usr/bin/clickhouse
                69ms                  [clickhouse1] 10. ? @ 0xe70cf77 in /usr/bin/clickhouse
                69ms                  [clickhouse1] 11. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x8528a48 in /usr/bin/clickhouse
                69ms                  [clickhouse1] 12. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() @ 0x852a9ff in /usr/bin/clickhouse
                69ms                  [clickhouse1] 13. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x852601f in /usr/bin/clickhouse
                69ms                  [clickhouse1] 14. ? @ 0x8529ab3 in /usr/bin/clickhouse
                69ms                  [clickhouse1] 15. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so
                69ms                  [clickhouse1] 16. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so
                69ms                  [clickhouse1]  (version 21.3.1.5944 (official build))
                72ms                  [clickhouse1] bash# echo $?
                72ms                  [clickhouse1] 53
                73ms                  [clickhouse1] bash#
```

Similar when trying to insert the same value as the key into `Map(UInt256, UInt8)` column

```
Feb 21,2021 7:46:05         ⟥  Example UInt256
                                  Check what values we can insert into map type column with key integer.
                                  Requirements
                                    RQ.SRS-018.ClickHouse.Map.DataType.Key.Integer
                                      version 1.0
                                  Arguments
                                    type
                                      Map(UInt256, Int8)
                                    data
                                      ('2020-01-01', map(0,1,115792089237316195423570985008687907853269984665640564039457584007913129639935,1))
                                    output
                                      {"d":"2020-01-01","m":{"0":1,"115792089237316195423570985008687907853269984665640564039457584007913129639935":1}}
 Feb 21,2021 7:46:05           ⟥  Given table definition with Map(UInt256, Int8), flags:MANDATORY
               414us           ⟥⟤ OK table definition with Map(UInt256, Int8), /map type/tests/table map with key integer/UInt256/table definition with Map(UInt256, Int8)
 Feb 21,2021 7:46:05           ⟥  And I create a table, flags:MANDATORY
                                    CREATE TABLE {name} (d DATE, m Map(UInt256, Int8)) ENGINE = MergeTree() PARTITION BY m ORDER BY d
 Feb 21,2021 7:46:05             ⟥  And I have a table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 table, flags:MANDATORY
 Feb 21,2021 7:46:05               ⟥  By executing command
                                        echo -e "CREATE TABLE table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 (d DATE, m Map(UInt256, Int8)) ENGINE = MergeTree() PARTITION BY m ORDER BY d" | clickhouse client -n --allow_experimental_map_type "1"
                 3ms                    [clickhouse1] bash# echo -e "CREATE TABLE table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 (d DATE, m Map(UInt256, Int8)) ENGINE = MergeTree() PARTITION BY m ORDER BY d" | clickhouse client -n --allow_experimental_map_type "1"
                40ms                    [clickhouse1] bash# echo $?
                41ms                    [clickhouse1] 0
                41ms                    [clickhouse1] bash#
                41ms               ⟥⟤ OK executing command, /map type/tests/table map with key integer/UInt256/I create a table/I have a table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 table/executing command
 Feb 21,2021 7:46:05               ⟥  Then check if output has exception
               591us               ⟥⟤ OK check if output has exception, /map type/tests/table map with key integer/UInt256/I create a table/I have a table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 table/check if output has exception
                43ms             ⟥⟤ OK I have a table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 table, /map type/tests/table map with key integer/UInt256/I create a table/I have a table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 table
                43ms           ⟥⟤ OK I create a table, /map type/tests/table map with key integer/UInt256/I create a table
 Feb 21,2021 7:46:05           ⟥  When I insert data
                                    ('2020-01-01', map(0,1,115792089237316195423570985008687907853269984665640564039457584007913129639935,1))
 Feb 21,2021 7:46:05             ⟥  By executing command
                                      echo -e "INSERT INTO table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(0,1,115792089237316195423570985008687907853269984665640564039457584007913129639935,1))" | clickhouse client -n --allow_experimental_map_type "1"
                 2ms                  [clickhouse1] bash# echo -e "INSERT INTO table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(0,1,115792089237316195423570985008687907853269984665640564039457584007913129639935,1))" | clickhouse client -n --allow_experimental_map_type "1"
                52ms                  [clickhouse1] Error on processing query 'INSERT INTO table_map_with_key_integer_c318542c_7442_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(0,1,115792089237316195423570985008687907853269984665640564039457584007913129639935,1))':
                52ms                  [clickhouse1] Code: 53, e.displayText() = DB::Exception: Type mismatch in IN or VALUES section. Expected: Map(UInt256,Int8). Got: Map: data for INSERT was parsed from query, Stack trace (when copying this message, always include the lines below):
                52ms                  [clickhouse1] 
                52ms                  [clickhouse1] 0. ? @ 0xef62fae in /usr/bin/clickhouse
                52ms                  [clickhouse1] 1. DB::convertFieldToType(DB::Field const&, DB::IDataType const&, DB::IDataType const*) @ 0xef61d24 in /usr/bin/clickhouse
                52ms                  [clickhouse1] 2. DB::ValuesBlockInputFormat::parseExpression(DB::IColumn&, unsigned long) @ 0xf7f274b in /usr/bin/clickhouse
                52ms                  [clickhouse1] 3. DB::ValuesBlockInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, unsigned long) @ 0xf7f0398 in /usr/bin/clickhouse
                52ms                  [clickhouse1] 4. DB::ValuesBlockInputFormat::generate() @ 0xf7ef73c in /usr/bin/clickhouse
                52ms                  [clickhouse1] 5. DB::ISource::tryGenerate() @ 0xf6df1b5 in /usr/bin/clickhouse
                52ms                  [clickhouse1] 6. DB::ISource::work() @ 0xf6deeca in /usr/bin/clickhouse
                53ms                  [clickhouse1] 7. DB::InputStreamFromInputFormat::readImpl() @ 0xce6517f in /usr/bin/clickhouse
                53ms                  [clickhouse1] 8. DB::IBlockInputStream::read() @ 0xe710385 in /usr/bin/clickhouse
                53ms                  [clickhouse1] 9. DB::AsynchronousBlockInputStream::calculate() @ 0xe70c701 in /usr/bin/clickhouse
                53ms                  [clickhouse1] 10. ? @ 0xe70cf77 in /usr/bin/clickhouse
                53ms                  [clickhouse1] 11. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x8528a48 in /usr/bin/clickhouse
                53ms                  [clickhouse1] 12. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() @ 0x852a9ff in /usr/bin/clickhouse
                53ms                  [clickhouse1] 13. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x852601f in /usr/bin/clickhouse
                53ms                  [clickhouse1] 14. ? @ 0x8529ab3 in /usr/bin/clickhouse
                53ms                  [clickhouse1] 15. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so
                53ms                  [clickhouse1] 16. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so
                53ms                  [clickhouse1]  (version 21.3.1.5944 (official build))
                57ms                  [clickhouse1] bash# echo $?
                57ms                  [clickhouse1] 53
                58ms                  [clickhouse1] bash#
```

**Expected behavior**
It should work.
Map Type: can't insert negative int values 
**Describe the bug**
Can't insert negative values into `Map(Int8, Int8)` column either as keys or values.
The same when trying to insert negative values into `Map(Int8, Int16)`, `Map(Int8, Int32)` or `Map(Int8, Int64)`.
Similar problem when trying to insert negative keys into `Map(Int16, Int8)`, `Map(Int32, Int8)` or `Map(Int64, Int8)`.
 
```
Feb 21,2021 7:49:40         ⟥  Example Int8
                                  Check what values we can insert into map type column with value integer.
                                  Requirements
                                    RQ.SRS-018.ClickHouse.Map.DataType.Value.Integer
                                      version 1.0
                                  Arguments
                                    type
                                      Map(Int8, Int8)
                                    data
                                      ('2020-01-01', map(1,127,2,0,3,-128))
                                    output
                                      {"d":"2020-01-01","m":{1:127,2:0,3:-128}}
 Feb 21,2021 7:49:40           ⟥  Given table definition with Map(Int8, Int8), flags:MANDATORY
               302us           ⟥⟤ OK table definition with Map(Int8, Int8), /map type/tests/table map with value integer/Int8/table definition with Map(Int8, Int8)
 Feb 21,2021 7:49:40           ⟥  And I create a table, flags:MANDATORY
                                    CREATE TABLE {name} (d DATE, m Map(Int8, Int8)) ENGINE = MergeTree() PARTITION BY m ORDER BY d
 Feb 21,2021 7:49:40             ⟥  And I have a table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 table, flags:MANDATORY
 Feb 21,2021 7:49:40               ⟥  By executing command
                                        echo -e "CREATE TABLE table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 (d DATE, m Map(Int8, Int8)) ENGINE = MergeTree() PARTITION BY m ORDER BY d" | clickhouse client -n --allow_experimental_map_type "1"
                 3ms                    [clickhouse1] bash# echo -e "CREATE TABLE table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 (d DATE, m Map(Int8, Int8)) ENGINE = MergeTree() PARTITION BY m ORDER BY d" | clickhouse client -n --allow_experimental_map_type "1"
                41ms                    [clickhouse1] bash# echo $?
                41ms                    [clickhouse1] 0
                42ms                    [clickhouse1] bash#
                42ms               ⟥⟤ OK executing command, /map type/tests/table map with value integer/Int8/I create a table/I have a table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 table/executing command
 Feb 21,2021 7:49:40               ⟥  Then check if output has exception
               829us               ⟥⟤ OK check if output has exception, /map type/tests/table map with value integer/Int8/I create a table/I have a table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 table/check if output has exception
                44ms             ⟥⟤ OK I have a table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 table, /map type/tests/table map with value integer/Int8/I create a table/I have a table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 table
                44ms           ⟥⟤ OK I create a table, /map type/tests/table map with value integer/Int8/I create a table
 Feb 21,2021 7:49:40           ⟥  When I insert data
                                    ('2020-01-01', map(1,127,2,0,3,-128))
 Feb 21,2021 7:49:40             ⟥  By executing command
                                      echo -e "INSERT INTO table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(1,127,2,0,3,-128))" | clickhouse client -n --allow_experimental_map_type "1"
                 5ms                  [clickhouse1] bash# echo -e "INSERT INTO table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(1,127,2,0,3,-128))" | clickhouse client -n --allow_experimental_map_type "1"
                50ms                  [clickhouse1] Error on processing query 'INSERT INTO table_map_with_value_integer_43276a40_7443_11eb_869f_096b24b409b0 VALUES ('2020-01-01', map(1,127,2,0,3,-128))':
                51ms                  [clickhouse1] Code: 53, e.displayText() = DB::Exception: Type mismatch in IN or VALUES section. Expected: Map(Int8,Int8). Got: Map: data for INSERT was parsed from query, Stack trace (when copying this message, always include the lines below):
                51ms                  [clickhouse1] 
                51ms                  [clickhouse1] 0. ? @ 0xef62fae in /usr/bin/clickhouse
                51ms                  [clickhouse1] 1. DB::convertFieldToType(DB::Field const&, DB::IDataType const&, DB::IDataType const*) @ 0xef61d24 in /usr/bin/clickhouse
                51ms                  [clickhouse1] 2. DB::ValuesBlockInputFormat::parseExpression(DB::IColumn&, unsigned long) @ 0xf7f274b in /usr/bin/clickhouse
                51ms                  [clickhouse1] 3. DB::ValuesBlockInputFormat::readRow(std::__1::vector<COW<DB::IColumn>::mutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::mutable_ptr<DB::IColumn> > >&, unsigned long) @ 0xf7f0398 in /usr/bin/clickhouse
                51ms                  [clickhouse1] 4. DB::ValuesBlockInputFormat::generate() @ 0xf7ef73c in /usr/bin/clickhouse
                51ms                  [clickhouse1] 5. DB::ISource::tryGenerate() @ 0xf6df1b5 in /usr/bin/clickhouse
                51ms                  [clickhouse1] 6. DB::ISource::work() @ 0xf6deeca in /usr/bin/clickhouse
                51ms                  [clickhouse1] 7. DB::InputStreamFromInputFormat::readImpl() @ 0xce6517f in /usr/bin/clickhouse
                51ms                  [clickhouse1] 8. DB::IBlockInputStream::read() @ 0xe710385 in /usr/bin/clickhouse
                51ms                  [clickhouse1] 9. DB::AsynchronousBlockInputStream::calculate() @ 0xe70c701 in /usr/bin/clickhouse
                51ms                  [clickhouse1] 10. ? @ 0xe70cf77 in /usr/bin/clickhouse
                51ms                  [clickhouse1] 11. ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::__1::__list_iterator<ThreadFromGlobalPool, void*>) @ 0x8528a48 in /usr/bin/clickhouse
                52ms                  [clickhouse1] 12. ThreadFromGlobalPool::ThreadFromGlobalPool<void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()>(void&&, void ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::__1::function<void ()>, int, std::__1::optional<unsigned long>)::'lambda1'()&&...)::'lambda'()::operator()() @ 0x852a9ff in /usr/bin/clickhouse
                52ms                  [clickhouse1] 13. ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) @ 0x852601f in /usr/bin/clickhouse
                52ms                  [clickhouse1] 14. ? @ 0x8529ab3 in /usr/bin/clickhouse
                52ms                  [clickhouse1] 15. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so
                52ms                  [clickhouse1] 16. clone @ 0x122293 in /usr/lib/x86_64-linux-gnu/libc-2.31.so
                52ms                  [clickhouse1]  (version 21.3.1.5944 (official build))
                56ms                  [clickhouse1] bash# echo $?
                56ms                  [clickhouse1] 53
                57ms                  [clickhouse1] bash#
```

**Expected behavior**
It should work.

Error while trying to insert a tuple containing NULL into a tuple column of non-nullable types
```
$ ~/arc/build/clickhouse/programs/clickhouse client
ClickHouse client version 21.2.1.1-arcadia.
Connecting to localhost:9000 as user default.
Connected to ClickHouse server version 21.2.1 revision 54447.

max42-dev.sas.yp-c.yandex.net :) create table t(a Tuple(UInt8, UInt8)) engine = Log()

CREATE TABLE t
(
    `a` Tuple(UInt8, UInt8)
)
ENGINE = Log

Query id: b49dbb5d-d2a9-4c99-b90e-00c60edf2103

Ok.

0 rows in set. Elapsed: 0.005 sec. 

max42-dev.sas.yp-c.yandex.net :) insert into t values ((NULL, 42))

INSERT INTO t VALUES

Query id: 318d6f3e-f3bc-467c-85ff-62da908230dd

Logical error: 'Unexpected literal type inside Array: Nothing. It's a bug'.
Aborted (core dumped)
```

This is CH similar to one from Arcadia r7788360 (~fresh master version from GH).

(you don't have to strictly follow this form)
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
