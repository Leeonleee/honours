diff --git a/src/Interpreters/JoinToSubqueryTransformVisitor.cpp b/src/Interpreters/JoinToSubqueryTransformVisitor.cpp
index a34276b55193..5f38f410e047 100644
--- a/src/Interpreters/JoinToSubqueryTransformVisitor.cpp
+++ b/src/Interpreters/JoinToSubqueryTransformVisitor.cpp
@@ -257,7 +257,7 @@ struct ColumnAliasesMatcher
             if (!last_table)
             {
                 IdentifierSemantic::coverName(node, alias);
-                node.setAlias("");
+                node.setAlias({});
             }
         }
         else if (node.compound())
diff --git a/src/Interpreters/PredicateRewriteVisitor.cpp b/src/Interpreters/PredicateRewriteVisitor.cpp
index 7fc45044a880..2a4bd4c1fd29 100644
--- a/src/Interpreters/PredicateRewriteVisitor.cpp
+++ b/src/Interpreters/PredicateRewriteVisitor.cpp
@@ -76,7 +76,7 @@ static void cleanAliasAndCollectIdentifiers(ASTPtr & predicate, std::vector<ASTI
     }
 
     if (const auto alias = predicate->tryGetAlias(); !alias.empty())
-        predicate->setAlias("");
+        predicate->setAlias({});
 
     if (ASTIdentifier * identifier = predicate->as<ASTIdentifier>())
         identifiers.emplace_back(identifier);
diff --git a/src/Storages/transformQueryForExternalDatabase.cpp b/src/Storages/transformQueryForExternalDatabase.cpp
index 11b98b782e03..0d34f0b3068f 100644
--- a/src/Storages/transformQueryForExternalDatabase.cpp
+++ b/src/Storages/transformQueryForExternalDatabase.cpp
@@ -71,6 +71,24 @@ class ReplacingConstantExpressionsMatcherNumOrStr
     }
 };
 
+class DropAliasesMatcher
+{
+public:
+    struct Data {};
+    Data data;
+
+    static bool needChildVisit(ASTPtr &, const ASTPtr &)
+    {
+        return true;
+    }
+
+    static void visit(ASTPtr & node, Data)
+    {
+        if (!node->tryGetAlias().empty())
+            node->setAlias({});
+    }
+};
+
 void replaceConstantExpressions(ASTPtr & node, const Context & context, const NamesAndTypesList & all_columns)
 {
     auto syntax_result = SyntaxAnalyzer(context).analyze(node, all_columns);
@@ -80,6 +98,13 @@ void replaceConstantExpressions(ASTPtr & node, const Context & context, const Na
     visitor.visit(node);
 }
 
+void dropAliases(ASTPtr & node)
+{
+    DropAliasesMatcher::Data data;
+    InDepthNodeVisitor<DropAliasesMatcher, true> visitor(data);
+    visitor.visit(node);
+}
+
 
 bool isCompatible(const IAST & node)
 {
@@ -192,6 +217,9 @@ String transformQueryForExternalDatabase(
         }
     }
 
+    ASTPtr select_ptr = select;
+    dropAliases(select_ptr);
+
     std::stringstream out;
     IAST::FormatSettings settings(out, true);
     settings.identifier_quoting_style = identifier_quoting_style;
