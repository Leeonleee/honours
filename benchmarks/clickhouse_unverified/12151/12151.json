{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 12151,
  "instance_id": "ClickHouse__ClickHouse-12151",
  "issue_numbers": [
    "12032"
  ],
  "base_commit": "ea0fb005fb1766b526ffdb29275b2f6e8cbbb819",
  "patch": "diff --git a/src/Interpreters/JoinToSubqueryTransformVisitor.cpp b/src/Interpreters/JoinToSubqueryTransformVisitor.cpp\nindex a34276b55193..5f38f410e047 100644\n--- a/src/Interpreters/JoinToSubqueryTransformVisitor.cpp\n+++ b/src/Interpreters/JoinToSubqueryTransformVisitor.cpp\n@@ -257,7 +257,7 @@ struct ColumnAliasesMatcher\n             if (!last_table)\n             {\n                 IdentifierSemantic::coverName(node, alias);\n-                node.setAlias(\"\");\n+                node.setAlias({});\n             }\n         }\n         else if (node.compound())\ndiff --git a/src/Interpreters/PredicateRewriteVisitor.cpp b/src/Interpreters/PredicateRewriteVisitor.cpp\nindex 7fc45044a880..2a4bd4c1fd29 100644\n--- a/src/Interpreters/PredicateRewriteVisitor.cpp\n+++ b/src/Interpreters/PredicateRewriteVisitor.cpp\n@@ -76,7 +76,7 @@ static void cleanAliasAndCollectIdentifiers(ASTPtr & predicate, std::vector<ASTI\n     }\n \n     if (const auto alias = predicate->tryGetAlias(); !alias.empty())\n-        predicate->setAlias(\"\");\n+        predicate->setAlias({});\n \n     if (ASTIdentifier * identifier = predicate->as<ASTIdentifier>())\n         identifiers.emplace_back(identifier);\ndiff --git a/src/Storages/transformQueryForExternalDatabase.cpp b/src/Storages/transformQueryForExternalDatabase.cpp\nindex 11b98b782e03..0d34f0b3068f 100644\n--- a/src/Storages/transformQueryForExternalDatabase.cpp\n+++ b/src/Storages/transformQueryForExternalDatabase.cpp\n@@ -71,6 +71,24 @@ class ReplacingConstantExpressionsMatcherNumOrStr\n     }\n };\n \n+class DropAliasesMatcher\n+{\n+public:\n+    struct Data {};\n+    Data data;\n+\n+    static bool needChildVisit(ASTPtr &, const ASTPtr &)\n+    {\n+        return true;\n+    }\n+\n+    static void visit(ASTPtr & node, Data)\n+    {\n+        if (!node->tryGetAlias().empty())\n+            node->setAlias({});\n+    }\n+};\n+\n void replaceConstantExpressions(ASTPtr & node, const Context & context, const NamesAndTypesList & all_columns)\n {\n     auto syntax_result = SyntaxAnalyzer(context).analyze(node, all_columns);\n@@ -80,6 +98,13 @@ void replaceConstantExpressions(ASTPtr & node, const Context & context, const Na\n     visitor.visit(node);\n }\n \n+void dropAliases(ASTPtr & node)\n+{\n+    DropAliasesMatcher::Data data;\n+    InDepthNodeVisitor<DropAliasesMatcher, true> visitor(data);\n+    visitor.visit(node);\n+}\n+\n \n bool isCompatible(const IAST & node)\n {\n@@ -192,6 +217,9 @@ String transformQueryForExternalDatabase(\n         }\n     }\n \n+    ASTPtr select_ptr = select;\n+    dropAliases(select_ptr);\n+\n     std::stringstream out;\n     IAST::FormatSettings settings(out, true);\n     settings.identifier_quoting_style = identifier_quoting_style;\n",
  "test_patch": "diff --git a/src/Storages/tests/gtest_transform_query_for_external_database.cpp b/src/Storages/tests/gtest_transform_query_for_external_database.cpp\nindex 318d667d9b00..bd7d7d5d1b8f 100644\n--- a/src/Storages/tests/gtest_transform_query_for_external_database.cpp\n+++ b/src/Storages/tests/gtest_transform_query_for_external_database.cpp\n@@ -5,6 +5,7 @@\n #include <Parsers/parseQuery.h>\n #include <DataTypes/DataTypesNumber.h>\n #include <DataTypes/DataTypeDateTime.h>\n+#include <DataTypes/DataTypeString.h>\n #include <Interpreters/Context.h>\n #include <Databases/DatabaseMemory.h>\n #include <Storages/StorageMemory.h>\n@@ -27,6 +28,8 @@ struct State\n         {\"apply_type\", std::make_shared<DataTypeUInt8>()},\n         {\"apply_status\", std::make_shared<DataTypeUInt8>()},\n         {\"create_time\", std::make_shared<DataTypeDateTime>()},\n+        {\"field\", std::make_shared<DataTypeString>()},\n+        {\"value\", std::make_shared<DataTypeString>()},\n     };\n \n     static const State & instance()\n@@ -117,3 +120,12 @@ TEST(TransformQueryForExternalDatabase, Issue7245)\n           R\"(SELECT \"apply_id\", \"apply_type\", \"apply_status\", \"create_time\" FROM \"test\".\"table\" WHERE (\"apply_type\" = 2) AND (\"create_time\" > '2018-12-25 01:02:03') AND (\"apply_status\" IN (3, 4)))\",\n           state.context, state.columns);\n }\n+\n+TEST(TransformQueryForExternalDatabase, Aliases)\n+{\n+    const State & state = State::instance();\n+\n+    check(\"SELECT field AS value, field AS display WHERE field NOT IN ('') AND display LIKE '%test%'\",\n+          R\"(SELECT \"field\" FROM \"test\".\"table\" WHERE (\"field\" NOT IN ('')) AND (\"field\" LIKE '%test%'))\",\n+          state.context, state.columns);\n+}\n",
  "problem_statement": "20.4 table function mysql(), pass alias wrong to MySQL server\n**Describe the bug**\r\nWhen we have one field in Clickhouse SQL query like `SELECT field AS value, field AS display WHERE field NOT IN ('') AND display LIKE '%test%'`, query wrong rewrite on the mysql protocol side\r\n\r\n**How to reproduce**\r\n* Which ClickHouse server version to use\r\n20.4.5.36\r\n\r\n* `CREATE TABLE` statements for all tables involved\r\n\r\nMySQL Table\r\n```\r\nCREATE DATABASE prod;\r\nUSE prod;\r\nCREATE TABLE `ips` (\r\n  `start_ip` varchar(15) NOT NULL,\r\n  `end_ip` varchar(15) NOT NULL,\r\n  `ope_telecom` varchar(55) NOT NULL DEFAULT '',\r\n  `pays` varchar(55) NOT NULL,\r\n  `ip_range` linestring NOT NULL,\r\n  `date` date DEFAULT NULL,\r\n  `start_ip_aton` bigint(20) NOT NULL,\r\n  PRIMARY KEY (`start_ip`,`end_ip`,`ope_telecom`,`pays`),\r\n  KEY `ope_telecom` (`ope_telecom`),\r\n  KEY `pays` (`pays`),\r\n  SPATIAL KEY `ip_range_index` (`ip_range`),\r\n  KEY `start_ip_aton` (`start_ip_aton`)\r\n) ENGINE=MyISAM DEFAULT CHARSET=latin1\r\n```\r\n\r\nClickHouse table AS mysql() table function:\r\n```\r\nCREATE TABLE IF NOT EXISTS prod.mysql_ips AS mysql('127.0.0.1:3306','prod','ips','mysql_user','mysql_passwd');\r\n``` \r\n\r\n* Queries to run that lead to an unexpected result\r\nClickHouse SQL query\r\n```\r\nSELECT DISTINCT ope_telecom AS value, ope_telecom AS display FROM prod.mysql_ips WHERE ope_telecom NOT IN ('')\r\n AND display LIKE '%BE%'\r\nORDER BY display LIMIT 300;\r\n```\r\nPassed AS MySQL Query:\r\n```\r\nSELECT `ope_telecom` FROM `prod`.`ips` WHERE (`ope_telecom` NOT IN ('')) AND ((`ope_telecom` AS `display`) LIKE '%BE%')\r\n```\r\n![image](https://user-images.githubusercontent.com/105560/86004006-1319b280-ba2c-11ea-8a7b-5d80e6b51083.png)\r\n\r\n**Expected behavior**\r\nQuery right resolve aliases and used ope_telecom LIKE operator\r\n\r\n**Error message and/or stacktrace**\r\n\r\n[2020-06-29 17:16:03] Poco::Exception. Code: 1000, e.code() = 1064, e.displayText() = mysqlxx::BadQuery: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'AS `display`) LIKE '%BE%')' at line 1 (127.0.0.1:3306) (version 20.4.5.36 (official build))\r\n\r\n**Additional context**\r\nthere is one same MySQL field described in ClickHouse query twice\r\nquery worked on 20.1\r\nworkaround\r\n```\r\nSELECT DISTINCT ope_telecom AS value, concat(ope_telecom,'') AS display FROM prod.mysql_ips WHERE ope_telecom NOT IN ('')\r\n AND display LIKE '%BE%'\r\nORDER BY display LIMIT 300;\r\n```\r\npassed to MySQL OK but without LIKE \r\n```\r\nSELECT `ope_telecom` FROM `prod`.`ips` WHERE (`ope_telecom` NOT IN (''))\r\n```\r\n![image](https://user-images.githubusercontent.com/105560/86004266-7f94b180-ba2c-11ea-8623-ad067817128e.png)\r\n\n",
  "hints_text": "It is regreassion, so major. ",
  "created_at": "2020-07-06T01:51:53Z",
  "modified_files": [
    "src/Interpreters/JoinToSubqueryTransformVisitor.cpp",
    "src/Interpreters/PredicateRewriteVisitor.cpp",
    "src/Storages/transformQueryForExternalDatabase.cpp"
  ],
  "modified_test_files": [
    "src/Storages/tests/gtest_transform_query_for_external_database.cpp"
  ]
}