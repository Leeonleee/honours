{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 79743,
  "instance_id": "ClickHouse__ClickHouse-79743",
  "issue_numbers": [
    "70655"
  ],
  "base_commit": "9e58cb28a2ae6641b62d77b166793555806790ba",
  "patch": "diff --git a/src/Interpreters/ActionsDAG.cpp b/src/Interpreters/ActionsDAG.cpp\nindex f16e1a8883b7..18a32ab111f8 100644\n--- a/src/Interpreters/ActionsDAG.cpp\n+++ b/src/Interpreters/ActionsDAG.cpp\n@@ -210,11 +210,11 @@ ActionsDAG::ActionsDAG(const NamesAndTypesList & inputs_)\n         outputs.push_back(&addInput(input.name, input.type));\n }\n \n-ActionsDAG::ActionsDAG(const ColumnsWithTypeAndName & inputs_)\n+ActionsDAG::ActionsDAG(const ColumnsWithTypeAndName & inputs_, bool duplicate_const_columns)\n {\n     for (const auto & input : inputs_)\n     {\n-        if (input.column && isColumnConst(*input.column))\n+        if (input.column && isColumnConst(*input.column) && duplicate_const_columns)\n         {\n             addInput(input);\n \ndiff --git a/src/Interpreters/ActionsDAG.h b/src/Interpreters/ActionsDAG.h\nindex 50c18b513819..87747e92e31a 100644\n--- a/src/Interpreters/ActionsDAG.h\n+++ b/src/Interpreters/ActionsDAG.h\n@@ -117,7 +117,7 @@ class ActionsDAG\n     ActionsDAG & operator=(ActionsDAG &&) = default;\n     ActionsDAG & operator=(const ActionsDAG &) = delete;\n     explicit ActionsDAG(const NamesAndTypesList & inputs_);\n-    explicit ActionsDAG(const ColumnsWithTypeAndName & inputs_);\n+    explicit ActionsDAG(const ColumnsWithTypeAndName & inputs_, bool duplicate_const_columns = true);\n \n     const Nodes & getNodes() const { return nodes; }\n     static Nodes detachNodes(ActionsDAG && dag) { return std::move(dag.nodes); }\ndiff --git a/src/Planner/PlannerExpressionAnalysis.cpp b/src/Planner/PlannerExpressionAnalysis.cpp\nindex b8c597aedf0e..095c7ed3d63e 100644\n--- a/src/Planner/PlannerExpressionAnalysis.cpp\n+++ b/src/Planner/PlannerExpressionAnalysis.cpp\n@@ -137,7 +137,9 @@ std::optional<AggregationAnalysisResult> analyzeAggregation(\n     Names aggregation_keys;\n \n     ActionsAndProjectInputsFlagPtr before_aggregation_actions = std::make_shared<ActionsAndProjectInputsFlag>();\n-    before_aggregation_actions->dag = ActionsDAG(input_columns);\n+    /// Here it is OK to materialize const columns: if column is used in GROUP BY, it may be expected to become non-const\n+    /// See https://github.com/ClickHouse/ClickHouse/issues/70655 for example\n+    before_aggregation_actions->dag = ActionsDAG(input_columns, false);\n     before_aggregation_actions->dag.getOutputs().clear();\n \n     std::unordered_set<std::string_view> before_aggregation_actions_output_node_names;\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/00757_enum_defaults_const_analyzer.reference b/tests/queries/0_stateless/00757_enum_defaults_const_analyzer.reference\nindex 6895acffed15..56ead34ad3b7 100644\n--- a/tests/queries/0_stateless/00757_enum_defaults_const_analyzer.reference\n+++ b/tests/queries/0_stateless/00757_enum_defaults_const_analyzer.reference\n@@ -3,4 +3,4 @@ iphone\t1\n iphone\t1\n iphone\t1\n \n-iphone\t1\n+\\N\t1\ndiff --git a/tests/queries/0_stateless/03447_grouping_sets_analyzer_const_columns.reference b/tests/queries/0_stateless/03447_grouping_sets_analyzer_const_columns.reference\nnew file mode 100644\nindex 000000000000..723208a70e1f\n--- /dev/null\n+++ b/tests/queries/0_stateless/03447_grouping_sets_analyzer_const_columns.reference\n@@ -0,0 +1,27 @@\n+Const column in grouping set, analyzer on:\n+0\t0\tvalue\t0\t1\n+0\t0\tvalue\t1\t1\n+0\t0\tvalue\t2\t1\n+0\t0\tvalue\t3\t1\n+1\t0\t\t0\t1\n+1\t0\t\t1\t1\n+1\t0\t\t2\t1\n+1\t0\t\t3\t1\n+Non-const column in grouping set, analyzer on:\n+0\t0\tvalue\t0\t1\n+0\t0\tvalue\t1\t1\n+0\t0\tvalue\t2\t1\n+0\t0\tvalue\t3\t1\n+1\t0\t\t0\t1\n+1\t0\t\t1\t1\n+1\t0\t\t2\t1\n+1\t0\t\t3\t1\n+Const column in grouping set, analyzer off:\n+0\t0\tvalue\t0\t1\n+0\t0\tvalue\t1\t1\n+0\t0\tvalue\t2\t1\n+0\t0\tvalue\t3\t1\n+1\t0\t\t0\t1\n+1\t0\t\t1\t1\n+1\t0\t\t2\t1\n+1\t0\t\t3\t1\ndiff --git a/tests/queries/0_stateless/03447_grouping_sets_analyzer_const_columns.sql b/tests/queries/0_stateless/03447_grouping_sets_analyzer_const_columns.sql\nnew file mode 100644\nindex 000000000000..f12e5636bd3a\n--- /dev/null\n+++ b/tests/queries/0_stateless/03447_grouping_sets_analyzer_const_columns.sql\n@@ -0,0 +1,26 @@\n+SET enable_analyzer=1;\n+\n+SELECT 'Const column in grouping set, analyzer on:';\n+\n+SELECT grouping(key_a), grouping(key_b), key_a, key_b, count()  FROM (\n+    SELECT 'value' as key_a, number as key_b FROM numbers(4)\n+)\n+GROUP BY GROUPING SETS((key_b), (key_a, key_b))\n+ORDER BY (grouping(key_a), grouping(key_b), key_a, key_b);\n+\n+SELECT 'Non-const column in grouping set, analyzer on:';\n+\n+SELECT grouping(key_a), grouping(key_b), key_a, key_b, count() FROM (\n+    SELECT materialize('value') as key_a, number as key_b FROM numbers(4)\n+)\n+GROUP BY GROUPING SETS((key_b), (key_a, key_b))\n+ORDER BY (grouping(key_a), grouping(key_b), key_a, key_b);\n+\n+SELECT 'Const column in grouping set, analyzer off:';\n+\n+SELECT grouping(key_a), grouping(key_b), key_a, key_b, count() FROM (\n+    SELECT 'value' as key_a, number as key_b FROM numbers(4)\n+)\n+GROUP BY GROUPING SETS((key_b), (key_a, key_b))\n+ORDER BY (grouping(key_a), grouping(key_b), key_a, key_b)\n+SETTINGS allow_experimental_analyzer=0;\n",
  "problem_statement": "Analyzer GROUPING SETS return uncorrected key column value if it constant\n**Does it reproduce on the most recent release?**\r\n\r\nYes\r\n\r\n**How to reproduce**\r\n\r\nWrong, Master, 24.3 https://fiddle.clickhouse.com/8cdcefe0-bf30-4da1-ad6c-4fb184804e8e\r\nCorrect, 22.8 https://fiddle.clickhouse.com/21d179f5-f344-4241-9218-f4ced81a97ea\r\n\r\n**Expected behavior**\r\n\r\ncolumn type will be changed to nonnconstant, if it's GROUP BY key column\r\n\n",
  "hints_text": "```sql\nSELECT grouping(key_a), 'value' AS key_a, key_b, count()  FROM (SELECT number as key_b FROM numbers(4)) GROUP BY GROUPING SETS((key_a, key_b));\n\nReceived exception from server (version 25.2.2):\nCode: 36. DB::Exception: Received from localhost:9000. DB::Exception: GROUPING function argument 'value' AS key_a is not in GROUP BY keys. In query SELECT grouping(key_a), 'value' AS key_a, key_b, count() FROM (SELECT number AS key_b FROM numbers(4)) GROUP BY GROUPING SETS ((key_a, key_b)). (BAD_ARGUMENTS)\n(query: SELECT grouping(key_a), 'value' AS key_a, key_b, count()  FROM (SELECT number as key_b FROM numbers(4)) GROUP BY GROUPING SETS((key_a, key_b));)\n```\n\n\nhttps://fiddle.clickhouse.com/c616b5ab-786f-4bca-8924-d0830da64c1a\nSimpler constness difference: https://fiddle.clickhouse.com/0d2fe841-ba89-42f1-b645-58c88d7890c5",
  "created_at": "2025-04-30T23:07:17Z",
  "modified_files": [
    "src/Interpreters/ActionsDAG.cpp",
    "src/Interpreters/ActionsDAG.h",
    "src/Planner/PlannerExpressionAnalysis.cpp"
  ],
  "modified_test_files": [
    "tests/queries/0_stateless/00757_enum_defaults_const_analyzer.reference",
    "b/tests/queries/0_stateless/03447_grouping_sets_analyzer_const_columns.reference",
    "b/tests/queries/0_stateless/03447_grouping_sets_analyzer_const_columns.sql"
  ]
}