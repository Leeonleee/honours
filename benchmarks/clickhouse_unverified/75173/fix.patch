diff --git a/src/Analyzer/QueryNode.cpp b/src/Analyzer/QueryNode.cpp
index 26665754a167..ba4521bbf279 100644
--- a/src/Analyzer/QueryNode.cpp
+++ b/src/Analyzer/QueryNode.cpp
@@ -20,8 +20,9 @@
 #include <Parsers/ASTSelectWithUnionQuery.h>
 #include <Parsers/ASTSetQuery.h>
 
-#include <Analyzer/Utils.h>
+#include <Analyzer/InterpolateNode.h>
 #include <Analyzer/UnionNode.h>
+#include <Analyzer/Utils.h>
 
 namespace DB
 {
@@ -68,7 +69,7 @@ void QueryNode::resolveProjectionColumns(NamesAndTypes projection_columns_value)
     projection_columns = std::move(projection_columns_value);
 }
 
-void QueryNode::removeUnusedProjectionColumns(const std::unordered_set<std::string> & used_projection_columns)
+void QueryNode::removeUnusedProjectionColumns(const std::unordered_set<size_t> & used_projection_columns_indexes)
 {
     auto & projection_nodes = getProjection().getNodes();
     size_t projection_columns_size = projection_columns.size();
@@ -76,7 +77,7 @@ void QueryNode::removeUnusedProjectionColumns(const std::unordered_set<std::stri
 
     for (size_t i = 0; i < projection_columns_size; ++i)
     {
-        if (!used_projection_columns.contains(projection_columns[i].name))
+        if (!used_projection_columns_indexes.contains(i))
             continue;
 
         projection_nodes[write_index] = projection_nodes[i];
@@ -86,26 +87,23 @@ void QueryNode::removeUnusedProjectionColumns(const std::unordered_set<std::stri
 
     projection_nodes.erase(projection_nodes.begin() + write_index, projection_nodes.end());
     projection_columns.erase(projection_columns.begin() + write_index, projection_columns.end());
-}
-
-void QueryNode::removeUnusedProjectionColumns(const std::unordered_set<size_t> & used_projection_columns_indexes)
-{
-    auto & projection_nodes = getProjection().getNodes();
-    size_t projection_columns_size = projection_columns.size();
-    size_t write_index = 0;
 
-    for (size_t i = 0; i < projection_columns_size; ++i)
+    if (hasInterpolate())
     {
-        if (!used_projection_columns_indexes.contains(i))
-            continue;
-
-        projection_nodes[write_index] = projection_nodes[i];
-        projection_columns[write_index] = projection_columns[i];
-        ++write_index;
+        std::unordered_set<String> used_projection_columns;
+        for (const auto & projection : projection_columns)
+            used_projection_columns.insert(projection.name);
+
+        auto & interpolate_node = getInterpolate();
+        auto & interpolate_list_nodes = interpolate_node->as<ListNode &>().getNodes();
+        std::erase_if(
+            interpolate_list_nodes,
+            [&used_projection_columns](const QueryTreeNodePtr & interpolate)
+            { return !used_projection_columns.contains(interpolate->as<InterpolateNode &>().getExpressionName()); });
+
+        if (interpolate_list_nodes.empty())
+            interpolate_node = nullptr;
     }
-
-    projection_nodes.erase(projection_nodes.begin() + write_index, projection_nodes.end());
-    projection_columns.erase(projection_columns.begin() + write_index, projection_columns.end());
 }
 
 void QueryNode::dumpTreeImpl(WriteBuffer & buffer, FormatState & format_state, size_t indent) const
diff --git a/src/Analyzer/QueryNode.h b/src/Analyzer/QueryNode.h
index dbe4bac246bd..2ec1b96477c6 100644
--- a/src/Analyzer/QueryNode.h
+++ b/src/Analyzer/QueryNode.h
@@ -616,9 +616,6 @@ class QueryNode final : public IQueryTreeNode
         projection_columns.clear();
     }
 
-    /// Remove unused projection columns
-    void removeUnusedProjectionColumns(const std::unordered_set<std::string> & used_projection_columns);
-
     /// Remove unused projection columns
     void removeUnusedProjectionColumns(const std::unordered_set<size_t> & used_projection_columns_indexes);
 
diff --git a/src/Analyzer/UnionNode.cpp b/src/Analyzer/UnionNode.cpp
index 545a6b2195be..dcff552f07c9 100644
--- a/src/Analyzer/UnionNode.cpp
+++ b/src/Analyzer/UnionNode.cpp
@@ -115,32 +115,6 @@ NamesAndTypes UnionNode::computeProjectionColumns() const
     return result_columns;
 }
 
-void UnionNode::removeUnusedProjectionColumns(const std::unordered_set<std::string> & used_projection_columns)
-{
-    if (recursive_cte_table)
-        return;
-
-    auto projection_columns = computeProjectionColumns();
-    size_t projection_columns_size = projection_columns.size();
-    std::unordered_set<size_t> used_projection_column_indexes;
-
-    for (size_t i = 0; i < projection_columns_size; ++i)
-    {
-        const auto & projection_column = projection_columns[i];
-        if (used_projection_columns.contains(projection_column.name))
-            used_projection_column_indexes.insert(i);
-    }
-
-    auto & query_nodes = getQueries().getNodes();
-    for (auto & query_node : query_nodes)
-    {
-        if (auto * query_node_typed = query_node->as<QueryNode>())
-            query_node_typed->removeUnusedProjectionColumns(used_projection_column_indexes);
-        else if (auto * union_node_typed = query_node->as<UnionNode>())
-            union_node_typed->removeUnusedProjectionColumns(used_projection_column_indexes);
-    }
-}
-
 void UnionNode::removeUnusedProjectionColumns(const std::unordered_set<size_t> & used_projection_columns_indexes)
 {
     if (recursive_cte_table)
diff --git a/src/Analyzer/UnionNode.h b/src/Analyzer/UnionNode.h
index 8cbc50da8235..09018156e2d1 100644
--- a/src/Analyzer/UnionNode.h
+++ b/src/Analyzer/UnionNode.h
@@ -167,9 +167,6 @@ class UnionNode final : public IQueryTreeNode
     /// Compute union node projection columns
     NamesAndTypes computeProjectionColumns() const;
 
-    /// Remove unused projection columns
-    void removeUnusedProjectionColumns(const std::unordered_set<std::string> & used_projection_columns);
-
     /// Remove unused projection columns
     void removeUnusedProjectionColumns(const std::unordered_set<size_t> & used_projection_columns_indexes);
 
diff --git a/src/Planner/PlannerExpressionAnalysis.h b/src/Planner/PlannerExpressionAnalysis.h
index 283fcac7abab..9ae2e672af93 100644
--- a/src/Planner/PlannerExpressionAnalysis.h
+++ b/src/Planner/PlannerExpressionAnalysis.h
@@ -1,7 +1,6 @@
 #pragma once
 
 #include <Core/ColumnsWithTypeAndName.h>
-#include <Core/InterpolateDescription.h>
 
 #include <Analyzer/IQueryTreeNode.h>
 
