diff --git a/src/DataStreams/CheckConstraintsBlockOutputStream.cpp b/src/DataStreams/CheckConstraintsBlockOutputStream.cpp
index 25e4340f6554..878ab0c4e37b 100644
--- a/src/DataStreams/CheckConstraintsBlockOutputStream.cpp
+++ b/src/DataStreams/CheckConstraintsBlockOutputStream.cpp
@@ -61,10 +61,11 @@ void CheckConstraintsBlockOutputStream::write(const Block & block)
 
                 std::stringstream exception_message;
 
-                exception_message << "Constraint " << backQuote(constraints.constraints[i]->name)
+                auto * constraint_ptr = constraints.constraints[i]->as<ASTConstraintDeclaration>();
+                exception_message << "Constraint " << backQuote(constraint_ptr->name)
                     << " for table " << table_id.getNameForLogs()
                     << " is violated at row " << (rows_written + row_idx + 1)
-                    << ". Expression: (" << serializeAST(*(constraints.constraints[i]->expr), true) << ")"
+                    << ". Expression: (" << serializeAST(*(constraint_ptr->expr), true) << ")"
                     << ". Column values";
 
                 bool first = true;
diff --git a/src/Storages/AlterCommands.cpp b/src/Storages/AlterCommands.cpp
index 121974c8b82d..67bd88d10a8a 100644
--- a/src/Storages/AlterCommands.cpp
+++ b/src/Storages/AlterCommands.cpp
@@ -467,6 +467,9 @@ void AlterCommand::apply(StorageInMemoryMetadata & metadata) const
         }
         if (metadata.ttl_for_table_ast)
             rename_visitor.visit(metadata.ttl_for_table_ast);
+
+        for (auto & constraint : metadata.constraints.constraints)
+            rename_visitor.visit(constraint);
     }
     else
         throw Exception("Wrong parameter type in ALTER query", ErrorCodes::LOGICAL_ERROR);
diff --git a/src/Storages/ConstraintsDescription.cpp b/src/Storages/ConstraintsDescription.cpp
index 8c38af0cd5eb..d86796908a73 100644
--- a/src/Storages/ConstraintsDescription.cpp
+++ b/src/Storages/ConstraintsDescription.cpp
@@ -33,7 +33,7 @@ ConstraintsDescription ConstraintsDescription::parse(const String & str)
     ASTPtr list = parseQuery(parser, str, 0, DBMS_DEFAULT_MAX_PARSER_DEPTH);
 
     for (const auto & constraint : list->children)
-        res.constraints.push_back(std::dynamic_pointer_cast<ASTConstraintDeclaration>(constraint));
+        res.constraints.push_back(constraint);
 
     return res;
 }
@@ -46,9 +46,10 @@ ConstraintsExpressions ConstraintsDescription::getExpressions(const DB::Context
     for (const auto & constraint : constraints)
     {
         // SyntaxAnalyzer::analyze has query as non-const argument so to avoid accidental query changes we clone it
-        ASTPtr expr = constraint->expr->clone();
+        auto * constraint_ptr = constraint->as<ASTConstraintDeclaration>();
+        ASTPtr expr = constraint_ptr->expr->clone();
         auto syntax_result = SyntaxAnalyzer(context).analyze(expr, source_columns_);
-        res.push_back(ExpressionAnalyzer(constraint->expr->clone(), syntax_result, context).getActions(false));
+        res.push_back(ExpressionAnalyzer(constraint_ptr->expr->clone(), syntax_result, context).getActions(false));
     }
     return res;
 }
diff --git a/src/Storages/ConstraintsDescription.h b/src/Storages/ConstraintsDescription.h
index 3ced0e8ddc92..f4da43760414 100644
--- a/src/Storages/ConstraintsDescription.h
+++ b/src/Storages/ConstraintsDescription.h
@@ -6,12 +6,11 @@
 namespace DB
 {
 
-using ConstraintsASTs = std::vector<std::shared_ptr<ASTConstraintDeclaration>>;
 using ConstraintsExpressions = std::vector<ExpressionActionsPtr>;
 
 struct ConstraintsDescription
 {
-    ConstraintsASTs constraints;
+    std::vector<ASTPtr> constraints;
 
     ConstraintsDescription() = default;
 
