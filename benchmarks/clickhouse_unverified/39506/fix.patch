diff --git a/src/Disks/IO/AsynchronousReadIndirectBufferFromRemoteFS.cpp b/src/Disks/IO/AsynchronousReadIndirectBufferFromRemoteFS.cpp
index 774a7ecaaaa8..f58e91669c4c 100644
--- a/src/Disks/IO/AsynchronousReadIndirectBufferFromRemoteFS.cpp
+++ b/src/Disks/IO/AsynchronousReadIndirectBufferFromRemoteFS.cpp
@@ -168,6 +168,8 @@ bool AsynchronousReadIndirectBufferFromRemoteFS::nextImpl()
     CurrentMetrics::Increment metric_increment{CurrentMetrics::AsynchronousReadWait};
 
     size_t size = 0;
+    size_t bytes_read = 0;
+
     if (prefetch_future.valid())
     {
         ProfileEvents::increment(ProfileEvents::RemoteFSPrefetchedReads);
@@ -181,6 +183,8 @@ bool AsynchronousReadIndirectBufferFromRemoteFS::nextImpl()
 
             /// If prefetch_future is valid, size should always be greater than zero.
             assert(offset <= size);
+            bytes_read = size - offset;
+
             ProfileEvents::increment(ProfileEvents::AsynchronousReadWaitMicroseconds, watch.elapsedMicroseconds());
         }
 
@@ -200,9 +204,11 @@ bool AsynchronousReadIndirectBufferFromRemoteFS::nextImpl()
         auto offset = result.offset;
 
         LOG_TEST(log, "Current size: {}, offset: {}", size, offset);
+
         assert(offset <= size);
+        bytes_read = size - offset;
 
-        if (size)
+        if (bytes_read)
         {
             /// Adjust the working buffer so that it ignores `offset` bytes.
             internal_buffer = Buffer(memory.data(), memory.data() + memory.size());
@@ -222,7 +228,7 @@ bool AsynchronousReadIndirectBufferFromRemoteFS::nextImpl()
     assert(file_offset_of_buffer_end <= impl->getFileSize());
 
     prefetch_future = {};
-    return size;
+    return bytes_read;
 }
 
 
diff --git a/src/IO/AsynchronousReadBufferFromFileDescriptor.cpp b/src/IO/AsynchronousReadBufferFromFileDescriptor.cpp
index add18d8d12ed..1bf889540eb8 100644
--- a/src/IO/AsynchronousReadBufferFromFileDescriptor.cpp
+++ b/src/IO/AsynchronousReadBufferFromFileDescriptor.cpp
@@ -90,7 +90,10 @@ bool AsynchronousReadBufferFromFileDescriptor::nextImpl()
         prefetch_future = {};
         file_offset_of_buffer_end += size;
 
-        if (size)
+        assert(offset <= size);
+        size_t bytes_read = size - offset;
+
+        if (bytes_read)
         {
             prefetch_buffer.swap(memory);
             /// Adjust the working buffer so that it ignores `offset` bytes.
@@ -109,7 +112,10 @@ bool AsynchronousReadBufferFromFileDescriptor::nextImpl()
         auto [size, offset] = asyncReadInto(memory.data(), memory.size()).get();
         file_offset_of_buffer_end += size;
 
-        if (size)
+        assert(offset <= size);
+        size_t bytes_read = size - offset;
+
+        if (bytes_read)
         {
             /// Adjust the working buffer so that it ignores `offset` bytes.
             internal_buffer = Buffer(memory.data(), memory.data() + memory.size());
diff --git a/src/Storages/HDFS/AsynchronousReadBufferFromHDFS.cpp b/src/Storages/HDFS/AsynchronousReadBufferFromHDFS.cpp
index 121a22e764c1..eab5c2ab134d 100644
--- a/src/Storages/HDFS/AsynchronousReadBufferFromHDFS.cpp
+++ b/src/Storages/HDFS/AsynchronousReadBufferFromHDFS.cpp
@@ -112,6 +112,8 @@ bool AsynchronousReadBufferFromHDFS::nextImpl()
     Stopwatch next_watch;
     Int64 wait = -1;
     size_t size = 0;
+    size_t bytes_read = 0;
+
     if (prefetch_future.valid())
     {
         ProfileEvents::increment(ProfileEvents::RemoteFSPrefetchedReads);
@@ -126,7 +128,9 @@ bool AsynchronousReadBufferFromHDFS::nextImpl()
             LOG_TEST(log, "Current size: {}, offset: {}", size, offset);
 
             /// If prefetch_future is valid, size should always be greater than zero.
-            assert(offset < size);
+            assert(offset <= size);
+            bytes_read = size - offset;
+
             wait = watch.elapsedMicroseconds();
             ProfileEvents::increment(ProfileEvents::AsynchronousReadWaitMicroseconds, wait);
         }
@@ -147,9 +151,10 @@ bool AsynchronousReadBufferFromHDFS::nextImpl()
         auto offset = result.offset;
 
         LOG_TEST(log, "Current size: {}, offset: {}", size, offset);
-        assert(offset < size);
+        assert(offset <= size);
+        bytes_read = size - offset;
 
-        if (size)
+        if (bytes_read)
         {
             /// Adjust the working buffer so that it ignores `offset` bytes.
             internal_buffer = Buffer(memory.data(), memory.data() + memory.size());
@@ -166,7 +171,7 @@ bool AsynchronousReadBufferFromHDFS::nextImpl()
 
     sum_duration += next_watch.elapsedMicroseconds();
     sum_wait += wait;
-    return size;
+    return bytes_read;
 }
 
 off_t AsynchronousReadBufferFromHDFS::seek(off_t offset, int whence)
