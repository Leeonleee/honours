{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 58638,
  "instance_id": "ClickHouse__ClickHouse-58638",
  "issue_numbers": [
    "58620"
  ],
  "base_commit": "6cf55b82f45f13ad195f23ba882bd49a1a76b5d2",
  "patch": "diff --git a/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp b/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp\nindex d1f0c1ebe5e8..b92c07162b72 100644\n--- a/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp\n@@ -615,7 +615,6 @@ bool optimizeUseAggregateProjections(QueryPlan::Node & node, QueryPlan::Nodes &\n                 reader,\n                 required_column_names,\n                 parts_with_ranges,\n-                metadata,\n                 query_info,\n                 context,\n                 max_added_blocks,\ndiff --git a/src/Processors/QueryPlan/Optimizations/optimizeUseNormalProjection.cpp b/src/Processors/QueryPlan/Optimizations/optimizeUseNormalProjection.cpp\nindex e4b3e4f84aba..a77cdcef0623 100644\n--- a/src/Processors/QueryPlan/Optimizations/optimizeUseNormalProjection.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/optimizeUseNormalProjection.cpp\n@@ -173,7 +173,6 @@ bool optimizeUseNormalProjections(Stack & stack, QueryPlan::Nodes & nodes)\n             reader,\n             required_columns,\n             parts_with_ranges,\n-            metadata,\n             query_info,\n             context,\n             max_added_blocks,\ndiff --git a/src/Processors/QueryPlan/Optimizations/projectionsCommon.cpp b/src/Processors/QueryPlan/Optimizations/projectionsCommon.cpp\nindex c3b3449857b0..9bc18ee38ba4 100644\n--- a/src/Processors/QueryPlan/Optimizations/projectionsCommon.cpp\n+++ b/src/Processors/QueryPlan/Optimizations/projectionsCommon.cpp\n@@ -211,7 +211,6 @@ bool analyzeProjectionCandidate(\n     const MergeTreeDataSelectExecutor & reader,\n     const Names & required_column_names,\n     const RangesInDataParts & parts_with_ranges,\n-    const StorageMetadataPtr & metadata,\n     const SelectQueryInfo & query_info,\n     const ContextPtr & context,\n     const std::shared_ptr<PartitionIdToMaxBlock> & max_added_blocks,\n@@ -242,7 +241,6 @@ bool analyzeProjectionCandidate(\n         std::move(projection_parts),\n         nullptr,\n         required_column_names,\n-        metadata,\n         candidate.projection->metadata,\n         query_info, /// How it is actually used? I hope that for index we need only added_filter_nodes\n         added_filter_nodes,\ndiff --git a/src/Processors/QueryPlan/Optimizations/projectionsCommon.h b/src/Processors/QueryPlan/Optimizations/projectionsCommon.h\nindex 055ca5d40848..22606ef8a299 100644\n--- a/src/Processors/QueryPlan/Optimizations/projectionsCommon.h\n+++ b/src/Processors/QueryPlan/Optimizations/projectionsCommon.h\n@@ -73,7 +73,6 @@ bool analyzeProjectionCandidate(\n     const MergeTreeDataSelectExecutor & reader,\n     const Names & required_column_names,\n     const RangesInDataParts & parts_with_ranges,\n-    const StorageMetadataPtr & metadata,\n     const SelectQueryInfo & query_info,\n     const ContextPtr & context,\n     const std::shared_ptr<PartitionIdToMaxBlock> & max_added_blocks,\ndiff --git a/src/Processors/QueryPlan/ReadFromMergeTree.cpp b/src/Processors/QueryPlan/ReadFromMergeTree.cpp\nindex 68786bdec6c0..b1d5d4c71ddb 100644\n--- a/src/Processors/QueryPlan/ReadFromMergeTree.cpp\n+++ b/src/Processors/QueryPlan/ReadFromMergeTree.cpp\n@@ -1269,7 +1269,6 @@ MergeTreeDataSelectAnalysisResultPtr ReadFromMergeTree::selectRangesToRead(\n         std::move(alter_conversions),\n         prewhere_info,\n         filter_nodes,\n-        storage_snapshot->metadata,\n         metadata_for_reading,\n         query_info,\n         context,\n@@ -1465,7 +1464,6 @@ MergeTreeDataSelectAnalysisResultPtr ReadFromMergeTree::selectRangesToRead(\n     std::vector<AlterConversionsPtr> alter_conversions,\n     const PrewhereInfoPtr & prewhere_info,\n     const ActionDAGNodes & added_filter_nodes,\n-    const StorageMetadataPtr & metadata_snapshot_base,\n     const StorageMetadataPtr & metadata_snapshot,\n     const SelectQueryInfo & query_info,\n     ContextPtr context,\n@@ -1483,7 +1481,6 @@ MergeTreeDataSelectAnalysisResultPtr ReadFromMergeTree::selectRangesToRead(\n     return selectRangesToReadImpl(\n         std::move(parts),\n         std::move(alter_conversions),\n-        metadata_snapshot_base,\n         metadata_snapshot,\n         updated_query_info_with_filter_dag,\n         context,\n@@ -1499,7 +1496,6 @@ MergeTreeDataSelectAnalysisResultPtr ReadFromMergeTree::selectRangesToRead(\n MergeTreeDataSelectAnalysisResultPtr ReadFromMergeTree::selectRangesToReadImpl(\n     MergeTreeData::DataPartsVector parts,\n     std::vector<AlterConversionsPtr> alter_conversions,\n-    const StorageMetadataPtr & metadata_snapshot_base,\n     const StorageMetadataPtr & metadata_snapshot,\n     const SelectQueryInfo & query_info,\n     ContextPtr context,\n@@ -1561,7 +1557,7 @@ MergeTreeDataSelectAnalysisResultPtr ReadFromMergeTree::selectRangesToReadImpl(\n             parts,\n             alter_conversions,\n             indexes->part_values,\n-            metadata_snapshot_base,\n+            metadata_snapshot,\n             data,\n             context,\n             max_block_numbers_to_read.get(),\ndiff --git a/src/Processors/QueryPlan/ReadFromMergeTree.h b/src/Processors/QueryPlan/ReadFromMergeTree.h\nindex e2c38ebb251d..b06d32e129ea 100644\n--- a/src/Processors/QueryPlan/ReadFromMergeTree.h\n+++ b/src/Processors/QueryPlan/ReadFromMergeTree.h\n@@ -162,7 +162,6 @@ class ReadFromMergeTree final : public SourceStepWithFilter\n         std::vector<AlterConversionsPtr> alter_conversions,\n         const PrewhereInfoPtr & prewhere_info,\n         const ActionDAGNodes & added_filter_nodes,\n-        const StorageMetadataPtr & metadata_snapshot_base,\n         const StorageMetadataPtr & metadata_snapshot,\n         const SelectQueryInfo & query_info,\n         ContextPtr context,\n@@ -212,7 +211,6 @@ class ReadFromMergeTree final : public SourceStepWithFilter\n     static MergeTreeDataSelectAnalysisResultPtr selectRangesToReadImpl(\n         MergeTreeData::DataPartsVector parts,\n         std::vector<AlterConversionsPtr> alter_conversions,\n-        const StorageMetadataPtr & metadata_snapshot_base,\n         const StorageMetadataPtr & metadata_snapshot,\n         const SelectQueryInfo & query_info,\n         ContextPtr context,\ndiff --git a/src/Storages/MergeTree/MergeTreeData.cpp b/src/Storages/MergeTree/MergeTreeData.cpp\nindex 4ad6c564a186..83e4c9c4e12b 100644\n--- a/src/Storages/MergeTree/MergeTreeData.cpp\n+++ b/src/Storages/MergeTree/MergeTreeData.cpp\n@@ -6929,7 +6929,6 @@ UInt64 MergeTreeData::estimateNumberOfRowsToRead(\n         query_info.prewhere_info,\n         storage_snapshot->getMetadataForQuery()->getColumns().getAll().getNames(),\n         storage_snapshot->metadata,\n-        storage_snapshot->metadata,\n         query_info,\n         added_filter_nodes,\n         query_context,\ndiff --git a/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp b/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp\nindex d5b9b4423a9d..bcc8b0ee62a3 100644\n--- a/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp\n+++ b/src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp\n@@ -839,6 +839,7 @@ void MergeTreeDataSelectExecutor::filterPartsByPartition(\n \n     if (metadata_snapshot->hasPartitionKey())\n     {\n+        chassert(minmax_idx_condition && partition_pruner);\n         const auto & partition_key = metadata_snapshot->getPartitionKey();\n         minmax_columns_types = data.getMinMaxColumnsTypes(partition_key);\n \n@@ -1260,7 +1261,6 @@ MergeTreeDataSelectAnalysisResultPtr MergeTreeDataSelectExecutor::estimateNumMar\n     MergeTreeData::DataPartsVector parts,\n     const PrewhereInfoPtr & prewhere_info,\n     const Names & column_names_to_return,\n-    const StorageMetadataPtr & metadata_snapshot_base,\n     const StorageMetadataPtr & metadata_snapshot,\n     const SelectQueryInfo & query_info,\n     const ActionDAGNodes & added_filter_nodes,\n@@ -1289,7 +1289,6 @@ MergeTreeDataSelectAnalysisResultPtr MergeTreeDataSelectExecutor::estimateNumMar\n         /*alter_conversions=*/ {},\n         prewhere_info,\n         added_filter_nodes,\n-        metadata_snapshot_base,\n         metadata_snapshot,\n         query_info,\n         context,\ndiff --git a/src/Storages/MergeTree/MergeTreeDataSelectExecutor.h b/src/Storages/MergeTree/MergeTreeDataSelectExecutor.h\nindex 4c6e1086cbc1..f925c4510567 100644\n--- a/src/Storages/MergeTree/MergeTreeDataSelectExecutor.h\n+++ b/src/Storages/MergeTree/MergeTreeDataSelectExecutor.h\n@@ -59,7 +59,6 @@ class MergeTreeDataSelectExecutor\n         MergeTreeData::DataPartsVector parts,\n         const PrewhereInfoPtr & prewhere_info,\n         const Names & column_names,\n-        const StorageMetadataPtr & metadata_snapshot_base,\n         const StorageMetadataPtr & metadata_snapshot,\n         const SelectQueryInfo & query_info,\n         const ActionDAGNodes & added_filter_nodes,\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/02965_projection_with_partition_pruning.reference b/tests/queries/0_stateless/02965_projection_with_partition_pruning.reference\nnew file mode 100644\nindex 000000000000..5816b4eb49bb\n--- /dev/null\n+++ b/tests/queries/0_stateless/02965_projection_with_partition_pruning.reference\n@@ -0,0 +1,1 @@\n+3\t4\ndiff --git a/tests/queries/0_stateless/02965_projection_with_partition_pruning.sql b/tests/queries/0_stateless/02965_projection_with_partition_pruning.sql\nnew file mode 100644\nindex 000000000000..92f7cc0671c9\n--- /dev/null\n+++ b/tests/queries/0_stateless/02965_projection_with_partition_pruning.sql\n@@ -0,0 +1,9 @@\n+drop table if exists a;\n+\n+create table a (i int, j int, projection p (select * order by j)) engine MergeTree partition by i order by tuple() settings index_granularity = 1;\n+\n+insert into a values (1, 2), (0, 5), (3, 4);\n+\n+select * from a where i > 0 and j = 4 settings force_index_by_date = 1;\n+\n+drop table a;\n",
  "problem_statement": "Crash from analyzeProjectionCandidate in 23.8.6.16 (official build) \n```\r\n2024.01.05 08:24:37.397140 [ 63807 ] {} <Fatal> BaseDaemon: ########## Short fault info ############\r\n2024.01.05 08:24:37.397181 [ 63807 ] {} <Fatal> BaseDaemon: (version 23.8.6.16 (official build), build id: D093C714F52A7D6CE5C33DF3F8FED89E3C610AEE, git hash: 077df679bed122ad45c8b105d8916ccfec85ae64) (from thread 67344) Received signal 11\r\n2024.01.05 08:24:37.397206 [ 63807 ] {} <Fatal> BaseDaemon: Signal description: Segmentation fault\r\n2024.01.05 08:24:37.397217 [ 63807 ] {} <Fatal> BaseDaemon: Address: 0x98df0a00. Access: read. Address not mapped to object.\r\n2024.01.05 08:24:37.397226 [ 63807 ] {} <Fatal> BaseDaemon: Stack trace: 0x0000000012bb41a9 0x0000000012cfa499 0x00000000135c2c48 0x00000000135be787 0x0000000012d04a99 0x000000001363b105 0x0000000013635d64 0x00000000136150c7 0x00000000135a223c 0x00000000135a114e 0x0000000011fa0819 0x00000000122e52d5 0x00000000122e80f1 0x00000000130fca0f 0x00000000131012e9 0x0000000013171ed2 0x0000000015b5ebf4 0x0000000015b5fdf1 0x0000000015c96627 0x0000000015c948fc 0x00007ffff77b015a 0x00007ffff74e28a3\r\n2024.01.05 08:24:37.397233 [ 63807 ] {} <Fatal> BaseDaemon: ########################################\r\n2024.01.05 08:24:37.397238 [ 63807 ] {} <Fatal> BaseDaemon: (version 23.8.6.16 (official build), build id: D093C714F52A7D6CE5C33DF3F8FED89E3C610AEE, git hash: 077df679bed122ad45c8b105d8916ccfec85ae64) (from thread 67344) (query_id: 21756e4e-ed78-416f-a398-5e35b82d384e) (query: SELECT count()\r\nFROM xxxxx\r\nWHERE (col1 = 'xxx') AND (_time = (\r\n    SELECT max(_time)\r\n    FROM yyyyyyy\r\n    WHERE (col1 = 'xxx') AND (col2 = 'zzzz') AND (_time > (now() - toIntervalDay(3)))\r\n))) Received signal Segmentation fault (11)\r\n2024.01.05 08:24:37.397245 [ 63807 ] {} <Fatal> BaseDaemon: Address: 0x98df0a00. Access: read. Address not mapped to object.\r\n2024.01.05 08:24:37.397249 [ 63807 ] {} <Fatal> BaseDaemon: Stack trace: 0x0000000012bb41a9 0x0000000012cfa499 0x00000000135c2c48 0x00000000135be787 0x0000000012d04a99 0x000000001363b105 0x0000000013635d64 0x00000000136150c7 0x00000000135a223c 0x00000000135a114e 0x0000000011fa0819 0x00000000122e52d5 0x00000000122e80f1 0x00000000130fca0f 0x00000000131012e9 0x0000000013171ed2 0x0000000015b5ebf4 0x0000000015b5fdf1 0x0000000015c96627 0x0000000015c948fc 0x00007ffff77b015a 0x00007ffff74e28a3\r\n2024.01.05 08:24:37.397299 [ 63807 ] {} <Fatal> BaseDaemon: 2. DB::KeyCondition::unknownOrAlwaysTrue(bool) const @ 0x0000000012bb41a9 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397335 [ 63807 ] {} <Fatal> BaseDaemon: 3. DB::MergeTreeDataSelectExecutor::filterPartsByPartition(std::optional<DB::PartitionPruner>&, std::optional<DB::KeyCondition>&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>&, std::vector<std::shared_ptr<DB::AlterConversions const>, std::allocator<std::shared_ptr<DB::AlterConversions const>>>&, std::optional<std::unordered_set<String, std::hash<String>, std::equal_to<String>, std::allocator<String>>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::MergeTreeData const&, std::shared_ptr<DB::Context const> const&, std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>> const*, Poco::Logger*, std::vector<DB::ReadFromMergeTree::IndexStat, std::allocator<DB::ReadFromMergeTree::IndexStat>>&) @ 0x0000000012cfa499 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397356 [ 63807 ] {} <Fatal> BaseDaemon: 4. DB::ReadFromMergeTree::selectRangesToReadImpl(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, std::vector<std::shared_ptr<DB::AlterConversions const>, std::allocator<std::shared_ptr<DB::AlterConversions const>>>, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, std::shared_ptr<DB::Context const>, unsigned long, std::shared_ptr<std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>>>, DB::MergeTreeData const&, std::vector<String, std::allocator<String>> const&, bool, Poco::Logger*, std::optional<DB::ReadFromMergeTree::Indexes>&) @ 0x00000000135c2c48 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397373 [ 63807 ] {} <Fatal> BaseDaemon: 5. DB::ReadFromMergeTree::selectRangesToRead(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, std::vector<std::shared_ptr<DB::AlterConversions const>, std::allocator<std::shared_ptr<DB::AlterConversions const>>>, std::shared_ptr<DB::PrewhereInfo> const&, DB::ActionDAGNodes const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, std::shared_ptr<DB::Context const>, unsigned long, std::shared_ptr<std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>>>, DB::MergeTreeData const&, std::vector<String, std::allocator<String>> const&, bool, Poco::Logger*, std::optional<DB::ReadFromMergeTree::Indexes>&) @ 0x00000000135be787 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397400 [ 63807 ] {} <Fatal> BaseDaemon: 6. DB::MergeTreeDataSelectExecutor::estimateNumMarksToRead(std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>>, std::shared_ptr<DB::PrewhereInfo> const&, std::vector<String, std::allocator<String>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, DB::ActionDAGNodes const&, std::shared_ptr<DB::Context const>, unsigned long, std::shared_ptr<std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>>>) const @ 0x0000000012d04a99 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397417 [ 63807 ] {} <Fatal> BaseDaemon: 7. DB::QueryPlanOptimizations::analyzeProjectionCandidate(DB::QueryPlanOptimizations::ProjectionCandidate&, DB::ReadFromMergeTree const&, DB::MergeTreeDataSelectExecutor const&, std::vector<String, std::allocator<String>> const&, std::vector<std::shared_ptr<DB::IMergeTreeDataPart const>, std::allocator<std::shared_ptr<DB::IMergeTreeDataPart const>>> const&, std::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, std::shared_ptr<DB::Context const> const&, std::shared_ptr<std::unordered_map<String, long, std::hash<String>, std::equal_to<String>, std::allocator<std::pair<String const, long>>>> const&, DB::ActionDAGNodes const&) @ 0x000000001363b105 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397425 [ 63807 ] {} <Fatal> BaseDaemon: 8. DB::QueryPlanOptimizations::optimizeUseAggregateProjections(DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&, bool) @ 0x0000000013635d64 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397442 [ 63807 ] {} <Fatal> BaseDaemon: 9. DB::QueryPlanOptimizations::optimizeTreeSecondPass(DB::QueryPlanOptimizationSettings const&, DB::QueryPlan::Node&, std::list<DB::QueryPlan::Node, std::allocator<DB::QueryPlan::Node>>&) @ 0x00000000136150c7 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397448 [ 63807 ] {} <Fatal> BaseDaemon: 10. DB::QueryPlan::optimize(DB::QueryPlanOptimizationSettings const&) @ 0x00000000135a223c in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397453 [ 63807 ] {} <Fatal> BaseDaemon: 11. DB::QueryPlan::buildQueryPipeline(DB::QueryPlanOptimizationSettings const&, DB::BuildQueryPipelineSettings const&) @ 0x00000000135a114e in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397459 [ 63807 ] {} <Fatal> BaseDaemon: 12. DB::InterpreterSelectWithUnionQuery::execute() @ 0x0000000011fa0819 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397467 [ 63807 ] {} <Fatal> BaseDaemon: 13. DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, bool, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x00000000122e52d5 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397477 [ 63807 ] {} <Fatal> BaseDaemon: 14. DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::shared_ptr<DB::Context>, std::function<void (DB::QueryResultDetails const&)>, std::optional<DB::FormatSettings> const&) @ 0x00000000122e80f1 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397484 [ 63807 ] {} <Fatal> BaseDaemon: 15. DB::HTTPHandler::processQuery(DB::HTTPServerRequest&, DB::HTMLForm&, DB::HTTPServerResponse&, DB::HTTPHandler::Output&, std::optional<DB::CurrentThread::QueryScope>&) @ 0x00000000130fca0f in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397492 [ 63807 ] {} <Fatal> BaseDaemon: 16. DB::HTTPHandler::handleRequest(DB::HTTPServerRequest&, DB::HTTPServerResponse&) @ 0x00000000131012e9 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397497 [ 63807 ] {} <Fatal> BaseDaemon: 17. DB::HTTPServerConnection::run() @ 0x0000000013171ed2 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397503 [ 63807 ] {} <Fatal> BaseDaemon: 18. Poco::Net::TCPServerConnection::start() @ 0x0000000015b5ebf4 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397508 [ 63807 ] {} <Fatal> BaseDaemon: 19. Poco::Net::TCPServerDispatcher::run() @ 0x0000000015b5fdf1 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397514 [ 63807 ] {} <Fatal> BaseDaemon: 20. Poco::PooledThread::run() @ 0x0000000015c96627 in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397520 [ 63807 ] {} <Fatal> BaseDaemon: 21. Poco::ThreadImpl::runnableEntry(void*) @ 0x0000000015c948fc in /usr/bin/clickhouse\r\n2024.01.05 08:24:37.397541 [ 63807 ] {} <Fatal> BaseDaemon: 22. start_thread @ 0x000000000000815a in /usr/lib64/libpthread-2.28.so\r\n2024.01.05 08:24:37.397562 [ 63807 ] {} <Fatal> BaseDaemon: 23. __clone @ 0x00000000000fc8a3 in /usr/lib64/libc-2.28.so\r\n2024.01.05 08:24:37.567205 [ 63807 ] {} <Fatal> BaseDaemon: Integrity check of the executable successfully passed (checksum: 26AEDB409AB50F57AAF20243F5DEE734)\r\n2024.01.05 08:24:37.567241 [ 63807 ] {} <Fatal> BaseDaemon: Report this error to https://github.com/ClickHouse/ClickHouse/issues\r\n2024.01.05 08:24:37.567434 [ 63807 ] {} <Fatal> BaseDaemon: Changed settings: max_threads = 16, connect_timeout_with_failover_ms = 1000, use_uncompressed_cache = true, distributed_aggregation_memory_efficient = true, input_format_parallel_parsing = false, force_index_by_date = true, log_queries = true, query_profiler_real_time_period_ns = 0, query_profiler_cpu_time_period_ns = 0, max_bytes_before_external_group_by = 10000000000, max_bytes_before_external_sort = 10000000000, timeout_before_checking_execution_speed = 0., readonly = 2, max_memory_usage = 20000000000, log_query_threads = false, optimize_trivial_count_query = false, max_parser_depth = 2000, optimize_on_insert = false, use_structure_from_insertion_table_in_table_functions = 0, allow_experimental_window_functions = true, allow_experimental_map_type = true, background_pool_size = 32, default_database_engine = 'Ordinary', output_format_arrow_low_cardinality_as_dictionary = true\r\n2024.01.05 08:27:33.082838 [ 1528 ] {} <Fatal> Application: Child process was terminated by signal 11.\r\n```\n",
  "hints_text": "",
  "created_at": "2024-01-09T19:15:22Z",
  "modified_files": [
    "src/Processors/QueryPlan/Optimizations/optimizeUseAggregateProjection.cpp",
    "src/Processors/QueryPlan/Optimizations/optimizeUseNormalProjection.cpp",
    "src/Processors/QueryPlan/Optimizations/projectionsCommon.cpp",
    "src/Processors/QueryPlan/Optimizations/projectionsCommon.h",
    "src/Processors/QueryPlan/ReadFromMergeTree.cpp",
    "src/Processors/QueryPlan/ReadFromMergeTree.h",
    "src/Storages/MergeTree/MergeTreeData.cpp",
    "src/Storages/MergeTree/MergeTreeDataSelectExecutor.cpp",
    "src/Storages/MergeTree/MergeTreeDataSelectExecutor.h"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/02965_projection_with_partition_pruning.reference",
    "b/tests/queries/0_stateless/02965_projection_with_partition_pruning.sql"
  ]
}