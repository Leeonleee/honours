{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 15662,
  "instance_id": "ClickHouse__ClickHouse-15662",
  "issue_numbers": [
    "15529"
  ],
  "base_commit": "bad8171f24f79356dacd256bd060839fa833fec0",
  "patch": "diff --git a/src/Storages/StorageBuffer.cpp b/src/Storages/StorageBuffer.cpp\nindex 4b038692b777..659df2026c80 100644\n--- a/src/Storages/StorageBuffer.cpp\n+++ b/src/Storages/StorageBuffer.cpp\n@@ -221,17 +221,20 @@ Pipe StorageBuffer::read(\n                     columns_intersection, destination_metadata_snapshot, query_info,\n                     context, processed_stage, max_block_size, num_streams);\n \n-                pipe_from_dst.addSimpleTransform([&](const Block & stream_header)\n+                if (!pipe_from_dst.empty())\n                 {\n-                    return std::make_shared<AddingMissedTransform>(stream_header, header_after_adding_defaults,\n-                        metadata_snapshot->getColumns(), context);\n-                });\n-\n-                pipe_from_dst.addSimpleTransform([&](const Block & stream_header)\n-                {\n-                    return std::make_shared<ConvertingTransform>(\n-                        stream_header, header, ConvertingTransform::MatchColumnsMode::Name);\n-                });\n+                    pipe_from_dst.addSimpleTransform([&](const Block & stream_header)\n+                    {\n+                        return std::make_shared<AddingMissedTransform>(stream_header, header_after_adding_defaults,\n+                            metadata_snapshot->getColumns(), context);\n+                    });\n+\n+                    pipe_from_dst.addSimpleTransform([&](const Block & stream_header)\n+                    {\n+                        return std::make_shared<ConvertingTransform>(\n+                            stream_header, header, ConvertingTransform::MatchColumnsMode::Name);\n+                    });\n+                }\n             }\n         }\n \n",
  "test_patch": "diff --git a/tests/queries/0_stateless/01514_empty_buffer_different_types.reference b/tests/queries/0_stateless/01514_empty_buffer_different_types.reference\nnew file mode 100644\nindex 000000000000..78981922613b\n--- /dev/null\n+++ b/tests/queries/0_stateless/01514_empty_buffer_different_types.reference\n@@ -0,0 +1,1 @@\n+a\ndiff --git a/tests/queries/0_stateless/01514_empty_buffer_different_types.sql b/tests/queries/0_stateless/01514_empty_buffer_different_types.sql\nnew file mode 100644\nindex 000000000000..3afadbcd33f1\n--- /dev/null\n+++ b/tests/queries/0_stateless/01514_empty_buffer_different_types.sql\n@@ -0,0 +1,12 @@\n+set send_logs_level = 'error';\n+\n+DROP TABLE IF EXISTS merge_tree_table1;\n+CREATE TABLE merge_tree_table1 (`s` LowCardinality(String), x UInt32) ENGINE = MergeTree ORDER BY x settings index_granularity = 1;\n+CREATE TABLE buffer_table1 ( `s` String , x UInt32) ENGINE = Buffer(currentDatabase(), 'merge_tree_table1', 16, 10, 60, 10, 1000, 1048576, 2097152);\n+SELECT s FROM buffer_table1;\n+\n+insert into merge_tree_table1 values ('a', 1);\n+select s from buffer_table1 where x = 1;\n+select s from buffer_table1 where x = 2;\n+\n+DROP TABLE IF EXISTS merge_tree_table1;\n",
  "problem_statement": "After upgrade from 20.3 to 20.8 Engine=Buffer  raise Code: 49. DB::Exception: Cannot add simple transform to empty Pipe\n**Describe the issue**\r\nafter succesful update clickhouse from 20.3 to 20.8\r\n\r\na SELECT query which combine `FROM buffer_table` and  `WHERE dictGet` and `filter by date` which doesn't contains data on original MergeTree table, fail with \r\nCode: 49. DB::Exception: Cannot add simple transform to empty Pipe\r\n\r\n**How to reproduce**\r\n```\r\ngit clone git@gist.github.com:8a8bb43c43b6257a013753d1ac51c978.git\r\ndocker-compose up -d\r\ndocker-compose exec clickhouse bash -c \"clickhouse-client -mn --echo < /var/lib/clickhouse/user_files/success_query.sql\"\r\ndocker-compose exec clickhouse bash -c \"clickhouse-client -mn --echo < /var/lib/clickhouse/user_files/failed_query.sql\"\r\ndiff -u failed_query.sql success_query.sql\r\nless clickhouse-server.log\r\n```\r\n\r\n* Which ClickHouse server versions are incompatible\r\nfailure become in 20.8+\r\n\r\n* `CREATE TABLE` statements for all tables involved\r\nhttps://gist.github.com/Slach/8a8bb43c43b6257a013753d1ac51c978#file-init_schema-sql\r\n\r\n* Queries to run that lead to unexpected result\r\nhttps://gist.github.com/Slach/8a8bb43c43b6257a013753d1ac51c978#file-failed_query-sql\r\n\r\n**Error message and/or stacktrace**\r\n#### 20.8 stacktrace\r\n```\r\n2020.10.02 10:08:31.985110 [ 190 ] {1f7e7c9d-86ed-4e5f-a55f-20c045b6c044} <Error> executeQuery: Code: 49, e.displayText() = DB::Exception: Cannot add simple transform to empty Pipe. (version 20.8.3.18 (official build)) (from 127.0.0.1:52718) (in query: SELECT toDate(i.event_date) AS day, coalesce(sum(i.cost), 0) AS pcost FROM wister.rtb_and_mb_left_join_raw_data_buffer i WHERE dictGet('wister.dict_prod_partner_affiliate_links','partner_id',tuple(i.code_affilie))>0 AND i.event_date >= now() - INTERVAL 30 DAY AND i.event_date < now() - INTERVAL 7 DAY GROUP BY day; ), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x1a80cd70 in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0xff9e75d in /usr/bin/clickhouse\r\n2. ? @ 0x17efbaf8 in /usr/bin/clickhouse\r\n3. DB::Pipe::addSimpleTransform(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&) @ 0x17ef55c8 in /usr/bin/clickhouse\r\n4. DB::StorageBuffer::read(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, DB::Context const&, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0x17ae992f in /usr/bin/clickhouse\r\n5. DB::ReadFromStorageStep::ReadFromStorageStep(std::__1::shared_ptr<DB::RWLockImpl::LockHolderImpl>, std::__1::shared_ptr<DB::StorageInMemoryMetadata const>&, DB::SelectQueryOptions, std::__1::shared_ptr<DB::IStorage>, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, DB::SelectQueryInfo const&, std::__1::shared_ptr<DB::Context>, DB::QueryProcessingStage::Enum, unsigned long, unsigned long) @ 0x181e870a in /usr/bin/clickhouse\r\n6. DB::InterpreterSelectQuery::executeFetchColumns(DB::QueryProcessingStage::Enum, DB::QueryPlan&, std::__1::shared_ptr<DB::PrewhereInfo> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x174b9321 in /usr/bin/clickhouse\r\n7. DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>) @ 0x174bd1b2 in /usr/bin/clickhouse\r\n8. DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x174be964 in /usr/bin/clickhouse\r\n9. DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x1763b478 in /usr/bin/clickhouse\r\n10. DB::InterpreterSelectWithUnionQuery::execute() @ 0x1763b64a in /usr/bin/clickhouse\r\n11. ? @ 0x177d9262 in /usr/bin/clickhouse\r\n12. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0x177dabc2 in /usr/bin/clickhouse\r\n13. DB::TCPHandler::runImpl() @ 0x17ea1a25 in /usr/bin/clickhouse\r\n14. DB::TCPHandler::run() @ 0x17ea2790 in /usr/bin/clickhouse\r\n15. Poco::Net::TCPServerConnection::start() @ 0x1a72abdb in /usr/bin/clickhouse\r\n16. Poco::Net::TCPServerDispatcher::run() @ 0x1a72b06b in /usr/bin/clickhouse\r\n17. Poco::PooledThread::run() @ 0x1a8a9b46 in /usr/bin/clickhouse\r\n18. Poco::ThreadImpl::runnableEntry(void*) @ 0x1a8a4f40 in /usr/bin/clickhouse\r\n19. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n20. clone @ 0x122103 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n```\r\n#### 20.9 stacktrace\r\n```\r\n2020.10.02 10:15:35.950777 [ 190 ] {791d4417-a240-4a2a-b10f-a16e4af49804} <Error> executeQuery: Code: 49, e.displayText() = DB::Exception: Cannot add simple transform to empty Pipe. (version 20.9.2.20 (official build)) (from 127.0.0.1:52732) (in query: SELECT toDate(i.event_date) AS day, coalesce(sum(i.cost), 0) AS pcost FROM wister.rtb_and_mb_left_join_raw_data_buffer i WHERE dictGet('wister.dict_prod_partner_affiliate_links','partner_id',tuple(i.code_affilie))>0 AND i.event_date >= now() - INTERVAL 30 DAY AND i.event_date < now() - INTERVAL 7 DAY GROUP BY day; ), Stack trace (when copying this message, always include the lines below):\r\n\r\n0. Poco::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0x18e02790 in /usr/bin/clickhouse\r\n1. DB::Exception::Exception(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, int) @ 0xe72fdad in /usr/bin/clickhouse\r\n2. ? @ 0x1651b840 in /usr/bin/clickhouse\r\n3. DB::Pipe::addSimpleTransform(std::__1::function<std::__1::shared_ptr<DB::IProcessor> (DB::Block const&)> const&) @ 0x16514578 in /usr/bin/clickhouse\r\n4. DB::StorageBuffer::read(std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, std::__1::shared_ptr<DB::StorageInMemoryMetadata const> const&, DB::SelectQueryInfo const&, DB::Context const&, DB::QueryProcessingStage::Enum, unsigned long, unsigned int) @ 0x1611967f in /usr/bin/clickhouse\r\n5. DB::ReadFromStorageStep::ReadFromStorageStep(std::__1::shared_ptr<DB::RWLockImpl::LockHolderImpl>, std::__1::shared_ptr<DB::StorageInMemoryMetadata const>&, DB::SelectQueryOptions, std::__1::shared_ptr<DB::IStorage>, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&, DB::SelectQueryInfo const&, std::__1::shared_ptr<DB::Context>, DB::QueryProcessingStage::Enum, unsigned long, unsigned long) @ 0x167ed13a in /usr/bin/clickhouse\r\n6. DB::InterpreterSelectQuery::executeFetchColumns(DB::QueryProcessingStage::Enum, DB::QueryPlan&, std::__1::shared_ptr<DB::PrewhereInfo> const&, std::__1::vector<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::allocator<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > > > const&) @ 0x15b1dff1 in /usr/bin/clickhouse\r\n7. DB::InterpreterSelectQuery::executeImpl(DB::QueryPlan&, std::__1::shared_ptr<DB::IBlockInputStream> const&, std::__1::optional<DB::Pipe>) @ 0x15b21ec3 in /usr/bin/clickhouse\r\n8. DB::InterpreterSelectQuery::buildQueryPlan(DB::QueryPlan&) @ 0x15b239b4 in /usr/bin/clickhouse\r\n9. DB::InterpreterSelectWithUnionQuery::buildQueryPlan(DB::QueryPlan&) @ 0x15c9d6f8 in /usr/bin/clickhouse\r\n10. DB::InterpreterSelectWithUnionQuery::execute() @ 0x15c9d8ca in /usr/bin/clickhouse\r\n11. ? @ 0x15e1ac62 in /usr/bin/clickhouse\r\n12. DB::executeQuery(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, DB::Context&, bool, DB::QueryProcessingStage::Enum, bool) @ 0x15e1c5c2 in /usr/bin/clickhouse\r\n13. DB::TCPHandler::runImpl() @ 0x164c3585 in /usr/bin/clickhouse\r\n14. DB::TCPHandler::run() @ 0x164c42f0 in /usr/bin/clickhouse\r\n15. Poco::Net::TCPServerConnection::start() @ 0x18d205fb in /usr/bin/clickhouse\r\n16. Poco::Net::TCPServerDispatcher::run() @ 0x18d20a8b in /usr/bin/clickhouse\r\n17. Poco::PooledThread::run() @ 0x18e9f566 in /usr/bin/clickhouse\r\n18. Poco::ThreadImpl::runnableEntry(void*) @ 0x18e9a960 in /usr/bin/clickhouse\r\n19. start_thread @ 0x9609 in /usr/lib/x86_64-linux-gnu/libpthread-2.31.so\r\n20. __clone @ 0x122103 in /usr/lib/x86_64-linux-gnu/libc-2.31.so\r\n\r\n```\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\n",
  "hints_text": "code_affilie is LowCardinality(String) in MergeTree table and simple string in Buffer table. \r\n\r\nMinimal example:\r\n```sql\r\nDROP DATABASE IF EXISTS issue15529;\r\nCREATE DATABASE issue15529;\r\nCREATE TABLE issue15529.merge_tree_table1 (`s` LowCardinality(String)) ENGINE = MergeTree ORDER BY tuple();\r\nCREATE TABLE issue15529.buffer_table1 ( `s` String ) ENGINE = Buffer('issue15529', 'merge_tree_table1', 16, 10, 60, 10, 1000, 1048576, 2097152);\r\nSELECT * FROM issue15529.buffer_table1;\r\n```\r\n\r\nOriginal example isolated:\r\n```sql\r\nDROP DATABASE IF EXISTS issue15529_2;\r\nCREATE DATABASE issue15529_2;\r\n\r\nCREATE TABLE issue15529_2.dict_source engine=Log as select 'a' as code_affilie, toUInt32(1) as partner_id;\r\n\r\nCREATE DICTIONARY issue15529_2.dict\r\n(\r\n    `code_affilie` String,\r\n    `partner_id` Int32\r\n)\r\nPRIMARY KEY code_affilie\r\nSOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' TABLE 'dict_source' PASSWORD '' DB 'issue15529_2'))\r\nLIFETIME(MIN 300 MAX 600)\r\nLAYOUT(COMPLEX_KEY_HASHED());\r\n\r\nCREATE TABLE issue15529_2.merge_tree_table\r\n(\r\n    `event_date` Date DEFAULT toDate('0000-00-00'),\r\n    `import_date` DateTime DEFAULT toDateTime(now()),\r\n    `code_affilie` LowCardinality(String) DEFAULT '',\r\n    `cost` Decimal(18, 10)\r\n)\r\nENGINE = ReplacingMergeTree(import_date)\r\nPARTITION BY toYYYYMM(event_date)\r\nORDER BY event_date\r\nSETTINGS index_granularity = 8192;\r\n\r\nCREATE TABLE issue15529_2.buffer_table\r\n(\r\n    `event_date` Date DEFAULT toDate('0000-00-00'),\r\n    `import_date` DateTime DEFAULT toDateTime(now()),\r\n    `code_affilie` String DEFAULT '',\r\n    `cost` Decimal(18, 10)\r\n)\r\nENGINE = Buffer('issue15529_2', 'merge_tree_table', 16, 0, 1, 0, 1, 0, 1);\r\n\r\nINSERT INTO issue15529_2.buffer_table VALUES(toDate(now()), now(), 'code_affilie', 1);\r\n\r\n-- ok\r\nSELECT toDate(i.event_date) AS day,\r\n    coalesce(sum(i.cost), 0) AS pcost\r\nFROM issue15529_2.buffer_table i\r\nWHERE dictGet('issue15529_2.dict','partner_id',tuple(i.code_affilie))>0\r\n    AND i.event_date >= now() - INTERVAL 7 DAY\r\n    AND i.event_date < now() + INTERVAL 7 DAY\r\nGROUP BY day;\r\n\r\n-- failed\r\nSELECT toDate(i.event_date) AS day,\r\n    coalesce(sum(i.cost), 0) AS pcost\r\nFROM issue15529_2.buffer_table i\r\nWHERE dictGet('issue15529_2.dict','partner_id',tuple(i.code_affilie))>0\r\n    AND i.event_date >= now() - INTERVAL 30 DAY\r\n    AND i.event_date < now() - INTERVAL 7 DAY\r\nGROUP BY day;\r\n```\nI think different types were used to try to workaround https://github.com/ClickHouse/ClickHouse/issues/11940#issuecomment-658823143 ",
  "created_at": "2020-10-06T10:39:51Z",
  "modified_files": [
    "src/Storages/StorageBuffer.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/01514_empty_buffer_different_types.reference",
    "b/tests/queries/0_stateless/01514_empty_buffer_different_types.sql"
  ]
}