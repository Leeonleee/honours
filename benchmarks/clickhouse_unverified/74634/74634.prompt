You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Logical Error: minmax_count projection can only have keys about partition columns. It's a bug
### Describe the bug

Easy to reproduce. Create a table with `EXISTS` in the PARTITION BY clause.

### How to reproduce

Run Fiddle: https://fiddle.clickhouse.com/a0ceaaee-f238-4687-8ef9-9f91a95c2830

### Error message and/or stacktrace

Stack trace:
```
<Fatal> : Logical error: 'minmax_count projection can only have keys about partition columns. It's a bug'.
<Fatal> : Stack trace (when copying this message, always include the lines below):

0. std::exception::exception[abi:ne180100]() @ 0x00000000195859f4
1. base/poco/Foundation/src/Exception.cpp:27: Poco::Exception::Exception(String const&, int) @ 0x000000003a5ca180
2. src/Common/Exception.cpp:105: DB::Exception::Exception(DB::Exception::MessageMasked&&, int, bool) @ 0x000000002628b30b
3. DB::Exception::Exception(PreformattedMessage&&, int) @ 0x0000000019425956
4. DB::Exception::Exception<>(int, FormatStringHelperImpl<>) @ 0x000000001943cb4f
5. src/Storages/ProjectionsDescription.cpp:257: DB::ProjectionDescription::getMinMaxCountProjection(DB::ColumnsDescription const&, std::shared_ptr<DB::IAST>, std::vector<String, std::allocator<String>> const&, absl::InlinedVector<std::shared_ptr<DB::IAST>, 7ul, std::allocator<std::shared_ptr<DB::IAST>>> const&, std::shared_ptr<DB::Context const>) @ 0x00000000351b9cfc
6. src/Storages/MergeTree/registerStorageMergeTree.cpp:678: DB::create(DB::StorageFactory::Arguments const&) @ 0x0000000035fdc294
7. contrib/llvm-project/libcxx/include/__functional/function.h:714: ? @ 0x0000000035221d3f
8. src/Interpreters/InterpreterCreateQuery.cpp:1910: DB::InterpreterCreateQuery::doCreateTable(DB::ASTCreateQuery&, DB::InterpreterCreateQuery::TableProperties const&, std::unique_ptr<DB::DDLGuard, std::default_delete<DB::DDLGuard>>&, DB::LoadingStrictnessLevel) @ 0x00000000325cc893
9. src/Interpreters/InterpreterCreateQuery.cpp:1722: DB::InterpreterCreateQuery::createTable(DB::ASTCreateQuery&) @ 0x00000000325c1cef
10. src/Interpreters/InterpreterCreateQuery.cpp:2301: DB::InterpreterCreateQuery::execute() @ 0x00000000325d7ca5
11. src/Interpreters/executeQuery.cpp:1441: DB::executeQueryImpl(char const*, char const*, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum, DB::ReadBuffer*) @ 0x00000000330bd535
12. src/Interpreters/executeQuery.cpp:1608: DB::executeQuery(String const&, std::shared_ptr<DB::Context>, DB::QueryFlags, DB::QueryProcessingStage::Enum) @ 0x00000000330b74ce
13. src/Server/TCPHandler.cpp:658: DB::TCPHandler::runImpl() @ 0x000000003648945c
14. src/Server/TCPHandler.cpp:2625: DB::TCPHandler::run() @ 0x00000000364b7aee
15. base/poco/Net/src/TCPServerConnection.cpp:40: Poco::Net::TCPServerConnection::start() @ 0x000000003a6f4202
16. base/poco/Net/src/TCPServerDispatcher.cpp:115: Poco::Net::TCPServerDispatcher::run() @ 0x000000003a6f4ed2
17. base/poco/Foundation/src/ThreadPool.cpp:205: Poco::PooledThread::run() @ 0x000000003a65ee17
18. base/poco/Foundation/src/Thread_POSIX.cpp:335: Poco::ThreadImpl::runnableEntry(void*) @ 0x000000003a65a84e
19. ? @ 0x00007ffff7ca1e2e
20. ? @ 0x00007ffff7d33a4c
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
