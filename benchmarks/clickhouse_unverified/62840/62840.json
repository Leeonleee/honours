{
  "repo": "ClickHouse/ClickHouse",
  "pull_number": 62840,
  "instance_id": "ClickHouse__ClickHouse-62840",
  "issue_numbers": [
    "62794"
  ],
  "base_commit": "d8b3b48a25f8b1c33cf2c32f73d10c23a96dc1cd",
  "patch": "diff --git a/src/Functions/formatRow.cpp b/src/Functions/formatRow.cpp\nindex 1ac6becfb15f..5a67ce158a7e 100644\n--- a/src/Functions/formatRow.cpp\n+++ b/src/Functions/formatRow.cpp\n@@ -38,8 +38,14 @@ class FunctionFormatRow : public IFunction\n         : format_name(std::move(format_name_))\n         , arguments_column_names(std::move(arguments_column_names_))\n         , context(std::move(context_))\n+        , format_settings(getFormatSettings(context))\n     {\n         FormatFactory::instance().checkFormatName(format_name);\n+\n+        /// We don't need handling exceptions while formatting as a row.\n+        /// But it can be enabled in query sent via http interface.\n+        format_settings.json.valid_output_on_exception = false;\n+        format_settings.xml.valid_output_on_exception = false;\n     }\n \n     String getName() const override { return name; }\n@@ -68,7 +74,6 @@ class FunctionFormatRow : public IFunction\n         }\n \n         materializeBlockInplace(arg_columns);\n-        auto format_settings = getFormatSettings(context);\n         auto out = FormatFactory::instance().getOutputFormat(format_name, buffer, arg_columns, context, format_settings);\n \n         /// This function make sense only for row output formats.\n@@ -104,6 +109,7 @@ class FunctionFormatRow : public IFunction\n     String format_name;\n     Names arguments_column_names;\n     ContextPtr context;\n+    FormatSettings format_settings;\n };\n \n template <bool no_newline>\n",
  "test_patch": "diff --git a/tests/queries/0_stateless/03129_format_row_json_http.reference b/tests/queries/0_stateless/03129_format_row_json_http.reference\nnew file mode 100644\nindex 000000000000..02f4f51d5000\n--- /dev/null\n+++ b/tests/queries/0_stateless/03129_format_row_json_http.reference\n@@ -0,0 +1,15 @@\n+{\"number\":\"0\"}\\n\n+{\"number\":\"1\"}\\n\n+{\"number\":\"2\"}\\n\n+{\"number\":\"3\"}\\n\n+{\"number\":\"4\"}\\n\n+{\"number\":\"5\"}\\n\n+{\"number\":\"6\"}\\n\n+{\"number\":\"7\"}\\n\n+{\"number\":\"8\"}\\n\n+{\"number\":\"9\"}\\n\n+{\"number\":\"10\"}\\n\n+{\"number\":\"11\"}\\n\n+{\"number\":\"12\"}\\n\n+{\"number\":\"13\"}\\n\n+{\"number\":\"14\"}\\n\ndiff --git a/tests/queries/0_stateless/03129_format_row_json_http.sh b/tests/queries/0_stateless/03129_format_row_json_http.sh\nnew file mode 100755\nindex 000000000000..729a5ef563f5\n--- /dev/null\n+++ b/tests/queries/0_stateless/03129_format_row_json_http.sh\n@@ -0,0 +1,7 @@\n+#!/usr/bin/env bash\n+\n+CUR_DIR=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\n+# shellcheck source=../shell_config.sh\n+. \"$CUR_DIR\"/../shell_config.sh\n+\n+$CLICKHOUSE_CURL -sS \"$CLICKHOUSE_URL\" --data-binary \"SELECT formatRow('JSONEachRow', number) as test FROM (SELECT number FROM numbers(15))\"\n",
  "problem_statement": "Segfault while running query with formatRow\n**Describe what's wrong**\r\n\r\nRunning the following query against the HTTP endpoint will cause clickhouse to segfault:\r\n```\r\nSELECT formatRow('JSONEachRow', number) as test FROM (SELECT number FROM numbers(1000000))\r\n```\r\nWhen you run with less numbers it will not crash but give weird results:\r\n```\r\n\u276f curl http://localhost:8123 -d \"SELECT formatRow('JSONEachRow', number) as test FROM (SELECT number FROM numbers(15))\"\r\n{\"number\":\"0\"}\\n\r\n{\"number\":\"1\"}\\n\r\n{\"number\":\"2\"}\\n\r\n{\"number\":\"3\"}\\n\r\n{\"number\":\"4\"}\\n\r\n{\"number\":\"5\"}\\n\r\n{\"number\":\"6\"}\\n\r\n{\"number\":\"7\"}\\n\r\n{\"number\":\"8\"}\\n\r\n{\"number\":\"9\"}\\n\r\n{\"number\":\"10\"}\\n\r\n{\"number\":\"11\"}\\0\r\n\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\ufffd\ufffd\r\n\ufffd\ufffd\ufffd\\0\\0\ufffd\ufffd|\ufffd\ufffd\ufffd\\0\\0\\0\\0\\0\r\n\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\r\n```\r\n\r\nRunning the query with clickhouse-client seems to work fine.\r\n\r\nUsing `FORMAT` also works fine:\r\n```\r\n\u276f curl http://localhost:8123 -d \"SELECT number FROM numbers(100000) FORMAT JSONEachRow\"\r\n...\r\n{\"number\":\"99998\"}\r\n{\"number\":\"99999\"}\r\n```\r\n\r\n**Does it reproduce on the most recent release?**\r\n\r\nYes.\r\n\r\n**How to reproduce**\r\n\r\nRun the latest image\r\n```\r\ndocker run -p 8123:8123 clickhouse/clickhouse-server:latest\r\n```\r\nThen run the query using the HTTP endpoint:\r\n```\r\ncurl http://localhost:8123 -d \"SELECT formatRow('JSONEachRow', number) as test FROM (SELECT number FROM numbers(1000000))\"\r\n```\r\n\r\nAs soon as you run it, the container will exit with exit code 139.\n",
  "hints_text": "```\r\n==31891==WARNING: MemorySanitizer: use-of-uninitialized-value\r\n2024.04.19 13:39:51.000296 [ 32526 ] {} <Trace> AsynchronousMetrics: MemoryTracking: was 611.06 MiB, peak 611.06 MiB, free memory in arenas 0.00 B, will set to 637.82 MiB (RSS), difference: 26.76 MiB\r\n    #0 0x5d68b652a22e in void DB::writeAnyEscapedString<(char)39, false, true>(char const*, char const*, DB::WriteBuffer&) (/mnt/ch/ClickHouse/build_msan_public/programs/clickhouse+0x8b5222e) (BuildId: d4f4e861ed3df660a192b3c3f8b27ff8e4865fb8)\r\n    #1 0x5d68ded3b367 in DB::writeEscapedString(char const*, unsigned long, DB::WriteBuffer&) build_msan_public/./src/IO/WriteHelpers.h:574:5\r\n    #2 0x5d68ded3b367 in DB::writeEscapedString(std::__1::basic_string_view<char, std::__1::char_traits<char>>, DB::WriteBuffer&) build_msan_public/./src/IO/WriteHelpers.h:579:5\r\n    #3 0x5d68ded3b367 in DB::SerializationString::serializeTextEscaped(DB::IColumn const&, unsigned long, DB::WriteBuffer&, DB::FormatSettings const&) const build_msan_public/./src/DataTypes/Serializations/SerializationString.cpp:271:5\r\n    #4 0x5d68e7dfc163 in DB::TabSeparatedRowOutputFormat::writeField(DB::IColumn const&, DB::ISerialization const&, unsigned long) build_msan_public/./src/Processors/Formats/Impl/TabSeparatedRowOutputFormat.cpp\r\n    #5 0x5d68e75c4566 in DB::IRowOutputFormat::write(std::__1::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::__1::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn>>> const&, unsigned long) build_msan_public/./src/Processors/Formats/IRowOutputFormat.cpp:78:9\r\n    #6 0x5d68e75c3d8d in DB::IRowOutputFormat::consume(DB::Chunk) build_msan_public/./src/Processors/Formats/IRowOutputFormat.cpp:31:9\r\n    #7 0x5d68e7b00099 in DB::ParallelFormattingOutputFormat::formatterThreadFunction(unsigned long, unsigned long, std::__1::shared_ptr<DB::ThreadGroup> const&) build_msan_public/./src/Processors/Formats/Impl/ParallelFormattingOutputFormat.cpp:235:32\r\n    #8 0x5d68e7b02f42 in DB::ParallelFormattingOutputFormat::scheduleFormatterThreadForUnitWithNumber(unsigned long, unsigned long)::'lambda'()::operator()() const build_msan_public/./src/Processors/Formats/Impl/ParallelFormattingOutputFormat.h:300:13\r\n    #9 0x5d68e7b02f42 in decltype(std::declval<DB::ParallelFormattingOutputFormat::scheduleFormatterThreadForUnitWithNumber(unsigned long, unsigned long)::'lambda'()&>()()) std::__1::__invoke[abi:v15000]<DB::ParallelFormattingOutputFormat::scheduleFormatterThreadForUnitWithNumber(unsigned long, unsigned long)::'lambda'()&>(DB::ParallelFormattingOutputFormat::scheduleFormatterThreadForUnitWithNumber(unsigned long, unsigned long)::'lambda'()&) build_msan_public/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23\r\n    #10 0x5d68e7b02f42 in void std::__1::__invoke_void_return_wrapper<void, true>::__call<DB::ParallelFormattingOutputFormat::scheduleFormatterThreadForUnitWithNumber(unsigned long, unsigned long)::'lambda'()&>(DB::ParallelFormattingOutputFormat::scheduleFormatterThreadForUnitWithNumber(unsigned long, unsigned long)::'lambda'()&) build_msan_public/./contrib/llvm-project/libcxx/include/__functional/invoke.h:479:9\r\n    #11 0x5d68e7b02f42 in std::__1::__function::__default_alloc_func<DB::ParallelFormattingOutputFormat::scheduleFormatterThreadForUnitWithNumber(unsigned long, unsigned long)::'lambda'(), void ()>::operator()[abi:v15000]() build_msan_public/./contrib/llvm-project/libcxx/include/__functional/function.h:235:12\r\n    #12 0x5d68e7b02f42 in void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<DB::ParallelFormattingOutputFormat::scheduleFormatterThreadForUnitWithNumber(unsigned long, unsigned long)::'lambda'(), void ()>>(std::__1::__function::__policy_storage const*) build_msan_public/./contrib/llvm-project/libcxx/include/__functional/function.h:716:16\r\n    #13 0x5d68cc42358e in std::__1::__function::__policy_func<void ()>::operator()[abi:v15000]() const build_msan_public/./contrib/llvm-project/libcxx/include/__functional/function.h:848:16\r\n    #14 0x5d68cc42358e in std::__1::function<void ()>::operator()() const build_msan_public/./contrib/llvm-project/libcxx/include/__functional/function.h:1187:12\r\n    #15 0x5d68cc42358e in ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::worker(std::__1::__list_iterator<ThreadFromGlobalPoolImpl<false, true>, void*>) build_msan_public/./src/Common/ThreadPool.cpp:458:13\r\n    #16 0x5d68cc42e252 in void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const build_msan_public/./src/Common/ThreadPool.cpp:220:73\r\n    #17 0x5d68cc42e252 in decltype(std::declval<void>()()) std::__1::__invoke[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()&>(void&&) build_msan_public/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23\r\n    #18 0x5d68cc42e252 in decltype(auto) std::__1::__apply_tuple_impl[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>&, std::__1::__tuple_indices<>) build_msan_public/./contrib/llvm-project/libcxx/include/tuple:1789:1\r\n    #19 0x5d68cc42e252 in decltype(auto) std::__1::apply[abi:v15000]<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()&, std::__1::tuple<>&>(void&&, std::__1::tuple<>&) build_msan_public/./contrib/llvm-project/libcxx/include/tuple:1798:1\r\n    #20 0x5d68cc42e252 in ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()::operator()() build_msan_public/./src/Common/ThreadPool.h:246:13\r\n    #21 0x5d68cc42e05e in decltype(std::declval<void>()()) std::__1::__invoke[abi:v15000]<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(void&&) build_msan_public/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23\r\n    #22 0x5d68cc42e05e in void std::__1::__invoke_void_return_wrapper<void, true>::__call<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&>(ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'()&) build_msan_public/./contrib/llvm-project/libcxx/include/__functional/invoke.h:479:9\r\n    #23 0x5d68cc42e05e in std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>::operator()[abi:v15000]() build_msan_public/./contrib/llvm-project/libcxx/include/__functional/function.h:235:12\r\n    #24 0x5d68cc42e05e in void std::__1::__function::__policy_invoker<void ()>::__call_impl<std::__1::__function::__default_alloc_func<ThreadFromGlobalPoolImpl<false, true>::ThreadFromGlobalPoolImpl<void ThreadPoolImpl<ThreadFromGlobalPoolImpl<false, true>>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&)::'lambda'(), void ()>>(std::__1::__function::__policy_storage const*) build_msan_public/./contrib/llvm-project/libcxx/include/__functional/function.h:716:16\r\n    #25 0x5d68cc41abca in std::__1::__function::__policy_func<void ()>::operator()[abi:v15000]() const build_msan_public/./contrib/llvm-project/libcxx/include/__functional/function.h:848:16\r\n    #26 0x5d68cc41abca in std::__1::function<void ()>::operator()() const build_msan_public/./contrib/llvm-project/libcxx/include/__functional/function.h:1187:12\r\n    #27 0x5d68cc41abca in ThreadPoolImpl<std::__1::thread>::worker(std::__1::__list_iterator<std::__1::thread, void*>) build_msan_public/./src/Common/ThreadPool.cpp:458:13\r\n    #28 0x5d68cc42824a in void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()::operator()() const build_msan_public/./src/Common/ThreadPool.cpp:220:73\r\n    #29 0x5d68cc42824a in decltype(std::declval<void>()()) std::__1::__invoke[abi:v15000]<void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(void&&) build_msan_public/./contrib/llvm-project/libcxx/include/__functional/invoke.h:394:23\r\n    #30 0x5d68cc42824a in void std::__1::__thread_execute[abi:v15000]<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>(std::__1::tuple<void, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>&, std::__1::__tuple_indices<>) build_msan_public/./contrib/llvm-project/libcxx/include/thread:284:5\r\n    #31 0x5d68cc42824a in void* std::__1::__thread_proxy[abi:v15000]<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct>>, void ThreadPoolImpl<std::__1::thread>::scheduleImpl<void>(std::__1::function<void ()>, Priority, std::__1::optional<unsigned long>, bool)::'lambda0'()>>(void*) build_msan_public/./contrib/llvm-project/libcxx/include/thread:295:5\r\n    #32 0x785156e94ac2 in start_thread nptl/pthread_create.c:442:8\r\n    #33 0x785156f2684f  misc/../sysdeps/unix/sysv/linux/x86_64/clone3.S:81\r\n\r\n  Uninitialized value was created by a heap allocation\r\n2024.04.19 13:39:55.000208 [ 32526 ] {} <Trace> AsynchronousMetrics: MemoryTracking: was 638.19 MiB, peak 638.19 MiB, free memory in arenas 0.00 B, will set to 639.44 MiB (RSS), difference: 1.25 MiB\r\n    #0 0x5d68b527ed8a in realloc (/mnt/ch/ClickHouse/build_msan_public/programs/clickhouse+0x78a6d8a) (BuildId: d4f4e861ed3df660a192b3c3f8b27ff8e4865fb8)\r\n    #1 0x5d68cc11c2ed in Allocator<false, false>::realloc(void*, unsigned long, unsigned long, unsigned long) build_msan_public/./src/Common/Allocator.cpp:155:26\r\n    #2 0x5d68b52f7c6e in void DB::PODArrayBase<1ul, 4096ul, Allocator<false, false>, 63ul, 64ul>::resize<>(unsigned long) (/mnt/ch/ClickHouse/build_msan_public/programs/clickhouse+0x791fc6e) (BuildId: d4f4e861ed3df660a192b3c3f8b27ff8e4865fb8)\r\n    #3 0x5d68b5319e25 in DB::WriteBufferFromVector<DB::PODArray<char8_t, 4096ul, Allocator<false, false>, 63ul, 64ul>>::finalizeImpl() (/mnt/ch/ClickHouse/build_msan_public/programs/clickhouse+0x7941e25) (BuildId: d4f4e861ed3df660a192b3c3f8b27ff8e4865fb8)\r\n    #4 0x5d68b5310e4d in DB::WriteBuffer::finalize() (/mnt/ch/ClickHouse/build_msan_public/programs/clickhouse+0x7938e4d) (BuildId: d4f4e861ed3df660a192b3c3f8b27ff8e4865fb8)\r\n    #5 0x5d68bc3c5bca in DB::(anonymous namespace)::FunctionFormatRow<false>::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const formatRow.cpp\r\n    #6 0x5d68b6545d17 in DB::FunctionToExecutableFunctionAdaptor::executeImpl(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long) const (/mnt/ch/ClickHouse/build_msan_public/programs/clickhouse+0x8b6dd17) (BuildId: d4f4e861ed3df660a192b3c3f8b27ff8e4865fb8)\r\n    #7 0x5d68dcdeaa7c in DB::IExecutableFunction::executeWithoutLowCardinalityColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const build_msan_public/./src/Functions/IFunction.cpp:248:15\r\n    #8 0x5d68dcdec9a7 in DB::IExecutableFunction::executeWithoutSparseColumns(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const build_msan_public/./src/Functions/IFunction.cpp:303:22\r\n    #9 0x5d68dcdf2e45 in DB::IExecutableFunction::execute(std::__1::vector<DB::ColumnWithTypeAndName, std::__1::allocator<DB::ColumnWithTypeAndName>> const&, std::__1::shared_ptr<DB::IDataType const> const&, unsigned long, bool) const build_msan_public/./src/Functions/IFunction.cpp:378:16\r\n    #10 0x5d68dfbf8c31 in DB::executeAction(DB::ExpressionActions::Action const&, DB::(anonymous namespace)::ExecutionContext&, bool, bool) build_msan_public/./src/Interpreters/ExpressionActions.cpp:616:60\r\n    #11 0x5d68dfbf8c31 in DB::ExpressionActions::execute(DB::Block&, unsigned long&, bool, bool) const build_msan_public/./src/Interpreters/ExpressionActions.cpp:746:13\r\n    #12 0x5d68e7ef973d in DB::ExpressionTransform::transform(DB::Chunk&) build_msan_public/./src/Processors/Transforms/ExpressionTransform.cpp:23:17\r\n    #13 0x5d68d241f0a0 in DB::ISimpleTransform::transform(DB::Chunk&, DB::Chunk&) build_msan_public/./src/Processors/ISimpleTransform.h:32:9\r\n    #14 0x5d68e752c39d in DB::ISimpleTransform::work() build_msan_public/./src/Processors/ISimpleTransform.cpp:89:9\r\n    #15 0x5d68e759be76 in DB::executeJob(DB::ExecutingGraph::Node*, DB::ReadProgressCallback*) build_msan_public/./src/Processors/Executors/ExecutionThreadContext.cpp:47:26\r\n    #16 0x5d68e759be76 in DB::ExecutionThreadContext::executeTask() build_msan_public/./src/Processors/Executors/ExecutionThreadContext.cpp:95:9\r\n    #17 0x5d68e756b546 in DB::PipelineExecutor::executeStepImpl(unsigned long, std::__1::atomic<bool>*) build_msan_public/./src/Processors/Executors/PipelineExecutor.cpp:273:26\r\n    #18 0x5d68e756b546 in DB::PipelineExecutor::executeSingleThread(unsigned long) build_msan_public/./src/Processors/Executors/PipelineExecutor.cpp:239:5\r\n    #19 0x5d68e75677e3 in DB::PipelineExecutor::executeImpl(unsigned long, bool) build_msan_public/./src/Processors/Executors/PipelineExecutor.cpp:411:9\r\n    #20 0x5d68e7567247 in DB::PipelineExecutor::execute(unsigned long, bool) build_msan_public/./src/Processors/Executors/PipelineExecutor.cpp:111:9\r\n    #21 0x5d68e756349e in DB::CompletedPipelineExecutor::execute() build_msan_public/./src/Processors/Executors/CompletedPipelineExecutor.cpp:110:18\r\n    #22 0x5d68e354ad95 in DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, std::__1::shared_ptr<DB::Context>, std::__1::function<void (DB::QueryResultDetails const&)>, DB::QueryFlags, std::__1::optional<DB::FormatSettings> const&, std::__1::function<void (DB::IOutputFormat&, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, std::__1::shared_ptr<DB::Context const> const&, std::__1::optional<DB::FormatSettings> const&)>) build_msan_public/./src/Interpreters/executeQuery.cpp:1596:22\r\n\r\nSUMMARY: MemorySanitizer: use-of-uninitialized-value (/mnt/ch/ClickHouse/build_msan_public/programs/clickhouse+0x8b5222e) (BuildId: d4f4e861ed3df660a192b3c3f8b27ff8e4865fb8) in void DB::writeAnyEscapedString<(char)39, false, true>(char const*, char const*, DB::WriteBuffer&)\r\nExiting\r\n2024.04.19 13:39:55.022309 [ 31893 ] {} <Trace> BaseDaemon: Received signal -3\r\n2024.04.19 13:39:55.023071 [ 32570 ] {} <Fatal> BaseDaemon: ########## Short fault info ############\r\n2024.04.19 13:39:55.023425 [ 32570 ] {} <Fatal> BaseDaemon: (version 24.4.1.1, build id: D4F4E861ED3DF660A192B3C3F8B27FF8E4865FB8, git hash: c83fc0b2805767cf08885e1730bae19432f5d25f) (from thread 32557) Received signal -3\r\n2024.04.19 13:39:55.023631 [ 32570 ] {} <Fatal> BaseDaemon: Signal description: sanitizer trap\r\n2024.04.19 13:39:55.023806 [ 32570 ] {} <Fatal> BaseDaemon: Sanitizer trap.\r\n2024.04.19 13:39:55.023989 [ 32570 ] {} <Fatal> BaseDaemon: Stack trace: 0x00005d68cc27a45b 0x00005d68cca54e9d 0x00005d68cca4c24f 0x00005d68b525e4d6 0x00005d68b526fa33 0x00005d68b652a22f 0x00005d68ded3b368 0x00005d68e7dfc164 0x00005d68e75c4567 0x00005d68e75c3d8e 0x00005d68e7b0009a 0x00005d68e7b02f43 0x00005d68cc42358f 0x00005d68cc42e253 0x00005d68cc42e05f 0x00005d68cc41abcb 0x00005d68cc42824b 0x0000785156e94ac3 0x0000785156f26850\r\n2024.04.19 13:39:55.024167 [ 32570 ] {} <Fatal> BaseDaemon: ########################################\r\n2024.04.19 13:39:55.024326 [ 32570 ] {} <Fatal> BaseDaemon: (version 24.4.1.1, build id: D4F4E861ED3DF660A192B3C3F8B27FF8E4865FB8, git hash: c83fc0b2805767cf08885e1730bae19432f5d25f) (from thread 32557) (query_id: ba360351-0a5d-4957-947c-98b8fd92833f) (query: SELECT formatRow('JSONEachRow', number) as test FROM (SELECT number FROM numbers(15))) Received signal sanitizer trap (-3)\r\n2024.04.19 13:39:55.024468 [ 32570 ] {} <Fatal> BaseDaemon: Sanitizer trap.\r\n2024.04.19 13:39:55.024592 [ 32570 ] {} <Fatal> BaseDaemon: Stack trace: 0x00005d68cc27a45b 0x00005d68cca54e9d 0x00005d68cca4c24f 0x00005d68b525e4d6 0x00005d68b526fa33 0x00005d68b652a22f 0x00005d68ded3b368 0x00005d68e7dfc164 0x00005d68e75c4567 0x00005d68e75c3d8e 0x00005d68e7b0009a 0x00005d68e7b02f43 0x00005d68cc42358f 0x00005d68cc42e253 0x00005d68cc42e05f 0x00005d68cc41abcb 0x00005d68cc42824b 0x0000785156e94ac3 0x0000785156f26850\r\n2024.04.19 13:39:55.296821 [ 32570 ] {} <Fatal> BaseDaemon: 0. ./build_msan_public/./src/Common/StackTrace.cpp:347: StackTrace::tryCapture() @ 0x000000001e8a245b\r\n2024.04.19 13:39:56.000217 [ 32526 ] {} <Trace> AsynchronousMetrics: MemoryTracking: was 639.44 MiB, peak 639.44 MiB, free memory in arenas 0.00 B, will set to 658.94 MiB (RSS), difference: 19.50 MiB\r\n2024.04.19 13:39:56.049736 [ 32570 ] {} <Fatal> BaseDaemon: 1. ./src/Common/StackTrace.h:47: StackTrace::StackTrace() @ 0x000000001f07ce9d\r\n2024.04.19 13:39:56.707582 [ 32570 ] {} <Fatal> BaseDaemon: 2. ./build_msan_public/./src/Daemon/BaseDaemon.cpp:586: sanitizerDeathCallback() @ 0x000000001f07424f\r\n```",
  "created_at": "2024-04-22T11:40:06Z",
  "modified_files": [
    "src/Functions/formatRow.cpp"
  ],
  "modified_test_files": [
    "b/tests/queries/0_stateless/03129_format_row_json_http.reference",
    "b/tests/queries/0_stateless/03129_format_row_json_http.sh"
  ]
}