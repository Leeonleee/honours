You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Casting to JSON[] fails with extra double quotation (::JSON vs ::JSON[])
### What happens?

Lets say I try to turn this `r'[{"bar":"a","baz":"\"01.01.1"}]'` into a json array so that I can unnest it. The expected output would be `[r'[{"bar":"a","baz":"\"01.01.1"}]']` if I use ::JSON[] however instead I get: 

`duckdb.ConversionException: Conversion Error: Type VARCHAR with value '[{"bar":"a","baz":"\"01.01.1"}]' can't be cast to the destination type LIST`

If I instead remove the extra `"` DuckDB has no problems turning the VARCHAR into a list.

### To Reproduce

Minimal reproducible example:
```py
import duckdb # duckdb==0.8.1
import pandas as pd # pandas==2.0.1 but should not matter
import pytest # pytest==6.2.5 but should not matter
from duckdb import ConversionException


@pytest.fixture()
def get_input_data():
    # We are escaping the quote in the string to make it valid JSON.
    # Now we get an issue of not being able to convert VARCHAR to a LIST
    # unless we first convert it to a JSON object first.
    df = pd.DataFrame({"foo": [r'[{"bar":"a","baz":"\"01.01.1"}]']})
    return df


@pytest.fixture()
def get_expected_data():
    expected = pd.DataFrame({"col": [[r'{"bar":"a","baz":"\"01.01.1"}']]})
    return expected


@pytest.fixture()
def get_input_data_without_quote():
    df = pd.DataFrame({"foo": ['[{"bar":"a","baz":"01.01.1"}]']})
    return df


@pytest.fixture()
def get_expected_data_without_quote():
    expected = pd.DataFrame({"col": [[r'{"bar":"a","baz":"01.01.1"}']]})
    return expected


class TestDuckDBJson:
    def test_json_json_array(self, get_input_data, get_expected_data):
        # Positive test case of potential solution
        arr = [get_input_data]
        expected = get_expected_data
        for df in arr:  # noqa: F841
            con = duckdb.connect()
            actual = con.sql("""SELECT foo::JSON::JSON[] AS col FROM df""").to_df()
            print(actual.values[0], expected.values[0])
            assert actual.equals(expected)

    def test_json_array_fail(self, get_input_data, get_input_data_2):
        # Negative test case
        arr = [get_input_data, get_input_data_2]
        for df in arr:  # noqa: F841
            con = duckdb.connect()
            try:
                con.sql("""SELECT foo::json[] AS col FROM df""")
            except Exception as e:
                assert isinstance(e, ConversionException)

    def test_json_array_without_quote(self, get_input_data_without_quote, get_expected_data_without_quote):
        # Positive test case
        arr = [get_input_data_without_quote]
        expected = get_expected_data_without_quote
        for df in arr:  # noqa: F841
            con = duckdb.connect()
            actual = con.sql("""SELECT foo::JSON[] AS col FROM df""").to_df()
            print(actual.values[0], expected.values[0])
            assert actual.equals(expected)
```


### OS:

MacOS x64, Alpine x64

### DuckDB Version:

0.8.1

### DuckDB Client:

Python

### Full Name:

Timothy Lindblom

### Affiliation:

Northvolt

### Have you tried this on the latest `master` branch?

I have tested with a master build

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] Yes, I have
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
