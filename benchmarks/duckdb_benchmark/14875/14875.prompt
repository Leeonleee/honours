You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
`split_part` does not return `null` when first input is `null`
### What happens?

[`split_part`](https://duckdb.org/docs/sql/functions/char.html#split_partstring-separator-index) takes three arguments. The first is the string to split. The documentation states that index outside of range behavior for this function is designed to mimic Postgres behavior (and it does). However, Postgres returns `null` when the first input is `null` but DuckDB returns the empty string. This can cause hard-to-diagnose downstream effects, especially when the result of a `split_part` is used as a join key (empty strings match with other empty strings, but `null`s do not match with other `null`s).

### To Reproduce

Simple example:
```sql
.nullvalue NULL
create table foo (a varchar);
insert into foo values ('hello$there'), ('apples'), (''), (null);
select * from foo;
```
```
┌─────────────┐
│      a      │
│   varchar   │
├─────────────┤
│ hello$there │
│ apples      │
│             │
│ NULL        │
└─────────────┘
```
```sql
select count(*) from foo where a is not null;
```
```
┌──────────────┐
│ count_star() │
│    int64     │
├──────────────┤
│            3 │
└──────────────┘
```
```sql
select split_part(a, '$', -1) as s from foo;
```
```
┌─────────┐
│    s    │
│ varchar │
├─────────┤
│ there   │
│ apples  │
│         │
│         │
└─────────┘
```
```sql
select count(*) from foo where split_part(a, '$', -1) is not null;
```
```
┌──────────────┐
│ count_star() │
│    int64     │
├──────────────┤
│            4 │
└──────────────┘
```

Note that since the result of the last query was 4, the function value on `null` input was the empty string, not `null`. This differs from Postgres behavior as shown below:

```sql
postgres: create table foo (a varchar);
CREATE TABLE
postgres: insert into foo values ('hello$there'), ('apples'), (''), (null);
INSERT 0 4
postgres: select count(*) from foo where a is not null;
 count
-------
     3
(1 row)

postgres: select split_part(a, '$', -1) as s from foo;
   s
--------
 there
 apples


(4 rows)

postgres: select count(*) from foo where split_part(a, '$', -1) is not null;
 count
-------
     3
(1 row)
```

### OS:

Manjaro Linus x86_64

### DuckDB Version:

v1.1.1 af39bd0dcf

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Doeke Buursma

### Affiliation:

UDisc, LLC

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have
`split_part` does not return `null` when first input is `null`
### What happens?

[`split_part`](https://duckdb.org/docs/sql/functions/char.html#split_partstring-separator-index) takes three arguments. The first is the string to split. The documentation states that index outside of range behavior for this function is designed to mimic Postgres behavior (and it does). However, Postgres returns `null` when the first input is `null` but DuckDB returns the empty string. This can cause hard-to-diagnose downstream effects, especially when the result of a `split_part` is used as a join key (empty strings match with other empty strings, but `null`s do not match with other `null`s).

### To Reproduce

Simple example:
```sql
.nullvalue NULL
create table foo (a varchar);
insert into foo values ('hello$there'), ('apples'), (''), (null);
select * from foo;
```
```
┌─────────────┐
│      a      │
│   varchar   │
├─────────────┤
│ hello$there │
│ apples      │
│             │
│ NULL        │
└─────────────┘
```
```sql
select count(*) from foo where a is not null;
```
```
┌──────────────┐
│ count_star() │
│    int64     │
├──────────────┤
│            3 │
└──────────────┘
```
```sql
select split_part(a, '$', -1) as s from foo;
```
```
┌─────────┐
│    s    │
│ varchar │
├─────────┤
│ there   │
│ apples  │
│         │
│         │
└─────────┘
```
```sql
select count(*) from foo where split_part(a, '$', -1) is not null;
```
```
┌──────────────┐
│ count_star() │
│    int64     │
├──────────────┤
│            4 │
└──────────────┘
```

Note that since the result of the last query was 4, the function value on `null` input was the empty string, not `null`. This differs from Postgres behavior as shown below:

```sql
postgres: create table foo (a varchar);
CREATE TABLE
postgres: insert into foo values ('hello$there'), ('apples'), (''), (null);
INSERT 0 4
postgres: select count(*) from foo where a is not null;
 count
-------
     3
(1 row)

postgres: select split_part(a, '$', -1) as s from foo;
   s
--------
 there
 apples


(4 rows)

postgres: select count(*) from foo where split_part(a, '$', -1) is not null;
 count
-------
     3
(1 row)
```

### OS:

Manjaro Linus x86_64

### DuckDB Version:

v1.1.1 af39bd0dcf

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Doeke Buursma

### Affiliation:

UDisc, LLC

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
