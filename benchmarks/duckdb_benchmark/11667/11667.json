{
  "repo": "duckdb/duckdb",
  "pull_number": 11667,
  "instance_id": "duckdb__duckdb-11667",
  "issue_numbers": [
    "11469",
    "11469"
  ],
  "base_commit": "5bcfd7434790fabb0ea99998abb78e3a31bad47a",
  "patch": "diff --git a/src/planner/binder/expression/bind_unnest_expression.cpp b/src/planner/binder/expression/bind_unnest_expression.cpp\nindex 0883d5f29870..58d50a4603ed 100644\n--- a/src/planner/binder/expression/bind_unnest_expression.cpp\n+++ b/src/planner/binder/expression/bind_unnest_expression.cpp\n@@ -71,7 +71,7 @@ BindResult SelectBinder::BindUnnest(FunctionExpression &function, idx_t depth, b\n \t\t\tif (!function.children[i]->IsScalar()) {\n \t\t\t\tbreak;\n \t\t\t}\n-\t\t\tauto alias = function.children[i]->alias;\n+\t\t\tauto alias = StringUtil::Lower(function.children[i]->alias);\n \t\t\tBindChild(function.children[i], depth, error);\n \t\t\tif (error.HasError()) {\n \t\t\t\treturn BindResult(std::move(error));\n",
  "test_patch": "diff --git a/test/sql/types/list/recursive_unnest.test b/test/sql/types/list/recursive_unnest.test\nindex f8e1de0a394f..8b8cb53e3b25 100644\n--- a/test/sql/types/list/recursive_unnest.test\n+++ b/test/sql/types/list/recursive_unnest.test\n@@ -22,6 +22,15 @@ SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], recursive := true)\n 4\n 5\n \n+query I\n+SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], RECURSIVE := true)\n+----\n+1\n+2\n+3\n+4\n+5\n+\n query I\n SELECT UNNEST([[[[[1, 2], [3, 4]], [[5]]], [[[]]]]], max_depth := 1)\n ----\n",
  "problem_statement": "Named Function Parameters are Case Sensitive\n### What happens?\r\n\r\n`Unnest()` works with `resursive` but not with `RECURSIVE`.\r\n\r\nBut https://duckdb.org/docs/sql/keywords_and_identifiers states:\r\n> [Case-Sensitivity of Identifiers](https://duckdb.org/docs/sql/keywords_and_identifiers#case-sensitivity-of-identifiers)\r\n>\r\n>Following the convention of the SQL standard, identifiers in DuckDB are case-insensitive.\r\n\r\n### To Reproduce\r\n\r\n```sql\r\n-- works\r\nSELECT CORR(Y,X) AS RESULTS \r\nFROM( SELECT UNNEST([{Y:1.0,X:5.0},(3.0,9.0),(4.0,7.0)], recursive=>true));\r\n```\r\n```sql\r\n-- fails: Unsupported parameter \"RECURSIVE\" for unnest\r\nSELECT CORR(Y,X) AS RESULTS \r\nFROM( SELECT UNNEST([{Y:1.0,X:5.0},(3.0,9.0),(4.0,7.0)], RECURSIVE=>true));\r\n```\r\n\r\n**Please note**: Both statement fail on 0.11-Snapshot and you need to test against 0.10.0 release for verification.\r\n\r\n### OS:\r\n\r\nLinux\r\n\r\n### DuckDB Version:\r\n\r\n0.10.1\r\n\r\n### DuckDB Client:\r\n\r\nJava\r\n\r\n### Full Name:\r\n\r\nAndreas Reichel\r\n\r\n### Affiliation:\r\n\r\nmanticore-projects.com\r\n\r\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\r\n\r\nI have tested with a release build (and could not test with a nightly build)\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\nNamed Function Parameters are Case Sensitive\n### What happens?\r\n\r\n`Unnest()` works with `resursive` but not with `RECURSIVE`.\r\n\r\nBut https://duckdb.org/docs/sql/keywords_and_identifiers states:\r\n> [Case-Sensitivity of Identifiers](https://duckdb.org/docs/sql/keywords_and_identifiers#case-sensitivity-of-identifiers)\r\n>\r\n>Following the convention of the SQL standard, identifiers in DuckDB are case-insensitive.\r\n\r\n### To Reproduce\r\n\r\n```sql\r\n-- works\r\nSELECT CORR(Y,X) AS RESULTS \r\nFROM( SELECT UNNEST([{Y:1.0,X:5.0},(3.0,9.0),(4.0,7.0)], recursive=>true));\r\n```\r\n```sql\r\n-- fails: Unsupported parameter \"RECURSIVE\" for unnest\r\nSELECT CORR(Y,X) AS RESULTS \r\nFROM( SELECT UNNEST([{Y:1.0,X:5.0},(3.0,9.0),(4.0,7.0)], RECURSIVE=>true));\r\n```\r\n\r\n**Please note**: Both statement fail on 0.11-Snapshot and you need to test against 0.10.0 release for verification.\r\n\r\n### OS:\r\n\r\nLinux\r\n\r\n### DuckDB Version:\r\n\r\n0.10.1\r\n\r\n### DuckDB Client:\r\n\r\nJava\r\n\r\n### Full Name:\r\n\r\nAndreas Reichel\r\n\r\n### Affiliation:\r\n\r\nmanticore-projects.com\r\n\r\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\r\n\r\nI have tested with a release build (and could not test with a nightly build)\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2024-04-16T08:35:16Z",
  "modified_files": [
    "src/planner/binder/expression/bind_unnest_expression.cpp"
  ],
  "modified_test_files": [
    "test/sql/types/list/recursive_unnest.test"
  ]
}