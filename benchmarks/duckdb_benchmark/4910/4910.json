{
  "repo": "duckdb/duckdb",
  "pull_number": 4910,
  "instance_id": "duckdb__duckdb-4910",
  "issue_numbers": [
    "4855"
  ],
  "base_commit": "c2e70c43dfeb083aa6d00d676dc51634ec9dd87d",
  "patch": "diff --git a/src/function/scalar/list/list_lambdas.cpp b/src/function/scalar/list/list_lambdas.cpp\nindex d3a3f7671727..b5577c538df5 100644\n--- a/src/function/scalar/list/list_lambdas.cpp\n+++ b/src/function/scalar/list/list_lambdas.cpp\n@@ -145,6 +145,15 @@ static void ListLambdaFunction(DataChunk &args, ExpressionState &state, Vector &\n \t\treturn;\n \t}\n \n+\t// e.g. window functions in sub queries return dictionary vectors, which segfault on expression execution\n+\t// if not flattened first\n+\tfor (idx_t i = 1; i < args.ColumnCount(); i++) {\n+\t\tif (args.data[i].GetVectorType() != VectorType::FLAT_VECTOR &&\n+\t\t    args.data[i].GetVectorType() != VectorType::CONSTANT_VECTOR) {\n+\t\t\targs.data[i].Flatten(count);\n+\t\t}\n+\t}\n+\n \t// get the lists data\n \tUnifiedVectorFormat lists_data;\n \tlists.ToUnifiedFormat(count, lists_data);\n",
  "test_patch": "diff --git a/test/sql/function/list/lambdas/transform.test b/test/sql/function/list/lambdas/transform.test\nindex 6fdf34b94e7b..aa084fe19143 100644\n--- a/test/sql/function/list/lambdas/transform.test\n+++ b/test/sql/function/list/lambdas/transform.test\n@@ -238,4 +238,27 @@ SELECT list_transform([1, 2, 3], x -> x + #1) FROM range(10)\n [7, 8, 9]\n [8, 9, 10]\n [9, 10, 11]\n-[10, 11, 12]\n\\ No newline at end of file\n+[10, 11, 12]\n+\n+# test for issue 4855\n+\n+require vector_size 512\n+\n+statement ok\n+create table test(a int, b int);\n+\n+statement ok\n+insert into test values (1, 2), (1, 3), (1, 4), (2, 2), (2, 3), (2, 4), (3, 2), (3, 3), (3, 4);\n+\n+query III\n+select list_transform(bb, x->[x,b]), bb, b\n+from (select list(b) over wind as bb, first(b) over wind as b\n+    from test window wind as\n+        (order by a asc rows between 4 preceding and current row)\n+    qualify row_number() over wind >4);\n+----\n+[[2, 2], [3, 2], [4, 2], [2, 2], [3, 2]]\t[2, 3, 4, 2, 3]\t2\n+[[3, 3], [4, 3], [2, 3], [3, 3], [4, 3]]\t[3, 4, 2, 3, 4]\t3\n+[[4, 4], [2, 4], [3, 4], [4, 4], [2, 4]]\t[4, 2, 3, 4, 2]\t4\n+[[2, 2], [3, 2], [4, 2], [2, 2], [3, 2]]\t[2, 3, 4, 2, 3]\t2\n+[[3, 3], [4, 3], [2, 3], [3, 3], [4, 3]]\t[3, 4, 2, 3, 4]\t3\n\\ No newline at end of file\n",
  "problem_statement": "list_apply seems to be picking up the wrong value when using columnar values\n### What happens?\n\nexpect list_apply to work with columnar values, but it does not seem to be the case.\r\n\r\nin some cases, it seems to run into a segfault, but i cant seem to find a minimal example to reproduce the segfault.\r\n\r\nsuspect that fixing this might fix the seg fault error too.\n\n### To Reproduce\n\n```\r\ncreate table test(a int, b int);\r\ninsert into test values (1, 2), (1, 3), (1, 4);\r\ninsert into test values (2, 2), (2, 3), (2, 4);\r\ninsert into test values (3, 2), (3, 3), (3, 4);\r\n\r\nselect \r\nlist_apply(bb, x->[x,b]),\r\nbb, b\r\nfrom (select list(b) over wind as bb, first(b) over wind as b \r\n    from test window wind as \r\n        (order by a asc rows between 4 preceding and current row)\r\n    qualify row_number() over wind >4);\r\n```\r\n\r\n```\r\nzsh/3 699  (git)-[master]-% duckdb < testtest.sql\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2510\r\n\u2502 list_apply(bb, x -> main.list_value(x, b)) \u2502       bb        \u2502 b \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2524\r\n\u2502 [[2, 3], [3, 3], [4, 3], [2, 3], [3, 3]]   \u2502 [2, 3, 4, 2, 3] \u2502 2 \u2502\r\n\u2502 [[3, 2], [4, 2], [2, 2], [3, 2], [4, 2]]   \u2502 [3, 4, 2, 3, 4] \u2502 3 \u2502\r\n\u2502 [[4, 2], [2, 2], [3, 2], [4, 2], [2, 2]]   \u2502 [4, 2, 3, 4, 2] \u2502 4 \u2502\r\n\u2502 [[2, 2], [3, 2], [4, 2], [2, 2], [3, 2]]   \u2502 [2, 3, 4, 2, 3] \u2502 2 \u2502\r\n\u2502 [[3, 2], [4, 2], [2, 2], [3, 2], [4, 2]]   \u2502 [3, 4, 2, 3, 4] \u2502 3 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2518\r\n```\r\n\r\nexpects the b to be from that row, but seems like not that case.\n\n### OS:\n\nlinux\n\n### DuckDB Version:\n\nv0.5.1 7c111322d\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nmetta ong\n\n### Affiliation:\n\n-\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2022-10-07T09:23:03Z",
  "modified_files": [
    "src/function/scalar/list/list_lambdas.cpp"
  ],
  "modified_test_files": [
    "test/sql/function/list/lambdas/transform.test"
  ]
}