{
  "repo": "duckdb/duckdb",
  "pull_number": 15843,
  "instance_id": "duckdb__duckdb-15843",
  "issue_numbers": [
    "15570"
  ],
  "base_commit": "3b3e9683f927d2e02f86af5a20bed9328bef6f71",
  "patch": "diff --git a/src/planner/binder/tableref/bind_table_function.cpp b/src/planner/binder/tableref/bind_table_function.cpp\nindex 3f4c249bda23..26dd86c9dfd1 100644\n--- a/src/planner/binder/tableref/bind_table_function.cpp\n+++ b/src/planner/binder/tableref/bind_table_function.cpp\n@@ -203,7 +203,9 @@ unique_ptr<LogicalOperator> Binder::BindTableFunctionInternal(TableFunction &tab\n \t\t                                  table_function.function_info.get(), this, table_function, ref);\n \t\tif (table_function.bind_replace) {\n \t\t\tauto new_plan = table_function.bind_replace(context, bind_input);\n-\t\t\tif (new_plan != nullptr) {\n+\t\t\tif (new_plan) {\n+\t\t\t\tnew_plan->alias = ref.alias;\n+\t\t\t\tnew_plan->column_name_alias = ref.column_name_alias;\n \t\t\t\treturn CreatePlan(*Bind(*new_plan));\n \t\t\t} else if (!table_function.bind) {\n \t\t\t\tthrow BinderException(\"Failed to bind \\\"%s\\\": nullptr returned from bind_replace without bind function\",\n",
  "test_patch": "diff --git a/test/sql/catalog/function/query_function.test b/test/sql/catalog/function/query_function.test\nindex 0d65fa65b4ac..1ef00218e192 100644\n--- a/test/sql/catalog/function/query_function.test\n+++ b/test/sql/catalog/function/query_function.test\n@@ -249,6 +249,16 @@ FROM query_table('SELECT 4 + 2');\n ----\n Catalog Error: Table with name SELECT 4 + 2 does not exist!\n \n+query I\n+SELECT f.* FROM query_table('tbl_int') as f;\n+----\n+42\n+\n+query I\n+SELECT f.x FROM query_table('tbl_int') as f(x);\n+----\n+42\n+\n # test by_name argument\n query I\n FROM query_table(['tbl_int', 'tbl_varchar', 'tbl_empty', 'tbl2_varchar'], false);\n",
  "problem_statement": "Binder error when using query_table with an alias\n### What happens?\n\nGiving `query_table` an alias and referencing columns via that throws a `BinderError`, e.g.:\r\n```\r\nBinder Error: Referenced table \"f\" not found!\r\nCandidate tables: \"unnamed_subquery\"\r\nLINE 1: SELECT bar, f.baz FROM query_table('foo') as f;\r\n                    ^\r\n```\r\nReferencing `baz` without the alias works as expected. My guess would be that the alias is either dropped or pulled into a subquery (like `SELECT bar, f.baz FROM (FROM foo as f)`) when `query_table` is transformed.\n\n### To Reproduce\n\nRun with DuckDB CLI client:\r\n```sql\r\nCREATE TABLE foo AS SELECT 1 as bar, 2 as baz;\r\nSELECT bar, f.baz FROM query_table('foo') as f;\r\n```\r\n\r\nOutput:\r\n```\r\nBinder Error: Referenced table \"f\" not found!\r\nCandidate tables: \"unnamed_subquery\"\r\nLINE 1: SELECT bar, f.baz FROM query_table('foo') as f;\r\n                    ^\r\n```\n\n### OS:\n\n6.6.10-1-MANJARO, x86_64 GNU/Linux\n\n### DuckDB Version:\n\nv1.1.3 19864453f7\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nLennart Hensler\n\n### Affiliation:\n\nPrivate usage\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nNot applicable - the reproduction does not require a data set\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "The same is true for the `query` function:\n```sql\nSELECT q.a from query($$ SELECT 1 a $$) q;\n```\n```\nBinder Error: Referenced table \"q\" not found!\nCandidate tables: \"unnamed_subquery\"\nLINE 1: SELECT q.a from query($$ SELECT 1 a $$) q;\n               ^\n```",
  "created_at": "2025-01-22T13:37:01Z",
  "modified_files": [
    "src/planner/binder/tableref/bind_table_function.cpp"
  ],
  "modified_test_files": [
    "test/sql/catalog/function/query_function.test"
  ]
}