{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4854,
  "instance_id": "dragonflydb__dragonfly-4854",
  "issue_numbers": [
    "4853"
  ],
  "base_commit": "937fa28a899ecd42450fb084393299b644ffdf13",
  "patch": "diff --git a/src/redis/lua/bit/bit.c b/src/redis/lua/bit/bit.c\nindex 4bfb2e43b761..2964fed1778f 100644\n--- a/src/redis/lua/bit/bit.c\n+++ b/src/redis/lua/bit/bit.c\n@@ -136,6 +136,7 @@ static int bit_tohex(lua_State *L)\n   const char *hexdigits = \"0123456789abcdef\";\n   char buf[8];\n   int i;\n+  if (n == INT32_MIN) n = INT32_MIN+1;\n   if (n < 0) { n = -n; hexdigits = \"0123456789ABCDEF\"; }\n   if (n > 8) n = 8;\n   for (i = (int)n; --i >= 0; ) { buf[i] = hexdigits[b & 15]; b >>= 4; }\n",
  "test_patch": "diff --git a/src/core/interpreter_test.cc b/src/core/interpreter_test.cc\nindex 4e1735091db3..ad7d24fc0152 100644\n--- a/src/core/interpreter_test.cc\n+++ b/src/core/interpreter_test.cc\n@@ -517,4 +517,9 @@ end\n   EXPECT_EQ(\"i(1)\", ser_.res);\n }\n \n+TEST_F(InterpreterTest, AvoidIntOverflow) {\n+  EXPECT_TRUE(Execute(\"return bit.tohex(65535, -2147483648)\"));\n+  EXPECT_EQ(\"str(0000FFFF)\", ser_.res);\n+}\n+\n }  // namespace dfly\n",
  "problem_statement": "Lua library stack overflow can cause the Dragonfly crash. (CVE-2024-31449)\n**Describe the bug**\nThis issue is related to **#4468:**\n\n- CVE-2024-31449 was found in Redis, and the same behavior is reproduced in Dragonfly.\n- A Lua stack overflow causes a crash.\n- According to the [Redis security advisory](https://github.com/redis/redis/security/advisories/GHSA-whxg-wx83-85p5), this vulnerability can lead to RCE attacks\n\n**To Reproduce**\nTo reproduce this error:\n\n- Send this payload to the server.\n\n```bash\n EVAL \"return bit.tohex(65535, -2147483648)\" 0\n```\n\n- Redis clients will be disconnected because of a crash.\n```bash\nroot@dongyeonkim-Modern-15-A11M:~# redis-cli\n127.0.0.1:6379> ping\nPONG\n127.0.0.1:6379> EVAL \"return bit.tohex(65535, -2147483648)\" 0\nCould not connect to Redis at 127.0.0.1:6379: Connection refused\nnot connected> \n```\n\n**Expected behavior**\n```bash\nroot@dongyeonkim-Modern-15-A11M:~# redis-cli\n127.0.0.1:6379> ping\nPONG\n127.0.0.1:6379>  EVAL \"return bit.tohex(65535, -2147483648)\" 0\n\"0000FFFF\"\n127.0.0.1:6379> \n```\n- In normal contitions, the command should run without errors, return a proper hex string, and keep the client connected.\n\n**Screenshots**\n```\nroot@dongyeonkim-Modern-15-A11M:~# docker run --network=host --ulimit memlock=-1 docker.dragonflydb.io/dragonflydb/dragonfly\nI20250330 10:16:57.750293     1 init.cc:78] dragonfly running in opt mode.\nI20250330 10:16:57.750344     1 dfly_main.cc:744] Starting dragonfly df-v1.27.4-6024dd4ae713eb5067ab1203c9b225cbe19fdd8a\n                   .--::--.                   \n   :+*=:          =@@@@@@@@=          :+*+:   \n  %@@@@@@%*=.     =@@@@@@@@-     .=*%@@@@@@#  \n  @@@@@@@@@@@@#+-. .%@@@@#. .-+#@@@@@@@@@@@%  \n  -@@@@@@@@@@@@@@@@*:#@@#:*@@@@@@@@@@@@@@@@-  \n    :+*********####-%@%%@%-####********++.    \n   .%@@@@@@@@@@@@@%:@@@@@@:@@@@@@@@@@@@@@%    \n   .@@@@@@@@%*+-:   =@@@@=  .:-+*%@@@@@@@%.   \n     =*+-:           ###*          .:-+*=     \n                     %@@%                     \n                     *@@*                     \n                     +@@=                     \n                     :##:                     \n                     :@@:                     \n                      @@                      \n                      ..                      \n* Logs will be written to the first available of the following paths:\n/tmp/dragonfly.*\n./dragonfly.*\n* For the available flags type dragonfly [--help | --helpfull]\n* Documentation can be found at: https://www.dragonflydb.io/docs\nI20250330 10:16:57.750473     1 dfly_main.cc:788] maxmemory has not been specified. Deciding myself....\nI20250330 10:16:57.750478     1 dfly_main.cc:797] Found 12.01GiB available memory. Setting maxmemory to 9.61GiB\nW20250330 10:16:57.750509     1 dfly_main.cc:376] Weird error 1 switching to epoll\nI20250330 10:16:57.828732     1 proactor_pool.cc:149] Running 8 io threads\nI20250330 10:16:57.831058     1 server_family.cc:835] Host OS: Linux 6.8.0-52-generic x86_64 with 8 threads\nI20250330 10:16:57.831540     1 snapshot_storage.cc:185] Load snapshot: Searching for snapshot in directory: \"/data\"\nW20250330 10:16:57.831583     1 server_family.cc:949] Load snapshot: No snapshot found\nI20250330 10:16:57.835180    12 listener_interface.cc:101] sock[19] AcceptServer - listening on port 6379\nI20250330 10:16:59.079021    15 version_monitor.cc:174] Your current version '1.27.4' is not the latest version. A newer version '1.28.1' is now available. Please consider an update.\n*** SIGSEGV received at time=1743329951 on cpu 3 ***\nPC: @     0x599bb71db957  (unknown)  bit_tohex\nroot@dongyeonkim-Modern-15-A11M:~# \n```\n\n**Environment :**\n - OS: ubuntu 22.0.4\n - Kernel: \n ```bash\nroot@dongyeonkim-Modern-15-A11M:~# uname -a\nLinux dongyeonkim-Modern-15-A11M 6.8.0-52-generic #53~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Wed Jan 15 19:18:46 UTC 2 x86_64 x86_64 x86_64 GNU/Linux\n\n```\n - Containerized: Docker\n - Dragonfly Version: v1.28.1(In Local), v1.27.4(In Docker)\n\n**Reproducible Code Snippet**\nTo reproduce this error:\n- Send this payload the server.\n```bash\n EVAL \"return bit.tohex(65535, -2147483648)\" 0\n```\n-  Redis clients will be disconnected because of a crash.\n```bash\nroot@dongyeonkim-Modern-15-A11M:~# redis-cli\n127.0.0.1:6379> ping\nPONG\n127.0.0.1:6379>  EVAL \"return bit.tohex(65535, -2147483648)\" 0 //Payload\nCould not connect to Redis at 127.0.0.1:6379: Connection refused\nnot connected> \n```\n\n**Additional context**\n\nLocated in src/redis/lua/bit/bit.c\n\n```c\nstatic int bit_tohex(lua_State *L)\n{\n  UBits b = barg(L, 1);\n  SBits n = lua_isnone(L, 2) ? 8 : (SBits)barg(L, 2);\n  const char *hexdigits = \"0123456789abcdef\";\n  char buf[8];\n  int i;\n  if (n < 0) { n = -n; hexdigits = \"0123456789ABCDEF\"; }\n  if (n > 8) n = 8;\n  for (i = (int)n; --i >= 0; ) { buf[i] = hexdigits[b & 15]; b >>= 4; }\n  lua_pushlstring(L, buf, (size_t)n);\n  return 1;\n}\n```\n\n- The function `static int bit_tohex(lua_State *L)` sets `b` from the first argument and `n` from second (defaulting to 8 if missing).\n\n```c\nif (n < 0) { n = -n; hexdigits = \"0123456789ABCDEF\"; }\n```\n\n- At #L139, if `n` is negative, the code tries to make it positive.\n- But an `int` only stores values from -2,147,483,648 to 2,147,483,647.\n- When you input -2,147,483,648 and compute `n = -n` , the result should be 2,147,483,648.\n- However this number is too big for an `int` .\n- So an intger overflow occurs and `n`  stays as -2,147,483,648.\n\n```c\nfor (i = (int)n; --i >= 0; ) { buf[i] = hexdigits[b & 15]; b >>= 4; } //buf[0xffffffff]\n```\n\n- This flaw bypasses the `(n > 8)` check at #L140.\n- At #L141, a negative `n` makes the loop access buf[0xffffffff] and crash.\n- This bug was found in Redis and is labeled CVE-2024-31449.\n\n- Add the following code above line #L139, as shown in the [redis commit.](https://github.com/redis/redis/commit/3a2669e8aea6723a7a3fb9daf0ea888435df9191)\n   \n```c\nif (n == INT32_MIN) n = INT32_MIN+1;\n```\n\n- This code is a condition that prevents integer overflow.\n\n```basic\nroot@dongyeonkim-Modern-15-A11M:~# redis-cli\n127.0.0.1:6379> ping\nPONG\n127.0.0.1:6379>  EVAL \"return bit.tohex(65535, -2147483648)\" 0\n\"0000FFFF\"\n127.0.0.1:6379> \n```\n\n- After applying this code, here's what happens during an attack.\n- Adding a check to stop integer overflow prevents the stack buffer from overflowing.\n\n",
  "hints_text": "",
  "created_at": "2025-03-30T13:16:35Z",
  "modified_files": [
    "src/redis/lua/bit/bit.c"
  ],
  "modified_test_files": [
    "src/core/interpreter_test.cc"
  ]
}