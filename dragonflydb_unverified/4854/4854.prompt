You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Lua library stack overflow can cause the Dragonfly crash. (CVE-2024-31449)
**Describe the bug**
This issue is related to **#4468:**

- CVE-2024-31449 was found in Redis, and the same behavior is reproduced in Dragonfly.
- A Lua stack overflow causes a crash.
- According to the [Redis security advisory](https://github.com/redis/redis/security/advisories/GHSA-whxg-wx83-85p5), this vulnerability can lead to RCE attacks

**To Reproduce**
To reproduce this error:

- Send this payload to the server.

```bash
 EVAL "return bit.tohex(65535, -2147483648)" 0
```

- Redis clients will be disconnected because of a crash.
```bash
root@dongyeonkim-Modern-15-A11M:~# redis-cli
127.0.0.1:6379> ping
PONG
127.0.0.1:6379> EVAL "return bit.tohex(65535, -2147483648)" 0
Could not connect to Redis at 127.0.0.1:6379: Connection refused
not connected> 
```

**Expected behavior**
```bash
root@dongyeonkim-Modern-15-A11M:~# redis-cli
127.0.0.1:6379> ping
PONG
127.0.0.1:6379>  EVAL "return bit.tohex(65535, -2147483648)" 0
"0000FFFF"
127.0.0.1:6379> 
```
- In normal contitions, the command should run without errors, return a proper hex string, and keep the client connected.

**Screenshots**
```
root@dongyeonkim-Modern-15-A11M:~# docker run --network=host --ulimit memlock=-1 docker.dragonflydb.io/dragonflydb/dragonfly
I20250330 10:16:57.750293     1 init.cc:78] dragonfly running in opt mode.
I20250330 10:16:57.750344     1 dfly_main.cc:744] Starting dragonfly df-v1.27.4-6024dd4ae713eb5067ab1203c9b225cbe19fdd8a
                   .--::--.                   
   :+*=:          =@@@@@@@@=          :+*+:   
  %@@@@@@%*=.     =@@@@@@@@-     .=*%@@@@@@#  
  @@@@@@@@@@@@#+-. .%@@@@#. .-+#@@@@@@@@@@@%  
  -@@@@@@@@@@@@@@@@*:#@@#:*@@@@@@@@@@@@@@@@-  
    :+*********####-%@%%@%-####********++.    
   .%@@@@@@@@@@@@@%:@@@@@@:@@@@@@@@@@@@@@%    
   .@@@@@@@@%*+-:   =@@@@=  .:-+*%@@@@@@@%.   
     =*+-:           ###*          .:-+*=     
                     %@@%                     
                     *@@*                     
                     +@@=                     
                     :##:                     
                     :@@:                     
                      @@                      
                      ..                      
* Logs will be written to the first available of the following paths:
/tmp/dragonfly.*
./dragonfly.*
* For the available flags type dragonfly [--help | --helpfull]
* Documentation can be found at: https://www.dragonflydb.io/docs
I20250330 10:16:57.750473     1 dfly_main.cc:788] maxmemory has not been specified. Deciding myself....
I20250330 10:16:57.750478     1 dfly_main.cc:797] Found 12.01GiB available memory. Setting maxmemory to 9.61GiB
W20250330 10:16:57.750509     1 dfly_main.cc:376] Weird error 1 switching to epoll
I20250330 10:16:57.828732     1 proactor_pool.cc:149] Running 8 io threads
I20250330 10:16:57.831058     1 server_family.cc:835] Host OS: Linux 6.8.0-52-generic x86_64 with 8 threads
I20250330 10:16:57.831540     1 snapshot_storage.cc:185] Load snapshot: Searching for snapshot in directory: "/data"
W20250330 10:16:57.831583     1 server_family.cc:949] Load snapshot: No snapshot found
I20250330 10:16:57.835180    12 listener_interface.cc:101] sock[19] AcceptServer - listening on port 6379
I20250330 10:16:59.079021    15 version_monitor.cc:174] Your current version '1.27.4' is not the latest version. A newer version '1.28.1' is now available. Please consider an update.
*** SIGSEGV received at time=1743329951 on cpu 3 ***
PC: @     0x599bb71db957  (unknown)  bit_tohex
root@dongyeonkim-Modern-15-A11M:~# 
```

**Environment :**
 - OS: ubuntu 22.0.4
 - Kernel: 
 ```bash
root@dongyeonkim-Modern-15-A11M:~# uname -a
Linux dongyeonkim-Modern-15-A11M 6.8.0-52-generic #53~22.04.1-Ubuntu SMP PREEMPT_DYNAMIC Wed Jan 15 19:18:46 UTC 2 x86_64 x86_64 x86_64 GNU/Linux

```
 - Containerized: Docker
 - Dragonfly Version: v1.28.1(In Local), v1.27.4(In Docker)

**Reproducible Code Snippet**
To reproduce this error:
- Send this payload the server.
```bash
 EVAL "return bit.tohex(65535, -2147483648)" 0
```
-  Redis clients will be disconnected because of a crash.
```bash
root@dongyeonkim-Modern-15-A11M:~# redis-cli
127.0.0.1:6379> ping
PONG
127.0.0.1:6379>  EVAL "return bit.tohex(65535, -2147483648)" 0 //Payload
Could not connect to Redis at 127.0.0.1:6379: Connection refused
not connected> 
```

**Additional context**

Located in src/redis/lua/bit/bit.c

```c
static int bit_tohex(lua_State *L)
{
  UBits b = barg(L, 1);
  SBits n = lua_isnone(L, 2) ? 8 : (SBits)barg(L, 2);
  const char *hexdigits = "0123456789abcdef";
  char buf[8];
  int i;
  if (n < 0) { n = -n; hexdigits = "0123456789ABCDEF"; }
  if (n > 8) n = 8;
  for (i = (int)n; --i >= 0; ) { buf[i] = hexdigits[b & 15]; b >>= 4; }
  lua_pushlstring(L, buf, (size_t)n);
  return 1;
}
```

- The function `static int bit_tohex(lua_State *L)` sets `b` from the first argument and `n` from second (defaulting to 8 if missing).

```c
if (n < 0) { n = -n; hexdigits = "0123456789ABCDEF"; }
```

- At #L139, if `n` is negative, the code tries to make it positive.
- But an `int` only stores values from -2,147,483,648 to 2,147,483,647.
- When you input -2,147,483,648 and compute `n = -n` , the result should be 2,147,483,648.
- However this number is too big for an `int` .
- So an intger overflow occurs and `n`  stays as -2,147,483,648.

```c
for (i = (int)n; --i >= 0; ) { buf[i] = hexdigits[b & 15]; b >>= 4; } //buf[0xffffffff]
```

- This flaw bypasses the `(n > 8)` check at #L140.
- At #L141, a negative `n` makes the loop access buf[0xffffffff] and crash.
- This bug was found in Redis and is labeled CVE-2024-31449.

- Add the following code above line #L139, as shown in the [redis commit.](https://github.com/redis/redis/commit/3a2669e8aea6723a7a3fb9daf0ea888435df9191)
   
```c
if (n == INT32_MIN) n = INT32_MIN+1;
```

- This code is a condition that prevents integer overflow.

```basic
root@dongyeonkim-Modern-15-A11M:~# redis-cli
127.0.0.1:6379> ping
PONG
127.0.0.1:6379>  EVAL "return bit.tohex(65535, -2147483648)" 0
"0000FFFF"
127.0.0.1:6379> 
```

- After applying this code, here's what happens during an attack.
- Adding a check to stop integer overflow prevents the stack buffer from overflowing.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
