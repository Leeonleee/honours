diff --git a/tests/dragonfly/cluster_test.py b/tests/dragonfly/cluster_test.py
index 6fed1286f432..2977f9c047ce 100644
--- a/tests/dragonfly/cluster_test.py
+++ b/tests/dragonfly/cluster_test.py
@@ -835,7 +835,7 @@ async def test_cluster_replica_sets_non_owned_keys(df_factory: DflyInstanceFacto
         assert re.match(r"MOVED \d+ localhost:1111", e.value.args[0])
 
         await push_config(replica_config, [c_master_admin])
-        await asyncio.sleep(0.5)
+        await check_all_replicas_finished([c_replica], c_master)
         assert await c_master.execute_command("dbsize") == 0
         assert await c_replica.execute_command("dbsize") == 0
 
@@ -941,7 +941,7 @@ async def test_cluster_flush_slots_after_config_change(df_factory: DflyInstanceF
     """
     await push_config(config, [c_master_admin, c_replica_admin])
 
-    await asyncio.sleep(0.5)
+    await check_all_replicas_finished([c_replica], c_master)
 
     assert await c_master.execute_command("dbsize") == (100_000 - slot_0_size)
     assert await c_replica.execute_command("dbsize") == (100_000 - slot_0_size)
@@ -1146,6 +1146,10 @@ async def test_random_keys():
             assert await client.get(key) == "value"
 
     await test_random_keys()
+
+    for i in range(3):
+        await check_all_replicas_finished([c_replicas[i]], c_masters_admin[i])
+
     await asyncio.gather(*(wait_available_async(c) for c in c_replicas))
 
     # Make sure that getting a value from a replica works as well.
diff --git a/tests/dragonfly/replication_test.py b/tests/dragonfly/replication_test.py
index 7b9196158e5d..1b64a33db56b 100644
--- a/tests/dragonfly/replication_test.py
+++ b/tests/dragonfly/replication_test.py
@@ -3016,6 +3016,8 @@ async def test_replica_snapshot_with_big_values_while_seeding(df_factory: DflyIn
     await seeder.stop(c_master)
     await stream_task
 
+    await check_all_replicas_finished([c_replica], c_master)
+
     # Check that everything is in sync
     hashes = await asyncio.gather(*(SeederV2.capture(c) for c in [c_master, c_replica]))
     assert len(set(hashes)) == 1
