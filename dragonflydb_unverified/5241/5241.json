{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 5241,
  "instance_id": "dragonflydb__dragonfly-5241",
  "issue_numbers": [
    "5219"
  ],
  "base_commit": "9c35bfedcf0e7de030e197c5c08c6183bbb7f19c",
  "patch": "diff --git a/src/server/engine_shard.cc b/src/server/engine_shard.cc\nindex cd07cc6b5b11..8702cc123149 100644\n--- a/src/server/engine_shard.cc\n+++ b/src/server/engine_shard.cc\n@@ -764,7 +764,9 @@ void EngineShard::Heartbeat() {\n   if (db_slice.WillBlockOnJournalWrite() || !can_acquire_global_lock) {\n     const auto elapsed = std::chrono::system_clock::now() - start;\n     if (elapsed > std::chrono::seconds(1)) {\n-      LOG_EVERY_T(WARNING, 5) << \"Stalled heartbeat() fiber for \" << elapsed.count() << \" seconds\";\n+      const auto elapsed_seconds = std::chrono::duration_cast<std::chrono::seconds>(elapsed);\n+      LOG_EVERY_T(WARNING, 5) << \"Stalled heartbeat() fiber for \" << elapsed_seconds.count()\n+                              << \" seconds\";\n     }\n     return;\n   }\ndiff --git a/src/server/journal/journal.h b/src/server/journal/journal.h\nindex 21fd18d77d6c..e3986b492de5 100644\n--- a/src/server/journal/journal.h\n+++ b/src/server/journal/journal.h\n@@ -46,7 +46,7 @@ class Journal {\n class JournalFlushGuard {\n  public:\n   explicit JournalFlushGuard(Journal* journal) : journal_(journal) {\n-    if (journal_) {\n+    if (journal_ && counter_ == 0) {\n       journal_->SetFlushMode(false);\n     }\n     util::fb2::detail::EnterFiberAtomicSection();\n",
  "test_patch": "diff --git a/tests/dragonfly/replication_test.py b/tests/dragonfly/replication_test.py\nindex 5d8021a6108b..c92e574e5541 100644\n--- a/tests/dragonfly/replication_test.py\n+++ b/tests/dragonfly/replication_test.py\n@@ -3171,3 +3171,27 @@ async def test_replicate_hset_with_expiry(df_factory: DflyInstanceFactory):\n \n     assert \"name\" in result\n     assert result[\"name\"] == \"1234\"\n+\n+\n+async def test_bug_5221(df_factory):\n+    master = df_factory.create(\n+        proactor_threads=1,\n+        cache_mode=\"true\",\n+        maxmemory=\"256mb\",\n+        enable_heartbeat_eviction=\"true\",\n+        eviction_memory_budget_threshold=0.9,\n+    )\n+    replica = df_factory.create(proactor_threads=4)\n+    df_factory.start_all([master, replica])\n+\n+    c_master = master.client()\n+    c_replica = replica.client()\n+    await c_replica.execute_command(f\"replicaof localhost {master.port}\")\n+\n+    # Fill master with test data\n+    seeder = SeederV2(key_target=22000, data_size=1000)\n+    await seeder.run(c_master, target_deviation=0.01)\n+    await asyncio.sleep(1)\n+    await seeder.run(c_master, target_deviation=0.01)\n+    res = await c_master.execute_command(\"dbsize\")\n+    assert res > 0\n",
  "problem_statement": "Stalled heartbeat() fiber for 6008371045 seconds\nSometimes we can see in the log the big value in seconds for a stalled heartbeat.\n\n```\nStalled heartbeat() fiber for 6008371045 seconds\n```\n\nPossible reason: calculation overflow.\n",
  "hints_text": "Is there a way to reproduce this or do you have any logs to point to ?\nI have a lot of these messages during the hard loading of Dragonfly.\nI can't say there is any specific scenario for this. It can happen sometimes.\n\nUh, I now understand:\n\n```\n  752   static auto start = std::chrono::system_clock::now();                                            \n  753   // Skip heartbeat if global transaction is in process.                                           \n  754   // This is determined by attempting to check if shard lock can be acquired.                      \n  755   const bool can_acquire_global_lock = shard_lock()->Check(IntentLock::Mode::EXCLUSIVE);           \n  756                                                                                                    \n  757   if (db_slice.WillBlockOnJournalWrite() || !can_acquire_global_lock) {                            \n  758     const auto elapsed = std::chrono::system_clock::now() - start;                                 \n  759     if (elapsed > std::chrono::seconds(1)) {                                                       \n  760       LOG_EVERY_T(WARNING, 5) << \"Stalled heartbeat() fiber for \" << elapsed.count() << \" seconds\";\n  761     }     \n```\n\nThe problem is in `elapsed.count()` it returns `nanoseconds` but we print `seconds` \ud83d\ude04  We either need to `cast it` to seconds or change the warning message from seconds to nanoseconds. It's fine \ud83d\ude04 ",
  "created_at": "2025-06-06T09:17:59Z",
  "modified_files": [
    "src/server/engine_shard.cc",
    "src/server/journal/journal.h"
  ],
  "modified_test_files": [
    "tests/dragonfly/replication_test.py"
  ]
}