You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Support for redis_latency_percentiles_usec Metric in DragonFlyDB
**Title:** Support for `redis_latency_percentiles_usec` Metric in DragonFlyDB

**Issue Summary:**

When using the `oliver006/redis_exporter` with DragonFlyDB, we're not seeing the `redis_latency_percentiles_usec` metric that is typically available when the exporter is connected to Redis. This becomes a problem for monitoring setups — especially Grafana dashboards — that rely on this metric to track latency percentiles.

**Environment:**

- DragonFlyDB version: [latest Docker image]
- Redis Exporter version: `oliver006/redis_exporter:v1.51.0`
- Prometheus version: `v2.44.0`
- Grafana version: `9.5.2`

**Steps to Reproduce:**

1. Run both Redis and DragonFlyDB in the same environment (e.g., via Docker Compose).
2. Set up `oliver006/redis_exporter` for each service with the same config.
3. Scrape metrics using Prometheus.
4. Check for the `redis_latency_percentiles_usec` metric in Prometheus.
5. It appears for Redis but not for DragonFly.

**What We Expected:**

We expected both Redis and DragonFlyDB to expose this metric so we could reuse the same dashboards and alerts across both.

**What Actually Happens:**

The metric is missing from DragonFlyDB, so panels that rely on latency percentiles (like P99, P95, P50) are empty or broken when connected to a DragonFly instance.

**Why This Matters:**

Latency percentiles like P99, P95, and P50 are key metrics for understanding system performance — especially under load. They help identify tail latency and are widely used in SLOs and operational dashboards. Not having this data makes it harder to monitor and compare performance between Redis and DragonFlyDB.

**Other Notes:**

We did confirm that other metrics like `redis_commands_processed_total` and `redis_commands_duration_seconds_count` are being exposed correctly by both Redis and DragonFlyDB via the exporter. So the issue seems specific to the latency percentile metric.

We’re aware that DragonFly provides its own Prometheus endpoint with histograms that can be used to calculate percentiles via `histogram_quantile()`, but having `redis_latency_percentiles_usec` directly available would be a big help for compatibility with existing tools and dashboards.

Would love to know if this metric could be supported in the future, or if there's a recommended workaround for this use case.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
