{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1176,
  "instance_id": "dragonflydb__dragonfly-1176",
  "issue_numbers": [
    "1158"
  ],
  "base_commit": "b4803842bc648dbfc09cbd4b2af4efcfc133c4b1",
  "patch": "diff --git a/src/server/stream_family.cc b/src/server/stream_family.cc\nindex cafb245589cd..707947e4c9e6 100644\n--- a/src/server/stream_family.cc\n+++ b/src/server/stream_family.cc\n@@ -287,17 +287,31 @@ OpResult<vector<GroupInfo>> OpListGroups(const DbContext& db_cntx, string_view k\n   return result;\n }\n \n+constexpr uint8_t kCreateOptMkstream = 1 << 0;\n+\n struct CreateOpts {\n   string_view gname;\n   string_view id;\n+  uint8_t flags = 0;\n };\n \n OpStatus OpCreate(const OpArgs& op_args, string_view key, const CreateOpts& opts) {\n   auto* shard = op_args.shard;\n   auto& db_slice = shard->db_slice();\n   OpResult<PrimeIterator> res_it = db_slice.Find(op_args.db_cntx, key, OBJ_STREAM);\n-  if (!res_it)\n-    return res_it.status();\n+  if (!res_it) {\n+    if (opts.flags & kCreateOptMkstream) {\n+      // MKSTREAM is enabled, so create the stream\n+      res_it = db_slice.AddNew(op_args.db_cntx, key, PrimeValue{}, 0);\n+      if (!res_it)\n+        return res_it.status();\n+\n+      robj* stream_obj = createStreamObject();\n+      (*res_it)->second.ImportRObj(stream_obj);\n+    } else {\n+      return res_it.status();\n+    }\n+  }\n \n   CompactObj& cobj = (*res_it)->second;\n   stream* s = (stream*)cobj.RObjPtr();\n@@ -493,6 +507,11 @@ void CreateGroup(CmdArgList args, string_view key, ConnectionContext* cntx) {\n   CreateOpts opts;\n   opts.gname = ArgS(args, 0);\n   opts.id = ArgS(args, 1);\n+  if (args.size() >= 3) {\n+    ToUpper(&args[2]);\n+    if (ArgS(args, 2) == \"MKSTREAM\")\n+      opts.flags |= kCreateOptMkstream;\n+  }\n \n   auto cb = [&](Transaction* t, EngineShard* shard) {\n     return OpCreate(t->GetOpArgs(shard), key, opts);\n",
  "test_patch": "diff --git a/src/server/stream_family_test.cc b/src/server/stream_family_test.cc\nindex 25e3b7a4af19..f6d8afc64e76 100644\n--- a/src/server/stream_family_test.cc\n+++ b/src/server/stream_family_test.cc\n@@ -84,6 +84,18 @@ TEST_F(StreamFamilyTest, Range) {\n   EXPECT_THAT(sub1, ElementsAre(\"1-0\", ArrLen(2)));\n }\n \n+TEST_F(StreamFamilyTest, GroupCreate) {\n+  Run({\"xadd\", \"key\", \"1-*\", \"f1\", \"v1\"});\n+  auto resp = Run({\"xgroup\", \"create\", \"key\", \"grname\", \"1\"});\n+  EXPECT_EQ(resp, \"OK\");\n+  resp = Run({\"xgroup\", \"create\", \"test\", \"test\", \"0\"});\n+  EXPECT_THAT(resp, ErrArg(\"requires the key to exist\"));\n+  resp = Run({\"xgroup\", \"create\", \"test\", \"test\", \"0\", \"MKSTREAM\"});\n+  EXPECT_THAT(resp, \"OK\");\n+  resp = Run({\"xgroup\", \"create\", \"test\", \"test\", \"0\", \"MKSTREAM\"});\n+  EXPECT_THAT(resp, ErrArg(\"BUSYGROUP\"));\n+}\n+\n TEST_F(StreamFamilyTest, Issue854) {\n   auto resp = Run({\"xgroup\", \"help\"});\n   EXPECT_THAT(resp, ArgType(RespExpr::ARRAY));\n",
  "problem_statement": "XGROUP MKSTREAM option is not supported\nQuoting @FZambia from #231 \r\n\r\n\r\n```\r\nThe XGROUP subcommand requires the key to exist. Note that for CREATE you may want to use the MKSTREAM option to create an empty stream automatically.\r\n```\r\n\r\nTo reproduce with DragonflyDB 1.2.1:\r\n\r\n```\r\n127.0.0.1:6379> XGROUP CREATE test test 0 MKSTREAM\r\n(error) ERR The XGROUP subcommand requires the key to exist. Note that for CREATE you may want to use the MKSTREAM option to create an empty stream automatically.\r\n```\r\n\r\nWhile works well with Redis 7.0.8:\r\n\r\n```\r\n127.0.0.1:6379> XGROUP CREATE test test 0 MKSTREAM\r\nOK\r\n```\r\n\r\nBTW, if the group already exists then Redis provides the following output:\r\n\r\n```\r\n(error) BUSYGROUP Consumer Group name already exists\r\n```\r\n\r\nJust mentioning because when implementing queue based on Redis stream many implementations rely on the BUSYGROUP prefix to detect that group already exists and the error may be ignored.\r\n\r\nSeems like in 5 of 13 failures above the error is the same and may come from the same thing.\n",
  "hints_text": "Hey @romange, would like to work on the issue. Could you please assign it to me?",
  "created_at": "2023-05-03T05:20:48Z",
  "modified_files": [
    "src/server/stream_family.cc"
  ],
  "modified_test_files": [
    "src/server/stream_family_test.cc"
  ]
}