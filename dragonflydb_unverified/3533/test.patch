diff --git a/src/core/json/jsonpath_test.cc b/src/core/json/jsonpath_test.cc
index 80db9e2d83bd..61e7fa5687be 100644
--- a/src/core/json/jsonpath_test.cc
+++ b/src/core/json/jsonpath_test.cc
@@ -264,6 +264,48 @@ TYPED_TEST(JsonPathTest, Descent) {
   EXPECT_NE(0, this->Parse("$...foo"));
 }
 
+TYPED_TEST(JsonPathTest, QuotedStrings) {
+  EXPECT_EQ(0, this->Parse("$[\"foo\"]"));
+  Path path = this->driver_.TakePath();
+
+  ASSERT_EQ(1, path.size());
+  EXPECT_THAT(path[0], SegType(SegmentType::IDENTIFIER));
+  EXPECT_EQ("foo", path[0].identifier());
+
+  EXPECT_EQ(0, this->Parse("$['foo']"));  // single quoted string
+  path = this->driver_.TakePath();
+
+  ASSERT_EQ(1, path.size());
+  EXPECT_THAT(path[0], SegType(SegmentType::IDENTIFIER));
+  EXPECT_EQ("foo", path[0].identifier());
+
+  EXPECT_EQ(0, this->Parse("$.[\"foo\"]"));
+  path = this->driver_.TakePath();
+
+  ASSERT_EQ(1, path.size());
+  EXPECT_THAT(path[0], SegType(SegmentType::IDENTIFIER));
+  EXPECT_EQ("foo", path[0].identifier());
+
+  EXPECT_EQ(0, this->Parse("$..[\"foo\"]"));
+  path = this->driver_.TakePath();
+
+  ASSERT_EQ(2, path.size());
+  EXPECT_THAT(path[0], SegType(SegmentType::DESCENT));
+  EXPECT_THAT(path[1], SegType(SegmentType::IDENTIFIER));
+  EXPECT_EQ("foo", path[1].identifier());
+
+  EXPECT_NE(0, this->Parse("\"a\""));
+  EXPECT_NE(0, this->Parse("$\"a\""));
+  EXPECT_NE(0, this->Parse("$.\"a\""));
+  EXPECT_NE(0, this->Parse("$..\"a\""));
+
+  // Single quoted string
+  EXPECT_NE(0, this->Parse("'a'"));
+  EXPECT_NE(0, this->Parse("$'a'"));
+  EXPECT_NE(0, this->Parse("$.'a'"));
+  EXPECT_NE(0, this->Parse("$..'a'"));
+}
+
 TYPED_TEST(JsonPathTest, Path) {
   Path path;
   TypeParam json = ValidJson<TypeParam>(R"({"v11":{ "f" : 1, "a2": [0]}, "v12": {"f": 2, "a2": [1]},
diff --git a/src/server/json_family_test.cc b/src/server/json_family_test.cc
index ccad32429088..968a69ab3146 100644
--- a/src/server/json_family_test.cc
+++ b/src/server/json_family_test.cc
@@ -223,6 +223,71 @@ TEST_F(JsonFamilyTest, SetGetFromPhonebook) {
       R"([st{stt"number":s"212 555-1234",stt"type":s"home"st},st{stt"number":s"646 555-4567",stt"type":s"office"st}s])");
 }
 
+TEST_F(JsonFamilyTest, GetBrackets) {
+  string json = R"(
+    {"a":"first", "b":{"a":"second"}}
+  )";
+
+  auto resp = Run({"JSON.SET", "json", ".", json});
+  ASSERT_THAT(resp, "OK");
+
+  resp = Run({"JSON.GET", "json", "$[\"a\"]"});
+  ASSERT_THAT(resp, "[\"first\"]");
+
+  resp = Run({"JSON.GET", "json", "$..[\"a\"]"});
+  ASSERT_THAT(resp, R"(["first","second"])");
+
+  resp = Run({"JSON.GET", "json", "$.b[\"a\"]"});
+  ASSERT_THAT(resp, "[\"second\"]");
+
+  resp = Run({"JSON.GET", "json", "[\"a\"]"});
+  ASSERT_THAT(resp, "\"first\"");
+
+  resp = Run({"JSON.GET", "json", "..[\"a\"]"});
+  ASSERT_THAT(resp, "\"second\"");
+
+  json = R"(
+    ["first", ["second"]]
+  )";
+
+  resp = Run({"JSON.SET", "json", ".", json});
+  ASSERT_THAT(resp, "OK");
+
+  resp = Run({"JSON.GET", "json", "$[0]"});
+  ASSERT_THAT(resp, "[\"first\"]");
+
+  resp = Run({"JSON.GET", "json", "$..[0]"});
+  ASSERT_THAT(resp, R"(["first","second"])");
+
+  resp = Run({"JSON.GET", "json", "[0]"});
+  ASSERT_THAT(resp, "\"first\"");
+
+  resp = Run({"JSON.GET", "json", "..[0]"});
+  ASSERT_THAT(resp, "\"second\"");
+
+  resp = Run({"JSON.GET", "json", "$[\"first\"]"});
+  ASSERT_THAT(resp, "[]");
+
+  json = R"(
+    {"a":{"b":{"c":"first"}}, "b":{"b":{"c":"second"}}, "c":{"b":{"c":"third"}}}
+  )";
+
+  resp = Run({"JSON.SET", "json", ".", json});
+  ASSERT_THAT(resp, "OK");
+
+  resp = Run({"JSON.GET", "json", R"($["a"]['b']["c"])"});
+  ASSERT_THAT(resp, "[\"first\"]");
+
+  resp = Run({"JSON.GET", "json", R"($["a"].b['c'])"});
+  ASSERT_THAT(resp, "[\"first\"]");
+
+  resp = Run({"JSON.GET", "json", R"($..['b']["c"])"});
+  ASSERT_THAT(resp, R"(["first","second","third"])");
+
+  resp = Run({"JSON.GET", "json", R"($.c['b']["c"])"});
+  ASSERT_THAT(resp, "[\"third\"]");
+}
+
 TEST_F(JsonFamilyTest, Type) {
   string json = R"(
     [1, 2.3, "foo", true, null, {}, []]
diff --git a/src/server/search/search_family_test.cc b/src/server/search/search_family_test.cc
index e8a073dfa5bf..62d26319db45 100644
--- a/src/server/search/search_family_test.cc
+++ b/src/server/search/search_family_test.cc
@@ -250,6 +250,20 @@ TEST_F(SearchFamilyTest, JsonAttributesPaths) {
   EXPECT_THAT(Run({"ft.search", "i1", "yes"}), AreDocIds("k2"));
 }
 
+TEST_F(SearchFamilyTest, JsonIdentifierWithBrackets) {
+  Run({"json.set", "k1", ".", R"({"name":"London","population":8.8,"continent":"Europe"})"});
+  Run({"json.set", "k2", ".", R"({"name":"Athens","population":3.1,"continent":"Europe"})"});
+  Run({"json.set", "k3", ".", R"({"name":"Tel-Aviv","population":1.3,"continent":"Asia"})"});
+  Run({"json.set", "k4", ".", R"({"name":"Hyderabad","population":9.8,"continent":"Asia"})"});
+
+  EXPECT_EQ(Run({"ft.create", "i1", "on", "json", "schema", "$[\"name\"]", "as", "name", "tag",
+                 "$[\"population\"]", "as", "population", "numeric", "sortable", "$[\"continent\"]",
+                 "as", "continent", "tag"}),
+            "OK");
+
+  EXPECT_THAT(Run({"ft.search", "i1", "(@continent:{Europe})"}), AreDocIds("k1", "k2"));
+}
+
 // todo: fails on arm build
 #ifndef SANITIZERS
 TEST_F(SearchFamilyTest, JsonArrayValues) {
