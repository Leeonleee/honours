{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 3533,
  "instance_id": "dragonflydb__dragonfly-3533",
  "issue_numbers": [
    "3511"
  ],
  "base_commit": "cec3659b5103eb9e9d3ae0198e2c1a66e63b5bb8",
  "patch": "diff --git a/src/core/json/jsonpath_grammar.y b/src/core/json/jsonpath_grammar.y\nindex 43520a9bd08b..82a302b9846c 100644\n--- a/src/core/json/jsonpath_grammar.y\n+++ b/src/core/json/jsonpath_grammar.y\n@@ -54,6 +54,8 @@ using namespace std;\n   DOT  \".\"\n   WILDCARD \"*\"\n   DESCENT \"..\"\n+  SINGLE_QUOTE \"'\"\n+  DOUBLE_QUOTE \"\\\"\"\n \n // Needed 0 at the end to satisfy bison 3.5.1\n %token YYEOF 0\n@@ -62,6 +64,8 @@ using namespace std;\n \n %nterm <std::string> identifier\n %nterm <PathSegment> bracket_index\n+%nterm <std::string> single_quoted_string\n+%nterm <std::string> double_quoted_string\n \n \n %%\n@@ -76,21 +80,28 @@ opt_relative_location:\n \n relative_location: DOT relative_path\n         | DESCENT { driver->AddSegment(PathSegment{SegmentType::DESCENT}); } relative_path\n-        | LBRACKET bracket_index RBRACKET { driver->AddSegment($2); } opt_relative_location\n+        | bracket_expr\n \n relative_path: identifier { driver->AddIdentifier($1); } opt_relative_location\n         | WILDCARD { driver->AddWildcard(); } opt_relative_location\n-\n+        | bracket_expr\n \n identifier: UNQ_STR\n-         // | single_quoted_string | double_quoted_string\n \n-bracket_index: WILDCARD { $$ = PathSegment{SegmentType::INDEX, IndexExpr::All()}; }\n+bracket_expr: LBRACKET bracket_index RBRACKET { driver->AddSegment($2); } opt_relative_location\n+\n+bracket_index: single_quoted_string { $$ = PathSegment(SegmentType::IDENTIFIER, $1); }\n+              | double_quoted_string { $$ = PathSegment(SegmentType::IDENTIFIER, $1); }\n+              | WILDCARD { $$ = PathSegment{SegmentType::INDEX, IndexExpr::All()}; }\n               | INT { $$ = PathSegment(SegmentType::INDEX, IndexExpr($1, $1)); }\n               | INT COLON INT { $$ = PathSegment(SegmentType::INDEX, IndexExpr::HalfOpen($1, $3)); }\n               | INT COLON { $$ = PathSegment(SegmentType::INDEX, IndexExpr($1, INT_MAX)); }\n               | COLON INT { $$ = PathSegment(SegmentType::INDEX, IndexExpr::HalfOpen(0, $2)); }\n \n+single_quoted_string: SINGLE_QUOTE UNQ_STR SINGLE_QUOTE { $$ = $2; }\n+\n+double_quoted_string: DOUBLE_QUOTE UNQ_STR DOUBLE_QUOTE { $$ = $2; }\n+\n function_expr: UNQ_STR { driver->AddFunction($1); } LPARENT ROOT relative_location RPARENT\n %%\n \ndiff --git a/src/core/json/jsonpath_lexer.lex b/src/core/json/jsonpath_lexer.lex\nindex 8e6ec826c39f..f0581005c743 100644\n--- a/src/core/json/jsonpath_lexer.lex\n+++ b/src/core/json/jsonpath_lexer.lex\n@@ -51,6 +51,8 @@\n \"*\"         return Parser::make_WILDCARD(loc());\n \"(\"         return Parser::make_LPARENT(loc());\n \")\"         return Parser::make_RPARENT(loc());\n+\"'\"         return Parser::make_SINGLE_QUOTE(loc());\n+\"\\\"\"        return Parser::make_DOUBLE_QUOTE(loc());\n -?[0-9]{1,9}  {\n               int val;\n               CHECK(absl::SimpleAtoi(str(), &val));\n",
  "test_patch": "diff --git a/src/core/json/jsonpath_test.cc b/src/core/json/jsonpath_test.cc\nindex 80db9e2d83bd..61e7fa5687be 100644\n--- a/src/core/json/jsonpath_test.cc\n+++ b/src/core/json/jsonpath_test.cc\n@@ -264,6 +264,48 @@ TYPED_TEST(JsonPathTest, Descent) {\n   EXPECT_NE(0, this->Parse(\"$...foo\"));\n }\n \n+TYPED_TEST(JsonPathTest, QuotedStrings) {\n+  EXPECT_EQ(0, this->Parse(\"$[\\\"foo\\\"]\"));\n+  Path path = this->driver_.TakePath();\n+\n+  ASSERT_EQ(1, path.size());\n+  EXPECT_THAT(path[0], SegType(SegmentType::IDENTIFIER));\n+  EXPECT_EQ(\"foo\", path[0].identifier());\n+\n+  EXPECT_EQ(0, this->Parse(\"$['foo']\"));  // single quoted string\n+  path = this->driver_.TakePath();\n+\n+  ASSERT_EQ(1, path.size());\n+  EXPECT_THAT(path[0], SegType(SegmentType::IDENTIFIER));\n+  EXPECT_EQ(\"foo\", path[0].identifier());\n+\n+  EXPECT_EQ(0, this->Parse(\"$.[\\\"foo\\\"]\"));\n+  path = this->driver_.TakePath();\n+\n+  ASSERT_EQ(1, path.size());\n+  EXPECT_THAT(path[0], SegType(SegmentType::IDENTIFIER));\n+  EXPECT_EQ(\"foo\", path[0].identifier());\n+\n+  EXPECT_EQ(0, this->Parse(\"$..[\\\"foo\\\"]\"));\n+  path = this->driver_.TakePath();\n+\n+  ASSERT_EQ(2, path.size());\n+  EXPECT_THAT(path[0], SegType(SegmentType::DESCENT));\n+  EXPECT_THAT(path[1], SegType(SegmentType::IDENTIFIER));\n+  EXPECT_EQ(\"foo\", path[1].identifier());\n+\n+  EXPECT_NE(0, this->Parse(\"\\\"a\\\"\"));\n+  EXPECT_NE(0, this->Parse(\"$\\\"a\\\"\"));\n+  EXPECT_NE(0, this->Parse(\"$.\\\"a\\\"\"));\n+  EXPECT_NE(0, this->Parse(\"$..\\\"a\\\"\"));\n+\n+  // Single quoted string\n+  EXPECT_NE(0, this->Parse(\"'a'\"));\n+  EXPECT_NE(0, this->Parse(\"$'a'\"));\n+  EXPECT_NE(0, this->Parse(\"$.'a'\"));\n+  EXPECT_NE(0, this->Parse(\"$..'a'\"));\n+}\n+\n TYPED_TEST(JsonPathTest, Path) {\n   Path path;\n   TypeParam json = ValidJson<TypeParam>(R\"({\"v11\":{ \"f\" : 1, \"a2\": [0]}, \"v12\": {\"f\": 2, \"a2\": [1]},\ndiff --git a/src/server/json_family_test.cc b/src/server/json_family_test.cc\nindex ccad32429088..968a69ab3146 100644\n--- a/src/server/json_family_test.cc\n+++ b/src/server/json_family_test.cc\n@@ -223,6 +223,71 @@ TEST_F(JsonFamilyTest, SetGetFromPhonebook) {\n       R\"([st{stt\"number\":s\"212 555-1234\",stt\"type\":s\"home\"st},st{stt\"number\":s\"646 555-4567\",stt\"type\":s\"office\"st}s])\");\n }\n \n+TEST_F(JsonFamilyTest, GetBrackets) {\n+  string json = R\"(\n+    {\"a\":\"first\", \"b\":{\"a\":\"second\"}}\n+  )\";\n+\n+  auto resp = Run({\"JSON.SET\", \"json\", \".\", json});\n+  ASSERT_THAT(resp, \"OK\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", \"$[\\\"a\\\"]\"});\n+  ASSERT_THAT(resp, \"[\\\"first\\\"]\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", \"$..[\\\"a\\\"]\"});\n+  ASSERT_THAT(resp, R\"([\"first\",\"second\"])\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", \"$.b[\\\"a\\\"]\"});\n+  ASSERT_THAT(resp, \"[\\\"second\\\"]\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", \"[\\\"a\\\"]\"});\n+  ASSERT_THAT(resp, \"\\\"first\\\"\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", \"..[\\\"a\\\"]\"});\n+  ASSERT_THAT(resp, \"\\\"second\\\"\");\n+\n+  json = R\"(\n+    [\"first\", [\"second\"]]\n+  )\";\n+\n+  resp = Run({\"JSON.SET\", \"json\", \".\", json});\n+  ASSERT_THAT(resp, \"OK\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", \"$[0]\"});\n+  ASSERT_THAT(resp, \"[\\\"first\\\"]\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", \"$..[0]\"});\n+  ASSERT_THAT(resp, R\"([\"first\",\"second\"])\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", \"[0]\"});\n+  ASSERT_THAT(resp, \"\\\"first\\\"\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", \"..[0]\"});\n+  ASSERT_THAT(resp, \"\\\"second\\\"\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", \"$[\\\"first\\\"]\"});\n+  ASSERT_THAT(resp, \"[]\");\n+\n+  json = R\"(\n+    {\"a\":{\"b\":{\"c\":\"first\"}}, \"b\":{\"b\":{\"c\":\"second\"}}, \"c\":{\"b\":{\"c\":\"third\"}}}\n+  )\";\n+\n+  resp = Run({\"JSON.SET\", \"json\", \".\", json});\n+  ASSERT_THAT(resp, \"OK\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", R\"($[\"a\"]['b'][\"c\"])\"});\n+  ASSERT_THAT(resp, \"[\\\"first\\\"]\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", R\"($[\"a\"].b['c'])\"});\n+  ASSERT_THAT(resp, \"[\\\"first\\\"]\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", R\"($..['b'][\"c\"])\"});\n+  ASSERT_THAT(resp, R\"([\"first\",\"second\",\"third\"])\");\n+\n+  resp = Run({\"JSON.GET\", \"json\", R\"($.c['b'][\"c\"])\"});\n+  ASSERT_THAT(resp, \"[\\\"third\\\"]\");\n+}\n+\n TEST_F(JsonFamilyTest, Type) {\n   string json = R\"(\n     [1, 2.3, \"foo\", true, null, {}, []]\ndiff --git a/src/server/search/search_family_test.cc b/src/server/search/search_family_test.cc\nindex e8a073dfa5bf..62d26319db45 100644\n--- a/src/server/search/search_family_test.cc\n+++ b/src/server/search/search_family_test.cc\n@@ -250,6 +250,20 @@ TEST_F(SearchFamilyTest, JsonAttributesPaths) {\n   EXPECT_THAT(Run({\"ft.search\", \"i1\", \"yes\"}), AreDocIds(\"k2\"));\n }\n \n+TEST_F(SearchFamilyTest, JsonIdentifierWithBrackets) {\n+  Run({\"json.set\", \"k1\", \".\", R\"({\"name\":\"London\",\"population\":8.8,\"continent\":\"Europe\"})\"});\n+  Run({\"json.set\", \"k2\", \".\", R\"({\"name\":\"Athens\",\"population\":3.1,\"continent\":\"Europe\"})\"});\n+  Run({\"json.set\", \"k3\", \".\", R\"({\"name\":\"Tel-Aviv\",\"population\":1.3,\"continent\":\"Asia\"})\"});\n+  Run({\"json.set\", \"k4\", \".\", R\"({\"name\":\"Hyderabad\",\"population\":9.8,\"continent\":\"Asia\"})\"});\n+\n+  EXPECT_EQ(Run({\"ft.create\", \"i1\", \"on\", \"json\", \"schema\", \"$[\\\"name\\\"]\", \"as\", \"name\", \"tag\",\n+                 \"$[\\\"population\\\"]\", \"as\", \"population\", \"numeric\", \"sortable\", \"$[\\\"continent\\\"]\",\n+                 \"as\", \"continent\", \"tag\"}),\n+            \"OK\");\n+\n+  EXPECT_THAT(Run({\"ft.search\", \"i1\", \"(@continent:{Europe})\"}), AreDocIds(\"k1\", \"k2\"));\n+}\n+\n // todo: fails on arm build\n #ifndef SANITIZERS\n TEST_F(SearchFamilyTest, JsonArrayValues) {\n",
  "problem_statement": "FT.SEARCH - search on TAG not working\n**Describe the bug**\r\nWhen performing a FT.SEARCH query on a TAG field on a JSON document, no results are returned. However, the same functionality works both on a HASH document in dragonfly and a JSON document using redisearch\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Create the index:\r\n```\r\nFT.CREATE \"json_city\" ON JSON PREFIX 1 json_city: SCHEMA \"$[\\\"name\\\"]\" AS name TAG SEPARATOR | \"$[\\\"population\\\"]\" AS population NUMERIC SORTABLE \"$[\\\"continent\\\"]\" AS continent TAG SEPARATOR |\r\n```\r\n2. Create the records:\r\n```\r\nJSON.SET \"json_city:01J57VZMXMTXNA912J4BV2NFV8\" $ \"{\\\"name\\\":\\\"London\\\",\\\"population\\\":8.8,\\\"continent\\\":\\\"Europe\\\"}\"\r\nJSON.SET \"json_city:01J57VZMXZEF6WFQ5CS29JHP4F\" $ \"{\\\"name\\\":\\\"Athens\\\",\\\"population\\\":3.1,\\\"continent\\\":\\\"Europe\\\"}\"\r\nJSON.SET \"json_city:01J57VZMXZXMS9EZ1QFH0YFS24\" $ \"{\\\"name\\\":\\\"Tel-Aviv\\\",\\\"population\\\":1.3,\\\"continent\\\":\\\"Asia\\\"}\"\r\nJSON.SET \"json_city:01J57VZMY0Z1VY8WH7X784CFA8\" $ \"{\\\"name\\\":\\\"Hyderabad\\\",\\\"population\\\":9.8,\\\"continent\\\":\\\"Asia\\\"}\"\r\n```\r\n3. Query all records to ensure index is setup correctly: \r\n```\r\nFT.SEARCH json_city *\r\n```\r\n4. Search for cities that have `Europe` as the `TAG` attribute `continent`.\r\n```\r\nFT.SEARCH json_city \"(@continent:{Europe})\"\r\n```\r\n5. Observe no results found\r\n```\r\n127.0.0.1:6379> FT.SEARCH json_city \"(@continent:{Europe})\"\r\n1) (integer) 0\r\n```\r\n\r\n**Expected behavior**\r\nExpected behavior would be that cities with the `continent` field matching `Europe` would be found, like they are when using hashes or redisearch. This behavior is outlined in the [dragonfly FT.SEARCH docs](https://www.dragonflydb.io/docs/command-reference/search/ft.search).\r\n\r\n**Screenshots**\r\ndragonfly (not working as expected):\r\n<img width=\"2168\" alt=\"image\" src=\"https://github.com/user-attachments/assets/cac4fc7b-623e-43d4-bea9-5af454031ad6\">\r\n[dragonfly docs](https://www.dragonflydb.io/docs/command-reference/search/ft.search):\r\n<img width=\"2168\" alt=\"Screenshot 2024-08-14 at 2 56 23\u202fAM\" src=\"https://github.com/user-attachments/assets/df239dd9-151c-4b4e-99a2-f829c4f8d80c\">\r\ndragonfly (working example using hashes) - taken from [dragonfly search announcement example](https://www.dragonflydb.io/blog/announcing-dragonfly-search):\r\n<img width=\"2168\" alt=\"image\" src=\"https://github.com/user-attachments/assets/ac12fd52-65f1-4c2b-a148-c09d460314e6\">\r\nredis-stack (uses exact same code as reproduction steps above and demonstrates expected behavior)\r\n<img width=\"2168\" alt=\"Screenshot 2024-08-14 at 3 05 15\u202fAM\" src=\"https://github.com/user-attachments/assets/4c40137a-0d79-43d0-acac-34537a41e172\">\r\n<img width=\"2168\" alt=\"Screenshot 2024-08-14 at 3 05 25\u202fAM\" src=\"https://github.com/user-attachments/assets/955aa058-41d9-4054-bcde-ba1fcf2bb140\">\r\n<img width=\"2168\" alt=\"Screenshot 2024-08-14 at 3 05 31\u202fAM\" src=\"https://github.com/user-attachments/assets/bd53475f-846f-4e9b-bad7-84410cff3c01\">\r\n<img width=\"2168\" alt=\"Screenshot 2024-08-14 at 3 05 37\u202fAM\" src=\"https://github.com/user-attachments/assets/e4e160c4-7e24-4287-b125-4a649d424a6e\">\r\n\r\n\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Mac OS 14.6.1 (23G93)\r\n - Kernel: Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:30 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T6000 arm64\r\n - Containerized?: Docker/Docker compose\r\n - Dragonfly Version: df-v1.21.1\r\n\r\n**Reproducible Code Snippet**\r\n```\r\nFT.CREATE \"json_city\" ON JSON PREFIX 1 json_city: SCHEMA \"$[\\\"name\\\"]\" AS name TAG SEPARATOR | \"$[\\\"population\\\"]\" AS population NUMERIC SORTABLE \"$[\\\"continent\\\"]\" AS continent TAG SEPARATOR |\r\n\r\nJSON.SET \"json_city:01J57VZMXMTXNA912J4BV2NFV8\" $ \"{\\\"name\\\":\\\"London\\\",\\\"population\\\":8.8,\\\"continent\\\":\\\"Europe\\\"}\"\r\nJSON.SET \"json_city:01J57VZMXZEF6WFQ5CS29JHP4F\" $ \"{\\\"name\\\":\\\"Athens\\\",\\\"population\\\":3.1,\\\"continent\\\":\\\"Europe\\\"}\"\r\nJSON.SET \"json_city:01J57VZMXZXMS9EZ1QFH0YFS24\" $ \"{\\\"name\\\":\\\"Tel-Aviv\\\",\\\"population\\\":1.3,\\\"continent\\\":\\\"Asia\\\"}\"\r\nJSON.SET \"json_city:01J57VZMY0Z1VY8WH7X784CFA8\" $ \"{\\\"name\\\":\\\"Hyderabad\\\",\\\"population\\\":9.8,\\\"continent\\\":\\\"Asia\\\"}\"\r\n\r\nFT.SEARCH json_city *\r\n\r\nFT.SEARCH json_city \"(@continent:{Europe})\"\r\n```\r\n\r\n**Additional context**\r\nCode for working hash example:\r\n```\r\nFT.CREATE cities PREFIX 1 city: SCHEMA name TEXT population NUMERIC SORTABLE continent TAG\r\nHSET city:1 name London population 8.8 continent Europe\r\nHSET city:2 name Athens population 3.1 continent Europe\r\nHSET city:3 name Tel-Aviv population 1.3 continent Asia\r\nHSET city:4 name Hyderabad population 9.8 continent Asia\r\nFT.INFO cities\r\nFT.SEARCH cities '@continent:{Europe}' SORTBY population DESC LIMIT 0 1 RETURN 2 name population\r\nFT.SEARCH cities '@population:[0 5] @continent:{Asia}' RETURN 1 name\r\n```\r\n\r\nI've also tried escaping the string in many different ways, as some other issues mention incorrect query formatting. as dragonfly is intended to be a drop in redis replacement i would hope that i wouldn't need to format the query in a different way to get it to work.\r\n```\r\nFT.SEARCH json_city \"(@continent:{Europe})\"\r\nFT.SEARCH json_city (@continent:{Europe})\r\nFT.SEARCH json_city \"@continent:\\{Europe\\}\"\r\nFT.SEARCH json_city \"@continent:\\{'Europe'\\}\"\r\n```\r\n\r\nMy ultimate goal is to get this type of query working with [redis-om-node](https://github.com/redis/redis-om-node)\r\n\r\nThanks for your help!\n",
  "hints_text": "Hi @alexbatis. Looks like we have an interfacing issue with our new improved json backend \ud83d\ude22 \r\n\r\nWe'll fix this issue in our next release, for now you can run Dragonfly with `--jsonpathv2=false`. I checked and it works\nthanks for the workaround @dranikpg. i'll watch out for the next release and give it another try then",
  "created_at": "2024-08-20T13:55:10Z",
  "modified_files": [
    "src/core/json/jsonpath_grammar.y",
    "src/core/json/jsonpath_lexer.lex"
  ],
  "modified_test_files": [
    "src/core/json/jsonpath_test.cc",
    "src/server/json_family_test.cc",
    "src/server/search/search_family_test.cc"
  ]
}