diff --git a/src/server/list_family.cc b/src/server/list_family.cc
index 8787a9a0a9b6..51158156c107 100644
--- a/src/server/list_family.cc
+++ b/src/server/list_family.cc
@@ -250,6 +250,10 @@ OpResult<string> OpMoveSingleShard(const OpArgs& op_args, string_view src, strin
                           GetFlag(FLAGS_list_compress_depth));
       dest_res.it->second.InitRobj(OBJ_LIST, OBJ_ENCODING_QUICKLIST, dest_ql);
     }
+    auto blocking_controller = op_args.db_cntx.ns->GetBlockingController(op_args.shard->shard_id());
+    if (blocking_controller) {
+      blocking_controller->AwakeWatched(op_args.db_cntx.db_index, dest);
+    }
   } else {
     if (dest_res.it->second.ObjType() != OBJ_LIST)
       return OpStatus::WRONG_TYPE;
@@ -380,9 +384,6 @@ OpResult<uint32_t> OpPush(const OpArgs& op_args, std::string_view key, ListDir d
   if (res.is_new) {
     auto blocking_controller = op_args.db_cntx.ns->GetBlockingController(es->shard_id());
     if (blocking_controller) {
-      string tmp;
-      string_view key = res.it->first.GetSlice(&tmp);
-
       blocking_controller->AwakeWatched(op_args.db_cntx.db_index, key);
     }
   }
@@ -1010,14 +1011,7 @@ OpResult<string> BPopPusher::RunSingle(time_point tp, Transaction* tx, Connectio
         std::array<string_view, 4> arr = {pop_key_, push_key_, DirToSv(popdir_), DirToSv(pushdir_)};
         RecordJournal(op_args, "LMOVE", arr, 1);
       }
-      auto blocking_controller = t->GetNamespace().GetBlockingController(shard->shard_id());
-      if (blocking_controller) {
-        string tmp;
-
-        blocking_controller->AwakeWatched(op_args.db_cntx.db_index, push_key_);
-      }
     }
-
     return OpStatus::OK;
   };
   tx->Execute(cb_move, false);
diff --git a/src/server/zset_family.cc b/src/server/zset_family.cc
index 704f1d4cbc5a..99c932d88b4e 100644
--- a/src/server/zset_family.cc
+++ b/src/server/zset_family.cc
@@ -177,8 +177,6 @@ OpResult<DbSlice::ItAndUpdater> FindZEntry(const ZSetFamily::ZParams& zparams,
 
   auto* blocking_controller = op_args.db_cntx.ns->GetBlockingController(op_args.shard->shard_id());
   if (add_res.is_new && blocking_controller) {
-    string tmp;
-    string_view key = it->first.GetSlice(&tmp);
     blocking_controller->AwakeWatched(op_args.db_cntx.db_index, key);
   }
 
