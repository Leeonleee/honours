{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2562,
  "instance_id": "dragonflydb__dragonfly-2562",
  "issue_numbers": [
    "2555"
  ],
  "base_commit": "72f651d5279eebc54ecef8b9e4d429bfee0cbd9a",
  "patch": "diff --git a/src/server/transaction.cc b/src/server/transaction.cc\nindex 2ff3c4b5bc51..0bdb82474098 100644\n--- a/src/server/transaction.cc\n+++ b/src/server/transaction.cc\n@@ -167,6 +167,7 @@ cv_status Transaction::BatonBarrierrier::Wait(time_point tp) {\n  * @param cs\n  */\n Transaction::Transaction(const CommandId* cid) : cid_{cid} {\n+  InitTxTime();\n   string_view cmd_name(cid_->name());\n   if (cmd_name == \"EXEC\" || cmd_name == \"EVAL\" || cmd_name == \"EVALSHA\") {\n     multi_.reset(new MultiData);\n@@ -502,6 +503,10 @@ void Transaction::StartMultiNonAtomic() {\n   multi_->mode = NON_ATOMIC;\n }\n \n+void Transaction::InitTxTime() {\n+  time_now_ms_ = GetCurrentTimeMs();\n+}\n+\n void Transaction::MultiSwitchCmd(const CommandId* cid) {\n   DCHECK(multi_);\n   DCHECK(!cb_ptr_);\n@@ -713,7 +718,7 @@ void Transaction::ScheduleInternal() {\n   // Loop until successfully scheduled in all shards.\n   while (true) {\n     txid_ = op_seq.fetch_add(1, memory_order_relaxed);\n-    time_now_ms_ = GetCurrentTimeMs();\n+    InitTxTime();\n \n     atomic_uint32_t schedule_fails = 0;\n     auto cb = [this, &schedule_fails](EngineShard* shard) {\n@@ -793,7 +798,7 @@ OpStatus Transaction::ScheduleSingleHop(RunnableType cb) {\n     DCHECK(IsActive(unique_shard_id_));\n     DCHECK(shard_data_.size() == 1 || multi_->mode == NON_ATOMIC);\n \n-    time_now_ms_ = GetCurrentTimeMs();\n+    InitTxTime();\n     shard_data_[SidToId(unique_shard_id_)].is_armed.store(true, memory_order_relaxed);\n \n     // Start new phase, be careful with writes until phase end!\ndiff --git a/src/server/transaction.h b/src/server/transaction.h\nindex 0fd0fd3e46d7..04f521749197 100644\n--- a/src/server/transaction.h\n+++ b/src/server/transaction.h\n@@ -237,6 +237,8 @@ class Transaction {\n   // Start multi in NON_ATOMIC mode.\n   void StartMultiNonAtomic();\n \n+  void InitTxTime();\n+\n   // Report which shards had write commands that executed on stub transactions\n   // and thus did not mark itself in MultiData::shard_journal_write.\n   void ReportWritesSquashedMulti(absl::FunctionRef<bool(ShardId)> had_write);\n",
  "test_patch": "diff --git a/src/server/generic_family_test.cc b/src/server/generic_family_test.cc\nindex 006df7ecc357..eb241b1e25cb 100644\n--- a/src/server/generic_family_test.cc\n+++ b/src/server/generic_family_test.cc\n@@ -467,7 +467,7 @@ TEST_F(GenericFamilyTest, Sort) {\n   ASSERT_THAT(Run({\"sort\", \"list-2\"}), ErrArg(\"One or more scores can't be converted into double\"));\n }\n \n-TEST_F(GenericFamilyTest, Time) {\n+TEST_F(GenericFamilyTest, TimeNoKeys) {\n   auto resp = Run({\"time\"});\n   EXPECT_THAT(resp, ArrLen(2));\n   EXPECT_THAT(resp.GetVec()[0], ArgType(RespExpr::INT64));\n@@ -488,6 +488,33 @@ TEST_F(GenericFamilyTest, Time) {\n     int64_t val0 = get<int64_t>(resp.GetVec()[0].GetVec()[i].u);\n     int64_t val1 = get<int64_t>(resp.GetVec()[1].GetVec()[i].u);\n     EXPECT_EQ(val0, val1);\n+    EXPECT_NE(val0, 0);\n+  }\n+}\n+\n+TEST_F(GenericFamilyTest, TimeWithKeys) {\n+  auto resp = Run({\"time\"});\n+  EXPECT_THAT(resp, ArrLen(2));\n+  EXPECT_THAT(resp.GetVec()[0], ArgType(RespExpr::INT64));\n+  EXPECT_THAT(resp.GetVec()[1], ArgType(RespExpr::INT64));\n+\n+  // Check that time is the same inside a transaction.\n+  Run({\"multi\"});\n+  Run({\"time\"});\n+  usleep(2000);\n+  Run({\"time\"});\n+  Run({\"get\", \"x\"});\n+  resp = Run({\"exec\"});\n+  EXPECT_THAT(resp, ArrLen(3));\n+\n+  ASSERT_THAT(resp.GetVec()[0], ArrLen(2));\n+  ASSERT_THAT(resp.GetVec()[1], ArrLen(2));\n+\n+  for (int i = 0; i < 2; ++i) {\n+    int64_t val0 = get<int64_t>(resp.GetVec()[0].GetVec()[i].u);\n+    int64_t val1 = get<int64_t>(resp.GetVec()[1].GetVec()[i].u);\n+    EXPECT_EQ(val0, val1);\n+    EXPECT_NE(val0, 0);\n   }\n }\n \n",
  "problem_statement": "EVAL \"return redis.call('TIME')\" 0 returning zeros\n**Describe the bug**\r\nExecuting `EVAL \"return redis.call('TIME')\" 0`\r\n\r\nReturns:\r\n\r\n1) (integer) \"0\"\r\n2) (integer) \"0\"\r\n\r\n**To Reproduce**\r\nExecute the above command using the following approaches:\r\n1. From the redis-cli inside the dragonfly docker image\r\n2. StackExchange.Redis via lua script\r\n3. RedisInsight workbench\r\n\r\nAll return:\r\n\r\n1) (integer) \"0\"\r\n2) (integer) \"0\"\r\n\r\nRunning TIME from redis-cli in docker image or Redis Insight correctly returns the system time values.\r\n\r\n1) (integer) \"1707230005\"\r\n2) (integer) \"748298\"\r\n\r\n**Expected behavior**\r\nThe system time values should be returned using an EVAL script.\r\n\r\nDocker image: sha256:e89f47ff91945e5f5661d82f48f302c0bd4acdd34630a1a754c8f862a1f5d0f5\n",
  "hints_text": "",
  "created_at": "2024-02-07T19:37:46Z",
  "modified_files": [
    "src/server/transaction.cc",
    "src/server/transaction.h"
  ],
  "modified_test_files": [
    "src/server/generic_family_test.cc"
  ]
}