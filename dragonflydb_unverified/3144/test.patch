diff --git a/src/core/search/search_test.cc b/src/core/search/search_test.cc
index b903027a6c49..19fd62a48103 100644
--- a/src/core/search/search_test.cc
+++ b/src/core/search/search_test.cc
@@ -70,6 +70,8 @@ Schema MakeSimpleSchema(initializer_list<pair<string_view, SchemaField::FieldTyp
   Schema schema;
   for (auto [name, type] : ilist) {
     schema.fields[name] = {type, 0, string{name}};
+    if (type == SchemaField::TAG)
+      schema.fields[name].special_params = SchemaField::TagParams{};
   }
   return schema;
 }
diff --git a/src/server/search/search_family_test.cc b/src/server/search/search_family_test.cc
index 31a750905f5f..17f5469e181f 100644
--- a/src/server/search/search_family_test.cc
+++ b/src/server/search/search_family_test.cc
@@ -307,6 +307,21 @@ TEST_F(SearchFamilyTest, Tags) {
               AreDocIds("d:1", "d:2", "d:3", "d:5", "d:6"));
 }
 
+TEST_F(SearchFamilyTest, TagOptions) {
+  Run({"hset", "d:1", "color", "    red/   green // bLUe   "});
+  Run({"hset", "d:2", "color", "blue   /// GReeN   "});
+  Run({"hset", "d:3", "color", "grEEn // yellow   //"});
+  Run({"hset", "d:4", "color", "  /blue/green/  "});
+
+  EXPECT_EQ(Run({"ft.create", "i1", "on", "hash", "schema", "color", "tag", "casesensitive",
+                 "separator", "/"}),
+            "OK");
+
+  EXPECT_THAT(Run({"ft.search", "i1", "@color:{green}"}), AreDocIds("d:1", "d:4"));
+  EXPECT_THAT(Run({"ft.search", "i1", "@color:{GReeN}"}), AreDocIds("d:2"));
+  EXPECT_THAT(Run({"ft.search", "i1", "@color:{blue}"}), AreDocIds("d:2", "d:4"));
+}
+
 TEST_F(SearchFamilyTest, Numbers) {
   for (unsigned i = 0; i <= 10; i++) {
     for (unsigned j = 0; j <= 10; j++) {
diff --git a/tests/dragonfly/search_test.py b/tests/dragonfly/search_test.py
index a65c31ab8664..9d08e0f8582e 100644
--- a/tests/dragonfly/search_test.py
+++ b/tests/dragonfly/search_test.py
@@ -378,7 +378,7 @@ async def test_index_persistence(df_server):
     SCHEMA_2 = [
         TextField("name"),
         NumericField("age", sortable=True),
-        TagField("job"),
+        TagField("job", separator=":", case_sensitive=True),
         VectorField(
             "pos",
             algorithm="HNSW",
@@ -461,6 +461,7 @@ def build_fields_set(info):
 
     assert (await i2.search("@job:{writer}")).total == 100
     assert (await i2.search("@job:{writer} @age:[100 200]")).total == 50
+    assert (await i2.search("@job:{wRiTeR}")).total == 0
 
     # Check fields are sortable
     assert (await i1.search(Query("*").sort_by("views", asc=True).paging(0, 1))).docs[0][
