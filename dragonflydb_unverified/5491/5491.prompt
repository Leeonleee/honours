You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
SPOP is extremely slow for huge sets
To reproduce: ./dragonfly --proactor_threads=1
1. add 1000000 items to a set `foo`
2. run `redis-cli SPOP foo 5` in a loop and see how dragonfly saturates its CPU

The reason: we uniformly select 5 indices in [0, 1M] and then use an `O(N)` iteration to advance over the whole set to select 5 items. 

It's not possible to fix this without the cooperation from dense_set interface
What we need to do is a different (additional) strategy when `count` is much smaller than the set size.
Say when `count * 3 < set size`.

In that case we would want to call 5 times  `DenseSet::GetRandomIterator`  which should provide a random dereferenceable place in O(1).  We do not have such a function but it's easy to implement one.
DenseSet is an array of linked lists so we could choose a random index [0, N] and then call Advance to reach a busy place.
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
