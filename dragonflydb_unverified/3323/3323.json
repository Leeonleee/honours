{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 3323,
  "instance_id": "dragonflydb__dragonfly-3323",
  "issue_numbers": [
    "3256"
  ],
  "base_commit": "3891efac2c68ad6b92ae571d323f6bea6e946562",
  "patch": "diff --git a/src/core/search/indices.cc b/src/core/search/indices.cc\nindex 747860da7022..6eb9f0d67746 100644\n--- a/src/core/search/indices.cc\n+++ b/src/core/search/indices.cc\n@@ -199,12 +199,9 @@ struct HnswlibAdapter {\n   constexpr static size_t kDefaultEfRuntime = 10;\n \n   HnswlibAdapter(const SchemaField::VectorParams& params)\n-      : space_{MakeSpace(params.dim, params.sim)}, world_{GetSpacePtr(),\n-                                                          params.capacity,\n-                                                          params.hnsw_m,\n-                                                          params.hnsw_ef_construction,\n-                                                          100 /* seed*/,\n-                                                          true} {\n+      : space_{MakeSpace(params.dim, params.sim)},\n+        world_{GetSpacePtr(), params.capacity, params.hnsw_m, params.hnsw_ef_construction,\n+               100 /* seed*/} {\n   }\n \n   void Add(float* data, DocId id) {\n",
  "test_patch": "diff --git a/src/core/search/search_test.cc b/src/core/search/search_test.cc\nindex 19fd62a48103..6e8fe9472fa3 100644\n--- a/src/core/search/search_test.cc\n+++ b/src/core/search/search_test.cc\n@@ -563,6 +563,51 @@ TEST_P(KnnTest, Cosine) {\n   }\n }\n \n+TEST_P(KnnTest, AddRemove) {\n+  auto schema = MakeSimpleSchema({{\"pos\", SchemaField::VECTOR}});\n+  schema.fields[\"pos\"].special_params =\n+      SchemaField::VectorParams{GetParam(), 1, VectorSimilarity::L2};\n+  FieldIndices indices{schema, PMR_NS::get_default_resource()};\n+\n+  vector<MockedDocument> documents(10);\n+  for (size_t i = 0; i < 10; i++) {\n+    documents[i] = Map{{\"pos\", ToBytes({float(i)})}};\n+    indices.Add(i, &documents[i]);\n+  }\n+\n+  SearchAlgorithm algo{};\n+  QueryParams params;\n+\n+  // search leftmost 5\n+  {\n+    params[\"vec\"] = ToBytes({-1.0});\n+    algo.Init(\"* =>[KNN 5 @pos $vec]\", &params);\n+    EXPECT_THAT(algo.Search(&indices).ids, testing::ElementsAre(0, 1, 2, 3, 4));\n+  }\n+\n+  // delete leftmost 5\n+  for (size_t i = 0; i < 5; i++)\n+    indices.Remove(i, &documents[i]);\n+\n+  // search leftmost 5 again\n+  {\n+    params[\"vec\"] = ToBytes({-1.0});\n+    algo.Init(\"* =>[KNN 5 @pos $vec]\", &params);\n+    EXPECT_THAT(algo.Search(&indices).ids, testing::ElementsAre(5, 6, 7, 8, 9));\n+  }\n+\n+  // add removed elements\n+  for (size_t i = 0; i < 5; i++)\n+    indices.Add(i, &documents[i]);\n+\n+  // repeat first search\n+  {\n+    params[\"vec\"] = ToBytes({-1.0});\n+    algo.Init(\"* =>[KNN 5 @pos $vec]\", &params);\n+    EXPECT_THAT(algo.Search(&indices).ids, testing::ElementsAre(0, 1, 2, 3, 4));\n+  }\n+}\n+\n TEST_P(KnnTest, AutoResize) {\n   // Make sure index resizes automatically even with a small initial capacity\n   const size_t kInitialCapacity = 5;\n",
  "problem_statement": "vector search - throws an exception when replacing an element \nDragonfly crashes with the log below. \r\nFirst, we should be able to reproduce this scenario pretty easily.\r\nThen, we should understand how to fix it.\r\n\r\n```\r\ntransaction.cc:679] Unexpected exception Can't use addPoint to update deleted elements if replacement of deleted elements is enabled.\r\n```\r\n\n",
  "hints_text": "We re-use internal document ids, it might conflict with the fact that `replace_deleted` tries to do the same \ud83d\ude42 Just disabling it might help ",
  "created_at": "2024-07-16T14:37:14Z",
  "modified_files": [
    "src/core/search/indices.cc"
  ],
  "modified_test_files": [
    "src/core/search/search_test.cc"
  ]
}