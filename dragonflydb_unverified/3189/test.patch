diff --git a/src/server/acl/acl_family_test.cc b/src/server/acl/acl_family_test.cc
index 0aac28dd3f1e..cbee4061fe18 100644
--- a/src/server/acl/acl_family_test.cc
+++ b/src/server/acl/acl_family_test.cc
@@ -47,16 +47,67 @@ TEST_F(AclFamilyTest, AclSetUser) {
   EXPECT_THAT(resp, "OK");
   resp = Run({"ACL", "LIST"});
   auto vec = resp.GetVec();
-  EXPECT_THAT(
-      vec, UnorderedElementsAre("user default on nopass ~* +@all", "user vlad off nopass -@all"));
+  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* +@all", "user vlad off -@all"));
 
   resp = Run({"ACL", "SETUSER", "vlad", "+ACL"});
   EXPECT_THAT(resp, "OK");
 
   resp = Run({"ACL", "LIST"});
   vec = resp.GetVec();
-  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* +@all",
-                                        "user vlad off nopass -@all +acl"));
+  EXPECT_THAT(vec,
+              UnorderedElementsAre("user default on nopass ~* +@all", "user vlad off -@all +acl"));
+
+  resp = Run({"ACL", "SETUSER", "vlad", "on", ">pass", ">temp"});
+  EXPECT_THAT(resp, "OK");
+
+  resp = Run({"ACL", "LIST"});
+  vec = resp.GetVec();
+  EXPECT_THAT(vec.size(), 2);
+  auto contains_vlad = [](const auto& vec) {
+    const std::string default_user = "user default on nopass ~* +@all";
+    const std::string a_permutation = "user vlad on #a6864eb339b0e1f #d74ff0ee8da3b98 -@all +acl";
+    const std::string b_permutation = "user vlad on #d74ff0ee8da3b98 #a6864eb339b0e1f -@all +acl";
+    std::string_view other;
+    if (vec[0] == default_user) {
+      other = vec[1].GetView();
+    } else if (vec[1] == default_user) {
+      other = vec[0].GetView();
+    } else {
+      return false;
+    }
+
+    return other == a_permutation || other == b_permutation;
+  };
+
+  EXPECT_THAT(contains_vlad(vec), true);
+
+  resp = Run({"AUTH", "vlad", "pass"});
+  EXPECT_THAT(resp, "OK");
+
+  resp = Run({"AUTH", "vlad", "temp"});
+  EXPECT_THAT(resp, "OK");
+
+  resp = Run({"AUTH", "default", R"("")"});
+  EXPECT_THAT(resp, "OK");
+
+  resp = Run({"ACL", "SETUSER", "vlad", ">another"});
+  EXPECT_THAT(resp, "OK");
+
+  resp = Run({"ACL", "SETUSER", "vlad", "<another"});
+  EXPECT_THAT(resp, "OK");
+
+  resp = Run({"ACL", "LIST"});
+  vec = resp.GetVec();
+  EXPECT_THAT(vec.size(), 2);
+  EXPECT_THAT(contains_vlad(vec), true);
+
+  resp = Run({"ACL", "SETUSER", "vlad", "resetpass"});
+  EXPECT_THAT(resp, "OK");
+
+  resp = Run({"ACL", "LIST"});
+  vec = resp.GetVec();
+  EXPECT_THAT(vec,
+              UnorderedElementsAre("user default on nopass ~* +@all", "user vlad on -@all +acl"));
 }
 
 TEST_F(AclFamilyTest, AclDelUser) {
@@ -105,8 +156,8 @@ TEST_F(AclFamilyTest, AclList) {
   resp = Run({"ACL", "LIST"});
   auto vec = resp.GetVec();
   EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* +@all",
-                                        "user kostas off d74ff0ee8da3b98 -@all +@admin",
-                                        "user adi off d74ff0ee8da3b98 -@all +@fast"));
+                                        "user kostas off #d74ff0ee8da3b98 -@all +@admin",
+                                        "user adi off #d74ff0ee8da3b98 -@all +@fast"));
 }
 
 TEST_F(AclFamilyTest, AclAuth) {
@@ -154,19 +205,17 @@ TEST_F(AclFamilyTest, TestAllCategories) {
       EXPECT_THAT(resp, "OK");
 
       resp = Run({"ACL", "LIST"});
-      EXPECT_THAT(resp.GetVec(),
-                  UnorderedElementsAre("user default on nopass ~* +@all",
-                                       absl::StrCat("user kostas off nopass -@all ", "+@",
-                                                    absl::AsciiStrToLower(cat))));
+      EXPECT_THAT(resp.GetVec(), UnorderedElementsAre("user default on nopass ~* +@all",
+                                                      absl::StrCat("user kostas off -@all ", "+@",
+                                                                   absl::AsciiStrToLower(cat))));
 
       resp = Run({"ACL", "SETUSER", "kostas", absl::StrCat("-@", cat)});
       EXPECT_THAT(resp, "OK");
 
       resp = Run({"ACL", "LIST"});
-      EXPECT_THAT(resp.GetVec(),
-                  UnorderedElementsAre("user default on nopass ~* +@all",
-                                       absl::StrCat("user kostas off nopass -@all ", "-@",
-                                                    absl::AsciiStrToLower(cat))));
+      EXPECT_THAT(resp.GetVec(), UnorderedElementsAre("user default on nopass ~* +@all",
+                                                      absl::StrCat("user kostas off -@all ", "-@",
+                                                                   absl::AsciiStrToLower(cat))));
 
       resp = Run({"ACL", "DELUSER", "kostas"});
       EXPECT_THAT(resp, IntArg(1));
@@ -206,7 +255,7 @@ TEST_F(AclFamilyTest, TestAllCommands) {
       resp = Run({"ACL", "LIST"});
       EXPECT_THAT(resp.GetVec(),
                   UnorderedElementsAre("user default on nopass ~* +@all",
-                                       absl::StrCat("user kostas off nopass -@all ", "+",
+                                       absl::StrCat("user kostas off -@all ", "+",
                                                     absl::AsciiStrToLower(command_name))));
 
       resp = Run({"ACL", "SETUSER", "kostas", absl::StrCat("-", command_name)});
@@ -214,7 +263,7 @@ TEST_F(AclFamilyTest, TestAllCommands) {
       resp = Run({"ACL", "LIST"});
       EXPECT_THAT(resp.GetVec(),
                   UnorderedElementsAre("user default on nopass ~* +@all",
-                                       absl::StrCat("user kostas off nopass ", "-@all ", "-",
+                                       absl::StrCat("user kostas off ", "-@all ", "-",
                                                     absl::AsciiStrToLower(command_name))));
 
       resp = Run({"ACL", "DELUSER", "kostas"});
@@ -272,7 +321,7 @@ TEST_F(AclFamilyTest, TestGetUser) {
   resp = Run({"ACL", "GETUSER", "kostas"});
   const auto& kvec = resp.GetVec();
   EXPECT_THAT(kvec[0], "flags");
-  EXPECT_THAT(kvec[1].GetVec(), UnorderedElementsAre("off", "nopass"));
+  EXPECT_THAT(kvec[1].GetVec(), UnorderedElementsAre("off"));
   EXPECT_THAT(kvec[2], "passwords");
   EXPECT_TRUE(kvec[3].GetVec().empty());
   EXPECT_THAT(kvec[4], "commands");
diff --git a/tests/dragonfly/acl_family_test.py b/tests/dragonfly/acl_family_test.py
index f044269e91c7..efc17787205a 100644
--- a/tests/dragonfly/acl_family_test.py
+++ b/tests/dragonfly/acl_family_test.py
@@ -14,53 +14,53 @@ async def test_acl_setuser(async_client):
     await async_client.execute_command("ACL SETUSER kostas")
     result = await async_client.execute_command("ACL list")
     assert 2 == len(result)
-    assert "user kostas off nopass -@all" in result
+    assert "user kostas off -@all" in result
 
     await async_client.execute_command("ACL SETUSER kostas ON")
     result = await async_client.execute_command("ACL list")
-    assert "user kostas on nopass -@all" in result
+    assert "user kostas on -@all" in result
 
     await async_client.execute_command("ACL SETUSER kostas +@list +@string +@admin")
     result = await async_client.execute_command("ACL list")
     # TODO consider printing to lowercase
-    assert "user kostas on nopass -@all +@list +@string +@admin" in result
+    assert "user kostas on -@all +@list +@string +@admin" in result
 
     await async_client.execute_command("ACL SETUSER kostas -@list -@admin")
     result = await async_client.execute_command("ACL list")
-    assert "user kostas on nopass -@all +@string -@list -@admin" in result
+    assert "user kostas on -@all +@string -@list -@admin" in result
 
     # mix and match
     await async_client.execute_command("ACL SETUSER kostas +@list -@string")
     result = await async_client.execute_command("ACL list")
-    assert "user kostas on nopass -@all -@admin +@list -@string" in result
+    assert "user kostas on -@all -@admin +@list -@string" in result
 
     # mix and match interleaved
     await async_client.execute_command("ACL SETUSER kostas +@set -@set +@set")
     result = await async_client.execute_command("ACL list")
-    assert "user kostas on nopass -@all -@admin +@list -@string +@set" in result
+    assert "user kostas on -@all -@admin +@list -@string +@set" in result
 
     await async_client.execute_command("ACL SETUSER kostas +@all")
     result = await async_client.execute_command("ACL list")
-    assert "user kostas on nopass -@admin +@list -@string +@set +@all" in result
+    assert "user kostas on -@admin +@list -@string +@set +@all" in result
 
     # commands
     await async_client.execute_command("ACL SETUSER kostas +set +get +hset")
     result = await async_client.execute_command("ACL list")
-    assert "user kostas on nopass -@admin +@list -@string +@set +@all +set +get +hset" in result
+    assert "user kostas on -@admin +@list -@string +@set +@all +set +get +hset" in result
 
     await async_client.execute_command("ACL SETUSER kostas -set -get +hset")
     result = await async_client.execute_command("ACL list")
-    assert "user kostas on nopass -@admin +@list -@string +@set +@all -set -get +hset" in result
+    assert "user kostas on -@admin +@list -@string +@set +@all -set -get +hset" in result
 
     # interleaved
     await async_client.execute_command("ACL SETUSER kostas -hset +get -get -@all")
     result = await async_client.execute_command("ACL list")
-    assert "user kostas on nopass -@admin +@list -@string +@set -set -hset -get -@all" in result
+    assert "user kostas on -@admin +@list -@string +@set -set -hset -get -@all" in result
 
     # interleaved with categories
     await async_client.execute_command("ACL SETUSER kostas +@string +get -get +set")
     result = await async_client.execute_command("ACL list")
-    assert "user kostas on nopass -@admin +@list +@set -hset -@all +@string -get +set" in result
+    assert "user kostas on -@admin +@list +@set -hset -@all +@string -get +set" in result
 
 
 @pytest.mark.asyncio
@@ -332,7 +332,7 @@ async def test_good_acl_file(df_local_factory, tmp_dir):
     await client.execute_command("ACL LOAD")
     result = await client.execute_command("ACL list")
     assert 2 == len(result)
-    assert "user MrFoo on ea71c25a7a60224 -@all" in result
+    assert "user MrFoo on #ea71c25a7a60224 -@all" in result
     assert "user default on nopass ~* +@all" in result
     await client.execute_command("ACL DELUSER MrFoo")
 
@@ -342,9 +342,9 @@ async def test_good_acl_file(df_local_factory, tmp_dir):
 
     result = await client.execute_command("ACL list")
     assert 4 == len(result)
-    assert "user roy on ea71c25a7a60224 -@all +@string +hset" in result
-    assert "user shahar off ea71c25a7a60224 -@all +@set" in result
-    assert "user vlad off nopass ~foo ~bar* -@all +@string" in result
+    assert "user roy on #ea71c25a7a60224 -@all +@string +hset" in result
+    assert "user shahar off #ea71c25a7a60224 -@all +@set" in result
+    assert "user vlad off ~foo ~bar* -@all +@string" in result
     assert "user default on nopass ~* +@all" in result
 
     result = await client.execute_command("ACL DELUSER shahar")
@@ -356,8 +356,8 @@ async def test_good_acl_file(df_local_factory, tmp_dir):
 
     result = await client.execute_command("ACL list")
     assert 3 == len(result)
-    assert "user roy on ea71c25a7a60224 -@all +@string +hset" in result
-    assert "user vlad off nopass ~foo ~bar* -@all +@string" in result
+    assert "user roy on #ea71c25a7a60224 -@all +@string +hset" in result
+    assert "user vlad off ~foo ~bar* -@all +@string" in result
     assert "user default on nopass ~* +@all" in result
 
     await client.close()
