{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 3189,
  "instance_id": "dragonflydb__dragonfly-3189",
  "issue_numbers": [
    "2817"
  ],
  "base_commit": "50f3ffbe52144c71ccd7e855bbe8d119c05d97dd",
  "patch": "diff --git a/src/server/acl/acl_family.cc b/src/server/acl/acl_family.cc\nindex 3a58e77fb072..d7b18fe0b359 100644\n--- a/src/server/acl/acl_family.cc\n+++ b/src/server/acl/acl_family.cc\n@@ -64,8 +64,7 @@ void AclFamily::List(CmdArgList args, ConnectionContext* cntx) {\n \n   for (const auto& [username, user] : registry) {\n     std::string buffer = \"user \";\n-    const std::string_view pass = user.Password();\n-    const std::string password = pass == \"nopass\" ? \"nopass\" : PrettyPrintSha(pass);\n+    const std::string password = PasswordsToString(user.Passwords(), user.HasNopass(), false);\n \n     const std::string acl_keys = AclKeysToString(user.Keys());\n     const std::string maybe_space_com = acl_keys.empty() ? \"\" : \" \";\n@@ -75,7 +74,7 @@ void AclFamily::List(CmdArgList args, ConnectionContext* cntx) {\n \n     using namespace std::string_view_literals;\n \n-    absl::StrAppend(&buffer, username, \" \", user.IsActive() ? \"on \"sv : \"off \"sv, password, \" \",\n+    absl::StrAppend(&buffer, username, \" \", user.IsActive() ? \"on \"sv : \"off \"sv, password,\n                     acl_keys, maybe_space_com, acl_cat_and_commands);\n \n     cntx->SendSimpleString(buffer);\n@@ -196,9 +195,7 @@ std::string AclFamily::RegistryToString() const {\n   std::string result;\n   for (auto& [username, user] : registry) {\n     std::string command = \"USER \";\n-    const std::string_view pass = user.Password();\n-    const std::string password =\n-        pass == \"nopass\" ? \"nopass \" : absl::StrCat(\"#\", PrettyPrintSha(pass, true), \" \");\n+    const std::string password = PasswordsToString(user.Passwords(), user.HasNopass(), true);\n \n     const std::string acl_keys = AclKeysToString(user.Keys());\n     const std::string maybe_space = acl_keys.empty() ? \"\" : \" \";\n@@ -495,7 +492,10 @@ void AclFamily::GetUser(CmdArgList args, ConnectionContext* cntx) {\n   }\n   auto& user = registry.find(username)->second;\n   std::string status = user.IsActive() ? \"on\" : \"off\";\n-  auto pass = user.Password();\n+  auto pass = PasswordsToString(user.Passwords(), user.HasNopass(), false);\n+  if (!pass.empty()) {\n+    pass.pop_back();\n+  }\n \n   auto* rb = static_cast<facade::RedisReplyBuilder*>(cntx->reply_builder());\n   rb->StartArray(8);\n@@ -509,7 +509,7 @@ void AclFamily::GetUser(CmdArgList args, ConnectionContext* cntx) {\n   }\n \n   rb->SendSimpleString(\"passwords\");\n-  if (pass != \"nopass\") {\n+  if (pass != \"nopass\" && !pass.empty()) {\n     rb->SendSimpleString(pass);\n   } else {\n     rb->SendEmptyArray();\n@@ -647,7 +647,7 @@ void AclFamily::Init(facade::Listener* main_listener, UserRegistry* registry) {\n   registry_ = registry;\n   config_registry.RegisterMutable(\"requirepass\", [this](const absl::CommandLineFlag& flag) {\n     User::UpdateRequest rqst;\n-    rqst.password = flag.CurrentValue();\n+    rqst.passwords.push_back({flag.CurrentValue()});\n     registry_->MaybeAddAndUpdate(\"default\", std::move(rqst));\n     return true;\n   });\ndiff --git a/src/server/acl/helpers.cc b/src/server/acl/helpers.cc\nindex 4493eb334b03..68c219130ed9 100644\n--- a/src/server/acl/helpers.cc\n+++ b/src/server/acl/helpers.cc\n@@ -160,13 +160,22 @@ std::optional<ParseKeyResult> MaybeParseAclKey(std::string_view command) {\n   return ParseKeyResult{std::string(key), op};\n }\n \n-std::optional<std::string> MaybeParsePassword(std::string_view command, bool hashed) {\n+std::optional<User::UpdatePass> MaybeParsePassword(std::string_view command, bool hashed) {\n+  using UpPass = User::UpdatePass;\n   if (command == \"nopass\") {\n-    return std::string(command);\n+    return UpPass{\"\", false, true};\n+  }\n+\n+  if (command == \"resetpass\") {\n+    return UpPass{\"\", false, false, true};\n   }\n \n   if (command[0] == '>' || (hashed && command[0] == '#')) {\n-    return std::string(command.substr(1));\n+    return UpPass{std::string(command.substr(1))};\n+  }\n+\n+  if (command[0] == '<') {\n+    return UpPass{std::string(command.substr(1)), true};\n   }\n \n   return {};\n@@ -261,10 +270,8 @@ std::variant<User::UpdateRequest, ErrorReply> ParseAclSetUser(facade::ArgRange a\n \n   for (std::string_view arg : args) {\n     if (auto pass = MaybeParsePassword(facade::ToSV(arg), hashed); pass) {\n-      if (req.password) {\n-        return ErrorReply(\"Only one password is allowed\");\n-      }\n-      req.password = std::move(pass);\n+      req.passwords.push_back(std::move(*pass));\n+\n       if (hashed && absl::StartsWith(facade::ToSV(arg), \"#\")) {\n         req.is_hashed = hashed;\n       }\n@@ -346,4 +353,16 @@ std::string AclKeysToString(const AclKeys& keys) {\n   return result;\n }\n \n+std::string PasswordsToString(const absl::flat_hash_set<std::string>& passwords, bool nopass,\n+                              bool full_sha) {\n+  if (nopass) {\n+    return \"nopass \";\n+  }\n+  std::string result;\n+  for (const auto& pass : passwords) {\n+    absl::StrAppend(&result, \"#\", PrettyPrintSha(pass, full_sha), \" \");\n+  }\n+\n+  return result;\n+}\n }  // namespace dfly::acl\ndiff --git a/src/server/acl/helpers.h b/src/server/acl/helpers.h\nindex 0840ab817e70..75cbd4d8b491 100644\n--- a/src/server/acl/helpers.h\n+++ b/src/server/acl/helpers.h\n@@ -10,6 +10,7 @@\n #include <string_view>\n #include <variant>\n \n+#include \"absl/container/flat_hash_set.h\"\n #include \"facade/facade_types.h\"\n #include \"server/acl/acl_log.h\"\n #include \"server/acl/user.h\"\n@@ -23,7 +24,7 @@ std::string AclCatAndCommandToString(const User::CategoryChanges& cat,\n std::string PrettyPrintSha(std::string_view pass, bool all = false);\n \n // When hashed is true, we allow passwords that start with both # and >\n-std::optional<std::string> MaybeParsePassword(std::string_view command, bool hashed = false);\n+std::optional<User::UpdatePass> MaybeParsePassword(std::string_view command, bool hashed = false);\n \n std::optional<bool> MaybeParseStatus(std::string_view command);\n \n@@ -55,4 +56,8 @@ struct ParseKeyResult {\n std::optional<ParseKeyResult> MaybeParseAclKey(std::string_view command);\n \n std::string AclKeysToString(const AclKeys& keys);\n+\n+std::string PasswordsToString(const absl::flat_hash_set<std::string>& passwords, bool nopass,\n+                              bool full_sha);\n+\n }  // namespace dfly::acl\ndiff --git a/src/server/acl/user.cc b/src/server/acl/user.cc\nindex 863d9857f81e..48a3be8b326b 100644\n--- a/src/server/acl/user.cc\n+++ b/src/server/acl/user.cc\n@@ -8,6 +8,7 @@\n \n #include <limits>\n \n+#include \"absl/container/flat_hash_set.h\"\n #include \"absl/strings/escaping.h\"\n #include \"core/overloaded.h\"\n #include \"server/acl/helpers.h\"\n@@ -30,8 +31,20 @@ User::User() {\n }\n \n void User::Update(UpdateRequest&& req) {\n-  if (req.password) {\n-    SetPasswordHash(*req.password, req.is_hashed);\n+  for (auto& pass : req.passwords) {\n+    if (pass.nopass) {\n+      SetNopass();\n+      continue;\n+    }\n+    if (pass.unset) {\n+      UnsetPassword(pass.password);\n+      continue;\n+    }\n+    if (pass.reset_password) {\n+      password_hashes_.clear();\n+      continue;\n+    }\n+    SetPasswordHash(pass.password, req.is_hashed);\n   }\n \n   auto cat_visitor = [this](UpdateRequest::CategoryValueType cat) {\n@@ -68,23 +81,23 @@ void User::Update(UpdateRequest&& req) {\n }\n \n void User::SetPasswordHash(std::string_view password, bool is_hashed) {\n-  if (password == \"nopass\") {\n-    return;\n-  }\n-\n+  nopass_ = false;\n   if (is_hashed) {\n-    password_hash_ = absl::HexStringToBytes(password);\n+    password_hashes_.insert(absl::HexStringToBytes(password));\n     return;\n   }\n-  password_hash_ = StringSHA256(password);\n+  password_hashes_.insert(StringSHA256(password));\n+}\n+\n+void User::UnsetPassword(std::string_view password) {\n+  password_hashes_.erase(StringSHA256(password));\n }\n \n bool User::HasPassword(std::string_view password) const {\n-  if (!password_hash_) {\n+  if (nopass_) {\n     return true;\n   }\n-  // hash password and compare\n-  return *password_hash_ == StringSHA256(password);\n+  return password_hashes_.contains(StringSHA256(password));\n }\n \n void User::SetAclCategoriesAndIncrSeq(uint32_t cat) {\n@@ -174,10 +187,12 @@ bool User::IsActive() const {\n   return is_active_;\n }\n \n-static const std::string_view default_pass = \"nopass\";\n+const absl::flat_hash_set<std::string>& User::Passwords() const {\n+  return password_hashes_;\n+}\n \n-std::string_view User::Password() const {\n-  return password_hash_ ? *password_hash_ : default_pass;\n+bool User::HasNopass() const {\n+  return nopass_;\n }\n \n const AclKeys& User::Keys() const {\n@@ -206,4 +221,9 @@ void User::SetKeyGlobs(std::vector<UpdateKey> keys) {\n   }\n }\n \n+void User::SetNopass() {\n+  nopass_ = true;\n+  password_hashes_.clear();\n+}\n+\n }  // namespace dfly::acl\ndiff --git a/src/server/acl/user.h b/src/server/acl/user.h\nindex fd3e84a3ff76..3e66491f08c9 100644\n--- a/src/server/acl/user.h\n+++ b/src/server/acl/user.h\n@@ -14,6 +14,7 @@\n #include <vector>\n \n #include \"absl/container/flat_hash_map.h\"\n+#include \"absl/container/flat_hash_set.h\"\n #include \"absl/hash/hash.h\"\n #include \"server/acl/acl_commands_def.h\"\n \n@@ -30,8 +31,16 @@ class User final {\n     bool reset_keys = false;\n   };\n \n+  struct UpdatePass {\n+    std::string password;\n+    // Set to denote remove password\n+    bool unset{false};\n+    bool nopass{false};\n+    bool reset_password{false};\n+  };\n+\n   struct UpdateRequest {\n-    std::optional<std::string> password{};\n+    std::vector<UpdatePass> passwords;\n \n     std::optional<bool> is_active{};\n \n@@ -48,6 +57,8 @@ class User final {\n     std::vector<UpdateKey> keys;\n     bool reset_all_keys{false};\n     bool allow_all_keys{false};\n+    // TODO allow reset all\n+    // bool reset_all{false};\n   };\n \n   using CategoryChange = uint32_t;\n@@ -80,7 +91,9 @@ class User final {\n \n   bool IsActive() const;\n \n-  std::string_view Password() const;\n+  const absl::flat_hash_set<std::string>& Passwords() const;\n+\n+  bool HasNopass() const;\n \n   // Selector maps a command string (like HSET, SET etc) to\n   // its respective ID within the commands vector.\n@@ -111,13 +124,19 @@ class User final {\n \n   // For passwords\n   void SetPasswordHash(std::string_view password, bool is_hashed);\n+  void UnsetPassword(std::string_view password);\n \n   // For ACL key globs\n   void SetKeyGlobs(std::vector<UpdateKey> keys);\n \n-  // when optional is empty, the special `nopass` password is implied\n-  // password hashed with xx64\n-  std::optional<std::string> password_hash_;\n+  // Set NOPASS and remove all passwords\n+  void SetNopass();\n+\n+  // Passwords for each user\n+  absl::flat_hash_set<std::string> password_hashes_;\n+  // if `nopass` is used\n+  bool nopass_ = false;\n+\n   uint32_t acl_categories_{NONE};\n   // Each element index in the vector corresponds to a familly of commands\n   // Each bit in the uin64_t field at index id, corresponds to a specific\ndiff --git a/src/server/acl/user_registry.cc b/src/server/acl/user_registry.cc\nindex 54510344e86c..9bd9645bff6c 100644\n--- a/src/server/acl/user_registry.cc\n+++ b/src/server/acl/user_registry.cc\n@@ -75,7 +75,8 @@ UserRegistry::UserWithWriteLock::UserWithWriteLock(std::unique_lock<fb2::SharedM\n User::UpdateRequest UserRegistry::DefaultUserUpdateRequest() const {\n   std::pair<User::Sign, uint32_t> acl{User::Sign::PLUS, acl::ALL};\n   auto key = User::UpdateKey{\"~*\", KeyOp::READ_WRITE, true, false};\n-  return {{}, true, false, {std::move(acl)}, {std::move(key)}};\n+  auto pass = std::vector<User::UpdatePass>{{\"\", false, true}};\n+  return {std::move(pass), true, false, {std::move(acl)}, {std::move(key)}};\n }\n \n void UserRegistry::Init() {\n@@ -86,11 +87,14 @@ void UserRegistry::Init() {\n   auto default_user = DefaultUserUpdateRequest();\n   auto maybe_password = absl::GetFlag(FLAGS_requirepass);\n   if (!maybe_password.empty()) {\n-    default_user.password = std::move(maybe_password);\n+    default_user.passwords.front().password = std::move(maybe_password);\n+    default_user.passwords.front().nopass = false;\n   } else if (const char* env_var = getenv(\"DFLY_PASSWORD\"); env_var) {\n-    default_user.password = env_var;\n+    default_user.passwords.front().password = env_var;\n+    default_user.passwords.front().nopass = false;\n   } else if (const char* env_var = getenv(\"DFLY_requirepass\"); env_var) {\n-    default_user.password = env_var;\n+    default_user.passwords.front().password = env_var;\n+    default_user.passwords.front().nopass = false;\n   }\n   MaybeAddAndUpdate(\"default\", std::move(default_user));\n }\n",
  "test_patch": "diff --git a/src/server/acl/acl_family_test.cc b/src/server/acl/acl_family_test.cc\nindex 0aac28dd3f1e..cbee4061fe18 100644\n--- a/src/server/acl/acl_family_test.cc\n+++ b/src/server/acl/acl_family_test.cc\n@@ -47,16 +47,67 @@ TEST_F(AclFamilyTest, AclSetUser) {\n   EXPECT_THAT(resp, \"OK\");\n   resp = Run({\"ACL\", \"LIST\"});\n   auto vec = resp.GetVec();\n-  EXPECT_THAT(\n-      vec, UnorderedElementsAre(\"user default on nopass ~* +@all\", \"user vlad off nopass -@all\"));\n+  EXPECT_THAT(vec, UnorderedElementsAre(\"user default on nopass ~* +@all\", \"user vlad off -@all\"));\n \n   resp = Run({\"ACL\", \"SETUSER\", \"vlad\", \"+ACL\"});\n   EXPECT_THAT(resp, \"OK\");\n \n   resp = Run({\"ACL\", \"LIST\"});\n   vec = resp.GetVec();\n-  EXPECT_THAT(vec, UnorderedElementsAre(\"user default on nopass ~* +@all\",\n-                                        \"user vlad off nopass -@all +acl\"));\n+  EXPECT_THAT(vec,\n+              UnorderedElementsAre(\"user default on nopass ~* +@all\", \"user vlad off -@all +acl\"));\n+\n+  resp = Run({\"ACL\", \"SETUSER\", \"vlad\", \"on\", \">pass\", \">temp\"});\n+  EXPECT_THAT(resp, \"OK\");\n+\n+  resp = Run({\"ACL\", \"LIST\"});\n+  vec = resp.GetVec();\n+  EXPECT_THAT(vec.size(), 2);\n+  auto contains_vlad = [](const auto& vec) {\n+    const std::string default_user = \"user default on nopass ~* +@all\";\n+    const std::string a_permutation = \"user vlad on #a6864eb339b0e1f #d74ff0ee8da3b98 -@all +acl\";\n+    const std::string b_permutation = \"user vlad on #d74ff0ee8da3b98 #a6864eb339b0e1f -@all +acl\";\n+    std::string_view other;\n+    if (vec[0] == default_user) {\n+      other = vec[1].GetView();\n+    } else if (vec[1] == default_user) {\n+      other = vec[0].GetView();\n+    } else {\n+      return false;\n+    }\n+\n+    return other == a_permutation || other == b_permutation;\n+  };\n+\n+  EXPECT_THAT(contains_vlad(vec), true);\n+\n+  resp = Run({\"AUTH\", \"vlad\", \"pass\"});\n+  EXPECT_THAT(resp, \"OK\");\n+\n+  resp = Run({\"AUTH\", \"vlad\", \"temp\"});\n+  EXPECT_THAT(resp, \"OK\");\n+\n+  resp = Run({\"AUTH\", \"default\", R\"(\"\")\"});\n+  EXPECT_THAT(resp, \"OK\");\n+\n+  resp = Run({\"ACL\", \"SETUSER\", \"vlad\", \">another\"});\n+  EXPECT_THAT(resp, \"OK\");\n+\n+  resp = Run({\"ACL\", \"SETUSER\", \"vlad\", \"<another\"});\n+  EXPECT_THAT(resp, \"OK\");\n+\n+  resp = Run({\"ACL\", \"LIST\"});\n+  vec = resp.GetVec();\n+  EXPECT_THAT(vec.size(), 2);\n+  EXPECT_THAT(contains_vlad(vec), true);\n+\n+  resp = Run({\"ACL\", \"SETUSER\", \"vlad\", \"resetpass\"});\n+  EXPECT_THAT(resp, \"OK\");\n+\n+  resp = Run({\"ACL\", \"LIST\"});\n+  vec = resp.GetVec();\n+  EXPECT_THAT(vec,\n+              UnorderedElementsAre(\"user default on nopass ~* +@all\", \"user vlad on -@all +acl\"));\n }\n \n TEST_F(AclFamilyTest, AclDelUser) {\n@@ -105,8 +156,8 @@ TEST_F(AclFamilyTest, AclList) {\n   resp = Run({\"ACL\", \"LIST\"});\n   auto vec = resp.GetVec();\n   EXPECT_THAT(vec, UnorderedElementsAre(\"user default on nopass ~* +@all\",\n-                                        \"user kostas off d74ff0ee8da3b98 -@all +@admin\",\n-                                        \"user adi off d74ff0ee8da3b98 -@all +@fast\"));\n+                                        \"user kostas off #d74ff0ee8da3b98 -@all +@admin\",\n+                                        \"user adi off #d74ff0ee8da3b98 -@all +@fast\"));\n }\n \n TEST_F(AclFamilyTest, AclAuth) {\n@@ -154,19 +205,17 @@ TEST_F(AclFamilyTest, TestAllCategories) {\n       EXPECT_THAT(resp, \"OK\");\n \n       resp = Run({\"ACL\", \"LIST\"});\n-      EXPECT_THAT(resp.GetVec(),\n-                  UnorderedElementsAre(\"user default on nopass ~* +@all\",\n-                                       absl::StrCat(\"user kostas off nopass -@all \", \"+@\",\n-                                                    absl::AsciiStrToLower(cat))));\n+      EXPECT_THAT(resp.GetVec(), UnorderedElementsAre(\"user default on nopass ~* +@all\",\n+                                                      absl::StrCat(\"user kostas off -@all \", \"+@\",\n+                                                                   absl::AsciiStrToLower(cat))));\n \n       resp = Run({\"ACL\", \"SETUSER\", \"kostas\", absl::StrCat(\"-@\", cat)});\n       EXPECT_THAT(resp, \"OK\");\n \n       resp = Run({\"ACL\", \"LIST\"});\n-      EXPECT_THAT(resp.GetVec(),\n-                  UnorderedElementsAre(\"user default on nopass ~* +@all\",\n-                                       absl::StrCat(\"user kostas off nopass -@all \", \"-@\",\n-                                                    absl::AsciiStrToLower(cat))));\n+      EXPECT_THAT(resp.GetVec(), UnorderedElementsAre(\"user default on nopass ~* +@all\",\n+                                                      absl::StrCat(\"user kostas off -@all \", \"-@\",\n+                                                                   absl::AsciiStrToLower(cat))));\n \n       resp = Run({\"ACL\", \"DELUSER\", \"kostas\"});\n       EXPECT_THAT(resp, IntArg(1));\n@@ -206,7 +255,7 @@ TEST_F(AclFamilyTest, TestAllCommands) {\n       resp = Run({\"ACL\", \"LIST\"});\n       EXPECT_THAT(resp.GetVec(),\n                   UnorderedElementsAre(\"user default on nopass ~* +@all\",\n-                                       absl::StrCat(\"user kostas off nopass -@all \", \"+\",\n+                                       absl::StrCat(\"user kostas off -@all \", \"+\",\n                                                     absl::AsciiStrToLower(command_name))));\n \n       resp = Run({\"ACL\", \"SETUSER\", \"kostas\", absl::StrCat(\"-\", command_name)});\n@@ -214,7 +263,7 @@ TEST_F(AclFamilyTest, TestAllCommands) {\n       resp = Run({\"ACL\", \"LIST\"});\n       EXPECT_THAT(resp.GetVec(),\n                   UnorderedElementsAre(\"user default on nopass ~* +@all\",\n-                                       absl::StrCat(\"user kostas off nopass \", \"-@all \", \"-\",\n+                                       absl::StrCat(\"user kostas off \", \"-@all \", \"-\",\n                                                     absl::AsciiStrToLower(command_name))));\n \n       resp = Run({\"ACL\", \"DELUSER\", \"kostas\"});\n@@ -272,7 +321,7 @@ TEST_F(AclFamilyTest, TestGetUser) {\n   resp = Run({\"ACL\", \"GETUSER\", \"kostas\"});\n   const auto& kvec = resp.GetVec();\n   EXPECT_THAT(kvec[0], \"flags\");\n-  EXPECT_THAT(kvec[1].GetVec(), UnorderedElementsAre(\"off\", \"nopass\"));\n+  EXPECT_THAT(kvec[1].GetVec(), UnorderedElementsAre(\"off\"));\n   EXPECT_THAT(kvec[2], \"passwords\");\n   EXPECT_TRUE(kvec[3].GetVec().empty());\n   EXPECT_THAT(kvec[4], \"commands\");\ndiff --git a/tests/dragonfly/acl_family_test.py b/tests/dragonfly/acl_family_test.py\nindex f044269e91c7..efc17787205a 100644\n--- a/tests/dragonfly/acl_family_test.py\n+++ b/tests/dragonfly/acl_family_test.py\n@@ -14,53 +14,53 @@ async def test_acl_setuser(async_client):\n     await async_client.execute_command(\"ACL SETUSER kostas\")\n     result = await async_client.execute_command(\"ACL list\")\n     assert 2 == len(result)\n-    assert \"user kostas off nopass -@all\" in result\n+    assert \"user kostas off -@all\" in result\n \n     await async_client.execute_command(\"ACL SETUSER kostas ON\")\n     result = await async_client.execute_command(\"ACL list\")\n-    assert \"user kostas on nopass -@all\" in result\n+    assert \"user kostas on -@all\" in result\n \n     await async_client.execute_command(\"ACL SETUSER kostas +@list +@string +@admin\")\n     result = await async_client.execute_command(\"ACL list\")\n     # TODO consider printing to lowercase\n-    assert \"user kostas on nopass -@all +@list +@string +@admin\" in result\n+    assert \"user kostas on -@all +@list +@string +@admin\" in result\n \n     await async_client.execute_command(\"ACL SETUSER kostas -@list -@admin\")\n     result = await async_client.execute_command(\"ACL list\")\n-    assert \"user kostas on nopass -@all +@string -@list -@admin\" in result\n+    assert \"user kostas on -@all +@string -@list -@admin\" in result\n \n     # mix and match\n     await async_client.execute_command(\"ACL SETUSER kostas +@list -@string\")\n     result = await async_client.execute_command(\"ACL list\")\n-    assert \"user kostas on nopass -@all -@admin +@list -@string\" in result\n+    assert \"user kostas on -@all -@admin +@list -@string\" in result\n \n     # mix and match interleaved\n     await async_client.execute_command(\"ACL SETUSER kostas +@set -@set +@set\")\n     result = await async_client.execute_command(\"ACL list\")\n-    assert \"user kostas on nopass -@all -@admin +@list -@string +@set\" in result\n+    assert \"user kostas on -@all -@admin +@list -@string +@set\" in result\n \n     await async_client.execute_command(\"ACL SETUSER kostas +@all\")\n     result = await async_client.execute_command(\"ACL list\")\n-    assert \"user kostas on nopass -@admin +@list -@string +@set +@all\" in result\n+    assert \"user kostas on -@admin +@list -@string +@set +@all\" in result\n \n     # commands\n     await async_client.execute_command(\"ACL SETUSER kostas +set +get +hset\")\n     result = await async_client.execute_command(\"ACL list\")\n-    assert \"user kostas on nopass -@admin +@list -@string +@set +@all +set +get +hset\" in result\n+    assert \"user kostas on -@admin +@list -@string +@set +@all +set +get +hset\" in result\n \n     await async_client.execute_command(\"ACL SETUSER kostas -set -get +hset\")\n     result = await async_client.execute_command(\"ACL list\")\n-    assert \"user kostas on nopass -@admin +@list -@string +@set +@all -set -get +hset\" in result\n+    assert \"user kostas on -@admin +@list -@string +@set +@all -set -get +hset\" in result\n \n     # interleaved\n     await async_client.execute_command(\"ACL SETUSER kostas -hset +get -get -@all\")\n     result = await async_client.execute_command(\"ACL list\")\n-    assert \"user kostas on nopass -@admin +@list -@string +@set -set -hset -get -@all\" in result\n+    assert \"user kostas on -@admin +@list -@string +@set -set -hset -get -@all\" in result\n \n     # interleaved with categories\n     await async_client.execute_command(\"ACL SETUSER kostas +@string +get -get +set\")\n     result = await async_client.execute_command(\"ACL list\")\n-    assert \"user kostas on nopass -@admin +@list +@set -hset -@all +@string -get +set\" in result\n+    assert \"user kostas on -@admin +@list +@set -hset -@all +@string -get +set\" in result\n \n \n @pytest.mark.asyncio\n@@ -332,7 +332,7 @@ async def test_good_acl_file(df_local_factory, tmp_dir):\n     await client.execute_command(\"ACL LOAD\")\n     result = await client.execute_command(\"ACL list\")\n     assert 2 == len(result)\n-    assert \"user MrFoo on ea71c25a7a60224 -@all\" in result\n+    assert \"user MrFoo on #ea71c25a7a60224 -@all\" in result\n     assert \"user default on nopass ~* +@all\" in result\n     await client.execute_command(\"ACL DELUSER MrFoo\")\n \n@@ -342,9 +342,9 @@ async def test_good_acl_file(df_local_factory, tmp_dir):\n \n     result = await client.execute_command(\"ACL list\")\n     assert 4 == len(result)\n-    assert \"user roy on ea71c25a7a60224 -@all +@string +hset\" in result\n-    assert \"user shahar off ea71c25a7a60224 -@all +@set\" in result\n-    assert \"user vlad off nopass ~foo ~bar* -@all +@string\" in result\n+    assert \"user roy on #ea71c25a7a60224 -@all +@string +hset\" in result\n+    assert \"user shahar off #ea71c25a7a60224 -@all +@set\" in result\n+    assert \"user vlad off ~foo ~bar* -@all +@string\" in result\n     assert \"user default on nopass ~* +@all\" in result\n \n     result = await client.execute_command(\"ACL DELUSER shahar\")\n@@ -356,8 +356,8 @@ async def test_good_acl_file(df_local_factory, tmp_dir):\n \n     result = await client.execute_command(\"ACL list\")\n     assert 3 == len(result)\n-    assert \"user roy on ea71c25a7a60224 -@all +@string +hset\" in result\n-    assert \"user vlad off nopass ~foo ~bar* -@all +@string\" in result\n+    assert \"user roy on #ea71c25a7a60224 -@all +@string +hset\" in result\n+    assert \"user vlad off ~foo ~bar* -@all +@string\" in result\n     assert \"user default on nopass ~* +@all\" in result\n \n     await client.close()\n",
  "problem_statement": "global password rotation\nWe should be able to rotate global password in such way that we will allow gradual updates of the clients connecting to Dragonfly.\r\n\r\nThe flow is as follows:\r\n1. Allow Dragonfly to accept multiple passwords\r\n2. Gradually update all the clients connecting to Dragonfly\r\n3. Remove the old password from Dragonfly.\r\n\r\nIn addition, we should be able to persist the passwords change to provide consistency during restarts.\r\n\r\nOne way to achieve is to update \"default\" user via ACLS.\r\n\r\n`ACL SETUSER` format should support multiple passwords (see https://valkey.io/commands/acl-setuser/).\r\n However our implementation does not support this today (https://www.dragonflydb.io/docs/command-reference/acl/setuser)\r\n\r\nOnce we fix this, we also should support it in the ACL  \"SAVE/LOAD\" flows. Finally, to make sure that if acl-file argument is set to some path but the file is missing, Dragonfly should still start (with warning).  \n",
  "hints_text": "I think this is something that was mentioned in that past by @ashotland \nYes, it was something we discussed today. I think extending our ACL implementation to Valkey spec will solve the issue. \n@adiholden  could be nice if we can implement it in July.\r\n\r\n@ashotland FYI.\n@romange I can take care of this on the side :) \nThanks!",
  "created_at": "2024-06-18T17:03:54Z",
  "modified_files": [
    "src/server/acl/acl_family.cc",
    "src/server/acl/helpers.cc",
    "src/server/acl/helpers.h",
    "src/server/acl/user.cc",
    "src/server/acl/user.h",
    "src/server/acl/user_registry.cc"
  ],
  "modified_test_files": [
    "src/server/acl/acl_family_test.cc",
    "tests/dragonfly/acl_family_test.py"
  ]
}