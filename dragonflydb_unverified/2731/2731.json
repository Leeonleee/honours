{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2731,
  "instance_id": "dragonflydb__dragonfly-2731",
  "issue_numbers": [
    "2726"
  ],
  "base_commit": "e2b5d48837b0de65fb8644cd04f3fb95abc884cc",
  "patch": "diff --git a/src/server/cluster/cluster_family.cc b/src/server/cluster/cluster_family.cc\nindex 584dda9ec0f7..e9e79134a187 100644\n--- a/src/server/cluster/cluster_family.cc\n+++ b/src/server/cluster/cluster_family.cc\n@@ -250,7 +250,8 @@ void ClusterNodesImpl(const ClusterShards& config, string_view my_id, Connection\n       }\n     }\n \n-    absl::StrAppend(&result, \"\\r\\n\");\n+    // Separate lines with only \\n, not \\r\\n, see #2726\n+    absl::StrAppend(&result, \"\\n\");\n   };\n \n   for (const auto& shard : config) {\n@@ -280,6 +281,7 @@ namespace {\n void ClusterInfoImpl(const ClusterShards& config, ConnectionContext* cntx) {\n   std::string msg;\n   auto append = [&msg](absl::AlphaNum a1, absl::AlphaNum a2) {\n+    // Separate lines with \\r\\n, not \\n, see #2726\n     absl::StrAppend(&msg, a1, \":\", a2, \"\\r\\n\");\n   };\n \n",
  "test_patch": "diff --git a/src/server/cluster/cluster_family_test.cc b/src/server/cluster/cluster_family_test.cc\nindex e26dba47a683..965dc34ca0ef 100644\n--- a/src/server/cluster/cluster_family_test.cc\n+++ b/src/server/cluster/cluster_family_test.cc\n@@ -188,7 +188,7 @@ TEST_F(ClusterFamilyTest, ClusterConfigNoReplicas) {\n                                         \"abcd1234\")))));\n \n   EXPECT_EQ(Run({\"cluster\", \"nodes\"}),\n-            \"abcd1234 10.0.0.1:7000@7000 master - 0 0 0 connected 0-16383\\r\\n\");\n+            \"abcd1234 10.0.0.1:7000@7000 master - 0 0 0 connected 0-16383\\n\");\n }\n \n TEST_F(ClusterFamilyTest, ClusterConfigFull) {\n@@ -259,8 +259,8 @@ TEST_F(ClusterFamilyTest, ClusterConfigFull) {\n                                         \"wxyz\")))));\n \n   EXPECT_EQ(Run({\"cluster\", \"nodes\"}),\n-            \"abcd1234 10.0.0.1:7000@7000 master - 0 0 0 connected 0-16383\\r\\n\"\n-            \"wxyz 10.0.0.10:8000@8000 slave abcd1234 0 0 0 connected\\r\\n\");\n+            \"abcd1234 10.0.0.1:7000@7000 master - 0 0 0 connected 0-16383\\n\"\n+            \"wxyz 10.0.0.10:8000@8000 slave abcd1234 0 0 0 connected\\n\");\n }\n \n TEST_F(ClusterFamilyTest, ClusterConfigFullMultipleInstances) {\n@@ -383,10 +383,10 @@ TEST_F(ClusterFamilyTest, ClusterConfigFullMultipleInstances) {\n                                             \"qwerty\")))))));\n \n   EXPECT_THAT(Run({\"cluster\", \"nodes\"}),\n-              \"abcd1234 10.0.0.1:7000@7000 master - 0 0 0 connected 0-10000\\r\\n\"\n-              \"wxyz 10.0.0.10:8000@8000 slave abcd1234 0 0 0 connected\\r\\n\"\n-              \"efgh7890 10.0.0.2:7001@7001 master - 0 0 0 connected 10001-16383\\r\\n\"\n-              \"qwerty 10.0.0.11:8001@8001 slave efgh7890 0 0 0 connected\\r\\n\");\n+              \"abcd1234 10.0.0.1:7000@7000 master - 0 0 0 connected 0-10000\\n\"\n+              \"wxyz 10.0.0.10:8000@8000 slave abcd1234 0 0 0 connected\\n\"\n+              \"efgh7890 10.0.0.2:7001@7001 master - 0 0 0 connected 10001-16383\\n\"\n+              \"qwerty 10.0.0.11:8001@8001 slave efgh7890 0 0 0 connected\\n\");\n \n   absl::InsecureBitGen eng;\n   while (true) {\n@@ -818,7 +818,7 @@ TEST_F(ClusterFamilyEmulatedTest, ClusterSlots) {\n \n TEST_F(ClusterFamilyEmulatedTest, ClusterNodes) {\n   EXPECT_THAT(Run({\"cluster\", \"nodes\"}),\n-              GetMyId() + \" fake-host:6379@6379 myself,master - 0 0 0 connected 0-16383\\r\\n\");\n+              GetMyId() + \" fake-host:6379@6379 myself,master - 0 0 0 connected 0-16383\\n\");\n }\n \n }  // namespace\n",
  "problem_statement": "Cluster nodes command does not seem to be 100% redis compatible\n**Describe the bug**\r\nWe are running flink applications using the lettuce redis library.\r\nIt seems to struggle with the output of dragonflies response to the `cluster nodes` command.\r\nSomehow it seems there is a difference to what it expects.\r\n\r\nOutput from dragonfly:\r\n```\r\n$ redis-cli cluster nodes\r\n807df88cb947566738e9fa4689231944385a353b 127.0.0.1:6379@6379 myself,master - 0 0 0 connected 0-16383\r\nc23888188f5d350b552aa8d8aa7ad40a05765b26 10.37.159.206:6379@6379 slave 807df88cb947566738e9fa4689231944385a353b 0 0 0 connected\r\nc23888188f5d350b552aa8d8aa7ad40a05765b26 10.36.8.23:6379@6379 slave 807df88cb947566738e9fa4689231944385a353b 0 0 0 connected\r\n```\r\n\r\nOutput from redis:\r\n```\r\n$ redis-cli cluster nodes\r\nf7b5cf36a5ffc927a2de8b507b880e8cd60f45d3 10.36.54.105:6379@16379,redis-app-leader-2 master - 1710182388055 1710182385544 3 connected\r\n09a46f18f4a8077ced90f4a394fc4f73ecc206e3 10.38.135.168:6379@16379,redis-app-leader-1 master - 0 1710413134000 2 connected 5461-10922\r\n3991f305a18628b81d61e4040206ade513145f39 10.37.234.11:6379@16379,redis-app-leader-0 master - 0 1710413134727 1 connected 0-5460\r\n2ddedc9d0cf086539b81ba1b22c88a7ec35a4f88 10.38.174.196:6379@16379,redis-app-follower-0 myself,slave 3991f305a18628b81d61e4040206ade513145f39 0 1710413133000 1 connected\r\n273c6030cf5044e27675919b5317e3eeec880e91 10.36.123.79:6379@16379,redis-app-follower-2 master - 0 1710413134000 4 connected 10923-16383\r\n147b1aa03a7f4552098f3139e8fb0924e6a20689 10.37.195.111:6379@16379,redis-app-follower-1 slave 09a46f18f4a8077ced90f4a394fc4f73ecc206e3 0 1710413135028 2 connected\r\n```\r\n\r\nThe exception from lettuce:\r\n```\r\nio.lettuce.core.RedisConnectionException: Unable to establish a connection to Redis Cluster\r\n\tat io.lettuce.core.cluster.RedisClusterClient.lambda$assertInitialPartitions$26(RedisClusterClient.java:922)\r\n\tat io.lettuce.core.cluster.RedisClusterClient.get(RedisClusterClient.java:941)\r\n\tat io.lettuce.core.cluster.RedisClusterClient.assertInitialPartitions(RedisClusterClient.java:921)\r\n\tat io.lettuce.core.cluster.RedisClusterClient.connect(RedisClusterClient.java:398)\r\n\tat io.lettuce.core.cluster.RedisClusterClient.connect(RedisClusterClient.java:375)\r\n\tat io.justtrack.flink.annotators.repositories.StoreRedis.connect(StoreRedis.java:205)\r\n\tat io.justtrack.flink.annotators.repositories.StoreRedis.getRedis(StoreRedis.java:173)\r\n\tat io.justtrack.flink.annotators.repositories.StoreRedis.put(StoreRedis.java:108)\r\n\t... 7 more\r\nCaused by: io.lettuce.core.RedisException: Cannot parse 29bc106e11efccc5b3db4e3397511a0539c74b10 10.37.102.233:6379@6379 myself,master - 0 0 0 connected 0-16383\r\nd4d9fd811e189f246d8c591fb10652f993933f39 10.36.112.239:6379@6379 slave 29bc106e11efccc5b3db4e3397511a0539c74b10 0 0 0 connected\r\nd4d9fd811e189f246d8c591fb10652f993933f39 10.38.180.168:6379@6379 slave 29bc106e11efccc5b3db4e3397511a0539c74b10 0 0 0 connected\r\n\r\n\tat io.lettuce.core.cluster.models.partitions.ClusterPartitionParser.parse(ClusterPartitionParser.java:89)\r\n\tat io.lettuce.core.cluster.topology.NodeTopologyView.<init>(NodeTopologyView.java:68)\r\n\tat io.lettuce.core.cluster.topology.NodeTopologyView.from(NodeTopologyView.java:90)\r\n\tat io.lettuce.core.cluster.topology.DefaultClusterTopologyRefresh.getNodeSpecificViews(DefaultClusterTopologyRefresh.java:229)\r\n\tat io.lettuce.core.cluster.topology.DefaultClusterTopologyRefresh.lambda$null$1(DefaultClusterTopologyRefresh.java:108)\r\n\tat java.base/java.util.concurrent.CompletableFuture$UniApply.tryFire(Unknown Source)\r\n\tat java.base/java.util.concurrent.CompletableFuture$Completion.run(Unknown Source)\r\n\tat io.netty.util.concurrent.AbstractEventExecutor.runTask(AbstractEventExecutor.java:173)\r\n\tat io.netty.util.concurrent.DefaultEventExecutor.run(DefaultEventExecutor.java:66)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997)\r\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\t... 1 more\r\nCaused by: java.lang.NumberFormatException: For input string: \"16383\r\n\"\r\n\tat java.base/java.lang.NumberFormatException.forInputString(Unknown Source)\r\n\tat java.base/java.lang.Integer.parseInt(Unknown Source)\r\n\tat java.base/java.lang.Integer.parseInt(Unknown Source)\r\n\tat io.lettuce.core.cluster.models.partitions.ClusterPartitionParser.readSlots(ClusterPartitionParser.java:173)\r\n\tat io.lettuce.core.cluster.models.partitions.ClusterPartitionParser.parseNode(ClusterPartitionParser.java:133)\r\n\tat io.lettuce.core.cluster.models.partitions.ClusterPartitionParser.parse(ClusterPartitionParser.java:85)\r\n\t... 12 more\r\n```\r\n\r\n**Expected behavior**\r\nredis' and dragonfly should have compatible output\r\n\r\n**Environment (please complete the following information):**\r\n - OS: linux\r\n - Kernel: 6.1\r\n - Containerized: Kubernetes\r\n - Dragonfly Version: v1.15.1\n",
  "hints_text": "@applike-ss hey, thanks for the bug report!\r\n\r\n(1) Can you confirm that you run Dragonfly in emulated cluster mode? (`--cluster_mode=emulated`), as opposed to a real cluster\r\n(2) Can you maybe create minimal repro instructions? I don't know flink nor lettuce I'm afraid\nLooking more closely, I see that somehow Dragonfly has 2 replicas with the same node ID (`c23888188f5d350b552aa8d8aa7ad40a05765b26`). That is impossibly unlikely to be actual 2 distinct replicas, so I wonder - did something bad happen during that time? Like a replica changed IP address for some reason?\r\nCan you please try and see if this is the reason for the error (i.e. try running your app with a single replica in a good state)?\nOk, I think I got it. It looks like Redis replies with just `0A` (`\\n`) between lines, while Dragonfly replies with `0D0A` (`\\r\\n`):\r\n\r\nDragonfly:\r\n```\r\n00000000: 3530 6134 3139 3933 3030 6564 3837 3263  50a4199300ed872c\r\n00000010: 3066 3434 6563 3765 3639 3333 6661 3430  0f44ec7e6933fa40\r\n00000020: 3961 3261 3831 6538 2031 3237 2e30 2e30  9a2a81e8 127.0.0\r\n00000030: 2e31 3a36 3337 3940 3633 3739 206d 7973  .1:6379@6379 mys\r\n00000040: 656c 662c 6d61 7374 6572 202d 2030 2030  elf,master - 0 0\r\n00000050: 2030 2063 6f6e 6e65 6374 6564 2030 2d31   0 connected 0-1\r\n00000060: 3633 3833 0d0a                           6383..\r\n```\r\n\r\nRedis:\r\n```\r\n00000000: 3230 6337 6535 3939 6432 3665 6638 3133  20c7e599d26ef813\r\n00000010: 3932 3861 3061 6138 6438 3865 3464 6262  928a0aa8d88e4dbb\r\n00000020: 3838 3334 3730 3961 2031 3237 2e30 2e30  8834709a 127.0.0\r\n00000030: 2e31 3a37 3030 3240 3137 3030 3220 6d61  .1:7002@17002 ma\r\n00000040: 7374 6572 202d 2030 2031 3731 3034 3435  ster - 0 1710445\r\n00000050: 3733 3237 3136 2033 2063 6f6e 6e65 6374  732716 3 connect\r\n00000060: 6564 2031 3039 3233 2d31 3633 3833 0a    ed 10923-16383.\r\n[...]\r\n```\r\n\r\nWe do that both in `CLUSTER INFO` and in `CLUSTER NODES`, but for some reason Redis replies with `\\r\\n` for `INFO` but with only `\\n` for `NODES` :shrug: \r\n\r\nRedis `CLUSTER INFO`:\r\n```\r\n00000000: 636c 7573 7465 725f 7374 6174 653a 6f6b  cluster_state:ok\r\n00000010: 0d0a 636c 7573 7465 725f 736c 6f74 735f  ..cluster_slots_\r\n00000020: 6173 7369 676e 6564 3a31 3633 3834 0d0a  assigned:16384..\r\n00000030: 636c 7573 7465 725f 736c 6f74 735f 6f6b  cluster_slots_ok\r\n00000040: 3a31 3633 3834 0d0a 636c 7573 7465 725f  :16384..cluster_\r\n[...]\r\n```\r\n\r\nAnyway, for some reason flink/lettuce is probably sensitive to that, so we should be compatible.\r\n\r\nI'm still curious about the 2 nodes with the same ID situation you got there though.",
  "created_at": "2024-03-14T20:10:37Z",
  "modified_files": [
    "src/server/cluster/cluster_family.cc"
  ],
  "modified_test_files": [
    "src/server/cluster/cluster_family_test.cc"
  ]
}