diff --git a/src/server/bitops_family_test.cc b/src/server/bitops_family_test.cc
index 18b9b7e9a102..e6ab1820cc82 100644
--- a/src/server/bitops_family_test.cc
+++ b/src/server/bitops_family_test.cc
@@ -410,7 +410,16 @@ TEST_F(BitOpsFamilyTest, BitOpsNot) {
   // Make sure that this works with none existing key as well
   EXPECT_EQ(0, CheckedInt({"bitop", "NOT", "bit-op-not-none-existing-key-results",
                            "this-key-do-not-exists"}));
-  EXPECT_EQ(Run({"get", "bit-op-not-none-existing-key-results"}), "");
+  ASSERT_THAT(Run({"get", "bit-op-not-none-existing-key-results"}), ArgType(RespExpr::Type::NIL));
+
+  EXPECT_EQ(Run({"set", "foo", "bar"}), "OK");
+  EXPECT_EQ(0, CheckedInt({"bitop", "NOT", "foo", "this-key-do-not-exists"}));
+  ASSERT_THAT(Run({"get", "foo"}), ArgType(RespExpr::Type::NIL));
+
+  // Change the type of foo. Bitops is similar to set command. It's a blind update.
+  ASSERT_THAT(Run({"hset", "foo", "bar", "val"}), IntArg(1));
+  EXPECT_EQ(0, CheckedInt({"bitop", "NOT", "foo", "this-key-do-not-exists"}));
+  ASSERT_THAT(Run({"get", "foo"}), ArgType(RespExpr::Type::NIL));
 
   // test bitop not
   resp = Run({"set", KEY_VALUES_BIT_OP[0].first, KEY_VALUES_BIT_OP[0].second});
diff --git a/tests/dragonfly/replication_test.py b/tests/dragonfly/replication_test.py
index e024080a1abf..a3adb5fcef1d 100644
--- a/tests/dragonfly/replication_test.py
+++ b/tests/dragonfly/replication_test.py
@@ -673,6 +673,15 @@ async def check_expire(key):
         await skip_cmd()
         # Check BITOP turns into SET
         await check("BITOP OR kdest k1 k2", r"SET kdest 1100")
+        # See gh issue #3528
+        await c_master.execute_command(f"HSET foo bar val")
+        await skip_cmd()
+        await check("BITOP NOT foo tmp", r"DEL foo")
+        await c_master.execute_command(f"HSET foo bar val")
+        await skip_cmd()
+        await c_master.set("k3", "-")
+        await skip_cmd()
+        await check("BITOP NOT foo k3", r"SET foo \\xd2")
 
         # Check there is no rewrite for LMOVE on single shard
         await c_master.lpush("list", "v1", "v2", "v3", "v4")
