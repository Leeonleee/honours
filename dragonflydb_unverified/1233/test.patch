diff --git a/src/facade/memcache_parser_test.cc b/src/facade/memcache_parser_test.cc
index fd1522c4bafc..1d482ef23b2e 100644
--- a/src/facade/memcache_parser_test.cc
+++ b/src/facade/memcache_parser_test.cc
@@ -78,4 +78,54 @@ TEST_F(MCParserTest, Stats) {
   EXPECT_EQ(MemcacheParser::PARSE_ERROR, st);
 }
 
+TEST_F(MCParserTest, NoreplyBasic) {
+  MemcacheParser::Result st = parser_.Parse("set mykey 1 2 3 noreply\r
", &consumed_, &cmd_);
+
+  EXPECT_EQ(MemcacheParser::OK, st);
+  EXPECT_EQ("mykey", cmd_.key);
+  EXPECT_EQ(1, cmd_.flags);
+  EXPECT_EQ(2, cmd_.expire_ts);
+  EXPECT_EQ(3, cmd_.bytes_len);
+  EXPECT_EQ(MemcacheParser::SET, cmd_.type);
+  EXPECT_TRUE(cmd_.no_reply);
+
+  cmd_ = MemcacheParser::Command{};
+  st = parser_.Parse("set mykey2 4 5 6\r
", &consumed_, &cmd_);
+
+  EXPECT_EQ(MemcacheParser::OK, st);
+  EXPECT_EQ("mykey2", cmd_.key);
+  EXPECT_EQ(4, cmd_.flags);
+  EXPECT_EQ(5, cmd_.expire_ts);
+  EXPECT_EQ(6, cmd_.bytes_len);
+  EXPECT_EQ(MemcacheParser::SET, cmd_.type);
+  EXPECT_FALSE(cmd_.no_reply);
+}
+
+class MCParserNoreplyTest : public MCParserTest {
+ protected:
+  void RunTest(string_view str, bool noreply) {
+    MemcacheParser::Result st = parser_.Parse(str, &consumed_, &cmd_);
+
+    EXPECT_EQ(MemcacheParser::OK, st);
+    EXPECT_EQ(cmd_.no_reply, noreply);
+  }
+};
+
+TEST_F(MCParserNoreplyTest, StoreCommands) {
+  RunTest("set mykey 0 0 3 noreply\r
", true);
+  RunTest("set mykey 0 0 3\r
", false);
+  RunTest("add mykey 0 0 3\r
", false);
+  RunTest("replace mykey 0 0 3\r
", false);
+  RunTest("append mykey 0 0 3\r
", false);
+  RunTest("prepend mykey 0 0 3\r
", false);
+}
+
+TEST_F(MCParserNoreplyTest, Other) {
+  RunTest("quit\r
", false);
+  RunTest("delete mykey\r
", false);
+  RunTest("incr mykey 1\r
", false);
+  RunTest("decr mykey 1\r
", false);
+  RunTest("flush_all\r
", false);
+}
+
 }  // namespace facade
diff --git a/tests/dragonfly/__init__.py b/tests/dragonfly/__init__.py
index a9b18baa8f29..4a87847bf5a5 100644
--- a/tests/dragonfly/__init__.py
+++ b/tests/dragonfly/__init__.py
@@ -15,6 +15,7 @@ class DflyParams:
     gdb: bool
     args: list
     existing_port: int
+    existing_mc_port: int
     env: any
 
 
@@ -83,6 +84,11 @@ def port(self) -> int:
         if self.params.existing_port:
             return self.params.existing_port
         return int(self.args.get("port", "6379"))
+    @property
+    def mc_port(self) -> int:
+        if self.params.existing_mc_port:
+            return self.params.existing_mc_port
+        return int(self.args.get("mc_port", "11211"))
 
     @staticmethod
     def format_args(args):
diff --git a/tests/dragonfly/conftest.py b/tests/dragonfly/conftest.py
index 29644c1ae724..20bc91293de2 100644
--- a/tests/dragonfly/conftest.py
+++ b/tests/dragonfly/conftest.py
@@ -2,6 +2,7 @@
 Pytest fixtures to be provided for all tests without import
 """
 
+import logging
 import os
 import sys
 from time import sleep
@@ -9,12 +10,13 @@
 import pytest
 import pytest_asyncio
 import redis
+import pymemcache
 import random
 
 from pathlib import Path
 from tempfile import TemporaryDirectory
 
-from . import DflyInstance, DflyInstanceFactory, DflyParams, PortPicker
+from . import DflyInstance, DflyInstanceFactory, DflyParams, PortPicker, dfly_args
 from .utility import DflySeederFactory
 
 DATABASE_INDEX = 1
@@ -67,12 +69,14 @@ def df_factory(request, tmp_dir, test_env) -> DflyInstanceFactory:
 
     args = request.param if request.param else {}
     existing = request.config.getoption("--existing-port")
+    existing_mc = request.config.getoption("--existing-mc-port")
     params = DflyParams(
         path=path,
         cwd=tmp_dir,
         gdb=request.config.getoption("--gdb"),
         args=request.config.getoption("--df"),
         existing_port=int(existing) if existing else None,
+        existing_mc_port=int(existing_mc) if existing else None,
         env=test_env
     )
 
@@ -194,7 +198,16 @@ def pytest_addoption(parser):
     parser.addoption(
         '--existing-port', action='store', default=None, help='Provide a port to the existing process for the test')
 
+    parser.addoption(
+        '--existing-mc-port', action='store', default=None, help='Provide a port to the existing memcached process for the test'
+    )
+
 
 @pytest.fixture(scope="session")
 def port_picker():
     yield PortPicker()
+
+
+@pytest.fixture(scope="class")
+def memcached_connection(df_server: DflyInstance):
+    return pymemcache.Client(f"localhost:{df_server.mc_port}")
diff --git a/tests/dragonfly/pymemcached_test.py b/tests/dragonfly/pymemcached_test.py
new file mode 100644
index 000000000000..5c5b79318671
--- /dev/null
+++ b/tests/dragonfly/pymemcached_test.py
@@ -0,0 +1,32 @@
+import pytest
+import pymemcache
+from . import dfly_args
+
+
+@dfly_args({"memcache_port": 11211})
+def test_add_get(memcached_connection):
+    assert memcached_connection.add(b"key", b"data", noreply=False)
+    assert memcached_connection.get(b"key") == b"data"
+
+@dfly_args({"memcache_port": 11211})
+def test_add_set(memcached_connection):
+    assert memcached_connection.add(b"key", b"data", noreply=False)
+    memcached_connection.set(b"key", b"other")
+    assert memcached_connection.get(b"key") == b"other"
+
+@dfly_args({"memcache_port": 11211})
+def test_set_add(memcached_connection):
+    memcached_connection.set(b"key", b"data")
+    # stuck here
+    assert not memcached_connection.add(b"key", b"other", noreply=False)
+    # expects to see NOT_STORED
+    memcached_connection.set(b"key", b"other")
+    assert memcached_connection.get(b"key") == b"other"
+
+@dfly_args({"memcache_port": 11211})
+def test_mixed_reply(memcached_connection):
+    memcached_connection.set(b"key", b"data", noreply=True)
+    memcached_connection.add(b"key", b"other", noreply=False)
+    memcached_connection.add(b"key", b"final", noreply=True)
+
+    assert memcached_connection.get(b"key") == b"data"
diff --git a/tests/dragonfly/requirements.txt b/tests/dragonfly/requirements.txt
index 332518ce721d..88636fc90020 100644
--- a/tests/dragonfly/requirements.txt
+++ b/tests/dragonfly/requirements.txt
@@ -12,3 +12,4 @@ tomli==2.0.1
 wrapt==1.14.1
 pytest-asyncio==0.20.1
 pytest-repeat==0.9.1
+pymemcache==4.0.0
