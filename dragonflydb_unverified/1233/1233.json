{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1233,
  "instance_id": "dragonflydb__dragonfly-1233",
  "issue_numbers": [
    "1203"
  ],
  "base_commit": "f80afca9c23e2f30373437520a162c591eaa2005",
  "patch": "diff --git a/src/facade/memcache_parser.cc b/src/facade/memcache_parser.cc\nindex 68d7439dbd4b..0138daded25f 100644\n--- a/src/facade/memcache_parser.cc\n+++ b/src/facade/memcache_parser.cc\n@@ -102,6 +102,7 @@ MP::Result ParseValueless(const std::string_view* tokens, unsigned num_tokens, M\n }  // namespace\n \n auto MP::Parse(string_view str, uint32_t* consumed, Command* cmd) -> Result {\n+  cmd->no_reply = false;  // re-initialize\n   auto pos = str.find('\\n');\n   *consumed = 0;\n   if (pos == string_view::npos) {\n@@ -173,4 +174,4 @@ auto MP::Parse(string_view str, uint32_t* consumed, Command* cmd) -> Result {\n   return ParseValueless(tokens + 1, num_tokens - 1, cmd);\n };\n \n-}  // namespace dfly\n+}  // namespace facade\ndiff --git a/src/facade/reply_builder.cc b/src/facade/reply_builder.cc\nindex 95fee00d415a..a957644e28b1 100644\n--- a/src/facade/reply_builder.cc\n+++ b/src/facade/reply_builder.cc\n@@ -105,10 +105,13 @@ void SinkReplyBuilder::SendRawVec(absl::Span<const std::string_view> msg_vec) {\n   Send(arr.data(), msg_vec.size());\n }\n \n-MCReplyBuilder::MCReplyBuilder(::io::Sink* sink) : SinkReplyBuilder(sink) {\n+MCReplyBuilder::MCReplyBuilder(::io::Sink* sink) : SinkReplyBuilder(sink), noreply_(false) {\n }\n \n void MCReplyBuilder::SendSimpleString(std::string_view str) {\n+  if (noreply_)\n+    return;\n+\n   iovec v[2] = {IoVec(str), IoVec(kCRLF)};\n \n   Send(v, ABSL_ARRAYSIZE(v));\ndiff --git a/src/facade/reply_builder.h b/src/facade/reply_builder.h\nindex 3bb2eafae018..48d4254b61f5 100644\n--- a/src/facade/reply_builder.h\n+++ b/src/facade/reply_builder.h\n@@ -104,6 +104,8 @@ class SinkReplyBuilder {\n };\n \n class MCReplyBuilder : public SinkReplyBuilder {\n+  bool noreply_;\n+\n  public:\n   MCReplyBuilder(::io::Sink* stream);\n \n@@ -121,6 +123,10 @@ class MCReplyBuilder : public SinkReplyBuilder {\n   void SendClientError(std::string_view str);\n   void SendNotFound();\n   void SendSimpleString(std::string_view str) final;\n+\n+  void SetNoreply(bool noreply) {\n+    noreply_ = noreply;\n+  }\n };\n \n class RedisReplyBuilder : public SinkReplyBuilder {\ndiff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex 9ed2c8031f73..95a95c9dd569 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -887,6 +887,7 @@ void Service::DispatchMC(const MemcacheParser::Command& cmd, std::string_view va\n   char ttl_op[] = \"EX\";\n \n   MCReplyBuilder* mc_builder = static_cast<MCReplyBuilder*>(cntx->reply_builder());\n+  mc_builder->SetNoreply(cmd.no_reply);\n \n   switch (cmd.type) {\n     case MemcacheParser::REPLACE:\ndiff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex 25c79370296b..515c8fc8c328 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -1258,6 +1258,7 @@ string GetPassword() {\n void ServerFamily::FlushDb(CmdArgList args, ConnectionContext* cntx) {\n   DCHECK(cntx->transaction);\n   Drakarys(cntx->transaction, cntx->transaction->GetDbIndex());\n+\n   cntx->reply_builder()->SendOk();\n }\n \ndiff --git a/src/server/string_family.cc b/src/server/string_family.cc\nindex 6d3ee43c6743..0112eee0081f 100644\n--- a/src/server/string_family.cc\n+++ b/src/server/string_family.cc\n@@ -754,7 +754,7 @@ void StringFamily::Set(CmdArgList args, ConnectionContext* cntx) {\n \n   CHECK_EQ(result, OpStatus::SKIPPED);  // in case of NX option\n \n-  return builder->SendSetSkipped();\n+  builder->SendSetSkipped();\n }\n \n void StringFamily::SetEx(CmdArgList args, ConnectionContext* cntx) {\n@@ -1030,6 +1030,7 @@ void StringFamily::IncrByGeneric(string_view key, int64_t val, ConnectionContext\n   auto* builder = cntx->reply_builder();\n \n   DVLOG(2) << \"IncrByGeneric \" << key << \"/\" << result.value();\n+\n   switch (result.status()) {\n     case OpStatus::OK:\n       builder->SendLong(result.value());\n@@ -1073,6 +1074,7 @@ void StringFamily::ExtendGeneric(CmdArgList args, bool prepend, ConnectionContex\n \n   OpResult<bool> result = cntx->transaction->ScheduleSingleHopT(std::move(cb));\n   SinkReplyBuilder* builder = cntx->reply_builder();\n+\n   if (result.value_or(false)) {\n     return builder->SendStored();\n   }\n",
  "test_patch": "diff --git a/src/facade/memcache_parser_test.cc b/src/facade/memcache_parser_test.cc\nindex fd1522c4bafc..1d482ef23b2e 100644\n--- a/src/facade/memcache_parser_test.cc\n+++ b/src/facade/memcache_parser_test.cc\n@@ -78,4 +78,54 @@ TEST_F(MCParserTest, Stats) {\n   EXPECT_EQ(MemcacheParser::PARSE_ERROR, st);\n }\n \n+TEST_F(MCParserTest, NoreplyBasic) {\n+  MemcacheParser::Result st = parser_.Parse(\"set mykey 1 2 3 noreply\\r\\n\", &consumed_, &cmd_);\n+\n+  EXPECT_EQ(MemcacheParser::OK, st);\n+  EXPECT_EQ(\"mykey\", cmd_.key);\n+  EXPECT_EQ(1, cmd_.flags);\n+  EXPECT_EQ(2, cmd_.expire_ts);\n+  EXPECT_EQ(3, cmd_.bytes_len);\n+  EXPECT_EQ(MemcacheParser::SET, cmd_.type);\n+  EXPECT_TRUE(cmd_.no_reply);\n+\n+  cmd_ = MemcacheParser::Command{};\n+  st = parser_.Parse(\"set mykey2 4 5 6\\r\\n\", &consumed_, &cmd_);\n+\n+  EXPECT_EQ(MemcacheParser::OK, st);\n+  EXPECT_EQ(\"mykey2\", cmd_.key);\n+  EXPECT_EQ(4, cmd_.flags);\n+  EXPECT_EQ(5, cmd_.expire_ts);\n+  EXPECT_EQ(6, cmd_.bytes_len);\n+  EXPECT_EQ(MemcacheParser::SET, cmd_.type);\n+  EXPECT_FALSE(cmd_.no_reply);\n+}\n+\n+class MCParserNoreplyTest : public MCParserTest {\n+ protected:\n+  void RunTest(string_view str, bool noreply) {\n+    MemcacheParser::Result st = parser_.Parse(str, &consumed_, &cmd_);\n+\n+    EXPECT_EQ(MemcacheParser::OK, st);\n+    EXPECT_EQ(cmd_.no_reply, noreply);\n+  }\n+};\n+\n+TEST_F(MCParserNoreplyTest, StoreCommands) {\n+  RunTest(\"set mykey 0 0 3 noreply\\r\\n\", true);\n+  RunTest(\"set mykey 0 0 3\\r\\n\", false);\n+  RunTest(\"add mykey 0 0 3\\r\\n\", false);\n+  RunTest(\"replace mykey 0 0 3\\r\\n\", false);\n+  RunTest(\"append mykey 0 0 3\\r\\n\", false);\n+  RunTest(\"prepend mykey 0 0 3\\r\\n\", false);\n+}\n+\n+TEST_F(MCParserNoreplyTest, Other) {\n+  RunTest(\"quit\\r\\n\", false);\n+  RunTest(\"delete mykey\\r\\n\", false);\n+  RunTest(\"incr mykey 1\\r\\n\", false);\n+  RunTest(\"decr mykey 1\\r\\n\", false);\n+  RunTest(\"flush_all\\r\\n\", false);\n+}\n+\n }  // namespace facade\ndiff --git a/tests/dragonfly/__init__.py b/tests/dragonfly/__init__.py\nindex a9b18baa8f29..4a87847bf5a5 100644\n--- a/tests/dragonfly/__init__.py\n+++ b/tests/dragonfly/__init__.py\n@@ -15,6 +15,7 @@ class DflyParams:\n     gdb: bool\n     args: list\n     existing_port: int\n+    existing_mc_port: int\n     env: any\n \n \n@@ -83,6 +84,11 @@ def port(self) -> int:\n         if self.params.existing_port:\n             return self.params.existing_port\n         return int(self.args.get(\"port\", \"6379\"))\n+    @property\n+    def mc_port(self) -> int:\n+        if self.params.existing_mc_port:\n+            return self.params.existing_mc_port\n+        return int(self.args.get(\"mc_port\", \"11211\"))\n \n     @staticmethod\n     def format_args(args):\ndiff --git a/tests/dragonfly/conftest.py b/tests/dragonfly/conftest.py\nindex 29644c1ae724..20bc91293de2 100644\n--- a/tests/dragonfly/conftest.py\n+++ b/tests/dragonfly/conftest.py\n@@ -2,6 +2,7 @@\n Pytest fixtures to be provided for all tests without import\n \"\"\"\n \n+import logging\n import os\n import sys\n from time import sleep\n@@ -9,12 +10,13 @@\n import pytest\n import pytest_asyncio\n import redis\n+import pymemcache\n import random\n \n from pathlib import Path\n from tempfile import TemporaryDirectory\n \n-from . import DflyInstance, DflyInstanceFactory, DflyParams, PortPicker\n+from . import DflyInstance, DflyInstanceFactory, DflyParams, PortPicker, dfly_args\n from .utility import DflySeederFactory\n \n DATABASE_INDEX = 1\n@@ -67,12 +69,14 @@ def df_factory(request, tmp_dir, test_env) -> DflyInstanceFactory:\n \n     args = request.param if request.param else {}\n     existing = request.config.getoption(\"--existing-port\")\n+    existing_mc = request.config.getoption(\"--existing-mc-port\")\n     params = DflyParams(\n         path=path,\n         cwd=tmp_dir,\n         gdb=request.config.getoption(\"--gdb\"),\n         args=request.config.getoption(\"--df\"),\n         existing_port=int(existing) if existing else None,\n+        existing_mc_port=int(existing_mc) if existing else None,\n         env=test_env\n     )\n \n@@ -194,7 +198,16 @@ def pytest_addoption(parser):\n     parser.addoption(\n         '--existing-port', action='store', default=None, help='Provide a port to the existing process for the test')\n \n+    parser.addoption(\n+        '--existing-mc-port', action='store', default=None, help='Provide a port to the existing memcached process for the test'\n+    )\n+\n \n @pytest.fixture(scope=\"session\")\n def port_picker():\n     yield PortPicker()\n+\n+\n+@pytest.fixture(scope=\"class\")\n+def memcached_connection(df_server: DflyInstance):\n+    return pymemcache.Client(f\"localhost:{df_server.mc_port}\")\ndiff --git a/tests/dragonfly/pymemcached_test.py b/tests/dragonfly/pymemcached_test.py\nnew file mode 100644\nindex 000000000000..5c5b79318671\n--- /dev/null\n+++ b/tests/dragonfly/pymemcached_test.py\n@@ -0,0 +1,32 @@\n+import pytest\n+import pymemcache\n+from . import dfly_args\n+\n+\n+@dfly_args({\"memcache_port\": 11211})\n+def test_add_get(memcached_connection):\n+    assert memcached_connection.add(b\"key\", b\"data\", noreply=False)\n+    assert memcached_connection.get(b\"key\") == b\"data\"\n+\n+@dfly_args({\"memcache_port\": 11211})\n+def test_add_set(memcached_connection):\n+    assert memcached_connection.add(b\"key\", b\"data\", noreply=False)\n+    memcached_connection.set(b\"key\", b\"other\")\n+    assert memcached_connection.get(b\"key\") == b\"other\"\n+\n+@dfly_args({\"memcache_port\": 11211})\n+def test_set_add(memcached_connection):\n+    memcached_connection.set(b\"key\", b\"data\")\n+    # stuck here\n+    assert not memcached_connection.add(b\"key\", b\"other\", noreply=False)\n+    # expects to see NOT_STORED\n+    memcached_connection.set(b\"key\", b\"other\")\n+    assert memcached_connection.get(b\"key\") == b\"other\"\n+\n+@dfly_args({\"memcache_port\": 11211})\n+def test_mixed_reply(memcached_connection):\n+    memcached_connection.set(b\"key\", b\"data\", noreply=True)\n+    memcached_connection.add(b\"key\", b\"other\", noreply=False)\n+    memcached_connection.add(b\"key\", b\"final\", noreply=True)\n+\n+    assert memcached_connection.get(b\"key\") == b\"data\"\ndiff --git a/tests/dragonfly/requirements.txt b/tests/dragonfly/requirements.txt\nindex 332518ce721d..88636fc90020 100644\n--- a/tests/dragonfly/requirements.txt\n+++ b/tests/dragonfly/requirements.txt\n@@ -12,3 +12,4 @@ tomli==2.0.1\n wrapt==1.14.1\n pytest-asyncio==0.20.1\n pytest-repeat==0.9.1\n+pymemcache==4.0.0\n",
  "problem_statement": "Support NOREPLY option to comply with Pymemcache's expected behaviour\n**Describe the bug**\r\ni use pymemcache to connect dragonfly with command\r\n      - \"-bind=0.0.0.0\"\r\n      - \"-memcache_port=11211\"\r\n      - \"-admin_port=6381\"\r\n      - \"-admin_bind=0.0.0.0\"\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n\r\nwhatever i use Client or PooledClient, \r\nstep1: set (b\"key\",b\"value\")\r\nstep:2: set (b\"key\", some bytes)\r\nwhen i try to  get it ,throw exceptions:\r\nwhen step1 use: add, then the step2 got:\r\npymemcache.exceptions.MemcacheUnknownError: b'NOT_STORED'\r\nwhen step1 use: set, then the step2 got:\r\npymemcache.exceptions.MemcacheUnknownError: b'STORED'\r\n\r\nthere is no thread, There is no other logic between these steps.\r\n\r\n\r\npymemcache==v4.0.0\r\npython: v3.9.6\r\nDragonflydb run at Docker container at ubuntu 22.04 server.\r\n\r\n\n",
  "hints_text": "when i replace the service with same port with :\r\n```docker \r\n  memcached:\r\n    restart: always\r\n    image: \"memcached:alpine\"\r\n    ports:\r\n      - \"11211:11211\"\r\n```\r\nevery thing is ok\nThanks for reporting this, @xtqxk !\n@talbii please add a regression test and fix the bug",
  "created_at": "2023-05-17T13:43:04Z",
  "modified_files": [
    "src/facade/memcache_parser.cc",
    "src/facade/reply_builder.cc",
    "src/facade/reply_builder.h",
    "src/server/main_service.cc",
    "src/server/server_family.cc",
    "src/server/string_family.cc"
  ],
  "modified_test_files": [
    "src/facade/memcache_parser_test.cc",
    "tests/dragonfly/__init__.py",
    "tests/dragonfly/conftest.py",
    "b/tests/dragonfly/pymemcached_test.py",
    "tests/dragonfly/requirements.txt"
  ]
}