diff --git a/src/facade/memcache_parser.cc b/src/facade/memcache_parser.cc
index 68d7439dbd4b..0138daded25f 100644
--- a/src/facade/memcache_parser.cc
+++ b/src/facade/memcache_parser.cc
@@ -102,6 +102,7 @@ MP::Result ParseValueless(const std::string_view* tokens, unsigned num_tokens, M
 }  // namespace
 
 auto MP::Parse(string_view str, uint32_t* consumed, Command* cmd) -> Result {
+  cmd->no_reply = false;  // re-initialize
   auto pos = str.find('
');
   *consumed = 0;
   if (pos == string_view::npos) {
@@ -173,4 +174,4 @@ auto MP::Parse(string_view str, uint32_t* consumed, Command* cmd) -> Result {
   return ParseValueless(tokens + 1, num_tokens - 1, cmd);
 };
 
-}  // namespace dfly
+}  // namespace facade
diff --git a/src/facade/reply_builder.cc b/src/facade/reply_builder.cc
index 95fee00d415a..a957644e28b1 100644
--- a/src/facade/reply_builder.cc
+++ b/src/facade/reply_builder.cc
@@ -105,10 +105,13 @@ void SinkReplyBuilder::SendRawVec(absl::Span<const std::string_view> msg_vec) {
   Send(arr.data(), msg_vec.size());
 }
 
-MCReplyBuilder::MCReplyBuilder(::io::Sink* sink) : SinkReplyBuilder(sink) {
+MCReplyBuilder::MCReplyBuilder(::io::Sink* sink) : SinkReplyBuilder(sink), noreply_(false) {
 }
 
 void MCReplyBuilder::SendSimpleString(std::string_view str) {
+  if (noreply_)
+    return;
+
   iovec v[2] = {IoVec(str), IoVec(kCRLF)};
 
   Send(v, ABSL_ARRAYSIZE(v));
diff --git a/src/facade/reply_builder.h b/src/facade/reply_builder.h
index 3bb2eafae018..48d4254b61f5 100644
--- a/src/facade/reply_builder.h
+++ b/src/facade/reply_builder.h
@@ -104,6 +104,8 @@ class SinkReplyBuilder {
 };
 
 class MCReplyBuilder : public SinkReplyBuilder {
+  bool noreply_;
+
  public:
   MCReplyBuilder(::io::Sink* stream);
 
@@ -121,6 +123,10 @@ class MCReplyBuilder : public SinkReplyBuilder {
   void SendClientError(std::string_view str);
   void SendNotFound();
   void SendSimpleString(std::string_view str) final;
+
+  void SetNoreply(bool noreply) {
+    noreply_ = noreply;
+  }
 };
 
 class RedisReplyBuilder : public SinkReplyBuilder {
diff --git a/src/server/main_service.cc b/src/server/main_service.cc
index 9ed2c8031f73..95a95c9dd569 100644
--- a/src/server/main_service.cc
+++ b/src/server/main_service.cc
@@ -887,6 +887,7 @@ void Service::DispatchMC(const MemcacheParser::Command& cmd, std::string_view va
   char ttl_op[] = "EX";
 
   MCReplyBuilder* mc_builder = static_cast<MCReplyBuilder*>(cntx->reply_builder());
+  mc_builder->SetNoreply(cmd.no_reply);
 
   switch (cmd.type) {
     case MemcacheParser::REPLACE:
diff --git a/src/server/server_family.cc b/src/server/server_family.cc
index 25c79370296b..515c8fc8c328 100644
--- a/src/server/server_family.cc
+++ b/src/server/server_family.cc
@@ -1258,6 +1258,7 @@ string GetPassword() {
 void ServerFamily::FlushDb(CmdArgList args, ConnectionContext* cntx) {
   DCHECK(cntx->transaction);
   Drakarys(cntx->transaction, cntx->transaction->GetDbIndex());
+
   cntx->reply_builder()->SendOk();
 }
 
diff --git a/src/server/string_family.cc b/src/server/string_family.cc
index 6d3ee43c6743..0112eee0081f 100644
--- a/src/server/string_family.cc
+++ b/src/server/string_family.cc
@@ -754,7 +754,7 @@ void StringFamily::Set(CmdArgList args, ConnectionContext* cntx) {
 
   CHECK_EQ(result, OpStatus::SKIPPED);  // in case of NX option
 
-  return builder->SendSetSkipped();
+  builder->SendSetSkipped();
 }
 
 void StringFamily::SetEx(CmdArgList args, ConnectionContext* cntx) {
@@ -1030,6 +1030,7 @@ void StringFamily::IncrByGeneric(string_view key, int64_t val, ConnectionContext
   auto* builder = cntx->reply_builder();
 
   DVLOG(2) << "IncrByGeneric " << key << "/" << result.value();
+
   switch (result.status()) {
     case OpStatus::OK:
       builder->SendLong(result.value());
@@ -1073,6 +1074,7 @@ void StringFamily::ExtendGeneric(CmdArgList args, bool prepend, ConnectionContex
 
   OpResult<bool> result = cntx->transaction->ScheduleSingleHopT(std::move(cb));
   SinkReplyBuilder* builder = cntx->reply_builder();
+
   if (result.value_or(false)) {
     return builder->SendStored();
   }
