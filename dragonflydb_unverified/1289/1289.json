{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1289,
  "instance_id": "dragonflydb__dragonfly-1289",
  "issue_numbers": [
    "1278"
  ],
  "base_commit": "bc717a037d77f7b027de910c5ca5c64bf34e2af9",
  "patch": "diff --git a/src/server/cluster/cluster_family.cc b/src/server/cluster/cluster_family.cc\nindex 785895db6cfa..4a390e2c5f82 100644\n--- a/src/server/cluster/cluster_family.cc\n+++ b/src/server/cluster/cluster_family.cc\n@@ -35,15 +35,7 @@ using namespace std;\n using namespace facade;\n using CI = CommandId;\n \n-void BuildClusterSlotNetworkInfo(ConnectionContext* cntx, std::string_view host, uint32_t port,\n-                                 std::string_view id) {\n-  constexpr unsigned int kNetworkInfoSize = 3;\n-\n-  (*cntx)->StartArray(kNetworkInfoSize);\n-  (*cntx)->SendBulkString(host);\n-  (*cntx)->SendLong(port);\n-  (*cntx)->SendBulkString(id);\n-}\n+constexpr string_view kClusterNotConfigured = \"Cluster is not yet configured\";\n \n }  // namespace\n \n@@ -200,60 +192,54 @@ void ClusterShardsImpl(const ClusterConfig::ClusterShards& config, ConnectionCon\n \n void ClusterFamily::ClusterShards(ConnectionContext* cntx) {\n   if (is_emulated_cluster_) {\n-    ClusterConfig::ClusterShards config{GetEmulatedShardInfo(cntx)};\n-    return ClusterShardsImpl(config, cntx);\n+    return ClusterShardsImpl({GetEmulatedShardInfo(cntx)}, cntx);\n   } else if (cluster_config_->IsConfigured()) {\n     return ClusterShardsImpl(cluster_config_->GetConfig(), cntx);\n   } else {\n-    return (*cntx)->SendError(\"Cluster is not yet configured\");\n+    return (*cntx)->SendError(kClusterNotConfigured);\n   }\n }\n \n-void ClusterFamily::ClusterSlots(ConnectionContext* cntx) {\n+namespace {\n+void ClusterSlotsImpl(const ClusterConfig::ClusterShards& config, ConnectionContext* cntx) {\n   // For more details https://redis.io/commands/cluster-slots/\n-  constexpr unsigned int kClustersShardingCount = 1;\n-  constexpr unsigned int kNoReplicaInfoSize = 3;\n-  constexpr unsigned int kWithReplicaInfoSize = 4;\n-\n-  /* Format: 1) 1) start slot\n-   *            2) end slot\n-   *            3) 1) master IP\n-   *               2) master port\n-   *               3) node ID\n-   *            4) 1) replica IP (optional)\n-   *               2) replica port\n-   *               3) node ID\n-   *           ... note that in this case, only 1 slot\n-   */\n-  ServerState& etl = *ServerState::tlocal();\n-  // we have 3 cases here\n-  // 1. This is a stand alone, in this case we only sending local information\n-  // 2. We are the master, and we have replica, in this case send us as master\n-  // 3. We are replica to a master, sends the information about us as replica\n-  (*cntx)->StartArray(kClustersShardingCount);\n-  if (etl.is_master) {\n-    std::string cluster_announce_ip = absl::GetFlag(FLAGS_cluster_announce_ip);\n-    std::string preferred_endpoint =\n-        cluster_announce_ip.empty() ? cntx->owner()->LocalBindAddress() : cluster_announce_ip;\n-    auto vec = server_family_->GetDflyCmd()->GetReplicasRoleInfo();\n-    unsigned int info_len = vec.empty() ? kNoReplicaInfoSize : kWithReplicaInfoSize;\n-    (*cntx)->StartArray(info_len);\n-    (*cntx)->SendLong(0);                           // start sharding range\n-    (*cntx)->SendLong(ClusterConfig::kMaxSlotNum);  // end sharding range\n-    BuildClusterSlotNetworkInfo(cntx, preferred_endpoint, absl::GetFlag(FLAGS_port),\n-                                server_family_->master_id());\n-    if (!vec.empty()) {  // info about the replica\n-      const auto& info = vec[0];\n-      BuildClusterSlotNetworkInfo(cntx, info.address, info.listening_port, etl.remote_client_id_);\n+  auto WriteNode = [&](const ClusterConfig::Node& node) {\n+    constexpr unsigned int kNodeSize = 3;\n+    (*cntx)->StartArray(kNodeSize);\n+    (*cntx)->SendBulkString(node.ip);\n+    (*cntx)->SendLong(node.port);\n+    (*cntx)->SendBulkString(node.id);\n+  };\n+\n+  unsigned int slot_ranges = 0;\n+  for (const auto& shard : config) {\n+    slot_ranges += shard.slot_ranges.size();\n+  }\n+\n+  (*cntx)->StartArray(slot_ranges);\n+  for (const auto& shard : config) {\n+    for (const auto& slot_range : shard.slot_ranges) {\n+      const unsigned int array_size =\n+          /* slot-start, slot-end */ 2 + /* master */ 1 + /* replicas */ shard.replicas.size();\n+      (*cntx)->StartArray(array_size);\n+      (*cntx)->SendLong(slot_range.start);\n+      (*cntx)->SendLong(slot_range.end);\n+      WriteNode(shard.master);\n+      for (const auto& replica : shard.replicas) {\n+        WriteNode(replica);\n+      }\n     }\n+  }\n+}\n+}  // namespace\n+\n+void ClusterFamily::ClusterSlots(ConnectionContext* cntx) {\n+  if (is_emulated_cluster_) {\n+    return ClusterSlotsImpl({GetEmulatedShardInfo(cntx)}, cntx);\n+  } else if (cluster_config_->IsConfigured()) {\n+    return ClusterSlotsImpl(cluster_config_->GetConfig(), cntx);\n   } else {\n-    Replica::Info info = server_family_->GetReplicaInfo();\n-    (*cntx)->StartArray(kWithReplicaInfoSize);\n-    (*cntx)->SendLong(0);                           // start sharding range\n-    (*cntx)->SendLong(ClusterConfig::kMaxSlotNum);  // end sharding range\n-    BuildClusterSlotNetworkInfo(cntx, info.host, info.port, server_family_->GetReplicaMasterId());\n-    BuildClusterSlotNetworkInfo(cntx, cntx->owner()->LocalBindAddress(), absl::GetFlag(FLAGS_port),\n-                                server_family_->master_id());\n+    return (*cntx)->SendError(kClusterNotConfigured);\n   }\n }\n \n",
  "test_patch": "diff --git a/src/server/cluster_family_test.cc b/src/server/cluster_family_test.cc\nindex c154de571167..8d62af16cc44 100644\n--- a/src/server/cluster_family_test.cc\n+++ b/src/server/cluster_family_test.cc\n@@ -66,6 +66,7 @@ TEST_F(ClusterFamilyTest, ClusterConfigInvalidJSON) {\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_size:0\"));\n \n   EXPECT_THAT(Run({\"cluster\", \"shards\"}), ErrArg(\"Cluster is not yet configured\"));\n+  EXPECT_THAT(Run({\"cluster\", \"slots\"}), ErrArg(\"Cluster is not yet configured\"));\n }\n \n TEST_F(ClusterFamilyTest, ClusterConfigInvalidConfig) {\n@@ -193,8 +194,13 @@ TEST_F(ClusterFamilyTest, ClusterConfigNoReplicas) {\n   EXPECT_THAT(Run({\"get\", \"x\"}).GetString(),\n               testing::MatchesRegex(R\"(MOVED [0-9]+ 10.0.0.1:7000)\"));\n \n-  // TODO: Use \"CLUSTER SLOTS\" and \"CLUSTER SHARDS\" once implemented to verify new configuration\n-  // takes effect.\n+  EXPECT_THAT(Run({\"cluster\", \"slots\"}),\n+              RespArray(ElementsAre(IntArg(0),              //\n+                                    IntArg(16'383),         //\n+                                    RespArray(ElementsAre(  //\n+                                        \"10.0.0.1\",         //\n+                                        IntArg(7'000),      //\n+                                        \"abcd1234\")))));\n }\n \n TEST_F(ClusterFamilyTest, ClusterConfigFull) {\n@@ -252,8 +258,17 @@ TEST_F(ClusterFamilyTest, ClusterConfigFull) {\n                                             \"replication-offset\", IntArg(0),            //\n                                             \"health\", \"online\")))))));\n \n-  // TODO: Use \"CLUSTER SLOTS\" and \"CLUSTER SHARDS\" once implemented to verify new configuration\n-  // takes effect.\n+  EXPECT_THAT(Run({\"cluster\", \"slots\"}),\n+              RespArray(ElementsAre(IntArg(0),              //\n+                                    IntArg(16'383),         //\n+                                    RespArray(ElementsAre(  //\n+                                        \"10.0.0.1\",         //\n+                                        IntArg(7'000),      //\n+                                        \"abcd1234\")),       //\n+                                    RespArray(ElementsAre(  //\n+                                        \"10.0.0.10\",        //\n+                                        IntArg(8'000),      //\n+                                        \"wxyz\")))));\n }\n \n TEST_F(ClusterFamilyTest, ClusterConfigFullMultipleInstances) {\n@@ -352,6 +367,29 @@ TEST_F(ClusterFamilyTest, ClusterConfigFullMultipleInstances) {\n                                                 \"replication-offset\", IntArg(0),                 //\n                                                 \"health\", \"online\")))))))));\n \n+  EXPECT_THAT(Run({\"cluster\", \"slots\"}),\n+              RespArray(ElementsAre(                            //\n+                  RespArray(ElementsAre(IntArg(0),              //\n+                                        IntArg(10'000),         //\n+                                        RespArray(ElementsAre(  //\n+                                            \"10.0.0.1\",         //\n+                                            IntArg(7'000),      //\n+                                            \"abcd1234\")),       //\n+                                        RespArray(ElementsAre(  //\n+                                            \"10.0.0.10\",        //\n+                                            IntArg(8'000),      //\n+                                            \"wxyz\")))),         //\n+                  RespArray(ElementsAre(IntArg(10'001),         //\n+                                        IntArg(16'383),         //\n+                                        RespArray(ElementsAre(  //\n+                                            \"10.0.0.2\",         //\n+                                            IntArg(7'001),      //\n+                                            \"efgh7890\")),       //\n+                                        RespArray(ElementsAre(  //\n+                                            \"10.0.0.11\",        //\n+                                            IntArg(8'001),      //\n+                                            \"qwerty\")))))));\n+\n   absl::InsecureBitGen eng;\n   while (true) {\n     string random_key = GetRandomHex(eng, 40);\n@@ -376,9 +414,6 @@ TEST_F(ClusterFamilyTest, ClusterConfigFullMultipleInstances) {\n                 testing::MatchesRegex(R\"(MOVED [0-9]+ 10.0.0.2:7001)\"));\n     break;\n   }\n-\n-  // TODO: Use \"CLUSTER SLOTS\" and \"CLUSTER SHARDS\" once implemented to verify new configuration\n-  // takes effect.\n }\n \n TEST_F(ClusterFamilyTest, ClusterGetSlotInfo) {\n@@ -491,5 +526,15 @@ TEST_F(ClusterFamilyEmulatedTest, ClusterShards) {\n                                             \"health\", \"online\")))))));\n }\n \n+TEST_F(ClusterFamilyEmulatedTest, ClusterSlots) {\n+  EXPECT_THAT(Run({\"cluster\", \"slots\"}),\n+              RespArray(ElementsAre(IntArg(0),              //\n+                                    IntArg(16383),          //\n+                                    RespArray(ElementsAre(  //\n+                                        \"fake-host\",        //\n+                                        IntArg(6379),       //\n+                                        RunAdmin({\"dflycluster\", \"myid\"}).GetString())))));\n+}\n+\n }  // namespace\n }  // namespace dfly\n",
  "problem_statement": "Implement `CLUSTER NODES` command\n\n",
  "hints_text": "",
  "created_at": "2023-05-24T21:02:51Z",
  "modified_files": [
    "src/server/cluster/cluster_family.cc"
  ],
  "modified_test_files": [
    "src/server/cluster_family_test.cc"
  ]
}