{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2472,
  "instance_id": "dragonflydb__dragonfly-2472",
  "issue_numbers": [
    "2468"
  ],
  "base_commit": "7b6181641c8f7fe5d2caa3edb102acc13a0e0d0c",
  "patch": "diff --git a/src/core/interpreter.cc b/src/core/interpreter.cc\nindex 54f464bbac64..0af8615d078b 100644\n--- a/src/core/interpreter.cc\n+++ b/src/core/interpreter.cc\n@@ -352,6 +352,12 @@ int RedisStatusReplyCommand(lua_State* lua) {\n }\n \n // no-op\n+int RedisReplicateCommands(lua_State* lua) {\n+  lua_pushinteger(lua, 1);\n+  // number of results (the number of elements pushed to the lua stack\n+  return 1;\n+}\n+\n int RedisLogCommand(lua_State* lua) {\n   // if the arguments passed to redis.log are incorrect\n   // we still do not log the error. Therefore, even if\n@@ -416,6 +422,14 @@ Interpreter::Interpreter() {\n   lua_pushcfunction(lua_, RedisStatusReplyCommand);\n   lua_settable(lua_, -3);\n \n+  /* no-op functions */\n+\n+  /* redis.replicate_commands*/\n+  lua_pushstring(lua_, \"replicate_commands\");\n+  lua_pushcfunction(lua_, RedisReplicateCommands);\n+  lua_settable(lua_, -3);\n+\n+  /* redis.log*/\n   lua_pushstring(lua_, \"log\");\n   lua_pushcfunction(lua_, RedisLogCommand);\n   lua_settable(lua_, -3);\n",
  "test_patch": "diff --git a/src/core/interpreter_test.cc b/src/core/interpreter_test.cc\nindex d8b8ff0cdf56..74b5aa17bcd4 100644\n--- a/src/core/interpreter_test.cc\n+++ b/src/core/interpreter_test.cc\n@@ -458,4 +458,18 @@ TEST_F(InterpreterTest, AsyncReplacement) {\n   }\n }\n \n+TEST_F(InterpreterTest, ReplicateCommands) {\n+  EXPECT_TRUE(Execute(\"return redis.replicate_commands()\"));\n+  EXPECT_EQ(\"i(1)\", ser_.res);\n+  EXPECT_TRUE(Execute(\"redis.replicate_commands()\"));\n+  EXPECT_EQ(\"nil\", ser_.res);\n+}\n+\n+TEST_F(InterpreterTest, Log) {\n+  EXPECT_TRUE(Execute(R\"(redis.log('nonsense', 'nonsense'))\"));\n+  EXPECT_EQ(\"nil\", ser_.res);\n+  EXPECT_TRUE(Execute(R\"(redis.log(redis.LOG_WARNING, 'warn'))\"));\n+  EXPECT_EQ(\"nil\", ser_.res);\n+}\n+\n }  // namespace dfly\ndiff --git a/tests/dragonfly/eval_test.py b/tests/dragonfly/eval_test.py\nindex acc89142006c..f687a16e40f9 100644\n--- a/tests/dragonfly/eval_test.py\n+++ b/tests/dragonfly/eval_test.py\n@@ -264,12 +264,3 @@ async def test_lua_auto_async(async_client: aioredis.Redis):\n \n     flushes = (await async_client.info(\"transaction\"))[\"eval_squashed_flushes\"]\n     assert 1 <= flushes <= 3  # all 100 commands are executed in at most 3 batches\n-\n-\n-@dfly_args({\"proactor_threads\": 4, \"lua_auto_async\": None})\n-async def test_lua_redis_log_noop(async_client: aioredis.Redis):\n-    res = await async_client.eval(\"redis.log('nonsense', 'nonsense')\", 0)\n-    assert res == None\n-\n-    res = await async_client.eval(\"redis.log(redis.LOG_WARNING, 'warn')\", 0)\n-    assert res == None\n",
  "problem_statement": "introduce redis.replicate_commands() in lua\nHi, \r\n\r\nI'm a heavy user of https://github.com/mvisonneau/gitlab-ci-pipelines-exporter and I have been looking to migrate it's redis dependency to dragonflydb.\r\n\r\nOn Dragonfly 1.10, I was blocked due to missing XACK. Now, i'm trying with version 1.13 and I'm one step further. Now it gives me:\r\n\r\n{\"error\":\"ERR Error running script (call to f52a5b566060d79fd321d695df55bc918339c4aa): @user_script:4: user_script:4: attempt to call a nil value (field 'replicate_commands')\",\"level\":\"fatal\",\"msg\":\"\",\"time\":\"2024-01-24T18:16:39Z\"}\r\n\r\nI googled quickly and it looks like a redis command. I will dive more but if someone knows about it and want to save my time it would be great. \r\n\r\nthanks! btw, great project. \n",
  "hints_text": "see https://redis.io/docs/interact/programmability/lua-api/ for more info.\r\n\r\nDragonfly already replicates the effect of lua scripting therefore this command should be a noop.\r\n\nThanks, I can test at any time. I'm very bad at c++, and I was not able to proceed on my fork.\n\nLet me know if you need input from me. ",
  "created_at": "2024-01-25T09:56:36Z",
  "modified_files": [
    "src/core/interpreter.cc"
  ],
  "modified_test_files": [
    "src/core/interpreter_test.cc",
    "tests/dragonfly/eval_test.py"
  ]
}