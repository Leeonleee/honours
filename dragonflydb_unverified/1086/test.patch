diff --git a/src/server/rdb_test.cc b/src/server/rdb_test.cc
index 8c73418157be..04fd2097ca85 100644
--- a/src/server/rdb_test.cc
+++ b/src/server/rdb_test.cc
@@ -38,18 +38,21 @@ namespace dfly {
 
 class RdbTest : public BaseFamilyTest {
  protected:
-  static void SetUpTestSuite();
   void TearDown();
+  void SetUp();
 
   io::FileSource GetSource(string name);
 };
 
-void RdbTest::SetUpTestSuite() {
-  BaseFamilyTest::SetUpTestSuite();
+void RdbTest::SetUp() {
   SetFlag(&FLAGS_dbfilename, "rdbtestdump");
+  BaseFamilyTest::SetUp();
 }
 
 void RdbTest::TearDown() {
+  // Disable save on shutdown
+  SetFlag(&FLAGS_dbfilename, "");
+
   auto rdb_files = io::StatFiles("rdbtestdump*");
   CHECK(rdb_files);
   for (const auto& fl : *rdb_files) {
diff --git a/tests/dragonfly/replication_test.py b/tests/dragonfly/replication_test.py
index 62cb5035ae5e..78c8cc6297b4 100644
--- a/tests/dragonfly/replication_test.py
+++ b/tests/dragonfly/replication_test.py
@@ -36,9 +36,9 @@
 @pytest.mark.asyncio
 @pytest.mark.parametrize("t_master, t_replicas, seeder_config", replication_cases)
 async def test_replication_all(df_local_factory, df_seeder_factory, t_master, t_replicas, seeder_config):
-    master = df_local_factory.create(port=BASE_PORT, proactor_threads=t_master)
+    master = df_local_factory.create(port=BASE_PORT, proactor_threads=t_master, dbfilename="")
     replicas = [
-        df_local_factory.create(port=BASE_PORT+i+1, proactor_threads=t)
+        df_local_factory.create(port=BASE_PORT+i+1, proactor_threads=t, dbfilename="")
         for i, t in enumerate(t_replicas)
     ]
 
@@ -148,10 +148,10 @@ async def check_data(seeder, replicas, c_replicas):
 @pytest.mark.asyncio
 @pytest.mark.parametrize("t_master, t_crash_fs, t_crash_ss, t_disonnect, n_keys", disconnect_cases)
 async def test_disconnect_replica(df_local_factory: DflyInstanceFactory, df_seeder_factory, t_master, t_crash_fs, t_crash_ss, t_disonnect, n_keys):
-    master = df_local_factory.create(port=BASE_PORT, proactor_threads=t_master)
+    master = df_local_factory.create(port=BASE_PORT, proactor_threads=t_master, dbfilename="")
     replicas = [
         (df_local_factory.create(
-            port=BASE_PORT+i+1, proactor_threads=t), crash_fs)
+            port=BASE_PORT+i+1, proactor_threads=t, dbfilename=""), crash_fs)
         for i, (t, crash_fs) in enumerate(
             chain(
                 zip(t_crash_fs, repeat(DISCONNECT_CRASH_FULL_SYNC)),
@@ -284,10 +284,10 @@ async def disconnect(replica, c_replica, crash_type):
 @pytest.mark.asyncio
 @pytest.mark.parametrize("t_master, t_replicas, n_random_crashes, n_keys", master_crash_cases)
 async def test_disconnect_master(df_local_factory, df_seeder_factory, t_master, t_replicas, n_random_crashes, n_keys):
-    master = df_local_factory.create(port=1111, proactor_threads=t_master)
+    master = df_local_factory.create(port=1111, proactor_threads=t_master, dbfilename="")
     replicas = [
         df_local_factory.create(
-            port=BASE_PORT+i+1, proactor_threads=t)
+            port=BASE_PORT+i+1, proactor_threads=t, dbfilename="")
         for i, t in enumerate(t_replicas)
     ]
 
@@ -398,8 +398,8 @@ async def test_cancel_replication_immediately(df_local_factory, df_seeder_factor
     """
     COMMANDS_TO_ISSUE = 40
 
-    replica = df_local_factory.create(port=BASE_PORT, v=1)
-    masters = [df_local_factory.create(port=BASE_PORT+i+1) for i in range(4)]
+    replica = df_local_factory.create(port=BASE_PORT, dbfilename="")
+    masters = [df_local_factory.create(port=BASE_PORT+i+1, dbfilename="") for i in range(4)]
     seeders = [df_seeder_factory.create(port=m.port) for m in masters]
 
     df_local_factory.start_all([replica] + masters)
diff --git a/tests/dragonfly/snapshot_test.py b/tests/dragonfly/snapshot_test.py
index ac5b4e7e639e..4f7eb93d76d8 100644
--- a/tests/dragonfly/snapshot_test.py
+++ b/tests/dragonfly/snapshot_test.py
@@ -4,6 +4,7 @@
 import glob
 import aioredis
 from pathlib import Path
+import aioredis
 
 from . import dfly_args
 from .utility import DflySeeder, wait_available_async
@@ -18,7 +19,8 @@ def setup(self, tmp_dir: Path):
         self.tmp_dir = tmp_dir
 
     def get_main_file(self, pattern):
-        def is_main(f): return "summary" in f if pattern.endswith("dfs") else True
+        def is_main(f): return "summary" in f if pattern.endswith(
+            "dfs") else True
         files = glob.glob(str(self.tmp_dir.absolute()) + '/' + pattern)
         possible_mains = list(filter(is_main, files))
         assert len(possible_mains) == 1, possible_mains
@@ -92,6 +94,8 @@ async def test_snapshot(self, df_seeder_factory, async_client, df_server):
         assert await seeder.compare(start_capture)
 
 # We spawn instances manually, so reduce memory usage of default to minimum
+
+
 @dfly_args({"proactor_threads": "1"})
 class TestDflyAutoLoadSnapshot(SnapshotTestBase):
     """Test automatic loading of dump files on startup with timestamp"""
@@ -138,7 +142,8 @@ def setup(self, tmp_dir: Path):
 
     @pytest.mark.asyncio
     async def test_snapshot(self, df_seeder_factory, df_server):
-        seeder = df_seeder_factory.create(port=df_server.port, keys=10, multi_transaction_probability=0)
+        seeder = df_seeder_factory.create(
+            port=df_server.port, keys=10, multi_transaction_probability=0)
         await seeder.run(target_deviation=0.5)
 
         time.sleep(60)
@@ -156,9 +161,34 @@ def setup(self, tmp_dir: Path):
 
     @pytest.mark.asyncio
     async def test_snapshot(self, df_local_factory):
-        df_server = df_local_factory.create(dbfilename="../../../../etc/passwd")
+        df_server = df_local_factory.create(
+            dbfilename="../../../../etc/passwd")
         try:
             df_server.start()
             assert False, "Server should not start correctly"
         except Exception as e:
             pass
+
+
+@dfly_args({**BASIC_ARGS, "dbfilename": "test-shutdown"})
+class TestDflySnapshotOnShutdown(SnapshotTestBase):
+    """Test multi file snapshot"""
+    @pytest.fixture(autouse=True)
+    def setup(self, tmp_dir: Path):
+        self.tmp_dir = tmp_dir
+
+    @pytest.mark.asyncio
+    async def test_snapshot(self, df_seeder_factory, df_server):
+        seeder = df_seeder_factory.create(port=df_server.port, **SEEDER_ARGS)
+        await seeder.run(target_deviation=0.1)
+
+        start_capture = await seeder.capture()
+
+        df_server.stop()
+        df_server.start()
+
+        a_client = aioredis.Redis(port=df_server.port)
+        await wait_available_async(a_client)
+        await a_client.connection_pool.disconnect()
+
+        assert await seeder.compare(start_capture)
