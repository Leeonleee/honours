diff --git a/src/server/debugcmd.cc b/src/server/debugcmd.cc
index 20e951940bf3..932ba2915c35 100644
--- a/src/server/debugcmd.cc
+++ b/src/server/debugcmd.cc
@@ -170,13 +170,9 @@ void DebugCmd::Reload(CmdArgList args) {
 
   if (save) {
     string err_details;
-    const CommandId* cid = sf_.service().FindCmd("SAVE");
-    CHECK_NOTNULL(cid);
-    intrusive_ptr<Transaction> trans(new Transaction{cid, ServerState::tlocal()->thread_index()});
-    trans->InitByArgs(0, {});
     VLOG(1) << "Performing save";
 
-    GenericError ec = sf_.DoSave(absl::GetFlag(FLAGS_df_snapshot_format), trans.get());
+    GenericError ec = sf_.DoSave();
     if (ec) {
       return (*cntx_)->SendError(ec.Format());
     }
diff --git a/src/server/server_family.cc b/src/server/server_family.cc
index 7836ed6b43b9..8642551d4fd9 100644
--- a/src/server/server_family.cc
+++ b/src/server/server_family.cc
@@ -465,7 +465,7 @@ void ServerFamily::Init(util::AcceptServer* acceptor, util::ListenerInterface* m
   if (!save_time.empty()) {
     std::optional<SnapshotSpec> spec = ParseSaveSchedule(save_time);
     if (spec) {
-      snapshot_fiber_ = service_.proactor_pool().GetNextProactor()->LaunchFiber(
+      snapshot_schedule_fb_ = service_.proactor_pool().GetNextProactor()->LaunchFiber(
           [save_spec = std::move(spec.value()), this] { SnapshotScheduling(save_spec); });
     } else {
       LOG(WARNING) << "Invalid snapshot time specifier " << save_time;
@@ -479,9 +479,18 @@ void ServerFamily::Shutdown() {
   if (load_result_.valid())
     load_result_.wait();
 
-  is_snapshot_done_.Notify();
-  if (snapshot_fiber_.IsJoinable()) {
-    snapshot_fiber_.Join();
+  schedule_done_.Notify();
+  if (snapshot_schedule_fb_.IsJoinable()) {
+    snapshot_schedule_fb_.Join();
+  }
+
+  if (save_on_shutdown_ && !absl::GetFlag(FLAGS_dbfilename).empty()) {
+    shard_set->pool()->GetNextProactor()->Await([this] {
+      GenericError ec = DoSave();
+      if (ec) {
+        LOG(WARNING) << "Failed to perform snapshot " << ec.Format();
+      }
+    });
   }
 
   pb_task_->Await([this] {
@@ -606,7 +615,7 @@ Future<std::error_code> ServerFamily::Load(const std::string& load_path) {
 void ServerFamily::SnapshotScheduling(const SnapshotSpec& spec) {
   const auto loop_sleep_time = std::chrono::seconds(20);
   while (true) {
-    if (is_snapshot_done_.WaitFor(loop_sleep_time)) {
+    if (schedule_done_.WaitFor(loop_sleep_time)) {
       break;
     }
 
@@ -627,13 +636,7 @@ void ServerFamily::SnapshotScheduling(const SnapshotSpec& spec) {
       continue;
     }
 
-    const CommandId* cid = service().FindCmd("SAVE");
-    CHECK_NOTNULL(cid);
-    boost::intrusive_ptr<Transaction> trans(
-        new Transaction{cid, ServerState::tlocal()->thread_index()});
-    trans->InitByArgs(0, {});
-
-    GenericError ec = DoSave(absl::GetFlag(FLAGS_df_snapshot_format), trans.get());
+    GenericError ec = DoSave();
     if (ec) {
       LOG(WARNING) << "Failed to perform snapshot " << ec.Format();
     }
@@ -663,9 +666,6 @@ error_code ServerFamily::LoadRdb(const std::string& rdb_file) {
   } else {
     ec = res.error();
   }
-
-  service_.SwitchState(GlobalState::LOADING, GlobalState::ACTIVE);
-
   return ec;
 }
 
@@ -922,6 +922,15 @@ error_code DoPartialSave(PartialSaveOpts opts, const dfly::StringVec& scripts,
   return local_ec;
 }
 
+GenericError ServerFamily::DoSave() {
+  const CommandId* cid = service().FindCmd("SAVE");
+  CHECK_NOTNULL(cid);
+  boost::intrusive_ptr<Transaction> trans(
+      new Transaction{cid, ServerState::tlocal()->thread_index()});
+  trans->InitByArgs(0, {});
+  return DoSave(absl::GetFlag(FLAGS_df_snapshot_format), trans.get());
+}
+
 GenericError ServerFamily::DoSave(bool new_version, Transaction* trans) {
   fs::path dir_path(GetFlag(FLAGS_dir));
   AggregateGenericError ec;
@@ -2034,6 +2043,22 @@ void ServerFamily::Latency(CmdArgList args, ConnectionContext* cntx) {
 }
 
 void ServerFamily::_Shutdown(CmdArgList args, ConnectionContext* cntx) {
+  if (args.size() > 1) {
+    (*cntx)->SendError(kSyntaxErr);
+    return;
+  }
+
+  if (args.size() == 1) {
+    auto sub_cmd = ArgS(args, 0);
+    if (absl::EqualsIgnoreCase(sub_cmd, "SAVE")) {
+    } else if (absl::EqualsIgnoreCase(sub_cmd, "NOSAVE")) {
+      save_on_shutdown_ = false;
+    } else {
+      (*cntx)->SendError(kSyntaxErr);
+      return;
+    }
+  }
+
   CHECK_NOTNULL(acceptor_)->Stop();
   (*cntx)->SendOk();
 }
@@ -2077,7 +2102,7 @@ void ServerFamily::Register(CommandRegistry* registry) {
             << CI{"LATENCY", CO::NOSCRIPT | CO::LOADING | CO::FAST, -2, 0, 0, 0}.HFUNC(Latency)
             << CI{"MEMORY", kMemOpts, -2, 0, 0, 0}.HFUNC(Memory)
             << CI{"SAVE", CO::ADMIN | CO::GLOBAL_TRANS, -1, 0, 0, 0}.HFUNC(Save)
-            << CI{"SHUTDOWN", CO::ADMIN | CO::NOSCRIPT | CO::LOADING, 1, 0, 0, 0}.HFUNC(_Shutdown)
+            << CI{"SHUTDOWN", CO::ADMIN | CO::NOSCRIPT | CO::LOADING, -1, 0, 0, 0}.HFUNC(_Shutdown)
             << CI{"SLAVEOF", kReplicaOpts, 3, 0, 0, 0}.HFUNC(ReplicaOf)
             << CI{"READONLY", CO::READONLY, 1, 0, 0, 0}.HFUNC(ReadOnly)
             << CI{"REPLICAOF", kReplicaOpts, 3, 0, 0, 0}.HFUNC(ReplicaOf)
diff --git a/src/server/server_family.h b/src/server/server_family.h
index be6ba113badb..431b91ccdcc8 100644
--- a/src/server/server_family.h
+++ b/src/server/server_family.h
@@ -91,6 +91,10 @@ class ServerFamily {
   // if new_version is true, saves DF specific, non redis compatible snapshot.
   GenericError DoSave(bool new_version, Transaction* transaction);
 
+  // Calls DoSave with a default generated transaction and with the format
+  // specified in --df_snapshot_format
+  GenericError DoSave();
+
   // Burns down and destroy all the data from the database.
   // if kDbAll is passed, burns all the databases to the ground.
   std::error_code Drakarys(Transaction* transaction, DbIndex db_ind);
@@ -161,7 +165,7 @@ class ServerFamily {
 
   void SnapshotScheduling(const SnapshotSpec& time);
 
-  Fiber snapshot_fiber_;
+  Fiber snapshot_schedule_fb_;
   Future<std::error_code> load_result_;
 
   uint32_t stats_caching_task_ = 0;
@@ -186,7 +190,11 @@ class ServerFamily {
   std::shared_ptr<LastSaveInfo> last_save_info_;  // protected by save_mu_;
   std::atomic_bool is_saving_{false};
 
-  Done is_snapshot_done_;
+  // Used to override save on shutdown behavior that is usually set
+  // be --dbfilename.
+  bool save_on_shutdown_{true};
+
+  Done schedule_done_;
   std::unique_ptr<FiberQueueThreadPool> fq_threadpool_;
 };
 
