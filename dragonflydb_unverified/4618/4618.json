{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4618,
  "instance_id": "dragonflydb__dragonfly-4618",
  "issue_numbers": [
    "4616"
  ],
  "base_commit": "c8c1eaee9e04cad9b4fd0a6c39008e8797f32f00",
  "patch": "diff --git a/.github/workflows/docker-release.yml b/.github/workflows/docker-release.yml\ndeleted file mode 100644\nindex 23635d3204a9..000000000000\n--- a/.github/workflows/docker-release.yml\n+++ /dev/null\n@@ -1,124 +0,0 @@\n-name: docker release\n-\n-on:\n-  workflow_dispatch:\n-    inputs:\n-      TAG_NAME:\n-        description: 'Tag name that the major tag will point to'\n-        required: true\n-      PRERELEASE:\n-        description: 'Whether this is a prerelease'\n-        type: boolean\n-        required: true\n-\n-  release:\n-    types: [published]\n-\n-permissions:\n-  packages: write\n-  contents: write\n-  id-token: write\n-\n-env:\n-  TAG_NAME: ${{ github.event.inputs.TAG_NAME || github.event.release.tag_name }}\n-  IS_PRERELEASE: ${{ github.event.release.prerelease || github.event.inputs.PRERELEASE }}\n-\n-jobs:\n-  # This workaround is needed, as it's not possible to reference env.FOOBAR directly at this stage\n-  # - for ex. https://github.com/actions/runner/issues/1189\n-  release-container-prereq:\n-    runs-on: ubuntu-latest\n-    outputs:\n-      tag: ${{ steps.release-param.outputs.tag }}\n-      tag_latest: ${{ steps.release-param.outputs.tag_latest }}\n-    steps:\n-    - id: release-param\n-      run: |\n-        # If env.IS_PRERELEASE is true, set tag to alpha and do not enable tag_latest\n-        # If env.IS_PRERELEASE is not true (aka false), don't set an extra tag and enable tag_latest\n-        echo \"tag=${{ env.IS_PRERELEASE == 'true' && 'alpha' }}\" >> $GITHUB_OUTPUT\n-        echo \"tag_latest=${{ env.IS_PRERELEASE == 'true' && 'false' || 'true' }}\" >> $GITHUB_OUTPUT\n-\n-  release-container:\n-    needs: release-container-prereq\n-    uses: ./.github/workflows/reusable-container-workflow.yaml\n-    with:\n-      build_type: prod\n-      tag: ${{ needs.release-container-prereq.outputs.tag }}\n-      tag_latest: ${{ needs.release-container-prereq.outputs.tag_latest == 'true' }}\n-      image: ghcr.io/${{ github.repository }}\n-      registry: ghcr.io\n-      registry_username: ${{ github.repository_owner }}\n-      fetch_release: true\n-      release_version: ${{ github.event.inputs.TAG_NAME || github.event.release.tag_name }}\n-    secrets:\n-      registry_password: ${{ secrets.GITHUB_TOKEN }}\n-      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n-\n-  release:\n-    needs: [release-container-prereq, release-container]\n-    runs-on: ubuntu-latest\n-    steps:\n-    - name: print_env\n-      run: env\n-\n-    - name: checkout\n-      uses: actions/checkout@v4\n-      with:\n-        fetch-depth: 0\n-\n-    - name: Install helm\n-      uses: azure/setup-helm@v4\n-\n-    - name: Setup Go\n-      uses: actions/setup-go@v5\n-\n-    - name: Configure Git\n-      if: env.IS_PRERELEASE != 'true'\n-      run: |\n-        git config user.name \"$GITHUB_ACTOR\"\n-        git config user.email \"$GITHUB_ACTOR@users.noreply.github.com\"\n-\n-    - name: Update helm chart\n-      if: env.IS_PRERELEASE != 'true'\n-      run: |\n-        git checkout main\n-        sed -Ei \\\n-            -e 's/^(version\\:) .*/\\1 '${{ env.TAG_NAME }}'/g' \\\n-            -e 's/^(appVersion\\:) .*/\\1 \"'${{ env.TAG_NAME }}'\"/g' \\\n-            contrib/charts/dragonfly/Chart.yaml\n-\n-        go test ./contrib/charts/dragonfly/... -update\n-\n-        git commit \\\n-          -m 'chore(helm-chart): update to ${{ env.TAG_NAME }}' \\\n-          contrib/charts/dragonfly/Chart.yaml \\\n-          contrib/charts/dragonfly/ci || true\n-\n-    - name: Push Helm chart as OCI to Github\n-      if: env.IS_PRERELEASE != 'true'\n-      run: |\n-        echo \"${{ secrets.GITHUB_TOKEN }}\" | \\\n-          helm registry login -u ${{ github.actor }} --password-stdin ghcr.io\n-\n-        helm package contrib/charts/dragonfly\n-\n-        helm push dragonfly-${{ env.TAG_NAME }}.tgz oci://ghcr.io/${{ github.repository }}/helm\n-\n-    - name: GitHub Push\n-      uses: CasperWA/push-protected@v2\n-      with:\n-        token: ${{ secrets.DRAGONFLY_TOKEN }}\n-        branch: main\n-\n-    - name: Discord notification\n-      env:\n-        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}\n-      uses: Ilshidur/action-discord@0c4b27844ba47cb1c7bee539c8eead5284ce9fa9\n-      with:\n-        args: 'DragonflyDB version [${{ env.TAG_NAME }}](https://github.com/dragonflydb/dragonfly/releases/tag/${{ env.TAG_NAME }}) has been released \ud83c\udf89'\n-\n-    - name: Re-build Docs\n-      if: env.IS_PRERELEASE != 'true'\n-      run: |\n-        curl -s -X POST '${{ secrets.VERCEL_DOCS_WEBHOOK }}'\ndiff --git a/.github/workflows/docker-release2.yml b/.github/workflows/docker-release2.yml\nnew file mode 100644\nindex 000000000000..a0368550da6a\n--- /dev/null\n+++ b/.github/workflows/docker-release2.yml\n@@ -0,0 +1,160 @@\n+name: Docker Release-v2\n+\n+on:\n+  workflow_dispatch:\n+    inputs:\n+      TAG_NAME:\n+        description: 'Tag name that the major tag will point to'\n+        required: true\n+      PRERELEASE:\n+        description: 'Whether this is a prerelease'\n+        type: boolean\n+        required: true\n+\n+  release:\n+    types: [published]\n+\n+concurrency:\n+  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}\n+  cancel-in-progress: true\n+\n+env:\n+  TAG_NAME: ${{ github.event.inputs.TAG_NAME || github.event.release.tag_name }}\n+  IS_PRERELEASE: ${{ github.event.release.prerelease || github.event.inputs.PRERELEASE }}\n+  IMAGE: ghcr.io/dragonflydb/dragonfly\n+\n+jobs:\n+  build_and_tag:\n+    name: Build and Push ${{matrix.flavor}} ${{ matrix.os.arch }} image\n+    strategy:\n+      matrix:\n+        flavor: [ubuntu]\n+        os:\n+          - image: ubuntu-24.04\n+            arch: amd64\n+          - image: ubuntu-24.04-arm\n+            arch: arm64\n+\n+    runs-on: ${{ matrix.os.image }}\n+    permissions:\n+      contents: read\n+      packages: write\n+      id-token: write\n+\n+    steps:\n+      - name: checkout\n+        uses: actions/checkout@v4\n+        with:\n+          fetch-depth: 0\n+          submodules: true\n+      - name: Set up Docker Build\n+        uses: docker/setup-buildx-action@v3\n+      - name: Login to GitHub Container Registry\n+        uses: docker/login-action@v3\n+        with:\n+          registry: ghcr.io\n+          username: ${{ github.repository_owner }}\n+          password: ${{ secrets.GITHUB_TOKEN }}\n+\n+      - name: Fetch release asset\n+        uses: dsaltares/fetch-gh-release-asset@1.1.2\n+        with:\n+          version: \"tags/${{ env.TAG_NAME }}\"\n+          regex: true\n+          file: \"dragonfly-.*\\\\.tar\\\\.gz\"\n+          target: 'releases/'\n+          token: ${{ secrets.GITHUB_TOKEN }}\n+\n+      - name: Extract artifacts\n+        run: |\n+          echo \"Event prerelease ${{ github.event.release.prerelease }}\"\n+          echo \"Input prerelease ${{ github.event.inputs.PRERELEASE }}\"\n+          ls -l\n+          ls -l releases\n+          for f in releases/*.tar.gz; do tar xvfz $f -C releases; done\n+          rm releases/*.tar.gz\n+\n+      - name: Docker meta\n+        id: metadata\n+        uses: docker/metadata-action@v5\n+        with:\n+          images: |\n+            ${{ env.IMAGE }}\n+          flavor: |\n+            latest=false\n+            prefix=${{ matrix.flavor}}-\n+            suffix=-${{ matrix.os.arch }}\n+          tags: |\n+            type=semver,pattern={{version}},enable=true,value=${{ env.TAG_NAME }}\n+            type=semver,pattern={{raw}},enable=true,value=${{ env.TAG_NAME }}\n+            type=ref,event=pr\n+          labels: |\n+            org.opencontainers.image.vendor=DragonflyDB LTD\n+            org.opencontainers.image.title=Dragonfly Production Image\n+            org.opencontainers.image.description=The fastest in-memory store\n+\n+      - name: Build image\n+        id: build\n+        uses: docker/build-push-action@v6\n+        with:\n+          context: .\n+          push: true\n+          provenance: false  # Prevent pushing a docker manifest\n+          tags: |\n+            ${{ steps.metadata.outputs.tags }}\n+          labels: ${{ steps.metadata.outputs.labels }}\n+          file: tools/packaging/Dockerfile.${{ matrix.flavor }}-prod\n+          cache-from: type=gha,scope=prod-${{ matrix.flavor }}\n+          cache-to: type=gha,scope=prod-${{ matrix.flavor }},mode=max\n+          load: true  # Load the build images into the local docker.\n+\n+      - name: Test Image\n+        uses: ./.github/actions/test-docker\n+        timeout-minutes: 1\n+        with:\n+          image_id: ${{ env.IMAGE }}@${{ steps.build.outputs.digest }}\n+          name: ${{ matrix.flavor }}-${{ matrix.os.arch }}\n+\n+      - id: output-sha\n+        run: |\n+          echo \"sha_${{ matrix.os.arch }}=${{ steps.build.outputs.digest }}\" >> $GITHUB_OUTPUT\n+    outputs:\n+      sha_amd: ${{ steps.output-sha.outputs.sha_amd64 }}\n+      sha_arm: ${{ steps.output-sha.outputs.sha_arm64 }}\n+\n+  merge_manifest:\n+    needs: [build_and_tag]\n+    runs-on: ubuntu-latest\n+    strategy:\n+      matrix:\n+        flavor: [ubuntu]\n+    steps:\n+      - name: Login to GitHub Container Registry\n+        uses: docker/login-action@v3\n+        with:\n+          registry: ghcr.io\n+          username: ${{ github.repository_owner }}\n+          password: ${{ secrets.GITHUB_TOKEN }}\n+\n+      - name: Merge and Push\n+        run: |\n+            sha_amd=${{ env.IMAGE }}@${{ needs.build_and_tag.outputs.sha_amd }}\n+            sha_arm=${{ env.IMAGE }}@${{ needs.build_and_tag.outputs.sha_arm }}\n+            echo \"shas: $sha_amd $sha_arm\"\n+\n+            if [[ \"${{ env.IS_PRERELEASE }}\" == 'true' ]]; then\n+              # Create and push the manifest like dragonfly:alpha-ubuntu\n+              tag=\"${{ env.IMAGE }}:alpha-${{ matrix.flavor }}\"\n+              docker manifest create ${tag} --amend ${sha_amd} --amend ${sha_arm}\n+              docker manifest push ${tag}\n+            elif [[ \"${{matrix.flavor}}\" == 'ubuntu' ]]; then\n+              tag=\"${{ env.IMAGE }}:latest\"\n+              # Create and push the manifest like dragonfly:latest\n+              docker manifest create ${tag} --amend ${sha_amd} --amend ${sha_arm}\n+              docker manifest push ${tag}\n+            fi\n+\n+            # Create and push the manifest like dragonfly:v1.26.4\n+            tag=${{ env.IMAGE }}:${{ env.TAG_NAME }}\n+            docker manifest create ${tag} --amend ${sha_amd} --amend ${sha_arm}\n+            docker manifest push ${tag}\n\\ No newline at end of file\ndiff --git a/.github/workflows/reusable-container-workflow.yaml b/.github/workflows/reusable-container-workflow.yaml\ndeleted file mode 100644\nindex 0bec662cebe9..000000000000\n--- a/.github/workflows/reusable-container-workflow.yaml\n+++ /dev/null\n@@ -1,205 +0,0 @@\n-name: Reusable Container Build Workflow\n-\n-on:\n-  workflow_call:\n-    inputs:\n-      # Which suffix to look for with the Dockerfile. Can be dev or prod\n-      build_type:\n-        required: true\n-        type: string\n-      # For example 'alpha', for pre-release or weekly builds\n-      tag:\n-        required: false\n-        type: string\n-      # Is this a final release? Then we set this to true, so the 'latest' tag is updated\n-      tag_latest:\n-        required: false\n-        type: boolean\n-      # The container image dragonflydb/dragonfly\n-      image:\n-        required: true\n-        type: string\n-      # ghcr.io / hub.docker.com / quay.io / you name it\n-      registry:\n-        required: true\n-        type: string\n-      # Username used to login to the registry\n-      registry_username:\n-        required: true\n-        type: string\n-      # Do we have to fetch release assets? Then set this to true.\n-      # Not required for build_type == dev, as they entirely build from source\n-      # But for build_type == prod, as they're based on the release assets\n-      fetch_release:\n-        required: false\n-        type: boolean\n-      # Which version are we fetching? Should be identical to the release version.\n-      # For example v0.12.0\n-      release_version:\n-        required: false\n-        type: string\n-    secrets:\n-      # Password used to login to the registry\n-      registry_password:\n-        required: true\n-      # Github Personal Access Token used to fetch assets from a release\n-      GH_TOKEN:\n-        required: false\n-\n-jobs:\n-  container-build:\n-    runs-on: ubuntu-latest\n-    strategy:\n-      matrix:\n-        include:\n-          - flavor: alpine\n-            dockerfile: tools/packaging/Dockerfile.alpine\n-            tag_main: false\n-          - flavor: ubuntu\n-            dockerfile: tools/packaging/Dockerfile.ubuntu\n-            tag_main: true\n-    steps:\n-      - name: checkout\n-        uses: actions/checkout@v4\n-        with:\n-          fetch-depth: 1\n-          submodules: true\n-\n-      - if: inputs.fetch_release\n-        name: Fetch release asset\n-        uses: dsaltares/fetch-gh-release-asset@1.1.2\n-        with:\n-          version: \"tags/${{ inputs.release_version }}\"\n-          regex: true\n-          file: \"dragonfly-.*\\\\.tar\\\\.gz\"\n-          target: 'releases/'\n-          token: ${{ secrets.GH_TOKEN }}\n-\n-      - if: inputs.fetch_release\n-        name: Extract artifacts\n-        run: |\n-          echo \"Event prerelease ${{ github.event.release.prerelease }}\"\n-          echo \"Input prerelease ${{ github.event.inputs.PRERELEASE }}\"\n-          ls -l\n-          ls -l releases\n-          for f in releases/*.tar.gz; do tar xvfz $f -C releases; done\n-          rm releases/*.tar.gz\n-\n-      - name: Set up QEMU\n-        id: qemu\n-        uses: docker/setup-qemu-action@v3\n-        with:\n-          platforms: arm64,amd64\n-\n-      - name: Set up Docker Buildx\n-        uses: docker/setup-buildx-action@v3\n-      - name: Login to GitHub Container Registry\n-        uses: docker/login-action@v3\n-        with:\n-          registry: ${{ inputs.registry }}\n-          username: ${{ inputs.registry_username }}\n-          password: ${{ secrets.registry_password }}\n-\n-      - name: Docker meta\n-        id: metadata\n-        uses: docker/metadata-action@v5\n-        with:\n-          images: |\n-            ${{ inputs.image }}\n-          tags: |\n-            # will set tag 'latest' for ubuntu build on production push\n-            # inputs.tag_latest will be true on when triggered by docker-release.yml\n-            # matrix.tag_main will only be true for ubuntu flavor\n-            type=raw,value=latest,enable=${{ matrix.tag_main && inputs.tag_latest }}\n-\n-            # set a tag like 'alpine' or 'ubuntu', if we're setting 'latest' during this build as well\n-            type=raw,value=${{ matrix.flavor }},enable=${{ inputs.tag_latest }}\n-\n-            # will set tag like 'alpha' for ubuntu build, if inputs.tag is not empty\n-            # but will set the non-flavored tag only, if matrix.tag_main is true\n-            type=raw,value=${{ inputs.tag }},enable=${{ inputs.tag != 'false' && matrix.tag_main }}\n-\n-            # will set tag like 'alpha-(ubuntu|alpine)', if inputs.tag is not empty\n-            type=raw,value=${{ inputs.tag }}-${{ matrix.flavor }},enable=${{ inputs.tag != 'false' }}\n-\n-            # will set tag like 'v0.12.0' for ubuntu build, if inputs.release_version is not empty\n-            # but will set the non-flavored tag only, if matrix.tag_main is true\n-            type=raw,value=${{ inputs.release_version }},enable=${{ matrix.tag_main && inputs.release_version != '' }}\n-\n-            # will set tag like 'v0.12.0-(ubuntu|alpine)', if inputs.release_version is not empty\n-            type=raw,value=${{ inputs.release_version }}-${{ matrix.flavor }},enable=${{ inputs.release_version != '' }}\n-\n-      #  build is broken based on platforms as load: true is not supported with multi-platform builds\n-      - if: ${{ hashFiles(format('{0}-{1}', matrix.dockerfile, inputs.build_type)) }}\n-        name: Build release image for amd64\n-        uses: docker/build-push-action@v6\n-        with:\n-          context: .\n-          platforms: linux/amd64\n-          build-args: |\n-            QEMU_CPU=max,pauth-impdef=on\n-          push: false\n-          tags: |\n-            ${{ steps.metadata.outputs.tags }}\n-          labels: ${{ steps.metadata.outputs.labels }}\n-          file: ${{ matrix.dockerfile }}-${{ inputs.build_type }}\n-          cache-from: type=gha\n-          cache-to: type=gha,mode=max\n-          # only load AMD64 image for testing\n-          load: true\n-\n-      - if: ${{ hashFiles(format('{0}-{1}', matrix.dockerfile, inputs.build_type)) }}\n-        name: Build release image for arm64\n-        uses: docker/build-push-action@v6\n-        with:\n-            context: .\n-            platforms: linux/arm64\n-            build-args: |\n-              QEMU_CPU=max,pauth-impdef=on\n-            push: false\n-            tags: |\n-              ${{ steps.metadata.outputs.tags }}\n-            labels: ${{ steps.metadata.outputs.labels }}\n-            file: ${{ matrix.dockerfile }}-${{ inputs.build_type }}\n-            cache-from: type=gha\n-            cache-to: type=gha,mode=max\n-\n-      - if: ${{ hashFiles(format('{0}-{1}', matrix.dockerfile, inputs.build_type)) }}\n-        name: Test Docker run\n-        run: |\n-          # docker run with port-forwarding\n-          # install redis-tools\n-          sudo apt-get install redis-tools -y\n-          tag=\"${{ steps.metadata.outputs.tags }}\"\n-          # use the first tag if multiple tags are provided\n-          if [[ $(echo \"${tag}\" | wc -l) -gt 1 ]]; then\n-            echo \"Multiple tags provided, using the first one\"\n-            tag=$(echo \"${tag}\" | head -n 1)\n-          fi\n-          echo \"Testing ${tag}\"\n-          docker run -d -p 6379:6379 ${tag}\n-          sleep 5\n-          # ping with redis-cli and expect PONG\n-          if [[ $(redis-cli -h localhost ping) != \"PONG\" ]]; then\n-            echo \"Redis ping failed\"\n-            exit 1\n-          else\n-            echo \"Redis ping succeeded\"\n-            exit 0\n-          fi\n-\n-      - if: ${{ hashFiles(format('{0}-{1}', matrix.dockerfile, inputs.build_type)) }}\n-        name: Push release image\n-        uses: docker/build-push-action@v6\n-        with:\n-          context: .\n-          platforms: linux/amd64,linux/arm64\n-          push: true\n-          build-args: |\n-            QEMU_CPU=max,pauth-impdef=on\n-          tags: |\n-            ${{ steps.metadata.outputs.tags }}\n-          labels: ${{ steps.metadata.outputs.labels }}\n-          file: ${{ matrix.dockerfile }}-${{ inputs.build_type }}\n-          cache-from: type=gha\n-          cache-to: type=gha,mode=max\ndiff --git a/tools/packaging/Dockerfile.ubuntu-prod b/tools/packaging/Dockerfile.ubuntu-prod\nindex 8eb8530f5c97..97d5fb661238 100644\n--- a/tools/packaging/Dockerfile.ubuntu-prod\n+++ b/tools/packaging/Dockerfile.ubuntu-prod\n@@ -1,5 +1,5 @@\n # syntax=docker/dockerfile:1\n-FROM ghcr.io/romange/ubuntu-dev:20 as builder\n+FROM ghcr.io/romange/ubuntu-dev:20 AS builder\n \n ARG TARGETPLATFORM\n \n",
  "test_patch": "diff --git a/.github/actions/test-docker/action.yml b/.github/actions/test-docker/action.yml\nnew file mode 100644\nindex 000000000000..b3df69e60529\n--- /dev/null\n+++ b/.github/actions/test-docker/action.yml\n@@ -0,0 +1,25 @@\n+name: Test Docker Image\n+\n+inputs:\n+  image_id:\n+    required: true\n+    type: string\n+  name:\n+    required: true\n+    type: string\n+\n+runs:\n+  using: \"composite\"\n+  steps:\n+    - name: Test Image\n+      shell: bash\n+      run: |\n+        echo \"Testing ${{ inputs.name }} image\"\n+        docker pull ${{inputs.image_id}}\n+        docker image inspect ${{inputs.image_id}}\n+\n+        # docker run with port-forwarding\n+        docker run  --name test -d -p 6379:6379 ${{inputs.image_id}}\n+        until [ \"`docker inspect -f {{.State.Health.Status}} test`\"==\"healthy\" ]; do\n+          sleep 0.1;\n+        done;\n",
  "problem_statement": "v1.27.1 docker image not published\n**Describe the bug**\nThe docker images for v1.27.1 are not available, looks like the [release job](https://github.com/dragonflydb/dragonfly/actions/runs/13283260213/job/37086140521) failed\n",
  "hints_text": "",
  "created_at": "2025-02-16T14:59:00Z",
  "modified_files": [
    ".github/workflows/docker-release.yml",
    "b/.github/workflows/docker-release2.yml",
    ".github/workflows/reusable-container-workflow.yaml",
    "tools/packaging/Dockerfile.ubuntu-prod"
  ],
  "modified_test_files": [
    "b/.github/actions/test-docker/action.yml"
  ]
}