You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Introduce active defragmentation
Following feedback from our customers - Dragonfly suffers from external fragmentation in some cases. 
This problem is common for any [slab allocator](https://en.wikipedia.org/wiki/Slab_allocation) like tcmalloc, jemalloc and mimalloc. 
Consider the following scenario:

1. an application allocates lots of "blocks" (from [mimalloc jargon](https://www.microsoft.com/en-us/research/uploads/prod/2019/06/mimalloc-tr-v1.pdf)) of size 384. Then the allocator mmaps (allocates from the OS) lots of slabs that handle blocks of size 384 and those slabs take up gigabytes of memory. This is a healthy situation because `usedmemory  ~= rss memory`.
2. Then the application frees the vast majority of blocks across all the slabs of size 384. Most slabs are "almost" free but the allocator can not return it to the OS because some blocks are still busy. 
3. As a result one can observe external fragmentation of the "unused" memory hidden in those slabs (or pages in mimalloc jargon).
see the graph below. This situation is problematic and this is what we need to fix.

I do not see any other solution besides active defragmentation, i.e. go over all the allocated items in the heap and grouping them together, thus compressing them in fewer slabs. Something similar is done by active-defrag in Redis using `je_get_defrag_hint` utility function.

We need to be smart about initial trigger conditions for the sweep and how we estimate the effectiveness of this defragmentation procedure in order not to introduce infinite loops.  

![image](https://user-images.githubusercontent.com/3674760/198889901-c402c418-ef16-49b7-b5b1-e89dcb74eb08.png)
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
