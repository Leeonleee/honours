{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 891,
  "instance_id": "dragonflydb__dragonfly-891",
  "issue_numbers": [
    "838"
  ],
  "base_commit": "2d3496dd4039ab5d93458aa1be3409b2d6cab73b",
  "patch": "diff --git a/src/server/zset_family.cc b/src/server/zset_family.cc\nindex a7272526563e..0cf891bb3691 100644\n--- a/src/server/zset_family.cc\n+++ b/src/server/zset_family.cc\n@@ -1599,12 +1599,15 @@ void ZSetFamily::ZScan(CmdArgList args, ConnectionContext* cntx) {\n     return (*cntx)->SendError(\"invalid cursor\");\n   }\n \n-  if (args.size() > 3) {\n-    return (*cntx)->SendError(\"scan options are not supported yet\");\n+  OpResult<ScanOpts> ops = ScanOpts::TryFrom(args.subspan(3));\n+  if (!ops) {\n+    DVLOG(1) << \"Scan invalid args - return \" << ops << \" to the user\";\n+    return (*cntx)->SendError(ops.status());\n   }\n+  ScanOpts scan_op = ops.value();\n \n   auto cb = [&](Transaction* t, EngineShard* shard) {\n-    return OpScan(t->GetOpArgs(shard), key, &cursor);\n+    return OpScan(t->GetOpArgs(shard), key, &cursor, scan_op);\n   };\n \n   OpResult<StringVec> result = cntx->transaction->ScheduleSingleHopT(std::move(cb));\n@@ -1783,7 +1786,7 @@ void ZSetFamily::ZPopMinMax(CmdArgList args, bool reverse, ConnectionContext* cn\n }\n \n OpResult<StringVec> ZSetFamily::OpScan(const OpArgs& op_args, std::string_view key,\n-                                       uint64_t* cursor) {\n+                                       uint64_t* cursor, const ScanOpts& scan_op) {\n   OpResult<PrimeIterator> find_res = op_args.shard->db_slice().Find(op_args.db_cntx, key, OBJ_ZSET);\n \n   if (!find_res)\n@@ -1796,22 +1799,24 @@ OpResult<StringVec> ZSetFamily::OpScan(const OpArgs& op_args, std::string_view k\n \n   if (zobj->encoding == OBJ_ENCODING_LISTPACK) {\n     RangeParams params;\n+    params.with_scores = true;\n     IntervalVisitor iv{Action::RANGE, params, zobj};\n \n     iv(IndexInterval{0, kuint32max});\n     ScoredArray arr = iv.PopResult();\n-    res.resize(arr.size() * 2);\n \n     for (size_t i = 0; i < arr.size(); ++i) {\n+      if (!scan_op.Matches(arr[i].first)) {\n+        continue;\n+      }\n+      res.emplace_back(std::move(arr[i].first));\n       char* str = RedisReplyBuilder::FormatDouble(arr[i].second, buf, sizeof(buf));\n-\n-      res[2 * i] = std::move(arr[i].first);\n-      res[2 * i + 1].assign(str);\n+      res.emplace_back(str);\n     }\n     *cursor = 0;\n   } else {\n     CHECK_EQ(unsigned(OBJ_ENCODING_SKIPLIST), zobj->encoding);\n-    uint32_t count = 20;\n+    uint32_t count = scan_op.limit;\n     zset* zs = (zset*)zobj->ptr;\n \n     dict* ht = zs->dict;\n@@ -1820,12 +1825,17 @@ OpResult<StringVec> ZSetFamily::OpScan(const OpArgs& op_args, std::string_view k\n     struct ScanArgs {\n       char* sbuf;\n       StringVec* res;\n-    } sargs = {buf, &res};\n+      const ScanOpts* scan_op;\n+    } sargs = {buf, &res, &scan_op};\n \n     auto scanCb = [](void* privdata, const dictEntry* de) {\n       ScanArgs* sargs = (ScanArgs*)privdata;\n \n       sds key = (sds)de->key;\n+      if (!sargs->scan_op->Matches(key)) {\n+        return;\n+      }\n+\n       double score = *(double*)dictGetVal(de);\n \n       sargs->res->emplace_back(key, sdslen(key));\ndiff --git a/src/server/zset_family.h b/src/server/zset_family.h\nindex 4012a3d6a343..765262498b94 100644\n--- a/src/server/zset_family.h\n+++ b/src/server/zset_family.h\n@@ -91,7 +91,8 @@ class ZSetFamily {\n   static void ZRankGeneric(CmdArgList args, bool reverse, ConnectionContext* cntx);\n   static bool ParseRangeByScoreParams(CmdArgList args, RangeParams* params);\n   static void ZPopMinMax(CmdArgList args, bool reverse, ConnectionContext* cntx);\n-  static OpResult<StringVec> OpScan(const OpArgs& op_args, std::string_view key, uint64_t* cursor);\n+  static OpResult<StringVec> OpScan(const OpArgs& op_args, std::string_view key, uint64_t* cursor,\n+                                    const ScanOpts& scan_op);\n \n   static OpResult<unsigned> OpRem(const OpArgs& op_args, std::string_view key, ArgSlice members);\n   static OpResult<double> OpScore(const OpArgs& op_args, std::string_view key,\n",
  "test_patch": "diff --git a/src/server/zset_family_test.cc b/src/server/zset_family_test.cc\nindex 964a006185af..06dbb0fa760c 100644\n--- a/src/server/zset_family_test.cc\n+++ b/src/server/zset_family_test.cc\n@@ -270,6 +270,19 @@ TEST_F(ZSetFamilyTest, ZScan) {\n   } while (cursor != 0);\n \n   EXPECT_EQ(100 * 2, scan_len);\n+\n+  // Check scan with count and match params\n+  scan_len = 0;\n+  do {\n+    auto resp = Run({\"zscan\", \"key\", absl::StrCat(cursor), \"count\", \"5\", \"match\", \"*0\"});\n+    ASSERT_THAT(resp, ArgType(RespExpr::ARRAY));\n+    ASSERT_THAT(resp.GetVec(), ElementsAre(ArgType(RespExpr::STRING), ArgType(RespExpr::ARRAY)));\n+    string_view token = ToSV(resp.GetVec()[0].GetBuf());\n+    ASSERT_TRUE(absl::SimpleAtoi(token, &cursor));\n+    auto sub_arr = resp.GetVec()[1].GetVec();\n+    scan_len += sub_arr.size();\n+  } while (cursor != 0);\n+  EXPECT_EQ(10 * 2, scan_len);  // expected members a0,a10,a20..,a90\n }\n \n TEST_F(ZSetFamilyTest, ZUnionError) {\n",
  "problem_statement": "Support ZSCAN options\nSee https://redis.io/commands/zscan/\r\n\r\nCurrently Dragonfly doesn't support any option\n",
  "hints_text": "/assign",
  "created_at": "2023-03-01T10:02:49Z",
  "modified_files": [
    "src/server/zset_family.cc",
    "src/server/zset_family.h"
  ],
  "modified_test_files": [
    "src/server/zset_family_test.cc"
  ]
}