diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc
index 4c370f1c0fb2..c20e9f5d07c0 100644
--- a/src/server/dragonfly_test.cc
+++ b/src/server/dragonfly_test.cc
@@ -195,7 +195,10 @@ TEST_F(DflyEngineTest, MultiWeirdCommands) {
 }
 
 TEST_F(DflyEngineTest, MultiRename) {
-  RespExpr resp = Run({"multi"});
+  RespExpr resp = Run({"mget", kKey1, kKey4});
+  ASSERT_EQ(1, GetDebugInfo().shards_count);
+
+  resp = Run({"multi"});
   ASSERT_EQ(resp, "OK");
   Run({"set", kKey1, "1"});
 
@@ -205,9 +208,21 @@ TEST_F(DflyEngineTest, MultiRename) {
 
   ASSERT_THAT(resp, ArrLen(2));
   EXPECT_THAT(resp.GetVec(), ElementsAre("OK", "OK"));
-  ASSERT_FALSE(service_->IsLocked(0, kKey1));
-  ASSERT_FALSE(service_->IsLocked(0, kKey4));
-  ASSERT_FALSE(service_->IsShardSetLocked());
+
+  // Now rename with keys spawning multiple shards.
+  Run({"mget", kKey4, kKey2});
+  ASSERT_EQ(2, GetDebugInfo().shards_count);
+
+  Run({"multi"});
+  resp = Run({"rename", kKey4, kKey2});
+  ASSERT_EQ(resp, "QUEUED");
+  resp = Run({"exec"});
+  EXPECT_EQ(resp, "OK");
+
+  EXPECT_FALSE(service_->IsLocked(0, kKey1));
+  EXPECT_FALSE(service_->IsLocked(0, kKey2));
+  EXPECT_FALSE(service_->IsLocked(0, kKey4));
+  EXPECT_FALSE(service_->IsShardSetLocked());
 }
 
 TEST_F(DflyEngineTest, MultiHop) {
@@ -264,7 +279,9 @@ TEST_F(DflyEngineTest, FlushDb) {
 }
 
 TEST_F(DflyEngineTest, Eval) {
-  auto resp = Run({"incrby", "foo", "42"});
+  RespExpr resp;
+
+  resp = Run({"incrby", "foo", "42"});
   EXPECT_THAT(resp, IntArg(42));
 
   resp = Run({"eval", "return redis.call('get', 'foo')", "0"});
@@ -277,6 +294,7 @@ TEST_F(DflyEngineTest, Eval) {
 
   resp = Run({"eval", "return redis.call('get', 'foo')", "1", "foo"});
   EXPECT_THAT(resp, "42");
+  ASSERT_FALSE(service_->IsLocked(0, "foo"));
 
   resp = Run({"eval", "return redis.call('get', KEYS[1])", "1", "foo"});
   EXPECT_THAT(resp, "42");
@@ -670,6 +688,22 @@ TEST_F(DflyEngineTest, Watch) {
   ASSERT_THAT(Run({"exec"}), kExecSuccess);
 }
 
+TEST_F(DflyEngineTest, Bug468) {
+  RespExpr resp = Run({"multi"});
+  ASSERT_EQ(resp, "OK");
+  resp = Run({"SET", "foo", "bar", "EX", "moo"});
+  ASSERT_EQ(resp, "QUEUED");
+
+  resp = Run({"exec"});
+  ASSERT_THAT(resp, ErrArg("not an integer"));
+  ASSERT_FALSE(service_->IsLocked(0, "foo"));
+
+  resp = Run({"eval", "return redis.call('set', 'foo', 'bar', 'EX', 'moo')", "1", "foo"});
+  ASSERT_THAT(resp, ErrArg("not an integer"));
+
+  ASSERT_FALSE(service_->IsLocked(0, "foo"));
+}
+
 // TODO: to test transactions with a single shard since then all transactions become local.
 // To consider having a parameter in dragonfly engine controlling number of shards
 // unconditionally from number of cpus. TO TEST BLPOP under multi for single/multi argument case.
