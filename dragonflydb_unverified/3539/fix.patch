diff --git a/src/server/db_slice.cc b/src/server/db_slice.cc
index 6f6b74b955f1..5d7db9d38dba 100644
--- a/src/server/db_slice.cc
+++ b/src/server/db_slice.cc
@@ -8,6 +8,7 @@
 
 #include "base/flags.h"
 #include "base/logging.h"
+#include "search/doc_index.h"
 #include "server/channel_store.h"
 #include "server/cluster/cluster_defs.h"
 #include "server/engine_shard_set.h"
@@ -789,6 +790,10 @@ void DbSlice::FlushDbIndexes(const std::vector<DbIndex>& indexes) {
   DbTableArray flush_db_arr(db_arr_.size());
 
   for (DbIndex index : indexes) {
+    if (!index) {
+      owner_->search_indices()->DropAllIndices();
+    }
+
     table_memory_ -= db_arr_[index]->table_memory();
     entries_count_ -= db_arr_[index]->prime.size();
 
diff --git a/src/server/rdb_load.cc b/src/server/rdb_load.cc
index 4f497c85d12d..bdc071dc0f06 100644
--- a/src/server/rdb_load.cc
+++ b/src/server/rdb_load.cc
@@ -2641,17 +2641,6 @@ void RdbLoader::LoadSearchIndexDefFromAux(string&& def) {
   }
 }
 
-void RdbLoader::PerformPreLoad(Service* service) {
-  const CommandId* cmd = service->FindCmd("FT.DROPINDEX");
-  if (cmd == nullptr)
-    return;  // MacOS
-
-  shard_set->AwaitRunningOnShardQueue([](EngineShard* es) {
-    for (const auto& name : es->search_indices()->GetIndexNames())
-      es->search_indices()->DropIndex(name);
-  });
-}
-
 void RdbLoader::PerformPostLoad(Service* service) {
   const CommandId* cmd = service->FindCmd("FT.CREATE");
   if (cmd == nullptr)  // On MacOS we don't include search so FT.CREATE won't exist.
diff --git a/src/server/rdb_load.h b/src/server/rdb_load.h
index 811c4925e865..86d4f630714e 100644
--- a/src/server/rdb_load.h
+++ b/src/server/rdb_load.h
@@ -233,9 +233,6 @@ class RdbLoader : protected RdbLoaderBase {
     full_sync_cut_cb = std::move(cb);
   }
 
-  // Perform pre load procedures after transitioning into the global LOADING state.
-  static void PerformPreLoad(Service* service);
-
   // Performs post load procedures while still remaining in global LOADING state.
   // Called once immediately after loading the snapshot / full sync succeeded from the coordinator.
   static void PerformPostLoad(Service* service);
diff --git a/src/server/replica.cc b/src/server/replica.cc
index 426df939af8f..609e95160bf1 100644
--- a/src/server/replica.cc
+++ b/src/server/replica.cc
@@ -546,7 +546,6 @@ error_code Replica::InitiateDflySync() {
       } else {
         JournalExecutor{&service_}.FlushAll();
       }
-      RdbLoader::PerformPreLoad(&service_);
     } else if (num_full_flows == 0) {
       sync_type = "partial";
     } else {
diff --git a/src/server/search/doc_index.cc b/src/server/search/doc_index.cc
index cb7a4e548ec5..8e6d366f980a 100644
--- a/src/server/search/doc_index.cc
+++ b/src/server/search/doc_index.cc
@@ -322,15 +322,25 @@ bool ShardDocIndices::DropIndex(string_view name) {
   if (it == indices_.end())
     return false;
 
-  // Clean caches that might have data from this index
-  auto info = it->second->GetInfo();
-  for (const auto& [fident, field] : info.base_index.schema.fields)
-    JsonAccessor::RemoveFieldFromCache(fident);
-
+  DropIndexCache(*it->second);
   indices_.erase(it);
+
   return true;
 }
 
+void ShardDocIndices::DropAllIndices() {
+  for (auto it = indices_.begin(); it != indices_.end(); it++) {
+    DropIndexCache(*it->second);
+  }
+  indices_.clear();
+}
+
+void ShardDocIndices::DropIndexCache(const dfly::ShardDocIndex& shard_doc_index) {
+  auto info = shard_doc_index.GetInfo();
+  for (const auto& [fident, field] : info.base_index.schema.fields)
+    JsonAccessor::RemoveFieldFromCache(fident);
+}
+
 void ShardDocIndices::RebuildAllIndices(const OpArgs& op_args) {
   for (auto& [_, ptr] : indices_)
     ptr->Rebuild(op_args, &local_mr_);
diff --git a/src/server/search/doc_index.h b/src/server/search/doc_index.h
index f0fd6f421dc4..b0a45e614e8e 100644
--- a/src/server/search/doc_index.h
+++ b/src/server/search/doc_index.h
@@ -166,6 +166,9 @@ class ShardDocIndices {
   // Drop index, return true if it existed and was dropped
   bool DropIndex(std::string_view name);
 
+  // Drop all indices
+  void DropAllIndices();
+
   // Rebuild all indices
   void RebuildAllIndices(const OpArgs& op_args);
 
@@ -176,6 +179,9 @@ class ShardDocIndices {
 
   size_t GetUsedMemory() const;
   SearchStats GetStats() const;  // combines stats for all indices
+ private:
+  // Clean caches that might have data from this index
+  void DropIndexCache(const dfly::ShardDocIndex& shard_doc_index);
 
  private:
   MiMemoryResource local_mr_;
diff --git a/src/server/server_family.cc b/src/server/server_family.cc
index bd217862d1f1..56e48c591a13 100644
--- a/src/server/server_family.cc
+++ b/src/server/server_family.cc
@@ -1002,8 +1002,6 @@ std::optional<fb2::Future<GenericError>> ServerFamily::Load(string_view load_pat
     return {};
   }
 
-  RdbLoader::PerformPreLoad(&service_);
-
   auto& pool = service_.proactor_pool();
 
   vector<fb2::Fiber> load_fibers;
