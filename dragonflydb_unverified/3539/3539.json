{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 3539,
  "instance_id": "dragonflydb__dragonfly-3539",
  "issue_numbers": [
    "3532"
  ],
  "base_commit": "24b8d3294b7ba135941c2838482726769aaac70b",
  "patch": "diff --git a/src/server/db_slice.cc b/src/server/db_slice.cc\nindex 6f6b74b955f1..5d7db9d38dba 100644\n--- a/src/server/db_slice.cc\n+++ b/src/server/db_slice.cc\n@@ -8,6 +8,7 @@\n \n #include \"base/flags.h\"\n #include \"base/logging.h\"\n+#include \"search/doc_index.h\"\n #include \"server/channel_store.h\"\n #include \"server/cluster/cluster_defs.h\"\n #include \"server/engine_shard_set.h\"\n@@ -789,6 +790,10 @@ void DbSlice::FlushDbIndexes(const std::vector<DbIndex>& indexes) {\n   DbTableArray flush_db_arr(db_arr_.size());\n \n   for (DbIndex index : indexes) {\n+    if (!index) {\n+      owner_->search_indices()->DropAllIndices();\n+    }\n+\n     table_memory_ -= db_arr_[index]->table_memory();\n     entries_count_ -= db_arr_[index]->prime.size();\n \ndiff --git a/src/server/rdb_load.cc b/src/server/rdb_load.cc\nindex 4f497c85d12d..bdc071dc0f06 100644\n--- a/src/server/rdb_load.cc\n+++ b/src/server/rdb_load.cc\n@@ -2641,17 +2641,6 @@ void RdbLoader::LoadSearchIndexDefFromAux(string&& def) {\n   }\n }\n \n-void RdbLoader::PerformPreLoad(Service* service) {\n-  const CommandId* cmd = service->FindCmd(\"FT.DROPINDEX\");\n-  if (cmd == nullptr)\n-    return;  // MacOS\n-\n-  shard_set->AwaitRunningOnShardQueue([](EngineShard* es) {\n-    for (const auto& name : es->search_indices()->GetIndexNames())\n-      es->search_indices()->DropIndex(name);\n-  });\n-}\n-\n void RdbLoader::PerformPostLoad(Service* service) {\n   const CommandId* cmd = service->FindCmd(\"FT.CREATE\");\n   if (cmd == nullptr)  // On MacOS we don't include search so FT.CREATE won't exist.\ndiff --git a/src/server/rdb_load.h b/src/server/rdb_load.h\nindex 811c4925e865..86d4f630714e 100644\n--- a/src/server/rdb_load.h\n+++ b/src/server/rdb_load.h\n@@ -233,9 +233,6 @@ class RdbLoader : protected RdbLoaderBase {\n     full_sync_cut_cb = std::move(cb);\n   }\n \n-  // Perform pre load procedures after transitioning into the global LOADING state.\n-  static void PerformPreLoad(Service* service);\n-\n   // Performs post load procedures while still remaining in global LOADING state.\n   // Called once immediately after loading the snapshot / full sync succeeded from the coordinator.\n   static void PerformPostLoad(Service* service);\ndiff --git a/src/server/replica.cc b/src/server/replica.cc\nindex 426df939af8f..609e95160bf1 100644\n--- a/src/server/replica.cc\n+++ b/src/server/replica.cc\n@@ -546,7 +546,6 @@ error_code Replica::InitiateDflySync() {\n       } else {\n         JournalExecutor{&service_}.FlushAll();\n       }\n-      RdbLoader::PerformPreLoad(&service_);\n     } else if (num_full_flows == 0) {\n       sync_type = \"partial\";\n     } else {\ndiff --git a/src/server/search/doc_index.cc b/src/server/search/doc_index.cc\nindex cb7a4e548ec5..8e6d366f980a 100644\n--- a/src/server/search/doc_index.cc\n+++ b/src/server/search/doc_index.cc\n@@ -322,15 +322,25 @@ bool ShardDocIndices::DropIndex(string_view name) {\n   if (it == indices_.end())\n     return false;\n \n-  // Clean caches that might have data from this index\n-  auto info = it->second->GetInfo();\n-  for (const auto& [fident, field] : info.base_index.schema.fields)\n-    JsonAccessor::RemoveFieldFromCache(fident);\n-\n+  DropIndexCache(*it->second);\n   indices_.erase(it);\n+\n   return true;\n }\n \n+void ShardDocIndices::DropAllIndices() {\n+  for (auto it = indices_.begin(); it != indices_.end(); it++) {\n+    DropIndexCache(*it->second);\n+  }\n+  indices_.clear();\n+}\n+\n+void ShardDocIndices::DropIndexCache(const dfly::ShardDocIndex& shard_doc_index) {\n+  auto info = shard_doc_index.GetInfo();\n+  for (const auto& [fident, field] : info.base_index.schema.fields)\n+    JsonAccessor::RemoveFieldFromCache(fident);\n+}\n+\n void ShardDocIndices::RebuildAllIndices(const OpArgs& op_args) {\n   for (auto& [_, ptr] : indices_)\n     ptr->Rebuild(op_args, &local_mr_);\ndiff --git a/src/server/search/doc_index.h b/src/server/search/doc_index.h\nindex f0fd6f421dc4..b0a45e614e8e 100644\n--- a/src/server/search/doc_index.h\n+++ b/src/server/search/doc_index.h\n@@ -166,6 +166,9 @@ class ShardDocIndices {\n   // Drop index, return true if it existed and was dropped\n   bool DropIndex(std::string_view name);\n \n+  // Drop all indices\n+  void DropAllIndices();\n+\n   // Rebuild all indices\n   void RebuildAllIndices(const OpArgs& op_args);\n \n@@ -176,6 +179,9 @@ class ShardDocIndices {\n \n   size_t GetUsedMemory() const;\n   SearchStats GetStats() const;  // combines stats for all indices\n+ private:\n+  // Clean caches that might have data from this index\n+  void DropIndexCache(const dfly::ShardDocIndex& shard_doc_index);\n \n  private:\n   MiMemoryResource local_mr_;\ndiff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex bd217862d1f1..56e48c591a13 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -1002,8 +1002,6 @@ std::optional<fb2::Future<GenericError>> ServerFamily::Load(string_view load_pat\n     return {};\n   }\n \n-  RdbLoader::PerformPreLoad(&service_);\n-\n   auto& pool = service_.proactor_pool();\n \n   vector<fb2::Fiber> load_fibers;\n",
  "test_patch": "diff --git a/src/server/search/search_family_test.cc b/src/server/search/search_family_test.cc\nindex 8e52781e6101..6ca38c5c6c78 100644\n--- a/src/server/search/search_family_test.cc\n+++ b/src/server/search/search_family_test.cc\n@@ -795,4 +795,33 @@ TEST_F(SearchFamilyTest, EscapedSymbols) {\n   EXPECT_THAT(Run({\"ft.search\", \"i1\", \"@color:{blue}\"}), kNoResults);\n }\n \n+TEST_F(SearchFamilyTest, FlushSearchIndices) {\n+  auto resp =\n+      Run({\"FT.CREATE\", \"json\", \"ON\", \"JSON\", \"SCHEMA\", \"$.nested.value\", \"AS\", \"value\", \"TEXT\"});\n+  EXPECT_EQ(resp, \"OK\");\n+\n+  EXPECT_EQ(Run({\"FLUSHALL\"}), \"OK\");\n+\n+  // Test that the index was removed\n+  resp = Run({\"FT.CREATE\", \"json\", \"ON\", \"JSON\", \"SCHEMA\", \"$.another.nested.value\", \"AS\", \"value\",\n+              \"TEXT\"});\n+  EXPECT_EQ(resp, \"OK\");\n+\n+  EXPECT_EQ(Run({\"FLUSHDB\"}), \"OK\");\n+\n+  // Test that the index was removed\n+  resp = Run({\"FT.CREATE\", \"json\", \"ON\", \"JSON\", \"SCHEMA\", \"$.another.nested.value\", \"AS\", \"value\",\n+              \"TEXT\"});\n+  EXPECT_EQ(resp, \"OK\");\n+\n+  EXPECT_EQ(Run({\"select\", \"1\"}), \"OK\");\n+  EXPECT_EQ(Run({\"FLUSHDB\"}), \"OK\");\n+  EXPECT_EQ(Run({\"select\", \"0\"}), \"OK\");\n+\n+  // Test that index was not removed\n+  resp = Run({\"FT.CREATE\", \"json\", \"ON\", \"JSON\", \"SCHEMA\", \"$.another.nested.value\", \"AS\", \"value\",\n+              \"TEXT\"});\n+  EXPECT_THAT(resp, ErrArg(\"ERR Index already exists\"));\n+}\n+\n }  // namespace dfly\n",
  "problem_statement": "FLUSHALL command does not remove indexes \n`FLUSHALL` command does not remove indexes. \r\n\r\n\r\n**Reproducible Code Snippet**\r\n```bash\r\n127.0.0.1:6379> FT.CREATE json ON JSON SCHEMA $.nested.value AS value TEXT\r\nOK\r\n127.0.0.1:6379> flushall\r\nOK\r\n127.0.0.1:6379> FT.CREATE json ON JSON SCHEMA $.nested.anothervalue AS value TEXT\r\n(error) ERR Index already exists\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2024-08-21T12:17:04Z",
  "modified_files": [
    "src/server/db_slice.cc",
    "src/server/rdb_load.cc",
    "src/server/rdb_load.h",
    "src/server/replica.cc",
    "src/server/search/doc_index.cc",
    "src/server/search/doc_index.h",
    "src/server/server_family.cc"
  ],
  "modified_test_files": [
    "src/server/search/search_family_test.cc"
  ]
}