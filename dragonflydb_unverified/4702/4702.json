{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4702,
  "instance_id": "dragonflydb__dragonfly-4702",
  "issue_numbers": [
    "847"
  ],
  "base_commit": "5f2dbb71a2efb4da97215fbb483d74b97a071a73",
  "patch": "diff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex 12dfb5196789..bd902c98813b 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -2337,14 +2337,12 @@ void Service::PubsubChannels(string_view pattern, SinkReplyBuilder* builder) {\n \n void Service::PubsubPatterns(SinkReplyBuilder* builder) {\n   size_t pattern_count = ServerState::tlocal()->channel_store()->PatternCount();\n-\n   builder->SendLong(pattern_count);\n }\n \n void Service::PubsubNumSub(CmdArgList args, SinkReplyBuilder* builder) {\n   auto* rb = static_cast<RedisReplyBuilder*>(builder);\n   rb->StartArray(args.size() * 2);\n-\n   for (string_view channel : args) {\n     rb->SendBulkString(channel);\n     rb->SendLong(ServerState::tlocal()->channel_store()->FetchSubscribers(channel).size());\n@@ -2362,9 +2360,6 @@ void Service::Monitor(CmdArgList args, const CommandContext& cmd_cntx) {\n void Service::Pubsub(CmdArgList args, const CommandContext& cmd_cntx) {\n   auto* rb = static_cast<RedisReplyBuilder*>(cmd_cntx.rb);\n \n-  if (IsClusterEnabled()) {\n-    return rb->SendError(\"PUBSUB is not supported in cluster mode yet\");\n-  }\n   if (args.size() < 1) {\n     rb->SendError(WrongNumArgsError(cmd_cntx.conn_cntx->cid->name()));\n     return;\n@@ -2382,6 +2377,12 @@ void Service::Pubsub(CmdArgList args, const CommandContext& cmd_cntx) {\n         \"NUMSUB [<channel> <channel...>]\",\n         \"\\tReturns the number of subscribers for the specified channels, excluding\",\n         \"\\tpattern subscriptions.\",\n+        \"SHARDCHANNELS [pattern]\",\n+        \"\\tReturns a list of active shard channels, optionally matching the specified pattern \",\n+        \"(default: '*').\",\n+        \"SHARDNUMSUB [<channel> <channel...>]\",\n+        \"\\tReturns the number of subscribers for the specified shard channels, excluding\",\n+        \"\\tpattern subscriptions.\",\n         \"HELP\",\n         \"\\tPrints this help.\"};\n \n@@ -2389,16 +2390,21 @@ void Service::Pubsub(CmdArgList args, const CommandContext& cmd_cntx) {\n     return;\n   }\n \n-  if (subcmd == \"CHANNELS\") {\n+  // Don't allow SHARD subcommands in non cluster mode\n+  if (!IsClusterEnabledOrEmulated() && ((subcmd == \"SHARDCHANNELS\") || (subcmd == \"SHARDNUMSUB\"))) {\n+    auto err = absl::StrCat(\"PUBSUB \", subcmd, \" is not supported in non cluster mode\");\n+    return rb->SendError(err);\n+  }\n+\n+  if (subcmd == \"CHANNELS\" || subcmd == \"SHARDCHANNELS\") {\n     string_view pattern;\n     if (args.size() > 1) {\n       pattern = ArgS(args, 1);\n     }\n-\n     PubsubChannels(pattern, rb);\n   } else if (subcmd == \"NUMPAT\") {\n     PubsubPatterns(rb);\n-  } else if (subcmd == \"NUMSUB\") {\n+  } else if (subcmd == \"NUMSUB\" || subcmd == \"SHARDNUMSUB\") {\n     args.remove_prefix(1);\n     PubsubNumSub(args, rb);\n   } else {\n",
  "test_patch": "diff --git a/src/server/cluster/cluster_family_test.cc b/src/server/cluster/cluster_family_test.cc\nindex 315cfe1a5d27..69cef1a6803b 100644\n--- a/src/server/cluster/cluster_family_test.cc\n+++ b/src/server/cluster/cluster_family_test.cc\n@@ -625,7 +625,6 @@ TEST_F(ClusterFamilyTest, ClusterModePubSubNotAllowed) {\n               ErrArg(\"PSUBSCRIBE is not supported in cluster mode yet\"));\n   EXPECT_THAT(Run({\"PUNSUBSCRIBE\", \"ch?\"}),\n               ErrArg(\"PUNSUBSCRIBE is not supported in cluster mode yet\"));\n-  EXPECT_THAT(Run({\"PUBSUB\", \"CHANNELS\"}), ErrArg(\"PUBSUB is not supported in cluster mode yet\"));\n }\n \n TEST_F(ClusterFamilyTest, ClusterFirstConfigCallDropsEntriesNotOwnedByNode) {\ndiff --git a/src/server/server_family_test.cc b/src/server/server_family_test.cc\nindex 613341fcce47..d0e59ba6452e 100644\n--- a/src/server/server_family_test.cc\n+++ b/src/server/server_family_test.cc\n@@ -7,6 +7,7 @@\n #include <absl/strings/match.h>\n \n #include \"absl/strings/str_cat.h\"\n+#include \"base/flags.h\"\n #include \"base/gtest.h\"\n #include \"base/logging.h\"\n #include \"facade/facade_test.h\"\n@@ -17,6 +18,8 @@ using namespace std;\n using namespace util;\n using namespace boost;\n \n+ABSL_DECLARE_FLAG(string, cluster_mode);\n+\n namespace dfly {\n \n class ServerFamilyTest : public BaseFamilyTest {\n@@ -547,4 +550,17 @@ TEST_F(ServerFamilyTest, CommandDocsOk) {\n   EXPECT_THAT(Run({\"command\", \"docs\"}), \"OK\");\n }\n \n+TEST_F(ServerFamilyTest, PubSubCommandErr) {\n+  // Check conditions only in non cluster mode\n+  if (auto cluster_mode = absl::GetFlag(FLAGS_cluster_mode); cluster_mode == \"\") {\n+    EXPECT_THAT(Run({\"PUBSUB\", \"SHARDCHANNELS\"}),\n+                ErrArg(\"PUBSUB SHARDCHANNELS is not supported in non cluster mode\"));\n+    EXPECT_THAT(Run({\"PUBSUB\", \"SHARDNUMSUB\"}),\n+                ErrArg(\"PUBSUB SHARDNUMSUB is not supported in non cluster mode\"));\n+  }\n+  EXPECT_THAT(Run({\"PUBSUB\", \"INVALIDSUBCOMMAND\"}),\n+              ErrArg(\"Unknown subcommand or wrong number of arguments for 'INVALIDSUBCOMMAND'. Try \"\n+                     \"PUBSUB HELP.\"));\n+}\n+\n }  // namespace dfly\ndiff --git a/tests/dragonfly/cluster_test.py b/tests/dragonfly/cluster_test.py\nindex 615208840bc0..9c288da84410 100644\n--- a/tests/dragonfly/cluster_test.py\n+++ b/tests/dragonfly/cluster_test.py\n@@ -2982,6 +2982,51 @@ async def test_cluster_sharded_pub_sub(df_factory: DflyInstanceFactory):\n     assert message == {\"type\": \"unsubscribe\", \"pattern\": None, \"channel\": b\"kostas\", \"data\": 0}\n \n \n+@dfly_args({\"proactor_threads\": 2, \"cluster_mode\": \"yes\"})\n+async def test_cluster_sharded_pubsub_shard_commands(df_factory: DflyInstanceFactory):\n+    nodes = [df_factory.create(port=next(next_port)) for i in range(2)]\n+    df_factory.start_all(nodes)\n+\n+    c_nodes = [node.client() for node in nodes]\n+\n+    nodes_info = [(await create_node_info(instance)) for instance in nodes]\n+    nodes_info[0].slots = [(0, 16383)]\n+    nodes_info[1].slots = []\n+\n+    await push_config(json.dumps(generate_config(nodes_info)), [node.client for node in nodes_info])\n+\n+    node_a = ClusterNode(\"localhost\", nodes[0].port)\n+    node_b = ClusterNode(\"localhost\", nodes[1].port)\n+\n+    consumer_client = RedisCluster(startup_nodes=[node_a, node_b])\n+    consumer = consumer_client.pubsub()\n+\n+    consumer.ssubscribe(\"pubsub-shard-channel\")\n+    consumer.ssubscribe(\"shard-channel\")\n+\n+    message = await c_nodes[0].execute_command(\"PUBSUB SHARDCHANNELS\")\n+    message.sort()\n+    assert message == [\"pubsub-shard-channel\", \"shard-channel\"]\n+\n+    message = await c_nodes[0].execute_command(\"PUBSUB SHARDCHANNELS pubsub*\")\n+    assert message == [\"pubsub-shard-channel\"]\n+\n+    message = await c_nodes[0].execute_command(\"PUBSUB SHARDCHANNELS *channel\")\n+    message.sort()\n+    assert message == [\"pubsub-shard-channel\", \"shard-channel\"]\n+\n+    message = await c_nodes[0].execute_command(\"PUBSUB SHARDNUMSUB pubsub-shard-channel\")\n+    assert message == [\"pubsub-shard-channel\", 1]\n+\n+    message = await c_nodes[0].execute_command(\n+        \"PUBSUB SHARDNUMSUB pubsub-shard-channel shard-channel\"\n+    )\n+    assert message == [\"pubsub-shard-channel\", 1, \"shard-channel\", 1]\n+\n+    message = await c_nodes[0].execute_command(\"PUBSUB SHARDNUMSUB\")\n+    assert message == []\n+\n+\n @dfly_args({\"proactor_threads\": 2, \"cluster_mode\": \"yes\"})\n async def test_cluster_migration_errors_num(df_factory: DflyInstanceFactory):\n     # create cluster with several nodes and create migrations from one node to others\n",
  "problem_statement": "Additional PUBSUB options\nCurrently, following options for `PUBSUB` are supported:\r\n- `HELP`\r\n- `CHANNELS`\r\n- `NUMPAT`\r\n\r\n**Options not supported currently** (and are present in the docs)\r\n- `NUMSUB`\r\n- `SHARDCHANNELS`\r\n- `SHARDNUMSUB`\n",
  "hints_text": "",
  "created_at": "2025-03-05T08:14:30Z",
  "modified_files": [
    "src/server/main_service.cc"
  ],
  "modified_test_files": [
    "src/server/cluster/cluster_family_test.cc",
    "src/server/server_family_test.cc",
    "tests/dragonfly/cluster_test.py"
  ]
}