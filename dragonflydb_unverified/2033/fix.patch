diff --git a/helio b/helio
index 2d447ea39da7..3586e6b03fd1 160000
--- a/helio
+++ b/helio
@@ -1,1 +1,1 @@
-Subproject commit 2d447ea39da78d0ec0003e812c306f2846e8e727
+Subproject commit 3586e6b03fd10893bc0980104d8d5ebf03cd5c88
diff --git a/src/facade/dragonfly_connection.cc b/src/facade/dragonfly_connection.cc
index 4488aad9de0e..7681bf8352c6 100644
--- a/src/facade/dragonfly_connection.cc
+++ b/src/facade/dragonfly_connection.cc
@@ -336,12 +336,13 @@ void Connection::UnregisterShutdownHook(ShutdownHandle id) {
 void Connection::HandleRequests() {
   ThisFiber::SetName("DflyConnection");
 
-  if (absl::GetFlag(FLAGS_tcp_nodelay)) {
+  if (absl::GetFlag(FLAGS_tcp_nodelay) && !socket_->IsUDS()) {
     int val = 1;
-    CHECK_EQ(0, setsockopt(socket_->native_handle(), IPPROTO_TCP, TCP_NODELAY, &val, sizeof(val)));
+    int res = setsockopt(socket_->native_handle(), IPPROTO_TCP, TCP_NODELAY, &val, sizeof(val));
+    DCHECK_EQ(res, 0);
   }
 
-  auto remote_ep = socket_->RemoteEndpoint();
+  auto remote_ep = RemoteEndpointStr();
 
   FiberSocketBase* peer = socket_.get();
 #ifdef DFLY_USE_SSL
@@ -402,18 +403,13 @@ void Connection::RegisterBreakHook(BreakerCb breaker_cb) {
   breaker_cb_ = breaker_cb;
 }
 
-std::string Connection::LocalBindAddress() const {
-  auto le = socket_->LocalEndpoint();
-  return le.address().to_string();
-}
-
 std::pair<std::string, std::string> Connection::GetClientInfoBeforeAfterTid() const {
   CHECK(service_ && socket_);
   CHECK_LT(unsigned(phase_), NUM_PHASES);
 
   string before;
-  auto le = socket_->LocalEndpoint();
-  auto re = socket_->RemoteEndpoint();
+  auto le = LocalBindStr();
+  auto re = RemoteEndpointStr();
   time_t now = time(nullptr);
 
   int cpu = 0;
@@ -429,8 +425,7 @@ std::pair<std::string, std::string> Connection::GetClientInfoBeforeAfterTid() co
   static constexpr string_view PHASE_NAMES[] = {"setup", "readsock", "process"};
   static_assert(PHASE_NAMES[PROCESS] == "process");
 
-  absl::StrAppend(&before, "id=", id_, " addr=", re.address().to_string(), ":", re.port());
-  absl::StrAppend(&before, " laddr=", le.address().to_string(), ":", le.port());
+  absl::StrAppend(&before, "id=", id_, " addr=", re, " laddr=", le);
   absl::StrAppend(&before, " fd=", socket_->native_handle(), " name=", name_);
 
   string after;
@@ -1096,16 +1091,34 @@ void Connection::EnsureAsyncMemoryBudget() {
   queue_backpressure_->EnsureBelowLimit();
 }
 
+std::string Connection::LocalBindStr() const {
+  if (socket_->IsUDS())
+    return "unix-domain-socket";
+
+  auto le = socket_->LocalEndpoint();
+  return absl::StrCat(le.address().to_string(), ":", le.port());
+}
+
+std::string Connection::LocalBindAddress() const {
+  if (socket_->IsUDS())
+    return "unix-domain-socket";
+
+  auto le = socket_->LocalEndpoint();
+  return le.address().to_string();
+}
+
 std::string Connection::RemoteEndpointStr() const {
-  const bool unix_socket = socket_->IsUDS();
-  std::string connection_str = unix_socket ? "unix:" : std::string{};
+  if (socket_->IsUDS())
+    return "unix-domain-socket";
 
   auto re = socket_->RemoteEndpoint();
-  absl::StrAppend(&connection_str, re.address().to_string(), ":", re.port());
-  return connection_str;
+  return absl::StrCat(re.address().to_string(), ":", re.port());
 }
 
 std::string Connection::RemoteEndpointAddress() const {
+  if (socket_->IsUDS())
+    return "unix-domain-socket";
+
   auto re = socket_->RemoteEndpoint();
   return re.address().to_string();
 }
diff --git a/src/facade/dragonfly_connection.h b/src/facade/dragonfly_connection.h
index 98e7bc892b9b..bfc3b7a74021 100644
--- a/src/facade/dragonfly_connection.h
+++ b/src/facade/dragonfly_connection.h
@@ -157,13 +157,16 @@ class Connection : public util::Connection {
 
   std::string GetClientInfo(unsigned thread_id) const;
   std::string GetClientInfo() const;
-  virtual std::string RemoteEndpointStr() const;
+
+  virtual std::string RemoteEndpointStr() const;  // virtual because overwritten in test_utils
   std::string RemoteEndpointAddress() const;
+
+  std::string LocalBindStr() const;
   std::string LocalBindAddress() const;
 
   uint32_t GetClientId() const;
-  // Virtual because behavior is overridden in test_utils.
-  virtual bool IsPrivileged() const;
+
+  virtual bool IsPrivileged() const;  // virtual because overwritten in test_utils
 
   bool IsMain() const;
 
