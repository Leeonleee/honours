You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
A data race inside blocking XREAD 
The scenario involves concurrent DELCONSUMER operation together with blocking XREADGROUP.

Once XREADGROUP blocks, it releases the locks so DELCONSUMER may deleted the consumer that was specified for XREADGROUP operation. Then, if XREADGROUP wakes up due to new element in the stream, it will access the consumer object that was prefetched via `FetchGroupInfo` call, causing a segfault. See below.

The thing is that the `FetchGroupInfo` hop is totally redundant and should be done by the shard local operation. So the solution is to rewrite this code and eliminate FetchGroupInfo logic altogether. 


```
#8  0x00005b81267c667c in raxTryInsert (rax=<optimized out>, s=s@entry=0x7546a00182b0 "", len=len@entry=16, data=data@entry=0x4b7188cdec0, old=old@entry=0x0) at ../src/redis/rax.c:914
(gdb) up
#9  0x00005b81264bfad5 in dfly::(anonymous namespace)::OpRange (op_args=..., key=..., opts=...) at ../src/server/stream_family.cc:718
#10 0x00005b81264c0e65 in <lambda(dfly::Transaction*, dfly::EngineShard*)>::operator() (shard=<optimized out>, t=0x4b646ca5800, __closure=0x7546a8379e20) at ../src/server/stream_family.cc:2947
(gdb) up
#11 std::__invoke_impl<facade::OpStatus, const dfly::XReadBlock(dfly::(anonymous namespace)::ReadOpts*, dfly::ConnectionContext*)::<lambda(dfly::Transaction*, dfly::EngineShard*)>&, dfly::Transaction*, dfly::Eng
ineShard*> (__f=...) at /usr/include/c++/9/bits/invoke.h:60
(gdb) up
#12 std::__invoke<const dfly::XReadBlock(dfly::(anonymous namespace)::ReadOpts*, dfly::ConnectionContext*)::<lambda(dfly::Transaction*, dfly::EngineShard*)>&, dfly::Transaction*, dfly::EngineShard*> (__fn=...)
    at /usr/include/c++/9/bits/invoke.h:95
(gdb) up
#13 std::invoke<const dfly::XReadBlock(dfly::(anonymous namespace)::ReadOpts*, dfly::ConnectionContext*)::<lambda(dfly::Transaction*, dfly::EngineShard*)>&, dfly::Transaction*, dfly::EngineShard*> (__fn=...)
    at /usr/include/c++/9/functional:81
(gdb) up
#14 absl::lts_20240116::functional_internal::InvokeObject<dfly::XReadBlock(dfly::(anonymous namespace)::ReadOpts*, dfly::ConnectionContext*)::<lambda(dfly::Transaction*, dfly::EngineShard*)>, dfly::Transaction::
RunnableResult, dfly::Transaction*, dfly::EngineShard*>(absl::lts_20240116::functional_internal::VoidPtr) (ptr=...) at _deps/abseil_cpp-src/absl/functional/internal/function_ref.h:78
```
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
