diff --git a/src/core/interpreter_test.cc b/src/core/interpreter_test.cc
index 3f91a2e75bbb..8a1e4a95b6d9 100644
--- a/src/core/interpreter_test.cc
+++ b/src/core/interpreter_test.cc
@@ -54,6 +54,16 @@ class TestSerializer : public ObjectExplorer {
     absl::StrAppend(&res, "nil ");
   }
 
+  void OnMapStart(unsigned len) final {
+    absl::StrAppend(&res, "{");
+  }
+
+  void OnMapEnd() final {
+    if (res.back() == ' ')
+      res.pop_back();
+    absl::StrAppend(&res, "} ");
+  }
+
   void OnStatus(std::string_view str) {
     absl::StrAppend(&res, "status(", str, ") ");
   }
@@ -254,6 +264,9 @@ TEST_F(InterpreterTest, Execute) {
 
   EXPECT_TRUE(Execute("return {1,2,3,'ciao', {1,2}}"));
   EXPECT_EQ("[i(1) i(2) i(3) str(ciao) [i(1) i(2)]]", ser_.res);
+
+  EXPECT_TRUE(Execute("return {map={a=1,b=2}}"));
+  EXPECT_THAT(ser_.res, testing::AnyOf("{str(a) i(1) str(b) i(2)}", "{str(b) i(2) str(a) i(1)}"));
 }
 
 TEST_F(InterpreterTest, Call) {
diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc
index a2a2d4eaf4cf..2776f989be47 100644
--- a/src/server/dragonfly_test.cc
+++ b/src/server/dragonfly_test.cc
@@ -35,6 +35,7 @@ using absl::SetFlag;
 using absl::StrCat;
 using fb2::Fiber;
 using ::io::Result;
+using testing::AnyOf;
 using testing::ElementsAre;
 using testing::HasSubstr;
 
@@ -144,6 +145,11 @@ TEST_F(DflyEngineTest, EvalResp) {
   resp = Run({"eval", "return {5, 'foo', 17.5}", "0"});
   ASSERT_THAT(resp, ArrLen(3));
   EXPECT_THAT(resp.GetVec(), ElementsAre(IntArg(5), "foo", "17.5"));
+
+  resp = Run({"eval", "return {map={a=1,b=2}}", "0"});
+  ASSERT_THAT(resp, ArrLen(4));
+  EXPECT_THAT(resp.GetVec(), AnyOf(ElementsAre("a", IntArg(1), "b", IntArg(2)),
+                                   ElementsAre("b", IntArg(2), "a", IntArg(1))));
 }
 
 TEST_F(DflyEngineTest, EvalPublish) {
