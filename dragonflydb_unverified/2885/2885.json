{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2885,
  "instance_id": "dragonflydb__dragonfly-2885",
  "issue_numbers": [
    "2880"
  ],
  "base_commit": "48d7fa7ebac310628e23da5747eed9bfa3565cac",
  "patch": "diff --git a/src/core/interpreter.cc b/src/core/interpreter.cc\nindex 478646833ec1..ada7b629ea57 100644\n--- a/src/core/interpreter.cc\n+++ b/src/core/interpreter.cc\n@@ -746,6 +746,7 @@ bool Interpreter::AddInternal(const char* f_id, string_view body, string* error)\n   return true;\n }\n \n+// Stack is cleaned for us, we can leave it dirty\n bool Interpreter::IsTableSafe() const {\n   auto fres = FetchKey(lua_, \"err\");\n   if (fres && *fres == LUA_TSTRING) {\n@@ -757,40 +758,35 @@ bool Interpreter::IsTableSafe() const {\n     return true;\n   }\n \n-  vector<pair<unsigned, unsigned>> lens;\n-  unsigned len = lua_rawlen(lua_, -1);\n-  unsigned i = 0;\n-\n-  // implement dfs traversal\n-  while (true) {\n-    while (i < len) {\n-      DVLOG(1) << \"Stack \" << lua_gettop(lua_) << \"/\" << i << \"/\" << len;\n-      int t = lua_rawgeti(lua_, -1, i + 1);  // push table element\n-      if (t == LUA_TTABLE) {\n-        if (lens.size() >= 127)  // reached depth 128\n-          return false;\n-\n-        CHECK(lua_checkstack(lua_, 1));\n-        lens.emplace_back(i + 1, len);  // save the parent state.\n-\n-        // reset to iterate on the next table.\n-        i = 0;\n-        len = lua_rawlen(lua_, -1);\n-      } else {\n-        lua_pop(lua_, 1);  // pop table element\n-        ++i;\n-      }\n-    }\n+  // Copy root table because we remove it upon finishing traversal\n+  lua_pushnil(lua_);\n+  lua_copy(lua_, -2, -1);\n \n-    if (lens.empty())  // exit criteria\n-      break;\n+  int depth = 1;\n+  lua_pushnil(lua_);\n \n-    // unwind to the state before we went down the stack.\n-    tie(i, len) = lens.back();\n-    lens.pop_back();\n+  // DFS based on lua stack: [parent-table] [parent-key] [parent-value = table] [key]\n+  while (depth > 0) {\n+    if (lua_checkstack(lua_, 3) == 0 || depth > 128)\n+      return false;\n \n-    lua_pop(lua_, 1);\n-  };\n+    bool descending = false;\n+    for (; lua_next(lua_, -2) != 0; lua_pop(lua_, 1)) {\n+      if (lua_type(lua_, -1) != LUA_TTABLE)\n+        continue;\n+\n+      // If we descend, keep value as new table and push nil for start key\n+      depth++;\n+      lua_pushnil(lua_);\n+      descending = true;\n+      break;\n+    }\n+\n+    if (!descending) {\n+      lua_pop(lua_, 1);\n+      depth--;\n+    }\n+  }\n \n   return true;\n }\n@@ -827,7 +823,29 @@ void Interpreter::SerializeResult(ObjectExplorer* serializer) {\n         break;\n       }\n \n+      fres = FetchKey(lua_, \"map\");\n+      if (fres && *fres == LUA_TTABLE) {\n+        // Calculate length of map part, there is sadly no other way\n+        unsigned len = 0;\n+        for (lua_pushnil(lua_); lua_next(lua_, -2) != 0; lua_pop(lua_, 1))\n+          len++;\n+\n+        serializer->OnMapStart(len);\n+        for (lua_pushnil(lua_); lua_next(lua_, -2) != 0;) {\n+          // Push key to stack top: key value key\n+          lua_pushnil(lua_);\n+          lua_copy(lua_, -3, -1);\n+          SerializeResult(serializer);  // pops key\n+          SerializeResult(serializer);  // pop value\n+        }\n+        serializer->OnMapEnd();\n+\n+        lua_pop(lua_, 2);\n+        break;\n+      }\n+\n       unsigned len = lua_rawlen(lua_, -1);\n+\n       serializer->OnArrayStart(len);\n       for (unsigned i = 0; i < len; ++i) {\n         t = lua_rawgeti(lua_, -1, i + 1);  // push table element\ndiff --git a/src/core/interpreter.h b/src/core/interpreter.h\nindex e2d333aba88f..c5fb1bee7893 100644\n--- a/src/core/interpreter.h\n+++ b/src/core/interpreter.h\n@@ -28,6 +28,14 @@ class ObjectExplorer {\n   virtual void OnNil() = 0;\n   virtual void OnStatus(std::string_view str) = 0;\n   virtual void OnError(std::string_view str) = 0;\n+\n+  virtual void OnMapStart(unsigned len) {\n+    OnArrayStart(len * 2);\n+  }\n+\n+  virtual void OnMapEnd() {\n+    OnArrayEnd();\n+  }\n };\n \n class Interpreter {\ndiff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex fcc00b48235f..b949f48918d1 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -26,8 +26,8 @@ extern \"C\" {\n #include \"base/logging.h\"\n #include \"facade/dragonfly_connection.h\"\n #include \"facade/error.h\"\n+#include \"facade/reply_builder.h\"\n #include \"facade/reply_capture.h\"\n-#include \"facade/resp_expr.h\"\n #include \"server/acl/acl_commands_def.h\"\n #include \"server/acl/acl_family.h\"\n #include \"server/acl/user_registry.h\"\n@@ -291,6 +291,7 @@ class InterpreterReplier : public RedisReplyBuilder {\n   unsigned num_elems_ = 0;\n };\n \n+// Serialized result of script invocation to Redis protocol\n class EvalSerializer : public ObjectExplorer {\n  public:\n   EvalSerializer(RedisReplyBuilder* rb) : rb_(rb) {\n@@ -328,6 +329,13 @@ class EvalSerializer : public ObjectExplorer {\n   void OnArrayEnd() final {\n   }\n \n+  void OnMapStart(unsigned len) final {\n+    rb_->StartCollection(len, RedisReplyBuilder::MAP);\n+  }\n+\n+  void OnMapEnd() final {\n+  }\n+\n   void OnNil() final {\n     rb_->SendNull();\n   }\n",
  "test_patch": "diff --git a/src/core/interpreter_test.cc b/src/core/interpreter_test.cc\nindex 3f91a2e75bbb..8a1e4a95b6d9 100644\n--- a/src/core/interpreter_test.cc\n+++ b/src/core/interpreter_test.cc\n@@ -54,6 +54,16 @@ class TestSerializer : public ObjectExplorer {\n     absl::StrAppend(&res, \"nil \");\n   }\n \n+  void OnMapStart(unsigned len) final {\n+    absl::StrAppend(&res, \"{\");\n+  }\n+\n+  void OnMapEnd() final {\n+    if (res.back() == ' ')\n+      res.pop_back();\n+    absl::StrAppend(&res, \"} \");\n+  }\n+\n   void OnStatus(std::string_view str) {\n     absl::StrAppend(&res, \"status(\", str, \") \");\n   }\n@@ -254,6 +264,9 @@ TEST_F(InterpreterTest, Execute) {\n \n   EXPECT_TRUE(Execute(\"return {1,2,3,'ciao', {1,2}}\"));\n   EXPECT_EQ(\"[i(1) i(2) i(3) str(ciao) [i(1) i(2)]]\", ser_.res);\n+\n+  EXPECT_TRUE(Execute(\"return {map={a=1,b=2}}\"));\n+  EXPECT_THAT(ser_.res, testing::AnyOf(\"{str(a) i(1) str(b) i(2)}\", \"{str(b) i(2) str(a) i(1)}\"));\n }\n \n TEST_F(InterpreterTest, Call) {\ndiff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc\nindex a2a2d4eaf4cf..2776f989be47 100644\n--- a/src/server/dragonfly_test.cc\n+++ b/src/server/dragonfly_test.cc\n@@ -35,6 +35,7 @@ using absl::SetFlag;\n using absl::StrCat;\n using fb2::Fiber;\n using ::io::Result;\n+using testing::AnyOf;\n using testing::ElementsAre;\n using testing::HasSubstr;\n \n@@ -144,6 +145,11 @@ TEST_F(DflyEngineTest, EvalResp) {\n   resp = Run({\"eval\", \"return {5, 'foo', 17.5}\", \"0\"});\n   ASSERT_THAT(resp, ArrLen(3));\n   EXPECT_THAT(resp.GetVec(), ElementsAre(IntArg(5), \"foo\", \"17.5\"));\n+\n+  resp = Run({\"eval\", \"return {map={a=1,b=2}}\", \"0\"});\n+  ASSERT_THAT(resp, ArrLen(4));\n+  EXPECT_THAT(resp.GetVec(), AnyOf(ElementsAre(\"a\", IntArg(1), \"b\", IntArg(2)),\n+                                   ElementsAre(\"b\", IntArg(2), \"a\", IntArg(1))));\n }\n \n TEST_F(DflyEngineTest, EvalPublish) {\n",
  "problem_statement": "LUA script issue in Dragonfly for HGETALL result\nHi all,\r\n\r\n**Describe the bug**\r\nI am trying to go from Redis to Dragonfly. I am using a set of scripts to automate my work in the database.\r\nOne of my script is behaving differently in Dragonfly than in Redis and does not provide the expected result.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Insert records using `HSET id:99 value 99`\r\n2. Load script using `SCRIPT LOAD \"#!lua flags=allow-undeclared-keys\\nlocal result = {map={}}\\nresult.map[\\\"id:99\\\"] = redis.call(\\\"HGETALL\\\", \\\"id:99\\\")\\nreturn {1, result}\"`\r\n3. Call script using `EVALSHA <previsously returned SHA> 0 0`\r\n4. See empty result:\r\n```\r\n   1) (integer) 1\r\n   2) (empty array)\r\n```\r\n\r\nWhen running in Redis `#!lua flags=allow-undeclared-keys\\n` should be removed from the script.\r\n\r\n**Expected behavior**\r\nThis should return the same as Redis:\r\n  ```\r\n1) (integer) 1\r\n  2) 1) \"id:99\"\r\n      2) 1) \"value\"\r\n          2) \"99\"\r\n```\r\n\r\n**Screenshots**\r\nIn Redis:\r\n![image](https://github.com/dragonflydb/dragonfly/assets/29281338/9bbd1293-8d29-4b34-be4e-0346a6441f13)\r\nIn Dragonfly:\r\n![image](https://github.com/dragonflydb/dragonfly/assets/29281338/8efd9ea4-dd79-4124-9858-fd67f8ee304f)\r\n\r\n**Environment (please complete the following information):**\r\n - Kubernetes using dragonfly-operator v1.1.2 using helm chart from https://github.com/dragonflydb/dragonfly-operator/pull/174\r\n - Dragonfly Version: [e.g. 1.6.0]\n",
  "hints_text": "",
  "created_at": "2024-04-10T19:32:05Z",
  "modified_files": [
    "src/core/interpreter.cc",
    "src/core/interpreter.h",
    "src/server/main_service.cc"
  ],
  "modified_test_files": [
    "src/core/interpreter_test.cc",
    "src/server/dragonfly_test.cc"
  ]
}