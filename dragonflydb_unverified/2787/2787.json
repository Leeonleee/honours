{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2787,
  "instance_id": "dragonflydb__dragonfly-2787",
  "issue_numbers": [
    "2777"
  ],
  "base_commit": "16b737ce2a7ee403bd2be52e1be4684527d28975",
  "patch": "diff --git a/src/server/db_slice.cc b/src/server/db_slice.cc\nindex 9f19ba6f7a2b..43bb0d7eeaeb 100644\n--- a/src/server/db_slice.cc\n+++ b/src/server/db_slice.cc\n@@ -830,14 +830,10 @@ bool DbSlice::UpdateExpire(DbIndex db_ind, PrimeIterator it, uint64_t at) {\n void DbSlice::SetMCFlag(DbIndex db_ind, PrimeKey key, uint32_t flag) {\n   auto& db = *db_arr_[db_ind];\n   if (flag == 0) {\n-    if (db.mcflag.Erase(key) == 0) {\n-      LOG(ERROR) << \"Internal error, inconsistent state, mcflag should be present but not found \"\n-                 << key.ToString();\n-    }\n+    db.mcflag.Erase(key);\n   } else {\n-    auto [it, inserted] = db.mcflag.Insert(std::move(key), flag);\n-    if (!inserted)\n-      it->second = flag;\n+    auto [it, _] = db.mcflag.Insert(std::move(key), flag);\n+    it->second = flag;\n   }\n }\n \ndiff --git a/src/server/string_family.cc b/src/server/string_family.cc\nindex 67d85c744ae6..0cf424d5d9df 100644\n--- a/src/server/string_family.cc\n+++ b/src/server/string_family.cc\n@@ -655,12 +655,9 @@ OpStatus SetCmd::SetExisting(const SetParams& params, PrimeIterator it, ExpireIt\n     it->first.SetSticky(true);\n   }\n \n-  // Check whether we need to update flags table.\n-  bool req_flag_update = (params.memcache_flags != 0) != prime_value.HasFlag();\n-  if (req_flag_update) {\n-    prime_value.SetFlag(params.memcache_flags != 0);\n-    db_slice.SetMCFlag(op_args_.db_cntx.db_index, it->first.AsRef(), params.memcache_flags);\n-  }\n+  // Update flags\n+  prime_value.SetFlag(params.memcache_flags != 0);\n+  db_slice.SetMCFlag(op_args_.db_cntx.db_index, it->first.AsRef(), params.memcache_flags);\n \n   db_slice.RemoveFromTiered(it, op_args_.db_cntx.db_index);\n   // overwrite existing entry.\n",
  "test_patch": "diff --git a/tests/dragonfly/conftest.py b/tests/dragonfly/conftest.py\nindex b0942bd02cdc..635ac565eac2 100644\n--- a/tests/dragonfly/conftest.py\n+++ b/tests/dragonfly/conftest.py\n@@ -254,7 +254,7 @@ def port_picker():\n \n @pytest.fixture(scope=\"function\")\n def memcached_client(df_server: DflyInstance):\n-    client = pymemcache.Client(f\"localhost:{df_server.mc_port}\", default_noreply=False)\n+    client = pymemcache.Client(f\"127.0.0.1:{df_server.mc_port}\", default_noreply=False)\n \n     yield client\n \ndiff --git a/tests/dragonfly/pymemcached_test.py b/tests/dragonfly/pymemcached_test.py\nindex 9316fcbcaabb..0578c0d11f8b 100644\n--- a/tests/dragonfly/pymemcached_test.py\n+++ b/tests/dragonfly/pymemcached_test.py\n@@ -2,8 +2,9 @@\n from . import dfly_args\n from .instance import DflyInstance\n import socket\n+import random\n \n-DEFAULT_ARGS = {\"memcached_port\": 12111, \"proactor_threads\": 4}\n+DEFAULT_ARGS = {\"memcached_port\": 11211, \"proactor_threads\": 4}\n \n # Generic basic tests\n \n@@ -122,3 +123,14 @@ def test_version(memcached_client: MCClient):\n     stats = memcached_client.stats()\n     version = stats[b\"version\"].decode(\"utf-8\")\n     assert version.startswith(\"v\") or version == \"dev\"\n+\n+\n+@dfly_args(DEFAULT_ARGS)\n+def test_flags(memcached_client: MCClient):\n+    for i in range(1, 20):\n+        flags = random.randrange(50, 1000)\n+        memcached_client.set(\"a\", \"real-value\", flags=flags, noreply=True)\n+\n+        res = memcached_client.raw_command(\"get a\", \"END\\r\\n\").split()\n+        if len(res) > 0:\n+            assert res[2].decode() == str(flags)\n",
  "problem_statement": "Incorrect Storage of Flags in DragonflyDB Memcache\n**Describe the bug**\r\nThe bug involves the incorrect storage of flags in DragonflyDB Memcache under certain conditions.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n```\r\n$ telnet 127.0.0.1 11211\r\nConnected to localhost.\r\nEscape character is '^]'.\r\n\r\nset myKey 3 0 7\r\nmyValue\r\nSTORED\r\n\r\nget myKey \r\nVALUE myKey 3 7\r\nmyValue\r\nEND\r\n\r\nset myKey 4 0 8\r\nmyValue2\r\nSTORED\r\n\r\nget myKey\r\nVALUE myKey 3 8\r\nmyValue2\r\nEND\r\n```\r\n\r\n**Expected behavior**\r\nWe expected the flag to change to the right value after executing the second `set`.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: Ubuntu 20.04.6 LTS (Focal Fossa)\r\n - Kernel: Linux a92aa430986a 5.15.49-linuxkit-pr\r\n - Containerized?: occured with docker-compose (using official image : docker.dragonflydb.io/dragonflydb/dragonfly) and kubernetes\r\n - Dragonfly Version: v1.15.1\n",
  "hints_text": "Hi, I think there is an issue with this condition: https://github.com/dragonflydb/dragonfly/blob/main/src/server/string_family.cc#L659\r\n\r\nWhen the flag was set to zero, the flag is updated, but no more since this is other than zero.\nConfirming it is a bug - memcached updates the flag for the existing entries.\r\n",
  "created_at": "2024-03-29T06:05:50Z",
  "modified_files": [
    "src/server/db_slice.cc",
    "src/server/string_family.cc"
  ],
  "modified_test_files": [
    "tests/dragonfly/conftest.py",
    "tests/dragonfly/pymemcached_test.py"
  ]
}