{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4774,
  "instance_id": "dragonflydb__dragonfly-4774",
  "issue_numbers": [
    "4773"
  ],
  "base_commit": "8acf849e9df79184488ba848685a9047ca99418b",
  "patch": "diff --git a/src/server/db_slice.cc b/src/server/db_slice.cc\nindex 023ab251583d..1113df69455c 100644\n--- a/src/server/db_slice.cc\n+++ b/src/server/db_slice.cc\n@@ -62,6 +62,9 @@ static_assert(kExpireSegmentSize == 23528);\n \n void AccountObjectMemory(string_view key, unsigned type, int64_t size, DbTable* db) {\n   DCHECK_NE(db, nullptr);\n+  if (size == 0)\n+    return;\n+\n   DbTableStats& stats = db->stats;\n   DCHECK_GE(static_cast<int64_t>(stats.obj_memory_usage) + size, 0)\n       << \"Can't decrease \" << size << \" from \" << stats.obj_memory_usage;\n@@ -500,6 +503,8 @@ OpResult<DbSlice::ItAndUpdater> DbSlice::FindMutableInternal(const Context& cntx\n   PreUpdateBlocking(cntx.db_index, it, key);\n   // PreUpdate() might have caused a deletion of `it`\n   if (res->it.IsOccupied()) {\n+    DCHECK_GE(db_arr_[cntx.db_index]->stats.obj_memory_usage, res->it->second.MallocUsed());\n+\n     return {{it, exp_it,\n              AutoUpdater({.action = AutoUpdater::DestructorAction::kRun,\n                           .db_slice = this,\ndiff --git a/src/server/rdb_load.cc b/src/server/rdb_load.cc\nindex 42dcbf9241b0..b90ddd1a139d 100644\n--- a/src/server/rdb_load.cc\n+++ b/src/server/rdb_load.cc\n@@ -2544,11 +2544,15 @@ void RdbLoader::CreateObjectOnShard(const DbContext& db_cntx, const Item* item,\n                         item->val.rdb_type);\n   };\n \n+  // The scope is important here, as we need to ensure that the object memory is properly\n+  // accounted for.\n+  DbSlice::ItAndUpdater append_res;\n+\n   // If we're appending the item to an existing key, first load the\n   // object.\n   if (item->load_config.append) {\n-    auto res = db_slice->FindMutable(db_cntx, item->key);\n-    if (!IsValid(res.it)) {\n+    append_res = db_slice->FindMutable(db_cntx, item->key);\n+    if (!IsValid(append_res.it)) {\n       // If the item has expired we may not find the key. Note if the key\n       // is found, but expired since we started loading, we still append to\n       // avoid an inconsistent state where only part of the key is loaded.\n@@ -2557,7 +2561,7 @@ void RdbLoader::CreateObjectOnShard(const DbContext& db_cntx, const Item* item,\n       }\n       return;\n     }\n-    pv_ptr = &res.it->second;\n+    pv_ptr = &append_res.it->second;\n   }\n \n   if (ec_ = FromOpaque(item->val, item->load_config, pv_ptr); ec_) {\n@@ -2598,7 +2602,7 @@ void RdbLoader::CreateObjectOnShard(const DbContext& db_cntx, const Item* item,\n     return;\n   }\n \n-  auto& res = *op_res;\n+  DbSlice::ItAndUpdater& res = *op_res;\n   res.it->first.SetSticky(item->is_sticky);\n   if (item->has_mc_flags) {\n     res.it->second.SetFlag(true);\n",
  "test_patch": "diff --git a/src/server/rdb_test.cc b/src/server/rdb_test.cc\nindex 747549c06777..82bc5cd4893a 100644\n--- a/src/server/rdb_test.cc\n+++ b/src/server/rdb_test.cc\n@@ -582,6 +582,8 @@ TEST_F(RdbTest, LoadHugeSet) {\n \n   ASSERT_EQ(100000, CheckedInt({\"scard\", \"test:0\"}));\n   ASSERT_EQ(100000, CheckedInt({\"scard\", \"test:1\"}));\n+  auto metrics = GetMetrics();\n+  EXPECT_GT(metrics.db_stats[0].obj_memory_usage, 24'000'000u);\n }\n \n // Tests loading a huge hmap, where the map is loaded in multiple partial\n@@ -602,6 +604,8 @@ TEST_F(RdbTest, LoadHugeHMap) {\n \n   ASSERT_EQ(100000, CheckedInt({\"hlen\", \"test:0\"}));\n   ASSERT_EQ(100000, CheckedInt({\"hlen\", \"test:1\"}));\n+  auto metrics = GetMetrics();\n+  EXPECT_GT(metrics.db_stats[0].obj_memory_usage, 29'000'000u);\n }\n \n // Tests loading a huge zset, where the zset is loaded in multiple partial\n@@ -622,6 +626,8 @@ TEST_F(RdbTest, LoadHugeZSet) {\n \n   ASSERT_EQ(100000, CheckedInt({\"zcard\", \"test:0\"}));\n   ASSERT_EQ(100000, CheckedInt({\"zcard\", \"test:1\"}));\n+  auto metrics = GetMetrics();\n+  EXPECT_GT(metrics.db_stats[0].obj_memory_usage, 26'000'000u);\n }\n \n // Tests loading a huge list, where the list is loaded in multiple partial\n@@ -642,6 +648,8 @@ TEST_F(RdbTest, LoadHugeList) {\n \n   ASSERT_EQ(100000, CheckedInt({\"llen\", \"test:0\"}));\n   ASSERT_EQ(100000, CheckedInt({\"llen\", \"test:1\"}));\n+  auto metrics = GetMetrics();\n+  EXPECT_GT(metrics.db_stats[0].obj_memory_usage, 20'000'000u);\n }\n \n // Tests loading a huge stream, where the stream is loaded in multiple partial\n",
  "problem_statement": "object_used_memory and memory type counters overflow\nSometimes Dragonfly shows object_used_memory and list related counters as overflown (high 64 bit numbers)\n",
  "hints_text": "",
  "created_at": "2025-03-15T20:47:47Z",
  "modified_files": [
    "src/server/db_slice.cc",
    "src/server/rdb_load.cc"
  ],
  "modified_test_files": [
    "src/server/rdb_test.cc"
  ]
}