{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1522,
  "instance_id": "dragonflydb__dragonfly-1522",
  "issue_numbers": [
    "1442"
  ],
  "base_commit": "4eb2012a8d51625faf3039ca8eeec33455a8b165",
  "patch": "diff --git a/src/server/transaction.cc b/src/server/transaction.cc\nindex 6fbaec62b0bb..834ee4c421d7 100644\n--- a/src/server/transaction.cc\n+++ b/src/server/transaction.cc\n@@ -1445,12 +1445,14 @@ OpResult<KeyIndex> DetermineKeys(const CommandId* cid, CmdArgList args) {\n     if (!absl::SimpleAtoi(num, &num_custom_keys) || num_custom_keys < 0)\n       return OpStatus::INVALID_INT;\n \n-    // TODO Fix this for Z family functions.\n-    // Examples that crash: ZUNION 0 myset\n     if (name == \"ZDIFF\" && num_custom_keys == 0) {\n       return OpStatus::INVALID_INT;\n     }\n \n+    if (name == \"ZUNION\" && num_custom_keys == 0) {\n+      return OpStatus::SYNTAX_ERR;\n+    }\n+\n     if (args.size() < size_t(num_custom_keys) + num_keys_index + 1)\n       return OpStatus::SYNTAX_ERR;\n   }\ndiff --git a/src/server/zset_family.cc b/src/server/zset_family.cc\nindex 51197cf5d1ae..17346b044911 100644\n--- a/src/server/zset_family.cc\n+++ b/src/server/zset_family.cc\n@@ -956,7 +956,7 @@ OpResult<void> FillAggType(string_view agg, SetOpArgs* op_args) {\n \n // Parse functions return the number of arguments read from CmdArgList\n OpResult<unsigned> ParseAggregate(CmdArgList args, bool store, SetOpArgs* op_args) {\n-  if (args.size() < 1) {\n+  if (args.size() <= 1) {\n     return OpStatus::SYNTAX_ERR;\n   }\n \n",
  "test_patch": "diff --git a/src/server/zset_family_test.cc b/src/server/zset_family_test.cc\nindex 86e7f50b7d6a..947de4230373 100644\n--- a/src/server/zset_family_test.cc\n+++ b/src/server/zset_family_test.cc\n@@ -291,6 +291,9 @@ TEST_F(ZSetFamilyTest, ZUnionError) {\n   resp = Run({\"zunion\", \"0\"});\n   EXPECT_THAT(resp, ErrArg(\"wrong number of arguments\"));\n \n+  resp = Run({\"zunion\", \"0\", \"myset\"});\n+  EXPECT_THAT(resp, ErrArg(\"syntax error\"));\n+\n   resp = Run({\"zunion\", \"3\", \"z1\", \"z2\", \"z3\", \"weights\", \"1\", \"1\", \"k\"});\n   EXPECT_THAT(resp, ErrArg(\"weight value is not a float\"));\n \n@@ -360,6 +363,9 @@ TEST_F(ZSetFamilyTest, ZUnionStore) {\n   resp = Run({\"zunionstore\", \"key\", \"0\"});\n   EXPECT_THAT(resp, ErrArg(\"wrong number of arguments\"));\n \n+  resp = Run({\"zunionstore\", \"key\", \"0\", \"aggregate\"});\n+  EXPECT_THAT(resp, ErrArg(\"syntax error\"));\n+\n   resp = Run({\"zunionstore\", \"key\", \"0\", \"aggregate\", \"sum\"});\n   EXPECT_THAT(resp, ErrArg(\"at least 1 input key is needed\"));\n   resp = Run({\"zunionstore\", \"key\", \"-1\", \"aggregate\", \"sum\"});\n",
  "problem_statement": "ZUNION crash on debug builds\n**Describe the bug**\r\nThe command `ZUNION 0 key` causes dragonfly to crash (but works on release).\r\n\r\n**To Reproduce**\r\n1. Build dragonfly with in debug mode\r\n2. Start dragonflydb\r\n3. Connect with redis-cli and type `ZUNION 0 key` (crashes here)\r\n\r\n**Expected behavior**\r\nAn error for numkeys being `0`\r\n\r\n**Environment (please complete the following information):**\r\n - OS: [ubuntu 22.04]\r\n - Kernel: 5.19.0-45-generic\r\n - Containerized?: no\r\n - Dragonfly Version: [1.4.0]\r\n\r\n**Additional context**\r\nI would check all the commands with the form `COMMAND NUMKEYS [Keys...]`\r\n\n",
  "hints_text": "I tried this in debug mode.\r\n\r\nThe crash happens exactly [here](https://github.com/dragonflydb/dragonfly/blob/main/src/server/transaction.cc#L256) when it tries to access `args_`  which is not initialized yet.\r\n\r\n> unique_shard_id_ = Shard(args_.front(), shard_set->size());  // TODO: Squashed bug\r\n\r\nI can also see a TODO [here](https://github.com/dragonflydb/dragonfly/blob/main/src/server/transaction.cc#L1444) mentioning a fix.\r\n\r\n> // TODO Fix this for Z family functions.\r\n    // Examples that crash: ZUNION 0 myset\r\n    if (name == \"ZDIFF\" && num_custom_keys == 0) {\r\n      return OpStatus::INVALID_INT;\r\n    }\r\n\r\nSuggested fix : Add a validation inside `DetermineKeys` method for zunion family to explicitly return error.\r\n\r\n> if (name == \"ZUNION\" && num_custom_keys == 0) {\r\n      return OpStatus:: SYNTAX_ERR;\r\n    }\r\n\r\nCurrent redis behaviour - \r\n\r\n> (error) ERR at least 1 input key is needed for zunion\r\n\r\n\r\nAdditionally, \r\n\r\n1. Would it make sense to have all the command related validations inside their own logic instead of in transactions?\r\n2. Also, I not sure how the `args_` is working without being initialized at transaction.cc:256 since `InitShardData` gets called after that. Please correct me if I am wrong here.\r\n\r\nDo let me know if I can take this up.\nHello @rounaknandanwar and thank you for replying.\r\n\r\n> The crash happens exactly [here](https://github.com/dragonflydb/dragonfly/blob/main/src/server/transaction.cc#L256) when it tries to access args_ which is not initialized yet.\r\n\r\nThat's true, that happens because we expect that there is a third argument when in reality there isn't (`ZUNION 0 key_missing`) and this leads to UB. \r\n\r\n> Suggested fix : Add a validation inside DetermineKeys method for zunion family to explicitly return error. \r\n\r\nThat should work, but there is an extra catch for this issue: `find also the commands from the zfamily set of functions that inhibit this bug and add them there` -- this should be straightforward by looking on the available commands and testing them one by one (there are not many where the `numkeys` exists, so it should be quite fast to test).\r\n\r\n> Would it make sense to have all the command related validations inside their own logic instead of in transactions?\r\n\r\nKind of. We sport a `thread-per-core` architecture meaning that keys/data are sharded among the available cores in the system. Before we even start a transaction we need to figure out which shard/core the command must be forwarded to which enforces some of the aforementioned validation steps to happen early. Moreover, since multiple transactions can happen simultaneously, we can re-order (based on the reads/writes on the key space affected) the execution of multiple transactions such that there are no clashes (and therefore transactions don't get rejected based on isolation guarantees). \r\n\r\n> Also, I not sure how the args_ is working without being initialized at transaction.cc:256 since InitShardData gets called after that. Please correct me if I am wrong here.\r\n\r\nLook on line:\r\n```\r\n 248     StoreKeysInArgs(key_index, needs_reverse_mapping);\r\n```\r\n\r\n> Do let me know if I can take this up.\r\n\r\nFor sure and I will review :) Just plz take a look on the other commands of the `zfamily` (and generally any command that has numkeys in it -- you can count them on your fingers so this won't take long).\r\n\r\nP.s. Let me know if you have any questions \r\n\r\n\r\n\nCommands that use numkeys and are good (have checked for all commands excluding zfamily as well): \r\n\r\n1. zunionstore out 0 mykey\r\n2. zinterstore out 0 mykey\r\n3. eval \"return ARGV[1]\" 0\r\n\r\nSo its just `zunion` that has issues.\r\n\r\nI do have questions but those are not related to this issue (more of related to the architecture and code structure) so will limit the discussion here :)\r\n\r\nDo assign the issue to me and I will push the fix.\n@rounaknandanwar  It's all yours! Thank you for checking and looking forward for your PR. \r\n\r\nFor PR guidelines read here: https://github.com/dragonflydb/dragonfly/blob/main/CONTRIBUTING.md \r\n\n@kostasrim I am not able to push to a branch. Do I need to get access rights ?\n@rounaknandanwar no you have to fork dragonfly and then push on your fork. The PR will arrive here as well :) ",
  "created_at": "2023-07-06T00:42:40Z",
  "modified_files": [
    "src/server/transaction.cc",
    "src/server/zset_family.cc"
  ],
  "modified_test_files": [
    "src/server/zset_family_test.cc"
  ]
}