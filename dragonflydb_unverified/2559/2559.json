{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2559,
  "instance_id": "dragonflydb__dragonfly-2559",
  "issue_numbers": [
    "2541"
  ],
  "base_commit": "9537cbdb0bf347b1fecbff418ee3872605e54b5a",
  "patch": "diff --git a/src/server/tiered_storage.cc b/src/server/tiered_storage.cc\nindex 1635bf6cdac3..adc7c454e98c 100644\n--- a/src/server/tiered_storage.cc\n+++ b/src/server/tiered_storage.cc\n@@ -360,6 +360,8 @@ void TieredStorage::Free(PrimeIterator it, DbTableStats* stats) {\n }\n \n void TieredStorage::Shutdown() {\n+  VLOG(1) << \"Shutdown TieredStorage\";\n+  shutdown_ = true;\n   io_mgr_.Shutdown();\n }\n \n@@ -372,6 +374,9 @@ TieredStats TieredStorage::GetStats() const {\n }\n \n void TieredStorage::FinishIoRequest(int io_res, InflightWriteRequest* req) {\n+  if (shutdown_) {\n+    return;\n+  }\n   PerDb* db = db_arr_[req->db_index()];\n   auto& bin_record = db->bin_map[req->bin_index()];\n   if (io_res < 0) {\n@@ -574,6 +579,9 @@ void TieredStorage::WriteSingle(DbIndex db_index, PrimeIterator it, size_t blob_\n   it->second.SetIoPending(true);\n \n   auto cb = [this, req, db_index](int io_res) {\n+    if (shutdown_) {\n+      return;\n+    }\n     PrimeTable* pt = db_slice_.GetTables(db_index).first;\n \n     absl::Cleanup cleanup = [this, req]() {\ndiff --git a/src/server/tiered_storage.h b/src/server/tiered_storage.h\nindex 98d31f9c38a0..b73f0e1167b9 100644\n--- a/src/server/tiered_storage.h\n+++ b/src/server/tiered_storage.h\n@@ -82,6 +82,7 @@ class TieredStorage {\n   TieredStats stats_;\n   size_t max_file_size_;\n   size_t allocated_size_ = 0;\n+  bool shutdown_ = false;\n };\n \n }  // namespace dfly\n",
  "test_patch": "diff --git a/src/server/test_utils.cc b/src/server/test_utils.cc\nindex c6953b1a21c3..3b9f6efcf754 100644\n--- a/src/server/test_utils.cc\n+++ b/src/server/test_utils.cc\n@@ -335,6 +335,17 @@ void BaseFamilyTest::WaitUntilLocked(DbIndex db_index, string_view key, double t\n   CHECK(IsLocked(db_index, key));\n }\n \n+bool BaseFamilyTest::WaitUntilCondition(std::function<bool()> condition_cb,\n+                                        std::chrono::milliseconds timeout_ms) {\n+  auto step = 50us;\n+  auto timeout_micro = chrono::duration_cast<chrono::microseconds>(timeout_ms);\n+  int64_t steps = timeout_micro.count() / step.count();\n+  do {\n+    ThisFiber::SleepFor(step);\n+  } while (!condition_cb() && --steps > 0);\n+  return condition_cb();\n+}\n+\n RespExpr BaseFamilyTest::Run(ArgSlice list) {\n   if (!ProactorBase::IsProactorThread()) {\n     return pp_->at(0)->Await([&] { return this->Run(list); });\ndiff --git a/src/server/test_utils.h b/src/server/test_utils.h\nindex ca01a3722697..702096d5fe3e 100644\n--- a/src/server/test_utils.h\n+++ b/src/server/test_utils.h\n@@ -17,6 +17,7 @@\n \n namespace dfly {\n using namespace facade;\n+using namespace std;\n \n class TestConnection : public facade::Connection {\n  public:\n@@ -124,6 +125,10 @@ class BaseFamilyTest : public ::testing::Test {\n   // Wait for a locked key to unlock. Aborts after timeout seconds passed.\n   void WaitUntilLocked(DbIndex db_index, std::string_view key, double timeout = 3);\n \n+  // Wait until condition_cb returns true or timeout reached. Returns condition_cb value\n+  bool WaitUntilCondition(std::function<bool()> condition_cb,\n+                          std::chrono::milliseconds timeout_ms = 100ms);\n+\n   std::string GetId() const;\n   size_t SubscriberMessagesLen(std::string_view conn_id) const;\n \ndiff --git a/src/server/tiered_storage_test.cc b/src/server/tiered_storage_test.cc\nindex 6d6436b4300c..1b702426f5ce 100644\n--- a/src/server/tiered_storage_test.cc\n+++ b/src/server/tiered_storage_test.cc\n@@ -27,6 +27,8 @@ class TieredStorageTest : public BaseFamilyTest {\n \n   void FillExternalKeys(unsigned count, int val_size = 256);\n   void FillKeysWithExpire(unsigned count, int val_size = 256, uint32_t expire = 3);\n+  bool WaitUntilTieredEntriesGT(size_t value, int db_index = 0);\n+  bool WaitUntilTieredEntriesEQ(size_t value, int db_index = 0);\n \n   static void SetUpTestSuite();\n };\n@@ -43,6 +45,22 @@ void TieredStorageTest::SetUpTestSuite() {\n   }\n }\n \n+bool TieredStorageTest::WaitUntilTieredEntriesGT(size_t value, int db_index) {\n+  auto cb = [&, value]() {\n+    auto tiered_entries = GetMetrics().db_stats[db_index].tiered_entries;\n+    return tiered_entries > value;\n+  };\n+  return WaitUntilCondition(std::move(cb));\n+}\n+\n+bool TieredStorageTest::WaitUntilTieredEntriesEQ(size_t value, int db_index) {\n+  auto cb = [&, value]() {\n+    auto tiered_entries = GetMetrics().db_stats[db_index].tiered_entries;\n+    return tiered_entries == value;\n+  };\n+  return WaitUntilCondition(std::move(cb));\n+}\n+\n void TieredStorageTest::FillExternalKeys(unsigned count, int val_size) {\n   string val(val_size, 'a');\n \n@@ -75,12 +93,11 @@ TEST_F(TieredStorageTest, Basic) {\n   FillExternalKeys(5000);\n   EXPECT_EQ(5000, CheckedInt({\"dbsize\"}));\n \n-  usleep(20000);  // 20 milliseconds\n+  EXPECT_TRUE(WaitUntilTieredEntriesGT(0));\n \n   Metrics m = GetMetrics();\n   unsigned tiered_entries = m.db_stats[0].tiered_entries;\n \n-  EXPECT_GT(tiered_entries, 0u);\n   string resp = CheckedString({\"debug\", \"object\", \"k1\"});\n   EXPECT_THAT(resp, HasSubstr(\"spill_len\"));\n   m = GetMetrics();\n@@ -95,9 +112,8 @@ TEST_F(TieredStorageTest, DelBeforeOffload) {\n   FillExternalKeys(100);\n   EXPECT_EQ(100, CheckedInt({\"dbsize\"}));\n \n-  usleep(20000);  // 20 milliseconds\n+  EXPECT_TRUE(WaitUntilTieredEntriesGT(0));\n   Metrics m = GetMetrics();\n-  EXPECT_GT(m.db_stats[0].tiered_entries, 0u);\n   EXPECT_LT(m.db_stats[0].tiered_entries, 100);\n \n   for (unsigned i = 0; i < 100; ++i) {\n@@ -107,9 +123,8 @@ TEST_F(TieredStorageTest, DelBeforeOffload) {\n   EXPECT_EQ(m.db_stats[0].tiered_entries, 0u);\n \n   FillExternalKeys(100);\n-  usleep(20000);  // 20 milliseconds\n+  EXPECT_TRUE(WaitUntilTieredEntriesGT(0));\n   m = GetMetrics();\n-  EXPECT_GT(m.db_stats[0].tiered_entries, 0u);\n   EXPECT_LT(m.db_stats[0].tiered_entries, 100);\n }\n \n@@ -121,13 +136,12 @@ TEST_F(TieredStorageTest, AddMultiDb) {\n   FillExternalKeys(100);\n   EXPECT_EQ(100, CheckedInt({\"dbsize\"}));\n \n-  usleep(20000);  // 20 milliseconds\n+  EXPECT_TRUE(WaitUntilTieredEntriesGT(0, 1));\n+  EXPECT_TRUE(WaitUntilTieredEntriesGT(0, 5));\n \n   Metrics m = GetMetrics();\n-  EXPECT_GT(m.db_stats[1].tiered_entries, 0u);\n   EXPECT_LT(m.db_stats[1].tiered_entries, 100);\n-  EXPECT_GT(m.db_stats[5].tiered_entries, 0u);\n-  EXPECT_LT(m.db_stats[4].tiered_entries, 100);\n+  EXPECT_LT(m.db_stats[5].tiered_entries, 100);\n }\n \n TEST_F(TieredStorageTest, FlushDBAfterSet) {\n@@ -142,9 +156,8 @@ TEST_F(TieredStorageTest, FlushDBAfterSet) {\n   FillExternalKeys(100);\n   EXPECT_EQ(100, CheckedInt({\"dbsize\"}));\n \n-  usleep(20000);  // 20 milliseconds\n+  EXPECT_TRUE(WaitUntilTieredEntriesGT(0, 5));\n   m = GetMetrics();\n-  EXPECT_GT(m.db_stats[5].tiered_entries, 0u);\n   EXPECT_LT(m.db_stats[5].tiered_entries, 100);\n }\n \n@@ -160,9 +173,8 @@ TEST_F(TieredStorageTest, FlushAllAfterSet) {\n   FillExternalKeys(100);\n   EXPECT_EQ(100, CheckedInt({\"dbsize\"}));\n \n-  usleep(20000);  // 20 milliseconds\n+  EXPECT_TRUE(WaitUntilTieredEntriesGT(0, 5));\n   m = GetMetrics();\n-  EXPECT_GT(m.db_stats[5].tiered_entries, 0u);\n   EXPECT_LT(m.db_stats[5].tiered_entries, 100);\n }\n \n@@ -177,9 +189,7 @@ TEST_F(TieredStorageTest, AddBigValues) {\n   FillExternalKeys(100, 5000);\n   EXPECT_EQ(100, CheckedInt({\"dbsize\"}));\n \n-  usleep(20000);  // 20 milliseconds\n-  m = GetMetrics();\n-  EXPECT_GT(m.db_stats[0].tiered_entries, 0u);\n+  EXPECT_TRUE(WaitUntilTieredEntriesGT(0));\n }\n \n TEST_F(TieredStorageTest, DelBigValues) {\n@@ -195,26 +205,21 @@ TEST_F(TieredStorageTest, DelBigValues) {\n   FillExternalKeys(100, 5000);\n   EXPECT_EQ(100, CheckedInt({\"dbsize\"}));\n \n-  usleep(20000);  // 20 milliseconds\n-  m = GetMetrics();\n-  EXPECT_GT(m.db_stats[0].tiered_entries, 0u);\n+  EXPECT_TRUE(WaitUntilTieredEntriesGT(0));\n }\n \n TEST_F(TieredStorageTest, AddBigValuesWithExpire) {\n   const int kKeyNum = 10;\n \n   FillKeysWithExpire(kKeyNum, 8000);\n-  usleep(20000);  // 20 milliseconds\n-\n-  Metrics m = GetMetrics();\n-  EXPECT_EQ(m.db_stats[0].tiered_entries, 10);\n+  EXPECT_TRUE(WaitUntilTieredEntriesEQ(10));\n \n   for (int i = 0; i < kKeyNum; ++i) {\n     auto resp = Run({\"ttl\", StrCat(\"k\", i)});\n     EXPECT_GT(resp.GetInt(), 0);\n   }\n \n-  m = GetMetrics();\n+  Metrics m = GetMetrics();\n   EXPECT_EQ(m.db_stats[0].tiered_entries, 10);\n }\n \n@@ -222,34 +227,28 @@ TEST_F(TieredStorageTest, AddSmallValuesWithExpire) {\n   const int kKeyNum = 100;\n \n   FillKeysWithExpire(kKeyNum);\n-  usleep(20000);  // 20 milliseconds\n-\n-  Metrics m = GetMetrics();\n-  EXPECT_GT(m.db_stats[0].tiered_entries, 0);\n+  EXPECT_TRUE(WaitUntilTieredEntriesGT(0));\n \n   for (int i = 0; i < kKeyNum; ++i) {\n     auto resp = Run({\"ttl\", StrCat(\"k\", i)});\n     EXPECT_GT(resp.GetInt(), 0);\n   }\n-  m = GetMetrics();\n+  Metrics m = GetMetrics();\n   EXPECT_GT(m.db_stats[0].tiered_entries, 0);\n }\n \n TEST_F(TieredStorageTest, SetAndExpire) {\n   string val(5000, 'a');\n   Run({\"set\", \"key\", val});\n-  usleep(20000);  // 20 milliseconds\n-  Metrics m = GetMetrics();\n-  EXPECT_EQ(m.db_stats[0].tiered_entries, 1);\n+  EXPECT_TRUE(WaitUntilTieredEntriesEQ(1));\n+\n   Run({\"expire\", \"key\", \"3\"});\n-  m = GetMetrics();\n+  Metrics m = GetMetrics();\n   EXPECT_EQ(m.db_stats[0].tiered_entries, 1);\n \n   Run({\"set\", \"key\", val});\n-  usleep(20000);  // 20 milliseconds\n+  EXPECT_TRUE(WaitUntilTieredEntriesEQ(0));\n \n-  m = GetMetrics();\n-  EXPECT_EQ(m.db_stats[0].tiered_entries, 0);\n   Run({\"expire\", \"key\", \"3\"});\n }\n \n@@ -259,36 +258,30 @@ TEST_F(TieredStorageTest, SetAndGet) {\n \n   Run({\"set\", \"key1\", val1});\n   Run({\"set\", \"key2\", val1});\n-  usleep(20000);  // 20 milliseconds\n+  EXPECT_TRUE(WaitUntilTieredEntriesEQ(2));\n   Metrics m = GetMetrics();\n-  EXPECT_EQ(m.db_stats[0].tiered_entries, 2);\n   EXPECT_EQ(m.db_stats[0].obj_memory_usage, 0);\n \n   EXPECT_EQ(Run({\"get\", \"key1\"}), val1);\n-  usleep(20000);  // 20 milliseconds\n+  EXPECT_TRUE(WaitUntilTieredEntriesEQ(1));\n   m = GetMetrics();\n-  EXPECT_EQ(m.db_stats[0].tiered_entries, 1);\n   EXPECT_GT(m.db_stats[0].obj_memory_usage, 0);\n \n   Run({\"set\", \"key1\", val2});\n-  usleep(20000);  // 20 milliseconds\n+  EXPECT_TRUE(WaitUntilTieredEntriesEQ(1));\n   m = GetMetrics();\n-  EXPECT_EQ(m.db_stats[0].tiered_entries, 1);\n   EXPECT_GT(m.db_stats[0].obj_memory_usage, 0);\n \n   Run({\"set\", \"key2\", val2});\n-  usleep(20000);  // 20 milliseconds\n+  EXPECT_TRUE(WaitUntilTieredEntriesEQ(0));\n   m = GetMetrics();\n-  EXPECT_EQ(m.db_stats[0].tiered_entries, 0);\n   EXPECT_GT(m.db_stats[0].obj_memory_usage, 0);\n \n   EXPECT_EQ(Run({\"get\", \"key1\"}), val2);\n   EXPECT_EQ(Run({\"get\", \"key2\"}), val2);\n \n   Run({\"set\", \"key3\", val1});\n-  usleep(20000);  // 20 milliseconds\n-  m = GetMetrics();\n-  EXPECT_EQ(m.db_stats[0].tiered_entries, 1);\n+  EXPECT_TRUE(WaitUntilTieredEntriesEQ(1));\n \n   Run({\"del\", \"key1\"});\n   Run({\"del\", \"key2\"});\n@@ -304,22 +297,18 @@ TEST_F(TieredStorageTest, GetValueValidation) {\n \n   Run({\"set\", \"key1\", val1});\n   Run({\"set\", \"key2\", val2});\n-  usleep(20000);  // 20 milliseconds\n-  Metrics m = GetMetrics();\n-  EXPECT_EQ(m.db_stats[0].tiered_entries, 2);\n+  EXPECT_TRUE(WaitUntilTieredEntriesEQ(2));\n \n   EXPECT_EQ(Run({\"get\", \"key1\"}), val1);\n   EXPECT_EQ(Run({\"get\", \"key2\"}), val2);\n-  m = GetMetrics();\n+  Metrics m = GetMetrics();\n   EXPECT_EQ(m.db_stats[0].tiered_entries, 0);\n \n   for (unsigned i = 0; i < 100; ++i) {\n     string val(100, i);  // small entries\n     Run({\"set\", StrCat(\"k\", i), val});\n   }\n-  usleep(20000);  // 20 milliseconds\n-  m = GetMetrics();\n-  EXPECT_GE(m.db_stats[0].tiered_entries, 0);\n+  EXPECT_TRUE(WaitUntilTieredEntriesGT(0));\n \n   for (unsigned i = 0; i < 100; ++i) {\n     string val(100, i);  // small entries\n",
  "problem_statement": "Unit test TieredStorageTest.AddBigValues fails\nTest randomly failed on one of my PR's. I attached the links to the failed run. We should investigate.\r\n\r\nhttps://github.com/dragonflydb/dragonfly/actions/runs/7775709906/job/21202137854\r\n\r\nhttps://pipelinesghubeus2.actions.githubusercontent.com/rQAtrEN0VahPMiMfdqeNqUbtmGcu8EPKCOchqahRClSFKragtP/_apis/pipelines/1/runs/12092/signedlogcontent/8?urlExpires=2024-02-05T08%3A37%3A28.0812862Z&urlSigningMethod=HMACV1&urlSignature=o5DUrn6tsE9IUW7m62pwArZsM%2Fyc5DrIgDsiX81jmTs%3D\n",
  "hints_text": "",
  "created_at": "2024-02-07T13:14:43Z",
  "modified_files": [
    "src/server/tiered_storage.cc",
    "src/server/tiered_storage.h"
  ],
  "modified_test_files": [
    "src/server/test_utils.cc",
    "src/server/test_utils.h",
    "src/server/tiered_storage_test.cc"
  ]
}