diff --git a/src/server/detail/save_stages_controller.cc b/src/server/detail/save_stages_controller.cc
index 4db66897e4bd..0151652c81d5 100644
--- a/src/server/detail/save_stages_controller.cc
+++ b/src/server/detail/save_stages_controller.cc
@@ -98,6 +98,7 @@ GenericError RdbSnapshot::Start(SaveMode save_mode, const std::string& path,
                                 const RdbSaver::GlobalData& glob_data) {
   VLOG(1) << "Saving RDB " << path;
 
+  CHECK_NOTNULL(snapshot_storage_);
   auto res = snapshot_storage_->OpenWriteFile(path);
   if (!res) {
     return res.error();
diff --git a/src/server/server_family.cc b/src/server/server_family.cc
index 09b1c5e6ea13..cf13f8d5034b 100644
--- a/src/server/server_family.cc
+++ b/src/server/server_family.cc
@@ -420,13 +420,6 @@ void ServerFamily::Init(util::AcceptServer* acceptor, std::vector<facade::Listen
       pb_task_->AwaitBrief([&] { return pb_task_->AddPeriodic(period_ms, cache_cb); });
 #endif
 
-  // check for '--replicaof' before loading anything
-  if (ReplicaOfFlag flag = GetFlag(FLAGS_replicaof); flag.has_value()) {
-    service_.proactor_pool().GetNextProactor()->Await(
-        [this, &flag]() { this->Replicate(flag.host, flag.port); });
-    return;  // DONT load any snapshots
-  }
-
   string flag_dir = GetFlag(FLAGS_dir);
   if (IsCloudPath(flag_dir)) {
     aws_ = make_unique<cloud::AWS>("s3");
@@ -441,6 +434,13 @@ void ServerFamily::Init(util::AcceptServer* acceptor, std::vector<facade::Listen
     snapshot_storage_ = std::make_shared<detail::FileSnapshotStorage>(nullptr);
   }
 
+  // check for '--replicaof' before loading anything
+  if (ReplicaOfFlag flag = GetFlag(FLAGS_replicaof); flag.has_value()) {
+    service_.proactor_pool().GetNextProactor()->Await(
+        [this, &flag]() { this->Replicate(flag.host, flag.port); });
+    return;  // DONT load any snapshots
+  }
+
   const auto load_path_result = snapshot_storage_->LoadPath(flag_dir, GetFlag(FLAGS_dbfilename));
   if (load_path_result) {
     const std::string load_path = *load_path_result;
