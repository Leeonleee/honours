{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1150,
  "instance_id": "dragonflydb__dragonfly-1150",
  "issue_numbers": [
    "1132"
  ],
  "base_commit": "574ae24feceba600c5aa1fe4683b7eee64fe9ce8",
  "patch": "diff --git a/src/server/replica.cc b/src/server/replica.cc\nindex 94220da467e2..508415878350 100644\n--- a/src/server/replica.cc\n+++ b/src/server/replica.cc\n@@ -1229,7 +1229,8 @@ Replica::Info Replica::GetInfo() const {\n     res.host = master_context_.host;\n     res.port = master_context_.port;\n     res.master_link_established = (state_mask_.load() & R_TCP_CONNECTED);\n-    res.sync_in_progress = (state_mask_.load() & R_SYNCING);\n+    res.full_sync_in_progress = (state_mask_.load() & R_SYNCING);\n+    res.full_sync_done = (state_mask_.load() & R_SYNC_OK);\n     res.master_last_io_sec = (ProactorBase::GetMonotonicTimeNs() - last_io_time) / 1000000000UL;\n     return res;\n   });\ndiff --git a/src/server/replica.h b/src/server/replica.h\nindex 019b2a73f823..9baebc5193b2 100644\n--- a/src/server/replica.h\n+++ b/src/server/replica.h\n@@ -192,7 +192,8 @@ class Replica {\n     std::string host;\n     uint16_t port;\n     bool master_link_established;\n-    bool sync_in_progress;      // snapshot sync.\n+    bool full_sync_in_progress;\n+    bool full_sync_done;\n     time_t master_last_io_sec;  // monotonic clock.\n   };\n \ndiff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex a5ea9dccfb7d..f94f29898436 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -1685,7 +1685,7 @@ void ServerFamily::Info(CmdArgList args, ConnectionContext* cntx) {\n       const char* link = rinfo.master_link_established ? \"up\" : \"down\";\n       append(\"master_link_status\", link);\n       append(\"master_last_io_seconds_ago\", rinfo.master_last_io_sec);\n-      append(\"master_sync_in_progress\", rinfo.sync_in_progress);\n+      append(\"master_sync_in_progress\", rinfo.full_sync_in_progress);\n     }\n   }\n \n@@ -1988,17 +1988,20 @@ void ServerFamily::Role(CmdArgList args, ConnectionContext* cntx) {\n \n   } else {\n     auto replica_ptr = replica_;\n+    CHECK(replica_ptr);\n     Replica::Info rinfo = replica_ptr->GetInfo();\n     (*cntx)->StartArray(4);\n     (*cntx)->SendBulkString(\"replica\");\n     (*cntx)->SendBulkString(rinfo.host);\n     (*cntx)->SendBulkString(absl::StrCat(rinfo.port));\n-    if (rinfo.sync_in_progress) {\n+    if (rinfo.full_sync_done) {\n+      (*cntx)->SendBulkString(\"stable_sync\");\n+    } else if (rinfo.full_sync_in_progress) {\n       (*cntx)->SendBulkString(\"full_sync\");\n-    } else if (!rinfo.master_link_established) {\n-      (*cntx)->SendBulkString(\"connecting\");\n+    } else if (rinfo.master_link_established) {\n+      (*cntx)->SendBulkString(\"preparation\");\n     } else {\n-      (*cntx)->SendBulkString(\"stable_sync\");\n+      (*cntx)->SendBulkString(\"connecting\");\n     }\n   }\n }\n",
  "test_patch": "diff --git a/tests/dragonfly/replication_test.py b/tests/dragonfly/replication_test.py\nindex 635ce02cddc5..7ff6f390f760 100644\n--- a/tests/dragonfly/replication_test.py\n+++ b/tests/dragonfly/replication_test.py\n@@ -871,3 +871,32 @@ async def test_script_transfer(df_local_factory):\n         assert await c_replica.evalsha(sha, 0) == i\n     await c_master.connection_pool.disconnect()\n     await c_replica.connection_pool.disconnect()\n+\n+\n+@dfly_args({\"proactor_threads\": 4})\n+@pytest.mark.asyncio\n+async def test_role_command(df_local_factory, n_keys=20):\n+    master = df_local_factory.create(port=BASE_PORT)\n+    replica = df_local_factory.create(port=BASE_PORT+1, logtostdout=True)\n+\n+    df_local_factory.start_all([master, replica])\n+\n+    c_master = aioredis.Redis(port=master.port)\n+    c_replica = aioredis.Redis(port=replica.port)\n+\n+    assert await c_master.execute_command(\"role\") == [b'master', []]\n+    await c_replica.execute_command(f\"REPLICAOF localhost {master.port}\")\n+    await wait_available_async(c_replica)\n+\n+    assert await c_master.execute_command(\"role\") == [\n+        b'master', [[b'127.0.0.1', bytes(str(replica.port), 'ascii'), b'stable_sync']]]\n+    assert await c_replica.execute_command(\"role\") == [\n+        b'replica', b'localhost', bytes(str(master.port), 'ascii'), b'stable_sync']\n+\n+    master.stop()\n+    await asyncio.sleep(0.1)\n+    assert await c_replica.execute_command(\"role\") == [\n+        b'replica', b'localhost', bytes(str(master.port), 'ascii'), b'connecting']\n+\n+    await c_master.connection_pool.disconnect()\n+    await c_replica.connection_pool.disconnect()\n",
  "problem_statement": "replication: `stable sync` status without a full sync\n**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\nFor https://github.com/dragonflydb/dragonfly-operator/pull/59, The Operator needs a way to know\r\nif a replica has done a full sync, and is under stable sync before moving to rolling out another replica\r\nso that we maintain high availability.\r\n\r\nLooking at [the code](https://github.com/dragonflydb/dragonfly/blob/ba19cc1047ebc337a209a35c7968984a7d202690/src/server/server_family.cc#L2000) for `role`, There seems to be an error where `stable sync` can be returned even\r\nwhen a full sync hasn't happened yet. (cc: @ashotland)\r\n\r\nParallelly, We also need this information to be under `info replication` as [go-redis](https://github.com/redis/go-redis) \r\nonly supports the `info` command. This makes it easy for the Operator.\r\n\r\n**Expected behavior**\r\n\r\n- Reply `stable sync` only when there a full sync has happened\r\n- Add this `stable sync` information into the `info replication` command.\n",
  "hints_text": "",
  "created_at": "2023-04-27T13:26:23Z",
  "modified_files": [
    "src/server/replica.cc",
    "src/server/replica.h",
    "src/server/server_family.cc"
  ],
  "modified_test_files": [
    "tests/dragonfly/replication_test.py"
  ]
}