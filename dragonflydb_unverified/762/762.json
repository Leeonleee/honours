{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 762,
  "instance_id": "dragonflydb__dragonfly-762",
  "issue_numbers": [
    "752"
  ],
  "base_commit": "448508a23afb43015b6ee63b2b3930500c93c6bd",
  "patch": "diff --git a/src/server/transaction.cc b/src/server/transaction.cc\nindex 040a01ceb6fe..3db3f0abd4ea 100644\n--- a/src/server/transaction.cc\n+++ b/src/server/transaction.cc\n@@ -82,6 +82,7 @@ Transaction::~Transaction() {\n OpStatus Transaction::InitByArgs(DbIndex index, CmdArgList args) {\n   db_index_ = index;\n   cmd_with_full_args_ = args;\n+  local_result_ = OpStatus::OK;\n \n   if (IsGlobal()) {\n     unique_shard_cnt_ = shard_set->size();\n",
  "test_patch": "diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc\nindex 432dd73b40d5..4ca3fd437a7f 100644\n--- a/src/server/dragonfly_test.cc\n+++ b/src/server/dragonfly_test.cc\n@@ -971,6 +971,19 @@ TEST_F(DefragDflyEngineTest, TestDefragOption) {\n   });\n }\n \n+TEST_F(DflyEngineTest, Issue752) {\n+  // https://github.com/dragonflydb/dragonfly/issues/752\n+  // local_result_ member was not reset between commands\n+  Run({\"multi\"});\n+  auto resp = Run({\"llen\", kKey1});\n+  ASSERT_EQ(resp, \"QUEUED\");\n+  resp = Run({\"del\", kKey1, kKey2});\n+  ASSERT_EQ(resp, \"QUEUED\");\n+  resp = Run({\"exec\"});\n+  ASSERT_THAT(resp, ArrLen(2));\n+  ASSERT_THAT(resp.GetVec(), ElementsAre(IntArg(0), IntArg(0)));\n+}\n+\n // TODO: to test transactions with a single shard since then all transactions become local.\n // To consider having a parameter in dragonfly engine controlling number of shards\n // unconditionally from number of cpus. TO TEST BLPOP under multi for single/multi argument case.\n",
  "problem_statement": "crash when during laravel run\nrunning from inside lua script:\r\n```\r\nF20230204 18:51:24.370568     9 generic_family.cc:652] Check failed: OpStatus::OK == status (0 vs. 2) \r\n...\r\n```\r\n\r\n[Uploading df-crash-php-artisan-horizon-clear.txt\u2026]()\r\n\n",
  "hints_text": "[df-crash-php-artisan-horizon-clear.txt](https://github.com/dragonflydb/dragonfly/files/10660363/df-crash-php-artisan-horizon-clear.txt)\r\n\nReproduces always with laravel.\r\n\r\nI run `./dragonfly    --proactor_threads=4 --vmodule=main_service=2`\r\n\r\n1. Stop horizon with `php artisan horizon:pause`\r\n1. Fill up jobs using \r\n```\r\n  $fn = function () {\r\n            $start_time = microtime(true);\r\n\r\n            $tasks = [];\r\n            for ($fork = 10; $fork--;) {\r\n                $tasks[] = function () {\r\n                    for ($jobsPerFork = 5; $jobsPerFork--;) {\r\n                        dispatch(new \\App\\Jobs\\TestJob(cacheUuid: Str::uuid()));\r\n                    }\r\n                };\r\n            }\r\n\r\n            \\Spatie\\Fork\\Fork::new()->run(...$tasks);\r\n\r\n            $execution_time = microtime(true) - $start_time;\r\n            echo \" Execution time of script = \".$execution_time.\" sec\";\r\n        };\r\n\r\n        $fn();\r\n```\r\n2. Run `php artisan horizon:clear`\r\n\r\ncrash\r\n        \nreported by @fannyfan414 \nReproduced by running `./dragonfly    --proactor_threads=4` and then\r\n\r\n`redis-cli --eval 2.lua laravel_database_queues:default laravel_database_queues:default:delayed`\r\n\r\nwhere 2.lua is:\r\n\r\n```lua\r\nredis.call('llen', KEYS[1])\r\nredis.call('del', KEYS[1], KEYS[2])\r\n```\r\n",
  "created_at": "2023-02-06T12:55:23Z",
  "modified_files": [
    "src/server/transaction.cc"
  ],
  "modified_test_files": [
    "src/server/dragonfly_test.cc"
  ]
}