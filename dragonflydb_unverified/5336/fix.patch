diff --git a/src/server/snapshot.cc b/src/server/snapshot.cc
index b809f8364ea7..732b27badd49 100644
--- a/src/server/snapshot.cc
+++ b/src/server/snapshot.cc
@@ -104,6 +104,7 @@ void SliceSnapshot::Start(bool stream_journal, SnapshotFlush allow_flush) {
 }
 
 void SliceSnapshot::StartIncremental(LSN start_lsn) {
+  VLOG(1) << "StartIncremental: " << start_lsn;
   serializer_ = std::make_unique<RdbSerializer>(compression_mode_);
 
   snapshot_fb_ = fb2::Fiber("incremental_snapshot",
@@ -319,7 +320,6 @@ size_t SliceSnapshot::FlushSerialized(SerializerBase::FlushState flush_state) {
   uint64_t running_cycles = ThisFiber::GetRunningTimeCycles();
 
   fb2::NoOpLock lk;
-
   // We create a critical section here that ensures that records are pushed in sequential order.
   // As a result, it is not possible for two fiber producers to push concurrently.
   // If A.id = 5, and then B.id = 6, and both are blocked here, it means that last_pushed_id_ < 4.
@@ -356,7 +356,10 @@ bool SliceSnapshot::PushSerialized(bool force) {
     // Async bucket serialization might have accumulated some delayed values.
     // Because we can finally block in this function, we'll await and serialize them
     do {
-      auto& entry = delayed_entries_.back();
+      // We may call PushSerialized from multiple fibers concurrently, so we need to
+      // ensure that we are not serializing the same entry concurrently.
+      DelayedEntry entry = std::move(delayed_entries_.back());
+      delayed_entries_.pop_back();
 
       // TODO: https://github.com/dragonflydb/dragonfly/issues/4654
       // there are a few problems with how we serialize external values.
@@ -367,7 +370,6 @@ bool SliceSnapshot::PushSerialized(bool force) {
 
       // TODO: to introduce RdbSerializer::SaveString that can accept a string value directly.
       serializer_->SaveEntry(entry.key, pv, entry.expire, entry.mc_flags, entry.dbid);
-      delayed_entries_.pop_back();
     } while (!delayed_entries_.empty());
 
     // blocking point.
diff --git a/src/server/snapshot.h b/src/server/snapshot.h
index c49ae9f5f7ed..b84e757f7e9d 100644
--- a/src/server/snapshot.h
+++ b/src/server/snapshot.h
@@ -68,7 +68,7 @@ class SliceSnapshot : public journal::JournalConsumerInterface {
 
   // Initialize snapshot, start bucket iteration fiber, register listeners.
   // In journal streaming mode it needs to be stopped by either Stop or Cancel.
-  enum class SnapshotFlush { kAllow, kDisallow };
+  enum class SnapshotFlush : uint8_t { kAllow, kDisallow };
 
   void Start(bool stream_journal, SnapshotFlush allow_flush = SnapshotFlush::kDisallow);
 
