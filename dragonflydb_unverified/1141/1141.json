{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1141,
  "instance_id": "dragonflydb__dragonfly-1141",
  "issue_numbers": [
    "1140"
  ],
  "base_commit": "ce5db032fce2da2155b4203639a5058e9d6960fb",
  "patch": "diff --git a/src/server/generic_family.cc b/src/server/generic_family.cc\nindex a7dcc4d195a9..2ff61d28d748 100644\n--- a/src/server/generic_family.cc\n+++ b/src/server/generic_family.cc\n@@ -723,8 +723,7 @@ void GenericFamily::Expire(CmdArgList args, ConnectionContext* cntx) {\n   }\n \n   if (int_arg > kMaxExpireDeadlineSec || int_arg < -kMaxExpireDeadlineSec) {\n-    ToLower(&args[0]);\n-    return (*cntx)->SendError(InvalidExpireTime(ArgS(args, 0)));\n+    return (*cntx)->SendError(InvalidExpireTime(cntx->cid->name()));\n   }\n \n   int_arg = std::max(int_arg, -1L);\ndiff --git a/src/server/hset_family.cc b/src/server/hset_family.cc\nindex d42fca5cd16b..5c26d2d923d2 100644\n--- a/src/server/hset_family.cc\n+++ b/src/server/hset_family.cc\n@@ -955,10 +955,11 @@ void HSetFamily::HScan(CmdArgList args, ConnectionContext* cntx) {\n \n void HSetFamily::HSet(CmdArgList args, ConnectionContext* cntx) {\n   string_view key = ArgS(args, 0);\n-  ToLower(&args[0]);\n+\n+  string_view cmd{cntx->cid->name()};\n \n   if (args.size() % 2 != 1) {\n-    return (*cntx)->SendError(facade::WrongNumArgsError(\"hset\"), kSyntaxErrType);\n+    return (*cntx)->SendError(facade::WrongNumArgsError(cmd), kSyntaxErrType);\n   }\n \n   args.remove_prefix(1);\n@@ -967,7 +968,6 @@ void HSetFamily::HSet(CmdArgList args, ConnectionContext* cntx) {\n   };\n \n   OpResult<uint32_t> result = cntx->transaction->ScheduleSingleHopT(std::move(cb));\n-  string_view cmd{cntx->cid->name()};\n \n   if (result && cmd == \"HSET\") {\n     (*cntx)->SendLong(*result);\ndiff --git a/src/server/string_family.cc b/src/server/string_family.cc\nindex 9d40564fcf04..885d0358cbf3 100644\n--- a/src/server/string_family.cc\n+++ b/src/server/string_family.cc\n@@ -1092,8 +1092,7 @@ void StringFamily::SetExGeneric(bool seconds, CmdArgList args, ConnectionContext\n   }\n \n   if (unit_vals < 1 || unit_vals >= kMaxExpireDeadlineSec) {\n-    ToLower(&args[0]);\n-    return (*cntx)->SendError(InvalidExpireTime(ArgS(args, 0)));\n+    return (*cntx)->SendError(InvalidExpireTime(cntx->cid->name()));\n   }\n \n   SetCmd::SetParams sparams;\n",
  "test_patch": "diff --git a/src/server/hset_family_test.cc b/src/server/hset_family_test.cc\nindex 5be16d1f9fe1..7999dcf2cb33 100644\n--- a/src/server/hset_family_test.cc\n+++ b/src/server/hset_family_test.cc\n@@ -225,4 +225,10 @@ TEST_F(HSetFamilyTest, TriggerConvertToStrMap) {\n   EXPECT_THAT(Run({\"HLEN\", \"hk\"}), IntArg(kElements));\n }\n \n+TEST_F(HSetFamilyTest, Issue1140) {\n+  Run({\"HSET\", \"CaseKey\", \"Foo\", \"Bar\"});\n+\n+  EXPECT_EQ(\"Bar\", Run({\"HGET\", \"CaseKey\", \"Foo\"}));\n+}\n+\n }  // namespace dfly\n",
  "problem_statement": "HSET often doesn't persist in 1.2.0\n**Describe the bug**\r\nWhen executing `HSET` for a not-yet-existing hash, often the result is `0` and no keys are saved.\r\nThe new Hash does exist though, but with 0 entries (which in redis is not possible, as an empty hash is equivalent to a non-existing hash)\r\nEven if it does persist entries, the name of the Hash is lowercased.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Insert records into a not-yet existing hash, for example like this:\r\n   ```\r\n   HSET MyHash:Yay field1 value1 field2 value2\r\n   ```\r\n2. Observe that the hash is stored as `myhash:yay` (lowercased)\r\n3. Observe that often times, the return value is 0 and the new hash is empty\r\n\r\n**Expected behavior**\r\nI expect the hash to always contain the data provided to HSET, and the return-value to reflect that.\r\nI also expect the name of the hash to be the one i provide, not a lowercased version of it.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: 22.04.2 LTS\r\n - Kernel: `Linux lindwurm 5.15.0-69-generic #76-Ubuntu SMP Fri Mar 17 17:19:29 UTC 2023 x86_64 x86_64 x86_64 GNU/Linux`\r\n - Containerized: docker compose (Docker version 23.0.1, build a5ee5b1)\r\n   docker-compose config:\r\n   ```yaml\r\n   version: '3.8'\r\n   services:\r\n     staging_dragonfly:\r\n       image: 'docker.dragonflydb.io/dragonflydb/dragonfly:v1.2.0'\r\n       restart: always\r\n       command: 'dragonfly --logtostderr --port 26379 '\r\n       ulimits:\r\n         memlock: -1\r\n       network_mode: \"host\"\r\n   ```\r\n - Dragonfly Version: df-v1.2.0-d78a9daaeb41df6e864c86c8c7903b505551d359\r\n\r\n**Reproducible Code Snippet**\r\n```bash\r\ndocker compose up -d staging_dragonfly\r\ndocker compose exec staging_dragonfly redis-cli -p 26379 HSET MyHash Field1 Value1\r\ndocker compose exec staging_dragonfly redis-cli -p 26379 HGET MyHash Field1\r\n# (nil)\r\ndocker compose exec staging_dragonfly redis-cli -p 26379 HGET myhash Field1\r\n# \"Value1\"\r\n```\r\n\r\n**Additional context**\r\nThis issue does not happen on dragonfly version 1.1.2.\r\n\r\n**UPDATE**\r\n- Added detailed software versions and content of config files\r\n- Added exact replication steps\n",
  "hints_text": "",
  "created_at": "2023-04-26T04:34:48Z",
  "modified_files": [
    "src/server/generic_family.cc",
    "src/server/hset_family.cc",
    "src/server/string_family.cc"
  ],
  "modified_test_files": [
    "src/server/hset_family_test.cc"
  ]
}