{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2429,
  "instance_id": "dragonflydb__dragonfly-2429",
  "issue_numbers": [
    "2400"
  ],
  "base_commit": "3031e7a3eead8d6f2d2c50308d807b98b5671735",
  "patch": "diff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex 2ab710bc355e..e76c38f5a288 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -581,6 +581,10 @@ std::string_view GetOSString() {\n   return os_string;\n }\n \n+string_view GetRedisMode() {\n+  return ClusterConfig::IsEnabledOrEmulated() ? \"cluster\"sv : \"standalone\"sv;\n+}\n+\n }  // namespace\n \n ServerFamily::ServerFamily(Service* service) : service_(*service) {\n@@ -1738,7 +1742,7 @@ void ServerFamily::Info(CmdArgList args, ConnectionContext* cntx) {\n \n     append(\"redis_version\", kRedisVersion);\n     append(\"dragonfly_version\", GetVersion());\n-    append(\"redis_mode\", \"standalone\");\n+    append(\"redis_mode\", GetRedisMode());\n     append(\"arch_bits\", 64);\n     append(\"os\", GetOSString());\n     append(\"multiplexing_api\", multiplex_api);\n@@ -2121,7 +2125,7 @@ void ServerFamily::Hello(CmdArgList args, ConnectionContext* cntx) {\n   rb->SendBulkString(\"id\");\n   rb->SendLong(cntx->conn()->GetClientId());\n   rb->SendBulkString(\"mode\");\n-  rb->SendBulkString(\"standalone\");\n+  rb->SendBulkString(GetRedisMode());\n   rb->SendBulkString(\"role\");\n   rb->SendBulkString((*ServerState::tlocal()).is_master ? \"master\" : \"slave\");\n }\n",
  "test_patch": "diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc\nindex 739ce25f4263..25308541c173 100644\n--- a/src/server/dragonfly_test.cc\n+++ b/src/server/dragonfly_test.cc\n@@ -262,17 +262,19 @@ TEST_F(DflyEngineTest, Hello) {\n   resp = Run({\"hello\", \"2\"});\n   ASSERT_THAT(resp, ArrLen(14));\n \n-  EXPECT_THAT(resp.GetVec(),\n-              ElementsAre(\"server\", \"redis\", \"version\", \"6.2.11\", \"dragonfly_version\",\n-                          ArgType(RespExpr::STRING), \"proto\", IntArg(2), \"id\",\n-                          ArgType(RespExpr::INT64), \"mode\", \"standalone\", \"role\", \"master\"));\n+  EXPECT_THAT(\n+      resp.GetVec(),\n+      ElementsAre(\"server\", \"redis\", \"version\", \"6.2.11\", \"dragonfly_version\",\n+                  ArgType(RespExpr::STRING), \"proto\", IntArg(2), \"id\", ArgType(RespExpr::INT64),\n+                  \"mode\", testing::AnyOf(\"standalone\", \"cluster\"), \"role\", \"master\"));\n \n   resp = Run({\"hello\", \"3\"});\n   ASSERT_THAT(resp, ArrLen(14));\n-  EXPECT_THAT(resp.GetVec(),\n-              ElementsAre(\"server\", \"redis\", \"version\", \"6.2.11\", \"dragonfly_version\",\n-                          ArgType(RespExpr::STRING), \"proto\", IntArg(3), \"id\",\n-                          ArgType(RespExpr::INT64), \"mode\", \"standalone\", \"role\", \"master\"));\n+  EXPECT_THAT(\n+      resp.GetVec(),\n+      ElementsAre(\"server\", \"redis\", \"version\", \"6.2.11\", \"dragonfly_version\",\n+                  ArgType(RespExpr::STRING), \"proto\", IntArg(3), \"id\", ArgType(RespExpr::INT64),\n+                  \"mode\", testing::AnyOf(\"standalone\", \"cluster\"), \"role\", \"master\"));\n \n   EXPECT_THAT(Run({\"hello\", \"2\", \"AUTH\", \"uname\", \"pwd\"}),\n               ErrArg(\"WRONGPASS invalid username-password pair or user is disabled.\"));\n",
  "problem_statement": "info server and hello should return redis_mode as configured \ncurrently we return a hardcoded \"standalone\" value for both hello API and for \"redis_mode\" in the INFO response\n",
  "hints_text": "",
  "created_at": "2024-01-17T07:24:03Z",
  "modified_files": [
    "src/server/server_family.cc"
  ],
  "modified_test_files": [
    "src/server/dragonfly_test.cc"
  ]
}