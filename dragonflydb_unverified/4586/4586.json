{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4586,
  "instance_id": "dragonflydb__dragonfly-4586",
  "issue_numbers": [
    "4583"
  ],
  "base_commit": "d0087aaa6a7c675f29336b8b7f476646675f93c4",
  "patch": "diff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex ce3208cf0692..8bb0bb5fa479 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -1978,7 +1978,7 @@ void Service::EvalInternal(CmdArgList args, const EvalArgs& eval_args, Interpret\n     });\n \n     ++ServerState::tlocal()->stats.eval_shardlocal_coordination_cnt;\n-    tx->PrepareMultiForScheduleSingleHop(cntx->ns, *sid, tx->GetDbIndex(), args);\n+    tx->PrepareMultiForScheduleSingleHop(cntx->ns, *sid, cntx->db_index(), args);\n     tx->ScheduleSingleHop([&](Transaction*, EngineShard*) {\n       boost::intrusive_ptr<Transaction> stub_tx =\n           new Transaction{tx, *sid, slot_checker.GetUniqueSlotId()};\n",
  "test_patch": "diff --git a/src/server/list_family_test.cc b/src/server/list_family_test.cc\nindex 903eb102c85d..0b602c364b5c 100644\n--- a/src/server/list_family_test.cc\n+++ b/src/server/list_family_test.cc\n@@ -1337,5 +1337,18 @@ TEST_F(ListFamilyTest, AwakeMulti) {\n   f3.Join();\n }\n \n+TEST_F(ListFamilyTest, AwakeDb1) {\n+  const char* kDbId = \"1\";\n+\n+  auto f1 = pp_->at(1)->LaunchFiber(Launch::dispatch, [&] {\n+    Run(\"C\", {\"SELECT\", kDbId});\n+    Run(\"C\", {\"brpoplpush\", \"x\", \"y\", \"0\"});\n+    ASSERT_EQ(GetDebugInfo(\"C\").shards_count, 1);\n+  });\n+  Run({\"SELECT\", kDbId});\n+  Run({\"EVAL\", \"redis.call('LPUSH', KEYS[1], 'val'); return 1;\", \"1\", \"x\"});\n+  f1.Join();\n+}\n+\n #pragma GCC diagnostic pop\n }  // namespace dfly\n",
  "problem_statement": "test_blocking_multiple_dbs deadlock\nhttps://github.com/dragonflydb/dragonfly/actions/runs/13237220990/job/36944522073\n",
  "hints_text": "@romange Current progress:\nwe have some bug in lock Acquire when running the test.\nRunning eval thinks the lock is not  Acquired and there for the eval is executed in the flow of Optimistic execution.\nI narrowed the test to only run one blocking command blmove list{0} sink{0} LEFT LEFT 0\nand after that run one eval command that pushes to list{0} \nIn this flow I see that the test is failing and the print that eval is running in Optimistic execution because it thinks that the lock for key  list{0}  is not acquired. \n\nWhen running the same flow from redis-cli I dont see this bug.\nThe eval sees that the lock is acquired and does not executes the cb in Optimistic execution.\n\n@adiholden  We do acquire `intent locks` even when we have `optimistic execution`. \n\nThis test did not fail since yesterday where we merged this: https://github.com/dragonflydb/dragonfly/commit/13313507bfcc41b39e8ffa86cbf9d204419adadc\n\nIt's very possible that I missed some change during the review that changed some of the behaviour around transactions. Maybe worth looking at because the test (deadlock) started failing after this pr got merged ",
  "created_at": "2025-02-10T14:17:09Z",
  "modified_files": [
    "src/server/main_service.cc"
  ],
  "modified_test_files": [
    "src/server/list_family_test.cc"
  ]
}