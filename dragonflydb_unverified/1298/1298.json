{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1298,
  "instance_id": "dragonflydb__dragonfly-1298",
  "issue_numbers": [
    "1278"
  ],
  "base_commit": "9ab3ea9e74ad0fef37bee43aa971601c1f5d0c76",
  "patch": "diff --git a/src/server/cluster/cluster_family.cc b/src/server/cluster/cluster_family.cc\nindex 6db421fa69f5..7b14311773f5 100644\n--- a/src/server/cluster/cluster_family.cc\n+++ b/src/server/cluster/cluster_family.cc\n@@ -34,6 +34,10 @@ namespace {\n using namespace std;\n using namespace facade;\n using CI = CommandId;\n+using ClusterShard = ClusterConfig::ClusterShard;\n+using ClusterShards = ClusterConfig::ClusterShards;\n+using Node = ClusterConfig::Node;\n+using SlotRange = ClusterConfig::SlotRange;\n \n constexpr string_view kClusterDisabled =\n     \"Cluster is disabled. Enabled via passing --cluster_mode=emulated|yes\";\n@@ -61,8 +65,8 @@ bool ClusterFamily::IsEnabledOrEmulated() const {\n \n // TODO: Extend this method to accommodate the needs of `CLUSTER NODES` and `CLUSTER SLOTS`.\n // TODO: Also make this function safe in that it will read the state atomically.\n-ClusterConfig::ClusterShard ClusterFamily::GetEmulatedShardInfo(ConnectionContext* cntx) const {\n-  ClusterConfig::ClusterShard info{\n+ClusterShard ClusterFamily::GetEmulatedShardInfo(ConnectionContext* cntx) const {\n+  ClusterShard info{\n       .slot_ranges = {{.start = 0, .end = ClusterConfig::kMaxSlotNum}},\n       .master = {},\n       .replicas = {},\n@@ -95,41 +99,6 @@ ClusterConfig::ClusterShard ClusterFamily::GetEmulatedShardInfo(ConnectionContex\n   return info;\n }\n \n-string ClusterFamily::BuildClusterNodeReply(ConnectionContext* cntx) const {\n-  ServerState& etl = *ServerState::tlocal();\n-  auto epoch_master_time = std::time(nullptr) * 1000;\n-  if (etl.is_master) {\n-    std::string cluster_announce_ip = absl::GetFlag(FLAGS_cluster_announce_ip);\n-    std::string preferred_endpoint =\n-        cluster_announce_ip.empty() ? cntx->owner()->LocalBindAddress() : cluster_announce_ip;\n-    auto vec = server_family_->GetDflyCmd()->GetReplicasRoleInfo();\n-    auto my_port = absl::GetFlag(FLAGS_port);\n-    const char* connect_state = vec.empty() ? \"disconnected\" : \"connected\";\n-    std::string msg = absl::StrCat(server_family_->master_id(), \" \", preferred_endpoint, \":\",\n-                                   my_port, \"@\", my_port, \" myself,master - 0 \", epoch_master_time,\n-                                   \" 1 \", connect_state, \" 0-16383\\r\\n\");\n-    if (!vec.empty()) {  // info about the replica\n-      const auto& info = vec[0];\n-      absl::StrAppend(&msg, etl.remote_client_id_, \" \", info.address, \":\", info.listening_port, \"@\",\n-                      info.listening_port, \" slave 0 \", server_family_->master_id(), \" 1 \",\n-                      connect_state, \"\\r\\n\");\n-    }\n-    return msg;\n-  } else {\n-    Replica::Info info = server_family_->GetReplicaInfo();\n-    auto my_ip = cntx->owner()->LocalBindAddress();\n-    auto my_port = absl::GetFlag(FLAGS_port);\n-    const char* connect_state = info.master_link_established ? \"connected\" : \"disconnected\";\n-    std::string msg = absl::StrCat(server_family_->master_id(), \" \", my_ip, \":\", my_port, \"@\",\n-                                   my_port, \" myself,slave \", server_family_->master_id(), \" 0 \",\n-                                   epoch_master_time, \" 1 \", connect_state, \"\\r\\n\");\n-    absl::StrAppend(&msg, server_family_->GetReplicaMasterId(), \" \", info.host, \":\", info.port, \"@\",\n-                    info.port, \" master - 0 \", epoch_master_time, \" 1 \", connect_state,\n-                    \" 0-16383\\r\\n\");\n-    return msg;\n-  }\n-}\n-\n void ClusterFamily::ClusterHelp(ConnectionContext* cntx) {\n   string_view help_arr[] = {\n       \"CLUSTER <subcommand> [<arg> [value] [opt] ...]. Subcommands are:\",\n@@ -148,11 +117,11 @@ void ClusterFamily::ClusterHelp(ConnectionContext* cntx) {\n }\n \n namespace {\n-void ClusterShardsImpl(const ClusterConfig::ClusterShards& config, ConnectionContext* cntx) {\n+void ClusterShardsImpl(const ClusterShards& config, ConnectionContext* cntx) {\n   // For more details https://redis.io/commands/cluster-shards/\n   constexpr unsigned int kEntrySize = 4;\n \n-  auto WriteNode = [&](const ClusterConfig::Node& node, string_view role) {\n+  auto WriteNode = [&](const Node& node, string_view role) {\n     constexpr unsigned int kNodeSize = 14;\n     (*cntx)->StartArray(kNodeSize);\n     (*cntx)->SendBulkString(\"id\");\n@@ -203,9 +172,9 @@ void ClusterFamily::ClusterShards(ConnectionContext* cntx) {\n }\n \n namespace {\n-void ClusterSlotsImpl(const ClusterConfig::ClusterShards& config, ConnectionContext* cntx) {\n+void ClusterSlotsImpl(const ClusterShards& config, ConnectionContext* cntx) {\n   // For more details https://redis.io/commands/cluster-slots/\n-  auto WriteNode = [&](const ClusterConfig::Node& node) {\n+  auto WriteNode = [&](const Node& node) {\n     constexpr unsigned int kNodeSize = 3;\n     (*cntx)->StartArray(kNodeSize);\n     (*cntx)->SendBulkString(node.ip);\n@@ -245,12 +214,57 @@ void ClusterFamily::ClusterSlots(ConnectionContext* cntx) {\n   }\n }\n \n+namespace {\n+void ClusterNodesImpl(const ClusterShards& config, string_view my_id, ConnectionContext* cntx) {\n+  // For more details https://redis.io/commands/cluster-nodes/\n+\n+  string result;\n+\n+  auto WriteNode = [&](const Node& node, string_view role, string_view master_id,\n+                       const vector<SlotRange>& ranges) {\n+    absl::StrAppend(&result, node.id, \" \");\n+\n+    absl::StrAppend(&result, node.ip, \":\", node.port, \"@\", node.port, \" \");\n+\n+    if (my_id == node.id) {\n+      absl::StrAppend(&result, \"myself,\");\n+    }\n+    absl::StrAppend(&result, role, \" \");\n+\n+    absl::StrAppend(&result, master_id, \" \");\n+\n+    absl::StrAppend(&result, \"0 0 0 connected\");\n+\n+    for (const auto& range : ranges) {\n+      absl::StrAppend(&result, \" \", range.start);\n+      if (range.start != range.end) {\n+        absl::StrAppend(&result, \"-\", range.end);\n+      }\n+    }\n+\n+    absl::StrAppend(&result, \"\\r\\n\");\n+  };\n+\n+  for (const auto& shard : config) {\n+    WriteNode(shard.master, \"master\", \"-\", shard.slot_ranges);\n+    for (const auto& replica : shard.replicas) {\n+      // Only the master prints ranges, so we send an empty set for replicas.\n+      WriteNode(replica, \"slave\", shard.master.id, {});\n+    }\n+  }\n+\n+  return (*cntx)->SendBulkString(result);\n+}\n+}  // namespace\n+\n void ClusterFamily::ClusterNodes(ConnectionContext* cntx) {\n-  // Support for NODES commands can help in case we are working in cluster mode\n-  // In this case, we can save information about the cluster\n-  // In case this is the master, it can save the information about the replica from this command\n-  std::string msg = BuildClusterNodeReply(cntx);\n-  (*cntx)->SendBulkString(msg);\n+  if (is_emulated_cluster_) {\n+    return ClusterNodesImpl({GetEmulatedShardInfo(cntx)}, server_family_->master_id(), cntx);\n+  } else if (cluster_config_->IsConfigured()) {\n+    return ClusterNodesImpl(cluster_config_->GetConfig(), server_family_->master_id(), cntx);\n+  } else {\n+    return (*cntx)->SendError(kClusterNotConfigured);\n+  }\n }\n \n void ClusterFamily::ClusterInfo(ConnectionContext* cntx) {\ndiff --git a/src/server/cluster/cluster_family.h b/src/server/cluster/cluster_family.h\nindex aa2f1139b506..73e85906c051 100644\n--- a/src/server/cluster/cluster_family.h\n+++ b/src/server/cluster/cluster_family.h\n@@ -47,8 +47,6 @@ class ClusterFamily {\n   void DflyClusterGetSlotInfo(CmdArgList args, ConnectionContext* cntx);\n   void DflyClusterMyId(CmdArgList args, ConnectionContext* cntx);\n \n-  std::string BuildClusterNodeReply(ConnectionContext* cntx) const;\n-\n   ClusterConfig::ClusterShard GetEmulatedShardInfo(ConnectionContext* cntx) const;\n \n   bool is_emulated_cluster_ = false;\n",
  "test_patch": "diff --git a/src/server/cluster_family_test.cc b/src/server/cluster_family_test.cc\nindex 0f6279d43f59..3c5ab00c6b34 100644\n--- a/src/server/cluster_family_test.cc\n+++ b/src/server/cluster_family_test.cc\n@@ -67,6 +67,7 @@ TEST_F(ClusterFamilyTest, ClusterConfigInvalidJSON) {\n \n   EXPECT_THAT(Run({\"cluster\", \"shards\"}), ErrArg(\"Cluster is not yet configured\"));\n   EXPECT_THAT(Run({\"cluster\", \"slots\"}), ErrArg(\"Cluster is not yet configured\"));\n+  EXPECT_THAT(Run({\"cluster\", \"nodes\"}), ErrArg(\"Cluster is not yet configured\"));\n }\n \n TEST_F(ClusterFamilyTest, ClusterConfigInvalidConfig) {\n@@ -201,6 +202,9 @@ TEST_F(ClusterFamilyTest, ClusterConfigNoReplicas) {\n                                         \"10.0.0.1\",         //\n                                         IntArg(7'000),      //\n                                         \"abcd1234\")))));\n+\n+  EXPECT_EQ(Run({\"cluster\", \"nodes\"}),\n+            \"abcd1234 10.0.0.1:7000@7000 master - 0 0 0 connected 0-16383\\r\\n\");\n }\n \n TEST_F(ClusterFamilyTest, ClusterConfigFull) {\n@@ -269,6 +273,10 @@ TEST_F(ClusterFamilyTest, ClusterConfigFull) {\n                                         \"10.0.0.10\",        //\n                                         IntArg(8'000),      //\n                                         \"wxyz\")))));\n+\n+  EXPECT_EQ(Run({\"cluster\", \"nodes\"}),\n+            \"abcd1234 10.0.0.1:7000@7000 master - 0 0 0 connected 0-16383\\r\\n\"\n+            \"wxyz 10.0.0.10:8000@8000 slave abcd1234 0 0 0 connected\\r\\n\");\n }\n \n TEST_F(ClusterFamilyTest, ClusterConfigFullMultipleInstances) {\n@@ -390,6 +398,12 @@ TEST_F(ClusterFamilyTest, ClusterConfigFullMultipleInstances) {\n                                             IntArg(8'001),      //\n                                             \"qwerty\")))))));\n \n+  EXPECT_THAT(Run({\"cluster\", \"nodes\"}),\n+              \"abcd1234 10.0.0.1:7000@7000 master - 0 0 0 connected 0-10000\\r\\n\"\n+              \"wxyz 10.0.0.10:8000@8000 slave abcd1234 0 0 0 connected\\r\\n\"\n+              \"efgh7890 10.0.0.2:7001@7001 master - 0 0 0 connected 10001-16383\\r\\n\"\n+              \"qwerty 10.0.0.11:8001@8001 slave efgh7890 0 0 0 connected\\r\\n\");\n+\n   absl::InsecureBitGen eng;\n   while (true) {\n     string random_key = GetRandomHex(eng, 40);\n@@ -541,5 +555,11 @@ TEST_F(ClusterFamilyEmulatedTest, ClusterSlots) {\n                                         RunAdmin({\"dflycluster\", \"myid\"}).GetString())))));\n }\n \n+TEST_F(ClusterFamilyEmulatedTest, ClusterNodes) {\n+  EXPECT_THAT(Run({\"cluster\", \"nodes\"}),\n+              RunAdmin({\"dflycluster\", \"myid\"}).GetString() +\n+                  \" fake-host:6379@6379 myself,master - 0 0 0 connected 0-16383\\r\\n\");\n+}\n+\n }  // namespace\n }  // namespace dfly\n",
  "problem_statement": "Implement `CLUSTER NODES` command\n\n",
  "hints_text": "",
  "created_at": "2023-05-28T11:15:49Z",
  "modified_files": [
    "src/server/cluster/cluster_family.cc",
    "src/server/cluster/cluster_family.h"
  ],
  "modified_test_files": [
    "src/server/cluster_family_test.cc"
  ]
}