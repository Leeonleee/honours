diff --git a/src/server/generic_family.cc b/src/server/generic_family.cc
index ab35c9a4f0bc..6b42d571fe4f 100644
--- a/src/server/generic_family.cc
+++ b/src/server/generic_family.cc
@@ -1471,7 +1471,7 @@ OpResult<uint32_t> OpStore(const OpArgs& op_args, std::string_view key, Iterator
   return len;
 }
 
-void GenericFamily::Sort(CmdArgList args, const CommandContext& cmd_cntx) {
+void SortGeneric(CmdArgList args, const CommandContext& cmd_cntx, bool is_read_only) {
   std::string_view key = ArgS(args, 0);
   bool alpha = false;
   bool reversed = false;
@@ -1497,7 +1497,7 @@ void GenericFamily::Sort(CmdArgList args, const CommandContext& cmd_cntx) {
       }
       bounds = {offset, limit};
       i += 2;
-    } else if (arg == "STORE") {
+    } else if (!is_read_only && arg == "STORE") {
       if (i + 1 >= args.size()) {
         return builder->SendError(kSyntaxErr);
       }
@@ -1509,6 +1509,11 @@ void GenericFamily::Sort(CmdArgList args, const CommandContext& cmd_cntx) {
     }
   }
 
+  // Asserting that if is_read_only as true, then store_key should not exist.
+  DLOG(INFO) << "is_read_only parameter: " << is_read_only
+             << " and store_key parameter: " << bool(store_key);
+  assert(((is_read_only && !bool(store_key)) || !is_read_only));
+
   ShardId source_sid = Shard(key, shard_set->size());
   OpResultTyped<SortEntryList> fetch_result;
   auto fetch_cb = [&](Transaction* t, EngineShard* shard) {
@@ -1533,7 +1538,9 @@ void GenericFamily::Sort(CmdArgList args, const CommandContext& cmd_cntx) {
   }
 
   auto result_type = fetch_result.type();
-  auto sort_call = [builder, bounds, reversed, result_type, &store_key, &cmd_cntx](auto& entries) {
+
+  auto sort_call = [result_type, bounds, reversed, is_read_only, &rb, &store_key,
+                    &cmd_cntx](auto& entries) {
     using value_t = typename std::decay_t<decltype(entries)>::value_type;
     auto cmp = reversed ? &value_t::greater : &value_t::less;
     if (bounds) {
@@ -1550,9 +1557,15 @@ void GenericFamily::Sort(CmdArgList args, const CommandContext& cmd_cntx) {
       end_it = entries.begin() + std::min(bounds->first + bounds->second, entries.size());
     }
 
-    bool is_set = (result_type == OBJ_SET || result_type == OBJ_ZSET);
-    auto* rb = static_cast<RedisReplyBuilder*>(builder);
-    if (store_key) {
+    if (!bool(store_key)) {
+      bool is_set = (result_type == OBJ_SET || result_type == OBJ_ZSET);
+      rb->StartCollection(std::distance(start_it, end_it),
+                          is_set ? RedisReplyBuilder::SET : RedisReplyBuilder::ARRAY);
+
+      for (auto it = start_it; it != end_it; ++it) {
+        rb->SendBulkString(it->key);
+      }
+    } else {
       ShardId dest_sid = Shard(store_key.value(), shard_set->size());
       OpResult<uint32_t> store_len;
       auto store_callback = [&](Transaction* t, EngineShard* shard) {
@@ -1568,17 +1581,18 @@ void GenericFamily::Sort(CmdArgList args, const CommandContext& cmd_cntx) {
       } else {
         rb->SendError(store_len.status());
       }
-    } else {
-      rb->StartCollection(std::distance(start_it, end_it),
-                          is_set ? RedisReplyBuilder::SET : RedisReplyBuilder::ARRAY);
-
-      for (auto it = start_it; it != end_it; ++it) {
-        rb->SendBulkString(it->key);
-      }
     }
   };
 
-  std::visit(std::move(sort_call), fetch_result.value());
+  std::visit(sort_call, fetch_result.value());
+}
+
+void GenericFamily::Sort(CmdArgList args, const CommandContext& cmd_cntx) {
+  SortGeneric(args, cmd_cntx, false);
+}
+
+void GenericFamily::Sort_RO(CmdArgList args, const CommandContext& cmd_cntx) {
+  SortGeneric(args, cmd_cntx, true);
 }
 
 void GenericFamily::Restore(CmdArgList args, const CommandContext& cmd_cntx) {
@@ -2004,6 +2018,7 @@ constexpr uint32_t kDump = KEYSPACE | READ | SLOW;
 constexpr uint32_t kUnlink = KEYSPACE | WRITE | FAST;
 constexpr uint32_t kStick = KEYSPACE | WRITE | FAST;
 constexpr uint32_t kSort = WRITE | SET | SORTEDSET | LIST | SLOW | DANGEROUS;
+constexpr uint32_t kSortRO = READ | SET | SORTEDSET | LIST | SLOW | DANGEROUS;
 constexpr uint32_t kMove = KEYSPACE | WRITE | FAST;
 constexpr uint32_t kRestore = KEYSPACE | WRITE | SLOW | DANGEROUS;
 constexpr uint32_t kExpireTime = KEYSPACE | READ | FAST;
@@ -2050,6 +2065,7 @@ void GenericFamily::Register(CommandRegistry* registry) {
       << CI{"UNLINK", CO::WRITE, -2, 1, -1, acl::kUnlink}.HFUNC(Unlink)
       << CI{"STICK", CO::WRITE, -2, 1, -1, acl::kStick}.HFUNC(Stick)
       << CI{"SORT", CO::WRITE, -2, 1, -1, acl::kSort}.HFUNC(Sort)
+      << CI{"SORT_RO", CO::READONLY, -2, 1, 1, acl::kSortRO}.HFUNC(Sort_RO)
       << CI{"MOVE", CO::WRITE | CO::GLOBAL_TRANS | CO::NO_AUTOJOURNAL, 3, 1, 1, acl::kMove}.HFUNC(
              Move)
       << CI{"RESTORE", CO::WRITE, -4, 1, 1, acl::kRestore}.HFUNC(Restore)
diff --git a/src/server/generic_family.h b/src/server/generic_family.h
index 2812de0744f1..27f2b796b3eb 100644
--- a/src/server/generic_family.h
+++ b/src/server/generic_family.h
@@ -39,6 +39,7 @@ class GenericFamily {
   static void Pexpire(CmdArgList args, const CommandContext& cmd_cntx);
   static void Stick(CmdArgList args, const CommandContext& cmd_cntx);
   static void Sort(CmdArgList args, const CommandContext& cmd_cntx);
+  static void Sort_RO(CmdArgList args, const CommandContext& cmd_cntx);
   static void Move(CmdArgList args, const CommandContext& cmd_cntx);
 
   static void Rename(CmdArgList args, const CommandContext& cmd_cntx);
