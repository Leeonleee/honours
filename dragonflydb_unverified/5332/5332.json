{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 5332,
  "instance_id": "dragonflydb__dragonfly-5332",
  "issue_numbers": [
    "3886"
  ],
  "base_commit": "3e3b3c34396f0a4f0f4c91083cc64edc444a496c",
  "patch": "diff --git a/src/server/generic_family.cc b/src/server/generic_family.cc\nindex ab35c9a4f0bc..6b42d571fe4f 100644\n--- a/src/server/generic_family.cc\n+++ b/src/server/generic_family.cc\n@@ -1471,7 +1471,7 @@ OpResult<uint32_t> OpStore(const OpArgs& op_args, std::string_view key, Iterator\n   return len;\n }\n \n-void GenericFamily::Sort(CmdArgList args, const CommandContext& cmd_cntx) {\n+void SortGeneric(CmdArgList args, const CommandContext& cmd_cntx, bool is_read_only) {\n   std::string_view key = ArgS(args, 0);\n   bool alpha = false;\n   bool reversed = false;\n@@ -1497,7 +1497,7 @@ void GenericFamily::Sort(CmdArgList args, const CommandContext& cmd_cntx) {\n       }\n       bounds = {offset, limit};\n       i += 2;\n-    } else if (arg == \"STORE\") {\n+    } else if (!is_read_only && arg == \"STORE\") {\n       if (i + 1 >= args.size()) {\n         return builder->SendError(kSyntaxErr);\n       }\n@@ -1509,6 +1509,11 @@ void GenericFamily::Sort(CmdArgList args, const CommandContext& cmd_cntx) {\n     }\n   }\n \n+  // Asserting that if is_read_only as true, then store_key should not exist.\n+  DLOG(INFO) << \"is_read_only parameter: \" << is_read_only\n+             << \" and store_key parameter: \" << bool(store_key);\n+  assert(((is_read_only && !bool(store_key)) || !is_read_only));\n+\n   ShardId source_sid = Shard(key, shard_set->size());\n   OpResultTyped<SortEntryList> fetch_result;\n   auto fetch_cb = [&](Transaction* t, EngineShard* shard) {\n@@ -1533,7 +1538,9 @@ void GenericFamily::Sort(CmdArgList args, const CommandContext& cmd_cntx) {\n   }\n \n   auto result_type = fetch_result.type();\n-  auto sort_call = [builder, bounds, reversed, result_type, &store_key, &cmd_cntx](auto& entries) {\n+\n+  auto sort_call = [result_type, bounds, reversed, is_read_only, &rb, &store_key,\n+                    &cmd_cntx](auto& entries) {\n     using value_t = typename std::decay_t<decltype(entries)>::value_type;\n     auto cmp = reversed ? &value_t::greater : &value_t::less;\n     if (bounds) {\n@@ -1550,9 +1557,15 @@ void GenericFamily::Sort(CmdArgList args, const CommandContext& cmd_cntx) {\n       end_it = entries.begin() + std::min(bounds->first + bounds->second, entries.size());\n     }\n \n-    bool is_set = (result_type == OBJ_SET || result_type == OBJ_ZSET);\n-    auto* rb = static_cast<RedisReplyBuilder*>(builder);\n-    if (store_key) {\n+    if (!bool(store_key)) {\n+      bool is_set = (result_type == OBJ_SET || result_type == OBJ_ZSET);\n+      rb->StartCollection(std::distance(start_it, end_it),\n+                          is_set ? RedisReplyBuilder::SET : RedisReplyBuilder::ARRAY);\n+\n+      for (auto it = start_it; it != end_it; ++it) {\n+        rb->SendBulkString(it->key);\n+      }\n+    } else {\n       ShardId dest_sid = Shard(store_key.value(), shard_set->size());\n       OpResult<uint32_t> store_len;\n       auto store_callback = [&](Transaction* t, EngineShard* shard) {\n@@ -1568,17 +1581,18 @@ void GenericFamily::Sort(CmdArgList args, const CommandContext& cmd_cntx) {\n       } else {\n         rb->SendError(store_len.status());\n       }\n-    } else {\n-      rb->StartCollection(std::distance(start_it, end_it),\n-                          is_set ? RedisReplyBuilder::SET : RedisReplyBuilder::ARRAY);\n-\n-      for (auto it = start_it; it != end_it; ++it) {\n-        rb->SendBulkString(it->key);\n-      }\n     }\n   };\n \n-  std::visit(std::move(sort_call), fetch_result.value());\n+  std::visit(sort_call, fetch_result.value());\n+}\n+\n+void GenericFamily::Sort(CmdArgList args, const CommandContext& cmd_cntx) {\n+  SortGeneric(args, cmd_cntx, false);\n+}\n+\n+void GenericFamily::Sort_RO(CmdArgList args, const CommandContext& cmd_cntx) {\n+  SortGeneric(args, cmd_cntx, true);\n }\n \n void GenericFamily::Restore(CmdArgList args, const CommandContext& cmd_cntx) {\n@@ -2004,6 +2018,7 @@ constexpr uint32_t kDump = KEYSPACE | READ | SLOW;\n constexpr uint32_t kUnlink = KEYSPACE | WRITE | FAST;\n constexpr uint32_t kStick = KEYSPACE | WRITE | FAST;\n constexpr uint32_t kSort = WRITE | SET | SORTEDSET | LIST | SLOW | DANGEROUS;\n+constexpr uint32_t kSortRO = READ | SET | SORTEDSET | LIST | SLOW | DANGEROUS;\n constexpr uint32_t kMove = KEYSPACE | WRITE | FAST;\n constexpr uint32_t kRestore = KEYSPACE | WRITE | SLOW | DANGEROUS;\n constexpr uint32_t kExpireTime = KEYSPACE | READ | FAST;\n@@ -2050,6 +2065,7 @@ void GenericFamily::Register(CommandRegistry* registry) {\n       << CI{\"UNLINK\", CO::WRITE, -2, 1, -1, acl::kUnlink}.HFUNC(Unlink)\n       << CI{\"STICK\", CO::WRITE, -2, 1, -1, acl::kStick}.HFUNC(Stick)\n       << CI{\"SORT\", CO::WRITE, -2, 1, -1, acl::kSort}.HFUNC(Sort)\n+      << CI{\"SORT_RO\", CO::READONLY, -2, 1, 1, acl::kSortRO}.HFUNC(Sort_RO)\n       << CI{\"MOVE\", CO::WRITE | CO::GLOBAL_TRANS | CO::NO_AUTOJOURNAL, 3, 1, 1, acl::kMove}.HFUNC(\n              Move)\n       << CI{\"RESTORE\", CO::WRITE, -4, 1, 1, acl::kRestore}.HFUNC(Restore)\ndiff --git a/src/server/generic_family.h b/src/server/generic_family.h\nindex 2812de0744f1..27f2b796b3eb 100644\n--- a/src/server/generic_family.h\n+++ b/src/server/generic_family.h\n@@ -39,6 +39,7 @@ class GenericFamily {\n   static void Pexpire(CmdArgList args, const CommandContext& cmd_cntx);\n   static void Stick(CmdArgList args, const CommandContext& cmd_cntx);\n   static void Sort(CmdArgList args, const CommandContext& cmd_cntx);\n+  static void Sort_RO(CmdArgList args, const CommandContext& cmd_cntx);\n   static void Move(CmdArgList args, const CommandContext& cmd_cntx);\n \n   static void Rename(CmdArgList args, const CommandContext& cmd_cntx);\n",
  "test_patch": "diff --git a/src/server/generic_family_test.cc b/src/server/generic_family_test.cc\nindex 32fbd1c8e1c6..898b8d276112 100644\n--- a/src/server/generic_family_test.cc\n+++ b/src/server/generic_family_test.cc\n@@ -869,6 +869,101 @@ TEST_F(GenericFamilyTest, SortStore) {\n               ElementsAre(\"1.2\", \"2.20\", \"3.5\", \"10.1\", \"200\"));\n }\n \n+TEST_F(GenericFamilyTest, Sort_RO) {\n+  // Test list sort with params\n+  Run({\"del\", \"list-1\"});\n+  Run({\"lpush\", \"list-1\", \"3.5\", \"1.2\", \"10.1\", \"2.20\", \"200\"});\n+  // numeric\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-1\"}).GetVec(),\n+              ElementsAre(\"1.2\", \"2.20\", \"3.5\", \"10.1\", \"200\"));\n+  // string\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-1\", \"ALPHA\"}).GetVec(),\n+              ElementsAre(\"1.2\", \"10.1\", \"2.20\", \"200\", \"3.5\"));\n+  // desc numeric\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-1\", \"DESC\"}).GetVec(),\n+              ElementsAre(\"200\", \"10.1\", \"3.5\", \"2.20\", \"1.2\"));\n+  // desc strig\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-1\", \"DESC\", \"ALPHA\"}).GetVec(),\n+              ElementsAre(\"3.5\", \"200\", \"2.20\", \"10.1\", \"1.2\"));\n+  // limits\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-1\", \"LIMIT\", \"0\", \"5\"}).GetVec(),\n+              ElementsAre(\"1.2\", \"2.20\", \"3.5\", \"10.1\", \"200\"));\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-1\", \"LIMIT\", \"0\", \"10\"}).GetVec(),\n+              ElementsAre(\"1.2\", \"2.20\", \"3.5\", \"10.1\", \"200\"));\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-1\", \"LIMIT\", \"2\", \"2\"}).GetVec(), ElementsAre(\"3.5\", \"10.1\"));\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-1\", \"LIMIT\", \"1\", \"1\"}), \"2.20\");\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-1\", \"LIMIT\", \"4\", \"2\"}), \"200\");\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-1\", \"LIMIT\", \"5\", \"2\"}), ArrLen(0));\n+  // limits desc\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-1\", \"DESC\", \"LIMIT\", \"0\", \"5\"}).GetVec(),\n+              ElementsAre(\"200\", \"10.1\", \"3.5\", \"2.20\", \"1.2\"));\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-1\", \"DESC\", \"LIMIT\", \"2\", \"2\"}).GetVec(),\n+              ElementsAre(\"3.5\", \"2.20\"));\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-1\", \"DESC\", \"LIMIT\", \"1\", \"1\"}), \"10.1\");\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-1\", \"DESC\", \"LIMIT\", \"5\", \"2\"}), ArrLen(0));\n+\n+  // Test set sort\n+  Run({\"del\", \"set-1\"});\n+  Run({\"sadd\", \"set-1\", \"5.3\", \"4.4\", \"60\", \"99.9\", \"100\", \"9\"});\n+  ASSERT_THAT(Run({\"sort_ro\", \"set-1\"}).GetVec(),\n+              ElementsAre(\"4.4\", \"5.3\", \"9\", \"60\", \"99.9\", \"100\"));\n+  ASSERT_THAT(Run({\"sort_ro\", \"set-1\", \"ALPHA\"}).GetVec(),\n+              ElementsAre(\"100\", \"4.4\", \"5.3\", \"60\", \"9\", \"99.9\"));\n+  ASSERT_THAT(Run({\"sort_ro\", \"set-1\", \"DESC\"}).GetVec(),\n+              ElementsAre(\"100\", \"99.9\", \"60\", \"9\", \"5.3\", \"4.4\"));\n+  ASSERT_THAT(Run({\"sort_ro\", \"set-1\", \"DESC\", \"ALPHA\"}).GetVec(),\n+              ElementsAre(\"99.9\", \"9\", \"60\", \"5.3\", \"4.4\", \"100\"));\n+\n+  // Test intset sort\n+  Run({\"del\", \"intset-1\"});\n+  Run({\"sadd\", \"intset-1\", \"5\", \"4\", \"3\", \"2\", \"1\"});\n+  ASSERT_THAT(Run({\"sort_ro\", \"intset-1\"}).GetVec(), ElementsAre(\"1\", \"2\", \"3\", \"4\", \"5\"));\n+\n+  // Test sorted set sort\n+  Run({\"del\", \"zset-1\"});\n+  Run({\"zadd\", \"zset-1\", \"0\", \"3.3\", \"0\", \"30.1\", \"0\", \"8.2\"});\n+  ASSERT_THAT(Run({\"sort_ro\", \"zset-1\"}).GetVec(), ElementsAre(\"3.3\", \"8.2\", \"30.1\"));\n+  ASSERT_THAT(Run({\"sort_ro\", \"zset-1\", \"ALPHA\"}).GetVec(), ElementsAre(\"3.3\", \"30.1\", \"8.2\"));\n+  ASSERT_THAT(Run({\"sort_ro\", \"zset-1\", \"DESC\"}).GetVec(), ElementsAre(\"30.1\", \"8.2\", \"3.3\"));\n+  ASSERT_THAT(Run({\"sort_ro\", \"zset-1\", \"DESC\", \"ALPHA\"}).GetVec(),\n+              ElementsAre(\"8.2\", \"30.1\", \"3.3\"));\n+\n+  // Test sort with non existent key\n+  Run({\"del\", \"list-2\"});\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-2\"}), ArrLen(0));\n+\n+  // Test not convertible to double\n+  Run({\"lpush\", \"list-2\", \"NOTADOUBLE\"});\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-2\"}),\n+              ErrArg(\"One or more scores can't be converted into double\"));\n+\n+  Run({\"set\", \"foo\", \"bar\"});\n+  ASSERT_THAT(Run({\"sort_ro\", \"foo\"}), ErrArg(\"WRONGTYPE \"));\n+\n+  Run({\"rpush\", \"list-3\", \"\"});\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-3\"}), \"\");\n+\n+  Run({\"rpush\", \"list-3\", \"2\", \"0\", \"\", \"-0.14\", \"0.12\", \"-0\", \"-123123\", \"7654\"});\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-3\"}).GetVec(),\n+              ElementsAre(\"-123123\", \"-0.14\", \"\", \"\", \"-0\", \"0\", \"0.12\", \"2\", \"7654\"));\n+\n+  Run({\"rpush\", \"NANvalue\", \"nan\"});\n+  ASSERT_THAT(Run({\"sort_ro\", \"NANvalue\"}),\n+              ErrArg(\"One or more scores can't be converted into double\"));\n+\n+  // Test store option should not work\n+  ASSERT_THAT(Run({\"sort_ro\", \"list-1\", \"store\", \"list-2\"}), ErrArg(\"syntax error\"));\n+}\n+\n+TEST_F(GenericFamilyTest, SortROBug3636) {\n+  Run({\"RPUSH\", \"foo\", \"1.100000023841858\", \"1.100000023841858\", \"1.100000023841858\", \"-15710\",\n+       \"1.100000023841858\", \"1.100000023841858\", \"1.100000023841858\", \"-15710\", \"-15710\",\n+       \"1.100000023841858\", \"-15710\", \"-15710\", \"-15710\", \"-15710\", \"1.100000023841858\", \"-15710\",\n+       \"-15710\"});\n+  auto resp = Run({\"SORT_RO\", \"foo\", \"desc\", \"alpha\"});\n+  ASSERT_THAT(resp, ArrLen(17));\n+}\n+\n TEST_F(GenericFamilyTest, TimeNoKeys) {\n   auto resp = Run({\"time\"});\n   EXPECT_THAT(resp, ArrLen(2));\n",
  "problem_statement": "implement SORT_RO\nImplement this command inside Dragonfly according the to the Valkey spec:\r\nhttps://valkey.io/commands/sort_ro/\n",
  "hints_text": "Hi, \r\nCould you please provide the description of issue?\nImplement this command inside Dragonfly according the to the Valkey spec:\r\nhttps://valkey.io/commands/sort_ro/ \nHi,\r\n\r\nI\u2019m working on implementing the` sort_ro` command as per the Valkey spec, but I\u2019m unsure where exactly in the project I should apply the changes. Could you point me to the specific files or modules that handle command definitions and execution within Dragonfly?\r\n\r\nI\u2019ve reviewed some parts of the project related to command handling, but I want to make sure I\u2019m working in the right place before I proceed.\r\n\r\nThanks for your help!\nHi @SalmanDeveloperz, this is where we implement our current `SORT` command:\r\nhttps://github.com/dragonflydb/dragonfly/blob/5efc8f11d2c4f6c5c3ad9a7069bf67af19befe9d/src/server/generic_family.cc#L1167\r\n\r\nReading the code now, I see that it actually does **not** support the `STORE` flag (which makes `SORT` a write-command, and which is not supported by the read-only `SORT_RO` command).\r\n\r\nWe should have a similar (preferably with code reuse) version which acts like the current one, and add `STORE` support to existing `SORT` command.\nHey can I work on this issue? As I understood for this issue we need to modify SORT command to include STORE option with write acl and create new command SORT_RO without STORE option and read acl is this right?\nHowdy @H4R5H1T-007, \n\nBased on what I read from Valkey docs, it is just the read only variant of `SORT`. In other words, it's `SORT without the STORE option` so I don't I don't think ACL's are related here (other than their normal use)\nHey Hi @kostasrim I mentioned acl because I read this in valkey document for sort_ro command \n\n`Since the original SORT has a STORE option it is technically flagged as a writing command in the Valkey command table. For this reason read-only replicas in a Valkey Cluster will redirect it to the primary instance even if the connection is in read-only mode (see the READONLY command of Valkey Cluster).`\n\nI thought maybe because of this acl for sort would be write and sort_ro would be read. Please let me know if I am incorrect \ud83d\ude04.\n@H4R5H1T-007  From my understanding this clause applies only in `cluster_mode` and `read only replicas`. The second forwards `SORT with STORE` command to the master. You don't have to worry about that at all.\nalso @H4R5H1T-007 we do not support `STORE` option based on the comments above. This should be a few lines PR :)",
  "created_at": "2025-06-21T06:13:39Z",
  "modified_files": [
    "src/server/generic_family.cc",
    "src/server/generic_family.h"
  ],
  "modified_test_files": [
    "src/server/generic_family_test.cc"
  ]
}