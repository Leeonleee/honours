diff --git a/src/server/string_family_test.cc b/src/server/string_family_test.cc
index 57343aae3003..d546644cfd12 100644
--- a/src/server/string_family_test.cc
+++ b/src/server/string_family_test.cc
@@ -283,9 +283,9 @@ TEST_F(StringFamilyTest, MGetCachingModeBug2276) {
 
   resp = Run({"info", "stats"});
   size_t bumps1 = get_bump_ups(resp.GetString());
-  EXPECT_GT(bumps1, 0);
-  EXPECT_LT(bumps1, 10);  // we assume that some bumps are blocked because items reside next to each
-                          // other in the slot.
+
+  EXPECT_GE(bumps1, 0);
+  EXPECT_LE(bumps1, 10);
 
   for (int i = 0; i < 10; ++i) {
     auto get_resp = Run({"get", vec[i]});
@@ -332,7 +332,7 @@ TEST_F(StringFamilyTest, MGetCachingModeBug2465) {
 
   resp = Run({"info", "stats"});
   size_t bumps = get_bump_ups(resp.GetString());
-  EXPECT_EQ(bumps, 3);  // one bump for del and one for get and one for mget
+  EXPECT_EQ(bumps, 2);  // one bump for get and one for mget
 }
 
 TEST_F(StringFamilyTest, MSetGet) {
diff --git a/tests/dragonfly/generic_test.py b/tests/dragonfly/generic_test.py
index 0f463efe6caf..ce785372bfaa 100644
--- a/tests/dragonfly/generic_test.py
+++ b/tests/dragonfly/generic_test.py
@@ -114,7 +114,6 @@ async def block(id):
             tasks.append(block(i))
         await asyncio.gather(*tasks)
 
-
     # produce is constantly waking up consumers. It is used to trigger the
     # flow that creates wake ups on a differrent database in the
     # middle of continuation transaction.
@@ -122,11 +121,12 @@ async def tasks_produce(num, iters):
         LPUSH_SCRIPT = """
             redis.call('LPUSH', KEYS[1], "val")
         """
+
         async def produce(id):
             c = df_server.client(db=1)  # important to be on a different db
             for i in range(iters):
                 # Must be a lua script and not multi-exec for some reason.
-                await c.eval(LPUSH_SCRIPT, 1,  f"list{{{id}}}")
+                await c.eval(LPUSH_SCRIPT, 1, f"list{{{id}}}")
 
         tasks = []
         for i in range(num):
@@ -151,7 +151,6 @@ async def drain(id, iters):
         await asyncio.gather(*tasks)
         logging.info("Finished consuming")
 
-
     num_keys = 32
     num_iters = 200
     async_task1 = asyncio.create_task(blmove_task_loose(num_keys))
@@ -288,3 +287,58 @@ async def test_rename_huge_values(df_factory, type):
     target_data = await StaticSeeder.capture(client)
 
     assert source_data == target_data
+
+
+@pytest.mark.asyncio
+async def test_key_bump_ups(df_factory):
+    master = df_factory.create(
+        proactor_threads=2,
+        cache_mode="true",
+    )
+    df_factory.start_all([master])
+    c_master = master.client()
+
+    await c_master.execute_command("DEBUG POPULATE 18000 KEY 32 RAND")
+
+    info = await c_master.info("stats")
+    assert info["bump_ups"] == 0
+
+    keys = await c_master.execute_command("SCAN 0")
+    keys = keys[1][0:10]
+
+    # Bump keys
+    for key in keys:
+        await c_master.execute_command("GET " + key)
+    info = await c_master.info("stats")
+    assert info["bump_ups"] <= 10
+
+    # Multi get bump
+    await c_master.execute_command("MGET " + " ".join(keys))
+    info = await c_master.info("stats")
+    assert info["bump_ups"] >= 10 and info["bump_ups"] <= 20
+    last_bump_ups = info["bump_ups"]
+
+    for key in keys:
+        await c_master.execute_command("DEL " + key)
+
+    # DEL should not bump up any key
+    info = await c_master.info("stats")
+    assert last_bump_ups == info["bump_ups"]
+
+    #  Find key that has slot > 0 and bump it
+    while True:
+        keys = await c_master.execute_command("SCAN 0")
+        key = keys[1][0]
+
+        debug_key_info = await c_master.execute_command("DEBUG OBJECT " + key)
+        slot_id = int(dict(map(lambda s: s.split(":"), debug_key_info.split()))["slot"])
+        if slot_id == 0:
+            # delete the key and continue
+            await c_master.execute_command("DEL " + key)
+            continue
+
+        await c_master.execute_command("GET " + key)
+        debug_key_info = await c_master.execute_command("DEBUG OBJECT " + key)
+        new_slot_id = int(dict(map(lambda s: s.split(":"), debug_key_info.split()))["slot"])
+        assert new_slot_id + 1 == slot_id
+        break
