diff --git a/src/server/json_family_test.cc b/src/server/json_family_test.cc
index 6a09c9ac3edf..ed5cbe733ad0 100644
--- a/src/server/json_family_test.cc
+++ b/src/server/json_family_test.cc
@@ -952,6 +952,9 @@ TEST_F(JsonFamilyTest, MGet) {
   resp = Run({"JSON.SET", "json2", ".", json[1]});
   ASSERT_THAT(resp, "OK");
 
+  resp = Run({"JSON.MGET", "json1", "??INNNNVALID??"});
+  EXPECT_THAT(resp, ErrArg("Unknown token"));
+
   resp = Run({"JSON.MGET", "json1", "json2", "json3", "$.address.country"});
   ASSERT_EQ(RespExpr::ARRAY, resp.type);
   EXPECT_THAT(resp.GetVec(),
@@ -1082,18 +1085,20 @@ TEST_F(JsonFamilyTest, Set) {
 }
 
 TEST_F(JsonFamilyTest, MSet) {
-  GTEST_SKIP() << "Not implemented";
-  string json = R"(
-    {"a":{"a":1, "b":2, "c":3}}
-  )";
+  string json1 = R"({"a":{"a":1,"b":2,"c":3}})";
+  string json2 = R"({"a":{"a":4,"b":5,"c":6}})";
 
   auto resp = Run({"JSON.MSET", "j1", "$"});
   EXPECT_THAT(resp, ErrArg("wrong number"));
-  resp = Run({"JSON.MSET", "j1", "$", json, "j3", "$"});
+  resp = Run({"JSON.MSET", "j1", "$", json1, "j3", "$"});
   EXPECT_THAT(resp, ErrArg("wrong number"));
 
-  resp = Run({"JSON.MSET", "j1", "$", json, "j3", "$", json});
+  resp = Run({"JSON.MSET", "j1", "$", json1, "j2", "$", json2, "j3", "$", json1, "j4", "$", json2});
   EXPECT_EQ(resp, "OK");
+
+  resp = Run({"JSON.MGET", "j1", "j2", "j3", "j4", "$"});
+  EXPECT_THAT(resp.GetVec(), ElementsAre("[" + json1 + "]", "[" + json2 + "]", "[" + json1 + "]",
+                                         "[" + json2 + "]"));
 }
 
 TEST_F(JsonFamilyTest, Merge) {
diff --git a/tests/dragonfly/utility.py b/tests/dragonfly/utility.py
index 8e2cfd61db1c..e20eba864ed6 100644
--- a/tests/dragonfly/utility.py
+++ b/tests/dragonfly/utility.py
@@ -233,7 +233,7 @@ def gen_update_cmd(self):
         ValueType.SET: "SADD",
         ValueType.HSET: "HMSET",
         ValueType.ZSET: "ZADD",
-        ValueType.JSON: "JSON.SET",
+        ValueType.JSON: "JSON.MSET",
     }
 
     def gen_grow_cmd(self):
@@ -242,7 +242,7 @@ def gen_grow_cmd(self):
         """
         # TODO: Implement COPY in Dragonfly.
         t = self.random_type()
-        if t == ValueType.STRING:
+        if t in [ValueType.STRING, ValueType.JSON]:
             count = random.randint(1, self.max_multikey)
         else:
             count = 1
