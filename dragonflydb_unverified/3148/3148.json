{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 3148,
  "instance_id": "dragonflydb__dragonfly-3148",
  "issue_numbers": [
    "3142"
  ],
  "base_commit": "3c6d72b93a39d96db00f71a02a017fec8148f9b7",
  "patch": "diff --git a/src/server/search/doc_index.h b/src/server/search/doc_index.h\nindex 164680ea5f1d..ebc689c4a8b5 100644\n--- a/src/server/search/doc_index.h\n+++ b/src/server/search/doc_index.h\n@@ -90,7 +90,7 @@ struct DocIndex {\n \n struct DocIndexInfo {\n   DocIndex base_index;\n-  size_t num_docs;\n+  size_t num_docs = 0;\n \n   // Build original ft.create command that can be used to re-create this index\n   std::string BuildRestoreCommand() const;\ndiff --git a/src/server/search/search_family.cc b/src/server/search/search_family.cc\nindex 7b190c10458d..e34ce2f13913 100644\n--- a/src/server/search/search_family.cc\n+++ b/src/server/search/search_family.cc\n@@ -469,6 +469,59 @@ void SearchFamily::FtCreate(CmdArgList args, ConnectionContext* cntx) {\n   cntx->SendOk();\n }\n \n+void SearchFamily::FtAlter(CmdArgList args, ConnectionContext* cntx) {\n+  CmdArgParser parser{args};\n+  string_view idx_name = parser.Next();\n+  parser.ExpectTag(\"SCHEMA\");\n+  parser.ExpectTag(\"ADD\");\n+\n+  if (auto err = parser.Error(); err)\n+    return cntx->SendError(err->MakeReply());\n+\n+  // First, extract existing index info\n+  shared_ptr<DocIndex> index_info;\n+  auto idx_cb = [idx_name, &index_info](auto* tx, EngineShard* es) {\n+    if (es->shard_id() > 0)  // all shards have the same data, fetch from first\n+      return OpStatus::OK;\n+\n+    if (auto* idx = es->search_indices()->GetIndex(idx_name); idx != nullptr)\n+      index_info = make_shared<DocIndex>(idx->GetInfo().base_index);\n+    return OpStatus::OK;\n+  };\n+  cntx->transaction->Execute(idx_cb, false);\n+\n+  if (!index_info) {\n+    cntx->transaction->Conclude();\n+    return cntx->SendError(\"Index not found\");\n+  }\n+\n+  // Parse additional schema\n+  optional<search::Schema> new_fields = ParseSchemaOrReply(index_info->type, parser, cntx);\n+  if (!new_fields) {\n+    cntx->transaction->Conclude();\n+    return;\n+  }\n+\n+  LOG(INFO) << \"Adding \"\n+            << DocIndexInfo{.base_index = DocIndex{.schema = *new_fields}}.BuildRestoreCommand();\n+\n+  // Merge schemas\n+  search::Schema& schema = index_info->schema;\n+  schema.fields.insert(new_fields->fields.begin(), new_fields->fields.end());\n+  schema.field_names.insert(new_fields->field_names.begin(), new_fields->field_names.end());\n+\n+  // Rebuild index\n+  // TODO: Introduce partial rebuild\n+  auto upd_cb = [idx_name, index_info](Transaction* tx, EngineShard* es) {\n+    es->search_indices()->DropIndex(idx_name);\n+    es->search_indices()->InitIndex(tx->GetOpArgs(es), idx_name, index_info);\n+    return OpStatus::OK;\n+  };\n+  cntx->transaction->Execute(upd_cb, true);\n+\n+  cntx->SendOk();\n+}\n+\n void SearchFamily::FtDropIndex(CmdArgList args, ConnectionContext* cntx) {\n   string_view idx_name = ArgS(args, 0);\n   // TODO: Handle optional DD param\n@@ -753,6 +806,7 @@ void SearchFamily::Register(CommandRegistry* registry) {\n   registry->StartFamily();\n   *registry << CI{\"FT.CREATE\", CO::WRITE | CO::GLOBAL_TRANS, -2, 0, 0, acl::FT_SEARCH}.HFUNC(\n                    FtCreate)\n+            << CI{\"FT.ALTER\", CO::WRITE | CO::GLOBAL_TRANS, -3, 0, 0, acl::FT_SEARCH}.HFUNC(FtAlter)\n             << CI{\"FT.DROPINDEX\", CO::WRITE | CO::GLOBAL_TRANS, -2, 0, 0, acl::FT_SEARCH}.HFUNC(\n                    FtDropIndex)\n             << CI{\"FT.INFO\", kReadOnlyMask, 2, 0, 0, acl::FT_SEARCH}.HFUNC(FtInfo)\ndiff --git a/src/server/search/search_family.h b/src/server/search/search_family.h\nindex 50edc39fed59..5abe1c42b416 100644\n--- a/src/server/search/search_family.h\n+++ b/src/server/search/search_family.h\n@@ -15,6 +15,7 @@ class ConnectionContext;\n \n class SearchFamily {\n   static void FtCreate(CmdArgList args, ConnectionContext* cntx);\n+  static void FtAlter(CmdArgList args, ConnectionContext* cntx);\n   static void FtDropIndex(CmdArgList args, ConnectionContext* cntx);\n   static void FtInfo(CmdArgList args, ConnectionContext* cntx);\n   static void FtList(CmdArgList args, ConnectionContext* cntx);\n",
  "test_patch": "diff --git a/src/server/search/search_family_test.cc b/src/server/search/search_family_test.cc\nindex 31a750905f5f..8bcddd5f3b99 100644\n--- a/src/server/search/search_family_test.cc\n+++ b/src/server/search/search_family_test.cc\n@@ -88,6 +88,24 @@ TEST_F(SearchFamilyTest, CreateDropListIndex) {\n   EXPECT_EQ(Run({\"ft._list\"}), \"idx-3\");\n }\n \n+TEST_F(SearchFamilyTest, AlterIndex) {\n+  Run({\"hset\", \"d:1\", \"color\", \"blue\", \"cost\", \"150\"});\n+  Run({\"hset\", \"d:2\", \"color\", \"green\", \"cost\", \"200\"});\n+\n+  Run({\"ft.create\", \"idx-1\", \"ON\", \"HASH\"});\n+\n+  EXPECT_EQ(Run({\"ft.alter\", \"idx-1\", \"schema\", \"add\", \"color\", \"tag\"}), \"OK\");\n+  EXPECT_THAT(Run({\"ft.search\", \"idx-1\", \"@color:{blue}\"}), AreDocIds(\"d:1\"));\n+  EXPECT_THAT(Run({\"ft.search\", \"idx-1\", \"@color:{green}\"}), AreDocIds(\"d:2\"));\n+\n+  EXPECT_EQ(Run({\"ft.alter\", \"idx-1\", \"schema\", \"add\", \"cost\", \"numeric\"}), \"OK\");\n+  EXPECT_THAT(Run({\"ft.search\", \"idx-1\", \"@cost:[0 100]\"}), kNoResults);\n+  EXPECT_THAT(Run({\"ft.search\", \"idx-1\", \"@cost:[100 300]\"}), AreDocIds(\"d:1\", \"d:2\"));\n+\n+  EXPECT_THAT(Run({\"ft.alter\", \"idx-2\", \"schema\", \"add\", \"price\", \"numeric\"}),\n+              ErrArg(\"Index not found\"));\n+}\n+\n TEST_F(SearchFamilyTest, InfoIndex) {\n   EXPECT_EQ(\n       Run({\"ft.create\", \"idx-1\", \"ON\", \"HASH\", \"PREFIX\", \"1\", \"doc-\", \"SCHEMA\", \"name\", \"TEXT\"}),\n",
  "problem_statement": "Search: FT.ALTER\nQuickest implementation: full index rebuild\n",
  "hints_text": "sure but please add logs so we could evaluate how it's being used.",
  "created_at": "2024-06-06T19:22:16Z",
  "modified_files": [
    "src/server/search/doc_index.h",
    "src/server/search/search_family.cc",
    "src/server/search/search_family.h"
  ],
  "modified_test_files": [
    "src/server/search/search_family_test.cc"
  ]
}