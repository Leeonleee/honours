{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 3673,
  "instance_id": "dragonflydb__dragonfly-3673",
  "issue_numbers": [
    "3137"
  ],
  "base_commit": "b7b96424e43ac6e6f18e68cc1f22358566788fbb",
  "patch": "diff --git a/src/facade/dragonfly_connection.cc b/src/facade/dragonfly_connection.cc\nindex 685771367d84..9ea6cf5b79f3 100644\n--- a/src/facade/dragonfly_connection.cc\n+++ b/src/facade/dragonfly_connection.cc\n@@ -509,6 +509,19 @@ void Connection::DispatchOperations::operator()(const InvalidationMessage& msg)\n   }\n }\n \n+namespace {\n+thread_local absl::flat_hash_map<string, uint64_t> g_libname_ver_map;\n+\n+void UpdateLibNameVerMap(const string& name, const string& ver, int delta) {\n+  string key = absl::StrCat(name, \":\", ver);\n+  uint64_t& val = g_libname_ver_map[key];\n+  val += delta;\n+  if (val == 0) {\n+    g_libname_ver_map.erase(key);\n+  }\n+}\n+}  // namespace\n+\n Connection::Connection(Protocol protocol, util::HttpListenerBase* http_listener, SSL_CTX* ctx,\n                        ServiceInterface* service)\n     : io_buf_(kMinReadSize),\n@@ -553,12 +566,16 @@ Connection::Connection(Protocol protocol, util::HttpListenerBase* http_listener,\n     SSL_CTX_up_ref(ctx);\n   }\n #endif\n+\n+  UpdateLibNameVerMap(lib_name_, lib_ver_, +1);\n }\n \n Connection::~Connection() {\n #ifdef DFLY_USE_SSL\n   SSL_CTX_free(ssl_ctx_);\n #endif\n+\n+  UpdateLibNameVerMap(lib_name_, lib_ver_, -1);\n }\n \n // Called from Connection::Shutdown() right after socket_->Shutdown call.\n@@ -798,6 +815,7 @@ string Connection::GetClientInfo(unsigned thread_id) const {\n   auto [before, after] = GetClientInfoBeforeAfterTid();\n   absl::StrAppend(&before, \" tid=\", thread_id);\n   absl::StrAppend(&before, after);\n+  absl::StrAppend(&before, \" lib-name=\", lib_name_, \" lib-ver=\", lib_ver_);\n   return before;\n }\n \n@@ -838,6 +856,22 @@ void Connection::SetName(std::string name) {\n   name_ = std::move(name);\n }\n \n+void Connection::SetLibName(std::string name) {\n+  UpdateLibNameVerMap(lib_name_, lib_ver_, -1);\n+  lib_name_ = std::move(name);\n+  UpdateLibNameVerMap(lib_name_, lib_ver_, +1);\n+}\n+\n+void Connection::SetLibVersion(std::string version) {\n+  UpdateLibNameVerMap(lib_name_, lib_ver_, -1);\n+  lib_ver_ = std::move(version);\n+  UpdateLibNameVerMap(lib_name_, lib_ver_, +1);\n+}\n+\n+const absl::flat_hash_map<string, uint64_t>& Connection::GetLibStatsTL() {\n+  return g_libname_ver_map;\n+}\n+\n io::Result<bool> Connection::CheckForHttpProto(FiberSocketBase* peer) {\n   if (!IsPrivileged() && !IsMain()) {\n     return false;\ndiff --git a/src/facade/dragonfly_connection.h b/src/facade/dragonfly_connection.h\nindex 3d3067f486b4..bb9613ff1844 100644\n--- a/src/facade/dragonfly_connection.h\n+++ b/src/facade/dragonfly_connection.h\n@@ -275,6 +275,12 @@ class Connection : public util::Connection {\n \n   void SetName(std::string name);\n \n+  void SetLibName(std::string name);\n+  void SetLibVersion(std::string version);\n+\n+  // Returns a map of 'libname:libver'->count, thread local data\n+  static const absl::flat_hash_map<std::string, uint64_t>& GetLibStatsTL();\n+\n   std::string_view GetName() const {\n     return name_;\n   }\n@@ -401,6 +407,9 @@ class Connection : public util::Connection {\n   Phase phase_ = SETUP;\n   std::string name_;\n \n+  std::string lib_name_;\n+  std::string lib_ver_;\n+\n   unsigned parser_error_ = 0;\n \n   // amount of times we enqued requests asynchronously during the same async_fiber_epoch_.\ndiff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex 2c57015c5d30..b703862379f1 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -541,6 +541,31 @@ void ClientCaching(CmdArgList args, ConnectionContext* cntx) {\n   cntx->SendOk();\n }\n \n+void ClientSetInfo(CmdArgList args, ConnectionContext* cntx) {\n+  if (args.size() != 2) {\n+    return cntx->SendError(kSyntaxErr);\n+  }\n+\n+  auto* conn = cntx->conn();\n+  if (conn == nullptr) {\n+    return cntx->SendError(\"No connection\");\n+  }\n+\n+  ToUpper(&args[0]);\n+  string_view type = ArgS(args, 0);\n+  string_view val = ArgS(args, 1);\n+\n+  if (type == \"LIB-NAME\") {\n+    conn->SetLibName(string(val));\n+  } else if (type == \"LIB-VER\") {\n+    conn->SetLibVersion(string(val));\n+  } else {\n+    return cntx->SendError(kSyntaxErr);\n+  }\n+\n+  cntx->SendOk();\n+}\n+\n void ClientId(CmdArgList args, ConnectionContext* cntx) {\n   if (args.size() != 0) {\n     return cntx->SendError(kSyntaxErr);\n@@ -1207,6 +1232,13 @@ void PrintPrometheusMetrics(const Metrics& m, DflyCmd* dfly_cmd, StringResponse*\n   AppendMetricWithoutLabels(\"pipeline_commands_duration_seconds\", \"\",\n                             conn_stats.pipelined_cmd_latency * 1e-6, MetricType::COUNTER,\n                             &resp->body());\n+  string connections_libs;\n+  AppendMetricHeader(\"connections_libs\", \"Total number of connections by libname:ver\",\n+                     MetricType::GAUGE, &connections_libs);\n+  for (const auto& [lib, count] : m.connections_lib_name_ver_map) {\n+    AppendMetricValue(\"connections_libs\", count, {\"lib\"}, {lib}, &connections_libs);\n+  }\n+  absl::StrAppend(&resp->body(), connections_libs);\n \n   // Memory metrics\n   auto sdata_res = io::ReadStatusInfo();\n@@ -1770,14 +1802,12 @@ void ServerFamily::Client(CmdArgList args, ConnectionContext* cntx) {\n     return ClientKill(sub_args, absl::MakeSpan(listeners_), cntx);\n   } else if (sub_cmd == \"CACHING\") {\n     return ClientCaching(sub_args, cntx);\n+  } else if (sub_cmd == \"SETINFO\") {\n+    return ClientSetInfo(sub_args, cntx);\n   } else if (sub_cmd == \"ID\") {\n     return ClientId(sub_args, cntx);\n   }\n \n-  if (sub_cmd == \"SETINFO\") {\n-    return cntx->SendOk();\n-  }\n-\n   LOG_FIRST_N(ERROR, 10) << \"Subcommand \" << sub_cmd << \" not supported\";\n   return cntx->SendError(UnknownSubCmd(sub_cmd, \"CLIENT\"), kSyntaxErrType);\n }\n@@ -2049,6 +2079,11 @@ Metrics ServerFamily::GetMetrics(Namespace* ns) const {\n \n     result.lua_stats += InterpreterManager::tl_stats();\n \n+    auto connections_lib_name_ver_map = facade::Connection::GetLibStatsTL();\n+    for (auto& [k, v] : connections_lib_name_ver_map) {\n+      result.connections_lib_name_ver_map[k] += v;\n+    }\n+\n     service_.mutable_registry()->MergeCallStats(index, cmd_stat_cb);\n   };  // cb\n \ndiff --git a/src/server/server_family.h b/src/server/server_family.h\nindex f2c6d6a3be07..52052237f3e8 100644\n--- a/src/server/server_family.h\n+++ b/src/server/server_family.h\n@@ -123,6 +123,8 @@ struct Metrics {\n   // command call frequencies (count, aggregated latency in usec).\n   std::map<std::string, std::pair<uint64_t, uint64_t>> cmd_stats_map;\n \n+  absl::flat_hash_map<std::string, uint64_t> connections_lib_name_ver_map;\n+\n   // Replica info on the master side.\n   std::vector<ReplicaRoleInfo> master_side_replicas_info;\n \n",
  "test_patch": "diff --git a/tests/dragonfly/connection_test.py b/tests/dragonfly/connection_test.py\nindex f245f0628521..05f256cd5bd9 100755\n--- a/tests/dragonfly/connection_test.py\n+++ b/tests/dragonfly/connection_test.py\n@@ -854,3 +854,13 @@ async def test_tls_when_read_write_is_interleaved(\n     client = aioredis.Redis(port=server.port, **with_ca_tls_client_args)\n     await client.execute_command(\"GET foo\")\n     await client.close()\n+\n+\n+async def test_lib_name_ver(async_client: aioredis.Redis):\n+    await async_client.execute_command(\"client setinfo lib-name dragonfly\")\n+    await async_client.execute_command(\"client setinfo lib-ver 1.2.3.4\")\n+\n+    list = await async_client.execute_command(\"client list\")\n+    assert len(list) == 1\n+    assert list[0][\"lib-name\"] == \"dragonfly\"\n+    assert list[0][\"lib-ver\"] == \"1.2.3.4\"\n",
  "problem_statement": "implement CLIENT SETINFO\nhttps://redis.io/docs/latest/commands/client-setinfo/\r\n\r\nIt's a noop in Dragonfly, but we should export a map of all `libname:version` via `/metrics`.\n",
  "hints_text": "",
  "created_at": "2024-09-09T06:34:18Z",
  "modified_files": [
    "src/facade/dragonfly_connection.cc",
    "src/facade/dragonfly_connection.h",
    "src/server/server_family.cc",
    "src/server/server_family.h"
  ],
  "modified_test_files": [
    "tests/dragonfly/connection_test.py"
  ]
}