{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 745,
  "instance_id": "dragonflydb__dragonfly-745",
  "issue_numbers": [
    "742"
  ],
  "base_commit": "69519b2c5bef3241d7fce910eb5c41487bc7afe2",
  "patch": "diff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex d7459557380e..0c87a6dbb63e 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -1026,6 +1026,7 @@ void Service::EvalInternal(const EvalArgs& eval_args, Interpreter* interpreter,\n       [cntx, this](CmdArgList args, ObjectExplorer* reply) { CallFromScript(args, reply, cntx); });\n \n   Interpreter::RunResult result = interpreter->RunFunction(eval_args.sha, &error);\n+  absl::Cleanup clean = [interpreter]() { interpreter->ResetStack(); };\n \n   cntx->conn_state.script_info.reset();  // reset script_info\n \n@@ -1046,8 +1047,6 @@ void Service::EvalInternal(const EvalArgs& eval_args, Interpreter* interpreter,\n   } else {\n     interpreter->SerializeResult(&ser);\n   }\n-\n-  interpreter->ResetStack();\n }\n \n void Service::Discard(CmdArgList args, ConnectionContext* cntx) {\n",
  "test_patch": "diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc\nindex a2e42a636f13..432dd73b40d5 100644\n--- a/src/server/dragonfly_test.cc\n+++ b/src/server/dragonfly_test.cc\n@@ -486,7 +486,7 @@ TEST_F(DflyEngineTest, EvalBug713b) {\n   fibers_ext::Fiber fibers[kNumFibers];\n \n   for (unsigned j = 0; j < kNumFibers; ++j) {\n-    fibers[j] = pp_->at(1)->LaunchFiber([=, this] {\n+    fibers[j] = pp_->at(1)->LaunchFiber([=] {\n       for (unsigned i = 0; i < 50; ++i) {\n         Run(StrCat(\"fb\", j), {\"eval\", script, \"3\", kKeySid0, kKeySid1, kKeySid2});\n       }\n@@ -898,6 +898,15 @@ TEST_F(DflyEngineTest, Issue679) {\n   Run({\"EXPIRE\", \"a\", \"1001\"});\n }\n \n+TEST_F(DflyEngineTest, Issue742) {\n+  // https://github.com/dragonflydb/dragonfly/issues/607\n+  // The stack was not cleaned in case of an error and it blew up.\n+  for (int i = 0; i < 3'000; i++) {\n+    Run({\"EVAL\", \"redis.get(KEYS[1], KEYS[2], KEYS[3], KEYS[4], KEYS[5])\", \"5\", \"k1\", \"k2\", \"k3\",\n+         \"k4\", \"k5\"});\n+  }\n+}\n+\n TEST_F(DefragDflyEngineTest, TestDefragOption) {\n   absl::SetFlag(&FLAGS_mem_defrag_threshold, 0.02);\n   //  Fill data into dragonfly and then check if we have\n",
  "problem_statement": "Gracefully handle errors in lua scripts\n\n",
  "hints_text": "specifically, it was about  a non-existing `redis.get` call, imho.",
  "created_at": "2023-02-02T11:03:59Z",
  "modified_files": [
    "src/server/main_service.cc"
  ],
  "modified_test_files": [
    "src/server/dragonfly_test.cc"
  ]
}