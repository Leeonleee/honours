diff --git a/tests/dragonfly/conftest.py b/tests/dragonfly/conftest.py
index 46473b1b1334..08fca369bbc5 100644
--- a/tests/dragonfly/conftest.py
+++ b/tests/dragonfly/conftest.py
@@ -48,7 +48,7 @@ def df_server(request, tmp_dir: Path, test_env):
     arguments = [arg.format(**test_env) for arg in request.param]
     dfly_proc = subprocess.Popen([DRAGONFLY_PATH, *arguments],
                                  env=test_env, cwd=str(tmp_dir))
-    time.sleep(0.1)
+    time.sleep(0.3)
     return_code = dfly_proc.poll()
     if return_code is not None:
         dfly_proc.terminate()
@@ -66,17 +66,19 @@ def df_server(request, tmp_dir: Path, test_env):
         print(outs)
         print(errs)
 
+@pytest.fixture(scope="function")
+def connection(df_server):
+    return redis.Connection()
 
 @pytest.fixture(scope="class")
-def connection(df_server):
+def raw_client(df_server):
     """ Creates the Redis client to interact with the Dragonfly instance """
     pool = redis.ConnectionPool(decode_responses=True)
     client = redis.Redis(connection_pool=pool)
     return client
 
-
 @pytest.fixture
-def client(connection):
+def client(raw_client):
     """ Flushes all the records, runs before each test. """
-    connection.flushall()
-    return connection
+    raw_client.flushall()
+    return raw_client
diff --git a/tests/dragonfly/server_family_test.py b/tests/dragonfly/server_family_test.py
new file mode 100644
index 000000000000..1d72d2a66410
--- /dev/null
+++ b/tests/dragonfly/server_family_test.py
@@ -0,0 +1,20 @@
+import pytest
+import redis
+
+def test_quit(connection):
+    connection.send_command("QUIT")
+    assert connection.read_response() == b'OK'
+
+    with pytest.raises(redis.exceptions.ConnectionError) as e:
+        connection.read_response()
+
+def test_quit_after_sub(connection):
+    connection = redis.Connection()
+    connection.send_command("SUBSCRIBE", "foo")
+    connection.read_response()
+
+    connection.send_command("QUIT")
+    assert connection.read_response() == b'OK'
+
+    with pytest.raises(redis.exceptions.ConnectionError) as e:
+        connection.read_response()
