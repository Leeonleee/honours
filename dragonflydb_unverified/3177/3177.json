{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 3177,
  "instance_id": "dragonflydb__dragonfly-3177",
  "issue_numbers": [
    "3151"
  ],
  "base_commit": "93b4193141cfe58a50bef39ebbf45e73d76ff577",
  "patch": "diff --git a/src/facade/acl_commands_def.h b/src/facade/acl_commands_def.h\nindex 0e0f0bf0f340..62e131fdd9a5 100644\n--- a/src/facade/acl_commands_def.h\n+++ b/src/facade/acl_commands_def.h\n@@ -24,4 +24,10 @@ struct AclKeys {\n   bool all_keys = false;\n };\n \n+struct UserCredentials {\n+  uint32_t acl_categories{0};\n+  std::vector<uint64_t> acl_commands;\n+  AclKeys keys;\n+};\n+\n }  // namespace dfly::acl\ndiff --git a/src/facade/conn_context.h b/src/facade/conn_context.h\nindex b58bef25339e..97d6a39e43c1 100644\n--- a/src/facade/conn_context.h\n+++ b/src/facade/conn_context.h\n@@ -110,7 +110,6 @@ class ConnectionContext {\n \n   // TODO fix inherit actual values from default\n   std::string authed_username{\"default\"};\n-  uint32_t acl_categories{dfly::acl::ALL};\n   std::vector<uint64_t> acl_commands;\n   // keys\n   dfly::acl::AclKeys keys{{}, true};\ndiff --git a/src/server/acl/acl_family.cc b/src/server/acl/acl_family.cc\nindex 1feab44be067..62c4290db2d4 100644\n--- a/src/server/acl/acl_family.cc\n+++ b/src/server/acl/acl_family.cc\n@@ -67,16 +67,16 @@ void AclFamily::List(CmdArgList args, ConnectionContext* cntx) {\n     const std::string_view pass = user.Password();\n     const std::string password = pass == \"nopass\" ? \"nopass\" : PrettyPrintSha(pass);\n \n-    const std::string acl_cat_and_commands =\n-        AclCatAndCommandToString(user.CatChanges(), user.CmdChanges());\n-\n     const std::string acl_keys = AclKeysToString(user.Keys());\n     const std::string maybe_space_com = acl_keys.empty() ? \"\" : \" \";\n \n+    const std::string acl_cat_and_commands =\n+        AclCatAndCommandToString(user.CatChanges(), user.CmdChanges());\n+\n     using namespace std::string_view_literals;\n \n     absl::StrAppend(&buffer, username, \" \", user.IsActive() ? \"on \"sv : \"off \"sv, password, \" \",\n-                    acl_cat_and_commands, maybe_space_com, acl_keys);\n+                    acl_keys, maybe_space_com, acl_cat_and_commands);\n \n     cntx->SendSimpleString(buffer);\n   }\n@@ -199,15 +199,17 @@ std::string AclFamily::RegistryToString() const {\n     const std::string_view pass = user.Password();\n     const std::string password =\n         pass == \"nopass\" ? \"nopass \" : absl::StrCat(\"#\", PrettyPrintSha(pass, true), \" \");\n-    const std::string acl_cat_and_commands =\n-        AclCatAndCommandToString(user.CatChanges(), user.CmdChanges());\n+\n     const std::string acl_keys = AclKeysToString(user.Keys());\n     const std::string maybe_space = acl_keys.empty() ? \"\" : \" \";\n \n+    const std::string acl_cat_and_commands =\n+        AclCatAndCommandToString(user.CatChanges(), user.CmdChanges());\n+\n     using namespace std::string_view_literals;\n \n     absl::StrAppend(&result, command, username, \" \", user.IsActive() ? \"ON \"sv : \"OFF \"sv, password,\n-                    acl_cat_and_commands, maybe_space, acl_keys, \"\\n\");\n+                    acl_keys, maybe_space, acl_cat_and_commands, \"\\n\");\n   }\n \n   return result;\ndiff --git a/src/server/acl/helpers.cc b/src/server/acl/helpers.cc\nindex fde332539d7f..d54f4980baf8 100644\n--- a/src/server/acl/helpers.cc\n+++ b/src/server/acl/helpers.cc\n@@ -25,12 +25,12 @@ namespace {\n std::string AclCatToString(uint32_t acl_category, User::Sign sign) {\n   std::string res = sign == User::Sign::PLUS ? \"+@\" : \"-@\";\n   if (acl_category == acl::ALL) {\n-    absl::StrAppend(&res, \"ALL\");\n+    absl::StrAppend(&res, \"all\");\n     return res;\n   }\n \n   const auto& index = CategoryToIdx().at(acl_category);\n-  absl::StrAppend(&res, REVERSE_CATEGORY_INDEX_TABLE[index]);\n+  absl::StrAppend(&res, absl::AsciiStrToLower(REVERSE_CATEGORY_INDEX_TABLE[index]));\n   return res;\n }\n \n@@ -41,7 +41,7 @@ std::string AclCommandToString(size_t family, uint64_t mask, User::Sign sign) {\n   std::string prefix = (sign == User::Sign::PLUS) ? \"+\" : \"-\";\n   if (mask == ALL_COMMANDS) {\n     for (const auto& cmd : rev_index[family]) {\n-      absl::StrAppend(&res, prefix, cmd, \" \");\n+      absl::StrAppend(&res, prefix, absl::AsciiStrToLower(cmd), \" \");\n     }\n     res.pop_back();\n     return res;\n@@ -53,7 +53,7 @@ std::string AclCommandToString(size_t family, uint64_t mask, User::Sign sign) {\n     mask = mask >> 1;\n   }\n   --pos;\n-  absl::StrAppend(&res, prefix, rev_index[family][pos]);\n+  absl::StrAppend(&res, prefix, absl::AsciiStrToLower(rev_index[family][pos]));\n   return res;\n }\n \ndiff --git a/src/server/acl/user_registry.cc b/src/server/acl/user_registry.cc\nindex 42d4525505be..54510344e86c 100644\n--- a/src/server/acl/user_registry.cc\n+++ b/src/server/acl/user_registry.cc\n@@ -29,7 +29,7 @@ bool UserRegistry::RemoveUser(std::string_view username) {\n   return registry_.erase(username);\n }\n \n-UserRegistry::UserCredentials UserRegistry::GetCredentials(std::string_view username) const {\n+UserCredentials UserRegistry::GetCredentials(std::string_view username) const {\n   std::shared_lock<fb2::SharedMutex> lock(mu_);\n   auto it = registry_.find(username);\n   if (it == registry_.end()) {\ndiff --git a/src/server/acl/user_registry.h b/src/server/acl/user_registry.h\nindex 336a561d52f8..fef3fefd8622 100644\n--- a/src/server/acl/user_registry.h\n+++ b/src/server/acl/user_registry.h\n@@ -42,12 +42,6 @@ class UserRegistry {\n   // kills already existing connections from the removed user\n   bool RemoveUser(std::string_view username);\n \n-  struct UserCredentials {\n-    uint32_t acl_categories{0};\n-    std::vector<uint64_t> acl_commands;\n-    AclKeys keys;\n-  };\n-\n   // Acquires a read lock\n   UserCredentials GetCredentials(std::string_view username) const;\n \ndiff --git a/src/server/conn_context.cc b/src/server/conn_context.cc\nindex 23108913436a..e521e150d922 100644\n--- a/src/server/conn_context.cc\n+++ b/src/server/conn_context.cc\n@@ -6,6 +6,7 @@\n \n #include \"base/logging.h\"\n #include \"core/heap_size.h\"\n+#include \"facade/acl_commands_def.h\"\n #include \"server/acl/acl_commands_def.h\"\n #include \"server/command_registry.h\"\n #include \"server/engine_shard_set.h\"\n@@ -80,18 +81,31 @@ const CommandId* StoredCmd::Cid() const {\n   return cid_;\n }\n \n-ConnectionContext::ConnectionContext(::io::Sink* stream, facade::Connection* owner)\n+ConnectionContext::ConnectionContext(::io::Sink* stream, facade::Connection* owner,\n+                                     acl::UserCredentials cred)\n     : facade::ConnectionContext(stream, owner) {\n   if (owner) {\n     skip_acl_validation = owner->IsPrivileged();\n   }\n-  acl_commands = std::vector<uint64_t>(acl::NumberOfFamilies(), acl::ALL_COMMANDS);\n+\n+  keys = std::move(cred.keys);\n+  if (cred.acl_commands.empty()) {\n+    acl_commands = std::vector<uint64_t>(acl::NumberOfFamilies(), acl::NONE_COMMANDS);\n+  } else {\n+    acl_commands = std::move(cred.acl_commands);\n+  }\n }\n \n ConnectionContext::ConnectionContext(const ConnectionContext* owner, Transaction* tx,\n                                      facade::CapturingReplyBuilder* crb)\n     : facade::ConnectionContext(nullptr, nullptr), transaction{tx} {\n-  acl_commands = std::vector<uint64_t>(acl::NumberOfFamilies(), acl::ALL_COMMANDS);\n+  if (owner) {\n+    acl_commands = owner->acl_commands;\n+    keys = owner->keys;\n+    skip_acl_validation = owner->skip_acl_validation;\n+  } else {\n+    acl_commands = std::vector<uint64_t>(acl::NumberOfFamilies(), acl::NONE_COMMANDS);\n+  }\n   if (tx) {  // If we have a carrier transaction, this context is used for squashing\n     DCHECK(owner);\n     conn_state.db_index = owner->conn_state.db_index;\ndiff --git a/src/server/conn_context.h b/src/server/conn_context.h\nindex 6d3c65857872..cfaacad50972 100644\n--- a/src/server/conn_context.h\n+++ b/src/server/conn_context.h\n@@ -8,6 +8,7 @@\n #include <absl/container/flat_hash_set.h>\n \n #include \"acl/acl_commands_def.h\"\n+#include \"facade/acl_commands_def.h\"\n #include \"facade/conn_context.h\"\n #include \"facade/reply_capture.h\"\n #include \"server/common.h\"\n@@ -265,7 +266,7 @@ struct ConnectionState {\n \n class ConnectionContext : public facade::ConnectionContext {\n  public:\n-  ConnectionContext(::io::Sink* stream, facade::Connection* owner);\n+  ConnectionContext(::io::Sink* stream, facade::Connection* owner, dfly::acl::UserCredentials cred);\n \n   ConnectionContext(const ConnectionContext* owner, Transaction* tx,\n                     facade::CapturingReplyBuilder* crb);\ndiff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex 0bafdfa7ccfa..7f0a4d92e3dc 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -1568,10 +1568,12 @@ bool RequirePrivilegedAuth() {\n \n facade::ConnectionContext* Service::CreateContext(util::FiberSocketBase* peer,\n                                                   facade::Connection* owner) {\n-  ConnectionContext* res = new ConnectionContext{peer, owner};\n+  auto cred = user_registry_.GetCredentials(\"default\");\n+  ConnectionContext* res = new ConnectionContext{peer, owner, std::move(cred)};\n \n   if (peer->IsUDS()) {\n     res->req_auth = false;\n+    res->skip_acl_validation = true;\n   } else if (owner->IsPrivileged() && RequirePrivilegedAuth()) {\n     res->req_auth = !GetPassword().empty();\n   } else if (!owner->IsPrivileged()) {\ndiff --git a/src/server/replica.cc b/src/server/replica.cc\nindex 3e8b7d39562b..ac85a88adf05 100644\n--- a/src/server/replica.cc\n+++ b/src/server/replica.cc\n@@ -557,7 +557,7 @@ error_code Replica::InitiateDflySync() {\n error_code Replica::ConsumeRedisStream() {\n   base::IoBuf io_buf(16_KB);\n   io::NullSink null_sink;  // we never reply back on the commands.\n-  ConnectionContext conn_context{&null_sink, nullptr};\n+  ConnectionContext conn_context{&null_sink, nullptr, {}};\n   conn_context.is_replicating = true;\n   conn_context.journal_emulated = true;\n   conn_context.skip_acl_validation = true;\ndiff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex 7fc3b60e20eb..ac2a16afd730 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -1644,7 +1644,6 @@ void ServerFamily::Auth(CmdArgList args, ConnectionContext* cntx) {\n     if (is_authorized) {\n       cntx->authed_username = username;\n       auto cred = registry->GetCredentials(username);\n-      cntx->acl_categories = cred.acl_categories;\n       cntx->acl_commands = cred.acl_commands;\n       cntx->keys = std::move(cred.keys);\n       cntx->authenticated = true;\n@@ -2586,7 +2585,7 @@ void ServerFamily::ReplicaOf(CmdArgList args, ConnectionContext* cntx) {\n \n void ServerFamily::Replicate(string_view host, string_view port) {\n   io::NullSink sink;\n-  ConnectionContext ctxt{&sink, nullptr};\n+  ConnectionContext ctxt{&sink, nullptr, {}};\n   ctxt.skip_acl_validation = true;\n \n   StringVec replicaof_params{string(host), string(port)};\n",
  "test_patch": "diff --git a/src/server/acl/acl_family_test.cc b/src/server/acl/acl_family_test.cc\nindex c8354e440f71..0aac28dd3f1e 100644\n--- a/src/server/acl/acl_family_test.cc\n+++ b/src/server/acl/acl_family_test.cc\n@@ -6,6 +6,7 @@\n \n #include \"absl/container/flat_hash_map.h\"\n #include \"absl/flags/internal/flag.h\"\n+#include \"absl/strings/ascii.h\"\n #include \"absl/strings/str_cat.h\"\n #include \"base/gtest.h\"\n #include \"base/logging.h\"\n@@ -47,15 +48,15 @@ TEST_F(AclFamilyTest, AclSetUser) {\n   resp = Run({\"ACL\", \"LIST\"});\n   auto vec = resp.GetVec();\n   EXPECT_THAT(\n-      vec, UnorderedElementsAre(\"user default on nopass +@ALL ~*\", \"user vlad off nopass -@ALL\"));\n+      vec, UnorderedElementsAre(\"user default on nopass ~* +@all\", \"user vlad off nopass -@all\"));\n \n   resp = Run({\"ACL\", \"SETUSER\", \"vlad\", \"+ACL\"});\n   EXPECT_THAT(resp, \"OK\");\n \n   resp = Run({\"ACL\", \"LIST\"});\n   vec = resp.GetVec();\n-  EXPECT_THAT(vec, UnorderedElementsAre(\"user default on nopass +@ALL ~*\",\n-                                        \"user vlad off nopass -@ALL +ACL\"));\n+  EXPECT_THAT(vec, UnorderedElementsAre(\"user default on nopass ~* +@all\",\n+                                        \"user vlad off nopass -@all +acl\"));\n }\n \n TEST_F(AclFamilyTest, AclDelUser) {\n@@ -82,7 +83,7 @@ TEST_F(AclFamilyTest, AclDelUser) {\n   EXPECT_THAT(resp, IntArg(0));\n \n   resp = Run({\"ACL\", \"LIST\"});\n-  EXPECT_THAT(resp.GetString(), \"user default on nopass +@ALL ~*\");\n+  EXPECT_THAT(resp.GetString(), \"user default on nopass ~* +@all\");\n \n   Run({\"ACL\", \"SETUSER\", \"michael\", \"ON\"});\n   Run({\"ACL\", \"SETUSER\", \"kobe\", \"ON\"});\n@@ -103,9 +104,9 @@ TEST_F(AclFamilyTest, AclList) {\n \n   resp = Run({\"ACL\", \"LIST\"});\n   auto vec = resp.GetVec();\n-  EXPECT_THAT(vec, UnorderedElementsAre(\"user default on nopass +@ALL ~*\",\n-                                        \"user kostas off d74ff0ee8da3b98 -@ALL +@ADMIN\",\n-                                        \"user adi off d74ff0ee8da3b98 -@ALL +@FAST\"));\n+  EXPECT_THAT(vec, UnorderedElementsAre(\"user default on nopass ~* +@all\",\n+                                        \"user kostas off d74ff0ee8da3b98 -@all +@admin\",\n+                                        \"user adi off d74ff0ee8da3b98 -@all +@fast\"));\n }\n \n TEST_F(AclFamilyTest, AclAuth) {\n@@ -154,16 +155,18 @@ TEST_F(AclFamilyTest, TestAllCategories) {\n \n       resp = Run({\"ACL\", \"LIST\"});\n       EXPECT_THAT(resp.GetVec(),\n-                  UnorderedElementsAre(\"user default on nopass +@ALL ~*\",\n-                                       absl::StrCat(\"user kostas off nopass -@ALL \", \"+@\", cat)));\n+                  UnorderedElementsAre(\"user default on nopass ~* +@all\",\n+                                       absl::StrCat(\"user kostas off nopass -@all \", \"+@\",\n+                                                    absl::AsciiStrToLower(cat))));\n \n       resp = Run({\"ACL\", \"SETUSER\", \"kostas\", absl::StrCat(\"-@\", cat)});\n       EXPECT_THAT(resp, \"OK\");\n \n       resp = Run({\"ACL\", \"LIST\"});\n       EXPECT_THAT(resp.GetVec(),\n-                  UnorderedElementsAre(\"user default on nopass +@ALL ~*\",\n-                                       absl::StrCat(\"user kostas off nopass -@ALL \", \"-@\", cat)));\n+                  UnorderedElementsAre(\"user default on nopass ~* +@all\",\n+                                       absl::StrCat(\"user kostas off nopass -@all \", \"-@\",\n+                                                    absl::AsciiStrToLower(cat))));\n \n       resp = Run({\"ACL\", \"DELUSER\", \"kostas\"});\n       EXPECT_THAT(resp, IntArg(1));\n@@ -201,16 +204,18 @@ TEST_F(AclFamilyTest, TestAllCommands) {\n       EXPECT_THAT(resp, \"OK\");\n \n       resp = Run({\"ACL\", \"LIST\"});\n-      EXPECT_THAT(resp.GetVec(), UnorderedElementsAre(\"user default on nopass +@ALL ~*\",\n-                                                      absl::StrCat(\"user kostas off nopass -@ALL \",\n-                                                                   \"+\", command_name)));\n+      EXPECT_THAT(resp.GetVec(),\n+                  UnorderedElementsAre(\"user default on nopass ~* +@all\",\n+                                       absl::StrCat(\"user kostas off nopass -@all \", \"+\",\n+                                                    absl::AsciiStrToLower(command_name))));\n \n       resp = Run({\"ACL\", \"SETUSER\", \"kostas\", absl::StrCat(\"-\", command_name)});\n \n       resp = Run({\"ACL\", \"LIST\"});\n-      EXPECT_THAT(resp.GetVec(), UnorderedElementsAre(\"user default on nopass +@ALL ~*\",\n-                                                      absl::StrCat(\"user kostas off nopass \",\n-                                                                   \"-@ALL \", \"-\", command_name)));\n+      EXPECT_THAT(resp.GetVec(),\n+                  UnorderedElementsAre(\"user default on nopass ~* +@all\",\n+                                       absl::StrCat(\"user kostas off nopass \", \"-@all \", \"-\",\n+                                                    absl::AsciiStrToLower(command_name))));\n \n       resp = Run({\"ACL\", \"DELUSER\", \"kostas\"});\n       EXPECT_THAT(resp, IntArg(1));\n@@ -259,7 +264,7 @@ TEST_F(AclFamilyTest, TestGetUser) {\n   EXPECT_THAT(vec[2], \"passwords\");\n   EXPECT_TRUE(vec[3].GetVec().empty());\n   EXPECT_THAT(vec[4], \"commands\");\n-  EXPECT_THAT(vec[5], \"+@ALL\");\n+  EXPECT_THAT(vec[5], \"+@all\");\n   EXPECT_THAT(vec[6], \"keys\");\n   EXPECT_THAT(vec[7], \"~*\");\n \n@@ -271,7 +276,7 @@ TEST_F(AclFamilyTest, TestGetUser) {\n   EXPECT_THAT(kvec[2], \"passwords\");\n   EXPECT_TRUE(kvec[3].GetVec().empty());\n   EXPECT_THAT(kvec[4], \"commands\");\n-  EXPECT_THAT(kvec[5], \"-@ALL +@STRING +HSET\");\n+  EXPECT_THAT(kvec[5], \"-@all +@string +hset\");\n }\n \n TEST_F(AclFamilyTest, TestDryRun) {\ndiff --git a/src/server/test_utils.cc b/src/server/test_utils.cc\nindex 2df43cdbeb07..39a18dbdf466 100644\n--- a/src/server/test_utils.cc\n+++ b/src/server/test_utils.cc\n@@ -57,7 +57,8 @@ static vector<string> SplitLines(const std::string& src) {\n \n TestConnection::TestConnection(Protocol protocol, io::StringSink* sink)\n     : facade::Connection(protocol, nullptr, nullptr, nullptr), sink_(sink) {\n-  cc_.reset(new dfly::ConnectionContext(sink_, this));\n+  cc_.reset(new dfly::ConnectionContext(sink_, this, {}));\n+  cc_->skip_acl_validation = true;\n   SetSocket(ProactorBase::me()->CreateSocket());\n   OnConnectionStart();\n }\ndiff --git a/tests/dragonfly/acl_family_test.py b/tests/dragonfly/acl_family_test.py\nindex ab8c4616eda5..f044269e91c7 100644\n--- a/tests/dragonfly/acl_family_test.py\n+++ b/tests/dragonfly/acl_family_test.py\n@@ -12,61 +12,61 @@\n @pytest.mark.asyncio\n async def test_acl_setuser(async_client):\n     await async_client.execute_command(\"ACL SETUSER kostas\")\n-    result = await async_client.execute_command(\"ACL LIST\")\n+    result = await async_client.execute_command(\"ACL list\")\n     assert 2 == len(result)\n-    assert \"user kostas off nopass -@ALL\" in result\n+    assert \"user kostas off nopass -@all\" in result\n \n     await async_client.execute_command(\"ACL SETUSER kostas ON\")\n-    result = await async_client.execute_command(\"ACL LIST\")\n-    assert \"user kostas on nopass -@ALL\" in result\n+    result = await async_client.execute_command(\"ACL list\")\n+    assert \"user kostas on nopass -@all\" in result\n \n     await async_client.execute_command(\"ACL SETUSER kostas +@list +@string +@admin\")\n-    result = await async_client.execute_command(\"ACL LIST\")\n+    result = await async_client.execute_command(\"ACL list\")\n     # TODO consider printing to lowercase\n-    assert \"user kostas on nopass -@ALL +@LIST +@STRING +@ADMIN\" in result\n+    assert \"user kostas on nopass -@all +@list +@string +@admin\" in result\n \n     await async_client.execute_command(\"ACL SETUSER kostas -@list -@admin\")\n-    result = await async_client.execute_command(\"ACL LIST\")\n-    assert \"user kostas on nopass -@ALL +@STRING -@LIST -@ADMIN\" in result\n+    result = await async_client.execute_command(\"ACL list\")\n+    assert \"user kostas on nopass -@all +@string -@list -@admin\" in result\n \n     # mix and match\n     await async_client.execute_command(\"ACL SETUSER kostas +@list -@string\")\n-    result = await async_client.execute_command(\"ACL LIST\")\n-    assert \"user kostas on nopass -@ALL -@ADMIN +@LIST -@STRING\" in result\n+    result = await async_client.execute_command(\"ACL list\")\n+    assert \"user kostas on nopass -@all -@admin +@list -@string\" in result\n \n     # mix and match interleaved\n     await async_client.execute_command(\"ACL SETUSER kostas +@set -@set +@set\")\n-    result = await async_client.execute_command(\"ACL LIST\")\n-    assert \"user kostas on nopass -@ALL -@ADMIN +@LIST -@STRING +@SET\" in result\n+    result = await async_client.execute_command(\"ACL list\")\n+    assert \"user kostas on nopass -@all -@admin +@list -@string +@set\" in result\n \n     await async_client.execute_command(\"ACL SETUSER kostas +@all\")\n-    result = await async_client.execute_command(\"ACL LIST\")\n-    assert \"user kostas on nopass -@ADMIN +@LIST -@STRING +@SET +@ALL\" in result\n+    result = await async_client.execute_command(\"ACL list\")\n+    assert \"user kostas on nopass -@admin +@list -@string +@set +@all\" in result\n \n     # commands\n     await async_client.execute_command(\"ACL SETUSER kostas +set +get +hset\")\n-    result = await async_client.execute_command(\"ACL LIST\")\n-    assert \"user kostas on nopass -@ADMIN +@LIST -@STRING +@SET +@ALL +SET +GET +HSET\" in result\n+    result = await async_client.execute_command(\"ACL list\")\n+    assert \"user kostas on nopass -@admin +@list -@string +@set +@all +set +get +hset\" in result\n \n     await async_client.execute_command(\"ACL SETUSER kostas -set -get +hset\")\n-    result = await async_client.execute_command(\"ACL LIST\")\n-    assert \"user kostas on nopass -@ADMIN +@LIST -@STRING +@SET +@ALL -SET -GET +HSET\" in result\n+    result = await async_client.execute_command(\"ACL list\")\n+    assert \"user kostas on nopass -@admin +@list -@string +@set +@all -set -get +hset\" in result\n \n     # interleaved\n     await async_client.execute_command(\"ACL SETUSER kostas -hset +get -get -@all\")\n-    result = await async_client.execute_command(\"ACL LIST\")\n-    assert \"user kostas on nopass -@ADMIN +@LIST -@STRING +@SET -SET -HSET -GET -@ALL\" in result\n+    result = await async_client.execute_command(\"ACL list\")\n+    assert \"user kostas on nopass -@admin +@list -@string +@set -set -hset -get -@all\" in result\n \n     # interleaved with categories\n     await async_client.execute_command(\"ACL SETUSER kostas +@string +get -get +set\")\n-    result = await async_client.execute_command(\"ACL LIST\")\n-    assert \"user kostas on nopass -@ADMIN +@LIST +@SET -HSET -@ALL +@STRING -GET +SET\" in result\n+    result = await async_client.execute_command(\"ACL list\")\n+    assert \"user kostas on nopass -@admin +@list +@set -hset -@all +@string -get +set\" in result\n \n \n @pytest.mark.asyncio\n async def test_acl_categories(async_client):\n     await async_client.execute_command(\n-        \"ACL SETUSER vlad ON >mypass -@ALL +@string +@list +@connection ~*\"\n+        \"ACL SETUSER vlad ON >mypass -@all +@string +@list +@connection ~*\"\n     )\n \n     result = await async_client.execute_command(\"AUTH vlad mypass\")\n@@ -116,7 +116,7 @@ async def test_acl_categories(async_client):\n \n @pytest.mark.asyncio\n async def test_acl_commands(async_client):\n-    await async_client.execute_command(\"ACL SETUSER random ON >mypass -@ALL +set +get ~*\")\n+    await async_client.execute_command(\"ACL SETUSER random ON >mypass -@all +set +get ~*\")\n \n     result = await async_client.execute_command(\"AUTH random mypass\")\n     assert result == \"OK\"\n@@ -177,7 +177,7 @@ async def test_acl_cat_commands_multi_exec_squash(df_local_factory):\n     for x in range(33):\n         await client.execute_command(f\"SET x{x} {x}\")\n \n-    # ADMIN revokes permissions\n+    # admin revokes permissions\n     res = await admin_client.execute_command(\"ACL SETUSER kk -@string\")\n     assert res == b\"OK\"\n \n@@ -330,22 +330,22 @@ async def test_good_acl_file(df_local_factory, tmp_dir):\n     client = df.client()\n \n     await client.execute_command(\"ACL LOAD\")\n-    result = await client.execute_command(\"ACL LIST\")\n+    result = await client.execute_command(\"ACL list\")\n     assert 2 == len(result)\n-    assert \"user MrFoo on ea71c25a7a60224 -@ALL\" in result\n-    assert \"user default on nopass +@ALL ~*\" in result\n+    assert \"user MrFoo on ea71c25a7a60224 -@all\" in result\n+    assert \"user default on nopass ~* +@all\" in result\n     await client.execute_command(\"ACL DELUSER MrFoo\")\n \n-    await client.execute_command(\"ACL SETUSER roy ON >mypass +@STRING +HSET\")\n-    await client.execute_command(\"ACL SETUSER shahar >mypass +@SET\")\n-    await client.execute_command(\"ACL SETUSER vlad +@STRING ~foo ~bar*\")\n+    await client.execute_command(\"ACL SETUSER roy ON >mypass +@string +hset\")\n+    await client.execute_command(\"ACL SETUSER shahar >mypass +@set\")\n+    await client.execute_command(\"ACL SETUSER vlad ~foo ~bar* +@string\")\n \n-    result = await client.execute_command(\"ACL LIST\")\n+    result = await client.execute_command(\"ACL list\")\n     assert 4 == len(result)\n-    assert \"user roy on ea71c25a7a60224 -@ALL +@STRING +HSET\" in result\n-    assert \"user shahar off ea71c25a7a60224 -@ALL +@SET\" in result\n-    assert \"user vlad off nopass -@ALL +@STRING ~foo ~bar*\" in result\n-    assert \"user default on nopass +@ALL ~*\" in result\n+    assert \"user roy on ea71c25a7a60224 -@all +@string +hset\" in result\n+    assert \"user shahar off ea71c25a7a60224 -@all +@set\" in result\n+    assert \"user vlad off nopass ~foo ~bar* -@all +@string\" in result\n+    assert \"user default on nopass ~* +@all\" in result\n \n     result = await client.execute_command(\"ACL DELUSER shahar\")\n     assert result == 1\n@@ -354,11 +354,11 @@ async def test_good_acl_file(df_local_factory, tmp_dir):\n \n     result = await client.execute_command(\"ACL LOAD\")\n \n-    result = await client.execute_command(\"ACL LIST\")\n+    result = await client.execute_command(\"ACL list\")\n     assert 3 == len(result)\n-    assert \"user roy on ea71c25a7a60224 -@ALL +@STRING +HSET\" in result\n-    assert \"user vlad off nopass -@ALL +@STRING ~foo ~bar*\" in result\n-    assert \"user default on nopass +@ALL ~*\" in result\n+    assert \"user roy on ea71c25a7a60224 -@all +@string +hset\" in result\n+    assert \"user vlad off nopass ~foo ~bar* -@all +@string\" in result\n+    assert \"user default on nopass ~* +@all\" in result\n \n     await client.close()\n \n@@ -387,7 +387,7 @@ async def test_acl_log(async_client):\n     res = await async_client.execute_command(\"SET mykey 22\")\n \n     with pytest.raises(redis.exceptions.ResponseError):\n-        await async_client.execute_command(\"HSET mk kk 22\")\n+        await async_client.execute_command(\"hset mk kk 22\")\n \n     res = await async_client.execute_command(\"ACL LOG\")\n     assert 1 == len(res)\n@@ -447,7 +447,7 @@ async def test_require_pass(df_local_factory):\n \n @pytest.mark.asyncio\n async def test_set_acl_file(async_client: aioredis.Redis, tmp_dir):\n-    acl_file_content = \"USER roy ON #ea71c25a7a602246b4c39824b855678894a96f43bb9b71319c39700a1e045222 +@STRING +@FAST +HSET\\nUSER john on nopass +@string\"\n+    acl_file_content = \"USER roy ON #ea71c25a7a602246b4c39824b855678894a96f43bb9b71319c39700a1e045222 +@string +@fast +hset\\nUSER john on nopass +@string\"\n \n     acl = create_temp_file(acl_file_content, tmp_dir)\n \n@@ -455,7 +455,7 @@ async def test_set_acl_file(async_client: aioredis.Redis, tmp_dir):\n \n     await async_client.execute_command(\"ACL LOAD\")\n \n-    result = await async_client.execute_command(\"ACL LIST\")\n+    result = await async_client.execute_command(\"ACL list\")\n     assert 3 == len(result)\n \n     result = await async_client.execute_command(\"AUTH roy mypass\")\n@@ -536,3 +536,20 @@ async def test_acl_keys(async_client):\n     # reject because bonus key does not match\n     with pytest.raises(redis.exceptions.ResponseError):\n         await async_client.execute_command(\"ZUNIONSTORE destkey 2 barz1 barz2\")\n+\n+\n+@pytest.mark.asyncio\n+async def default_user_bug(df_local_factory):\n+    df.start()\n+\n+    client = aioredis.Redis(port=df.port)\n+\n+    await async_client.execute_command(\"ACL SETUSER default -@all\")\n+    await client.close()\n+\n+    client = aioredis.Redis(port=df.port)\n+\n+    with pytest.raises(redis.exceptions.ResponseError):\n+        await client.execute_command(\"SET foo bar\")\n+\n+    await client.close()\n",
  "problem_statement": "acl small compatibility changes\n* change the order of `keys` to precede `commands and categories` (now it's the opposite way around)\r\n* when a new context is created we set its acl rules to `ALL`. This is a bug and we should initiaize it from the registry (because `default` rules might have changed via `SETUSER` comand)\n",
  "hints_text": "",
  "created_at": "2024-06-14T15:46:16Z",
  "modified_files": [
    "src/facade/acl_commands_def.h",
    "src/facade/conn_context.h",
    "src/server/acl/acl_family.cc",
    "src/server/acl/helpers.cc",
    "src/server/acl/user_registry.cc",
    "src/server/acl/user_registry.h",
    "src/server/conn_context.cc",
    "src/server/conn_context.h",
    "src/server/main_service.cc",
    "src/server/replica.cc",
    "src/server/server_family.cc"
  ],
  "modified_test_files": [
    "src/server/acl/acl_family_test.cc",
    "src/server/test_utils.cc",
    "tests/dragonfly/acl_family_test.py"
  ]
}