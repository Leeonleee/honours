diff --git a/src/server/list_family.cc b/src/server/list_family.cc
index 9f6ea5a04086..0465ab8cdc22 100644
--- a/src/server/list_family.cc
+++ b/src/server/list_family.cc
@@ -1008,6 +1008,47 @@ void ListFamily::LMPop(CmdArgList args, const CommandContext& cmd_cntx) {
   }
 }
 
+void ListFamily::BLMPop(CmdArgList args, const CommandContext& cmd_cntx) {
+  auto* response_builder = static_cast<RedisReplyBuilder*>(cmd_cntx.rb);
+
+  CmdArgParser parser{args};
+  float timeout = parser.Next<float>();
+  if (auto err = parser.Error(); err)
+    return response_builder->SendError(err->MakeReply());
+
+  if (timeout < 0)
+    return response_builder->SendError("timeout is negative");
+
+  parser.Skip(parser.Next<size_t>());  // Skip numkeys and keys
+  ListDir dir = parser.MapNext("LEFT", ListDir::LEFT, "RIGHT", ListDir::RIGHT);
+
+  size_t pop_count = 1;
+  if (parser.Check("COUNT"))
+    pop_count = parser.Next<size_t>();
+
+  if (!parser.Finalize())
+    return response_builder->SendError(parser.Error()->MakeReply());
+
+  OpResult<StringVec> result;
+  auto cb = [&](Transaction* t, EngineShard* shard, string_view key) {
+    result = OpPop(t->GetOpArgs(shard), key, dir, pop_count, true, false);
+    return result.status();
+  };
+
+  ConnectionContext* conn_cntx = cmd_cntx.conn_cntx;
+  OpResult<string> popped_key = container_utils::RunCbOnFirstNonEmptyBlocking(
+      cmd_cntx.tx, OBJ_LIST, std::move(cb), unsigned(timeout * 1000), &conn_cntx->blocked,
+      &conn_cntx->paused);
+
+  if (popped_key.ok()) {
+    response_builder->StartArray(2);
+    response_builder->SendBulkString(*popped_key);
+    response_builder->SendBulkStrArr(*result);
+  } else {
+    response_builder->SendNull();
+  }
+}
+
 void ListFamily::LPush(CmdArgList args, const CommandContext& cmd_cntx) {
   return PushGeneric(ListDir::LEFT, false, args, cmd_cntx.tx, cmd_cntx.rb);
 }
@@ -1271,6 +1312,7 @@ constexpr uint32_t kLPush = WRITE | LIST | FAST;
 constexpr uint32_t kLPushX = WRITE | LIST | FAST;
 constexpr uint32_t kLPop = WRITE | LIST | FAST;
 constexpr uint32_t kLMPop = WRITE | LIST | FAST;
+constexpr uint32_t kBLMPop = WRITE | LIST | SLOW | BLOCKING;
 constexpr uint32_t kRPush = WRITE | LIST | FAST;
 constexpr uint32_t kRPushX = WRITE | LIST | FAST;
 constexpr uint32_t kRPop = WRITE | LIST | FAST;
@@ -1297,6 +1339,8 @@ void ListFamily::Register(CommandRegistry* registry) {
       << CI{"LPUSHX", CO::WRITE | CO::FAST | CO::DENYOOM, -3, 1, 1, acl::kLPushX}.HFUNC(LPushX)
       << CI{"LPOP", CO::WRITE | CO::FAST, -2, 1, 1, acl::kLPop}.HFUNC(LPop)
       << CI{"LMPOP", CO::WRITE | CO::SLOW | CO::VARIADIC_KEYS, -4, 2, 2, acl::kLMPop}.HFUNC(LMPop)
+      << CI{"BLMPOP", CO::WRITE | CO::SLOW | CO::VARIADIC_KEYS, -5, 3, 3, acl::kBLMPop}.HFUNC(
+             BLMPop)
       << CI{"RPUSH", CO::WRITE | CO::FAST | CO::DENYOOM, -3, 1, 1, acl::kRPush}.HFUNC(RPush)
       << CI{"RPUSHX", CO::WRITE | CO::FAST | CO::DENYOOM, -3, 1, 1, acl::kRPushX}.HFUNC(RPushX)
       << CI{"RPOP", CO::WRITE | CO::FAST, -2, 1, 1, acl::kRPop}.HFUNC(RPop)
diff --git a/src/server/list_family.h b/src/server/list_family.h
index 0b5155264727..0683a7593c0d 100644
--- a/src/server/list_family.h
+++ b/src/server/list_family.h
@@ -34,6 +34,7 @@ class ListFamily {
   static void BLPop(CmdArgList args, const CommandContext& cmd_cntx);
   static void BRPop(CmdArgList args, const CommandContext& cmd_cntx);
   static void LMPop(CmdArgList args, const CommandContext& cmd_cntx);
+  static void BLMPop(CmdArgList args, const CommandContext& cmd_cntx);
   static void LLen(CmdArgList args, const CommandContext& cmd_cntx);
   static void LPos(CmdArgList args, const CommandContext& cmd_cntx);
   static void LIndex(CmdArgList args, const CommandContext& cmd_cntx);
diff --git a/src/server/transaction.cc b/src/server/transaction.cc
index f294460a69df..0ad8a07f1edf 100644
--- a/src/server/transaction.cc
+++ b/src/server/transaction.cc
@@ -1588,7 +1588,7 @@ OpResult<KeyIndex> DetermineKeys(const CommandId* cid, CmdArgList args) {
       bonus = 0;  // Z<xxx>STORE <key> commands
 
     unsigned num_keys_index;
-    if (absl::StartsWith(name, "EVAL"))
+    if (absl::StartsWith(name, "EVAL") || name == "BLMPOP")
       num_keys_index = 1;
     else
       num_keys_index = bonus ? *bonus + 1 : 0;
