diff --git a/src/server/server_family.cc b/src/server/server_family.cc
index 9c22416366bf..bd1f3863da3f 100644
--- a/src/server/server_family.cc
+++ b/src/server/server_family.cc
@@ -491,10 +491,26 @@ void ServerFamily::Init(util::AcceptServer* acceptor, std::vector<facade::Listen
   if (ReplicaOfFlag flag = GetFlag(FLAGS_replicaof); flag.has_value()) {
     service_.proactor_pool().GetNextProactor()->Await(
         [this, &flag]() { this->Replicate(flag.host, flag.port); });
-    return;  // DONT load any snapshots
+  } else {  // load from snapshot only if --replicaof is empty
+    LoadFromSnapshot();
   }
 
-  const auto load_path_result = snapshot_storage_->LoadPath(flag_dir, GetFlag(FLAGS_dbfilename));
+  const auto create_snapshot_schedule_fb = [this] {
+    snapshot_schedule_fb_ =
+        service_.proactor_pool().GetNextProactor()->LaunchFiber([this] { SnapshotScheduling(); });
+  };
+  config_registry.RegisterMutable(
+      "snapshot_cron", [this, create_snapshot_schedule_fb](const absl::CommandLineFlag& flag) {
+        JoinSnapshotSchedule();
+        create_snapshot_schedule_fb();
+        return true;
+      });
+  create_snapshot_schedule_fb();
+}
+
+void ServerFamily::LoadFromSnapshot() {
+  const auto load_path_result =
+      snapshot_storage_->LoadPath(GetFlag(FLAGS_dir), GetFlag(FLAGS_dbfilename));
   if (load_path_result) {
     const std::string load_path = *load_path_result;
     if (!load_path.empty()) {
@@ -507,19 +523,6 @@ void ServerFamily::Init(util::AcceptServer* acceptor, std::vector<facade::Listen
       LOG(ERROR) << "Failed to load snapshot: " << load_path_result.error().Format();
     }
   }
-
-  const auto create_snapshot_schedule_fb = [this] {
-    snapshot_schedule_fb_ =
-        service_.proactor_pool().GetNextProactor()->LaunchFiber([this] { SnapshotScheduling(); });
-  };
-  config_registry.RegisterMutable(
-      "snapshot_cron", [this, create_snapshot_schedule_fb](const absl::CommandLineFlag& flag) {
-        JoinSnapshotSchedule();
-        create_snapshot_schedule_fb();
-        return true;
-      });
-
-  create_snapshot_schedule_fb();
 }
 
 void ServerFamily::JoinSnapshotSchedule() {
@@ -1937,9 +1940,14 @@ void ServerFamily::Hello(CmdArgList args, ConnectionContext* cntx) {
 void ServerFamily::ReplicaOfInternal(string_view host, string_view port_sv, ConnectionContext* cntx,
                                      ActionOnConnectionFail on_err) {
   LOG(INFO) << "Replicating " << host << ":" << port_sv;
-
   unique_lock lk(replicaof_mu_);  // Only one REPLICAOF command can run at a time
 
+  // We should not execute replica of command while loading from snapshot.
+  if (ServerState::tlocal()->is_master && service_.GetGlobalState() == GlobalState::LOADING) {
+    cntx->SendError("Can not execute during LOADING");
+    return;
+  }
+
   // If NO ONE was supplied, just stop the current replica (if it exists)
   if (IsReplicatingNoOne(host, port_sv)) {
     if (!ServerState::tlocal()->is_master) {
diff --git a/src/server/server_family.h b/src/server/server_family.h
index 6ef954a13419..7222f3b73a19 100644
--- a/src/server/server_family.h
+++ b/src/server/server_family.h
@@ -204,6 +204,7 @@ class ServerFamily {
 
  private:
   void JoinSnapshotSchedule();
+  void LoadFromSnapshot();
 
   uint32_t shard_count() const {
     return shard_set->size();
