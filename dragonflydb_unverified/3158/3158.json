{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 3158,
  "instance_id": "dragonflydb__dragonfly-3158",
  "issue_numbers": [
    "3157"
  ],
  "base_commit": "007d4854db7530e5a1b34ec1b0d3a8cb6aa10c81",
  "patch": "diff --git a/src/server/conn_context.cc b/src/server/conn_context.cc\nindex d223cd592ae3..64b1b644c836 100644\n--- a/src/server/conn_context.cc\n+++ b/src/server/conn_context.cc\n@@ -270,7 +270,12 @@ bool ConnectionState::ClientTracking::ShouldTrackKeys() const {\n     return false;\n   }\n \n-  return !optin_ || (seq_num_ == (1 + caching_seq_num_));\n+  if (option_ == NONE) {\n+    return true;\n+  }\n+\n+  const bool match = (seq_num_ == (1 + caching_seq_num_));\n+  return option_ == OPTIN ? match : !match;\n }\n \n }  // namespace dfly\ndiff --git a/src/server/conn_context.h b/src/server/conn_context.h\nindex 7d57fc2c9a63..057cdfcd2f6e 100644\n--- a/src/server/conn_context.h\n+++ b/src/server/conn_context.h\n@@ -186,6 +186,15 @@ struct ConnectionState {\n   // If seq_num == caching_seq_num + 1 then we know that we should Track().\n   class ClientTracking {\n    public:\n+    enum Options : uint8_t {\n+      NONE,   // NO subcommand, that is no OPTIN and no OUTPUT was used when CLIENT TRACKING was\n+              // called. We track all keys of read commands.\n+      OPTIN,  // OPTIN was used with CLIENT TRACKING. We only track keys of read commands preceded\n+              // by CACHING TRUE command.\n+      OPTOUT  // OPTOUT was used with CLIENT TRACKING. We track all keys of read commands except the\n+              // ones preceded by a CACHING FALSE command.\n+    };\n+\n     // Sets to true when CLIENT TRACKING is ON\n     void SetClientTracking(bool is_on) {\n       tracking_enabled_ = is_on;\n@@ -196,9 +205,9 @@ struct ConnectionState {\n       ++seq_num_;\n     }\n \n-    // Set if OPTIN subcommand is used in CLIENT TRACKING\n-    void SetOptin(bool optin) {\n-      optin_ = optin;\n+    // Set if OPTIN/OPTOUT subcommand is used in CLIENT TRACKING\n+    void SetOption(Options option) {\n+      option_ = option;\n     }\n \n     // Check if the keys should be tracked. Result adheres to the state machine described above.\n@@ -219,10 +228,14 @@ struct ConnectionState {\n       caching_seq_num_ = 0;\n     }\n \n+    bool HasOption(Options option) const {\n+      return option_ == option;\n+    }\n+\n    private:\n     // a flag indicating whether the client has turned on client tracking.\n     bool tracking_enabled_ = false;\n-    bool optin_ = false;\n+    Options option_ = NONE;\n     // sequence number\n     size_t seq_num_ = 0;\n     size_t caching_seq_num_ = 0;\ndiff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex f749f3d97a90..d3afbae5da2d 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -466,7 +466,8 @@ void ClientTracking(CmdArgList args, ConnectionContext* cntx) {\n     return cntx->SendError(kSyntaxErr);\n \n   bool is_on = false;\n-  bool optin = false;\n+  using Tracking = ConnectionState::ClientTracking;\n+  Tracking::Options option = Tracking::NONE;\n   if (parser.Check(\"ON\").IgnoreCase()) {\n     is_on = true;\n   } else if (!parser.Check(\"OFF\").IgnoreCase()) {\n@@ -475,7 +476,9 @@ void ClientTracking(CmdArgList args, ConnectionContext* cntx) {\n \n   if (parser.HasNext()) {\n     if (parser.Check(\"OPTIN\").IgnoreCase()) {\n-      optin = true;\n+      option = Tracking::OPTIN;\n+    } else if (parser.Check(\"OPTOUT\").IgnoreCase()) {\n+      option = Tracking::OPTOUT;\n     } else {\n       return cntx->SendError(kSyntaxErr);\n     }\n@@ -485,7 +488,7 @@ void ClientTracking(CmdArgList args, ConnectionContext* cntx) {\n     ++cntx->subscriptions;\n   }\n   cntx->conn_state.tracking_info_.SetClientTracking(is_on);\n-  cntx->conn_state.tracking_info_.SetOptin(optin);\n+  cntx->conn_state.tracking_info_.SetOption(option);\n   return cntx->SendOk();\n }\n \n@@ -499,16 +502,26 @@ void ClientCaching(CmdArgList args, ConnectionContext* cntx) {\n     return cntx->SendError(kSyntaxErr);\n   }\n \n+  using Tracking = ConnectionState::ClientTracking;\n   CmdArgParser parser{args};\n   if (parser.Check(\"YES\").IgnoreCase()) {\n-    bool is_multi = cntx->transaction && cntx->transaction->IsMulti();\n-    cntx->conn_state.tracking_info_.SetCachingSequenceNumber(is_multi);\n+    if (!cntx->conn_state.tracking_info_.HasOption(Tracking::OPTIN)) {\n+      return cntx->SendError(\n+          \"ERR CLIENT CACHING YES is only valid when tracking is enabled in OPTIN mode\");\n+    }\n   } else if (parser.Check(\"NO\").IgnoreCase()) {\n+    if (!cntx->conn_state.tracking_info_.HasOption(Tracking::OPTOUT)) {\n+      return cntx->SendError(\n+          \"ERR CLIENT CACHING NO is only valid when tracking is enabled in OPTOUT mode\");\n+    }\n     cntx->conn_state.tracking_info_.ResetCachingSequenceNumber();\n   } else {\n     return cntx->SendError(kSyntaxErr);\n   }\n \n+  bool is_multi = cntx->transaction && cntx->transaction->IsMulti();\n+  cntx->conn_state.tracking_info_.SetCachingSequenceNumber(is_multi);\n+\n   cntx->SendOk();\n }\n \n",
  "test_patch": "diff --git a/src/server/server_family_test.cc b/src/server/server_family_test.cc\nindex cfea9ea78421..4c4229e58969 100644\n--- a/src/server/server_family_test.cc\n+++ b/src/server/server_family_test.cc\n@@ -211,6 +211,14 @@ TEST_F(ServerFamilyTest, ClientTrackingOnAndOff) {\n   resp = Run({\"CLIENT\", \"TRACKING\", \"ON\"});\n   EXPECT_THAT(resp.GetString(), \"OK\");\n \n+  resp = Run({\"CLIENT\", \"CACHING\", \"YES\"});\n+  EXPECT_THAT(\n+      resp, ErrArg(\"ERR CLIENT CACHING YES is only valid when tracking is enabled in OPTIN mode\"));\n+\n+  resp = Run({\"CLIENT\", \"CACHING\", \"NO\"});\n+  EXPECT_THAT(\n+      resp, ErrArg(\"ERR CLIENT CACHING NO is only valid when tracking is enabled in OPTOUT mode\"));\n+\n   // case 3. turn off client tracking\n   resp = Run({\"CLIENT\", \"TRACKING\", \"OFF\"});\n   EXPECT_THAT(resp.GetString(), \"OK\");\n@@ -347,7 +355,6 @@ TEST_F(ServerFamilyTest, ClientTrackingMultiOptin) {\n   Run({\"SET\", \"TMP\", \"10\"});\n   Run({\"CLIENT\", \"CACHING\", \"YES\"});\n   Run({\"GET\", \"FOO\"});\n-  Run({\"CLIENT\", \"CACHING\", \"NO\"});\n   Run({\"GET\", \"BAR\"});\n   Run({\"EXEC\"});\n \n@@ -357,7 +364,51 @@ TEST_F(ServerFamilyTest, ClientTrackingMultiOptin) {\n   EXPECT_EQ(InvalidationMessagesLen(\"IO0\"), 5);\n   Run({\"SET\", \"BAR\", \"10\"});\n   Run({\"GET\", \"BAR\"});\n-  EXPECT_EQ(InvalidationMessagesLen(\"IO0\"), 5);\n+  EXPECT_EQ(InvalidationMessagesLen(\"IO0\"), 6);\n+}\n+\n+TEST_F(ServerFamilyTest, ClientTrackingOptout) {\n+  Run({\"HELLO\", \"3\"});\n+  // Check stickiness\n+  Run({\"CLIENT\", \"TRACKING\", \"ON\", \"OPTOUT\"});\n+  Run({\"GET\", \"FOO\"});\n+  Run({\"SET\", \"FOO\", \"BAR\"});\n+  Run({\"GET\", \"BAR\"});\n+  Run({\"SET\", \"BAR\", \"FOO\"});\n+  EXPECT_EQ(InvalidationMessagesLen(\"IO0\"), 2);\n+\n+  // Switch off tracking for a single command\n+  Run({\"CLIENT\", \"CACHING\", \"NO\"});\n+  Run({\"GET\", \"FOO\"});\n+  Run({\"SET\", \"FOO\", \"BAR\"});\n+  EXPECT_EQ(InvalidationMessagesLen(\"IO0\"), 2);\n+}\n+\n+TEST_F(ServerFamilyTest, ClientTrackingMultiOptout) {\n+  Run({\"HELLO\", \"3\"});\n+  // Check stickiness\n+  Run({\"CLIENT\", \"TRACKING\", \"ON\", \"OPTOUT\"});\n+\n+  Run({\"MULTI\"});\n+  Run({\"GET\", \"FOO\"});\n+  Run({\"SET\", \"TMP\", \"10\"});\n+  Run({\"GET\", \"FOOBAR\"});\n+  Run({\"EXEC\"});\n+\n+  Run({\"SET\", \"FOO\", \"10\"});\n+  Run({\"SET\", \"FOOBAR\", \"10\"});\n+  EXPECT_EQ(InvalidationMessagesLen(\"IO0\"), 2);\n+\n+  // CACHING enclosed in MULTI\n+  Run({\"MULTI\"});\n+  Run({\"CLIENT\", \"CACHING\", \"NO\"});\n+  Run({\"GET\", \"TMP\"});\n+  Run({\"GET\", \"TMP_TMP\"});\n+  Run({\"SET\", \"TMP\", \"10\"});\n+  Run({\"SET\", \"TMP_TMP\", \"10\"});\n+  Run({\"EXEC\"});\n+\n+  EXPECT_EQ(InvalidationMessagesLen(\"IO0\"), 2);\n }\n \n TEST_F(ServerFamilyTest, ClientTrackingUpdateKey) {\n",
  "problem_statement": "Implement OPTOUT and NOLOOP for CLIENT TRACKING\n* Implement OPTOUT\r\n* Implement NOLOOP\n",
  "hints_text": "",
  "created_at": "2024-06-10T15:52:05Z",
  "modified_files": [
    "src/server/conn_context.cc",
    "src/server/conn_context.h",
    "src/server/server_family.cc"
  ],
  "modified_test_files": [
    "src/server/server_family_test.cc"
  ]
}