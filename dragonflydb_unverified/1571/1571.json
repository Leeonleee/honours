{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1571,
  "instance_id": "dragonflydb__dragonfly-1571",
  "issue_numbers": [
    "1570"
  ],
  "base_commit": "e44cc68b730b5d38945409dabc7d26c99de6c1fa",
  "patch": "diff --git a/src/server/rdb_load.cc b/src/server/rdb_load.cc\nindex ac5b500ba8f8..825130e6e028 100644\n--- a/src/server/rdb_load.cc\n+++ b/src/server/rdb_load.cc\n@@ -1165,20 +1165,14 @@ auto RdbLoaderBase::FetchLzfStringObject() -> io::Result<string> {\n }\n \n auto RdbLoaderBase::FetchIntegerObject(int enctype) -> io::Result<string> {\n-  long long val;\n+  io::Result<long long> val = ReadIntObj(enctype);\n \n-  if (enctype == RDB_ENC_INT8) {\n-    SET_OR_UNEXPECT(FetchInt<int8_t>(), val);\n-  } else if (enctype == RDB_ENC_INT16) {\n-    SET_OR_UNEXPECT(FetchInt<uint16_t>(), val);\n-  } else if (enctype == RDB_ENC_INT32) {\n-    SET_OR_UNEXPECT(FetchInt<uint32_t>(), val);\n-  } else {\n-    return Unexpected(errc::invalid_encoding);\n+  if (!val.has_value()) {\n+    return val.get_unexpected();\n   }\n \n   char buf[32];\n-  absl::numbers_internal::FastIntToBuffer(val, buf);\n+  absl::numbers_internal::FastIntToBuffer(*val, buf);\n \n   return string(buf);\n }\n@@ -1323,9 +1317,9 @@ io::Result<long long> RdbLoaderBase::ReadIntObj(int enctype) {\n   if (enctype == RDB_ENC_INT8) {\n     SET_OR_UNEXPECT(FetchInt<int8_t>(), val);\n   } else if (enctype == RDB_ENC_INT16) {\n-    SET_OR_UNEXPECT(FetchInt<uint16_t>(), val);\n+    SET_OR_UNEXPECT(FetchInt<int16_t>(), val);\n   } else if (enctype == RDB_ENC_INT32) {\n-    SET_OR_UNEXPECT(FetchInt<uint32_t>(), val);\n+    SET_OR_UNEXPECT(FetchInt<int32_t>(), val);\n   } else {\n     return Unexpected(errc::invalid_encoding);\n   }\n",
  "test_patch": "diff --git a/src/server/rdb_test.cc b/src/server/rdb_test.cc\nindex f8bbb2b8f3d9..9dd1f7f12049 100644\n--- a/src/server/rdb_test.cc\n+++ b/src/server/rdb_test.cc\n@@ -220,6 +220,10 @@ TEST_F(RdbTest, Reload) {\n   Run({\"zadd\", \"zs1\", \"1.1\", \"a\", \"-1.1\", \"b\"});\n   Run({\"zadd\", \"zs2\", \"1.1\", string(510, 'a'), \"-1.1\", string(502, 'b')});\n \n+  Run({\"hset\", \"large_keyname\", string(240, 'X'), \"-5\"});\n+  Run({\"hset\", \"large_keyname\", string(240, 'Y'), \"-500\"});\n+  Run({\"hset\", \"large_keyname\", string(240, 'Z'), \"-50000\"});\n+\n   auto resp = Run({\"debug\", \"reload\"});\n   ASSERT_EQ(resp, \"OK\");\n \n@@ -230,6 +234,10 @@ TEST_F(RdbTest, Reload) {\n   EXPECT_EQ(4, CheckedInt({\"LLEN\", \"list_key2\"}));\n   EXPECT_EQ(2, CheckedInt({\"ZCARD\", \"zs1\"}));\n   EXPECT_EQ(2, CheckedInt({\"ZCARD\", \"zs2\"}));\n+\n+  EXPECT_EQ(-5, CheckedInt({\"hget\", \"large_keyname\", string(240, 'X')}));\n+  EXPECT_EQ(-500, CheckedInt({\"hget\", \"large_keyname\", string(240, 'Y')}));\n+  EXPECT_EQ(-50000, CheckedInt({\"hget\", \"large_keyname\", string(240, 'Z')}));\n }\n \n TEST_F(RdbTest, ReloadTtl) {\n",
  "problem_statement": "After restart dragonfly converts negative int16 values into 2^16-{value}\n**Describe the bug**\r\nHello guys! We're running dragonfly with int16 negative values for a few weeks and all were fine. \r\nBut after today's restart we experinced some unexpected behaviour, all negative values in DB (at least in hash sets) were converted into 2^16- {value} (like 65296 instead of -240). And it occured right after restart, here are logs from client side (we're using redis/go-redis v9), error occurs right after exit from loading state:\r\n```\r\n2023/07/19 06:42:54.704568 ERROR:[miner] failed to get users for batchNumber:10,workerNumber:14: cannot scan redis.result 65176 into struct field UTCOffsetField.UTCOffset of type int16, error-strconv.ParseInt: parsing \"65176\": value out of range\r\n\r\n2023-07-19 06:42:54    \r\n2023/07/19 06:42:54.703264 ERROR:[miner] failed to get users for batchNumber:11,workerNumber:67: ERR Can not execute during LOADING\r\n```\r\n\r\n\r\nAnd direct DB call `HGET XXX \"utc_offset\"` returned that 65XXX value on both replica and master nodes.\r\n\r\n\r\n**To Reproduce**\r\nthe reason is because internally both Redis and Dragonfly have differrent data structures\r\nfor hset\r\n(called encodings)\r\nso for small hash maps it works well\r\nto reproduce - you need to force Dragonfly to switch to large encoding\r\nhset xxx baraaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa -200\r\nlike this\r\n\r\n**Expected behavior**\r\nValues should stay the same\r\n\r\n**Screenshots**\r\n\r\n**Environment (please complete the following information):**\r\n - Containerized?: running in docker\r\n - Dragonfly Version: 1.30\r\n\r\n**Reproducible Code Snippet**\r\n```\r\n# Minimal code snippet to reproduce this bug\r\n```\r\n\r\n**Additional context**\r\n[Discord thread](https://discord.com/channels/981533931486724126/981533931960676364/1131182704633860187)\n",
  "hints_text": "",
  "created_at": "2023-07-19T11:51:48Z",
  "modified_files": [
    "src/server/rdb_load.cc"
  ],
  "modified_test_files": [
    "src/server/rdb_test.cc"
  ]
}