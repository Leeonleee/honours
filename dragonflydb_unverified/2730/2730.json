{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2730,
  "instance_id": "dragonflydb__dragonfly-2730",
  "issue_numbers": [
    "2707"
  ],
  "base_commit": "e9548a2917e45a6adfc04046a0a5319b374731c4",
  "patch": "diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml\nindex 2ccf0f7aacc1..15b6cebfc82c 100644\n--- a/.github/workflows/ci.yml\n+++ b/.github/workflows/ci.yml\n@@ -176,5 +176,5 @@ jobs:\n   lint-test-chart:\n     runs-on: ubuntu-latest\n     steps:\n-      - uses: actions/checkout@v3\n+      - uses: actions/checkout@v4\n       - uses: ./.github/actions/lint-test-chart\ndiff --git a/.github/workflows/daily-builds.yml b/.github/workflows/daily-builds.yml\nindex d56857bf95dd..8dd5b4177331 100644\n--- a/.github/workflows/daily-builds.yml\n+++ b/.github/workflows/daily-builds.yml\n@@ -85,8 +85,13 @@ jobs:\n \n       - name: Install dependencies\n         run: |\n-          brew update && brew install ninja boost openssl automake gcc zstd bison c-ares \\\n-              autoconf libtool automake flatbuffers\n+          brew uninstall --formula node kotlin harfbuzz sbt selenium-server imagemagick \\\n+              gradle maven openjdk postgresql r ant mongodb-community@5.0 mongosh \\\n+              node@18 php composer\n+\n+          brew update && brew install --force ninja boost openssl automake gcc zstd bison c-ares \\\n+              autoconf libtool automake\n+\n           # brew info icu4c\n           mkdir -p $GITHUB_WORKSPACE/build\n \ndiff --git a/.github/workflows/docker-release.yml b/.github/workflows/docker-release.yml\nindex dab5b6342d9e..6cd4428a2be6 100644\n--- a/.github/workflows/docker-release.yml\n+++ b/.github/workflows/docker-release.yml\n@@ -68,7 +68,7 @@ jobs:\n         fetch-depth: 0\n \n     - name: Install helm\n-      uses: azure/setup-helm@v3\n+      uses: azure/setup-helm@v4\n \n     - name: Setup Go\n       uses: actions/setup-go@v4\ndiff --git a/.github/workflows/release.yml b/.github/workflows/release.yml\nindex 3cf69afc95a7..a82b5b9a130d 100644\n--- a/.github/workflows/release.yml\n+++ b/.github/workflows/release.yml\n@@ -29,7 +29,7 @@ jobs:\n     name: Build aarch64 on ubuntu20.04\n     needs: create-release\n     steps:\n-    - uses: actions/checkout@v3\n+    - uses: actions/checkout@v4\n       with:\n         submodules: true\n     - name: Cache build deps\n@@ -111,7 +111,7 @@ jobs:\n     container:\n       image: ghcr.io/romange/${{ matrix.container }}\n     steps:\n-    - uses: actions/checkout@v3\n+    - uses: actions/checkout@v4\n       with:\n         submodules: true\n     - name: Configure\ndiff --git a/.github/workflows/reusable-container-workflow.yaml b/.github/workflows/reusable-container-workflow.yaml\nindex e526b19e80f2..35981ce1c4ed 100644\n--- a/.github/workflows/reusable-container-workflow.yaml\n+++ b/.github/workflows/reusable-container-workflow.yaml\n@@ -60,7 +60,7 @@ jobs:\n             tag_main: true\n     steps:\n       - name: checkout\n-        uses: actions/checkout@v3\n+        uses: actions/checkout@v4\n         with:\n           fetch-depth: 1\n           submodules: true\ndiff --git a/contrib/charts/dragonfly/ci/priorityclassname-values.golden.yaml b/contrib/charts/dragonfly/ci/priorityclassname-values.golden.yaml\nindex 793d917329ae..3e50dbfc52e7 100644\n--- a/contrib/charts/dragonfly/ci/priorityclassname-values.golden.yaml\n+++ b/contrib/charts/dragonfly/ci/priorityclassname-values.golden.yaml\n@@ -1,4 +1,13 @@\n ---\n+# Source: dragonfly/templates/extra-manifests.yaml\n+apiVersion: scheduling.k8s.io/v1\n+description: This priority class should be used only for tests.\n+globalDefault: false\n+kind: PriorityClass\n+metadata:\n+  name: high-priority\n+value: 1000000\n+---\n # Source: dragonfly/templates/serviceaccount.yaml\n apiVersion: v1\n kind: ServiceAccount\n@@ -92,12 +101,3 @@ spec:\n           resources:\n             limits: {}\n             requests: {}\n----\n-# Source: dragonfly/templates/extra-manifests.yaml\n-apiVersion: scheduling.k8s.io/v1\n-description: This priority class should be used only for tests.\n-globalDefault: false\n-kind: PriorityClass\n-metadata:\n-  name: high-priority\n-value: 1000000\ndiff --git a/helio b/helio\nindex b3ed89d13ea3..91c4f48d025b 160000\n--- a/helio\n+++ b/helio\n@@ -1,1 +1,1 @@\n-Subproject commit b3ed89d13ea3b7095e3a48915ec9c8cd01223039\n+Subproject commit 91c4f48d025bccd6fc3ff14e471accf1c7801f38\ndiff --git a/src/core/mi_memory_resource.cc b/src/core/mi_memory_resource.cc\nindex 37ed7d81ac33..48c1dec44d87 100644\n--- a/src/core/mi_memory_resource.cc\n+++ b/src/core/mi_memory_resource.cc\n@@ -3,18 +3,21 @@\n //\n #include \"core/mi_memory_resource.h\"\n \n+#include <sys/mman.h>\n+\n #include \"base/logging.h\"\n \n namespace dfly {\n \n-void* MiMemoryResource::do_allocate(std::size_t size, std::size_t align) {\n+using namespace std;\n+\n+void* MiMemoryResource::do_allocate(size_t size, size_t align) {\n   DCHECK(align);\n \n   void* res = mi_heap_malloc_aligned(heap_, size, align);\n \n   if (!res)\n-    throw std::bad_alloc{};\n-\n+    throw bad_alloc{};\n \n   // It seems that mimalloc has a bug with larger allocations that causes\n   // mi_heap_contains_block to lie. See https://github.com/microsoft/mimalloc/issues/587\n@@ -28,7 +31,7 @@ void* MiMemoryResource::do_allocate(std::size_t size, std::size_t align) {\n   return res;\n }\n \n-void MiMemoryResource::do_deallocate(void* ptr, std::size_t size, std::size_t align) {\n+void MiMemoryResource::do_deallocate(void* ptr, size_t size, size_t align) {\n   DCHECK(size > 33554400 || mi_heap_contains_block(heap_, ptr));\n \n   size_t usable = mi_usable_size(ptr);\ndiff --git a/src/core/mi_memory_resource.h b/src/core/mi_memory_resource.h\nindex a1194336ff27..fd842eddbb0d 100644\n--- a/src/core/mi_memory_resource.h\n+++ b/src/core/mi_memory_resource.h\n@@ -10,6 +10,7 @@\n \n namespace dfly {\n \n+// Per thread memory resource that uses mimalloc.\n class MiMemoryResource : public PMR_NS::memory_resource {\n  public:\n   explicit MiMemoryResource(mi_heap_t* heap) : heap_(heap) {\ndiff --git a/src/server/CMakeLists.txt b/src/server/CMakeLists.txt\nindex 0e0422d53667..df40cf6cee3b 100644\n--- a/src/server/CMakeLists.txt\n+++ b/src/server/CMakeLists.txt\n@@ -7,7 +7,7 @@ cxx_link(dragonfly base dragonfly_lib)\n if (CMAKE_SYSTEM_PROCESSOR STREQUAL \"x86_64\" AND CMAKE_BUILD_TYPE STREQUAL \"Release\")\n   # Add core2 only to this file, thus avoiding instructions in this object file that\n   # can cause SIGILL.\n-  set_source_files_properties(dfly_main.cc PROPERTIES COMPILE_FLAGS -march=core2)\n+  set_source_files_properties(dfly_main.cc PROPERTIES COMPILE_FLAGS \"-march=core2\")\n endif()\n \n set_property(SOURCE dfly_main.cc APPEND PROPERTY COMPILE_DEFINITIONS\ndiff --git a/src/server/dfly_main.cc b/src/server/dfly_main.cc\nindex a2ec48e67f57..3e7dcc366ab2 100644\n--- a/src/server/dfly_main.cc\n+++ b/src/server/dfly_main.cc\n@@ -90,6 +90,11 @@ namespace dfly {\n \n namespace {\n \n+// Default stack size for fibers. We decrease it by 16 bytes because some allocators\n+// need additional 8-16 bytes for their internal structures, thus over reserving additional\n+// memory pages if using round sizes.\n+constexpr size_t kFiberDefaultStackSize = 32_KB - 16;\n+\n using util::http::TlsClient;\n \n enum class TermColor { kDefault, kRed, kGreen, kYellow };\n@@ -151,6 +156,12 @@ string NormalizePaths(std::string_view path) {\n   return string(path);\n }\n \n+template <typename... Args> unique_ptr<Listener> MakeListener(Args&&... args) {\n+  auto res = make_unique<Listener>(forward<Args>(args)...);\n+  res->SetConnFiberStackSize(kFiberDefaultStackSize);\n+  return res;\n+}\n+\n bool RunEngine(ProactorPool* pool, AcceptServer* acceptor) {\n   uint64_t maxmemory = GetMaxMemoryFlag();\n   if (maxmemory > 0 && maxmemory < pool->size() * 256_MB) {\n@@ -165,12 +176,14 @@ bool RunEngine(ProactorPool* pool, AcceptServer* acceptor) {\n   Listener* main_listener = nullptr;\n \n   std::vector<facade::Listener*> listeners;\n+\n   // If we ever add a new listener, plz don't change this,\n   // we depend on tcp listener to be at the front since we later\n   // need to pass it to the AclFamily::Init\n   if (!tcp_disabled) {\n-    main_listener = new Listener{Protocol::REDIS, &service, Listener::Role::MAIN};\n-    listeners.push_back(main_listener);\n+    auto listener = MakeListener(Protocol::REDIS, &service, Listener::Role::MAIN);\n+    main_listener = listener.get();\n+    listeners.push_back(listener.release());\n   }\n \n   Service::InitOpts opts;\n@@ -218,7 +231,7 @@ bool RunEngine(ProactorPool* pool, AcceptServer* acceptor) {\n     }\n     unlink(unix_sock.c_str());\n \n-    auto uds_listener = std::make_unique<Listener>(Protocol::REDIS, &service);\n+    auto uds_listener = MakeListener(Protocol::REDIS, &service);\n     error_code ec =\n         acceptor->AddUDSListener(unix_sock.c_str(), unix_socket_perm, uds_listener.get());\n     if (ec) {\n@@ -248,8 +261,8 @@ bool RunEngine(ProactorPool* pool, AcceptServer* acceptor) {\n     const char* interface_addr = admin_bind.empty() ? nullptr : admin_bind.c_str();\n     const std::string printable_addr =\n         absl::StrCat(\"admin socket \", interface_addr ? interface_addr : \"any\", \":\", admin_port);\n-    auto admin_listener =\n-        std::make_unique<Listener>(Protocol::REDIS, &service, Listener::Role::PRIVILEGED);\n+    auto admin_listener = MakeListener(Protocol::REDIS, &service, Listener::Role::PRIVILEGED);\n+\n     error_code ec = acceptor->AddListener(interface_addr, admin_port, admin_listener.get());\n \n     if (ec) {\n@@ -260,7 +273,7 @@ bool RunEngine(ProactorPool* pool, AcceptServer* acceptor) {\n     }\n   }\n \n-  if (!tcp_disabled) {\n+  if (main_listener) {\n     error_code ec = acceptor->AddListener(bind_addr, port, main_listener);\n \n     if (ec) {\n@@ -274,7 +287,8 @@ bool RunEngine(ProactorPool* pool, AcceptServer* acceptor) {\n   }\n \n   if (mc_port > 0 && !tcp_disabled) {\n-    acceptor->AddListener(mc_port, new Listener{Protocol::MEMCACHE, &service});\n+    auto listener = MakeListener(Protocol::MEMCACHE, &service);\n+    acceptor->AddListener(mc_port, listener.release());\n   }\n \n   service.Init(acceptor, listeners, opts);\n@@ -690,10 +704,14 @@ Usage: dragonfly [FLAGS]\n     LOG(INFO) << \"Max memory limit is: \" << hr_limit;\n   }\n \n+  // Initialize mi_malloc options\n+  // export MIMALLOC_VERBOSE=1 to see the options before the override.\n   mi_option_enable(mi_option_show_errors);\n   mi_option_set(mi_option_max_warnings, 0);\n   mi_option_set(mi_option_decommit_delay, 1);\n \n+  fb2::SetDefaultStackResource(&fb2::std_malloc_resource, kFiberDefaultStackSize);\n+\n   unique_ptr<util::ProactorPool> pool;\n \n #ifdef __linux__\n@@ -716,7 +734,7 @@ Usage: dragonfly [FLAGS]\n \n   pool->Run();\n \n-  AcceptServer acceptor(pool.get());\n+  AcceptServer acceptor(pool.get(), &fb2::std_malloc_resource, true);\n   acceptor.set_back_log(absl::GetFlag(FLAGS_tcp_backlog));\n \n   int res = dfly::RunEngine(pool.get(), &acceptor) ? 0 : -1;\ndiff --git a/src/server/memory_cmd.cc b/src/server/memory_cmd.cc\nindex 228ed1ff0f1c..03d0c6f00e3f 100644\n--- a/src/server/memory_cmd.cc\n+++ b/src/server/memory_cmd.cc\n@@ -1,11 +1,15 @@\n-// Copyright 2022, DragonflyDB authors.  All rights reserved.\n+// Copyright 2024, DragonflyDB authors.  All rights reserved.\n // See LICENSE for licensing terms.\n //\n \n #include \"server/memory_cmd.h\"\n \n #include <absl/strings/str_cat.h>\n+\n+#ifdef __linux__\n #include <malloc.h>\n+#endif\n+\n #include <mimalloc.h>\n \n #include \"base/io_buf.h\"\ndiff --git a/src/server/replica.cc b/src/server/replica.cc\nindex ad832a249c40..a5051a81739b 100644\n--- a/src/server/replica.cc\n+++ b/src/server/replica.cc\n@@ -6,7 +6,6 @@\n #include <chrono>\n \n #include \"absl/strings/match.h\"\n-#include \"util/fibers/fiber2.h\"\n \n extern \"C\" {\n #include \"redis/rdb.h\"\ndiff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex c242146dbd11..41aaf52d3920 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -1023,8 +1023,11 @@ void PrintPrometheusMetrics(const Metrics& m, StringResponse* resp) {\n                             &resp->body());\n   AppendMetricWithoutLabels(\"memory_used_peak_bytes\", \"\", used_mem_peak.load(memory_order_relaxed),\n                             MetricType::GAUGE, &resp->body());\n-  AppendMetricWithoutLabels(\"comitted_memory\", \"\", GetMallocCurrentCommitted(), MetricType::GAUGE,\n+  AppendMetricWithoutLabels(\"memory_fiberstack_vms_bytes\", \"\", m.worker_fiber_stack_size,\n+                            MetricType::GAUGE, &resp->body());\n+  AppendMetricWithoutLabels(\"fibers_count\", \"\", m.worker_fiber_count, MetricType::GAUGE,\n                             &resp->body());\n+\n   AppendMetricWithoutLabels(\"memory_max_bytes\", \"\", max_memory_limit, MetricType::GAUGE,\n                             &resp->body());\n \n@@ -1773,6 +1776,8 @@ Metrics ServerFamily::GetMetrics() const {\n     result.fiber_switch_delay_usec += fb2::FiberSwitchDelayUsec();\n     result.fiber_longrun_cnt += fb2::FiberLongRunCnt();\n     result.fiber_longrun_usec += fb2::FiberLongRunSumUsec();\n+    result.worker_fiber_stack_size += fb2::WorkerFibersStackSize();\n+    result.worker_fiber_count += fb2::WorkerFibersCount();\n \n     result.coordinator_stats.Add(ss->stats);\n \n@@ -1888,13 +1893,15 @@ void ServerFamily::Info(CmdArgList args, ConnectionContext* cntx) {\n     append(\"used_memory_peak\", ump);\n     append(\"used_memory_peak_human\", HumanReadableNumBytes(ump));\n \n+    // Virtual memory size, upper bound estimation on the RSS memory used by the fiber stacks.\n+    append(\"fibers_stack_vms\", m.worker_fiber_stack_size);\n+    append(\"fibers_count\", m.worker_fiber_count);\n+\n     size_t rss = rss_mem_current.load(memory_order_relaxed);\n     append(\"used_memory_rss\", rss);\n     append(\"used_memory_rss_human\", HumanReadableNumBytes(rss));\n     append(\"used_memory_peak_rss\", rss_mem_peak.load(memory_order_relaxed));\n \n-    append(\"comitted_memory\", GetMallocCurrentCommitted());\n-\n     append(\"maxmemory\", max_memory_limit);\n     append(\"maxmemory_human\", HumanReadableNumBytes(max_memory_limit));\n \ndiff --git a/src/server/server_family.h b/src/server/server_family.h\nindex f589924ad12b..a33c05b62cea 100644\n--- a/src/server/server_family.h\n+++ b/src/server/server_family.h\n@@ -99,6 +99,8 @@ struct Metrics {\n \n   // Max length of the all the tx shard-queues.\n   uint32_t tx_queue_len = 0;\n+  uint32_t worker_fiber_count = 0;\n+  size_t worker_fiber_stack_size = 0;\n \n   // command call frequencies (count, aggregated latency in usec).\n   std::map<std::string, std::pair<uint64_t, uint64_t>> cmd_stats_map;\n",
  "test_patch": "diff --git a/.github/actions/lint-test-chart/action.yml b/.github/actions/lint-test-chart/action.yml\nindex 5fd8e34d369f..a0583d31571a 100644\n--- a/.github/actions/lint-test-chart/action.yml\n+++ b/.github/actions/lint-test-chart/action.yml\n@@ -10,7 +10,7 @@ runs:\n           fetch-depth: 0\n \n       - name: Set up Helm\n-        uses: azure/setup-helm@v3\n+        uses: azure/setup-helm@v4\n \n       - uses: actions/setup-python@v5\n         with:\n@@ -43,7 +43,7 @@ runs:\n             ${{github.event_name == 'workflow_dispatch' && '--all'}} ;\n \n       - name: Create kind cluster\n-        uses: helm/kind-action@v1.8.0\n+        uses: helm/kind-action@v1\n \n       - name: Getting cluster ready\n         shell: bash\ndiff --git a/.github/workflows/regression-tests.yml b/.github/workflows/regression-tests.yml\nindex 69b9d32ea837..baf75b403ffc 100644\n--- a/.github/workflows/regression-tests.yml\n+++ b/.github/workflows/regression-tests.yml\n@@ -18,7 +18,7 @@ jobs:\n     container:\n       image: ghcr.io/romange/${{ matrix.container }}\n     steps:\n-      - uses: actions/checkout@v3\n+      - uses: actions/checkout@v4\n         with:\n           submodules: true\n \n@@ -57,5 +57,5 @@ jobs:\n   lint-test-chart:\n     runs-on: ubuntu-latest\n     steps:\n-      - uses: actions/checkout@v3\n+      - uses: actions/checkout@v4\n       - uses: ./.github/actions/lint-test-chart\n",
  "problem_statement": "fiber stack allocator\nCurrently, we allocate stacks using an allocator that allocates 64KB ranges per fiber stack (16 pages long).\r\nUpon inspection of what pages are touched I noticed that we load 3 pages per each stack:  page 0 at the beginning of the range and pages 14, 15 at the end of the range.  2 pages at the end are explained by the fact that stack starts at page 15 and progresses downwards from higher addresses to lower. However, page 0 is preloaded unnecessary because of the implementation details of the allocator which uses first bytes of each block/range as its internal metadata.\r\n\r\nWe could implement our own allocator over mmap.\r\n\r\n1. Simplest option is to mmap(64KB)/unmap directly per each stack allocation/deallocation . Then we would have an optimal RSS usage but this would require a syscall per each allocation/deallocation.\r\n2. Another option is to have an allocator that would mmap 2MB pages, and use 32bit mask per page to allocate 64KB ranges from each page. Upon each fiber-stack destruction  we would use `io_uring/IORING_OP_MADVISE DONT_NEED` to unload asynchronously a range from each range from the RSS. If a 2MB page becomes fully available we would unmap it completely, otherwise we would manage descriptors of partial pages in the queue per thread. This resembles the design of an allocator library though because the stack sizes are 4KB aligned and with predefined sizes, the implementation will be much simpler.\n",
  "hints_text": "When I was writing this issue I had another idea: we can just use our regular allocator but just call madvise on the first page of the range before returning the stack pointer. We could call madvise/IORING_OP_MADVISE during the allocation and deallocation flow using a regular allocator.\nI would prefer to see preallocated memory for stacks and reuse it for fibers without deallocation. In this case, we will not have any system calls (new calls only if we create more fibers)",
  "created_at": "2024-03-14T17:21:44Z",
  "modified_files": [
    ".github/workflows/ci.yml",
    ".github/workflows/daily-builds.yml",
    ".github/workflows/docker-release.yml",
    ".github/workflows/release.yml",
    ".github/workflows/reusable-container-workflow.yaml",
    "contrib/charts/dragonfly/ci/priorityclassname-values.golden.yaml",
    "helio",
    "src/core/mi_memory_resource.cc",
    "src/core/mi_memory_resource.h",
    "src/server/CMakeLists.txt",
    "src/server/dfly_main.cc",
    "src/server/memory_cmd.cc",
    "src/server/replica.cc",
    "src/server/server_family.cc",
    "src/server/server_family.h"
  ],
  "modified_test_files": [
    ".github/actions/lint-test-chart/action.yml",
    ".github/workflows/regression-tests.yml"
  ]
}