{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2411,
  "instance_id": "dragonflydb__dragonfly-2411",
  "issue_numbers": [
    "2380"
  ],
  "base_commit": "b3e36b0caa99e24e95bed49b39f4ed435ef96f5d",
  "patch": "diff --git a/src/server/hll_family.cc b/src/server/hll_family.cc\nindex d67859a25c5d..0afd565afd92 100644\n--- a/src/server/hll_family.cc\n+++ b/src/server/hll_family.cc\n@@ -258,7 +258,12 @@ OpResult<int> PFMergeInternal(CmdArgList args, ConnectionContext* cntx) {\n     string_view key = ArgS(args, 0);\n     const OpArgs& op_args = t->GetOpArgs(shard);\n     auto& db_slice = op_args.shard->db_slice();\n-    auto res = db_slice.AddOrFind(t->GetDbContext(), key);\n+    DbSlice::AddOrFindResult res;\n+    try {\n+      res = db_slice.AddOrFind(t->GetDbContext(), key);\n+    } catch (const bad_alloc& e) {\n+      return OpStatus::OUT_OF_MEMORY;\n+    }\n     res.it->second.SetString(hll);\n     return OpStatus::OK;\n   };\ndiff --git a/src/server/hset_family.cc b/src/server/hset_family.cc\nindex d6a069e84974..9e2d7d8bb3ac 100644\n--- a/src/server/hset_family.cc\n+++ b/src/server/hset_family.cc\n@@ -168,7 +168,12 @@ OpStatus IncrementValue(optional<string_view> prev_val, IncrByParam* param) {\n \n OpStatus OpIncrBy(const OpArgs& op_args, string_view key, string_view field, IncrByParam* param) {\n   auto& db_slice = op_args.shard->db_slice();\n-  auto add_res = db_slice.AddOrFind(op_args.db_cntx, key);\n+  DbSlice::AddOrFindResult add_res;\n+  try {\n+    add_res = db_slice.AddOrFind(op_args.db_cntx, key);\n+  } catch (const bad_alloc& e) {\n+    return OpStatus::OUT_OF_MEMORY;\n+  }\n \n   DbTableStats* stats = db_slice.MutableStats(op_args.db_cntx.db_index);\n \ndiff --git a/src/server/json_family.cc b/src/server/json_family.cc\nindex f9f0b1617a31..7e320f3e65ec 100644\n--- a/src/server/json_family.cc\n+++ b/src/server/json_family.cc\n@@ -1076,7 +1076,12 @@ OpResult<bool> OpSet(const OpArgs& op_args, string_view key, string_view path,\n       }\n     }\n \n-    SetJson(op_args, key, std::move(parsed_json.value()));\n+    try {\n+      SetJson(op_args, key, std::move(parsed_json.value()));\n+\n+    } catch (const bad_alloc& e) {\n+      return OpStatus::OUT_OF_MEMORY;\n+    }\n     return true;\n   }\n \n@@ -1154,7 +1159,9 @@ void JsonFamily::Set(CmdArgList args, ConnectionContext* cntx) {\n   };\n \n   Transaction* trans = cntx->transaction;\n+\n   OpResult<bool> result = trans->ScheduleSingleHopT(std::move(cb));\n+\n   auto* rb = static_cast<RedisReplyBuilder*>(cntx->reply_builder());\n   if (result) {\n     if (*result) {\ndiff --git a/src/server/string_family.cc b/src/server/string_family.cc\nindex c04189f36574..dcee11858e27 100644\n--- a/src/server/string_family.cc\n+++ b/src/server/string_family.cc\n@@ -88,24 +88,29 @@ OpResult<uint32_t> OpSetRange(const OpArgs& op_args, string_view key, size_t sta\n     }\n   }\n \n-  auto res = db_slice.AddOrFind(op_args.db_cntx, key);\n+  DbSlice::AddOrFindResult res;\n \n-  string s;\n+  try {\n+    res = db_slice.AddOrFind(op_args.db_cntx, key);\n \n-  if (res.is_new) {\n-    s.resize(range_len);\n-  } else {\n-    if (res.it->second.ObjType() != OBJ_STRING)\n-      return OpStatus::WRONG_TYPE;\n+    string s;\n \n-    s = GetString(op_args.shard, res.it->second);\n-    if (s.size() < range_len)\n+    if (res.is_new) {\n       s.resize(range_len);\n-  }\n+    } else {\n+      if (res.it->second.ObjType() != OBJ_STRING)\n+        return OpStatus::WRONG_TYPE;\n \n-  memcpy(s.data() + start, value.data(), value.size());\n-  res.it->second.SetString(s);\n+      s = GetString(op_args.shard, res.it->second);\n+      if (s.size() < range_len)\n+        s.resize(range_len);\n+    }\n \n+    memcpy(s.data() + start, value.data(), value.size());\n+    res.it->second.SetString(s);\n+  } catch (const std::bad_alloc& e) {\n+    return OpStatus::OUT_OF_MEMORY;\n+  }\n   return res.it->second.Size();\n }\n \n@@ -161,7 +166,12 @@ OpResult<uint32_t> ExtendOrSet(const OpArgs& op_args, string_view key, string_vi\n                                bool prepend) {\n   auto* shard = op_args.shard;\n   auto& db_slice = shard->db_slice();\n-  auto add_res = db_slice.AddOrFind(op_args.db_cntx, key);\n+  DbSlice::AddOrFindResult add_res;\n+  try {\n+    add_res = db_slice.AddOrFind(op_args.db_cntx, key);\n+  } catch (const std::bad_alloc& e) {\n+    return OpStatus::OUT_OF_MEMORY;\n+  }\n   if (add_res.is_new) {\n     add_res.it->second.SetString(val);\n     return val.size();\n@@ -224,7 +234,12 @@ OpResult<string> OpMutableGet(const OpArgs& op_args, string_view key, bool del_h\n \n OpResult<double> OpIncrFloat(const OpArgs& op_args, string_view key, double val) {\n   auto& db_slice = op_args.shard->db_slice();\n-  auto add_res = db_slice.AddOrFind(op_args.db_cntx, key);\n+  DbSlice::AddOrFindResult add_res;\n+  try {\n+    add_res = db_slice.AddOrFind(op_args.db_cntx, key);\n+  } catch (const std::bad_alloc& e) {\n+    return OpStatus::OUT_OF_MEMORY;\n+  }\n \n   char buf[128];\n \n@@ -1351,7 +1366,7 @@ void StringFamily::SetRange(CmdArgList args, ConnectionContext* cntx) {\n   Transaction* trans = cntx->transaction;\n   OpResult<uint32_t> result = trans->ScheduleSingleHopT(std::move(cb));\n \n-  if (result.status() == OpStatus::WRONG_TYPE) {\n+  if (!result.ok()) {\n     cntx->SendError(result.status());\n   } else {\n     cntx->SendLong(result.value());\n",
  "test_patch": "diff --git a/tests/dragonfly/generic_test.py b/tests/dragonfly/generic_test.py\nindex 5dcf328dccd0..5551f2684194 100644\n--- a/tests/dragonfly/generic_test.py\n+++ b/tests/dragonfly/generic_test.py\n@@ -119,3 +119,21 @@ async def test_restricted_commands(df_local_factory):\n         async with aioredis.Redis(port=server.admin_port) as admin_client:\n             await admin_client.get(\"foo\")\n             await admin_client.set(\"foo\", \"bar\")\n+\n+\n+@pytest.mark.asyncio\n+async def test_reply_guard_oom(df_local_factory, df_seeder_factory):\n+    master = df_local_factory.create(\n+        proactor_threads=1, cache_mode=\"true\", maxmemory=\"256mb\", enable_heartbeat_eviction=\"false\"\n+    )\n+    df_local_factory.start_all([master])\n+    c_master = master.client()\n+    await c_master.execute_command(\"DEBUG POPULATE 6000 size 44000\")\n+\n+    seeder = df_seeder_factory.create(\n+        port=master.port, keys=5000, val_size=1000, stop_on_failure=False\n+    )\n+    await seeder.run(target_deviation=0.1)\n+\n+    info = await c_master.info(\"stats\")\n+    assert info[\"evicted_keys\"] > 0, \"Weak testcase: policy based eviction was not triggered.\"\n",
  "problem_statement": "DCHECK fail causing crash - Check failed: builder_->HasReplied() \n**Describe the bug**\r\nF20240107 11:57:14.120226 224608 main_service.cc:1188] Check failed: builder_->HasReplied() \r\n*** Check failure stack trace: ***\r\n    @     0x555559cee1b1  google::LogMessage::Fail()\r\n    @     0x555559cee0f7  google::LogMessage::SendToLog()\r\n    @     0x555559ced8cc  google::LogMessage::Flush()\r\n    @     0x555559cf1744  google::LogMessageFatal::~LogMessageFatal()\r\n    @     0x555558524298  dfly::ReplyGuard::~ReplyGuard()\r\n    @     0x5555584a5c88  dfly::Service::InvokeCmd()\r\n    @     0x555558aef0ff  dfly::MultiCommandSquasher::SquashedHopCb()\r\n    @     0x555558aefc52  _ZZN4dfly20MultiCommandSquasher15ExecuteSquashedEvENKUlPT_PT0_E0_clINS_11TransactionENS_11EngineShardEEEDaS2_S4_\r\n    @     0x555558af5031  _ZSt13__invoke_implIN6facade8OpStatusERKZN4dfly20MultiCommandSquasher15ExecuteSquashedEvEUlPT_PT0_E0_JPNS2_11TransactionEPNS2_11EngineShardEEES4_St14__invoke_otherOS6_DpOT1_\r\n    @     0x555558af4953  _ZSt8__invokeIRKZN4dfly20MultiCommandSquasher15ExecuteSquashedEvEUlPT_PT0_E0_JPNS0_11TransactionEPNS0_11EngineShardEEENSt15__invoke_resultIS2_JDpT0_EE4typeEOS2_DpOSE_\r\n    @     0x555558af416f  _ZSt6invokeIRKZN4dfly20MultiCommandSquasher15ExecuteSquashedEvEUlPT_PT0_E0_JPNS0_11TransactionEPNS0_11EngineShardEEENSt13invoke_resultIS2_JDpT0_EE4typeEOS2_DpOSE_\r\n    @     0x555558af3aad  _ZN4absl12lts_2023080219functional_internal12InvokeObjectIZN4dfly20MultiCommandSquasher15ExecuteSquashedEvEUlPT_PT0_E0_N6facade8OpStatusEJPNS3_11TransactionEPNS3_11EngineShardEEEES7_NS1_7VoidPtrEDpNS1_8ForwardTIT1_E4typeE\r\n    @     0x55555918a473  absl::lts_20230802::FunctionRef<>::operator()()\r\n    @     0x55555914eae0  dfly::Transaction::RunInShard()\r\n    @     0x555558c818f5  dfly::EngineShard::PollExecution()\r\n    @     0x55555915a843  dfly::Transaction::ExecuteAsync()\r\n    @     0x5555591549a6  dfly::Transaction::ScheduleSingleHop()\r\n    @     0x555558af075e  dfly::MultiCommandSquasher::ExecuteSquashed()\r\n    @     0x555558af1ce9  dfly::MultiCommandSquasher::Run()\r\n    @     0x55555851f518  dfly::MultiCommandSquasher::Execute()\r\n    @     0x5555584b93ab  dfly::Service::Exec()\r\n    @     0x5555584c4df3  _ZZN4dfly7Service8RegisterEPNS_15CommandRegistryEENKUlN4absl12lts_202308024SpanINS5_IcEEEEPNS_17ConnectionContextEE2_clES7_S9_\r\n    @     0x555558505012  _ZN3fu27abi_4006detail10invocation6invokeIRKZN4dfly7Service8RegisterEPNS4_15CommandRegistryEEUlN4absl12lts_202308024SpanINSA_IcEEEEPNS4_17ConnectionContextEE2_JSC_SE_EEEDTclcl7forwardIT_Efp_Espcl7forwardIT0_Efp0_EEEOSI_DpOSJ_\r\n    @     0x5555584fdbd8  _ZN3fu27abi_4006detail12type_erasure16invocation_table14function_traitIKFvN4absl12lts_202308024SpanINS7_IcEEEEPN4dfly17ConnectionContextEEE16internal_invokerINS2_3boxILb1EZNSA_7Service8RegisterEPNSA_15CommandRegistryEEUlS9_SC_E2_SaISK_EEELb1EE6invokeEPKNS2_13data_accessorEmS9_SC_\r\n    @     0x5555590d446d  _ZNK3fu27abi_4006detail12type_erasure6tables6vtableINS1_8propertyILb0ELb0EJKFvN4absl12lts_202308024SpanINS8_IcEEEEPN4dfly17ConnectionContextEEEEEE6invokeILm0EJPKNS2_13data_accessorERKmSA_SD_EEEDcDpOT0_\r\n    @     0x5555590d46bc  _ZN3fu27abi_4006detail12type_erasure7erasureILb1ENS1_6configILb1ELb1ENS_16capacity_defaultEEENS1_8propertyILb0ELb0EJKFvN4absl12lts_202308024SpanINSA_IcEEEEPN4dfly17ConnectionContextEEEEEE6invokeILm0ERKSI_JSC_SF_EEEDcOT0_DpOT1_\r\n    @     0x5555590d47b7  fu2::abi_400::detail::type_erasure::invocation_table::operator_impl<>::operator()()\r\n    @     0x5555590cd398  dfly::CommandId::Invoke()\r\n    @     0x5555584a4bba  dfly::Service::InvokeCmd()\r\n    @     0x5555584a37f8  dfly::Service::DispatchCommand()\r\n    @     0x5555595210a6  facade::Connection::DispatchOperations::operator()()\r\n    @     0x55555958cd52  facade::Connection::DispatchOperations::operator()<>()\r\n\r\n\r\n**To Reproduce**\r\nrun this pytest:\r\n\r\n```\r\n@pytest.mark.asyncio\r\nasync def test_oom(df_local_factory, df_seeder_factory):\r\n    master = df_local_factory.create(\r\n        proactor_threads=1,\r\n        cache_mode=\"true\",\r\n        maxmemory=\"256mb\",\r\n        enable_heartbeat_eviction=\"false\"\r\n    )\r\n    df_local_factory.start_all([master])\r\n    c_master = master.client()\r\n    await c_master.execute_command(\"DEBUG POPULATE 6000 size 44000\")\r\n\r\n    seeder = df_seeder_factory.create(port=master.port, keys=5000, val_size=1000, stop_on_failure=False)\r\n    await seeder.run(target_deviation=0.1)\r\n\r\n    info = await c_master.info(\"stats\")\r\n    assert info[\"evicted_keys\"] > 0, \"Weak testcase: policy based eviction was not triggered.\"\r\n```\r\n\r\n\r\n**Additional context**\r\nWe enter DbSlice::AddOrFind oom  were we can not insert more values, response to client should be OOM\r\n\n",
  "hints_text": "",
  "created_at": "2024-01-12T19:52:41Z",
  "modified_files": [
    "src/server/hll_family.cc",
    "src/server/hset_family.cc",
    "src/server/json_family.cc",
    "src/server/string_family.cc"
  ],
  "modified_test_files": [
    "tests/dragonfly/generic_test.py"
  ]
}