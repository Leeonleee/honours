diff --git a/tests/dragonfly/instance.py b/tests/dragonfly/instance.py
index 8aaa5a37130c..a92534b6ab6d 100644
--- a/tests/dragonfly/instance.py
+++ b/tests/dragonfly/instance.py
@@ -88,7 +88,7 @@ def __init__(self, params: DflyParams, args):
                 self.args["num_shards"] = threads - 1
 
         # Add 1 byte limit for big values
-        # self.args["serialization_max_chunk_size"] = 1
+        self.args["serialization_max_chunk_size"] = 1
 
     def __del__(self):
         assert self.proc == None
diff --git a/tests/dragonfly/seeder/__init__.py b/tests/dragonfly/seeder/__init__.py
index dbfbf820f860..231afe9edf44 100644
--- a/tests/dragonfly/seeder/__init__.py
+++ b/tests/dragonfly/seeder/__init__.py
@@ -155,7 +155,7 @@ async def run(self, client: aioredis.Redis, target_ops=None, target_deviation=No
         )
 
     async def stop(self, client: aioredis.Redis):
-        """Reqeust seeder seeder if it's running without a target, future returned from start() must still be awaited"""
+        """Request seeder seeder if it's running without a target, future returned from start() must still be awaited"""
 
         await asyncio.gather(*(client.set(unit.stop_key, "X") for unit in self.units))
 
diff --git a/tests/dragonfly/utility.py b/tests/dragonfly/utility.py
index b4bf8df038d2..bbc6ba9458a1 100644
--- a/tests/dragonfly/utility.py
+++ b/tests/dragonfly/utility.py
@@ -91,7 +91,7 @@ async def info_tick_timer(client: aioredis.Redis, section=None, **kwargs):
         yield x
 
 
-async def wait_available_async(client: aioredis.Redis, timeout=10):
+async def wait_available_async(client: aioredis.Redis, timeout=120):
     """Block until instance exits loading phase"""
     its = 0
     start = time.time()
