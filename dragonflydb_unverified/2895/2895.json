{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2895,
  "instance_id": "dragonflydb__dragonfly-2895",
  "issue_numbers": [
    "2891"
  ],
  "base_commit": "0f613d8f8531e7dc22612187efe45dc89a4d043a",
  "patch": "diff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex 922edb487132..dd1bb86bcf83 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -1506,7 +1506,9 @@ facade::ConnectionContext* Service::CreateContext(util::FiberSocketBase* peer,\n                                                   facade::Connection* owner) {\n   ConnectionContext* res = new ConnectionContext{peer, owner};\n \n-  if (owner->IsPrivileged() && RequirePrivilegedAuth()) {\n+  if (peer->IsUDS()) {\n+    res->req_auth = false;\n+  } else if (owner->IsPrivileged() && RequirePrivilegedAuth()) {\n     res->req_auth = !GetPassword().empty();\n   } else if (!owner->IsPrivileged()) {\n     res->req_auth = !user_registry_.AuthUser(\"default\", \"\");\n",
  "test_patch": "diff --git a/tests/dragonfly/connection_test.py b/tests/dragonfly/connection_test.py\nindex 2ecbdfbf6e28..cc04f91a9e92 100755\n--- a/tests/dragonfly/connection_test.py\n+++ b/tests/dragonfly/connection_test.py\n@@ -658,6 +658,16 @@ async def test_unix_domain_socket(df_local_factory, tmp_dir):\n     assert await r.ping()\n \n \n+async def test_unix_socket_only(df_local_factory, tmp_dir):\n+    server = df_local_factory.create(proactor_threads=1, port=0, unixsocket=\"./df.sock\")\n+    server._start()\n+\n+    await asyncio.sleep(1)\n+\n+    r = aioredis.Redis(unix_socket_path=tmp_dir / \"df.sock\")\n+    assert await r.ping()\n+\n+\n \"\"\"\n Test nested pauses. Executing CLIENT PAUSE should be possible even if another write-pause is active.\n It should prolong the pause for all current commands.\n",
  "problem_statement": "dragonfly does not authenticate when using UDS\nto reproduce:\r\n```\r\n./dragonfly     --unixsocket=/tmp/1.sock  --port=0\r\nredis-cli -s  /tmp/1.sock PING\r\n```\r\nexpected: PONG\r\n\r\nThe problem is that we omit initialisation of the acl family:\r\n```\r\n// We assume that listeners.front() is the main_listener\r\n  // see dfly_main RunEngine\r\n  if (!tcp_disabled && !listeners.empty()) {\r\n    acl_family_.Init(listeners.front(), &user_registry_);\r\n  }\r\n```\r\nbut then we check it with:\r\n```\r\nres->req_auth = !user_registry_.AuthUser(\"default\", \"\");\r\n```\r\n\r\nSeems reasonable to omit auth for UDS altogether even for requirepass.\r\n\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2024-04-12T11:54:41Z",
  "modified_files": [
    "src/server/main_service.cc"
  ],
  "modified_test_files": [
    "tests/dragonfly/connection_test.py"
  ]
}