{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4559,
  "instance_id": "dragonflydb__dragonfly-4559",
  "issue_numbers": [
    "4498"
  ],
  "base_commit": "dc3a91e08306a144e5f3c36be59471b42ccd99ca",
  "patch": "diff --git a/helio b/helio\nindex a3b25eef5f11..b18d73963360 160000\n--- a/helio\n+++ b/helio\n@@ -1,1 +1,1 @@\n-Subproject commit a3b25eef5f114ee2a43721e15f742cb777571f34\n+Subproject commit b18d7396336020a20c234b9dfdbf86421dfa6208\n",
  "test_patch": "diff --git a/tests/dragonfly/cluster_test.py b/tests/dragonfly/cluster_test.py\nindex 121ce2c5ff8a..13bba81ccb57 100644\n--- a/tests/dragonfly/cluster_test.py\n+++ b/tests/dragonfly/cluster_test.py\n@@ -2700,7 +2700,6 @@ async def test_migration_timeout_on_sync(df_factory: DflyInstanceFactory, df_see\n \"\"\"\n \n \n-@pytest.mark.exclude_epoll\n @pytest.mark.asyncio\n @dfly_args({\"proactor_threads\": 4, \"cluster_mode\": \"yes\"})\n async def test_migration_one_after_another(df_factory: DflyInstanceFactory, df_seeder_factory):\n",
  "problem_statement": "cluster_test.py::test_migration_one_after_another test fail when using epoll\nwe get this check fail \nepoll_socket.cc:381] Check failed: async_write_req_ == nullptr \n\nStackTrace:\n30002\u279c    @     0x55b96235e961  google::LogMessage::SendToLog()\n\n30002\u279c    @     0x55b96235e136  google::LogMessage::Flush()\n\n30002\u279c    @     0x55b962361fae  google::LogMessageFatal::~LogMessageFatal()\n\n30002\u279c    @     0x55b96231b36e  util::fb2::EpollSocket::AsyncWriteSome()\n\n30002\u279c    @     0x55b9623246e6  io::AsyncSink::AsyncWrite()\n\n30002\u279c    @     0x55b961bd0eb1  dfly::JournalStreamer::AsyncWrite()\n\n30002\u279c    @     0x55b961bd1508  dfly::JournalStreamer::OnCompletion()\n\n30002\u279c    @     0x55b961bd0bc6  _ZZN4dfly15JournalStreamer10AsyncWriteEvENKUlSt10error_codeE_clES1_\n\n30002\u279c    @     0x55b961bd54f3  _ZSt13__invoke_implIvRZN4dfly15JournalStreamer10AsyncWriteEvEUlSt10error_codeE_JS2_EET_St14__invoke_otherOT0_DpOT1_\n\n30002\u279c    @     0x55b961bd4fac  _ZSt10__invoke_rIvRZN4dfly15JournalStreamer10AsyncWriteEvEUlSt10error_codeE_JS2_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_\n\n30002\u279c    @     0x55b961bd4989  _ZNSt17_Function_handlerIFvSt10error_codeEZN4dfly15JournalStreamer10AsyncWriteEvEUlS0_E_E9_M_invokeERKSt9_Any_dataOS0_\n\n30002\u279c    @     0x55b962326263  std::function<>::operator()()\n\n30002\u279c    @     0x55b9623235c5  io::(anonymous namespace)::AsyncWriteState::OnCb()\n\n30002\u279c    @     0x55b962323379  _ZZN2io12_GLOBAL__N_115AsyncWriteState4OnCbEN6nonstd13expected_lite8expectedImSt10error_codeEEENKUlS6_E_clES6_\n\n30002\u279c    @     0x55b9623258be  _ZSt13__invoke_implIvRZN2io12_GLOBAL__N_115AsyncWriteState4OnCbEN6nonstd13expected_lite8expectedImSt10error_codeEEEUlS7_E_JS7_EET_St14__invoke_otherOT0_DpOT1_\n\n30002\u279c    @     0x55b96232531b  _ZSt10__invoke_rIvRZN2io12_GLOBAL__N_115AsyncWriteState4OnCbEN6nonstd13expected_lite8expectedImSt10error_codeEEEUlS7_E_JS7_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EESB_E4typeEOSC_DpOSD_\n\n30002\u279c    @     0x55b962324ec1  _ZNSt17_Function_handlerIFvN6nonstd13expected_lite8expectedImSt10error_codeEEEZN2io12_GLOBAL__N_115AsyncWriteState4OnCbES4_EUlS4_E_E9_M_invokeERKSt9_Any_dataOS4_\n\n30002\u279c    @     0x55b96225ef99  std::function<>::operator()()\n\n30002\u279c    @     0x55b962318f97  util::fb2::EpollSocket::AsyncReq::Run()\n\n30002\u279c    @     0x55b96231d609  util::fb2::EpollSocket::Wakey()\n\n30002\u279c    @     0x55b962319915  _ZZN4util3fb211EpollSocket13OnSetProactorEvENKUljiPNS0_13EpollProactorEE_clEjiS3_\n\n30002\u279c    @     0x55b96231e0c2  _ZSt13__invoke_implIvRZN4util3fb211EpollSocket13OnSetProactorEvEUljiPNS1_13EpollProactorEE_JjiS4_EET_St14__invoke_otherOT0_DpOT1_\n\n30002\u279c    @     0x55b96231dedc  _ZSt10__invoke_rIvRZN4util3fb211EpollSocket13OnSetProactorEvEUljiPNS1_13EpollProactorEE_JjiS4_EENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES8_E4typeEOS9_DpOSA_\n\n30002\u279c    @     0x55b96231dc29  _ZNSt17_Function_handlerIFvjiPN4util3fb213EpollProactorEEZNS1_11EpollSocket13OnSetProactorEvEUljiS3_E_E9_M_invokeERKSt9_Any_dataOjOiOS3_\n\n30002\u279c    @     0x55b962317d48  std::function<>::operator()()\n\n30002\u279c    @     0x55b962316aec  util::fb2::EpollProactor::DispatchCompletions()\n\n30002\u279c    @     0x55b9623148ec  util::fb2::EpollProactor::MainLoop()\n\n30002\u279c    @     0x55b962262871  util::fb2::ProactorDispatcher::Run()\n\n30002\u279c    @     0x55b96227868f  util::fb2::detail::(anonymous namespace)::DispatcherImpl::Run()\n\n\nIt looks like we get the check fail from the JournalStreamer::OnCompletion call which calls again the AsyncWrite.\n",
  "hints_text": "Yes I think we don't reset `async_write_req` within epoll socket. I am familiar with the code and will take a look once I get a chance\nThe problem is in: \n```\n  615       auto finalize = [this] {                                                                                                                                                                               \n  616         delete async_write_req_;                                                                                                                                                                             \n  617         async_write_req_ = nullptr;                                                                                                                                                                          \n  618         async_write_pending_ = 0;                                                                                                                                                                            \n  619       }; \n  621       if (ec) {                                   \n  622         async_write_req_->cb(make_unexpected(ec));                                                \n  623         finalize();\n```\n\nLong story short, we register a file descriptor (the socket) in the interest list of epoll (via epoll ctrl). At some later point, the epoll proactor (technically is a reactor but different conversation) will start processing events from epoll which in turn will execute a callback -> `async_write_req_->cb(make_unexpected(ec));`\n\nThe problem here is that `cb` in our case is: \n\n```\n  117   dest_->AsyncWrite(v.data(), v.size(), [this, len = in_flight_bytes_](std::error_code ec) {       \n  118     OnCompletion(std::move(ec), len);                                                              \n  119   });  \n```\n\nand: \n\n```\n  131 void JournalStreamer::OnCompletion(std::error_code ec, size_t len) {                               \n  132   DCHECK_EQ(in_flight_bytes_, len);                                                                \n  133                                                                                                    \n  134   DVLOG(3) << \"Completing \" << in_flight_bytes_;                                                   \n  135   in_flight_bytes_ = 0;                                                                            \n  136   pending_buf_.Pop();                                                                              \n  137   if (ec && !IsStopped()) {                                                                        \n  138     cntx_->ReportError(ec);                                                                        \n  139   } else if (!pending_buf_.Empty() && !IsStopped()) {                                              \n  140     AsyncWrite();                                                                                  \n  141   } \n```\n\nSo `OnCompletion` will call again `AsyncWrite`. This is problematic, because we haven't yet called `finalize` which cleans up the internal pointer of the async request (see first code snippet) and therefore we crash because of the `CHECK` \n\np.s. Also `epoll socket` does not yet have a proper `AsyncRead` implementation but we are lucky because we don't really use it in DF (we only do AsyncWrites within the streamer).\n\nI will fix both on first convenience \nhttps://github.com/romange/helio/pull/374",
  "created_at": "2025-02-05T07:37:24Z",
  "modified_files": [
    "helio"
  ],
  "modified_test_files": [
    "tests/dragonfly/cluster_test.py"
  ]
}