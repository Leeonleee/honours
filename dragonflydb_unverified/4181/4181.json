{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4181,
  "instance_id": "dragonflydb__dragonfly-4181",
  "issue_numbers": [
    "4171"
  ],
  "base_commit": "3d68c9c99efa16aa0a2358985f085849068b750f",
  "patch": "diff --git a/tools/docker/healthcheck.sh b/tools/docker/healthcheck.sh\nindex 04f193871e8a..493a641c57b1 100755\n--- a/tools/docker/healthcheck.sh\n+++ b/tools/docker/healthcheck.sh\n@@ -20,13 +20,7 @@ if [ -z \"$HEALTHCHECK_PORT\" ]; then\n   PORT=$(echo $DF_NET | grep -oE ':[0-9]+' | cut -c2- | tail -n 1)\n fi\n \n-# If we're running with TLS enabled, utilise OpenSSL for the check\n-if [ -f \"/etc/dragonfly/tls/ca.crt\" ]\n-then\n-    _healthcheck=\"openssl s_client -connect ${HOST}:${PORT} -CAfile /etc/dragonfly/tls/ca.crt -quiet -no_ign_eof\"\n-else\n-    _healthcheck=\"nc -q1 $HOST $PORT\"\n-fi\n+_healthcheck=\"nc -q1 $HOST $PORT\"\n \n echo PING | ${_healthcheck}\n \n",
  "test_patch": "diff --git a/tests/fakeredis/test/test_stack/test_bloomfilter.py b/tests/fakeredis/test/test_stack/test_bloomfilter.py\nindex a5c88d0cb60f..bb425602fb42 100644\n--- a/tests/fakeredis/test/test_stack/test_bloomfilter.py\n+++ b/tests/fakeredis/test/test_stack/test_bloomfilter.py\n@@ -16,6 +16,7 @@ def test_create_bf(r: redis.Redis):\n     assert r.bf().create(\"bloom_ns\", 0.01, 1000, noScale=True)\n \n \n+@pytest.mark.unsupported_server_types(\"dragonfly\")\n def test_bf_reserve(r: redis.Redis):\n     assert r.bf().reserve(\"bloom\", 0.01, 1000)\n     assert r.bf().reserve(\"bloom_ns\", 0.01, 1000, noScale=True)\n",
  "problem_statement": "Dragonfly + operator make several incorrect assumptions about TLS configuration\n**Describe the bug**\r\nA clear and concise description of what the bug is.\r\n\r\nThere are several bugs related to Dragonfly TLS configuration when used in conjunction with the Dragonfly operator:\r\n1. [Here](https://github.com/dragonflydb/dragonfly/blob/main/tools/docker/healthcheck.sh#L24) and [here](https://github.com/dragonflydb/dragonfly/blob/main/tools/docker/healthcheck.sh#L26) Dragonfly assumes that if a file exists at `/etc/dragonfly/tls/ca.crt` then TLS is enabled on the health check port. However, the operator the operator uses this directory [as defined here](https://github.com/dragonflydb/dragonfly-operator/blob/main/internal/resources/resources.go#L39) for the client CA cert. If the serving cert and the client cert don't have a CA in common (and they really shouldn't in many cases), then the health check will fail.\r\n2. The operator [disables TLS on the admin port here](https://github.com/dragonflydb/dragonfly-operator/blob/main/internal/resources/resources.go#L262) when server auth TLS is enabled, but (as per the above) the Dragonfly health check expects it to be enabled.\r\n3. The operator [specifies the path to the server auth TLS certificate here](https://github.com/dragonflydb/dragonfly-operator/blob/main/internal/resources/resources.go#L264) as `tls.crt`, but per (1) the health check assumes that it is listed at `ca.crt`.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. Deploy the dragonfly operator\r\n2. Deploy an instance with [this config](https://github.com/solidDoWant/infra-mk3/blob/c57ce000398270256b2e94c449c5570627eb45a3/cluster/gitops/security/authentik/backend/redis/cluster.yaml) and [these certificates](https://github.com/solidDoWant/infra-mk3/tree/master/cluster/gitops/security/authentik/backend/redis)\r\n3. Watch the health check fail repeatedly due to the above\r\n\r\n**Expected behavior**\r\nA clear and concise description of what you expected to happen.\r\n\r\nDragonfly should not crash when configured for TLS auth\r\n\r\n**Screenshots**\r\nIf applicable, add screenshots to help explain your problem.\r\n\r\n**Environment (please complete the following information):**\r\n - OS: [ubuntu 20.04] Talos\r\n - Kernel: # Command: `uname -a` 6.6\r\n - Containerized?: [Bare Metal, Docker, Docker Compose, Docker Swarm, Kubernetes, Other] k8s\r\n - Dragonfly Version: [e.g. 0.3.0] v1.24.0, operator v0.13.1\r\n\r\n**Reproducible Code Snippet**\r\n```\r\nSee reproduction steps\r\n```\r\n\r\n**Additional context**\r\nAdd any other context about the problem here.\r\n\n",
  "hints_text": "@Pothulapati  PTAL.\r\n\r\n\r\n@solidDoWant  you wrote \"Dragonfly should not crash when configured for TLS auth\". Does it indeed crash? \n@romange Sorry, I phrased this poorly. The dragonfly process itself does not crash. However, the container's health check fails, which causes the container orchestrator (k8s) to terminate the pod/container.\n@solidDoWant I understand that the code in healthcheck is far from perfect but it seems that with some workarounds it is possible to make it work. For example, per (2) the admin port does use TLS. You can just pas the environment variable `HEALTHCHECK_PORT=<admin_port>` to your docker container in order to instruct the health checker to probe the admin port using `nc`.\n@romange There's a few of problems with this:\r\n* Per (2) the admin port does _not_ use TLS (ever with the operator), as the linked line shows that the `--no_tls_on_admin_port` flag is set\r\n* [The healthcheck port is already set by the operator to the admin port](https://github.com/dragonflydb/dragonfly-operator/blob/main/internal/resources/resources.go#L117-L120)\r\n* I cannot change the healthcheck port even if I wanted to, [because the operator does not expose this as a configurable value](https://github.com/dragonflydb/dragonfly-operator/blob/main/internal/resources/const.go#L27)\r\n* Even if TLS was enabled on the port, the health check still uses the wrong CA (it uses the client auth cert, not the serving cert) for the health check, causing the `openssl` command to fail with a cert chain validation error\r\n\r\nI'm open to workarounds, but this doesn't solve the problems.\nI recently introduced a usability improvement to Dragonfly that allows it to respond to plain requests on the tls port with `-ERR Bad TLS header, double check if you enabled TLS for your client.`\r\n\r\ntherefore a simple nc should work well for both tls and non-tls protocols now. \r\nI just verified,  `echo PING | nc localhost 6379` returns with 0 fort tls port as well. \r\nI will change the health check to use only nc - this should solve the problem and will make the everything more simple.\r\n",
  "created_at": "2024-11-25T09:03:30Z",
  "modified_files": [
    "tools/docker/healthcheck.sh"
  ],
  "modified_test_files": [
    "tests/fakeredis/test/test_stack/test_bloomfilter.py"
  ]
}