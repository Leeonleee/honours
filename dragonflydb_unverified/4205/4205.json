{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4205,
  "instance_id": "dragonflydb__dragonfly-4205",
  "issue_numbers": [
    "4204"
  ],
  "base_commit": "66e0fd090835c2f2d1e77f9d1c5834528d43928e",
  "patch": "diff --git a/src/server/search/search_family.cc b/src/server/search/search_family.cc\nindex c7c12176a45c..f1151dc60a67 100644\n--- a/src/server/search/search_family.cc\n+++ b/src/server/search/search_family.cc\n@@ -72,11 +72,18 @@ search::SchemaField::VectorParams ParseVectorParams(CmdArgParser* parser) {\n   return params;\n }\n \n-search::SchemaField::TagParams ParseTagParams(CmdArgParser* parser) {\n+std::optional<search::SchemaField::TagParams> ParseTagParams(CmdArgParser* parser,\n+                                                             SinkReplyBuilder* builder) {\n   search::SchemaField::TagParams params{};\n   while (parser->HasNext()) {\n     if (parser->Check(\"SEPARATOR\")) {\n-      string_view separator = parser->Next();\n+      std::string_view separator = parser->NextOrDefault();\n+      if (separator.size() != 1) {\n+        builder->SendError(\n+            absl::StrCat(\"Tag separator must be a single character. Got `\", separator, \"`\"),\n+            kSyntaxErrType);\n+        return std::nullopt;\n+      }\n       params.separator = separator.front();\n       continue;\n     }\n@@ -127,7 +134,11 @@ optional<search::Schema> ParseSchemaOrReply(DocIndex::DataType type, CmdArgParse\n     // Vector fields include: {algorithm} num_args args...\n     search::SchemaField::ParamsVariant params(monostate{});\n     if (type == search::SchemaField::TAG) {\n-      params = ParseTagParams(&parser);\n+      auto tag_params = ParseTagParams(&parser, builder);\n+      if (!tag_params) {\n+        return std::nullopt;\n+      }\n+      params = tag_params.value();\n     } else if (type == search::SchemaField::VECTOR) {\n       auto vector_params = ParseVectorParams(&parser);\n       if (parser.HasError()) {\n",
  "test_patch": "diff --git a/src/server/search/search_family_test.cc b/src/server/search/search_family_test.cc\nindex 046b76976c49..9fa68bd66757 100644\n--- a/src/server/search/search_family_test.cc\n+++ b/src/server/search/search_family_test.cc\n@@ -332,6 +332,11 @@ TEST_F(SearchFamilyTest, Errors) {\n \n   // Wrong field type\n   EXPECT_THAT(Run({\"ft.search\", \"i1\", \"@foo:lol\"}), ErrArg(\"Wrong access type for field: foo\"));\n+\n+  // ft.create index on json schema $.sometag AS sometag TAG SEPARATOR\n+  EXPECT_THAT(Run({\"ft.create\", \"i2\", \"ON\", \"JSON\", \"SCHEMA\", \"$.sometag\", \"AS\", \"sometag\", \"TAG\",\n+                   \"SEPARATOR\"}),\n+              ErrArg(\"Tag separator must be a single character. Got ``\"));\n }\n \n TEST_F(SearchFamilyTest, NoPrefix) {\n",
  "problem_statement": "Add tests for the SEARCH commands\nWe should not crash during parsing different options in `FT.*` commands. For example: (empty separator in FT.CREATE)\n```\n127.0.0.1:6379> ft.create index on json schema $.sometag AS sometag TAG SEPARATOR\nError: Server closed the connection\n```\n\nSo we should add parsing tests for all `FT.*` commands, especially for the `FT.CREATE`, `FT.SEARCH` and `FT.AGGREGATE` commands.\n\n- [x] #4208\n- [x] Add tests for different options in the `FT.CREATE` command. Fixed by #4678\n- [x] Add tests for different options in the `FT.SEARCH` command. Fixed by #4478\n- [x] Add tests for different options in the `FT.AGGREGATE` command. Fixed by #4479\n- [ ] Test all other FT.* commands\n\n",
  "hints_text": "",
  "created_at": "2024-11-27T11:01:01Z",
  "modified_files": [
    "src/server/search/search_family.cc"
  ],
  "modified_test_files": [
    "src/server/search/search_family_test.cc"
  ]
}