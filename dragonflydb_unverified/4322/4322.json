{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4322,
  "instance_id": "dragonflydb__dragonfly-4322",
  "issue_numbers": [
    "4245"
  ],
  "base_commit": "19164badf9d8167f7cde13f52542f4070eca1fdc",
  "patch": "diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt\nindex a76da360c872..e3db36395555 100644\n--- a/src/CMakeLists.txt\n+++ b/src/CMakeLists.txt\n@@ -84,7 +84,7 @@ add_third_party(\n \n add_third_party(\n   lz4\n-  URL https://github.com/lz4/lz4/archive/refs/tags/v1.9.4.tar.gz\n+  URL https://github.com/lz4/lz4/archive/refs/tags/v1.10.0.tar.gz\n \n   BUILD_IN_SOURCE 1\n   CONFIGURE_COMMAND echo skip\ndiff --git a/src/server/detail/compressor.cc b/src/server/detail/compressor.cc\nindex 331eb6349d14..8a2c741c2422 100644\n--- a/src/server/detail/compressor.cc\n+++ b/src/server/detail/compressor.cc\n@@ -52,32 +52,47 @@ io::Result<io::Bytes> ZstdCompressor::Compress(io::Bytes data) {\n class Lz4Compressor : public CompressorImpl {\n  public:\n   Lz4Compressor() {\n-    lz4_pref_.compressionLevel = compression_level_;\n+    LZ4F_errorCode_t code = LZ4F_createCompressionContext(&cctx_, LZ4F_VERSION);\n+    CHECK(!LZ4F_isError(code));\n   }\n \n   ~Lz4Compressor() {\n+    LZ4F_errorCode_t code = LZ4F_freeCompressionContext(cctx_);\n+    CHECK(!LZ4F_isError(code));\n   }\n \n   // compress a string of data\n   io::Result<io::Bytes> Compress(io::Bytes data);\n \n  private:\n-  LZ4F_preferences_t lz4_pref_ = LZ4F_INIT_PREFERENCES;\n+  LZ4F_cctx* cctx_;\n };\n \n io::Result<io::Bytes> Lz4Compressor::Compress(io::Bytes data) {\n-  lz4_pref_.frameInfo.contentSize = data.size();\n-  size_t buf_size = LZ4F_compressFrameBound(data.size(), &lz4_pref_);\n+  LZ4F_preferences_t lz4_pref = LZ4F_INIT_PREFERENCES;\n+  lz4_pref.compressionLevel = compression_level_;\n+  lz4_pref.frameInfo.contentSize = data.size();\n+\n+  size_t buf_size = LZ4F_compressFrameBound(data.size(), &lz4_pref);\n   if (compr_buf_.capacity() < buf_size) {\n     compr_buf_.reserve(buf_size);\n   }\n \n+// TODO: to remove LZ4F_compressFrame code once we confirm this code actually works.\n+#if 1\n+  size_t frame_size =\n+      LZ4F_compressFrame_usingCDict(cctx_, compr_buf_.data(), compr_buf_.capacity(), data.data(),\n+                                    data.size(), nullptr /* dict */, &lz4_pref);\n+#else\n   size_t frame_size = LZ4F_compressFrame(compr_buf_.data(), compr_buf_.capacity(), data.data(),\n-                                         data.size(), &lz4_pref_);\n+                                         data.size(), &lz4_pref);\n+#endif\n+\n   if (LZ4F_isError(frame_size)) {\n     LOG(ERROR) << \"LZ4F_compressFrame failed with error \" << LZ4F_getErrorName(frame_size);\n     return nonstd::make_unexpected(make_error_code(errc::operation_not_supported));\n   }\n+\n   compressed_size_total_ += frame_size;\n   uncompressed_size_total_ += data.size();\n   return io::Bytes(compr_buf_.data(), frame_size);\ndiff --git a/src/server/rdb_save.cc b/src/server/rdb_save.cc\nindex 516b5d67f9d2..221d83476fab 100644\n--- a/src/server/rdb_save.cc\n+++ b/src/server/rdb_save.cc\n@@ -162,15 +162,7 @@ std::string AbslUnparseFlag(dfly::CompressionMode flag) {\n }\n \n dfly::CompressionMode GetDefaultCompressionMode() {\n-  const auto flag = absl::GetFlag(FLAGS_compression_mode);\n-  if (ServerState::tlocal()->serialization_max_chunk_size == 0) {\n-    return flag;\n-  }\n-\n-  static bool once = flag != dfly::CompressionMode::NONE;\n-  LOG_IF(WARNING, once) << \"Setting CompressionMode to NONE because big value serialization is on\";\n-  once = false;\n-  return dfly::CompressionMode::NONE;\n+  return absl::GetFlag(FLAGS_compression_mode);\n }\n \n uint8_t RdbObjectType(const PrimeValue& pv) {\n@@ -1602,13 +1594,20 @@ void SerializerBase::CompressBlob() {\n   }\n \n   AllocateCompressorOnce();\n-  // Compress the data\n-  auto ec = compressor_impl_->Compress(blob_to_compress);\n-  if (!ec) {\n+\n+  // Compress the data. We copy compressed data once into the internal buffer of compressor_impl_\n+  // and then we copy it again into the mem_buf_.\n+  //\n+  // TODO: it is possible to avoid double copying here by changing the compressor interface,\n+  // so that the compressor will accept the output buffer and return the final size. This requires\n+  // exposing the additional compress bound interface as well.\n+  io::Result<io::Bytes> res = compressor_impl_->Compress(blob_to_compress);\n+  if (!res) {\n     ++compression_stats_->compression_failed;\n     return;\n   }\n-  Bytes compressed_blob = *ec;\n+\n+  Bytes compressed_blob = *res;\n   if (compressed_blob.length() > blob_size * kMinCompressionReductionPrecentage) {\n     ++compression_stats_->compression_no_effective;\n     return;\n",
  "test_patch": "diff --git a/src/server/rdb_test.cc b/src/server/rdb_test.cc\nindex a74e94189825..0c6793e0b428 100644\n--- a/src/server/rdb_test.cc\n+++ b/src/server/rdb_test.cc\n@@ -42,6 +42,14 @@ class RdbTest : public BaseFamilyTest {\n  protected:\n   void SetUp();\n \n+  static void SetUpTestSuite() {\n+    static bool init = true;\n+    if (exchange(init, false)) {\n+      fb2::SetDefaultStackResource(&fb2::std_malloc_resource, 32_KB);\n+    }\n+    BaseFamilyTest::SetUpTestSuite();\n+  }\n+\n   io::FileSource GetSource(string name);\n \n   std::error_code LoadRdb(const string& filename) {\n@@ -56,6 +64,7 @@ class RdbTest : public BaseFamilyTest {\n \n void RdbTest::SetUp() {\n   InitWithDbFilename();\n+  CHECK_EQ(zmalloc_used_memory_tl, 0);\n   max_memory_limit = 40000000;\n }\n \n@@ -453,6 +462,8 @@ TEST_F(RdbTest, JsonTest) {\n class HllRdbTest : public RdbTest, public testing::WithParamInterface<string> {};\n \n TEST_P(HllRdbTest, Hll) {\n+  LOG(INFO) << \" max memory: \" << max_memory_limit\n+            << \" used_mem_current: \" << used_mem_current.load();\n   auto ec = LoadRdb(\"hll.rdb\");\n \n   ASSERT_FALSE(ec) << ec.message();\n",
  "problem_statement": "investigate compression issues with big value serialization\n* check why compression crashes dragonfly\n",
  "hints_text": "",
  "created_at": "2024-12-16T11:39:25Z",
  "modified_files": [
    "src/CMakeLists.txt",
    "src/server/detail/compressor.cc",
    "src/server/rdb_save.cc"
  ],
  "modified_test_files": [
    "src/server/rdb_test.cc"
  ]
}