diff --git a/src/server/cluster/cluster_family.cc b/src/server/cluster/cluster_family.cc
index e9e79134a187..8483c7606274 100644
--- a/src/server/cluster/cluster_family.cc
+++ b/src/server/cluster/cluster_family.cc
@@ -89,13 +89,13 @@ ClusterShard ClusterFamily::GetEmulatedShardInfo(ConnectionContext* cntx) const
                    .port = static_cast<uint16_t>(absl::GetFlag(FLAGS_port))};
 
     for (const auto& replica : server_family_->GetDflyCmd()->GetReplicasRoleInfo()) {
-      info.replicas.push_back({.id = etl.remote_client_id_,
+      info.replicas.push_back({.id = replica.id,
                                .ip = replica.address,
                                .port = static_cast<uint16_t>(replica.listening_port)});
     }
   } else {
-    info.master = {
-        .id = etl.remote_client_id_, .ip = replication_info->host, .port = replication_info->port};
+    // TODO: We currently don't save the master's ID in the replica
+    info.master = {.id = "", .ip = replication_info->host, .port = replication_info->port};
     info.replicas.push_back({.id = id_,
                              .ip = cntx->conn()->LocalBindAddress(),
                              .port = static_cast<uint16_t>(absl::GetFlag(FLAGS_port))});
diff --git a/src/server/dflycmd.cc b/src/server/dflycmd.cc
index 31ffa5cc2e88..efefbff705e0 100644
--- a/src/server/dflycmd.cc
+++ b/src/server/dflycmd.cc
@@ -571,6 +571,20 @@ auto DflyCmd::CreateSyncSession(ConnectionContext* cntx)
   return *it;
 }
 
+auto DflyCmd::GetReplicaInfo(ConnectionContext* cntx) -> std::shared_ptr<ReplicaInfo> {
+  if (cntx == nullptr) {
+    return nullptr;
+  }
+
+  unique_lock lk(mu_);
+  auto it = replica_infos_.find(cntx->conn_state.replication_info.repl_session_id);
+  if (it == replica_infos_.end()) {
+    return nullptr;
+  }
+
+  return it->second;
+}
+
 void DflyCmd::OnClose(ConnectionContext* cntx) {
   unsigned session_id = cntx->conn_state.replication_info.repl_session_id;
   if (!session_id)
@@ -659,7 +673,8 @@ std::vector<ReplicaRoleInfo> DflyCmd::GetReplicasRoleInfo() const {
     } else {
       lag = std::numeric_limits<LSN>::max();
     }
-    vec.push_back(ReplicaRoleInfo{info->address, info->listening_port, SyncStateName(state), lag});
+    vec.push_back(
+        ReplicaRoleInfo{info->id, info->address, info->listening_port, SyncStateName(state), lag});
   }
   return vec;
 }
diff --git a/src/server/dflycmd.h b/src/server/dflycmd.h
index 1927df6cabd1..19d5297d5d16 100644
--- a/src/server/dflycmd.h
+++ b/src/server/dflycmd.h
@@ -114,6 +114,7 @@ class DflyCmd {
     SyncState replica_state;  // always guarded by ReplicaInfo::mu
     Context cntx;
 
+    std::string id;
     std::string address;
     uint32_t listening_port;
     DflyVersion version = DflyVersion::VER0;
@@ -139,6 +140,8 @@ class DflyCmd {
   // Create new sync session.
   std::pair<uint32_t, std::shared_ptr<ReplicaInfo>> CreateSyncSession(ConnectionContext* cntx);
 
+  std::shared_ptr<ReplicaInfo> GetReplicaInfo(ConnectionContext* cntx);
+
   std::vector<ReplicaRoleInfo> GetReplicasRoleInfo() const;
 
   void GetReplicationMemoryStats(ReplicationMemoryStats* out) const;
diff --git a/src/server/server_family.cc b/src/server/server_family.cc
index 41aaf52d3920..df245afe5dd9 100644
--- a/src/server/server_family.cc
+++ b/src/server/server_family.cc
@@ -2460,10 +2460,11 @@ void ServerFamily::ReplConf(CmdArgList args, ConnectionContext* cntx) {
       }
       cntx->conn_state.replication_info.repl_listening_port = replica_listening_port;
     } else if (cmd == "CLIENT-ID" && args.size() == 2) {
-      std::string client_id{arg};
-      auto& pool = service_.proactor_pool();
-      pool.AwaitFiberOnAll(
-          [&](util::ProactorBase* pb) { ServerState::tlocal()->remote_client_id_ = arg; });
+      auto info = dfly_cmd_->GetReplicaInfo(cntx);
+      DCHECK(info != nullptr);
+      if (info) {
+        info->id = arg;
+      }
     } else if (cmd == "CLIENT-VERSION" && args.size() == 2) {
       unsigned version;
       if (!absl::SimpleAtoi(arg, &version)) {
diff --git a/src/server/server_family.h b/src/server/server_family.h
index a33c05b62cea..7975b2205b0a 100644
--- a/src/server/server_family.h
+++ b/src/server/server_family.h
@@ -52,6 +52,7 @@ class Service;
 class ScriptMgr;
 
 struct ReplicaRoleInfo {
+  std::string id;
   std::string address;
   uint32_t listening_port;
   std::string_view state;
diff --git a/src/server/server_state.h b/src/server/server_state.h
index 7d575cf0aaa7..85408b028622 100644
--- a/src/server/server_state.h
+++ b/src/server/server_state.h
@@ -245,7 +245,6 @@ class ServerState {  // public struct - to allow initialization.
   Stats stats;
 
   bool is_master = true;
-  std::string remote_client_id_;  // for cluster support
   uint32_t log_slower_than_usec = UINT32_MAX;
 
   acl::UserRegistry* user_registry;
