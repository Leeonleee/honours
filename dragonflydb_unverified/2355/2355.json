{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2355,
  "instance_id": "dragonflydb__dragonfly-2355",
  "issue_numbers": [
    "1478"
  ],
  "base_commit": "1fb0a486aca6a571d07b559eafbb87c05296295c",
  "patch": "diff --git a/src/server/cluster/cluster_family.cc b/src/server/cluster/cluster_family.cc\nindex 103bf4e187b3..b37321cdb38c 100644\n--- a/src/server/cluster/cluster_family.cc\n+++ b/src/server/cluster/cluster_family.cc\n@@ -582,7 +582,7 @@ void ClusterFamily::DflyClusterGetSlotInfo(CmdArgList args, ConnectionContext* c\n   rb->StartArray(slots_stats.size());\n \n   for (const auto& slot_data : slots_stats) {\n-    rb->StartArray(7);\n+    rb->StartArray(9);\n     rb->SendLong(slot_data.first);\n     rb->SendBulkString(\"key_count\");\n     rb->SendLong(static_cast<long>(slot_data.second.key_count));\n@@ -590,6 +590,8 @@ void ClusterFamily::DflyClusterGetSlotInfo(CmdArgList args, ConnectionContext* c\n     rb->SendLong(static_cast<long>(slot_data.second.total_reads));\n     rb->SendBulkString(\"total_writes\");\n     rb->SendLong(static_cast<long>(slot_data.second.total_writes));\n+    rb->SendBulkString(\"memory_bytes\");\n+    rb->SendLong(static_cast<long>(slot_data.second.memory_bytes));\n   }\n }\n \ndiff --git a/src/server/db_slice.cc b/src/server/db_slice.cc\nindex c4f75e6c82f5..a4da073c3a2e 100644\n--- a/src/server/db_slice.cc\n+++ b/src/server/db_slice.cc\n@@ -46,11 +46,18 @@ static_assert(kPrimeSegmentSize == 32288);\n // 24576\n static_assert(kExpireSegmentSize == 23528);\n \n-void AccountObjectMemory(unsigned type, int64_t size, DbTableStats* stats) {\n-  DCHECK_GE(static_cast<int64_t>(stats->obj_memory_usage) + size, 0)\n-      << \"Can't decrease \" << size << \" from \" << stats->obj_memory_usage;\n-  stats->obj_memory_usage += size;\n-  stats->AddTypeMemoryUsage(type, size);\n+void AccountObjectMemory(string_view key, unsigned type, int64_t size, DbTable* db) {\n+  DCHECK_NE(db, nullptr);\n+  DbTableStats& stats = db->stats;\n+  DCHECK_GE(static_cast<int64_t>(stats.obj_memory_usage) + size, 0)\n+      << \"Can't decrease \" << size << \" from \" << stats.obj_memory_usage;\n+\n+  stats.obj_memory_usage += size;\n+  stats.AddTypeMemoryUsage(type, size);\n+\n+  if (ClusterConfig::IsEnabled()) {\n+    db->slots_stats[ClusterConfig::KeySlot(key)].memory_bytes += size;\n+  }\n }\n \n void PerformDeletion(PrimeIterator del_it, ExpireIterator exp_it, EngineShard* shard,\n@@ -82,8 +89,14 @@ void PerformDeletion(PrimeIterator del_it, ExpireIterator exp_it, EngineShard* s\n   }\n \n   stats.inline_keys -= del_it->first.IsInline();\n-  AccountObjectMemory(del_it->first.ObjType(), -del_it->first.MallocUsed(), &stats);    // Key\n-  AccountObjectMemory(del_it->second.ObjType(), -del_it->second.MallocUsed(), &stats);  // Value\n+\n+  {\n+    string tmp;\n+    string_view key = del_it->first.GetSlice(&tmp);\n+    AccountObjectMemory(key, del_it->first.ObjType(), -del_it->first.MallocUsed(), table);  // Key\n+    AccountObjectMemory(key, del_it->second.ObjType(), -del_it->second.MallocUsed(),\n+                        table);  // Value\n+  }\n \n   if (pv.ObjType() == OBJ_HASH && pv.Encoding() == kEncodingListPack) {\n     --stats.listpack_blob_cnt;\n@@ -610,7 +623,7 @@ DbSlice::AddOrFindResult DbSlice::AddOrFind(const Context& cntx, string_view key\n   }\n \n   db.stats.inline_keys += it->first.IsInline();\n-  AccountObjectMemory(it->first.ObjType(), it->first.MallocUsed(), &db.stats);  // Account for key\n+  AccountObjectMemory(key, it->first.ObjType(), it->first.MallocUsed(), &db);  // Account for key\n \n   DCHECK_EQ(it->second.MallocUsed(), 0UL);  // Make sure accounting is no-op\n   it.SetVersion(NextVersion());\n@@ -1040,10 +1053,8 @@ void DbSlice::PreUpdate(DbIndex db_ind, PrimeIterator it) {\n }\n \n void DbSlice::PostUpdate(DbIndex db_ind, PrimeIterator it, std::string_view key, size_t orig_size) {\n-  DbTableStats* stats = MutableStats(db_ind);\n-\n   int64_t delta = static_cast<int64_t>(it->second.MallocUsed()) - static_cast<int64_t>(orig_size);\n-  AccountObjectMemory(it->second.ObjType(), delta, stats);\n+  AccountObjectMemory(key, it->second.ObjType(), delta, GetDBTable(db_ind));\n \n   auto& db = *db_arr_[db_ind];\n   auto& watched_keys = db.watched_keys;\n@@ -1500,9 +1511,8 @@ void DbSlice::PerformDeletion(PrimeIterator del_it, ExpireIterator exp_it, Engin\n \n   size_t value_heap_size = pv.MallocUsed();\n   stats.inline_keys -= del_it->first.IsInline();\n-  int64_t delta = del_it->first.MallocUsed() + value_heap_size;\n-  stats.obj_memory_usage -= delta;\n-  stats.AddTypeMemoryUsage(pv.ObjType(), -delta);\n+  AccountObjectMemory(key, del_it->first.ObjType(), -del_it->first.MallocUsed(), table);  // Key\n+  AccountObjectMemory(key, pv.ObjType(), -value_heap_size, table);                        // Value\n   if (pv.ObjType() == OBJ_HASH && pv.Encoding() == kEncodingListPack) {\n     --stats.listpack_blob_cnt;\n   } else if (pv.ObjType() == OBJ_ZSET && pv.Encoding() == OBJ_ENCODING_LISTPACK) {\ndiff --git a/src/server/table.cc b/src/server/table.cc\nindex 2727e0d6f0b8..2e2c674b26dd 100644\n--- a/src/server/table.cc\n+++ b/src/server/table.cc\n@@ -47,11 +47,12 @@ DbTableStats& DbTableStats::operator+=(const DbTableStats& o) {\n }\n \n SlotStats& SlotStats::operator+=(const SlotStats& o) {\n-  static_assert(sizeof(SlotStats) == 24);\n+  static_assert(sizeof(SlotStats) == 32);\n \n   ADD(key_count);\n   ADD(total_reads);\n   ADD(total_writes);\n+  ADD(memory_bytes);\n   return *this;\n }\n \ndiff --git a/src/server/table.h b/src/server/table.h\nindex 337059ec080d..00471f11f0a3 100644\n--- a/src/server/table.h\n+++ b/src/server/table.h\n@@ -57,6 +57,7 @@ struct SlotStats {\n   uint64_t key_count = 0;\n   uint64_t total_reads = 0;\n   uint64_t total_writes = 0;\n+  uint64_t memory_bytes = 0;\n   SlotStats& operator+=(const SlotStats& o);\n };\n \n",
  "test_patch": "diff --git a/src/server/cluster/cluster_family_test.cc b/src/server/cluster/cluster_family_test.cc\nindex 227abdb16570..ad5c4c3b3807 100644\n--- a/src/server/cluster/cluster_family_test.cc\n+++ b/src/server/cluster/cluster_family_test.cc\n@@ -470,32 +470,36 @@ TEST_F(ClusterFamilyTest, ClusterGetSlotInfo) {\n   const SlotId slot = ClusterConfig::KeySlot(kKey);\n   EXPECT_NE(slot, 0) << \"We need to choose another key\";\n \n-  EXPECT_EQ(Run({\"SET\", kKey, \"value\"}), \"OK\");\n+  const string value(1'000, '#');  // Long string - to use heap\n+  EXPECT_EQ(Run({\"SET\", kKey, value}), \"OK\");\n \n-  EXPECT_THAT(RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"0\", absl::StrCat(slot)}),\n-              RespArray(ElementsAre(\n-                  RespArray(ElementsAre(IntArg(0), \"key_count\", IntArg(0), \"total_reads\", IntArg(0),\n-                                        \"total_writes\", IntArg(0))),\n-                  RespArray(ElementsAre(IntArg(slot), \"key_count\", IntArg(1), \"total_reads\",\n-                                        IntArg(0), \"total_writes\", IntArg(1))))));\n+  EXPECT_THAT(\n+      RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"0\", absl::StrCat(slot)}),\n+      RespArray(ElementsAre(\n+          RespArray(ElementsAre(IntArg(0), \"key_count\", IntArg(0), \"total_reads\", IntArg(0),\n+                                \"total_writes\", IntArg(0), \"memory_bytes\", IntArg(0))),\n+          RespArray(ElementsAre(IntArg(slot), \"key_count\", IntArg(1), \"total_reads\", IntArg(0),\n+                                \"total_writes\", IntArg(1), \"memory_bytes\", Not(IntArg(0)))))));\n \n-  EXPECT_EQ(Run({\"GET\", kKey}), \"value\");\n+  EXPECT_EQ(Run({\"GET\", kKey}), value);\n \n-  EXPECT_THAT(RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"0\", absl::StrCat(slot)}),\n-              RespArray(ElementsAre(\n-                  RespArray(ElementsAre(IntArg(0), \"key_count\", IntArg(0), \"total_reads\", IntArg(0),\n-                                        \"total_writes\", IntArg(0))),\n-                  RespArray(ElementsAre(IntArg(slot), \"key_count\", IntArg(1), \"total_reads\",\n-                                        IntArg(1), \"total_writes\", IntArg(1))))));\n+  EXPECT_THAT(\n+      RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"0\", absl::StrCat(slot)}),\n+      RespArray(ElementsAre(\n+          RespArray(ElementsAre(IntArg(0), \"key_count\", IntArg(0), \"total_reads\", IntArg(0),\n+                                \"total_writes\", IntArg(0), \"memory_bytes\", IntArg(0))),\n+          RespArray(ElementsAre(IntArg(slot), \"key_count\", IntArg(1), \"total_reads\", IntArg(1),\n+                                \"total_writes\", IntArg(1), \"memory_bytes\", Not(IntArg(0)))))));\n \n   EXPECT_EQ(Run({\"SET\", kKey, \"value2\"}), \"OK\");\n \n-  EXPECT_THAT(RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"0\", absl::StrCat(slot)}),\n-              RespArray(ElementsAre(\n-                  RespArray(ElementsAre(IntArg(0), \"key_count\", IntArg(0), \"total_reads\", IntArg(0),\n-                                        \"total_writes\", IntArg(0))),\n-                  RespArray(ElementsAre(IntArg(slot), \"key_count\", IntArg(1), \"total_reads\",\n-                                        IntArg(1), \"total_writes\", IntArg(2))))));\n+  EXPECT_THAT(\n+      RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"0\", absl::StrCat(slot)}),\n+      RespArray(ElementsAre(\n+          RespArray(ElementsAre(IntArg(0), \"key_count\", IntArg(0), \"total_reads\", IntArg(0),\n+                                \"total_writes\", IntArg(0), \"memory_bytes\", IntArg(0))),\n+          RespArray(ElementsAre(IntArg(slot), \"key_count\", IntArg(1), \"total_reads\", IntArg(1),\n+                                \"total_writes\", IntArg(2), \"memory_bytes\", IntArg(0))))));\n }\n \n TEST_F(ClusterFamilyTest, ClusterSlotsPopulate) {\n@@ -524,12 +528,12 @@ TEST_F(ClusterFamilyTest, ClusterSlotsPopulate) {\n \n   for (int i = 0; i <= 1'000; ++i) {\n     EXPECT_THAT(RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", absl::StrCat(i)}),\n-                RespArray(ElementsAre(IntArg(i), \"key_count\", Not(IntArg(0)), _, _, _, _)));\n+                RespArray(ElementsAre(IntArg(i), \"key_count\", Not(IntArg(0)), _, _, _, _, _, _)));\n   }\n \n   for (int i = 1'001; i <= 16'383; ++i) {\n     EXPECT_THAT(RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", absl::StrCat(i)}),\n-                RespArray(ElementsAre(IntArg(i), \"key_count\", IntArg(0), _, _, _, _)));\n+                RespArray(ElementsAre(IntArg(i), \"key_count\", IntArg(0), _, _, _, _, _, _)));\n   }\n }\n \n@@ -557,12 +561,13 @@ TEST_F(ClusterFamilyTest, ClusterConfigDeleteSlots) {\n \n   Run({\"debug\", \"populate\", \"100000\"});\n \n-  EXPECT_THAT(RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"1\", \"2\"}),\n-              RespArray(ElementsAre(\n-                  RespArray(ElementsAre(IntArg(1), \"key_count\", Not(IntArg(0)), \"total_reads\",\n-                                        IntArg(0), \"total_writes\", Not(IntArg(0)))),\n-                  RespArray(ElementsAre(IntArg(2), \"key_count\", Not(IntArg(0)), \"total_reads\",\n-                                        IntArg(0), \"total_writes\", Not(IntArg(0)))))));\n+  EXPECT_THAT(\n+      RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"1\", \"2\"}),\n+      RespArray(ElementsAre(\n+          RespArray(ElementsAre(IntArg(1), \"key_count\", Not(IntArg(0)), \"total_reads\", IntArg(0),\n+                                \"total_writes\", Not(IntArg(0)), \"memory_bytes\", IntArg(0))),\n+          RespArray(ElementsAre(IntArg(2), \"key_count\", Not(IntArg(0)), \"total_reads\", IntArg(0),\n+                                \"total_writes\", Not(IntArg(0)), \"memory_bytes\", IntArg(0))))));\n \n   config = absl::Substitute(config_template, \"abc\");\n   EXPECT_EQ(RunPrivileged({\"dflycluster\", \"config\", config}), \"OK\");\n@@ -571,10 +576,11 @@ TEST_F(ClusterFamilyTest, ClusterConfigDeleteSlots) {\n \n   EXPECT_THAT(\n       RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"1\", \"2\"}),\n-      RespArray(ElementsAre(RespArray(ElementsAre(IntArg(1), \"key_count\", IntArg(0), \"total_reads\",\n-                                                  IntArg(0), \"total_writes\", Not(IntArg(0)))),\n-                            RespArray(ElementsAre(IntArg(2), \"key_count\", IntArg(0), \"total_reads\",\n-                                                  IntArg(0), \"total_writes\", Not(IntArg(0)))))));\n+      RespArray(ElementsAre(\n+          RespArray(ElementsAre(IntArg(1), \"key_count\", IntArg(0), \"total_reads\", IntArg(0),\n+                                \"total_writes\", Not(IntArg(0)), \"memory_bytes\", IntArg(0))),\n+          RespArray(ElementsAre(IntArg(2), \"key_count\", IntArg(0), \"total_reads\", IntArg(0),\n+                                \"total_writes\", Not(IntArg(0)), \"memory_bytes\", IntArg(0))))));\n }\n \n // Test issue #1302\n@@ -602,12 +608,13 @@ TEST_F(ClusterFamilyTest, ClusterConfigDeleteSlotsNoCrashOnShutdown) {\n \n   Run({\"debug\", \"populate\", \"100000\"});\n \n-  EXPECT_THAT(RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"1\", \"2\"}),\n-              RespArray(ElementsAre(\n-                  RespArray(ElementsAre(IntArg(1), \"key_count\", Not(IntArg(0)), \"total_reads\",\n-                                        IntArg(0), \"total_writes\", Not(IntArg(0)))),\n-                  RespArray(ElementsAre(IntArg(2), \"key_count\", Not(IntArg(0)), \"total_reads\",\n-                                        IntArg(0), \"total_writes\", Not(IntArg(0)))))));\n+  EXPECT_THAT(\n+      RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"1\", \"2\"}),\n+      RespArray(ElementsAre(\n+          RespArray(ElementsAre(IntArg(1), \"key_count\", Not(IntArg(0)), \"total_reads\", IntArg(0),\n+                                \"total_writes\", Not(IntArg(0)), \"memory_bytes\", IntArg(0))),\n+          RespArray(ElementsAre(IntArg(2), \"key_count\", Not(IntArg(0)), \"total_reads\", IntArg(0),\n+                                \"total_writes\", Not(IntArg(0)), \"memory_bytes\", IntArg(0))))));\n \n   config = absl::Substitute(config_template, \"abc\");\n   // After running the new config we start a fiber that removes all slots from current instance\n@@ -657,8 +664,8 @@ TEST_F(ClusterFamilyTest, ClusterConfigDeleteSomeSlots) {\n \n   EXPECT_THAT(RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"7999\", \"8000\"}),\n               RespArray(ElementsAre(\n-                  RespArray(ElementsAre(IntArg(7999), \"key_count\", IntArg(1), _, _, _, _)),\n-                  RespArray(ElementsAre(IntArg(8000), \"key_count\", IntArg(2), _, _, _, _)))));\n+                  RespArray(ElementsAre(IntArg(7999), \"key_count\", IntArg(1), _, _, _, _, _, _)),\n+                  RespArray(ElementsAre(IntArg(8000), \"key_count\", IntArg(2), _, _, _, _, _, _)))));\n   EXPECT_THAT(Run({\"dbsize\"}), IntArg(3));\n \n   // Move ownership over 8000 to other master\n@@ -670,8 +677,8 @@ TEST_F(ClusterFamilyTest, ClusterConfigDeleteSomeSlots) {\n \n   EXPECT_THAT(RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"7999\", \"8000\"}),\n               RespArray(ElementsAre(\n-                  RespArray(ElementsAre(IntArg(7999), \"key_count\", IntArg(1), _, _, _, _)),\n-                  RespArray(ElementsAre(IntArg(8000), \"key_count\", IntArg(0), _, _, _, _)))));\n+                  RespArray(ElementsAre(IntArg(7999), \"key_count\", IntArg(1), _, _, _, _, _, _)),\n+                  RespArray(ElementsAre(IntArg(8000), \"key_count\", IntArg(0), _, _, _, _, _, _)))));\n }\n \n TEST_F(ClusterFamilyTest, ClusterModeSelectNotAllowed) {\n@@ -728,28 +735,31 @@ TEST_F(ClusterFamilyTest, FlushSlots) {\n   EXPECT_EQ(Run({\"debug\", \"populate\", \"100\", \"key\", \"4\", \"slots\", \"0\", \"1\"}), \"OK\");\n \n   EXPECT_THAT(RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"0\", \"1\"}),\n-              RespArray(ElementsAre(RespArray(ElementsAre(IntArg(0), \"key_count\", Not(IntArg(0)),\n-                                                          \"total_reads\", _, \"total_writes\", _)),\n-                                    RespArray(ElementsAre(IntArg(1), \"key_count\", Not(IntArg(0)),\n-                                                          \"total_reads\", _, \"total_writes\", _)))));\n+              RespArray(ElementsAre(\n+                  RespArray(ElementsAre(IntArg(0), \"key_count\", Not(IntArg(0)), \"total_reads\", _,\n+                                        \"total_writes\", _, \"memory_bytes\", _)),\n+                  RespArray(ElementsAre(IntArg(1), \"key_count\", Not(IntArg(0)), \"total_reads\", _,\n+                                        \"total_writes\", _, \"memory_bytes\", _)))));\n \n   ExpectConditionWithinTimeout([&]() {\n     return RunPrivileged({\"dflycluster\", \"flushslots\", \"0\"}) == \"OK\";\n   });\n \n   EXPECT_THAT(RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"0\", \"1\"}),\n-              RespArray(ElementsAre(RespArray(ElementsAre(IntArg(0), \"key_count\", IntArg(0),\n-                                                          \"total_reads\", _, \"total_writes\", _)),\n-                                    RespArray(ElementsAre(IntArg(1), \"key_count\", Not(IntArg(0)),\n-                                                          \"total_reads\", _, \"total_writes\", _)))));\n+              RespArray(ElementsAre(\n+                  RespArray(ElementsAre(IntArg(0), \"key_count\", IntArg(0), \"total_reads\", _,\n+                                        \"total_writes\", _, \"memory_bytes\", _)),\n+                  RespArray(ElementsAre(IntArg(1), \"key_count\", Not(IntArg(0)), \"total_reads\", _,\n+                                        \"total_writes\", _, \"memory_bytes\", _)))));\n \n   EXPECT_EQ(RunPrivileged({\"dflycluster\", \"flushslots\", \"0\", \"1\"}), \"OK\");\n \n-  EXPECT_THAT(RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"0\", \"1\"}),\n-              RespArray(ElementsAre(RespArray(ElementsAre(IntArg(0), \"key_count\", IntArg(0),\n-                                                          \"total_reads\", _, \"total_writes\", _)),\n-                                    RespArray(ElementsAre(IntArg(1), \"key_count\", IntArg(0),\n-                                                          \"total_reads\", _, \"total_writes\", _)))));\n+  EXPECT_THAT(\n+      RunPrivileged({\"dflycluster\", \"getslotinfo\", \"slots\", \"0\", \"1\"}),\n+      RespArray(ElementsAre(RespArray(ElementsAre(IntArg(0), \"key_count\", IntArg(0), \"total_reads\",\n+                                                  _, \"total_writes\", _, \"memory_bytes\", _)),\n+                            RespArray(ElementsAre(IntArg(1), \"key_count\", IntArg(0), \"total_reads\",\n+                                                  _, \"total_writes\", _, \"memory_bytes\", _)))));\n }\n \n TEST_F(ClusterFamilyTest, ClusterCrossSlot) {\n",
  "problem_statement": "Enrich dflycluster GETSLOTINFO with Memory usage (per slot)\n\n",
  "hints_text": "",
  "created_at": "2023-12-31T20:43:26Z",
  "modified_files": [
    "src/server/cluster/cluster_family.cc",
    "src/server/db_slice.cc",
    "src/server/table.cc",
    "src/server/table.h"
  ],
  "modified_test_files": [
    "src/server/cluster/cluster_family_test.cc"
  ]
}