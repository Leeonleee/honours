diff --git a/src/server/list_family_test.cc b/src/server/list_family_test.cc
index cd2b36daefaf..b1ff5e4da588 100644
--- a/src/server/list_family_test.cc
+++ b/src/server/list_family_test.cc
@@ -1109,7 +1109,7 @@ TEST_F(ListFamilyTest, LMPopInvalidSyntax) {
 
   // Zero keys
   resp = Run({"lmpop", "0", "LEFT", "COUNT", "1"});
-  EXPECT_THAT(resp, ErrArg("syntax error"));
+  EXPECT_THAT(resp, ErrArg("at least 1 input key is needed"));
 
   // Number of keys is not uint
   resp = Run({"lmpop", "aa", "a", "LEFT"});
@@ -1256,7 +1256,7 @@ TEST_F(ListFamilyTest, LMPopEdgeCases) {
 
   // Test with negative COUNT - should return error
   resp = Run({"lmpop", "1", "list", "LEFT", "COUNT", "-1"});
-  EXPECT_THAT(resp, RespArray(ElementsAre("list", RespArray(ElementsAre("b")))));
+  EXPECT_THAT(resp, ErrArg("value is not an integer or out of range"));
 }
 
 TEST_F(ListFamilyTest, LMPopDocExample) {
diff --git a/src/server/multi_test.cc b/src/server/multi_test.cc
index 9e8a5b81c205..57456149e86e 100644
--- a/src/server/multi_test.cc
+++ b/src/server/multi_test.cc
@@ -310,6 +310,26 @@ TEST_F(MultiTest, MultiRename) {
   EXPECT_FALSE(service_->IsShardSetLocked());
 }
 
+// Run multi without transactional commands
+TEST_F(MultiTest, MultiWithoutTx) {
+  Run({"multi"});
+  Run({"ping"});
+  auto resp = Run({"exec"});
+  EXPECT_EQ(resp, "PONG");
+
+  // EVAL without keys and default script flags should be non-transactional
+  Run({"multi"});
+  Run({"eval", "return 'OK1'", "0"});
+  Run({"ping"});
+  Run({"eval", "return 'OK2'", "0", "not-a-key"});
+  Run({"ping"});
+  Run({"eval", "return 'OK3'", "0", "not-a-key", "as-well"});
+  Run({"ping"});
+  resp = Run({"exec"});
+  EXPECT_EQ(resp.GetVec()[2], "OK2");
+  EXPECT_EQ(resp.GetVec()[4], "OK3");
+}
+
 TEST_F(MultiTest, MultiHop) {
   Run({"set", kKey1, "1"});
 
diff --git a/src/server/set_family_test.cc b/src/server/set_family_test.cc
index 54bc93269aab..7dfa00b15d13 100644
--- a/src/server/set_family_test.cc
+++ b/src/server/set_family_test.cc
@@ -115,6 +115,8 @@ TEST_F(SetFamilyTest, SInter) {
   EXPECT_THAT(resp, ErrArg("WRONGTYPE Operation against a key"));
   resp = Run({"sinterstore", "none1", "none2"});
   EXPECT_THAT(resp, IntArg(0));
+
+  EXPECT_THAT(Run({"sinter"}), ErrArg("wrong number of arguments"));
 }
 
 TEST_F(SetFamilyTest, SInterCard) {
diff --git a/src/server/zset_family_test.cc b/src/server/zset_family_test.cc
index 7720adebf39d..bcd02715d4d4 100644
--- a/src/server/zset_family_test.cc
+++ b/src/server/zset_family_test.cc
@@ -814,7 +814,7 @@ TEST_F(ZSetFamilyTest, ZMPopInvalidSyntax) {
 
   // Zero keys.
   resp = Run({"zmpop", "0", "MIN", "COUNT", "1"});
-  EXPECT_THAT(resp, ErrArg("syntax error"));
+  EXPECT_THAT(resp, ErrArg("at least 1 input key is needed"));
 
   // Number of keys not uint.
   resp = Run({"zmpop", "aa", "a", "MIN"});
