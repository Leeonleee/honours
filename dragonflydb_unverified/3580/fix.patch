diff --git a/src/facade/error.h b/src/facade/error.h
index d46b4e71bf8a..7a9c352f30be 100644
--- a/src/facade/error.h
+++ b/src/facade/error.h
@@ -35,6 +35,7 @@ extern const char kClusterNotConfigured[];
 extern const char kLoadingErr[];
 extern const char kUndeclaredKeyErr[];
 extern const char kInvalidDumpValueErr[];
+extern const char kInvalidJsonPathErr[];
 
 extern const char kSyntaxErrType[];
 extern const char kScriptErrType[];
diff --git a/src/facade/facade.cc b/src/facade/facade.cc
index ed401b78dfe1..4567135a46cf 100644
--- a/src/facade/facade.cc
+++ b/src/facade/facade.cc
@@ -96,6 +96,7 @@ const char kClusterNotConfigured[] = "Cluster is not yet configured";
 const char kLoadingErr[] = "-LOADING Dragonfly is loading the dataset in memory";
 const char kUndeclaredKeyErr[] = "script tried accessing undeclared key";
 const char kInvalidDumpValueErr[] = "DUMP payload version or checksum are wrong";
+const char kInvalidJsonPathErr[] = "invalid JSON path";
 
 const char kSyntaxErrType[] = "syntax_error";
 const char kScriptErrType[] = "script_error";
diff --git a/src/facade/op_status.cc b/src/facade/op_status.cc
index 84f5c8e6a880..c4c21bfd1732 100644
--- a/src/facade/op_status.cc
+++ b/src/facade/op_status.cc
@@ -34,6 +34,8 @@ std::string_view StatusToMsg(OpStatus status) {
       return "at least 1 input key is needed for this command";
     case OpStatus::MEMBER_NOTFOUND:
       return kKeyNotFoundErr;
+    case OpStatus::INVALID_JSON_PATH:
+      return kInvalidJsonPathErr;
     default:
       LOG(ERROR) << "Unsupported status " << status;
       return "Internal error";
diff --git a/src/facade/op_status.h b/src/facade/op_status.h
index 4c5c1e92ca61..9749b9d5fd43 100644
--- a/src/facade/op_status.h
+++ b/src/facade/op_status.h
@@ -30,7 +30,8 @@ enum class OpStatus : uint16_t {
   INVALID_NUMERIC_RESULT,
   CANCELLED,
   AT_LEAST_ONE_KEY,
-  MEMBER_NOTFOUND
+  MEMBER_NOTFOUND,
+  INVALID_JSON_PATH
 };
 
 class OpResultBase {
diff --git a/src/server/json_family.cc b/src/server/json_family.cc
index f96085fccfe3..72e1aebe0f75 100644
--- a/src/server/json_family.cc
+++ b/src/server/json_family.cc
@@ -565,10 +565,14 @@ OpResult<std::string> OpJsonGet(const OpArgs& op_args, string_view key,
       jsoncons::json_object_arg};  // see https://github.com/danielaparker/jsoncons/issues/482
   if (paths.size() == 1) {
     auto eval_result = eval_wrapped(paths[0].second);
+    if (!eval_result) {
+      return OpStatus::INVALID_JSON_PATH;
+    }
     out = std::move(eval_result).value();  // TODO(Print not existing path to the user)
   } else {
     for (const auto& [path_str, path] : paths) {
       auto eval_result = eval_wrapped(path);
+      DCHECK(eval_result);
       out[path_str] = std::move(eval_result).value();  // TODO(Print not existing path to the user)
     }
   }
