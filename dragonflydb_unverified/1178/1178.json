{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1178,
  "instance_id": "dragonflydb__dragonfly-1178",
  "issue_numbers": [
    "846"
  ],
  "base_commit": "842c1e43ff74ff11e012c8c2e45d9a56fa8b6867",
  "patch": "diff --git a/src/server/generic_family.cc b/src/server/generic_family.cc\nindex 2ff61d28d748..68f49a661769 100644\n--- a/src/server/generic_family.cc\n+++ b/src/server/generic_family.cc\n@@ -441,7 +441,7 @@ OpStatus OpPersist(const OpArgs& op_args, string_view key) {\n       return db_slice.UpdateExpire(op_args.db_cntx.db_index, it, 0) ? OpStatus::OK\n                                                                     : OpStatus::SKIPPED;\n     }\n-    return OpStatus::OK;  // fall though - this is the default\n+    return OpStatus::SKIPPED;  // fall though - key does not have expiry\n   }\n }\n \n@@ -710,7 +710,10 @@ void GenericFamily::Persist(CmdArgList args, ConnectionContext* cntx) {\n   auto cb = [&](Transaction* t, EngineShard* shard) { return OpPersist(t->GetOpArgs(shard), key); };\n \n   OpStatus status = cntx->transaction->ScheduleSingleHop(move(cb));\n-  (*cntx)->SendLong(status == OpStatus::OK);\n+  if (status == OpStatus::OK)\n+    (*cntx)->SendLong(1);\n+  else\n+    (*cntx)->SendLong(0);\n }\n \n void GenericFamily::Expire(CmdArgList args, ConnectionContext* cntx) {\n",
  "test_patch": "diff --git a/src/server/generic_family_test.cc b/src/server/generic_family_test.cc\nindex d9772d987e97..5794d318ed26 100644\n--- a/src/server/generic_family_test.cc\n+++ b/src/server/generic_family_test.cc\n@@ -415,13 +415,16 @@ TEST_F(GenericFamilyTest, Time) {\n TEST_F(GenericFamilyTest, Persist) {\n   auto resp = Run({\"set\", \"mykey\", \"somevalue\"});\n   EXPECT_EQ(resp, \"OK\");\n-  // Key without expiration time - return 1\n-  EXPECT_EQ(1, CheckedInt({\"persist\", \"mykey\"}));\n+  // Key without expiration time - return 0\n+  EXPECT_EQ(0, CheckedInt({\"persist\", \"mykey\"}));\n+  EXPECT_EQ(-1, CheckedInt({\"TTL\", \"mykey\"}));\n   // set expiration time and try again\n   resp = Run({\"EXPIRE\", \"mykey\", \"10\"});\n   EXPECT_EQ(10, CheckedInt({\"TTL\", \"mykey\"}));\n   EXPECT_EQ(1, CheckedInt({\"persist\", \"mykey\"}));\n   EXPECT_EQ(-1, CheckedInt({\"TTL\", \"mykey\"}));\n+  // persist on key that does not exist should also return 0\n+  EXPECT_EQ(0, CheckedInt({\"persist\", \"keythatdoesnotexist\"}));\n }\n \n TEST_F(GenericFamilyTest, Dump) {\n",
  "problem_statement": "PERSIST command should return 0 if key does not have an associated timeout\n\n",
  "hints_text": "",
  "created_at": "2023-05-03T07:02:32Z",
  "modified_files": [
    "src/server/generic_family.cc"
  ],
  "modified_test_files": [
    "src/server/generic_family_test.cc"
  ]
}