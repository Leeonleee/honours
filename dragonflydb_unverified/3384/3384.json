{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 3384,
  "instance_id": "dragonflydb__dragonfly-3384",
  "issue_numbers": [
    "3386"
  ],
  "base_commit": "6b67f44e29442ae9b083127717d4f3ae4e77edb2",
  "patch": "diff --git a/src/core/compact_object.cc b/src/core/compact_object.cc\nindex 4f12fea17c9d..dc8fbfc7fdbb 100644\n--- a/src/core/compact_object.cc\n+++ b/src/core/compact_object.cc\n@@ -621,7 +621,7 @@ uint64_t CompactObj::HashCode(string_view str) {\n   return XXH3_64bits_withSeed(str.data(), str.size(), kHashSeed);\n }\n \n-unsigned CompactObj::ObjType() const {\n+CompactObjType CompactObj::ObjType() const {\n   if (IsInline() || taglen_ == INT_TAG || taglen_ == SMALL_TAG || taglen_ == EXTERNAL_TAG)\n     return OBJ_STRING;\n \n@@ -637,30 +637,7 @@ unsigned CompactObj::ObjType() const {\n   }\n \n   LOG(FATAL) << \"TBD \" << int(taglen_);\n-  return 0;\n-}\n-\n-string_view CompactObj::ObjTypeToString(unsigned type) {\n-#define OBJECT_TYPE_CASE(type) \\\n-  case type:                   \\\n-    return absl::StripPrefix(#type, \"OBJ_\")\n-\n-  switch (type) {\n-    OBJECT_TYPE_CASE(OBJ_STRING);\n-    OBJECT_TYPE_CASE(OBJ_LIST);\n-    OBJECT_TYPE_CASE(OBJ_SET);\n-    OBJECT_TYPE_CASE(OBJ_ZSET);\n-    OBJECT_TYPE_CASE(OBJ_HASH);\n-    OBJECT_TYPE_CASE(OBJ_MODULE);\n-    OBJECT_TYPE_CASE(OBJ_STREAM);\n-    OBJECT_TYPE_CASE(OBJ_JSON);\n-    OBJECT_TYPE_CASE(OBJ_SBF);\n-    default:\n-      DCHECK(false) << \"Unknown object type \" << type;\n-      return \"OTHER\";\n-  }\n-\n-#undef OBJECT_TYPE_CASE\n+  return kInvalidCompactObjType;\n }\n \n unsigned CompactObj::Encoding() const {\n@@ -674,7 +651,7 @@ unsigned CompactObj::Encoding() const {\n   }\n }\n \n-void CompactObj::InitRobj(unsigned type, unsigned encoding, void* obj) {\n+void CompactObj::InitRobj(CompactObjType type, unsigned encoding, void* obj) {\n   DCHECK_NE(type, OBJ_STRING);\n   SetMeta(ROBJ_TAG, mask_);\n   u_.r_obj.Init(type, encoding, obj);\n@@ -1255,4 +1232,29 @@ MemoryResource* CompactObj::memory_resource() {\n   return tl.local_mr;\n }\n \n+constexpr std::pair<CompactObjType, std::string_view> kObjTypeToString[8] = {\n+    {OBJ_STRING, \"string\"sv},  {OBJ_LIST, \"list\"sv},    {OBJ_SET, \"set\"sv},\n+    {OBJ_ZSET, \"zset\"sv},      {OBJ_HASH, \"hash\"sv},    {OBJ_STREAM, \"stream\"sv},\n+    {OBJ_JSON, \"ReJSON-RL\"sv}, {OBJ_SBF, \"MBbloom--\"sv}};\n+\n+std::string_view ObjTypeToString(CompactObjType type) {\n+  for (auto& p : kObjTypeToString) {\n+    if (type == p.first) {\n+      return p.second;\n+    }\n+  }\n+\n+  LOG(DFATAL) << \"Unsupported type \" << type;\n+  return \"Invalid type\"sv;\n+}\n+\n+std::optional<CompactObjType> ObjTypeFromString(std::string_view sv) {\n+  for (auto& p : kObjTypeToString) {\n+    if (absl::EqualsIgnoreCase(sv, p.second)) {\n+      return p.first;\n+    }\n+  }\n+  return std::nullopt;\n+}\n+\n }  // namespace dfly\ndiff --git a/src/core/compact_object.h b/src/core/compact_object.h\nindex a59f7a7362c4..a9bbd3d142e5 100644\n--- a/src/core/compact_object.h\n+++ b/src/core/compact_object.h\n@@ -97,6 +97,10 @@ struct TieredColdRecord;\n \n }  // namespace detail\n \n+using CompactObjType = unsigned;\n+\n+constexpr CompactObjType kInvalidCompactObjType = std::numeric_limits<CompactObjType>::max();\n+\n class CompactObj {\n   static constexpr unsigned kInlineLen = 16;\n \n@@ -268,9 +272,7 @@ class CompactObj {\n   }\n \n   unsigned Encoding() const;\n-  unsigned ObjType() const;\n-\n-  static std::string_view ObjTypeToString(unsigned type);\n+  CompactObjType ObjType() const;\n \n   void* RObjPtr() const {\n     return u_.r_obj.inner_obj();\n@@ -282,7 +284,7 @@ class CompactObj {\n \n   // takes ownership over obj_inner.\n   // type should not be OBJ_STRING.\n-  void InitRobj(unsigned type, unsigned encoding, void* obj_inner);\n+  void InitRobj(CompactObjType type, unsigned encoding, void* obj_inner);\n \n   // For STR object.\n   void SetInt(int64_t val);\n@@ -536,6 +538,10 @@ class CompactObjectView {\n   CompactObj obj_;\n };\n \n+std::string_view ObjTypeToString(CompactObjType type);\n+\n+std::optional<CompactObjType> ObjTypeFromString(std::string_view sv);\n+\n namespace detail {\n \n struct TieredColdRecord : public ::boost::intrusive::list_base_hook<\ndiff --git a/src/server/common.cc b/src/server/common.cc\nindex e41cc00721ad..9274211b79f2 100644\n--- a/src/server/common.cc\n+++ b/src/server/common.cc\n@@ -132,31 +132,6 @@ const char* GlobalStateName(GlobalState s) {\n   ABSL_UNREACHABLE();\n }\n \n-const char* ObjTypeName(int type) {\n-  switch (type) {\n-    case OBJ_STRING:\n-      return \"string\";\n-    case OBJ_LIST:\n-      return \"list\";\n-    case OBJ_SET:\n-      return \"set\";\n-    case OBJ_ZSET:\n-      return \"zset\";\n-    case OBJ_HASH:\n-      return \"hash\";\n-    case OBJ_STREAM:\n-      return \"stream\";\n-    case OBJ_JSON:\n-      return \"rejson-rl\";\n-    case OBJ_SBF:\n-      return \"MBbloom--\";\n-\n-    default:\n-      LOG(ERROR) << \"Unsupported type \" << type;\n-  }\n-  return \"invalid\";\n-};\n-\n const char* RdbTypeName(unsigned type) {\n   switch (type) {\n     case RDB_TYPE_STRING:\n@@ -318,8 +293,11 @@ OpResult<ScanOpts> ScanOpts::TryFrom(CmdArgList args) {\n       if (scan_opts.pattern == \"*\")\n         scan_opts.pattern = string_view{};\n     } else if (opt == \"TYPE\") {\n-      ToLower(&args[i + 1]);\n-      scan_opts.type_filter = ArgS(args, i + 1);\n+      auto obj_type = ObjTypeFromString(ArgS(args, i + 1));\n+      if (!obj_type) {\n+        return facade::OpStatus::SYNTAX_ERR;\n+      }\n+      scan_opts.type_filter = obj_type;\n     } else if (opt == \"BUCKET\") {\n       if (!absl::SimpleAtoi(ArgS(args, i + 1), &scan_opts.bucket_id)) {\n         return facade::OpStatus::INVALID_INT;\ndiff --git a/src/server/common.h b/src/server/common.h\nindex 8c19687f784f..084ba8864737 100644\n--- a/src/server/common.h\n+++ b/src/server/common.h\n@@ -16,6 +16,7 @@\n #include <vector>\n \n #include \"base/logging.h\"\n+#include \"core/compact_object.h\"\n #include \"facade/facade_types.h\"\n #include \"facade/op_status.h\"\n #include \"util/fibers/fibers.h\"\n@@ -121,7 +122,6 @@ inline void ToLower(const MutableSlice* val) {\n \n bool ParseHumanReadableBytes(std::string_view str, int64_t* num_bytes);\n bool ParseDouble(std::string_view src, double* value);\n-const char* ObjTypeName(int type);\n \n const char* RdbTypeName(unsigned type);\n \n@@ -295,7 +295,7 @@ class Context : protected Cancellation {\n struct ScanOpts {\n   std::string_view pattern;\n   size_t limit = 10;\n-  std::string_view type_filter;\n+  std::optional<CompactObjType> type_filter;\n   unsigned bucket_id = UINT_MAX;\n \n   bool Matches(std::string_view val_name) const;\ndiff --git a/src/server/debugcmd.cc b/src/server/debugcmd.cc\nindex abacd231ad64..a7f4a187ca4f 100644\n--- a/src/server/debugcmd.cc\n+++ b/src/server/debugcmd.cc\n@@ -16,6 +16,7 @@ extern \"C\" {\n \n #include \"base/flags.h\"\n #include \"base/logging.h\"\n+#include \"core/compact_object.h\"\n #include \"core/string_map.h\"\n #include \"server/blocking_controller.h\"\n #include \"server/container_utils.h\"\n@@ -908,7 +909,7 @@ void DebugCmd::ObjHist() {\n   absl::StrAppend(&result, \"___begin object histogram___\\n\\n\");\n \n   for (auto& [obj_type, hist_ptr] : obj_hist_map_arr[0]) {\n-    StrAppend(&result, \"OBJECT:\", ObjTypeName(obj_type), \"\\n\");\n+    StrAppend(&result, \"OBJECT:\", ObjTypeToString(obj_type), \"\\n\");\n     StrAppend(&result, \"________________________________________________________________\\n\");\n     StrAppend(&result, \"Key length histogram:\\n\", hist_ptr->key_len.ToString(), \"\\n\");\n     StrAppend(&result, \"Value length histogram:\\n\", hist_ptr->val_len.ToString(), \"\\n\");\ndiff --git a/src/server/generic_family.cc b/src/server/generic_family.cc\nindex 419dbb199241..b3f99498b3e6 100644\n--- a/src/server/generic_family.cc\n+++ b/src/server/generic_family.cc\n@@ -551,7 +551,7 @@ bool ScanCb(const OpArgs& op_args, PrimeIterator prime_it, const ScanOpts& opts,\n   if (!IsValid(it))\n     return false;\n \n-  bool matches = opts.type_filter.empty() || ObjTypeName(it->second.ObjType()) == opts.type_filter;\n+  bool matches = !opts.type_filter || it->second.ObjType() == opts.type_filter;\n \n   if (!matches)\n     return false;\n@@ -1386,7 +1386,7 @@ void GenericFamily::Dump(CmdArgList args, ConnectionContext* cntx) {\n void GenericFamily::Type(CmdArgList args, ConnectionContext* cntx) {\n   std::string_view key = ArgS(args, 0);\n \n-  auto cb = [&](Transaction* t, EngineShard* shard) -> OpResult<int> {\n+  auto cb = [&](Transaction* t, EngineShard* shard) -> OpResult<CompactObjType> {\n     auto& db_slice = cntx->ns->GetDbSlice(shard->shard_id());\n     auto it = db_slice.FindReadOnly(t->GetDbContext(), key).it;\n     if (!it.is_done()) {\n@@ -1395,11 +1395,11 @@ void GenericFamily::Type(CmdArgList args, ConnectionContext* cntx) {\n       return OpStatus::KEY_NOTFOUND;\n     }\n   };\n-  OpResult<int> result = cntx->transaction->ScheduleSingleHopT(std::move(cb));\n+  OpResult<CompactObjType> result = cntx->transaction->ScheduleSingleHopT(std::move(cb));\n   if (!result) {\n     cntx->SendSimpleString(\"none\");\n   } else {\n-    cntx->SendSimpleString(ObjTypeName(result.value()));\n+    cntx->SendSimpleString(ObjTypeToString(result.value()));\n   }\n }\n \ndiff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex cef8211c1367..069cac6df166 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -1196,7 +1196,7 @@ void PrintPrometheusMetrics(const Metrics& m, DflyCmd* dfly_cmd, StringResponse*\n     for (unsigned type = 0; type < total.memory_usage_by_type.size(); type++) {\n       size_t mem = total.memory_usage_by_type[type];\n       if (mem > 0) {\n-        AppendMetricValue(\"type_used_memory\", mem, {\"type\"}, {CompactObj::ObjTypeToString(type)},\n+        AppendMetricValue(\"type_used_memory\", mem, {\"type\"}, {ObjTypeToString(type)},\n                           &type_used_memory_metric);\n         added = true;\n       }\n@@ -2078,7 +2078,7 @@ void ServerFamily::Info(CmdArgList args, ConnectionContext* cntx) {\n     for (unsigned type = 0; type < total.memory_usage_by_type.size(); type++) {\n       size_t mem = total.memory_usage_by_type[type];\n       if (mem > 0) {\n-        append(absl::StrCat(\"type_used_memory_\", CompactObj::ObjTypeToString(type)), mem);\n+        append(absl::StrCat(\"type_used_memory_\", ObjTypeToString(type)), mem);\n       }\n     }\n     append(\"table_used_memory\", total.table_mem_usage);\n",
  "test_patch": "diff --git a/src/server/generic_family_test.cc b/src/server/generic_family_test.cc\nindex 52e97668167c..0916e4908e2f 100644\n--- a/src/server/generic_family_test.cc\n+++ b/src/server/generic_family_test.cc\n@@ -747,4 +747,19 @@ TEST_F(GenericFamilyTest, RandomKey) {\n   EXPECT_EQ(Run({\"randomkey\"}), \"k1\");\n }\n \n+TEST_F(GenericFamilyTest, JsonType) {\n+  auto resp = Run({\"json.set\", \"json\", \"$\", R\"({\"example\":\"value\"})\"});\n+  EXPECT_EQ(resp, \"OK\");\n+\n+  resp = Run({\"type\", \"json\"});\n+  EXPECT_EQ(resp, \"ReJSON-RL\") << \"For the Redis GUI the register of the JSON type is important. \"\n+                                  \"See https://github.com/dragonflydb/dragonfly/issues/3386\";\n+\n+  // Test json type lowercase works for the SCAN commmand\n+  resp = Run({\"scan\", \"0\", \"type\", \"rejson-rl\"});\n+  EXPECT_THAT(resp, ArrLen(2));\n+  auto vec = StrArray(resp.GetVec()[1]);\n+  ASSERT_THAT(vec, ElementsAre(\"json\"));\n+}\n+\n }  // namespace dfly\ndiff --git a/tests/dragonfly/json_test.py b/tests/dragonfly/json_test.py\nindex a13d5ed2654d..382bb190d39f 100755\n--- a/tests/dragonfly/json_test.py\n+++ b/tests/dragonfly/json_test.py\n@@ -22,7 +22,7 @@ async def test_basic_json_get_set(async_client: aioredis.Redis):\n     result = await get_set_json(connection=async_client, key=key_name, value=jane)\n     assert result, \"failed to set JSON value\"\n     the_type = await async_client.type(key_name)\n-    assert the_type == \"rejson-rl\"\n+    assert the_type == \"ReJSON-RL\"\n     assert len(result) == 1\n     assert result[0][\"name\"] == \"Jane\"\n     assert result[0][\"Age\"] == 33\n@@ -34,7 +34,7 @@ async def test_access_json_value_as_string(async_client: aioredis.Redis):\n     assert result is not None, \"failed to set JSON value\"\n     # make sure that we have valid JSON here\n     the_type = await async_client.type(key_name)\n-    assert the_type == \"rejson-rl\"\n+    assert the_type == \"ReJSON-RL\"\n     # you cannot access this key as string\n     try:\n         result = await async_client.get(key_name)\n@@ -49,7 +49,7 @@ async def test_reset_key_to_string(async_client: aioredis.Redis):\n     assert result is not None, \"failed to set JSON value\"\n     # make sure that we have valid JSON here\n     the_type = await async_client.type(key_name)\n-    assert the_type == \"rejson-rl\"\n+    assert the_type == \"ReJSON-RL\"\n \n     # set the key to be string - this is legal\n     await async_client.set(key_name, \"some random value\")\n@@ -60,7 +60,7 @@ async def test_reset_key_to_string(async_client: aioredis.Redis):\n     # to change the type to JSON and override it\n     result = await get_set_json(async_client, key=key_name, value=jane)\n     the_type = await async_client.type(key_name)\n-    assert the_type == \"rejson-rl\"\n+    assert the_type == \"ReJSON-RL\"\n \n \n async def test_update_value(async_client: aioredis.Redis):\n@@ -69,7 +69,7 @@ async def test_update_value(async_client: aioredis.Redis):\n     assert result is not None, \"failed to set JSON value\"\n     # make sure that we have valid JSON here\n     the_type = await async_client.type(key_name)\n-    assert the_type == \"rejson-rl\"\n+    assert the_type == \"ReJSON-RL\"\n     result = await get_set_json(async_client, value=\"0\", key=key_name, path=\"$.a.*\")\n     assert len(result) == 3\n     # make sure that all the values under 'a' where set to 0\n",
  "problem_statement": "Json values cannot be accessed from Redis Insight\nJson values cannot be accessed from [Redis Insight](https://hub.docker.com/r/redis/redisinsight).\r\n\r\n![image](https://github.com/user-attachments/assets/0ed8490d-485e-4c56-891b-c54b8a30a8b1)\r\n\n",
  "hints_text": "",
  "created_at": "2024-07-24T17:38:34Z",
  "modified_files": [
    "src/core/compact_object.cc",
    "src/core/compact_object.h",
    "src/server/common.cc",
    "src/server/common.h",
    "src/server/debugcmd.cc",
    "src/server/generic_family.cc",
    "src/server/server_family.cc"
  ],
  "modified_test_files": [
    "src/server/generic_family_test.cc",
    "tests/dragonfly/json_test.py"
  ]
}