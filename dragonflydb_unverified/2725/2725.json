{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2725,
  "instance_id": "dragonflydb__dragonfly-2725",
  "issue_numbers": [
    "2718"
  ],
  "base_commit": "12d76dd5c2f3fce5e8e121fb1d3e7f2629ff8c28",
  "patch": "diff --git a/src/server/CMakeLists.txt b/src/server/CMakeLists.txt\nindex 78c19e4d5505..0e0422d53667 100644\n--- a/src/server/CMakeLists.txt\n+++ b/src/server/CMakeLists.txt\n@@ -88,7 +88,8 @@ cxx_test(stream_family_test dfly_test_lib LABELS DFLY)\n cxx_test(string_family_test dfly_test_lib LABELS DFLY)\n cxx_test(bitops_family_test dfly_test_lib LABELS DFLY)\n cxx_test(rdb_test dfly_test_lib DATA testdata/empty.rdb testdata/redis6_small.rdb\n-         testdata/redis6_stream.rdb testdata/hll.rdb testdata/redis7_small.rdb LABELS DFLY)\n+         testdata/redis6_stream.rdb testdata/hll.rdb testdata/redis7_small.rdb\n+         testdata/redis_json.rdb LABELS DFLY)\n cxx_test(zset_family_test dfly_test_lib LABELS DFLY)\n cxx_test(blocking_controller_test dfly_test_lib LABELS DFLY)\n cxx_test(json_family_test dfly_test_lib LABELS DFLY)\ndiff --git a/src/server/rdb_load.cc b/src/server/rdb_load.cc\nindex 9c3fd1136f24..de2046b0cc9e 100644\n--- a/src/server/rdb_load.cc\n+++ b/src/server/rdb_load.cc\n@@ -1364,6 +1364,9 @@ error_code RdbLoaderBase::ReadObj(int rdbtype, OpaqueObj* dest) {\n         iores = ReadGeneric(rdbtype);\n       }\n       break;\n+    case RDB_TYPE_MODULE_2:\n+      iores = ReadRedisJson();\n+      break;\n     default:\n       LOG(ERROR) << \"Unsupported rdb type \" << rdbtype;\n \n@@ -1777,6 +1780,44 @@ auto RdbLoaderBase::ReadStreams() -> io::Result<OpaqueObj> {\n   return OpaqueObj{std::move(load_trace), RDB_TYPE_STREAM_LISTPACKS};\n }\n \n+auto RdbLoaderBase::ReadRedisJson() -> io::Result<OpaqueObj> {\n+  auto json_magic_number = LoadLen(nullptr);\n+  if (!json_magic_number) {\n+    return Unexpected(errc::rdb_file_corrupted);\n+  }\n+\n+  constexpr string_view kJsonModule = \"ReJSON-RL\"sv;\n+  string module_name = ModuleTypeName(*json_magic_number);\n+  if (module_name != kJsonModule) {\n+    LOG(ERROR) << \"Unsupported module: \" << module_name;\n+    return Unexpected(errc::unsupported_operation);\n+  }\n+\n+  int encver = *json_magic_number & 1023;\n+  if (encver != 3) {\n+    LOG(ERROR) << \"Unsupported ReJSON version: \" << encver;\n+    return Unexpected(errc::unsupported_operation);\n+  }\n+\n+  auto opcode = FetchInt<uint8_t>();\n+  if (!opcode || *opcode != RDB_MODULE_OPCODE_STRING) {\n+    return Unexpected(errc::rdb_file_corrupted);\n+  }\n+\n+  RdbVariant dest;\n+  error_code ec = ReadStringObj(&dest);\n+  if (ec) {\n+    return make_unexpected(ec);\n+  }\n+\n+  opcode = FetchInt<uint8_t>();\n+  if (!opcode || *opcode != RDB_MODULE_OPCODE_EOF) {\n+    return Unexpected(errc::rdb_file_corrupted);\n+  }\n+\n+  return OpaqueObj{std::move(dest), RDB_TYPE_JSON};\n+}\n+\n auto RdbLoaderBase::ReadJson() -> io::Result<OpaqueObj> {\n   RdbVariant dest;\n   error_code ec = ReadStringObj(&dest);\n@@ -2001,8 +2042,9 @@ error_code RdbLoader::Load(io::Source* src) {\n       SET_OR_RETURN(LoadLen(nullptr), module_id);\n       string module_name = ModuleTypeName(module_id);\n \n-      LOG(ERROR) << \"Modules are not supported, error loading module \" << module_name;\n-      return RdbError(errc::feature_not_supported);\n+      LOG(WARNING) << \"WARNING: Skipping data for module \" << module_name;\n+      RETURN_ON_ERR(SkipModuleData());\n+      continue;\n     }\n \n     if (type == RDB_OPCODE_COMPRESSED_ZSTD_BLOB_START ||\n@@ -2142,6 +2184,50 @@ void RdbLoaderBase::AllocateDecompressOnce(int op_type) {\n   }\n }\n \n+error_code RdbLoaderBase::SkipModuleData() {\n+  uint64_t opcode;\n+  SET_OR_RETURN(LoadLen(nullptr), opcode);  // ignore field 'when_opcode'\n+  if (opcode != RDB_MODULE_OPCODE_UINT)\n+    return RdbError(errc::rdb_file_corrupted);\n+  SET_OR_RETURN(LoadLen(nullptr), opcode);  // ignore field 'when'\n+\n+  while (true) {\n+    SET_OR_RETURN(LoadLen(nullptr), opcode);\n+\n+    switch (opcode) {\n+      case RDB_MODULE_OPCODE_EOF:\n+        return kOk;  // Module data end\n+\n+      case RDB_MODULE_OPCODE_SINT:\n+      case RDB_MODULE_OPCODE_UINT: {\n+        [[maybe_unused]] uint64_t _;\n+        SET_OR_RETURN(LoadLen(nullptr), _);\n+        break;\n+      }\n+\n+      case RDB_MODULE_OPCODE_STRING: {\n+        RdbVariant dest;\n+        error_code ec = ReadStringObj(&dest);\n+        if (ec) {\n+          return ec;\n+        }\n+        break;\n+      }\n+\n+      case RDB_MODULE_OPCODE_DOUBLE: {\n+        [[maybe_unused]] double _;\n+        SET_OR_RETURN(FetchBinaryDouble(), _);\n+        break;\n+      }\n+\n+      default:\n+        // TODO: handle RDB_MODULE_OPCODE_FLOAT\n+        LOG(ERROR) << \"Unsupported module section: \" << opcode;\n+        return RdbError(errc::rdb_file_corrupted);\n+    }\n+  }\n+}\n+\n error_code RdbLoaderBase::HandleCompressedBlob(int op_type) {\n   AllocateDecompressOnce(op_type);\n   // Fetch uncompress blob\ndiff --git a/src/server/rdb_load.h b/src/server/rdb_load.h\nindex b73df634765d..871c375335f9 100644\n--- a/src/server/rdb_load.h\n+++ b/src/server/rdb_load.h\n@@ -129,8 +129,10 @@ class RdbLoaderBase {\n   ::io::Result<OpaqueObj> ReadZSetZL();\n   ::io::Result<OpaqueObj> ReadListQuicklist(int rdbtype);\n   ::io::Result<OpaqueObj> ReadStreams();\n+  ::io::Result<OpaqueObj> ReadRedisJson();\n   ::io::Result<OpaqueObj> ReadJson();\n \n+  std::error_code SkipModuleData();\n   std::error_code HandleCompressedBlob(int op_type);\n   std::error_code HandleCompressedBlobFinish();\n   void AllocateDecompressOnce(int op_type);\n",
  "test_patch": "diff --git a/src/server/rdb_test.cc b/src/server/rdb_test.cc\nindex 466dd3ec5648..55fd1a88ff55 100644\n--- a/src/server/rdb_test.cc\n+++ b/src/server/rdb_test.cc\n@@ -505,4 +505,29 @@ TEST_F(RdbTest, LoadSmall7) {\n   ASSERT_THAT(resp, ArgType(RespExpr::ARRAY));\n   EXPECT_THAT(resp.GetVec(), ElementsAre(\"einstein\", \"schrodinger\"));\n }\n+\n+TEST_F(RdbTest, RedisJson) {\n+  // RDB file generated via:\n+  // ./redis-server --save \"\" --appendonly no --loadmodule ../lib/rejson.so\n+  // and then:\n+  // JSON.SET json-str $ '\"hello\"'\n+  // JSON.SET json-arr $ \"[1, true, \\\"hello\\\", 3.14]\"\n+  // JSON.SET json-obj $\n+  // '{\"company\":\"DragonflyDB\",\"product\":\"Dragonfly\",\"website\":\"https://dragondlydb.io\",\"years-active\":[2021,2022,2023,2024,\"and\n+  // more!\"]}'\n+  io::FileSource fs = GetSource(\"redis_json.rdb\");\n+  RdbLoader loader{service_.get()};\n+\n+  // must run in proactor thread in order to avoid polluting the serverstate\n+  // in the main, testing thread.\n+  auto ec = pp_->at(0)->Await([&] { return loader.Load(&fs); });\n+\n+  ASSERT_FALSE(ec) << ec.message();\n+\n+  EXPECT_EQ(Run({\"JSON.GET\", \"json-str\"}), \"\\\"hello\\\"\");\n+  EXPECT_EQ(Run({\"JSON.GET\", \"json-arr\"}), \"[1,true,\\\"hello\\\",3.14]\");\n+  EXPECT_EQ(Run({\"JSON.GET\", \"json-obj\"}),\n+            \"{\\\"company\\\":\\\"DragonflyDB\\\",\\\"product\\\":\\\"Dragonfly\\\",\\\"website\\\":\\\"https://\"\n+            \"dragondlydb.io\\\",\\\"years-active\\\":[2021,2022,2023,2024,\\\"and more!\\\"]}\");\n+}\n }  // namespace dfly\ndiff --git a/src/server/testdata/redis_json.rdb b/src/server/testdata/redis_json.rdb\nnew file mode 100644\nindex 000000000000..b1f6ba6b31b0\nBinary files /dev/null and b/src/server/testdata/redis_json.rdb differ\n",
  "problem_statement": "Serialized JSON compatibility with Redis\nRedis uses a different library for working with JSON, and it is (likely) serialized in a different format. We should be compatible.\n",
  "hints_text": "",
  "created_at": "2024-03-13T20:57:48Z",
  "modified_files": [
    "src/server/CMakeLists.txt",
    "src/server/rdb_load.cc",
    "src/server/rdb_load.h"
  ],
  "modified_test_files": [
    "src/server/rdb_test.cc"
  ]
}