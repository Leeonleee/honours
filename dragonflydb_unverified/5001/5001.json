{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 5001,
  "instance_id": "dragonflydb__dragonfly-5001",
  "issue_numbers": [
    "4948"
  ],
  "base_commit": "6d30baa20bbed0d61335a275630372fa23b2085c",
  "patch": "diff --git a/src/core/glob_matcher.cc b/src/core/glob_matcher.cc\nindex 24bee465e49d..72ae36a3142c 100644\n--- a/src/core/glob_matcher.cc\n+++ b/src/core/glob_matcher.cc\n@@ -236,7 +236,11 @@ GlobMatcher::GlobMatcher(string_view pattern, bool case_sensitive)\n     regex.push_back('i');\n   }\n   regex.push_back(')');\n-  regex.append(Glob2Regex(pattern));\n+  if (pattern.empty()) {\n+    regex.append(Glob2Regex(\"*\"));\n+  } else {\n+    regex.append(Glob2Regex(pattern));\n+  }\n   matcher_.pattern(regex);\n #elif USE_PCRE2\n   string regex(\"(?s\");  // dotall mode\n",
  "test_patch": "diff --git a/src/core/dfly_core_test.cc b/src/core/dfly_core_test.cc\nindex 3eb6bdafe068..e8ca8a66930b 100644\n--- a/src/core/dfly_core_test.cc\n+++ b/src/core/dfly_core_test.cc\n@@ -155,6 +155,7 @@ TEST_F(StringMatchTest, Basic) {\n \n   // Wildcards\n   EXPECT_EQ(MatchLen(\"*\", \"hello\", 0), 1);\n+  EXPECT_EQ(MatchLen(\"*\", \"1234567890123456\", 0), 1);\n   EXPECT_EQ(MatchLen(\"h*\", \"hello\", 0), 1);\n   EXPECT_EQ(MatchLen(\"h*\", \"abc\", 0), 0);\n   EXPECT_EQ(MatchLen(\"h*o\", \"hello\", 0), 1);\ndiff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc\nindex 8e7e80584b71..829f05e5aeee 100644\n--- a/src/server/dragonfly_test.cc\n+++ b/src/server/dragonfly_test.cc\n@@ -548,6 +548,23 @@ TEST_F(DflyEngineTest, PSubscribe) {\n   EXPECT_EQ(\"a*\", msg.pattern);\n }\n \n+TEST_F(DflyEngineTest, PSubscribeMatchOnlyStar) {\n+  single_response_ = false;\n+  auto resp = pp_->at(1)->Await([&] { return Run({\"psubscribe\", \"*\"}); });\n+  EXPECT_THAT(resp, ArrLen(3));\n+  resp = pp_->at(0)->Await([&] { return Run({\"PUBLISH\", \"1234567890123456\", \"abc\"}); });\n+  EXPECT_THAT(resp, IntArg(1));\n+\n+  pp_->AwaitFiberOnAll([](ProactorBase* pb) {});\n+\n+  ASSERT_EQ(1, SubscriberMessagesLen(\"IO1\"));\n+\n+  const auto& msg = GetPublishedMessage(\"IO1\", 0);\n+  EXPECT_EQ(\"abc\", msg.message);\n+  EXPECT_EQ(\"1234567890123456\", msg.channel);\n+  EXPECT_EQ(\"*\", msg.pattern);\n+}\n+\n TEST_F(DflyEngineTest, Unsubscribe) {\n   auto resp = Run({\"unsubscribe\", \"a\"});\n   EXPECT_THAT(resp.GetVec(), ElementsAre(\"unsubscribe\", \"a\", IntArg(0)));\n",
  "problem_statement": "PSUBSCRIBE * wildcard does not work correctly when channel name is longer than 15 characters\n**Describe the bug**\n`PSUBSCRIBE *` does not receive all published messages when the channel name is longer than 15 characters in length.\n\nSee additional info for a special case we discovered aswell.\n\n**To Reproduce**\nSteps to reproduce the behavior:\n1. Subscribe to all pub sub messages using `PSUBSCRIBE *`\n2. Send a message via `PUBLISH` in a seperate redis client with a channel name longer than 15 characters\n    For example `PUBLISH 1234567890123456 testvalue`\n4. Inspect the subscribing redis clients output, there shouldn't be any messages\n\n**Expected behavior**\nIt should behave like redis and receive all messages published even if the channel name is longer than 15 characters.\n\n**Screenshots**\nScreenshot from Redis Insight Pub/Sub tool, same behavior can be reproduced using redis-cli\n![Image](https://github.com/user-attachments/assets/10b50fbc-95ef-4c7b-b4a3-95d0d1577bb9)\n\n**Environment (please complete the following information):**\n - OS: [`wsl`, `k3s` on debain 12]\n - Kernel:\n      - WSL: `Linux Luc-Main 5.15.167.4-microsoft-standard-WSL2 #1 SMP Tue Nov 5 00:21:55 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux`\n      - k3s: `Linux *hostname redacted* 6.1.0-26-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.112-1 (2024-09-30) x86_64 GNU/Linux`\n - Containerized?: `Docker Compose` (Also happens in kubernetes with the operator)\n - Dragonfly Version: `v1.28.1`\n\n**Reproducible Docker Compose Setup**\n```\nservices:\n  dragonfly:\n    image: ghcr.io/dragonflydb/dragonfly:latest\n    restart: unless-stopped\n    ports:\n      - 6379:6379\n```\n\n**Additional context**\nInteresting part is if you for example subscribe to `1*` and send a message on channel `1234567890123456` it seems to work again no matter the length of the channel. So it seems only `*` as the channel pattern is the problem.\n\nTo clarify, we dont use this in production, this is for debugging purposes only on our end.\n\nFeel free to let me know if you need any more information on this issue, keep up the great work! Thank you\n",
  "hints_text": "Hi @LucHeart,\n\nThank you for reporting this. We will take a look",
  "created_at": "2025-04-25T12:10:35Z",
  "modified_files": [
    "src/core/glob_matcher.cc"
  ],
  "modified_test_files": [
    "src/core/dfly_core_test.cc",
    "src/server/dragonfly_test.cc"
  ]
}