diff --git a/src/core/dash_test.cc b/src/core/dash_test.cc
index 8435fb434f5f..c00ba575b6a1 100644
--- a/src/core/dash_test.cc
+++ b/src/core/dash_test.cc
@@ -512,7 +512,7 @@ TEST_F(DashTest, Traverse) {
     dt_.Insert(i, i);
   }
 
-  Dash64::cursor cursor;
+  Dash64::Cursor cursor;
   vector<unsigned> nums;
   auto tr_cb = [&](Dash64::iterator it) {
     nums.push_back(it->first);
@@ -536,7 +536,7 @@ TEST_F(DashTest, Bucket) {
   }
   std::vector<uint64_t> s;
   auto it = dt_.begin();
-  auto bucket_it = Dash64::bucket_it(it);
+  auto bucket_it = Dash64::BucketIt(it);
 
   dt_.TraverseBucket(it, [&](auto i) { s.push_back(i->first); });
 
diff --git a/src/facade/facade_test.h b/src/facade/facade_test.h
index baa0342d2268..f6999999a7f3 100644
--- a/src/facade/facade_test.h
+++ b/src/facade/facade_test.h
@@ -74,6 +74,14 @@ inline bool operator!=(const RespExpr& left, std::string_view s) {
   return !(left == s);
 }
 
+inline bool operator==(std::string_view s, const RespExpr& right) {
+  return right == s;
+}
+
+inline bool operator!=(std::string_view s, const RespExpr& right) {
+  return !(right == s);
+}
+
 void PrintTo(const RespExpr::Vec& vec, std::ostream* os);
 
 }  // namespace facade
diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc
index 0dd6e978c06b..7caefa3a05b4 100644
--- a/src/server/dragonfly_test.cc
+++ b/src/server/dragonfly_test.cc
@@ -502,20 +502,26 @@ TEST_F(DflyEngineTest, Bug207) {
 TEST_F(DflyEngineTest, StickyEviction) {
   shard_set->TEST_EnableHeartBeat();
   shard_set->TEST_EnableCacheMode();
-  max_memory_limit = 0;
+  max_memory_limit = 300000;
 
   string tmp_val(100, '.');
 
   ssize_t failed = -1;
   for (ssize_t i = 0; i < 5000; ++i) {
-    auto set_resp = Run({"set", StrCat("key", i), tmp_val});
-    auto stick_resp = Run({"stick", StrCat("key", i)});
+    string key = StrCat("volatile", i);
+    ASSERT_EQ("OK", Run({"set", key, tmp_val}));
+  }
+
+  for (ssize_t i = 0; i < 5000; ++i) {
+    string key = StrCat("key", i);
+    auto set_resp = Run({"set", key, tmp_val});
+    auto stick_resp = Run({"stick", key});
 
     if (set_resp != "OK") {
       failed = i;
       break;
     }
-    ASSERT_THAT(stick_resp, IntArg(1));
+    ASSERT_THAT(stick_resp, IntArg(1)) << i;
   }
 
   ASSERT_GE(failed, 0);
