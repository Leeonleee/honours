{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 897,
  "instance_id": "dragonflydb__dragonfly-897",
  "issue_numbers": [
    "850"
  ],
  "base_commit": "d6b588d1bf185726f595b4b39b505a028b49bec7",
  "patch": "diff --git a/src/facade/error.h b/src/facade/error.h\nindex 740b17eadae4..39134785dd01 100644\n--- a/src/facade/error.h\n+++ b/src/facade/error.h\n@@ -13,7 +13,6 @@ std::string WrongNumArgsError(std::string_view cmd);\n std::string InvalidExpireTime(std::string_view cmd);\n std::string UnknownSubCmd(std::string_view subcmd, std::string_view cmd);\n \n-\n extern const char kSyntaxErr[];\n extern const char kWrongTypeErr[];\n extern const char kKeyNotFoundErr[];\n@@ -32,4 +31,4 @@ extern const char kIndexOutOfRange[];\n extern const char kOutOfMemory[];\n extern const char kInvalidNumericResult[];\n \n-}  // namespace dfly\n+}  // namespace facade\ndiff --git a/src/server/generic_family.cc b/src/server/generic_family.cc\nindex 707b7773bb24..5bdbd1fa3649 100644\n--- a/src/server/generic_family.cc\n+++ b/src/server/generic_family.cc\n@@ -1327,6 +1327,9 @@ OpResult<void> GenericFamily::OpRen(const OpArgs& op_args, string_view from_key,\n   if (!IsValid(from_it))\n     return OpStatus::KEY_NOTFOUND;\n \n+  if (from_key == to_key)\n+    return OpStatus::OK;\n+\n   bool is_prior_list = false;\n   auto [to_it, to_expire] = db_slice.FindExt(op_args.db_cntx, to_key);\n   if (IsValid(to_it)) {\n",
  "test_patch": "diff --git a/src/server/generic_family_test.cc b/src/server/generic_family_test.cc\nindex d6e2dbc5225a..05926b723938 100644\n--- a/src/server/generic_family_test.cc\n+++ b/src/server/generic_family_test.cc\n@@ -199,6 +199,15 @@ TEST_F(GenericFamilyTest, RenameNx) {\n   ASSERT_EQ(Run({\"get\", \"y\"}), x_val);\n }\n \n+TEST_F(GenericFamilyTest, RenameSameName) {\n+  const char kKey[] = \"key\";\n+\n+  ASSERT_THAT(Run({\"rename\", kKey, kKey}), ErrArg(\"no such key\"));\n+\n+  ASSERT_EQ(Run({\"set\", kKey, \"value\"}), \"OK\");\n+  EXPECT_EQ(Run({\"rename\", kKey, kKey}), \"OK\");\n+}\n+\n TEST_F(GenericFamilyTest, Stick) {\n   // check stick returns zero on non-existent keys\n   ASSERT_THAT(Run({\"stick\", \"a\", \"b\"}), IntArg(0));\n",
  "problem_statement": "DF crash when Rename command using source and destination names are the same \n\n",
  "hints_text": "",
  "created_at": "2023-03-02T09:17:21Z",
  "modified_files": [
    "src/facade/error.h",
    "src/server/generic_family.cc"
  ],
  "modified_test_files": [
    "src/server/generic_family_test.cc"
  ]
}