{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1759,
  "instance_id": "dragonflydb__dragonfly-1759",
  "issue_numbers": [
    "836"
  ],
  "base_commit": "7c43cbf2b5cd0cd60d6c208a53619256eece6b38",
  "patch": "diff --git a/.clang-format b/.clang-format\nindex bf80c117f862..7303fd161032 100644\n--- a/.clang-format\n+++ b/.clang-format\n@@ -9,7 +9,7 @@ AllowShortLoopsOnASingleLine: false\n AllowShortFunctionsOnASingleLine: false\n AllowShortIfStatementsOnASingleLine: false\n AlwaysBreakTemplateDeclarations: false\n-ConstructorInitializerAllOnOneLineOrOnePerLine: false\n+PackConstructorInitializers: NextLine\n DerivePointerAlignment: false\n PointerAlignment: Left\n BasedOnStyle: Google\ndiff --git a/src/server/zset_family.cc b/src/server/zset_family.cc\nindex 1c2cf1b81f78..e3729af89ee3 100644\n--- a/src/server/zset_family.cc\n+++ b/src/server/zset_family.cc\n@@ -84,7 +84,7 @@ zlexrangespec GetLexRange(bool reverse, const ZSetFamily::LexInterval& li) {\n   range.min = GetLexStr(interval.first);\n   range.max = GetLexStr(interval.second);\n   range.minex = (interval.first.type == ZSetFamily::LexBound::OPEN);\n-  range.maxex = (li.second.type == ZSetFamily::LexBound::OPEN);\n+  range.maxex = (interval.second.type == ZSetFamily::LexBound::OPEN);\n \n   return range;\n }\n",
  "test_patch": "diff --git a/src/server/zset_family_test.cc b/src/server/zset_family_test.cc\nindex ba6418f541c5..1987a3dd5c81 100644\n--- a/src/server/zset_family_test.cc\n+++ b/src/server/zset_family_test.cc\n@@ -183,6 +183,11 @@ TEST_F(ZSetFamilyTest, ZRevRangeByLex) {\n   resp = Run({\"zrevrangebylex\", \"key\", \"+\", \"[a\"});\n   ASSERT_THAT(resp, ArgType(RespExpr::ARRAY));\n   ASSERT_THAT(resp.GetVec(), ElementsAre(\"foo\", \"elephant\", \"down\", \"cool\", \"bar\", \"alpha\"));\n+\n+  Run({\"zadd\", \"myzset\", \"0\", \"a\", \"0\", \"b\", \"0\", \"c\", \"0\", \"d\", \"0\", \"e\", \"0\", \"f\", \"0\", \"g\"});\n+  resp = Run({\"zrevrangebylex\", \"myzset\", \"(c\", \"-\"});\n+  ASSERT_THAT(resp, ArgType(RespExpr::ARRAY));\n+  EXPECT_THAT(resp.GetVec(), ElementsAre(\"b\", \"a\"));\n }\n \n TEST_F(ZSetFamilyTest, ZRange) {\n",
  "problem_statement": "ZREVRANGEBYLEX exclusive range '(' is not working as expected\n**Describe the bug**\r\nZREVRANGEBYLEX exclusive range '(' is not working as expected\r\n\r\n**To Reproduce**\r\nragonfly> ZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g\r\n(integer) 7\r\ndragonfly> ZREVRANGEBYLEX myzset (c -\r\n\r\nEXPECTED:\r\n1) \"b\"\r\n2) \"a\"\r\nGOT:\r\n1) \"c\"\r\n2) \"b\"\r\n3) \"a\"\n",
  "hints_text": "",
  "created_at": "2023-08-29T09:40:28Z",
  "modified_files": [
    ".clang-format",
    "src/server/zset_family.cc"
  ],
  "modified_test_files": [
    "src/server/zset_family_test.cc"
  ]
}