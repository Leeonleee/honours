diff --git a/src/server/CMakeLists.txt b/src/server/CMakeLists.txt
index 53480b472b55..f1e9b6ae0378 100644
--- a/src/server/CMakeLists.txt
+++ b/src/server/CMakeLists.txt
@@ -113,7 +113,7 @@ cxx_test(bitops_family_test dfly_test_lib LABELS DFLY)
 cxx_test(rdb_test dfly_test_lib DATA testdata/empty.rdb testdata/redis6_small.rdb
          testdata/redis6_stream.rdb testdata/hll.rdb testdata/redis7_small.rdb
          testdata/redis_json.rdb testdata/RDB_TYPE_STREAM_LISTPACKS_2.rdb
-         testdata/RDB_TYPE_STREAM_LISTPACKS_3.rdb LABELS DFLY)
+         testdata/RDB_TYPE_STREAM_LISTPACKS_3.rdb testdata/ignore_expiry.rdb LABELS DFLY)
 cxx_test(zset_family_test dfly_test_lib LABELS DFLY)
 cxx_test(geo_family_test dfly_test_lib LABELS DFLY)
 cxx_test(blocking_controller_test dfly_test_lib LABELS DFLY)
diff --git a/src/server/rdb_load.cc b/src/server/rdb_load.cc
index 5782828f1df8..1b436ee2f56b 100644
--- a/src/server/rdb_load.cc
+++ b/src/server/rdb_load.cc
@@ -58,6 +58,7 @@ ABSL_DECLARE_FLAG(int32_t, list_compress_depth);
 ABSL_DECLARE_FLAG(uint32_t, dbnum);
 ABSL_DECLARE_FLAG(bool, list_experimental_v2);
 ABSL_FLAG(bool, rdb_load_dry_run, false, "Dry run RDB load without applying changes");
+ABSL_FLAG(bool, rdb_ignore_expiry, false, "Ignore Key Expiry when loding from RDB snapshot");
 
 namespace dfly {
 
@@ -1810,7 +1811,7 @@ auto RdbLoaderBase::ReadStreams(int rdbtype) -> io::Result<OpaqueObj> {
         }*/
       }
     }  // while (consumers_num)
-  }  // while (cgroup_num)
+  }    // while (cgroup_num)
 
   return OpaqueObj{std::move(load_trace), RDB_TYPE_STREAM_LISTPACKS};
 }
@@ -1935,6 +1936,7 @@ struct RdbLoader::ObjSettings {
 
 RdbLoader::RdbLoader(Service* service)
     : service_{service},
+      rdb_ignore_expiry_{GetFlag(FLAGS_rdb_ignore_expiry)},
       script_mgr_{service == nullptr ? nullptr : service->script_mgr()},
       shard_buf_{shard_set->size()} {
 }
@@ -2029,7 +2031,9 @@ error_code RdbLoader::Load(io::Source* src) {
       /* EXPIRETIME_MS: milliseconds precision expire times introduced
        * with RDB v3. Like EXPIRETIME but no with more precision. */
       SET_OR_RETURN(FetchInt<int64_t>(), val);
-      settings.SetExpire(val);
+      if (!rdb_ignore_expiry_) {
+        settings.SetExpire(val);
+      }
       continue; /* Read next opcode. */
     }
 
diff --git a/src/server/rdb_load.h b/src/server/rdb_load.h
index eea834514bf9..f6de09b44d07 100644
--- a/src/server/rdb_load.h
+++ b/src/server/rdb_load.h
@@ -322,6 +322,7 @@ class RdbLoader : protected RdbLoaderBase {
   Service* service_;
   bool override_existing_keys_ = false;
   bool load_unowned_slots_ = false;
+  bool rdb_ignore_expiry_;
   ScriptMgr* script_mgr_;
   std::vector<ItemsBuf> shard_buf_;
 
