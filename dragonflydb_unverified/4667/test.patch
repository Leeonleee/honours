diff --git a/src/server/rdb_test.cc b/src/server/rdb_test.cc
index c4feca4b9de4..747549c06777 100644
--- a/src/server/rdb_test.cc
+++ b/src/server/rdb_test.cc
@@ -33,6 +33,7 @@ using absl::StrCat;
 ABSL_DECLARE_FLAG(int32, list_compress_depth);
 ABSL_DECLARE_FLAG(int32, list_max_listpack_size);
 ABSL_DECLARE_FLAG(dfly::CompressionMode, compression_mode);
+ABSL_DECLARE_FLAG(bool, rdb_ignore_expiry);
 
 namespace dfly {
 
@@ -750,4 +751,30 @@ TEST_F(RdbTest, HugeKeyIssue4554) {
   EXPECT_EQ(Run({"flushall"}), "OK");
 }
 
+// ignore_expiry.rdb contains 2 keys which are expired keys
+// this test case verifies wheather rdb_ignore_expiry flag is working as expected.
+TEST_F(RdbTest, RDBIgnoreExpiryFlag) {
+  absl::FlagSaver fs;
+
+  SetTestFlag("rdb_ignore_expiry", "true");
+  auto ec = LoadRdb("ignore_expiry.rdb");
+
+  ASSERT_FALSE(ec) << ec.message();
+
+  auto resp = Run({"scan", "0"});
+
+  ASSERT_THAT(resp, ArrLen(2));
+
+  EXPECT_THAT(StrArray(resp.GetVec()[1]), UnorderedElementsAre("test", "test2"));
+
+  EXPECT_THAT(Run({"get", "test"}), "expkey");
+  EXPECT_THAT(Run({"get", "test2"}), "expkey");
+
+  int ttl = CheckedInt({"ttl", "test"});  // should ignore expiry for key
+  EXPECT_EQ(ttl, -1);
+
+  int ttl2 = CheckedInt({"ttl", "test2"});  // should ignore expiry for key
+  EXPECT_EQ(ttl2, -1);
+}
+
 }  // namespace dfly
diff --git a/src/server/testdata/ignore_expiry.rdb b/src/server/testdata/ignore_expiry.rdb
new file mode 100644
index 000000000000..b161204befa5
Binary files /dev/null and b/src/server/testdata/ignore_expiry.rdb differ
