diff --git a/src/core/string_map.cc b/src/core/string_map.cc
index 2842b01199a3..6f4471495e12 100644
--- a/src/core/string_map.cc
+++ b/src/core/string_map.cc
@@ -105,14 +105,34 @@ void StringMap::Clear() {
   ClearInternal();
 }
 
-std::pair<sds, sds> StringMap::RandomPair() {
-  auto it = begin();
-  it += rand() % Size();
-  return std::make_pair(it->first, it->second);
+void StringMap::CollectExpired() {
+  // Simply iterating over all items will remove expired
+  for (auto it = begin(); it != end(); ++it) {
+  }
+}
+
+optional<pair<sds, sds>> StringMap::RandomPair() {
+  // Iteration may remove elements, and so we need to loop if we happen to reach the end
+  while (true) {
+    auto it = begin();
+
+    // It may be that begin() will invalidate all elements, getting us to an Empty() state
+    if (Empty()) {
+      break;
+    }
+
+    it += rand() % Size();
+    if (it != end()) {
+      return std::make_pair(it->first, it->second);
+    }
+  }
+  return nullopt;
 }
 
 void StringMap::RandomPairsUnique(unsigned int count, std::vector<sds>& keys,
                                   std::vector<sds>& vals, bool with_value) {
+  CollectExpired();
+
   unsigned int total_size = Size();
   unsigned int index = 0;
   if (count > total_size)
@@ -142,6 +162,8 @@ void StringMap::RandomPairsUnique(unsigned int count, std::vector<sds>& keys,
 
 void StringMap::RandomPairs(unsigned int count, std::vector<sds>& keys, std::vector<sds>& vals,
                             bool with_value) {
+  CollectExpired();
+
   using RandomPick = std::pair<unsigned int, unsigned int>;
   std::vector<RandomPick> picks;
   unsigned int total_size = Size();
diff --git a/src/core/string_map.h b/src/core/string_map.h
index 7388f70998fe..7d184d773e96 100644
--- a/src/core/string_map.h
+++ b/src/core/string_map.h
@@ -4,6 +4,7 @@
 
 #pragma once
 
+#include <optional>
 #include <string_view>
 
 #include "core/dense_set.h"
@@ -74,9 +75,15 @@ class StringMap : public DenseSet {
       return *this;
     }
 
+    // Advances at most `n` steps, but stops at end.
     iterator& operator+=(unsigned int n) {
-      for (unsigned int i = 0; i < n; ++i)
+      for (unsigned int i = 0; i < n; ++i) {
+        if (curr_entry_ == nullptr) {
+          break;
+        }
+
         Advance();
+      }
       return *this;
     }
 
@@ -126,16 +133,18 @@ class StringMap : public DenseSet {
 
   // Returns a random key value pair.
   // Returns key only if value is a nullptr.
-  std::pair<sds, sds> RandomPair();
+  std::optional<std::pair<sds, sds>> RandomPair();
 
   // Randomly selects count of key value pairs. The selections are unique.
   // if count is larger than the total number of key value pairs, returns
   // every pair.
+  // Executes at O(n) (i.e. slow for large sets).
   void RandomPairsUnique(unsigned int count, std::vector<sds>& keys, std::vector<sds>& vals,
                          bool with_value);
 
   // Randomly selects count of key value pairs. The select key value pairs
   // are allowed to have duplications.
+  // Executes at O(n) (i.e. slow for large sets).
   void RandomPairs(unsigned int count, std::vector<sds>& keys, std::vector<sds>& vals,
                    bool with_value);
 
@@ -144,6 +153,8 @@ class StringMap : public DenseSet {
   // Returns new pointer (stays same if key utilization is enough) and if reallocation happened.
   std::pair<sds, bool> ReallocIfNeeded(void* obj, float ratio);
 
+  void CollectExpired();
+
   uint64_t Hash(const void* obj, uint32_t cookie) const final;
   bool ObjEqual(const void* left, const void* right, uint32_t right_cookie) const final;
   size_t ObjectAllocSize(const void* obj) const final;
diff --git a/src/server/hset_family.cc b/src/server/hset_family.cc
index ff22951deaed..ad589d8a64ab 100644
--- a/src/server/hset_family.cc
+++ b/src/server/hset_family.cc
@@ -1067,10 +1067,14 @@ void HSetFamily::HRandField(CmdArgList args, ConnectionContext* cntx) {
     StringVec str_vec;
 
     if (pv.Encoding() == kEncodingStrMap2) {
-      StringMap* string_map = (StringMap*)pv.RObjPtr();
+      StringMap* string_map = GetStringMap(pv, db_context);
+
       if (args.size() == 1) {
-        auto [key, value] = string_map->RandomPair();
-        str_vec.emplace_back(key, sdslen(key));
+        auto opt_pair = string_map->RandomPair();
+        if (opt_pair.has_value()) {
+          auto [key, value] = *opt_pair;
+          str_vec.emplace_back(key, sdslen(key));
+        }
       } else {
         size_t actual_count =
             (count >= 0) ? std::min(size_t(count), string_map->Size()) : abs(count);
@@ -1087,6 +1091,11 @@ void HSetFamily::HRandField(CmdArgList args, ConnectionContext* cntx) {
           }
         }
       }
+
+      if (string_map->Empty()) {
+        db_slice.Del(db_context.db_index, *it_res);
+        return facade::OpStatus::KEY_NOTFOUND;
+      }
     } else if (pv.Encoding() == kEncodingListPack) {
       uint8_t* lp = (uint8_t*)pv.RObjPtr();
       size_t lplen = lpLength(lp);
