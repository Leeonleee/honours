{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2113,
  "instance_id": "dragonflydb__dragonfly-2113",
  "issue_numbers": [
    "2108"
  ],
  "base_commit": "169c9d3975a259d38f31e15e38fee5f64b20a9ee",
  "patch": "diff --git a/src/core/string_map.cc b/src/core/string_map.cc\nindex 2842b01199a3..6f4471495e12 100644\n--- a/src/core/string_map.cc\n+++ b/src/core/string_map.cc\n@@ -105,14 +105,34 @@ void StringMap::Clear() {\n   ClearInternal();\n }\n \n-std::pair<sds, sds> StringMap::RandomPair() {\n-  auto it = begin();\n-  it += rand() % Size();\n-  return std::make_pair(it->first, it->second);\n+void StringMap::CollectExpired() {\n+  // Simply iterating over all items will remove expired\n+  for (auto it = begin(); it != end(); ++it) {\n+  }\n+}\n+\n+optional<pair<sds, sds>> StringMap::RandomPair() {\n+  // Iteration may remove elements, and so we need to loop if we happen to reach the end\n+  while (true) {\n+    auto it = begin();\n+\n+    // It may be that begin() will invalidate all elements, getting us to an Empty() state\n+    if (Empty()) {\n+      break;\n+    }\n+\n+    it += rand() % Size();\n+    if (it != end()) {\n+      return std::make_pair(it->first, it->second);\n+    }\n+  }\n+  return nullopt;\n }\n \n void StringMap::RandomPairsUnique(unsigned int count, std::vector<sds>& keys,\n                                   std::vector<sds>& vals, bool with_value) {\n+  CollectExpired();\n+\n   unsigned int total_size = Size();\n   unsigned int index = 0;\n   if (count > total_size)\n@@ -142,6 +162,8 @@ void StringMap::RandomPairsUnique(unsigned int count, std::vector<sds>& keys,\n \n void StringMap::RandomPairs(unsigned int count, std::vector<sds>& keys, std::vector<sds>& vals,\n                             bool with_value) {\n+  CollectExpired();\n+\n   using RandomPick = std::pair<unsigned int, unsigned int>;\n   std::vector<RandomPick> picks;\n   unsigned int total_size = Size();\ndiff --git a/src/core/string_map.h b/src/core/string_map.h\nindex 7388f70998fe..7d184d773e96 100644\n--- a/src/core/string_map.h\n+++ b/src/core/string_map.h\n@@ -4,6 +4,7 @@\n \n #pragma once\n \n+#include <optional>\n #include <string_view>\n \n #include \"core/dense_set.h\"\n@@ -74,9 +75,15 @@ class StringMap : public DenseSet {\n       return *this;\n     }\n \n+    // Advances at most `n` steps, but stops at end.\n     iterator& operator+=(unsigned int n) {\n-      for (unsigned int i = 0; i < n; ++i)\n+      for (unsigned int i = 0; i < n; ++i) {\n+        if (curr_entry_ == nullptr) {\n+          break;\n+        }\n+\n         Advance();\n+      }\n       return *this;\n     }\n \n@@ -126,16 +133,18 @@ class StringMap : public DenseSet {\n \n   // Returns a random key value pair.\n   // Returns key only if value is a nullptr.\n-  std::pair<sds, sds> RandomPair();\n+  std::optional<std::pair<sds, sds>> RandomPair();\n \n   // Randomly selects count of key value pairs. The selections are unique.\n   // if count is larger than the total number of key value pairs, returns\n   // every pair.\n+  // Executes at O(n) (i.e. slow for large sets).\n   void RandomPairsUnique(unsigned int count, std::vector<sds>& keys, std::vector<sds>& vals,\n                          bool with_value);\n \n   // Randomly selects count of key value pairs. The select key value pairs\n   // are allowed to have duplications.\n+  // Executes at O(n) (i.e. slow for large sets).\n   void RandomPairs(unsigned int count, std::vector<sds>& keys, std::vector<sds>& vals,\n                    bool with_value);\n \n@@ -144,6 +153,8 @@ class StringMap : public DenseSet {\n   // Returns new pointer (stays same if key utilization is enough) and if reallocation happened.\n   std::pair<sds, bool> ReallocIfNeeded(void* obj, float ratio);\n \n+  void CollectExpired();\n+\n   uint64_t Hash(const void* obj, uint32_t cookie) const final;\n   bool ObjEqual(const void* left, const void* right, uint32_t right_cookie) const final;\n   size_t ObjectAllocSize(const void* obj) const final;\ndiff --git a/src/server/hset_family.cc b/src/server/hset_family.cc\nindex ff22951deaed..ad589d8a64ab 100644\n--- a/src/server/hset_family.cc\n+++ b/src/server/hset_family.cc\n@@ -1067,10 +1067,14 @@ void HSetFamily::HRandField(CmdArgList args, ConnectionContext* cntx) {\n     StringVec str_vec;\n \n     if (pv.Encoding() == kEncodingStrMap2) {\n-      StringMap* string_map = (StringMap*)pv.RObjPtr();\n+      StringMap* string_map = GetStringMap(pv, db_context);\n+\n       if (args.size() == 1) {\n-        auto [key, value] = string_map->RandomPair();\n-        str_vec.emplace_back(key, sdslen(key));\n+        auto opt_pair = string_map->RandomPair();\n+        if (opt_pair.has_value()) {\n+          auto [key, value] = *opt_pair;\n+          str_vec.emplace_back(key, sdslen(key));\n+        }\n       } else {\n         size_t actual_count =\n             (count >= 0) ? std::min(size_t(count), string_map->Size()) : abs(count);\n@@ -1087,6 +1091,11 @@ void HSetFamily::HRandField(CmdArgList args, ConnectionContext* cntx) {\n           }\n         }\n       }\n+\n+      if (string_map->Empty()) {\n+        db_slice.Del(db_context.db_index, *it_res);\n+        return facade::OpStatus::KEY_NOTFOUND;\n+      }\n     } else if (pv.Encoding() == kEncodingListPack) {\n       uint8_t* lp = (uint8_t*)pv.RObjPtr();\n       size_t lplen = lpLength(lp);\n",
  "test_patch": "diff --git a/src/core/string_map_test.cc b/src/core/string_map_test.cc\nindex bf60ed1728c3..1fb7e0543147 100644\n--- a/src/core/string_map_test.cc\n+++ b/src/core/string_map_test.cc\n@@ -118,6 +118,15 @@ TEST_F(StringMapTest, Ttl) {\n   EXPECT_TRUE(it == sm_->end());\n }\n \n+TEST_F(StringMapTest, IterateExpired) {\n+  EXPECT_TRUE(sm_->AddOrUpdate(\"k1\", \"v1\", 1));\n+  EXPECT_TRUE(sm_->AddOrUpdate(\"k2\", \"v2\", 1));\n+  sm_->set_time(1);\n+  auto it = sm_->begin();\n+  it += 1;\n+  EXPECT_EQ(it, sm_->end());\n+}\n+\n unsigned total_wasted_memory = 0;\n \n TEST_F(StringMapTest, ReallocIfNeeded) {\ndiff --git a/src/server/hset_family_test.cc b/src/server/hset_family_test.cc\nindex ac50cf33e6d4..b49ec79931dd 100644\n--- a/src/server/hset_family_test.cc\n+++ b/src/server/hset_family_test.cc\n@@ -339,4 +339,22 @@ TEST_F(HSetFamilyTest, Issue2102) {\n   EXPECT_THAT(Run({\"HGETALL\", \"key\"}), RespArray(ElementsAre()));\n }\n \n+TEST_F(HSetFamilyTest, RandomFieldAllExpired) {\n+  for (int i = 0; i < 10; ++i) {\n+    EXPECT_EQ(CheckedInt({\"HSETEX\", \"key\", \"10\", absl::StrCat(\"k\", i), \"v\"}), 1);\n+  }\n+  AdvanceTime(10'000);\n+  EXPECT_THAT(Run({\"HRANDFIELD\", \"key\"}), ArgType(RespExpr::NIL));\n+}\n+\n+TEST_F(HSetFamilyTest, RandomField1NotExpired) {\n+  for (int i = 0; i < 10; ++i) {\n+    EXPECT_EQ(CheckedInt({\"HSETEX\", \"key\", \"10\", absl::StrCat(\"k\", i), \"v\"}), 1);\n+  }\n+  EXPECT_EQ(CheckedInt({\"HSET\", \"key\", \"keep\", \"v\"}), 1);\n+\n+  AdvanceTime(10'000);\n+  EXPECT_THAT(Run({\"HRANDFIELD\", \"key\"}), \"keep\");\n+}\n+\n }  // namespace dfly\n",
  "problem_statement": "`StringMap` could crash with `operator+=`\nThe reason is that, if some elements expired, we may call `Advance()` after we've reached the end.\r\nA repro test:\r\n\r\n```cpp\r\nTEST_F(StringMapTest, TtlLoop) {\r\n  EXPECT_TRUE(sm_->AddOrUpdate(\"k1\", \"v1\", 1));\r\n  EXPECT_TRUE(sm_->AddOrUpdate(\"k2\", \"v2\", 1));\r\n  sm_->set_time(1);\r\n  auto it = sm_->begin();\r\n  it += 1;\r\n}\r\n```\r\n\r\nThis affects all calls to `RandomPair()`, including `HRANDFIELD`\n",
  "hints_text": "",
  "created_at": "2023-11-02T12:19:10Z",
  "modified_files": [
    "src/core/string_map.cc",
    "src/core/string_map.h",
    "src/server/hset_family.cc"
  ],
  "modified_test_files": [
    "src/core/string_map_test.cc",
    "src/server/hset_family_test.cc"
  ]
}