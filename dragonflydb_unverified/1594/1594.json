{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1594,
  "instance_id": "dragonflydb__dragonfly-1594",
  "issue_numbers": [
    "1547"
  ],
  "base_commit": "82965279a2ec65062a34bf21e51aa88008d10686",
  "patch": "diff --git a/src/server/zset_family.cc b/src/server/zset_family.cc\nindex f7ce1faea781..c52606fc0ec0 100644\n--- a/src/server/zset_family.cc\n+++ b/src/server/zset_family.cc\n@@ -1628,6 +1628,20 @@ void ZAddGeneric(string_view key, const ZParams& zparams, ScoredMemberSpan memb_\n   }\n }\n \n+double ExtractUnit(std::string_view arg) {\n+  if (arg == \"M\") {\n+    return 1;\n+  } else if (arg == \"KM\") {\n+    return 1000;\n+  } else if (arg == \"FT\") {\n+    return 0.3048;\n+  } else if (arg == \"MI\") {\n+    return 1609.34;\n+  } else {\n+    return -1;\n+  }\n+}\n+\n }  // namespace\n \n void ZSetFamily::BZPopMin(CmdArgList args, ConnectionContext* cntx) {\n@@ -2495,6 +2509,43 @@ void ZSetFamily::GeoPos(CmdArgList args, ConnectionContext* cntx) {\n   }\n }\n \n+void ZSetFamily::GeoDist(CmdArgList args, ConnectionContext* cntx) {\n+  double distance_multiplier = 1;\n+  if (args.size() == 4) {\n+    ToUpper(&args[3]);\n+    string_view unit = ArgS(args, 3);\n+    distance_multiplier = ExtractUnit(unit);\n+    args.remove_suffix(1);\n+    if (distance_multiplier < 0) {\n+      return (*cntx)->SendError(\"unsupported unit provided. please use M, KM, FT, MI\");\n+    }\n+  } else if (args.size() != 3) {\n+    return (*cntx)->SendError(kSyntaxErr);\n+  }\n+\n+  OpResult<MScoreResponse> result = ZGetMembers(args, cntx);\n+\n+  if (result.status() != OpStatus::OK) {\n+    return (*cntx)->SendError(result.status());\n+  }\n+\n+  const MScoreResponse& arr = result.value();\n+\n+  if (arr.size() != 2) {\n+    return (*cntx)->SendError(kSyntaxErr);\n+  }\n+\n+  double xyxy[4];  // 2 pairs of score holding 2 locations\n+  for (size_t i = 0; i < arr.size(); i++) {\n+    if (!ScoreToLongLat(arr[i], xyxy + (i * 2))) {\n+      return (*cntx)->SendNull();\n+    }\n+  }\n+\n+  return (*cntx)->SendDouble(geohashGetDistance(xyxy[0], xyxy[1], xyxy[2], xyxy[3]) /\n+                             distance_multiplier);\n+}\n+\n #define HFUNC(x) SetHandler(&ZSetFamily::x)\n \n void ZSetFamily::Register(CommandRegistry* registry) {\n@@ -2538,7 +2589,8 @@ void ZSetFamily::Register(CommandRegistry* registry) {\n       // GEO functions\n       << CI{\"GEOADD\", CO::FAST | CO::WRITE | CO::DENYOOM, -5, 1, 1, 1}.HFUNC(GeoAdd)\n       << CI{\"GEOHASH\", CO::FAST | CO::READONLY, -2, 1, 1, 1}.HFUNC(GeoHash)\n-      << CI{\"GEOPOS\", CO::FAST | CO::READONLY, -2, 1, 1, 1}.HFUNC(GeoPos);\n+      << CI{\"GEOPOS\", CO::FAST | CO::READONLY, -2, 1, 1, 1}.HFUNC(GeoPos)\n+      << CI{\"GEODIST\", CO::READONLY, -4, 1, 1, 1}.HFUNC(GeoDist);\n }\n \n }  // namespace dfly\ndiff --git a/src/server/zset_family.h b/src/server/zset_family.h\nindex b01d4ad1a7a9..dc3632439ecb 100644\n--- a/src/server/zset_family.h\n+++ b/src/server/zset_family.h\n@@ -97,6 +97,7 @@ class ZSetFamily {\n   static void GeoAdd(CmdArgList args, ConnectionContext* cntx);\n   static void GeoHash(CmdArgList args, ConnectionContext* cntx);\n   static void GeoPos(CmdArgList args, ConnectionContext* cntx);\n+  static void GeoDist(CmdArgList args, ConnectionContext* cntx);\n };\n \n }  // namespace dfly\n",
  "test_patch": "diff --git a/src/server/zset_family_test.cc b/src/server/zset_family_test.cc\nindex 3072ea4b3476..9283e33283c6 100644\n--- a/src/server/zset_family_test.cc\n+++ b/src/server/zset_family_test.cc\n@@ -714,4 +714,23 @@ TEST_F(ZSetFamilyTest, GeoPosWrongType) {\n   EXPECT_THAT(Run({\"geopos\", \"x\", \"Sicily\", \"Palermo\"}), ErrArg(\"WRONGTYPE\"));\n }\n \n+TEST_F(ZSetFamilyTest, GeoDist) {\n+  EXPECT_EQ(2, CheckedInt({\"geoadd\", \"Sicily\", \"13.361389\", \"38.115556\", \"Palermo\", \"15.087269\",\n+                           \"37.502669\", \"Catania\"}));\n+  auto resp = Run({\"geodist\", \"Sicily\", \"Palermo\", \"Catania\"});\n+  EXPECT_EQ(resp, \"166274.15156960033\");\n+\n+  resp = Run({\"geodist\", \"Sicily\", \"Palermo\", \"Catania\", \"km\"});\n+  EXPECT_EQ(resp, \"166.27415156960032\");\n+\n+  resp = Run({\"geodist\", \"Sicily\", \"Palermo\", \"Catania\", \"MI\"});\n+  EXPECT_EQ(resp, \"103.31822459492733\");\n+\n+  resp = Run({\"geodist\", \"Sicily\", \"Palermo\", \"Catania\", \"FT\"});\n+  EXPECT_EQ(resp, \"545518.8699790037\");\n+\n+  resp = Run({\"geodist\", \"Sicily\", \"Foo\", \"Bar\"});\n+  EXPECT_THAT(resp, ArgType(RespExpr::NIL));\n+}\n+\n }  // namespace dfly\n",
  "problem_statement": "Add GEODIST support\nSee here: https://redis.io/commands/geodist/\n",
  "hints_text": "hey can i take this issue ?\r\n\nsure, feel free to work on it once #1543 is submitted.",
  "created_at": "2023-07-27T20:05:29Z",
  "modified_files": [
    "src/server/zset_family.cc",
    "src/server/zset_family.h"
  ],
  "modified_test_files": [
    "src/server/zset_family_test.cc"
  ]
}