{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2080,
  "instance_id": "dragonflydb__dragonfly-2080",
  "issue_numbers": [
    "2034"
  ],
  "base_commit": "b655fc7415f93db8e8b2830a851f4f0e260295e3",
  "patch": "diff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex 8d40a877923e..5f2c25570fc9 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -1658,16 +1658,17 @@ void Service::EvalInternal(CmdArgList args, const EvalArgs& eval_args, Interpret\n     });\n \n     ++ServerState::tlocal()->stats.eval_shardlocal_coordination_cnt;\n-    boost::intrusive_ptr<Transaction> stub_tx = new Transaction{tx, *sid};\n-    cntx->transaction = stub_tx.get();\n-\n     tx->PrepareMultiForScheduleSingleHop(*sid, tx->GetDbIndex(), args);\n     tx->ScheduleSingleHop([&](Transaction*, EngineShard*) {\n+      boost::intrusive_ptr<Transaction> stub_tx = new Transaction{tx, *sid};\n+      cntx->transaction = stub_tx.get();\n+\n       result = interpreter->RunFunction(eval_args.sha, &error);\n+\n+      cntx->transaction = tx;\n       return OpStatus::OK;\n     });\n \n-    cntx->transaction = tx;\n     if (*sid != ServerState::tlocal()->thread_index()) {\n       VLOG(1) << \"Migrating connection \" << cntx->conn() << \" from \" << ProactorBase::GetIndex()\n               << \" to \" << *sid;\n",
  "test_patch": "diff --git a/src/server/multi_test.cc b/src/server/multi_test.cc\nindex b0335c6b4ca0..405d033534d1 100644\n--- a/src/server/multi_test.cc\n+++ b/src/server/multi_test.cc\n@@ -876,6 +876,19 @@ TEST_F(MultiTest, TestLockedKeys) {\n   EXPECT_FALSE(service_->IsLocked(0, \"key2\"));\n }\n \n+TEST_F(MultiTest, EvalExpiration) {\n+  // Make sure expiration is correctly set even from Lua scripts\n+  if (auto config = absl::GetFlag(FLAGS_default_lua_flags); config != \"\") {\n+    GTEST_SKIP() << \"Skipped Eval test because default_lua_flags is set\";\n+    return;\n+  }\n+\n+  absl::FlagSaver fs;\n+  absl::SetFlag(&FLAGS_multi_exec_mode, Transaction::LOCK_AHEAD);\n+  Run({\"eval\", \"redis.call('set', 'x', 0, 'ex', 5, 'nx')\", \"1\", \"x\"});\n+  EXPECT_LE(CheckedInt({\"pttl\", \"x\"}), 5000);\n+}\n+\n class MultiEvalTest : public BaseFamilyTest {\n  protected:\n   MultiEvalTest() : BaseFamilyTest() {\n",
  "problem_statement": "rate-limiter-flexible don't work since 1.11\nProbably because of this: https://github.com/animir/node-rate-limiter-flexible/blob/846b5a28987f28e0e13b5ec7965def4aa39a22ab/lib/RateLimiterRedis.js#L4\r\n\r\nwhen I log the .consume response it gives me big msBeforeNext\r\n\r\n```\r\nRateLimiterRes {\r\n  _remainingPoints: 4991,\r\n  _msBeforeNext: 281476674260404640,\r\n  _consumedPoints: 9,\r\n  _isFirstInDuration: false\r\n}\r\n```\r\n\r\ndragonfly regression or was working before but an issue in the rate-limiter package ?\n",
  "hints_text": "@yovanoc is it possible to get a minimal reproducible example?\nI can't right now but will try to do that later \nSmall friendly ping/reminder @yovanoc  :) \nSorry for the delay.\r\n\r\nhttps://github.com/yovanoc/df-repro\nInteresting!\r\nIt seems like, for some reason, expiration setting via Lua doesn't work as intended. I'm looking into this.",
  "created_at": "2023-10-26T20:44:20Z",
  "modified_files": [
    "src/server/main_service.cc"
  ],
  "modified_test_files": [
    "src/server/multi_test.cc"
  ]
}