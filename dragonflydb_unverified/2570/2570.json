{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 2570,
  "instance_id": "dragonflydb__dragonfly-2570",
  "issue_numbers": [
    "2569"
  ],
  "base_commit": "e66e670a6ee92ef4406eb60d0a492b42ca83b98b",
  "patch": "diff --git a/helio b/helio\nindex d1d06c486f2a..432ffbae89d9 160000\n--- a/helio\n+++ b/helio\n@@ -1,1 +1,1 @@\n-Subproject commit d1d06c486f2a6f79e1eb6249c921cc6ecf06d30e\n+Subproject commit 432ffbae89d909f3fbbc25fdeb77689c3f09ea75\ndiff --git a/src/facade/dragonfly_connection.cc b/src/facade/dragonfly_connection.cc\nindex 1817c52517a7..ce80188a0927 100644\n--- a/src/facade/dragonfly_connection.cc\n+++ b/src/facade/dragonfly_connection.cc\n@@ -502,20 +502,15 @@ void Connection::OnShutdown() {\n }\n \n void Connection::OnPreMigrateThread() {\n-  // If we migrating to another io_uring we should cancel any pending requests we have.\n-  if (break_cb_engaged_) {\n-    socket_->CancelOnErrorCb();\n-    break_cb_engaged_ = false;\n-  }\n+  CHECK(!cc_->conn_closing);\n+\n+  socket_->CancelOnErrorCb();\n }\n \n void Connection::OnPostMigrateThread() {\n   // Once we migrated, we should rearm OnBreakCb callback.\n   if (breaker_cb_) {\n-    DCHECK(!break_cb_engaged_);\n-\n     socket_->RegisterOnErrorCb([this](int32_t mask) { this->OnBreakCb(mask); });\n-    break_cb_engaged_ = true;\n   }\n \n   // Update tl variables\n@@ -594,14 +589,11 @@ void Connection::HandleRequests() {\n       cc_.reset(service_->CreateContext(peer, this));\n       if (breaker_cb_) {\n         socket_->RegisterOnErrorCb([this](int32_t mask) { this->OnBreakCb(mask); });\n-        break_cb_engaged_ = true;\n       }\n \n       ConnectionFlow(peer);\n \n-      if (break_cb_engaged_) {\n-        socket_->CancelOnErrorCb();\n-      }\n+      socket_->CancelOnErrorCb();  // noop if nothing is registered.\n \n       cc_.reset();\n     }\n@@ -975,14 +967,13 @@ void Connection::OnBreakCb(int32_t mask) {\n           << cc_->reply_builder()->IsSendActive() << \" \" << cc_->reply_builder()->GetError();\n \n   cc_->conn_closing = true;\n-  break_cb_engaged_ = false;  // do not attempt to cancel it.\n \n   breaker_cb_(mask);\n   evc_.notify();  // Notify dispatch fiber.\n }\n \n void Connection::HandleMigrateRequest() {\n-  if (!migration_request_) {\n+  if (cc_->conn_closing || !migration_request_) {\n     return;\n   }\n \n@@ -996,6 +987,7 @@ void Connection::HandleMigrateRequest() {\n   // We don't support migrating with subscriptions as it would require moving thread local\n   // handles. We can't check above, as the queue might have contained a subscribe request.\n   if (cc_->subscriptions == 0) {\n+    stats_->num_migrations++;\n     migration_request_ = nullptr;\n \n     DecreaseStatsOnClose();\ndiff --git a/src/facade/dragonfly_connection.h b/src/facade/dragonfly_connection.h\nindex 3122b5cc7079..e730a91a7a18 100644\n--- a/src/facade/dragonfly_connection.h\n+++ b/src/facade/dragonfly_connection.h\n@@ -401,7 +401,6 @@ class Connection : public util::Connection {\n   std::string name_;\n \n   unsigned parser_error_ = 0;\n-  bool break_cb_engaged_ = false;\n \n   BreakerCb breaker_cb_;\n   std::unique_ptr<Shutdown> shutdown_cb_;\ndiff --git a/src/facade/facade.cc b/src/facade/facade.cc\nindex 758179c32413..c86fd50b1607 100644\n--- a/src/facade/facade.cc\n+++ b/src/facade/facade.cc\n@@ -20,7 +20,7 @@ constexpr size_t kSizeConnStats = sizeof(ConnectionStats);\n \n ConnectionStats& ConnectionStats::operator+=(const ConnectionStats& o) {\n   // To break this code deliberately if we add/remove a field to this struct.\n-  static_assert(kSizeConnStats == 104u);\n+  static_assert(kSizeConnStats == 112u);\n \n   ADD(read_buf_capacity);\n   ADD(dispatch_queue_entries);\n@@ -36,6 +36,7 @@ ConnectionStats& ConnectionStats::operator+=(const ConnectionStats& o) {\n   ADD(num_conns);\n   ADD(num_replicas);\n   ADD(num_blocked_clients);\n+  ADD(num_migrations);\n \n   return *this;\n }\ndiff --git a/src/facade/facade_types.h b/src/facade/facade_types.h\nindex 4846609d99ef..2cc876c3c451 100644\n--- a/src/facade/facade_types.h\n+++ b/src/facade/facade_types.h\n@@ -61,7 +61,7 @@ struct ConnectionStats {\n   uint32_t num_conns = 0;\n   uint32_t num_replicas = 0;\n   uint32_t num_blocked_clients = 0;\n-\n+  uint64_t num_migrations = 0;\n   ConnectionStats& operator+=(const ConnectionStats& o);\n };\n \ndiff --git a/src/server/db_slice.cc b/src/server/db_slice.cc\nindex 5109574b4c7c..4dcb56019c27 100644\n--- a/src/server/db_slice.cc\n+++ b/src/server/db_slice.cc\n@@ -1441,6 +1441,9 @@ void DbSlice::TrackKeys(const facade::Connection::WeakRef& conn, const ArgSlice&\n }\n \n void DbSlice::SendInvalidationTrackingMessage(std::string_view key) {\n+  if (client_tracking_map_.empty())\n+    return;\n+\n   auto it = client_tracking_map_.find(key);\n   if (it != client_tracking_map_.end()) {\n     // notify all the clients.\ndiff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex b3343bf117d9..1857a1fadd3c 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -1859,6 +1859,7 @@ void ServerFamily::Info(CmdArgList args, ConnectionContext* cntx) {\n     append(\"total_pipelined_commands\", conn_stats.pipelined_cmd_cnt);\n     append(\"pipelined_latency_usec\", conn_stats.pipelined_cmd_latency);\n     append(\"total_net_input_bytes\", conn_stats.io_read_bytes);\n+    append(\"connection_migrations\", conn_stats.num_migrations);\n     append(\"total_net_output_bytes\", reply_stats.io_write_bytes);\n     append(\"instantaneous_input_kbps\", -1);\n     append(\"instantaneous_output_kbps\", -1);\n",
  "test_patch": "diff --git a/tests/dragonfly/eval_test.py b/tests/dragonfly/eval_test.py\nindex 34a69e3a4f42..8e0b4463f760 100644\n--- a/tests/dragonfly/eval_test.py\n+++ b/tests/dragonfly/eval_test.py\n@@ -3,11 +3,15 @@\n from redis import asyncio as aioredis\n import time\n import json\n+import logging\n import pytest\n import random\n import itertools\n import random\n import string\n+\n+from .instance import DflyInstance\n+\n from . import dfly_args, dfly_multi_test_args\n \n DJANGO_CACHEOPS_SCRIPT = \"\"\"\n@@ -310,3 +314,28 @@ async def measure_blocked():\n     # At least some connection was seen blocked\n     # Flaky: release build is too fast and never blocks\n     # assert max_blocked > 0\n+\n+\n+\"\"\"\n+Tests migrate/close interaction for the connection\n+Reproduces #2569\n+\"\"\"\n+\n+\n+@dfly_args({\"proactor_threads\": \"4\", \"pipeline_squash\": 0})\n+async def test_migrate_close_connection(async_client: aioredis.Redis, df_server: DflyInstance):\n+    sha = await async_client.script_load(\"return redis.call('GET', KEYS[1])\")\n+\n+    async def run():\n+        reader, writer = await asyncio.open_connection(\"localhost\", df_server.port)\n+\n+        # write a EVALSHA that will ask for migration (75% it's on the wrong shard)\n+        writer.write((f\"EVALSHA {sha} 1 a\\r\\n\").encode())\n+        await writer.drain()\n+\n+        # disconnect the client connection\n+        writer.close()\n+        await writer.wait_closed()\n+\n+    tasks = [asyncio.create_task(run()) for _ in range(50)]\n+    await asyncio.gather(*tasks)\ndiff --git a/tests/dragonfly/instance.py b/tests/dragonfly/instance.py\nindex eef422042065..66c0d36cc622 100644\n--- a/tests/dragonfly/instance.py\n+++ b/tests/dragonfly/instance.py\n@@ -5,7 +5,6 @@\n import logging\n from dataclasses import dataclass\n from typing import Dict, Optional, List, Union\n-import os\n import re\n import psutil\n import itertools\n@@ -163,22 +162,13 @@ def stop(self, kill=False):\n         if proc is None:\n             return\n \n-        # if we have log files, it means that we started a process.\n-        # if it died before we could stop it, we should raise an exception\n-        if self.log_files:\n-            exitcode = proc.poll()\n-            if exitcode is not None:\n-                if exitcode != 0:\n-                    raise Exception(f\"Process exited with code {exitcode}\")\n-                return\n-\n         logging.debug(f\"Stopping instance on {self._port}\")\n         try:\n             if kill:\n                 proc.kill()\n             else:\n                 proc.terminate()\n-            proc.communicate(timeout=30)\n+            proc.communicate(timeout=15)\n         except subprocess.TimeoutExpired:\n             # We need to send SIGUSR1 to DF such that it prints the stacktrace\n             proc.send_signal(signal.SIGUSR1)\n@@ -203,11 +193,9 @@ def _start(self):\n             self._port = None\n \n         all_args = self.format_args(self.args)\n-        arg_str = \" \".join(all_args)\n-        bin_path = os.path.realpath(self.params.path)\n-        logging.debug(f\"Starting {bin_path} with arguments: {arg_str}\")\n+        logging.debug(f\"Starting instance with arguments {all_args} from {self.params.path}\")\n \n-        run_cmd = [bin_path, *all_args]\n+        run_cmd = [self.params.path, *all_args]\n         if self.params.gdb:\n             run_cmd = [\"gdb\", \"--ex\", \"r\", \"--args\"] + run_cmd\n \n",
  "problem_statement": "crash during connection migration\n```\r\nF20240211 10:58:17.426013 1814968 uring_socket.cc:373] Check failed: !error_cb_wrapper_ \r\n*** Check failure stack trace: ***\r\n    @     0x55cd16b6ada7  google::LogMessage::SendToLog()\r\n    @     0x55cd16b632e3  google::LogMessage::Flush()\r\n    @     0x55cd16b64c7f  google::LogMessageFatal::~LogMessageFatal()\r\n    @     0x55cd168c6587  util::fb2::UringSocket::RegisterOnErrorCb()\r\n    @     0x55cd16481608  facade::Connection::OnPostMigrateThread()\r\n    @     0x55cd16894b75  util::ListenerInterface::Migrate()\r\n    @     0x55cd1647e1cb  facade::Connection::HandleMigrateRequest()\r\n    @     0x55cd16481b04  facade::Connection::IoLoop()\r\n    @     0x55cd16481eac  facade::Connection::ConnectionFlow()\r\n    @     0x55cd16482e0d  facade::Connection::HandleRequests()\r\n    @     0x55cd16894233  util::ListenerInterface::RunSingleConnection()\r\n\r\n```\r\n\r\nto reproduce, run dragonfly in build-opt: `./dragonfly --logtostderr --proactor_threads=2`\r\nthen  load the lua script with `redis-cli --eval ./fill.lua k2 , 100`\r\n```lua\r\nlocal function randomString(length)\r\n\tlocal chars = {}\r\n\tfor i = 1, length do\r\n\t\tchars[i] = string.char(math.random(33, 126))\r\n\tend\r\n\treturn table.concat(chars)\r\nend\r\n\r\nlocal upper = tonumber(ARGV[1])\r\n\r\nfor i = 1, upper do\r\n    redis.call('zadd', KEYS[1], i, randomString(10))\r\nend\r\n```\r\n\r\nand then run memtier: `memtier_benchmark  --command \"evalsha f3be7dc8bd0e838ee3920321ce6999e9ae888e0f 1 __key__ 10000\" --hide-histogram -n 1000 --distinct-client-seed --threads=2 -c 2 --key-maximum=1000000`\r\n\n",
  "hints_text": "",
  "created_at": "2024-02-11T09:52:47Z",
  "modified_files": [
    "helio",
    "src/facade/dragonfly_connection.cc",
    "src/facade/dragonfly_connection.h",
    "src/facade/facade.cc",
    "src/facade/facade_types.h",
    "src/server/db_slice.cc",
    "src/server/server_family.cc"
  ],
  "modified_test_files": [
    "tests/dragonfly/eval_test.py",
    "tests/dragonfly/instance.py"
  ]
}