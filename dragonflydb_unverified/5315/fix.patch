diff --git a/src/server/db_slice.cc b/src/server/db_slice.cc
index fd5d8a4e40a3..b7b9c5b3227e 100644
--- a/src/server/db_slice.cc
+++ b/src/server/db_slice.cc
@@ -451,8 +451,14 @@ DbSlice::AutoUpdater::~AutoUpdater() {
   Run();
 }
 
+void DbSlice::AutoUpdater::ReduceHeapUsage() {
+  AccountObjectMemory(fields_.key, fields_.it->second.ObjType(), -fields_.orig_heap_size,
+                      fields_.db_slice->GetDBTable(fields_.db_ind));
+  fields_.orig_heap_size = 0;  // Reset to avoid double accounting.
+}
+
 void DbSlice::AutoUpdater::Run() {
-  if (fields_.action == DestructorAction::kDoNothing) {
+  if (fields_.db_slice == nullptr) {
     return;
   }
 
@@ -461,7 +467,6 @@ void DbSlice::AutoUpdater::Run() {
   // updater in scope. You'll probably want to call Run() (or Cancel() - but be careful).
   DCHECK(IsValid(fields_.db_slice->db_arr_[fields_.db_ind]->prime.Find(fields_.key)));
 
-  DCHECK(fields_.action == DestructorAction::kRun);
   CHECK_NE(fields_.db_slice, nullptr);
 
   ssize_t delta = static_cast<int64_t>(fields_.it->second.MallocUsed()) -
@@ -478,8 +483,7 @@ void DbSlice::AutoUpdater::Cancel() {
 
 DbSlice::AutoUpdater::AutoUpdater(DbIndex db_ind, std::string_view key, const Iterator& it,
                                   DbSlice* db_slice)
-    : fields_{.action = DestructorAction::kRun,
-              .db_slice = db_slice,
+    : fields_{.db_slice = db_slice,
               .db_ind = db_ind,
               .it = it,
               .key = key,
diff --git a/src/server/db_slice.h b/src/server/db_slice.h
index d94ebf9c22dd..62b55fc998b1 100644
--- a/src/server/db_slice.h
+++ b/src/server/db_slice.h
@@ -156,19 +156,16 @@ class DbSlice {
     AutoUpdater& operator=(AutoUpdater&& o);
     ~AutoUpdater();
 
+    // Removes the memory usage attributed to the iterator and resets orig_heap_size.
+    // Used when the existing object is overridden by a new one.
+    void ReduceHeapUsage();
+
     void Run();
     void Cancel();
 
    private:
-    enum class DestructorAction : uint8_t {
-      kDoNothing,
-      kRun,
-    };
-
     // Wrap members in a struct to auto generate operator=
     struct Fields {
-      DestructorAction action = DestructorAction::kDoNothing;
-
       DbSlice* db_slice = nullptr;
       DbIndex db_ind = 0;
 
diff --git a/src/server/generic_family.cc b/src/server/generic_family.cc
index 54001845d0cf..ff533770af8f 100644
--- a/src/server/generic_family.cc
+++ b/src/server/generic_family.cc
@@ -894,6 +894,7 @@ OpResult<void> OpRen(const OpArgs& op_args, string_view from_key, string_view to
 
   bool sticky = from_res.it->first.IsSticky();
   uint64_t exp_ts = db_slice.ExpireTime(from_res.exp_it);
+  from_res.post_updater.ReduceHeapUsage();
 
   // we keep the value we want to move.
   PrimeValue from_obj = std::move(from_res.it->second);
@@ -902,6 +903,7 @@ OpResult<void> OpRen(const OpArgs& op_args, string_view from_key, string_view to
   from_res.it->second.SetExpire(IsValid(from_res.exp_it));
 
   if (IsValid(to_res.it)) {
+    to_res.post_updater.ReduceHeapUsage();
     to_res.it->second = std::move(from_obj);
     to_res.it->second.SetExpire(IsValid(to_res.exp_it));  // keep the expire flag on 'to'.
 
diff --git a/src/server/string_family.cc b/src/server/string_family.cc
index 9254bae3e5c1..5fb5524534f1 100644
--- a/src/server/string_family.cc
+++ b/src/server/string_family.cc
@@ -112,10 +112,10 @@ class SetCmd {
   OpStatus Set(const SetParams& params, std::string_view key, std::string_view value);
 
  private:
-  OpStatus SetExisting(const SetParams& params, DbSlice::Iterator it, DbSlice::ExpIterator e_it,
-                       std::string_view key, std::string_view value);
+  OpStatus SetExisting(const SetParams& params, std::string_view value,
+                       DbSlice::ItAndUpdater* it_upd);
 
-  void AddNew(const SetParams& params, DbSlice::Iterator it, std::string_view key,
+  void AddNew(const SetParams& params, const DbSlice::Iterator& it, std::string_view key,
               std::string_view value);
 
   // Called at the end of AddNew of SetExisting
@@ -832,7 +832,7 @@ OpStatus SetCmd::Set(const SetParams& params, string_view key, string_view value
 
     if (params.flags & SET_IF_EXISTS) {
       if (IsValid(find_res.it)) {
-        return SetExisting(params, find_res.it, find_res.exp_it, key, value);
+        return SetExisting(params, value, &find_res);
       } else {
         return OpStatus::SKIPPED;
       }
@@ -851,18 +851,19 @@ OpStatus SetCmd::Set(const SetParams& params, string_view key, string_view value
     if (auto status = CachePrevIfNeeded(params, op_res->it); status != OpStatus::OK)
       return status;
 
-    return SetExisting(params, op_res->it, op_res->exp_it, key, value);
+    return SetExisting(params, value, &(*op_res));
   } else {
     AddNew(params, op_res->it, key, value);
     return OpStatus::OK;
   }
 }
 
-OpStatus SetCmd::SetExisting(const SetParams& params, DbSlice::Iterator it,
-                             DbSlice::ExpIterator e_it, string_view key, string_view value) {
+OpStatus SetCmd::SetExisting(const SetParams& params, string_view value,
+                             DbSlice::ItAndUpdater* it_upd) {
   DCHECK_EQ(params.flags & SET_IF_NOTEXIST, 0);
 
-  PrimeValue& prime_value = it->second;
+  PrimeKey& key = it_upd->it->first;
+  PrimeValue& prime_value = it_upd->it->second;
   EngineShard* shard = op_args_.shard;
 
   auto& db_slice = op_args_.GetDbSlice();
@@ -871,30 +872,32 @@ OpStatus SetCmd::SetExisting(const SetParams& params, DbSlice::Iterator it,
 
   if (!(params.flags & SET_KEEP_EXPIRE)) {
     if (at_ms) {  // Command has an expiry paramater.
-      if (IsValid(e_it)) {
+      if (IsValid(it_upd->exp_it)) {
         // Updated existing expiry information.
-        e_it->second = db_slice.FromAbsoluteTime(at_ms);
+        it_upd->exp_it->second = db_slice.FromAbsoluteTime(at_ms);
       } else {
         // Add new expiry information.
-        db_slice.AddExpire(op_args_.db_cntx.db_index, it, at_ms);
+        db_slice.AddExpire(op_args_.db_cntx.db_index, it_upd->it, at_ms);
       }
     } else {
-      db_slice.RemoveExpire(op_args_.db_cntx.db_index, it);
+      db_slice.RemoveExpire(op_args_.db_cntx.db_index, it_upd->it);
     }
   }
 
   if (params.flags & SET_STICK) {
-    it->first.SetSticky(true);
+    key.SetSticky(true);
   }
 
   bool has_expire = prime_value.HasExpire();
 
+  it_upd->post_updater.ReduceHeapUsage();
+
   // Update flags
   prime_value.SetFlag(params.memcache_flags != 0);
-  db_slice.SetMCFlag(op_args_.db_cntx.db_index, it->first.AsRef(), params.memcache_flags);
+  db_slice.SetMCFlag(op_args_.db_cntx.db_index, key.AsRef(), params.memcache_flags);
 
   // We need to remove the key from search indices, because we are overwriting it to OBJ_STRING
-  shard->search_indices()->RemoveDoc(key, op_args_.db_cntx, prime_value);
+  shard->search_indices()->RemoveDoc(it_upd->it.key(), op_args_.db_cntx, prime_value);
 
   // If value is external, mark it as deleted
   if (prime_value.IsExternal()) {
@@ -906,11 +909,11 @@ OpStatus SetCmd::SetExisting(const SetParams& params, DbSlice::Iterator it,
 
   DCHECK_EQ(has_expire, prime_value.HasExpire());
 
-  PostEdit(params, key, value, &prime_value);
+  PostEdit(params, it_upd->it.key(), value, &prime_value);
   return OpStatus::OK;
 }
 
-void SetCmd::AddNew(const SetParams& params, DbSlice::Iterator it, std::string_view key,
+void SetCmd::AddNew(const SetParams& params, const DbSlice::Iterator& it, std::string_view key,
                     std::string_view value) {
   auto& db_slice = op_args_.GetDbSlice();
 
