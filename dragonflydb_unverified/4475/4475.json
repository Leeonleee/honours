{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4475,
  "instance_id": "dragonflydb__dragonfly-4475",
  "issue_numbers": [
    "4449"
  ],
  "base_commit": "6265f52bff15d168b0058d1f4eb7a7ef2efcbaea",
  "patch": "diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml\nindex 5fb1a3f4fc41..9eace81651a4 100644\n--- a/.github/workflows/ci.yml\n+++ b/.github/workflows/ci.yml\n@@ -48,7 +48,6 @@ jobs:\n           - container: \"alpine-dev:latest\"\n             build-type: Debug\n             compiler: { cxx: clang++, c: clang }\n-            cxx_flags: \"\"\n \n     runs-on: ubuntu-latest\n     env:\ndiff --git a/helio b/helio\nindex 90bc3cc6aabb..05c316e171e3 160000\n--- a/helio\n+++ b/helio\n@@ -1,1 +1,1 @@\n-Subproject commit 90bc3cc6aabbffc8b274dc0f7801695d68658529\n+Subproject commit 05c316e171e31a6f23165b426b7caf0174f90838\ndiff --git a/src/core/dash_internal.h b/src/core/dash_internal.h\nindex 25981140d245..cbca68d06b3b 100644\n--- a/src/core/dash_internal.h\n+++ b/src/core/dash_internal.h\n@@ -20,10 +20,10 @@ namespace detail {\n \n template <unsigned NUM_SLOTS> class SlotBitmap {\n   static_assert(NUM_SLOTS > 0 && NUM_SLOTS <= 28);\n-  static constexpr unsigned kLen = NUM_SLOTS > 14 ? 2 : 1;\n+  static constexpr bool SINGLE = NUM_SLOTS <= 14;\n+  static constexpr unsigned kLen = SINGLE ? 1 : 2;\n   static constexpr unsigned kAllocMask = (1u << NUM_SLOTS) - 1;\n   static constexpr unsigned kBitmapLenMask = (1 << 4) - 1;\n-  static constexpr bool SINGLE = NUM_SLOTS <= 14;\n \n  public:\n   // probe - true means the entry is probing, i.e. not owning.\n@@ -32,7 +32,8 @@ template <unsigned NUM_SLOTS> class SlotBitmap {\n   uint32_t GetProbe(bool probe) const {\n     if constexpr (SINGLE)\n       return ((val_[0].d >> 4) & kAllocMask) ^ ((!probe) * kAllocMask);\n-    return (val_[1].d & kAllocMask) ^ ((!probe) * kAllocMask);\n+    else\n+      return (val_[1].d & kAllocMask) ^ ((!probe) * kAllocMask);\n   }\n \n   // GetBusy returns the busy mask.\ndiff --git a/src/core/json/jsonpath_grammar.y b/src/core/json/jsonpath_grammar.y\nindex 82a302b9846c..2a0db50ff61d 100644\n--- a/src/core/json/jsonpath_grammar.y\n+++ b/src/core/json/jsonpath_grammar.y\n@@ -26,10 +26,6 @@\n #include \"src/core/json/lexer_impl.h\"\n #include \"src/core/json/driver.h\"\n \n-// Have to disable because GCC doesn't understand `symbol_type`'s union\n-// implementation\n-#pragma GCC diagnostic ignored \"-Wmaybe-uninitialized\"\n-\n #define yylex driver->lexer()->Lex\n \n using namespace std;\ndiff --git a/src/core/search/parser.y b/src/core/search/parser.y\nindex d01a8a796f70..dcc62a0a0e05 100644\n--- a/src/core/search/parser.y\n+++ b/src/core/search/parser.y\n@@ -27,10 +27,6 @@\n #include \"core/search/query_driver.h\"\n #include \"core/search/vector_utils.h\"\n \n-// Have to disable because GCC doesn't understand `symbol_type`'s union\n-// implementation\n-#pragma GCC diagnostic ignored \"-Wmaybe-uninitialized\"\n-\n #define yylex driver->scanner()->Lex\n \n using namespace std;\n@@ -196,12 +192,12 @@ dfly::search::Parser::error(const location_type& l, const string& m)\n \n std::uint32_t toUint32(string_view str) {\n   uint32_t val = 0;\n-  absl::SimpleAtoi(str, &val); // no need to check the result because str is parsed by regex\n+  std::ignore = absl::SimpleAtoi(str, &val); // no need to check the result because str is parsed by regex\n   return val;\n }\n \n double toDouble(string_view str) {\n   double val = 0;\n-  absl::SimpleAtod(str, &val); // no need to check the result because str is parsed by regex\n+  std::ignore = absl::SimpleAtod(str, &val); // no need to check the result because str is parsed by regex\n   return val;\n }\ndiff --git a/src/core/search/vector_utils.cc b/src/core/search/vector_utils.cc\nindex 1df311dd8195..6cf435ed5d3d 100644\n--- a/src/core/search/vector_utils.cc\n+++ b/src/core/search/vector_utils.cc\n@@ -15,9 +15,14 @@ using namespace std;\n \n namespace {\n \n+#if defined(__GNUC__) && !defined(__clang__)\n+#define FAST_MATH __attribute__((optimize(\"fast-math\")))\n+#else\n+#define FAST_MATH\n+#endif\n+\n // Euclidean vector distance: sqrt( sum: (u[i] - v[i])^2  )\n-__attribute__((optimize(\"fast-math\"))) float L2Distance(const float* u, const float* v,\n-                                                        size_t dims) {\n+FAST_MATH float L2Distance(const float* u, const float* v, size_t dims) {\n   float sum = 0;\n   for (size_t i = 0; i < dims; i++)\n     sum += (u[i] - v[i]) * (u[i] - v[i]);\n@@ -25,8 +30,7 @@ __attribute__((optimize(\"fast-math\"))) float L2Distance(const float* u, const fl\n }\n \n // TODO: Normalize vectors ahead if cosine distance is used\n-__attribute__((optimize(\"fast-math\"))) float CosineDistance(const float* u, const float* v,\n-                                                            size_t dims) {\n+FAST_MATH float CosineDistance(const float* u, const float* v, size_t dims) {\n   float sum_uv = 0, sum_uu = 0, sum_vv = 0;\n   for (size_t i = 0; i < dims; i++) {\n     sum_uv += u[i] * v[i];\ndiff --git a/src/core/task_queue.cc b/src/core/task_queue.cc\nindex 39fe7c236bf2..e4d3700ff691 100644\n--- a/src/core/task_queue.cc\n+++ b/src/core/task_queue.cc\n@@ -14,7 +14,7 @@ namespace dfly {\n __thread unsigned TaskQueue::blocked_submitters_ = 0;\n \n TaskQueue::TaskQueue(unsigned queue_size, unsigned start_size, unsigned pool_max_size)\n-    : queue_(queue_size), consumer_fibers_(start_size), pool_max_size_(pool_max_size) {\n+    : queue_(queue_size), consumer_fibers_(start_size) {\n   CHECK_GT(start_size, 0u);\n   CHECK_LE(start_size, pool_max_size);\n }\ndiff --git a/src/core/task_queue.h b/src/core/task_queue.h\nindex 4004731d4319..9a74531c18d7 100644\n--- a/src/core/task_queue.h\n+++ b/src/core/task_queue.h\n@@ -66,7 +66,6 @@ class TaskQueue {\n  private:\n   util::fb2::FiberQueue queue_;\n   std::vector<util::fb2::Fiber> consumer_fibers_;\n-  unsigned pool_max_size_;\n \n   static __thread unsigned blocked_submitters_;\n };\ndiff --git a/src/server/acl/validator.cc b/src/server/acl/validator.cc\nindex 20bc1b994782..b7e7627b3d45 100644\n--- a/src/server/acl/validator.cc\n+++ b/src/server/acl/validator.cc\n@@ -43,12 +43,6 @@ namespace dfly::acl {\n   return is_authed;\n }\n \n-// GCC yields a wrong warning about uninitialized optional use\n-#ifdef __GNUC__\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wmaybe-uninitialized\"\n-#endif\n-\n static bool ValidateCommand(const std::vector<uint64_t>& acl_commands, const CommandId& id) {\n   const size_t index = id.GetFamily();\n   const uint64_t command_mask = id.GetBitIndex();\n@@ -130,6 +124,4 @@ static bool ValidateCommand(const std::vector<uint64_t>& acl_commands, const Com\n   return {allowed, AclLog::Reason::PUB_SUB};\n }\n \n-#pragma GCC diagnostic pop\n-\n }  // namespace dfly::acl\ndiff --git a/src/server/bitops_family.cc b/src/server/bitops_family.cc\nindex 1be55cfb03ba..509c53b1eebc 100644\n--- a/src/server/bitops_family.cc\n+++ b/src/server/bitops_family.cc\n@@ -581,7 +581,7 @@ void BitCount(CmdArgList args, const CommandContext& cmd_cntx) {\n   if (!parser.Finalize()) {\n     return builder->SendError(parser.Error()->MakeReply());\n   }\n-  auto cb = [&](Transaction* t, EngineShard* shard) {\n+  auto cb = [&, &start = start, &end = end](Transaction* t, EngineShard* shard) {\n     return CountBitsForValue(t->GetOpArgs(shard), key, start, end, as_bit);\n   };\n   OpResult<std::size_t> res = cmd_cntx.tx->ScheduleSingleHopT(std::move(cb));\n@@ -1225,7 +1225,7 @@ void SetBit(CmdArgList args, const CommandContext& cmd_cntx) {\n     return cmd_cntx.rb->SendError(err->MakeReply());\n   }\n \n-  auto cb = [&](Transaction* t, EngineShard* shard) {\n+  auto cb = [&, &key = key, &offset = offset, &value = value](Transaction* t, EngineShard* shard) {\n     return BitNewValue(t->GetOpArgs(shard), key, offset, value != 0);\n   };\n \ndiff --git a/src/server/detail/snapshot_storage.cc b/src/server/detail/snapshot_storage.cc\nindex 93e534f8c1d1..87faeb966390 100644\n--- a/src/server/detail/snapshot_storage.cc\n+++ b/src/server/detail/snapshot_storage.cc\n@@ -334,7 +334,8 @@ io::Result<vector<string>, GenericError> GcsSnapshotStorage::ExpandFromPath(\n \n   // Find snapshot shard files if we're loading DFS.\n   fb2::ProactorBase* proactor = shard_set->pool()->GetNextProactor();\n-  auto paths = proactor->Await([&]() -> io::Result<vector<string>, GenericError> {\n+  auto paths = proactor->Await([&, &bucket_name =\n+                                       bucket_name]() -> io::Result<vector<string>, GenericError> {\n     vector<string> res;\n     cloud::GCS gcs(&creds_provider_, ctx_, proactor);\n \n@@ -458,7 +459,8 @@ io::Result<vector<string>, GenericError> AwsS3SnapshotStorage::ExpandFromPath(\n   const size_t pos = obj_path.find_last_of('/');\n   const std::string prefix = (pos == std::string_view::npos) ? \"\" : obj_path.substr(0, pos);\n \n-  auto paths = proactor->Await([&]() -> io::Result<vector<string>, GenericError> {\n+  auto paths = proactor->Await([&, &bucket_name =\n+                                       bucket_name]() -> io::Result<vector<string>, GenericError> {\n     const io::Result<std::vector<SnapStat>, GenericError> keys = ListObjects(bucket_name, prefix);\n     if (!keys) {\n       return nonstd::make_unexpected(keys.error());\ndiff --git a/src/server/dfly_bench.cc b/src/server/dfly_bench.cc\nindex 8d2093a1cc79..08f69d7cc18c 100644\n--- a/src/server/dfly_bench.cc\n+++ b/src/server/dfly_bench.cc\n@@ -188,8 +188,8 @@ class Driver {\n   }\n \n   Driver(const Driver&) = delete;\n-  Driver(Driver&&) = default;\n-  Driver& operator=(Driver&&) = default;\n+  Driver(Driver&&) = delete;\n+  Driver& operator=(Driver&&) = delete;\n \n   void Connect(unsigned index, const tcp::endpoint& ep);\n   void Run(uint64_t* cycle_ns, CommandGenerator* cmd_gen);\n@@ -412,7 +412,7 @@ void Driver::Run(uint64_t* cycle_ns, CommandGenerator* cmd_gen) {\n     ThisFiber::SleepFor(1ms);\n   }\n \n-  socket_->Shutdown(SHUT_RDWR);  // breaks the receive fiber.\n+  std::ignore = socket_->Shutdown(SHUT_RDWR);  // breaks the receive fiber.\n   receive_fb_.Join();\n   std::ignore = socket_->Close();\n   stats_.num_clients--;\ndiff --git a/src/server/dflycmd.cc b/src/server/dflycmd.cc\nindex 547fefb3ed3f..7415bd03a01e 100644\n--- a/src/server/dflycmd.cc\n+++ b/src/server/dflycmd.cc\n@@ -102,7 +102,7 @@ bool WaitReplicaFlowToCatchup(absl::Time end_time, const DflyCmd::ReplicaInfo* r\n }  // namespace\n \n void DflyCmd::ReplicaInfo::Cancel() {\n-  auto lk = GetExclusiveLock();\n+  util::fb2::LockGuard lk{shared_mu};\n   if (replica_state == SyncState::CANCELLED) {\n     return;\n   }\n@@ -258,7 +258,7 @@ void DflyCmd::Flow(CmdArgList args, RedisReplyBuilder* rb, ConnectionContext* cn\n \n   string eof_token;\n   {\n-    auto lk = replica_ptr->GetExclusiveLock();\n+    util::fb2::LockGuard lk{replica_ptr->shared_mu};\n \n     if (replica_ptr->replica_state != SyncState::PREPARATION)\n       return rb->SendError(kInvalidState);\n@@ -321,7 +321,7 @@ void DflyCmd::Sync(CmdArgList args, Transaction* tx, RedisReplyBuilder* rb) {\n   if (!sync_id)\n     return;\n \n-  auto lk = replica_ptr->GetExclusiveLock();\n+  util::fb2::LockGuard lk{replica_ptr->shared_mu};\n   if (!CheckReplicaStateOrReply(*replica_ptr, SyncState::PREPARATION, rb))\n     return;\n \n@@ -359,7 +359,7 @@ void DflyCmd::StartStable(CmdArgList args, Transaction* tx, RedisReplyBuilder* r\n   if (!sync_id)\n     return;\n \n-  auto lk = replica_ptr->GetExclusiveLock();\n+  util::fb2::LockGuard lk{replica_ptr->shared_mu};\n   if (!CheckReplicaStateOrReply(*replica_ptr, SyncState::FULL_SYNC, rb))\n     return;\n \n@@ -415,7 +415,7 @@ void DflyCmd::TakeOver(CmdArgList args, RedisReplyBuilder* rb, ConnectionContext\n     return;\n \n   {\n-    auto lk = replica_ptr->GetSharedLock();\n+    dfly::SharedLock lk{replica_ptr->shared_mu};\n     if (!CheckReplicaStateOrReply(*replica_ptr, SyncState::STABLE_SYNC, rb))\n       return;\n \n@@ -464,7 +464,7 @@ void DflyCmd::TakeOver(CmdArgList args, RedisReplyBuilder* rb, ConnectionContext\n \n   atomic_bool catchup_success = true;\n   if (*status == OpStatus::OK) {\n-    auto lk = replica_ptr->GetSharedLock();\n+    dfly::SharedLock lk{replica_ptr->shared_mu};\n     auto cb = [replica_ptr = std::move(replica_ptr), end_time,\n                &catchup_success](EngineShard* shard) {\n       if (!WaitReplicaFlowToCatchup(end_time, replica_ptr.get(), shard)) {\n@@ -702,7 +702,7 @@ void DflyCmd::BreakStalledFlowsInShard() {\n   vector<uint32_t> deleted;\n \n   for (auto [sync_id, replica_ptr] : replica_infos_) {\n-    auto replica_lock = replica_ptr->GetSharedLock();\n+    dfly::SharedLock replica_lock{replica_ptr->shared_mu};\n \n     if (!replica_ptr->flows[sid].saver)\n       continue;\n@@ -771,7 +771,7 @@ void DflyCmd::GetReplicationMemoryStats(ReplicationMemoryStats* stats) const {\n     util::fb2::LockGuard lk{mu_};  // prevent state changes\n     auto cb = [&](EngineShard* shard) ABSL_NO_THREAD_SAFETY_ANALYSIS {\n       for (const auto& [_, info] : replica_infos_) {\n-        auto repl_lk = info->GetSharedLock();\n+        dfly::SharedLock repl_lk{info->shared_mu};\n \n         // flows should not be empty.\n         DCHECK(!info->flows.empty());\ndiff --git a/src/server/dflycmd.h b/src/server/dflycmd.h\nindex 328f2b13cbc1..4a8129e7df3c 100644\n--- a/src/server/dflycmd.h\n+++ b/src/server/dflycmd.h\n@@ -111,14 +111,6 @@ class DflyCmd {\n           flows{flow_count} {\n     }\n \n-    [[nodiscard]] auto GetExclusiveLock() ABSL_EXCLUSIVE_LOCK_FUNCTION() {\n-      return util::fb2::LockGuard{shared_mu};\n-    }\n-\n-    [[nodiscard]] auto GetSharedLock() ABSL_EXCLUSIVE_LOCK_FUNCTION() {\n-      return dfly::SharedLock{shared_mu};\n-    }\n-\n     // Transition into cancelled state, run cleanup.\n     void Cancel();\n \ndiff --git a/src/server/json_family.cc b/src/server/json_family.cc\nindex c11c549ae68b..00d5b492c67e 100644\n--- a/src/server/json_family.cc\n+++ b/src/server/json_family.cc\n@@ -955,8 +955,8 @@ OpResult<long> OpDel(const OpArgs& op_args, string_view key, string_view path,\n \n   if (json_path.HoldsJsonPath()) {\n     const json::Path& path = json_path.AsJsonPath();\n-    long deletions =\n-        json::MutatePath(path, [](optional<string_view>, JsonType* val) { return true; }, json_val);\n+    long deletions = json::MutatePath(\n+        path, [](optional<string_view>, JsonType* val) { return true; }, json_val);\n     return deletions;\n   }\n \n@@ -1487,7 +1487,8 @@ void JsonFamily::Set(CmdArgList args, const CommandContext& cmd_cntx) {\n   if (parser.Error() || parser.HasNext())  // also clear the parser error dcheck\n     return builder->SendError(kSyntaxErr);\n \n-  auto cb = [&](Transaction* t, EngineShard* shard) {\n+  auto cb = [&, &key = key, &path = path, &json_str = json_str](Transaction* t,\n+                                                                EngineShard* shard) {\n     return OpSet(t->GetOpArgs(shard), key, path, json_path, json_str, is_nx_condition,\n                  is_xx_condition);\n   };\ndiff --git a/src/server/list_family.cc b/src/server/list_family.cc\nindex ab16b0e63e75..ea800eff1b6a 100644\n--- a/src/server/list_family.cc\n+++ b/src/server/list_family.cc\n@@ -1248,7 +1248,7 @@ void ListFamily::LPos(CmdArgList args, const CommandContext& cmd_cntx) {\n   if (auto err = parser.Error(); err)\n     return rb->SendError(err->MakeReply());\n \n-  auto cb = [&](Transaction* t, EngineShard* shard) {\n+  auto cb = [&, &key = key, &elem = elem](Transaction* t, EngineShard* shard) {\n     return OpPos(t->GetOpArgs(shard), key, elem, rank, count, max_len);\n   };\n \n@@ -1314,7 +1314,7 @@ void ListFamily::LInsert(CmdArgList args, const CommandContext& cmd_cntx) {\n \n   DCHECK(pivot.data() && elem.data());\n \n-  auto cb = [&](Transaction* t, EngineShard* shard) {\n+  auto cb = [&, &pivot = pivot, &elem = elem](Transaction* t, EngineShard* shard) {\n     return OpInsert(t->GetOpArgs(shard), key, pivot, elem, where);\n   };\n \ndiff --git a/src/server/stream_family.cc b/src/server/stream_family.cc\nindex 293093e0ec65..e284f3f484c7 100644\n--- a/src/server/stream_family.cc\n+++ b/src/server/stream_family.cc\n@@ -1807,7 +1807,7 @@ void DestroyGroup(facade::CmdArgParser* parser, Transaction* tx, SinkReplyBuilde\n   if (parser->HasNext())\n     return builder->SendError(UnknownSubCmd(\"DESTROY\", \"XGROUP\"));\n \n-  auto cb = [&](Transaction* t, EngineShard* shard) {\n+  auto cb = [&, &key = key, &gname = gname](Transaction* t, EngineShard* shard) {\n     return OpDestroyGroup(t->GetOpArgs(shard), key, gname);\n   };\n \n@@ -1833,7 +1833,8 @@ void CreateConsumer(facade::CmdArgParser* parser, Transaction* tx, SinkReplyBuil\n   if (parser->HasNext())\n     return builder->SendError(UnknownSubCmd(\"CREATECONSUMER\", \"XGROUP\"));\n \n-  auto cb = [&](Transaction* t, EngineShard* shard) {\n+  auto cb = [&, &key = key, &gname = gname, &consumer = consumer](Transaction* t,\n+                                                                  EngineShard* shard) {\n     return OpCreateConsumer(t->GetOpArgs(shard), key, gname, consumer);\n   };\n   OpResult<uint32_t> result = tx->ScheduleSingleHopT(cb);\n@@ -1861,7 +1862,8 @@ void DelConsumer(facade::CmdArgParser* parser, Transaction* tx, SinkReplyBuilder\n   if (parser->HasNext())\n     return builder->SendError(UnknownSubCmd(\"DELCONSUMER\", \"XGROUP\"));\n \n-  auto cb = [&](Transaction* t, EngineShard* shard) {\n+  auto cb = [&, &key = key, &gname = gname, &consumer = consumer](Transaction* t,\n+                                                                  EngineShard* shard) {\n     return OpDelConsumer(t->GetOpArgs(shard), key, gname, consumer);\n   };\n \n@@ -1894,7 +1896,7 @@ void SetId(facade::CmdArgParser* parser, Transaction* tx, SinkReplyBuilder* buil\n   if (auto err = parser->Error(); err)\n     return builder->SendError(err->MakeReply());\n \n-  auto cb = [&](Transaction* t, EngineShard* shard) {\n+  auto cb = [&, &key = key, &gname = gname, &id = id](Transaction* t, EngineShard* shard) {\n     return OpSetId(t->GetOpArgs(shard), key, gname, id);\n   };\n \ndiff --git a/src/server/string_family.cc b/src/server/string_family.cc\nindex ac4679d5f321..706126ad517b 100644\n--- a/src/server/string_family.cc\n+++ b/src/server/string_family.cc\n@@ -1453,7 +1453,7 @@ void StringFamily::GetRange(CmdArgList args, const CommandContext& cmnd_cntx) {\n     return cmnd_cntx.rb->SendError(err->MakeReply());\n   }\n \n-  auto cb = [&](Transaction* t, EngineShard* shard) {\n+  auto cb = [&, &key = key, &start = start, &end = end](Transaction* t, EngineShard* shard) {\n     return OpGetRange(t->GetOpArgs(shard), key, start, end);\n   };\n \n@@ -1477,7 +1477,7 @@ void StringFamily::SetRange(CmdArgList args, const CommandContext& cmnd_cntx) {\n     return builder->SendError(\"string exceeds maximum allowed size\");\n   }\n \n-  auto cb = [&](Transaction* t, EngineShard* shard) {\n+  auto cb = [&, &key = key, &start = start, &value = value](Transaction* t, EngineShard* shard) {\n     return OpSetRange(t->GetOpArgs(shard), key, start, value);\n   };\n   auto res = cmnd_cntx.tx->ScheduleSingleHopT(cb);\n",
  "test_patch": "diff --git a/src/core/json/jsonpath_test.cc b/src/core/json/jsonpath_test.cc\nindex 61e7fa5687be..268e161d29b1 100644\n--- a/src/core/json/jsonpath_test.cc\n+++ b/src/core/json/jsonpath_test.cc\n@@ -465,7 +465,7 @@ TYPED_TEST(JsonPathTest, Mutate) {\n   Path path = this->driver_.TakePath();\n \n   TypeParam json = ValidJson<TypeParam>(R\"([1, 2, 3, 5, 6])\");\n-  MutateCallback cb = [&](optional<string_view>, JsonType* val) {\n+  auto cb = [](optional<string_view>, JsonType* val) {\n     int intval = val->as<int>();\n     *val = intval + 1;\n     return false;\n@@ -496,7 +496,7 @@ TYPED_TEST(JsonPathTest, Mutate) {\n   ASSERT_EQ(0, this->Parse(\"$..a.*\"));\n   path = this->driver_.TakePath();\n \n-  MutateCallback cb2 = [&](optional<string_view> key, JsonType* val) {\n+  auto cb2 = [](optional<string_view> key, JsonType* val) {\n     if (val->is_int64() && !key) {  // array element\n       *val = 42;\n       return false;\ndiff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc\nindex 18230fe62e13..ebbba6df4242 100644\n--- a/src/server/dragonfly_test.cc\n+++ b/src/server/dragonfly_test.cc\n@@ -774,7 +774,7 @@ TEST_F(DflyEngineTest, MemoryUsage) {\n   }\n \n   for (unsigned i = 0; i < 1000; ++i) {\n-    Run({\"rpush\", \"l2\", StrCat(string('a', 200), i)});\n+    Run({\"rpush\", \"l2\", StrCat(string(200, 'a'), i)});\n   }\n   auto resp = Run({\"memory\", \"usage\", \"l1\"});\n   EXPECT_GT(*resp.GetInt(), 8000);\ndiff --git a/src/server/search/search_family_test.cc b/src/server/search/search_family_test.cc\nindex 05244a3a3971..9b845c9d17b4 100644\n--- a/src/server/search/search_family_test.cc\n+++ b/src/server/search/search_family_test.cc\n@@ -93,9 +93,7 @@ template <typename... Args> auto IsUnordArray(Args... args) {\n template <typename Expected, size_t... Is>\n void BuildKvMatchers(std::vector<Matcher<std::pair<std::string, RespExpr>>>& kv_matchers,\n                      const Expected& expected, std::index_sequence<Is...>) {\n-  std::initializer_list<int>{\n-      (kv_matchers.emplace_back(Pair(std::get<Is * 2>(expected), std::get<Is * 2 + 1>(expected))),\n-       0)...};\n+  (kv_matchers.emplace_back(Pair(std::get<Is * 2>(expected), std::get<Is * 2 + 1>(expected))), ...);\n }\n \n MATCHER_P(IsMapMatcher, expected, \"\") {\n",
  "problem_statement": "Eliminate clang warnings\n`$title`\n",
  "hints_text": ":man_dancing: ",
  "created_at": "2025-01-19T06:43:17Z",
  "modified_files": [
    ".github/workflows/ci.yml",
    "helio",
    "src/core/dash_internal.h",
    "src/core/json/jsonpath_grammar.y",
    "src/core/search/parser.y",
    "src/core/search/vector_utils.cc",
    "src/core/task_queue.cc",
    "src/core/task_queue.h",
    "src/server/acl/validator.cc",
    "src/server/bitops_family.cc",
    "src/server/detail/snapshot_storage.cc",
    "src/server/dfly_bench.cc",
    "src/server/dflycmd.cc",
    "src/server/dflycmd.h",
    "src/server/json_family.cc",
    "src/server/list_family.cc",
    "src/server/stream_family.cc",
    "src/server/string_family.cc"
  ],
  "modified_test_files": [
    "src/core/json/jsonpath_test.cc",
    "src/server/dragonfly_test.cc",
    "src/server/search/search_family_test.cc"
  ]
}