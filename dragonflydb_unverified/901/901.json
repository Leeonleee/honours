{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 901,
  "instance_id": "dragonflydb__dragonfly-901",
  "issue_numbers": [
    "888"
  ],
  "base_commit": "c9e9311c8efe1db4af9f7c1845fa17f0c5c23bb7",
  "patch": "diff --git a/src/core/interpreter.cc b/src/core/interpreter.cc\nindex 81cf4159185b..4eae482c4719 100644\n--- a/src/core/interpreter.cc\n+++ b/src/core/interpreter.cc\n@@ -11,6 +11,8 @@\n #include <cstring>\n #include <optional>\n \n+#include \"core/interpreter_polyfill.h\"\n+\n extern \"C\" {\n #include <lauxlib.h>\n #include <lua.h>\n@@ -272,12 +274,8 @@ debug = nil\n   lua_pushnil(lua);\n   lua_setglobal(lua, \"dofile\");\n \n-  // unpack was a global function until Lua 5.2, but was moved into the table module.\n-  // Register it globally to maintain compatibility.\n-  lua_getglobal(lua, \"table\");\n-  lua_getfield(lua, -1, \"unpack\");\n-  lua_remove(lua, -2);\n-  lua_setglobal(lua, \"unpack\");\n+  // Register deprecated or removed functions to maintain compatibility with 5.1\n+  register_polyfills(lua);\n }\n \n // dest must have at least 41 chars.\ndiff --git a/src/core/interpreter_polyfill.h b/src/core/interpreter_polyfill.h\nnew file mode 100644\nindex 000000000000..c38a1535a6c1\n--- /dev/null\n+++ b/src/core/interpreter_polyfill.h\n@@ -0,0 +1,91 @@\n+// Copyright 2022, DragonflyDB authors.  All rights reserved.\n+// See LICENSE for licensing terms.\n+//\n+// This header contains implementations of deprecated, removed or renamed lua functions.\n+\n+#pragma once\n+\n+extern \"C\" {\n+#include <lauxlib.h>\n+#include <lua.h>\n+#include <lualib.h>\n+\n+// TODO: Fix checktab\n+#define aux_getn(L, n, w) (luaL_len(L, n))\n+\n+LUA_API void lua_len(lua_State* L, int idx);\n+\n+static int polyfill_table_getn(lua_State* L) {\n+  lua_len(L, 1);\n+  return 1;\n+}\n+\n+static int polyfill_table_setn(lua_State* L) {\n+  // From Lua 5.1, ltablib.c\n+  luaL_checktype(L, 1, LUA_TTABLE);\n+  luaL_error(L, \"setn is obsolete\");\n+  lua_pushvalue(L, 1);\n+  return 1;\n+}\n+\n+static int polyfill_table_foreach(lua_State* L) {\n+  // From Lua 5.1, ltablib.c\n+  luaL_checktype(L, 1, LUA_TTABLE);\n+  luaL_checktype(L, 2, LUA_TFUNCTION);\n+  lua_pushnil(L); /* first key */\n+  while (lua_next(L, 1)) {\n+    lua_pushvalue(L, 2);  /* function */\n+    lua_pushvalue(L, -3); /* key */\n+    lua_pushvalue(L, -3); /* value */\n+    lua_call(L, 2, 1);\n+    if (!lua_isnil(L, -1))\n+      return 1;\n+    lua_pop(L, 2); /* remove value and result */\n+  }\n+  return 0;\n+}\n+\n+static int polyfill_table_foreachi(lua_State* L) {\n+  luaL_checktype(L, 1, LUA_TTABLE);  // Check type here because aux_getn is stripped\n+  // From Lua 5.1, ltablib.c\n+  int i;\n+  int n = aux_getn(L, 1, 0b11);\n+  luaL_checktype(L, 2, LUA_TFUNCTION);\n+  for (i = 1; i <= n; i++) {\n+    lua_pushvalue(L, 2);   /* function */\n+    lua_pushinteger(L, i); /* 1st argument */\n+    lua_rawgeti(L, 1, i);  /* 2nd argument */\n+    lua_call(L, 2, 1);\n+    if (!lua_isnil(L, -1))\n+      return 1;\n+    lua_pop(L, 1); /* remove nil result */\n+  }\n+  return 0;\n+}\n+\n+static void register_polyfills(lua_State* lua) {\n+  lua_getglobal(lua, \"table\");\n+\n+  // unpack was a global function until Lua 5.2\n+  lua_getfield(lua, -1, \"unpack\");\n+  lua_setglobal(lua, \"unpack\");\n+\n+  // table.getn - removed, length operator # should be used instead\n+  lua_pushcfunction(lua, polyfill_table_getn);\n+  lua_setfield(lua, -2, \"getn\");\n+\n+  // table.setn - removed, freely resizing a table is no longer possible\n+  lua_pushcfunction(lua, polyfill_table_setn);\n+  lua_setfield(lua, -2, \"setn\");\n+\n+  // table.getn - removed, instead the length operator # should be used\n+  lua_pushcfunction(lua, polyfill_table_foreach);\n+  lua_setfield(lua, -2, \"foreach\");\n+\n+  // table.forachi - removed, use for loops should be used instead\n+  lua_pushcfunction(lua, polyfill_table_foreachi);\n+  lua_setfield(lua, -2, \"foreachi\");\n+\n+  lua_remove(lua, -1);\n+}\n+}\n",
  "test_patch": "diff --git a/src/core/interpreter_test.cc b/src/core/interpreter_test.cc\nindex 17aa2a7127f7..4e7f503bc6d8 100644\n--- a/src/core/interpreter_test.cc\n+++ b/src/core/interpreter_test.cc\n@@ -10,6 +10,7 @@ extern \"C\" {\n }\n \n #include <absl/strings/str_cat.h>\n+#include <absl/strings/str_replace.h>\n #include <gmock/gmock.h>\n \n #include \"base/gtest.h\"\n@@ -321,13 +322,35 @@ TEST_F(InterpreterTest, Modules) {\n   EXPECT_EQ(\"str(\\x1\\x2test)\", ser_.res);\n }\n \n-// Since Lua 5.2 global functions were moved to separate namespaces.\n-// We need to register them globally to maintain 5.1 compatibility.\n-TEST_F(InterpreterTest, OutdatedGlobals) {\n-  // table.unpack is used in Laravel:\n-  // https://github.com/laravel/framework/blob/6a5c2ec92200cc485983f26b284f7e78470b885f/src/Illuminate/Queue/LuaScripts.php#L118\n+// Check compatibility with Lua 5.1\n+TEST_F(InterpreterTest, Compatibility) {\n+  // unpack is no longer global\n   EXPECT_TRUE(Execute(\"return unpack{1,2,3}\"));\n   EXPECT_EQ(\"i(1)\", ser_.res);\n+\n+  string_view test_foreach_template =\n+      \"local t = {1,'two',3;four='yes'}; local out = {};\"\n+      \"table.{TESTF} (t, function(k, v) table.insert(out, {k, v}) end); \"\n+      \"return out; \";\n+\n+  // table.foreach was removed\n+  string test_foreach = absl::StrReplaceAll(test_foreach_template, {{\"{TESTF}\", \"foreach\"}});\n+  EXPECT_TRUE(Execute(test_foreach));\n+  EXPECT_EQ(\"[[i(1) i(1)] [i(2) str(two)] [i(3) i(3)] [str(four) str(yes)]]\", ser_.res);\n+\n+  // table.foreachi was removed\n+  string test_foreachi = absl::StrReplaceAll(test_foreach_template, {{\"{TESTF}\", \"foreachi\"}});\n+  EXPECT_TRUE(Execute(test_foreachi));\n+  EXPECT_EQ(\"[[i(1) i(1)] [i(2) str(two)] [i(3) i(3)]]\", ser_.res);\n+\n+  EXPECT_FALSE(Execute(\"table.foreachi('not-a-table', print);\"));  // check invalid args\n+\n+  // table.getn was replaced with length operator\n+  EXPECT_TRUE(Execute(\"return table.getn{1, 2, 3};\"));\n+  EXPECT_EQ(\"i(3)\", ser_.res);\n+\n+  // table.setn was removed, resizing is no longer needed, it thows an error\n+  EXPECT_FALSE(Execute(\"local t = {}; local a = 1; table.setn(t, 100); return a+123;\"));\n }\n \n }  // namespace dfly\n",
  "problem_statement": "table.getn is missing\n**Describe the bug**\r\nDragonfly `table` module misses `table.getn` function present in Redis\r\n\r\n**To Reproduce**\r\nRun the following: `redis-cli  eval \"return table.getn{10,2,4}\" 0` returns 3 with redis and an error in DF.\r\n\r\nNote that DF misses the following methods from the \"table\" module: `setn`, `getn`, `foreach`, `foreachi`.\r\nbecause lua deprecated them. it's not clear we need to support all of them\r\n\r\n\r\n\n",
  "hints_text": "",
  "created_at": "2023-03-02T18:28:56Z",
  "modified_files": [
    "src/core/interpreter.cc",
    "b/src/core/interpreter_polyfill.h"
  ],
  "modified_test_files": [
    "src/core/interpreter_test.cc"
  ]
}