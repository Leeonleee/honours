{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1284,
  "instance_id": "dragonflydb__dragonfly-1284",
  "issue_numbers": [
    "1276"
  ],
  "base_commit": "f746dc4f9f7455542d7b86bf519bc74f8a6af515",
  "patch": "diff --git a/src/server/cluster/cluster_family.cc b/src/server/cluster/cluster_family.cc\nindex efd3410a6356..785895db6cfa 100644\n--- a/src/server/cluster/cluster_family.cc\n+++ b/src/server/cluster/cluster_family.cc\n@@ -65,6 +65,42 @@ bool ClusterFamily::IsEnabledOrEmulated() const {\n   return is_emulated_cluster_ || ClusterConfig::IsClusterEnabled();\n }\n \n+// TODO: Extend this method to accommodate the needs of `CLUSTER NODES` and `CLUSTER SLOTS`.\n+// TODO: Also make this function safe in that it will read the state atomically.\n+ClusterConfig::ClusterShard ClusterFamily::GetEmulatedShardInfo(ConnectionContext* cntx) const {\n+  ClusterConfig::ClusterShard info{\n+      .slot_ranges = {{.start = 0, .end = ClusterConfig::kMaxSlotNum}},\n+      .master = {},\n+      .replicas = {},\n+  };\n+\n+  ServerState& etl = *ServerState::tlocal();\n+  if (etl.is_master) {\n+    std::string cluster_announce_ip = absl::GetFlag(FLAGS_cluster_announce_ip);\n+    std::string preferred_endpoint =\n+        cluster_announce_ip.empty() ? cntx->owner()->LocalBindAddress() : cluster_announce_ip;\n+\n+    info.master = {.id = server_family_->master_id(),\n+                   .ip = preferred_endpoint,\n+                   .port = static_cast<uint16_t>(absl::GetFlag(FLAGS_port))};\n+\n+    for (const auto& replica : server_family_->GetDflyCmd()->GetReplicasRoleInfo()) {\n+      info.replicas.push_back({.id = etl.remote_client_id_,\n+                               .ip = replica.address,\n+                               .port = static_cast<uint16_t>(replica.listening_port)});\n+    }\n+  } else {\n+    Replica::Info replication_info = server_family_->GetReplicaInfo();\n+    info.master = {\n+        .id = etl.remote_client_id_, .ip = replication_info.host, .port = replication_info.port};\n+    info.replicas.push_back({.id = server_family_->master_id(),\n+                             .ip = cntx->owner()->LocalBindAddress(),\n+                             .port = static_cast<uint16_t>(absl::GetFlag(FLAGS_port))});\n+  }\n+\n+  return info;\n+}\n+\n string ClusterFamily::BuildClusterNodeReply(ConnectionContext* cntx) const {\n   ServerState& etl = *ServerState::tlocal();\n   auto epoch_master_time = std::time(nullptr) * 1000;\n@@ -117,6 +153,62 @@ void ClusterFamily::ClusterHelp(ConnectionContext* cntx) {\n   return (*cntx)->SendSimpleStrArr(help_arr);\n }\n \n+namespace {\n+void ClusterShardsImpl(const ClusterConfig::ClusterShards& config, ConnectionContext* cntx) {\n+  // For more details https://redis.io/commands/cluster-shards/\n+  constexpr unsigned int kEntrySize = 4;\n+\n+  auto WriteNode = [&](const ClusterConfig::Node& node, string_view role) {\n+    constexpr unsigned int kNodeSize = 14;\n+    (*cntx)->StartArray(kNodeSize);\n+    (*cntx)->SendBulkString(\"id\");\n+    (*cntx)->SendBulkString(node.id);\n+    (*cntx)->SendBulkString(\"endpoint\");\n+    (*cntx)->SendBulkString(node.ip);\n+    (*cntx)->SendBulkString(\"ip\");\n+    (*cntx)->SendBulkString(node.ip);\n+    (*cntx)->SendBulkString(\"port\");\n+    (*cntx)->SendLong(node.port);\n+    (*cntx)->SendBulkString(\"role\");\n+    (*cntx)->SendBulkString(role);\n+    (*cntx)->SendBulkString(\"replication-offset\");\n+    (*cntx)->SendLong(0);\n+    (*cntx)->SendBulkString(\"health\");\n+    (*cntx)->SendBulkString(\"online\");\n+  };\n+\n+  (*cntx)->StartArray(config.size());\n+  for (const auto& shard : config) {\n+    (*cntx)->StartArray(kEntrySize);\n+    (*cntx)->SendBulkString(\"slots\");\n+\n+    (*cntx)->StartArray(shard.slot_ranges.size() * 2);\n+    for (const auto& slot_range : shard.slot_ranges) {\n+      (*cntx)->SendLong(slot_range.start);\n+      (*cntx)->SendLong(slot_range.end);\n+    }\n+\n+    (*cntx)->SendBulkString(\"nodes\");\n+    (*cntx)->StartArray(1 + shard.replicas.size());\n+    WriteNode(shard.master, \"master\");\n+    for (const auto& replica : shard.replicas) {\n+      WriteNode(replica, \"replica\");\n+    }\n+  }\n+}\n+}  // namespace\n+\n+void ClusterFamily::ClusterShards(ConnectionContext* cntx) {\n+  if (is_emulated_cluster_) {\n+    ClusterConfig::ClusterShards config{GetEmulatedShardInfo(cntx)};\n+    return ClusterShardsImpl(config, cntx);\n+  } else if (cluster_config_->IsConfigured()) {\n+    return ClusterShardsImpl(cluster_config_->GetConfig(), cntx);\n+  } else {\n+    return (*cntx)->SendError(\"Cluster is not yet configured\");\n+  }\n+}\n+\n void ClusterFamily::ClusterSlots(ConnectionContext* cntx) {\n   // For more details https://redis.io/commands/cluster-slots/\n   constexpr unsigned int kClustersShardingCount = 1;\n@@ -251,6 +343,8 @@ void ClusterFamily::Cluster(CmdArgList args, ConnectionContext* cntx) {\n \n   if (sub_cmd == \"HELP\") {\n     return ClusterHelp(cntx);\n+  } else if (sub_cmd == \"SHARDS\") {\n+    return ClusterShards(cntx);\n   } else if (sub_cmd == \"SLOTS\") {\n     return ClusterSlots(cntx);\n   } else if (sub_cmd == \"NODES\") {\n@@ -277,13 +371,16 @@ void ClusterFamily::ReadWrite(CmdArgList args, ConnectionContext* cntx) {\n }\n \n void ClusterFamily::DflyCluster(CmdArgList args, ConnectionContext* cntx) {\n-  if (!ClusterConfig::IsClusterEnabled()) {\n+  if (!is_emulated_cluster_ && !ClusterConfig::IsClusterEnabled()) {\n     return (*cntx)->SendError(\"DFLYCLUSTER commands requires --cluster_mode=yes\");\n   }\n-  CHECK_NE(cluster_config_.get(), nullptr);\n+\n   if (!cntx->owner()->IsAdmin()) {\n     return (*cntx)->SendError(\"DFLYCLUSTER commands requires admin port\");\n   }\n+\n+  CHECK(is_emulated_cluster_ || cluster_config_.get() != nullptr);\n+\n   ToUpper(&args[0]);\n   string_view sub_cmd = ArgS(args, 0);\n   if (sub_cmd == \"GETSLOTINFO\") {\ndiff --git a/src/server/cluster/cluster_family.h b/src/server/cluster/cluster_family.h\nindex 3410bf713e79..aa2f1139b506 100644\n--- a/src/server/cluster/cluster_family.h\n+++ b/src/server/cluster/cluster_family.h\n@@ -33,6 +33,7 @@ class ClusterFamily {\n   // Cluster commands compatible with Redis\n   void Cluster(CmdArgList args, ConnectionContext* cntx);\n   void ClusterHelp(ConnectionContext* cntx);\n+  void ClusterShards(ConnectionContext* cntx);\n   void ClusterSlots(ConnectionContext* cntx);\n   void ClusterNodes(ConnectionContext* cntx);\n   void ClusterInfo(ConnectionContext* cntx);\n@@ -48,6 +49,8 @@ class ClusterFamily {\n \n   std::string BuildClusterNodeReply(ConnectionContext* cntx) const;\n \n+  ClusterConfig::ClusterShard GetEmulatedShardInfo(ConnectionContext* cntx) const;\n+\n   bool is_emulated_cluster_ = false;\n   ServerFamily* server_family_ = nullptr;\n \n",
  "test_patch": "diff --git a/src/facade/facade_test.h b/src/facade/facade_test.h\nindex 0f910468a973..c5a94a6b5209 100644\n--- a/src/facade/facade_test.h\n+++ b/src/facade/facade_test.h\n@@ -73,6 +73,12 @@ inline ::testing::PolymorphicMatcher<RespTypeMatcher> ArgType(RespExpr::Type t)\n   return ::testing::MakePolymorphicMatcher(RespTypeMatcher(t));\n }\n \n+MATCHER_P(RespArray, value, \"\") {\n+  return ExplainMatchResult(testing::AllOf(testing::Field(&RespExpr::type, RespExpr::ARRAY),\n+                                           testing::Property(&RespExpr::GetVec, value)),\n+                            arg, result_listener);\n+}\n+\n inline bool operator==(const RespExpr& left, std::string_view s) {\n   return left.type == RespExpr::STRING && ToSV(left.GetBuf()) == s;\n }\ndiff --git a/src/server/cluster_family_test.cc b/src/server/cluster_family_test.cc\nindex 73190d90507f..c154de571167 100644\n--- a/src/server/cluster_family_test.cc\n+++ b/src/server/cluster_family_test.cc\n@@ -24,10 +24,7 @@ using namespace testing;\n class ClusterFamilyTest : public BaseFamilyTest {\n  public:\n   ClusterFamilyTest() {\n-    auto* flag = absl::FindCommandLineFlag(\"cluster_mode\");\n-    CHECK_NE(flag, nullptr);\n-    string error;\n-    CHECK(flag->ParseFrom(\"yes\", &error));\n+    SetTestFlag(\"cluster_mode\", \"yes\");\n   }\n \n  protected:\n@@ -67,6 +64,8 @@ TEST_F(ClusterFamilyTest, ClusterConfigInvalidJSON) {\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_slots_ok:0\"));\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_known_nodes:0\"));\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_size:0\"));\n+\n+  EXPECT_THAT(Run({\"cluster\", \"shards\"}), ErrArg(\"Cluster is not yet configured\"));\n }\n \n TEST_F(ClusterFamilyTest, ClusterConfigInvalidConfig) {\n@@ -177,6 +176,20 @@ TEST_F(ClusterFamilyTest, ClusterConfigNoReplicas) {\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_known_nodes:1\"));\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_size:1\"));\n \n+  EXPECT_THAT(Run({\"cluster\", \"shards\"}),\n+              RespArray(ElementsAre(\"slots\",                                            //\n+                                    RespArray(ElementsAre(IntArg(0), IntArg(16'383))),  //\n+                                    \"nodes\",                                            //\n+                                    RespArray(ElementsAre(                              //\n+                                        RespArray(ElementsAre(                          //\n+                                            \"id\", \"abcd1234\",                           //\n+                                            \"endpoint\", \"10.0.0.1\",                     //\n+                                            \"ip\", \"10.0.0.1\",                           //\n+                                            \"port\", IntArg(7000),                       //\n+                                            \"role\", \"master\",                           //\n+                                            \"replication-offset\", IntArg(0),            //\n+                                            \"health\", \"online\")))))));\n+\n   EXPECT_THAT(Run({\"get\", \"x\"}).GetString(),\n               testing::MatchesRegex(R\"(MOVED [0-9]+ 10.0.0.1:7000)\"));\n \n@@ -216,6 +229,29 @@ TEST_F(ClusterFamilyTest, ClusterConfigFull) {\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_slots_ok:16384\"));\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_known_nodes:2\"));\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_size:1\"));\n+\n+  EXPECT_THAT(Run({\"cluster\", \"shards\"}),\n+              RespArray(ElementsAre(\"slots\",                                            //\n+                                    RespArray(ElementsAre(IntArg(0), IntArg(16'383))),  //\n+                                    \"nodes\",                                            //\n+                                    RespArray(ElementsAre(                              //\n+                                        RespArray(ElementsAre(                          //\n+                                            \"id\", \"abcd1234\",                           //\n+                                            \"endpoint\", \"10.0.0.1\",                     //\n+                                            \"ip\", \"10.0.0.1\",                           //\n+                                            \"port\", IntArg(7000),                       //\n+                                            \"role\", \"master\",                           //\n+                                            \"replication-offset\", IntArg(0),            //\n+                                            \"health\", \"online\")),                       //\n+                                        RespArray(ElementsAre(                          //\n+                                            \"id\", \"wxyz\",                               //\n+                                            \"endpoint\", \"10.0.0.10\",                    //\n+                                            \"ip\", \"10.0.0.10\",                          //\n+                                            \"port\", IntArg(8000),                       //\n+                                            \"role\", \"replica\",                          //\n+                                            \"replication-offset\", IntArg(0),            //\n+                                            \"health\", \"online\")))))));\n+\n   // TODO: Use \"CLUSTER SLOTS\" and \"CLUSTER SHARDS\" once implemented to verify new configuration\n   // takes effect.\n }\n@@ -273,6 +309,49 @@ TEST_F(ClusterFamilyTest, ClusterConfigFullMultipleInstances) {\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_known_nodes:4\"));\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_size:2\"));\n \n+  EXPECT_THAT(Run({\"cluster\", \"shards\"}),\n+              RespArray(ElementsAre(\n+                  RespArray(ElementsAre(\"slots\",                                                 //\n+                                        RespArray(ElementsAre(IntArg(0), IntArg(10'000))),       //\n+                                        \"nodes\",                                                 //\n+                                        RespArray(ElementsAre(                                   //\n+                                            RespArray(ElementsAre(                               //\n+                                                \"id\", \"abcd1234\",                                //\n+                                                \"endpoint\", \"10.0.0.1\",                          //\n+                                                \"ip\", \"10.0.0.1\",                                //\n+                                                \"port\", IntArg(7000),                            //\n+                                                \"role\", \"master\",                                //\n+                                                \"replication-offset\", IntArg(0),                 //\n+                                                \"health\", \"online\")),                            //\n+                                            RespArray(ElementsAre(                               //\n+                                                \"id\", \"wxyz\",                                    //\n+                                                \"endpoint\", \"10.0.0.10\",                         //\n+                                                \"ip\", \"10.0.0.10\",                               //\n+                                                \"port\", IntArg(8000),                            //\n+                                                \"role\", \"replica\",                               //\n+                                                \"replication-offset\", IntArg(0),                 //\n+                                                \"health\", \"online\")))))),                        //\n+                  RespArray(ElementsAre(\"slots\",                                                 //\n+                                        RespArray(ElementsAre(IntArg(10'001), IntArg(16'383))),  //\n+                                        \"nodes\",                                                 //\n+                                        RespArray(ElementsAre(                                   //\n+                                            RespArray(ElementsAre(                               //\n+                                                \"id\", \"efgh7890\",                                //\n+                                                \"endpoint\", \"10.0.0.2\",                          //\n+                                                \"ip\", \"10.0.0.2\",                                //\n+                                                \"port\", IntArg(7001),                            //\n+                                                \"role\", \"master\",                                //\n+                                                \"replication-offset\", IntArg(0),                 //\n+                                                \"health\", \"online\")),                            //\n+                                            RespArray(ElementsAre(                               //\n+                                                \"id\", \"qwerty\",                                  //\n+                                                \"endpoint\", \"10.0.0.11\",                         //\n+                                                \"ip\", \"10.0.0.11\",                               //\n+                                                \"port\", IntArg(8001),                            //\n+                                                \"role\", \"replica\",                               //\n+                                                \"replication-offset\", IntArg(0),                 //\n+                                                \"health\", \"online\")))))))));\n+\n   absl::InsecureBitGen eng;\n   while (true) {\n     string random_key = GetRandomHex(eng, 40);\n@@ -382,10 +461,8 @@ TEST_F(ClusterFamilyTest, ClusterConfigDeleteSlots) {\n class ClusterFamilyEmulatedTest : public BaseFamilyTest {\n  public:\n   ClusterFamilyEmulatedTest() {\n-    auto* flag = absl::FindCommandLineFlag(\"cluster_mode\");\n-    CHECK_NE(flag, nullptr);\n-    string error;\n-    CHECK(flag->ParseFrom(\"emulated\", &error));\n+    SetTestFlag(\"cluster_mode\", \"emulated\");\n+    SetTestFlag(\"cluster_announce_ip\", \"fake-host\");\n   }\n };\n \n@@ -398,5 +475,21 @@ TEST_F(ClusterFamilyEmulatedTest, ClusterInfo) {\n   EXPECT_THAT(cluster_info, HasSubstr(\"cluster_size:1\"));\n }\n \n+TEST_F(ClusterFamilyEmulatedTest, ClusterShards) {\n+  EXPECT_THAT(Run({\"cluster\", \"shards\"}),\n+              RespArray(ElementsAre(\"slots\",                                                      //\n+                                    RespArray(ElementsAre(IntArg(0), IntArg(16383))),             //\n+                                    \"nodes\",                                                      //\n+                                    RespArray(ElementsAre(                                        //\n+                                        RespArray(ElementsAre(                                    //\n+                                            \"id\", RunAdmin({\"dflycluster\", \"myid\"}).GetString(),  //\n+                                            \"endpoint\", \"fake-host\",                              //\n+                                            \"ip\", \"fake-host\",                                    //\n+                                            \"port\", IntArg(6379),                                 //\n+                                            \"role\", \"master\",                                     //\n+                                            \"replication-offset\", IntArg(0),                      //\n+                                            \"health\", \"online\")))))));\n+}\n+\n }  // namespace\n }  // namespace dfly\ndiff --git a/src/server/test_utils.cc b/src/server/test_utils.cc\nindex 2ed2ff98c167..6fdd8f9e5889 100644\n--- a/src/server/test_utils.cc\n+++ b/src/server/test_utils.cc\n@@ -8,6 +8,7 @@ extern \"C\" {\n #include \"redis/zmalloc.h\"\n }\n \n+#include <absl/flags/reflection.h>\n #include <absl/strings/match.h>\n #include <absl/strings/str_split.h>\n #include <mimalloc.h>\n@@ -455,4 +456,11 @@ vector<string> BaseFamilyTest::StrArray(const RespExpr& expr) {\n   return res;\n }\n \n+void BaseFamilyTest::SetTestFlag(string_view flag_name, string_view new_value) {\n+  auto* flag = absl::FindCommandLineFlag(flag_name);\n+  CHECK_NE(flag, nullptr);\n+  string error;\n+  CHECK(flag->ParseFrom(new_value, &error)) << \"Error: \" << error;\n+}\n+\n }  // namespace dfly\ndiff --git a/src/server/test_utils.h b/src/server/test_utils.h\nindex 1c89f80be270..4d8fdf43c915 100644\n--- a/src/server/test_utils.h\n+++ b/src/server/test_utils.h\n@@ -104,6 +104,8 @@ class BaseFamilyTest : public ::testing::Test {\n \n   static unsigned NumLocked();\n \n+  void SetTestFlag(std::string_view flag_name, std::string_view new_value);\n+\n   std::unique_ptr<util::ProactorPool> pp_;\n   std::unique_ptr<Service> service_;\n   unsigned num_threads_ = 3;\n",
  "problem_statement": "Implement `CLUSTER SHARDS` command\n\n",
  "hints_text": "",
  "created_at": "2023-05-23T19:42:16Z",
  "modified_files": [
    "src/server/cluster/cluster_family.cc",
    "src/server/cluster/cluster_family.h"
  ],
  "modified_test_files": [
    "src/facade/facade_test.h",
    "src/server/cluster_family_test.cc",
    "src/server/test_utils.cc",
    "src/server/test_utils.h"
  ]
}