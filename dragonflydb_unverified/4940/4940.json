{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4940,
  "instance_id": "dragonflydb__dragonfly-4940",
  "issue_numbers": [
    "4936"
  ],
  "base_commit": "9505d210470f101606fda9c2ce2c87cadf1bfee5",
  "patch": "diff --git a/src/server/json_family.cc b/src/server/json_family.cc\nindex 8fdd793ba8d8..30df6616fea7 100644\n--- a/src/server/json_family.cc\n+++ b/src/server/json_family.cc\n@@ -1274,6 +1274,8 @@ std::vector<std::optional<std::string>> OpJsonMGet(const WrappedJsonPath& json_p\n           json_val, std::move(cb), CallbackResultOptions::DefaultEvaluateOptions());\n \n       if (eval_result.IsV1()) {\n+        if (eval_result.Empty())\n+          return nullopt;\n         return eval_result.AsV1();\n       }\n \n",
  "test_patch": "diff --git a/src/server/json_family_test.cc b/src/server/json_family_test.cc\nindex 8f6a86002701..eb696b074316 100644\n--- a/src/server/json_family_test.cc\n+++ b/src/server/json_family_test.cc\n@@ -4,6 +4,7 @@\n \n #include \"server/json_family.h\"\n \n+#include <absl/flags/flag.h>\n #include <absl/strings/str_replace.h>\n \n #include \"base/gtest.h\"\n@@ -16,6 +17,8 @@ using namespace testing;\n using namespace std;\n using namespace util;\n \n+ABSL_DECLARE_FLAG(bool, jsonpathv2);\n+\n namespace dfly {\n \n class JsonFamilyTest : public BaseFamilyTest {\n@@ -2547,6 +2550,14 @@ TEST_F(JsonFamilyTest, MGetLegacy) {\n   ASSERT_EQ(RespExpr::ARRAY, resp.type);\n   EXPECT_THAT(resp.GetVec(), ElementsAre(R\"(\"Israel\")\", R\"(\"Germany\")\", ArgType(RespExpr::NIL)));\n \n+  resp = Run({\"JSON.MGET\", \"json1\", \"json2\", \".[0]\"});\n+  if (auto jsonpathv2 = absl::GetFlag(FLAGS_jsonpathv2); jsonpathv2) {\n+    ASSERT_EQ(RespExpr::ARRAY, resp.type);\n+    EXPECT_THAT(resp.GetVec(), ElementsAre(ArgType(RespExpr::NIL), ArgType(RespExpr::NIL)));\n+  } else {\n+    EXPECT_THAT(resp, ErrArg(\"ERR syntax error\"));\n+  }\n+\n   resp = Run({\"JSON.SET\", \"json3\", \".\", json[2]});\n   ASSERT_THAT(resp, \"OK\");\n \n",
  "problem_statement": "Dragonfly crashes on json.mget command\n\n\n**To Reproduce**\nrun `json.mget doc1 doc2 doc3 .[0]`\n\n\n**Expected behavior**\nshould be rejected for invalid json path\n\n",
  "hints_text": "",
  "created_at": "2025-04-15T08:57:06Z",
  "modified_files": [
    "src/server/json_family.cc"
  ],
  "modified_test_files": [
    "src/server/json_family_test.cc"
  ]
}