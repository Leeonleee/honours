{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1462,
  "instance_id": "dragonflydb__dragonfly-1462",
  "issue_numbers": [
    "1456"
  ],
  "base_commit": "98e84f804aac1d12fc081812632b459f4eb93359",
  "patch": "diff --git a/src/server/json_family.cc b/src/server/json_family.cc\nindex 6144c4e84637..9f28159eb9db 100644\n--- a/src/server/json_family.cc\n+++ b/src/server/json_family.cc\n@@ -84,6 +84,16 @@ string JsonTypeToName(const JsonType& val) {\n   return std::string{};\n }\n \n+JsonExpression ParseJsonPath(string_view path, error_code* ec) {\n+  if (path == \".\") {\n+    // RedisJson V1 uses the dot for root level access.\n+    // There are more incompatibilities with legacy paths which are not supported.\n+    path = \"$\"sv;\n+  }\n+\n+  return jsonpath::make_expression<JsonType>(path, *ec);\n+}\n+\n template <typename T>\n void PrintOptVec(ConnectionContext* cntx, const OpResult<vector<optional<T>>>& result) {\n   if (result->empty()) {\n@@ -1131,7 +1141,7 @@ void JsonFamily::Resp(CmdArgList args, ConnectionContext* cntx) {\n   }\n \n   error_code ec;\n-  JsonExpression expression = jsonpath::make_expression<JsonType>(path, ec);\n+  JsonExpression expression = ParseJsonPath(path, &ec);\n \n   if (ec) {\n     VLOG(1) << \"Invalid JSONPath syntax: \" << ec.message();\n@@ -1184,7 +1194,7 @@ void JsonFamily::Debug(CmdArgList args, ConnectionContext* cntx) {\n   error_code ec;\n   string_view key = ArgS(args, 1);\n   string_view path = ArgS(args, 2);\n-  JsonExpression expression = jsonpath::make_expression<JsonType>(path, ec);\n+  JsonExpression expression = ParseJsonPath(path, &ec);\n \n   if (ec) {\n     VLOG(1) << \"Invalid JSONPath syntax: \" << ec.message();\n@@ -1211,7 +1221,7 @@ void JsonFamily::MGet(CmdArgList args, ConnectionContext* cntx) {\n \n   error_code ec;\n   string_view path = ArgS(args, args.size() - 1);\n-  JsonExpression expression = jsonpath::make_expression<JsonType>(path, ec);\n+  JsonExpression expression = ParseJsonPath(path, &ec);\n \n   if (ec) {\n     VLOG(1) << \"Invalid JSONPath syntax: \" << ec.message();\n@@ -1225,7 +1235,7 @@ void JsonFamily::MGet(CmdArgList args, ConnectionContext* cntx) {\n \n   auto cb = [&](Transaction* t, EngineShard* shard) {\n     ShardId sid = shard->shard_id();\n-    mget_resp[sid] = OpMGet(jsonpath::make_expression<JsonType>(path, ec), t, shard);\n+    mget_resp[sid] = OpMGet(ParseJsonPath(path, &ec), t, shard);\n     return OpStatus::OK;\n   };\n \n@@ -1267,7 +1277,7 @@ void JsonFamily::ArrIndex(CmdArgList args, ConnectionContext* cntx) {\n   string_view path = ArgS(args, 1);\n \n   error_code ec;\n-  JsonExpression expression = jsonpath::make_expression<JsonType>(path, ec);\n+  JsonExpression expression = ParseJsonPath(path, &ec);\n \n   if (ec) {\n     VLOG(1) << \"Invalid JSONPath syntax: \" << ec.message();\n@@ -1435,7 +1445,7 @@ void JsonFamily::ArrPop(CmdArgList args, ConnectionContext* cntx) {\n   }\n \n   error_code ec;\n-  JsonExpression expression = jsonpath::make_expression<JsonType>(path, ec);\n+  JsonExpression expression = ParseJsonPath(path, &ec);\n \n   if (ec) {\n     VLOG(1) << \"Invalid JSONPath syntax: \" << ec.message();\n@@ -1509,7 +1519,7 @@ void JsonFamily::ObjKeys(CmdArgList args, ConnectionContext* cntx) {\n   string_view path = ArgS(args, 1);\n \n   error_code ec;\n-  JsonExpression expression = jsonpath::make_expression<JsonType>(path, ec);\n+  JsonExpression expression = ParseJsonPath(path, &ec);\n \n   if (ec) {\n     VLOG(1) << \"Invalid JSONPath syntax: \" << ec.message();\n@@ -1627,7 +1637,7 @@ void JsonFamily::Type(CmdArgList args, ConnectionContext* cntx) {\n   string_view path = ArgS(args, 1);\n \n   error_code ec;\n-  JsonExpression expression = jsonpath::make_expression<JsonType>(path, ec);\n+  JsonExpression expression = ParseJsonPath(path, &ec);\n \n   if (ec) {\n     VLOG(1) << \"Invalid JSONPath syntax: \" << ec.message();\n@@ -1663,7 +1673,7 @@ void JsonFamily::ArrLen(CmdArgList args, ConnectionContext* cntx) {\n   string_view path = ArgS(args, 1);\n \n   error_code ec;\n-  JsonExpression expression = jsonpath::make_expression<JsonType>(path, ec);\n+  JsonExpression expression = ParseJsonPath(path, &ec);\n \n   if (ec) {\n     VLOG(1) << \"Invalid JSONPath syntax: \" << ec.message();\n@@ -1690,7 +1700,7 @@ void JsonFamily::ObjLen(CmdArgList args, ConnectionContext* cntx) {\n   string_view path = ArgS(args, 1);\n \n   error_code ec;\n-  JsonExpression expression = jsonpath::make_expression<JsonType>(path, ec);\n+  JsonExpression expression = ParseJsonPath(path, &ec);\n \n   if (ec) {\n     VLOG(1) << \"Invalid JSONPath syntax: \" << ec.message();\n@@ -1717,7 +1727,7 @@ void JsonFamily::StrLen(CmdArgList args, ConnectionContext* cntx) {\n   string_view path = ArgS(args, 1);\n \n   error_code ec;\n-  JsonExpression expression = jsonpath::make_expression<JsonType>(path, ec);\n+  JsonExpression expression = ParseJsonPath(path, &ec);\n \n   if (ec) {\n     VLOG(1) << \"Invalid JSONPath syntax: \" << ec.message();\n@@ -1748,7 +1758,7 @@ void JsonFamily::Get(CmdArgList args, ConnectionContext* cntx) {\n   for (size_t i = 1; i < args.size(); ++i) {\n     string_view path = ArgS(args, i);\n     error_code ec;\n-    JsonExpression expr = jsonpath::make_expression<JsonType>(path, ec);\n+    JsonExpression expr = ParseJsonPath(path, &ec);\n \n     if (ec) {\n       LOG(WARNING) << \"path '\" << path << \"': Invalid JSONPath syntax: \" << ec.message();\n",
  "test_patch": "diff --git a/src/server/json_family_test.cc b/src/server/json_family_test.cc\nindex b55710f478a2..8ad416173084 100644\n--- a/src/server/json_family_test.cc\n+++ b/src/server/json_family_test.cc\n@@ -1005,4 +1005,15 @@ TEST_F(JsonFamilyTest, Set) {\n   EXPECT_EQ(resp, R\"([{\"a\":2,\"b\":8,\"c\":[1,2,3]}])\");\n }\n \n+TEST_F(JsonFamilyTest, LegacyV1) {\n+  string json = R\"({\"key\":[1,2,3,4]})\";\n+\n+  auto resp = Run({\"JSON.SET\", \"json1\", \".\", json});\n+  EXPECT_THAT(resp, \"OK\");\n+\n+  // JSON.GET key \".\" is the same as JSON.GET key \"$\"\n+  resp = Run({\"JSON.GET\", \"json1\", \".\"});\n+  EXPECT_THAT(resp, absl::StrCat(\"[\", json, \"]\"));\n+}\n+\n }  // namespace dfly\n",
  "problem_statement": "Redis Insight calls JSON keys with a dot instead of the root $\n**Describe the bug**\r\nRedis Insight (v2) sets the following command to read a Json Key: \"JSON.GET\" \"key\" \".\" \r\nIt sets a dot \".\" as root path and not a \"$\". This generates a syntax error with Dragonfly DB and no output in Insight (undefined).\r\n\r\nThis is probably not a real bug of Dragonfly DB, but for compatibility reasons it should work. \r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n1. open redis-cli with fireflydb (version 1.4)\r\n2. `JSON.SET doc $ '{\"a\":2}'`\r\n3. `JSON.GET doc .`\r\n4. ERR syntax error appears\r\n\r\n.. or Open Redis Insight (v2), start the Profiler and get a json key.\r\n\r\n![redis_insight_v2](https://github.com/dragonflydb/dragonfly/assets/5912839/c49f59a9-f2a3-4b09-b60f-bd456bb2e1ed)\r\n\r\n**Expected behavior**\r\nFor compatibility reasons and the fact that Redis Insight is used by many developers, the dot should work and be considered as root $. \r\n\r\n**Environment (please complete the following information):**\r\n - OS: Ubuntu 22.04\r\n - Dragonfly Version: 1.4\r\n\r\n\r\n\r\n\n",
  "hints_text": "but we are DragonflyDB, not Firefly. Completely different insect! \r\n![image](https://github.com/dragonflydb/dragonfly/assets/3674760/b1967d16-eeec-4de2-aecc-3de9f32ed4a6)\r\n\nI'm so sorry, how could I have got it wrong? I have corrected it above. ;-)",
  "created_at": "2023-06-22T08:54:20Z",
  "modified_files": [
    "src/server/json_family.cc"
  ],
  "modified_test_files": [
    "src/server/json_family_test.cc"
  ]
}