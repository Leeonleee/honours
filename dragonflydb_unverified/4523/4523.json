{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4523,
  "instance_id": "dragonflydb__dragonfly-4523",
  "issue_numbers": [
    "4522"
  ],
  "base_commit": "f2309f4e7bb84c6d1f0544eca84a79aa1d5c299f",
  "patch": "diff --git a/src/server/cluster/cluster_family.cc b/src/server/cluster/cluster_family.cc\nindex 5d70cf9b4485..241b63cdebff 100644\n--- a/src/server/cluster/cluster_family.cc\n+++ b/src/server/cluster/cluster_family.cc\n@@ -900,7 +900,7 @@ void ClusterFamily::InitMigration(CmdArgList args, SinkReplyBuilder* builder) {\n \n   const auto& incoming_migrations = cluster_config()->GetIncomingMigrations();\n   bool found = any_of(incoming_migrations.begin(), incoming_migrations.end(),\n-                      [&source_id, &slot_ranges](const MigrationInfo& info) {\n+                      [source_id = source_id, &slot_ranges](const MigrationInfo& info) {\n                         return info.node_info.id == source_id && info.slot_ranges == slot_ranges;\n                       });\n   if (!found) {\ndiff --git a/src/server/script_mgr.cc b/src/server/script_mgr.cc\nindex ee29617a7d1c..d261c740e644 100644\n--- a/src/server/script_mgr.cc\n+++ b/src/server/script_mgr.cc\n@@ -48,6 +48,13 @@ ABSL_FLAG(\n     \"Comma-separated list of Lua script SHAs which are allowed to access undeclared keys. SHAs are \"\n     \"only looked at when loading the script, and new values do not affect already-loaded script.\");\n \n+ABSL_FLAG(std::vector<std::string>, lua_force_atomicity_shas,\n+          std::vector<std::string>({\n+              \"f8133be7f04abd9dfefa83c3b29a9d837cfbda86\",  // Sidekiq, see #4522\n+          }),\n+          \"Comma-separated list of Lua script SHAs which are forced to run in atomic mode, even if \"\n+          \"the script specifies disable-atomicity.\");\n+\n namespace dfly {\n using namespace std;\n using namespace facade;\n@@ -265,6 +272,13 @@ io::Result<string, GenericError> ScriptMgr::Insert(string_view body, Interpreter\n     return params_opt.get_unexpected();\n   auto params = params_opt->value_or(default_params_);\n \n+  if (!params.atomic) {\n+    auto force_atomic_shas = absl::GetFlag(FLAGS_lua_force_atomicity_shas);\n+    if (find(force_atomic_shas.begin(), force_atomic_shas.end(), sha) != force_atomic_shas.end()) {\n+      params.atomic = true;\n+    }\n+  }\n+\n   auto undeclared_shas = absl::GetFlag(FLAGS_lua_undeclared_keys_shas);\n   if (find(undeclared_shas.begin(), undeclared_shas.end(), sha) != undeclared_shas.end()) {\n     params.undeclared_keys = true;\n",
  "test_patch": "diff --git a/src/server/multi_test.cc b/src/server/multi_test.cc\nindex 24be97d9eb3a..d61fc003da0e 100644\n--- a/src/server/multi_test.cc\n+++ b/src/server/multi_test.cc\n@@ -20,6 +20,7 @@ ABSL_DECLARE_FLAG(bool, multi_exec_squash);\n ABSL_DECLARE_FLAG(bool, lua_auto_async);\n ABSL_DECLARE_FLAG(bool, lua_allow_undeclared_auto_correct);\n ABSL_DECLARE_FLAG(std::string, default_lua_flags);\n+ABSL_DECLARE_FLAG(std::vector<std::string>, lua_force_atomicity_shas);\n \n namespace dfly {\n \n@@ -27,6 +28,7 @@ using namespace std;\n using namespace util;\n using absl::StrCat;\n using ::io::Result;\n+using testing::_;\n using testing::ElementsAre;\n using testing::HasSubstr;\n \n@@ -1148,4 +1150,27 @@ TEST_F(MultiTest, EvalShaRo) {\n   EXPECT_THAT(resp, ErrArg(\"Write commands are not allowed from read-only scripts\"));\n }\n \n+TEST_F(MultiTest, ForceAtomicityFlag) {\n+  absl::FlagSaver fs;\n+\n+  const string kHash = \"bb855c2ecfa3114d222cb11e0682af6360e9712f\";\n+  const string_view kScript = R\"(\n+    --!df flags=disable-atomicity\n+    redis.call('get', 'x');\n+    return \"OK\";\n+  )\";\n+\n+  // EVAL the script works due to disable-atomicity flag\n+  EXPECT_EQ(Run({\"eval\", kScript, \"0\"}), \"OK\");\n+\n+  EXPECT_THAT(Run({\"script\", \"list\"}), RespElementsAre(kHash, kScript));\n+\n+  // Flush scripts to force re-evaluating of flags\n+  EXPECT_EQ(Run({\"script\", \"flush\"}), \"OK\");\n+\n+  // Now it doesn't work, because we force atomicity\n+  absl::SetFlag(&FLAGS_lua_force_atomicity_shas, {kHash});\n+  EXPECT_THAT(Run({\"eval\", kScript, \"0\"}), ErrArg(\"undeclared\"));\n+}\n+\n }  // namespace dfly\n",
  "problem_statement": "add workaround for incorrect labeling of sidekiq-pro script\nFollowing an incorrect request here: https://github.com/dragonflydb/dragonfly/issues/2442#issuecomment-2290725198\n\nsidekiq pro 7.3.1 or later is broken on Dragonfly.\n\n1. We should provide a hard-coded workaround to ignore `disable-atomicity` flag for this sha.\n2. It should be patched into the 1.26 branch\n3. We should communicate to @mperham about this, so he could also fix it there.\n\n\n",
  "hints_text": "",
  "created_at": "2025-01-29T08:37:19Z",
  "modified_files": [
    "src/server/cluster/cluster_family.cc",
    "src/server/script_mgr.cc"
  ],
  "modified_test_files": [
    "src/server/multi_test.cc"
  ]
}