diff --git a/src/server/cluster/cluster_family.cc b/src/server/cluster/cluster_family.cc
index 5d70cf9b4485..241b63cdebff 100644
--- a/src/server/cluster/cluster_family.cc
+++ b/src/server/cluster/cluster_family.cc
@@ -900,7 +900,7 @@ void ClusterFamily::InitMigration(CmdArgList args, SinkReplyBuilder* builder) {
 
   const auto& incoming_migrations = cluster_config()->GetIncomingMigrations();
   bool found = any_of(incoming_migrations.begin(), incoming_migrations.end(),
-                      [&source_id, &slot_ranges](const MigrationInfo& info) {
+                      [source_id = source_id, &slot_ranges](const MigrationInfo& info) {
                         return info.node_info.id == source_id && info.slot_ranges == slot_ranges;
                       });
   if (!found) {
diff --git a/src/server/script_mgr.cc b/src/server/script_mgr.cc
index ee29617a7d1c..d261c740e644 100644
--- a/src/server/script_mgr.cc
+++ b/src/server/script_mgr.cc
@@ -48,6 +48,13 @@ ABSL_FLAG(
     "Comma-separated list of Lua script SHAs which are allowed to access undeclared keys. SHAs are "
     "only looked at when loading the script, and new values do not affect already-loaded script.");
 
+ABSL_FLAG(std::vector<std::string>, lua_force_atomicity_shas,
+          std::vector<std::string>({
+              "f8133be7f04abd9dfefa83c3b29a9d837cfbda86",  // Sidekiq, see #4522
+          }),
+          "Comma-separated list of Lua script SHAs which are forced to run in atomic mode, even if "
+          "the script specifies disable-atomicity.");
+
 namespace dfly {
 using namespace std;
 using namespace facade;
@@ -265,6 +272,13 @@ io::Result<string, GenericError> ScriptMgr::Insert(string_view body, Interpreter
     return params_opt.get_unexpected();
   auto params = params_opt->value_or(default_params_);
 
+  if (!params.atomic) {
+    auto force_atomic_shas = absl::GetFlag(FLAGS_lua_force_atomicity_shas);
+    if (find(force_atomic_shas.begin(), force_atomic_shas.end(), sha) != force_atomic_shas.end()) {
+      params.atomic = true;
+    }
+  }
+
   auto undeclared_shas = absl::GetFlag(FLAGS_lua_undeclared_keys_shas);
   if (find(undeclared_shas.begin(), undeclared_shas.end(), sha) != undeclared_shas.end()) {
     params.undeclared_keys = true;
