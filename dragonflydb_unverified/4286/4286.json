{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 4286,
  "instance_id": "dragonflydb__dragonfly-4286",
  "issue_numbers": [
    "4256"
  ],
  "base_commit": "5fee6683914c030b641fd9e9ffc51b9b201216d1",
  "patch": "diff --git a/src/server/server_family.cc b/src/server/server_family.cc\nindex 7e9638c10bd1..6d0aa6b26afe 100644\n--- a/src/server/server_family.cc\n+++ b/src/server/server_family.cc\n@@ -230,7 +230,7 @@ using strings::HumanReadableNumBytes;\n \n namespace {\n \n-const auto kRedisVersion = \"6.2.11\";\n+const auto kRedisVersion = \"7.2.0\";\n \n using EngineFunc = void (ServerFamily::*)(CmdArgList args, const CommandContext&);\n \n",
  "test_patch": "diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc\nindex 83f8c3bdb375..848b08ea73aa 100644\n--- a/src/server/dragonfly_test.cc\n+++ b/src/server/dragonfly_test.cc\n@@ -305,7 +305,7 @@ TEST_F(DflyEngineTestWithRegistry, Hello) {\n \n   EXPECT_THAT(\n       resp.GetVec(),\n-      ElementsAre(\"server\", \"redis\", \"version\", \"6.2.11\", \"dragonfly_version\",\n+      ElementsAre(\"server\", \"redis\", \"version\", \"7.2.0\", \"dragonfly_version\",\n                   ArgType(RespExpr::STRING), \"proto\", IntArg(2), \"id\", ArgType(RespExpr::INT64),\n                   \"mode\", testing::AnyOf(\"standalone\", \"cluster\"), \"role\", \"master\"));\n \n@@ -313,7 +313,7 @@ TEST_F(DflyEngineTestWithRegistry, Hello) {\n   ASSERT_THAT(resp, ArrLen(14));\n   EXPECT_THAT(\n       resp.GetVec(),\n-      ElementsAre(\"server\", \"redis\", \"version\", \"6.2.11\", \"dragonfly_version\",\n+      ElementsAre(\"server\", \"redis\", \"version\", \"7.2.0\", \"dragonfly_version\",\n                   ArgType(RespExpr::STRING), \"proto\", IntArg(3), \"id\", ArgType(RespExpr::INT64),\n                   \"mode\", testing::AnyOf(\"standalone\", \"cluster\"), \"role\", \"master\"));\n \ndiff --git a/tests/dragonfly/acl_family_test.py b/tests/dragonfly/acl_family_test.py\nindex d04f6f9e3956..d41858cd8505 100644\n--- a/tests/dragonfly/acl_family_test.py\n+++ b/tests/dragonfly/acl_family_test.py\n@@ -616,7 +616,7 @@ async def test_auth_resp3_bug(df_factory):\n     await client.execute_command(\"ACL SETUSER kostas +@all ON >tmp\")\n     res = await client.execute_command(\"HELLO 3 AUTH kostas tmp\")\n     assert res[\"server\"] == \"redis\"\n-    assert res[\"version\"] == \"6.2.11\"\n+    assert res[\"version\"] == \"7.2.0\"\n     assert res[\"proto\"] == 3\n     assert res[\"mode\"] == \"standalone\"\n     assert res[\"role\"] == \"master\"\n",
  "problem_statement": "redis_version reports \"6.2.11\"\nHi, I'm the author of Sidekiq which supports Redis, Valkey and Dragonfly as its backing store. I'm working through a major new 8.0 release coming in 2025Q1, which includes removing support for older, unsupported Redis versions.\r\n\r\nRedis 7.0 and 7.1 are unsupported, 6.2 will be unsupported very soon. To that end, I'd like to require Redis 7.2 going forward. I envision supporting 7.2 for years to come due to licensing issues.\r\n\r\nThis requirement works fine with Redis and Valkey but Dragonfly latest is still reporting 6.2.11 as its \"redis_version\" in the INFO output. Any tips/advice on how to proceed? I could check the actual Dragonfly version but I need to validate that your engine has Redis 7.2 features so I can use them. Am I limited to 6.2 features if I want to support Dragonfly?\r\n\r\nhttps://github.com/sidekiq/sidekiq/blob/main/lib/sidekiq/cli.rb#L77\n",
  "hints_text": "Hi @mperham \r\nThanks for reaching out!\r\nYou are not limited to redis 6.2 when using dragonfly, but I believe we have some gaps with redis 7.2 api.\r\nDid you try runinng dragonfly with the new release and see errors reported by dragonfly that we are not supporting some apis that you use? If not suggest doing so, I guess this will be the easiest way to know if we are missing something that you need.\r\nOr you can list here your changes in your new version regarding redis apis and we can respond if there is something we believe is missing.\r\nThanks:)\nI don't have any functional issues as of yet since I haven't started the process of reviewing and refactoring to use those >6.2 changes. This was my first step to do so.\nI see. In this case it will be hard to tell if we miss some functionality that you will need. I suggest to check against latest dragonfly version and as you progress with new changes if we miss something you can open an issue for it, and once the fix is in you can check against the dragonfly version that has this new feature.\nWell, my CI runs all three engines against the test suite so we've got pretty good coverage there, that's how I found out about this issue in the first place. The problem is that I don't want to have to add special logic for each engine version check. I'd rather just check against your reported redis_version. I'm happy to drop back down to 7.0 if that helps, it doesn't look like 7.{1,2} added much relevant functionality for my needs but I could use the NX flag on EXPIRE in 7.0.\nLooking into our code commit history it looks like we started returning redis_version to support Sidekiq client :)\r\nWe will make the change to report redis_version 7.2\r\n",
  "created_at": "2024-12-10T15:56:16Z",
  "modified_files": [
    "src/server/server_family.cc"
  ],
  "modified_test_files": [
    "src/server/dragonfly_test.cc",
    "tests/dragonfly/acl_family_test.py"
  ]
}