{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 5210,
  "instance_id": "dragonflydb__dragonfly-5210",
  "issue_numbers": [
    "5209"
  ],
  "base_commit": "0e8d7661d25e6f6b7393e9f155780ecf3e0c41fc",
  "patch": "diff --git a/src/server/http_api.cc b/src/server/http_api.cc\nindex 8aa4c7b64cee..a5dc19f60e3a 100644\n--- a/src/server/http_api.cc\n+++ b/src/server/http_api.cc\n@@ -140,13 +140,17 @@ struct CaptureVisitor {\n       absl::StrAppend(&str, \"[]\");\n       return;\n     }\n-\n     absl::StrAppend(&str, \"[\");\n+    bool append_delimiter = false;\n     for (auto& pl : cp->arr) {\n+      if (append_delimiter) {\n+        absl::StrAppend(&str, \",\");\n+      }\n+      append_delimiter = true;\n       visit(*this, std::move(pl));\n     }\n+    absl::StrAppend(&str, \"]\");\n   }\n-\n   string str;\n };\n \n",
  "test_patch": "diff --git a/tests/dragonfly/http_conf_test.py b/tests/dragonfly/http_conf_test.py\nindex 4bc73c1dfdce..4ed082d1438b 100644\n--- a/tests/dragonfly/http_conf_test.py\n+++ b/tests/dragonfly/http_conf_test.py\n@@ -1,4 +1,5 @@\n import aiohttp\n+import json\n from . import dfly_args\n from .instance import DflyInstance\n \n@@ -127,3 +128,58 @@ async def test_password_on_http_api(df_server: DflyInstance):\n     async with get_http_session(\"default\", \"XXX\") as session:\n         resp = await session.post(f\"http://localhost:{df_server.port}/api\", json=[\"ping\"])\n         assert resp.status == 200\n+\n+\n+def get_json_object(json_str):\n+    try:\n+        json_obj = json.loads(json_str)\n+        return json_obj\n+    except ValueError:\n+        return None\n+\n+\n+@dfly_args({\"proactor_threads\": \"1\", \"expose_http_api\": \"true\", \"slowlog_log_slower_than\": 0})\n+async def test_http_api_json_response(df_server: DflyInstance):\n+    client = df_server.client()\n+    async with get_http_session() as session:\n+        body = '[\"set\", \"foo\",\"bar\"]'\n+        async with session.post(f\"http://localhost:{df_server.port}/api\", data=body) as resp:\n+            assert resp.status == 200\n+            text = await resp.text()\n+            json_object = get_json_object(text)\n+            assert json_object != None\n+            assert json_object == {\"result\": \"OK\"}\n+\n+        body = '[\"get\", \"foo\"]'\n+        async with session.post(f\"http://localhost:{df_server.port}/api\", data=body) as resp:\n+            assert resp.status == 200\n+            text = await resp.text()\n+            json_object = get_json_object(text)\n+            assert json_object != None\n+            assert json_object == {\"result\": \"bar\"}\n+\n+        body = '[\"slowlog\", \"get\"]'\n+        async with session.post(f\"http://localhost:{df_server.port}/api\", data=body) as resp:\n+            assert resp.status == 200\n+            text = await resp.text()\n+            json_object = get_json_object(text)\n+            assert json_object != None\n+            # Compare commands\n+            assert json_object[\"result\"][0][3] == [\"GET\", \"foo\"]\n+            assert json_object[\"result\"][1][3] == [\"SET\", \"foo\", \"bar\"]\n+\n+        body = '[\"hset\", \"myhash\", \"k1\", \"1\", \"k2\", \"2\"]'\n+        async with session.post(f\"http://localhost:{df_server.port}/api\", data=body) as resp:\n+            assert resp.status == 200\n+            text = await resp.text()\n+            json_object = get_json_object(text)\n+            assert json_object != None\n+            assert json_object == {\"result\": 2}\n+\n+        body = '[\"hkeys\", \"myhash\"]'\n+        async with session.post(f\"http://localhost:{df_server.port}/api\", data=body) as resp:\n+            assert resp.status == 200\n+            text = await resp.text()\n+            json_object = get_json_object(text)\n+            assert json_object != None\n+            assert json_object[\"result\"] == [\"k1\", \"k2\"]\n",
  "problem_statement": "http api returns invalid json\n**Describe the bug**\nwhen running a `HKEYS` lookup using the new http api `--expose_http_api` it returns invalid json data\n\n**To Reproduce**\n```\ncurl --location 'http://127.0.0.1:6379/api' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Basic notmyauth' \\\n--data '[\"HKEYS\",\"0.0.0.0.0\"]'\n```\nreturns\n```\n{\"result\":[\"test1\"\"test2\"}\n```\n**Expected behavior**\nthe json format is missing a comma and a ]\n```\n{\"result\":[\"test1\",\"test2\"]}\n```\n\n**Screenshots**\n\n![Image](https://github.com/user-attachments/assets/058ee570-4280-4f88-a1d9-b907085d3496)\n\n**Environment (please complete the following information):**\n - OS: Debian 12\n - Kernel: # Command: Linux db 6.1.0-28-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.119-1 (2024-11-22) x86_64 GNU/Linux\n - Containerized?: Bare Metal\n - Dragonfly Version: v1.30.2-d64db70f296d4bf6d7a11fb6aa4eaeec9088a9fc\n\n**Reproducible Code Snippet**\nsee above\n\n\n",
  "hints_text": "Hi @LessThanGreaterThan thank you for bug reported.\nIssue is verified and we will look into it.",
  "created_at": "2025-06-01T17:55:28Z",
  "modified_files": [
    "src/server/http_api.cc"
  ],
  "modified_test_files": [
    "tests/dragonfly/http_conf_test.py"
  ]
}