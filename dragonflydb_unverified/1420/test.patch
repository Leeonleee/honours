diff --git a/tests/dragonfly/conftest.py b/tests/dragonfly/conftest.py
index b7c6d7845ccb..5de3fa3a6979 100644
--- a/tests/dragonfly/conftest.py
+++ b/tests/dragonfly/conftest.py
@@ -80,7 +80,7 @@ def df_factory(request, tmp_dir, test_env) -> DflyInstanceFactory:
         args=request.config.getoption("--df"),
         existing_port=int(existing) if existing else None,
         existing_admin_port=int(existing_admin) if existing_admin else None,
-        existing_mc_port=int(existing_mc) if existing else None,
+        existing_mc_port=int(existing_mc) if existing_mc else None,
         env=test_env
     )
 
diff --git a/tests/dragonfly/connection_test.py b/tests/dragonfly/connection_test.py
index 059ee4d17fd7..8b32e3e71af5 100644
--- a/tests/dragonfly/connection_test.py
+++ b/tests/dragonfly/connection_test.py
@@ -4,7 +4,8 @@
 from redis import asyncio as aioredis
 import async_timeout
 
-from . import DflyInstance
+from . import DflyInstance, dfly_args
+
 
 async def run_monitor_eval(monitor, expected):
     async with monitor as mon:
@@ -346,7 +347,8 @@ async def test_subscribe_in_pipeline(async_client: aioredis.Redis):
     pipe.echo("three")
     res = await pipe.execute()
 
-    assert res == ['one', ['subscribe', 'ch1', 1], 'two', ['subscribe', 'ch2', 2], 'three']
+    assert res == ['one', ['subscribe', 'ch1', 1],
+                   'two', ['subscribe', 'ch2', 2], 'three']
 
 """
 This test makes sure that Dragonfly can receive blocks of pipelined commands even
@@ -376,6 +378,7 @@ async def test_subscribe_in_pipeline(async_client: aioredis.Redis):
 PING
 """ * 500 + "ECHO DONE
"
 
+
 async def test_parser_while_script_running(async_client: aioredis.Redis, df_server: DflyInstance):
     sha = await async_client.script_load(BUSY_SCRIPT)
 
@@ -399,3 +402,16 @@ async def test_parser_while_script_running(async_client: aioredis.Redis, df_serv
     await reader.readuntil(b"DONE")
     writer.close()
     await writer.wait_closed()
+
+
+@dfly_args({"proactor_threads": 1})
+async def test_large_cmd(async_client: aioredis.Redis):
+    MAX_ARR_SIZE = 65535
+    res = await async_client.hset('foo', mapping={f"key{i}": f"val{i}" for i in range(MAX_ARR_SIZE // 2)})
+    assert res == MAX_ARR_SIZE // 2
+
+    res = await async_client.mset({f"key{i}": f"val{i}" for i in range(MAX_ARR_SIZE // 2)})
+    assert res
+
+    res = await async_client.mget([f"key{i}" for i in range(MAX_ARR_SIZE)])
+    assert len(res) == MAX_ARR_SIZE
