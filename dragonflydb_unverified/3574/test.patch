diff --git a/src/server/acl/acl_family_test.cc b/src/server/acl/acl_family_test.cc
index 7c41ed4042fc..c1f2f83e81ac 100644
--- a/src/server/acl/acl_family_test.cc
+++ b/src/server/acl/acl_family_test.cc
@@ -48,15 +48,16 @@ TEST_F(AclFamilyTest, AclSetUser) {
   EXPECT_THAT(resp, "OK");
   resp = Run({"ACL", "LIST"});
   auto vec = resp.GetVec();
-  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* +@all", "user vlad off -@all"));
+  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* &* +@all",
+                                        "user vlad off resetchannels -@all"));
 
   resp = Run({"ACL", "SETUSER", "vlad", "+ACL"});
   EXPECT_THAT(resp, "OK");
 
   resp = Run({"ACL", "LIST"});
   vec = resp.GetVec();
-  EXPECT_THAT(vec,
-              UnorderedElementsAre("user default on nopass ~* +@all", "user vlad off -@all +acl"));
+  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* &* +@all",
+                                        "user vlad off resetchannels -@all +acl"));
 
   resp = Run({"ACL", "SETUSER", "vlad", "on", ">pass", ">temp"});
   EXPECT_THAT(resp, "OK");
@@ -65,9 +66,11 @@ TEST_F(AclFamilyTest, AclSetUser) {
   vec = resp.GetVec();
   EXPECT_THAT(vec.size(), 2);
   auto contains_vlad = [](const auto& vec) {
-    const std::string default_user = "user default on nopass ~* +@all";
-    const std::string a_permutation = "user vlad on #a6864eb339b0e1f #d74ff0ee8da3b98 -@all +acl";
-    const std::string b_permutation = "user vlad on #d74ff0ee8da3b98 #a6864eb339b0e1f -@all +acl";
+    const std::string default_user = "user default on nopass ~* &* +@all";
+    const std::string a_permutation =
+        "user vlad on #a6864eb339b0e1f #d74ff0ee8da3b98 resetchannels -@all +acl";
+    const std::string b_permutation =
+        "user vlad on #d74ff0ee8da3b98 #a6864eb339b0e1f resetchannels -@all +acl";
     std::string_view other;
     if (vec[0] == default_user) {
       other = vec[1].GetView();
@@ -107,8 +110,8 @@ TEST_F(AclFamilyTest, AclSetUser) {
 
   resp = Run({"ACL", "LIST"});
   vec = resp.GetVec();
-  EXPECT_THAT(vec,
-              UnorderedElementsAre("user default on nopass ~* +@all", "user vlad on -@all +acl"));
+  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* &* +@all",
+                                        "user vlad on resetchannels -@all +acl"));
 
   // +@NONE should not exist anymore. It's not in the spec.
   resp = Run({"ACL", "SETUSER", "rand", "+@NONE"});
@@ -139,7 +142,7 @@ TEST_F(AclFamilyTest, AclDelUser) {
   EXPECT_THAT(resp, IntArg(0));
 
   resp = Run({"ACL", "LIST"});
-  EXPECT_THAT(resp.GetString(), "user default on nopass ~* +@all");
+  EXPECT_THAT(resp.GetString(), "user default on nopass ~* &* +@all");
 
   Run({"ACL", "SETUSER", "michael", "ON"});
   Run({"ACL", "SETUSER", "kobe", "ON"});
@@ -160,9 +163,10 @@ TEST_F(AclFamilyTest, AclList) {
 
   resp = Run({"ACL", "LIST"});
   auto vec = resp.GetVec();
-  EXPECT_THAT(vec, UnorderedElementsAre("user default on nopass ~* +@all",
-                                        "user kostas off #d74ff0ee8da3b98 -@all +@admin",
-                                        "user adi off #d74ff0ee8da3b98 -@all +@fast"));
+  EXPECT_THAT(vec,
+              UnorderedElementsAre("user default on nopass ~* &* +@all",
+                                   "user kostas off #d74ff0ee8da3b98 resetchannels -@all +@admin",
+                                   "user adi off #d74ff0ee8da3b98 resetchannels -@all +@fast"));
 }
 
 TEST_F(AclFamilyTest, AclAuth) {
@@ -210,17 +214,19 @@ TEST_F(AclFamilyTest, TestAllCategories) {
       EXPECT_THAT(resp, "OK");
 
       resp = Run({"ACL", "LIST"});
-      EXPECT_THAT(resp.GetVec(), UnorderedElementsAre("user default on nopass ~* +@all",
-                                                      absl::StrCat("user kostas off -@all ", "+@",
-                                                                   absl::AsciiStrToLower(cat))));
+      EXPECT_THAT(resp.GetVec(),
+                  UnorderedElementsAre("user default on nopass ~* &* +@all",
+                                       absl::StrCat("user kostas off resetchannels -@all ", "+@",
+                                                    absl::AsciiStrToLower(cat))));
 
       resp = Run({"ACL", "SETUSER", "kostas", absl::StrCat("-@", cat)});
       EXPECT_THAT(resp, "OK");
 
       resp = Run({"ACL", "LIST"});
-      EXPECT_THAT(resp.GetVec(), UnorderedElementsAre("user default on nopass ~* +@all",
-                                                      absl::StrCat("user kostas off -@all ", "-@",
-                                                                   absl::AsciiStrToLower(cat))));
+      EXPECT_THAT(resp.GetVec(),
+                  UnorderedElementsAre("user default on nopass ~* &* +@all",
+                                       absl::StrCat("user kostas off resetchannels -@all ", "-@",
+                                                    absl::AsciiStrToLower(cat))));
 
       resp = Run({"ACL", "DELUSER", "kostas"});
       EXPECT_THAT(resp, IntArg(1));
@@ -259,16 +265,16 @@ TEST_F(AclFamilyTest, TestAllCommands) {
 
       resp = Run({"ACL", "LIST"});
       EXPECT_THAT(resp.GetVec(),
-                  UnorderedElementsAre("user default on nopass ~* +@all",
-                                       absl::StrCat("user kostas off -@all ", "+",
+                  UnorderedElementsAre("user default on nopass ~* &* +@all",
+                                       absl::StrCat("user kostas off resetchannels -@all ", "+",
                                                     absl::AsciiStrToLower(command_name))));
 
       resp = Run({"ACL", "SETUSER", "kostas", absl::StrCat("-", command_name)});
 
       resp = Run({"ACL", "LIST"});
       EXPECT_THAT(resp.GetVec(),
-                  UnorderedElementsAre("user default on nopass ~* +@all",
-                                       absl::StrCat("user kostas off ", "-@all ", "-",
+                  UnorderedElementsAre("user default on nopass ~* &* +@all",
+                                       absl::StrCat("user kostas off resetchannels -@all ", "-",
                                                     absl::AsciiStrToLower(command_name))));
 
       resp = Run({"ACL", "DELUSER", "kostas"});
@@ -321,6 +327,8 @@ TEST_F(AclFamilyTest, TestGetUser) {
   EXPECT_THAT(vec[5], "+@all");
   EXPECT_THAT(vec[6], "keys");
   EXPECT_THAT(vec[7], "~*");
+  EXPECT_THAT(vec[8], "channels");
+  EXPECT_THAT(vec[9], "&*");
 
   resp = Run({"ACL", "SETUSER", "kostas", "+@STRING", "+HSET"});
   resp = Run({"ACL", "GETUSER", "kostas"});
@@ -331,6 +339,10 @@ TEST_F(AclFamilyTest, TestGetUser) {
   EXPECT_TRUE(kvec[3].GetVec().empty());
   EXPECT_THAT(kvec[4], "commands");
   EXPECT_THAT(kvec[5], "-@all +@string +hset");
+  EXPECT_THAT(kvec[6], "keys");
+  EXPECT_THAT(kvec[7], RespArray(ElementsAre()));
+  EXPECT_THAT(kvec[8], "channels");
+  EXPECT_THAT(kvec[9], "resetchannels");
 }
 
 TEST_F(AclFamilyTest, TestDryRun) {
@@ -431,7 +443,7 @@ TEST_F(AclFamilyTest, TestKeys) {
   EXPECT_THAT(vec[7], "~foo ~bar*");
 
   resp = Run({"ACL", "SETUSER", "temp", "~*", "~foo"});
-  EXPECT_THAT(resp, ErrArg("ERR Error in ACL SETUSER modifier '~tmp': Adding a pattern after the * "
+  EXPECT_THAT(resp, ErrArg("ERR Error in ACL SETUSER modifier '~foo': Adding a pattern after the * "
                            "pattern (or the 'allkeys' flag) is not valid and does not have any "
                            "effect. Try 'resetkeys' to start with an empty list of patterns"));
 
@@ -439,7 +451,7 @@ TEST_F(AclFamilyTest, TestKeys) {
   EXPECT_THAT(resp, "OK");
 
   resp = Run({"ACL", "SETUSER", "temp", "~foo"});
-  EXPECT_THAT(resp, ErrArg("ERR Error in ACL SETUSER modifier '~tmp': Adding a pattern after the * "
+  EXPECT_THAT(resp, ErrArg("ERR Error in ACL SETUSER modifier '~foo': Adding a pattern after the * "
                            "pattern (or the 'allkeys' flag) is not valid and does not have any "
                            "effect. Try 'resetkeys' to start with an empty list of patterns"));
 
@@ -474,4 +486,37 @@ TEST_F(AclFamilyTest, TestKeys) {
   EXPECT_THAT(resp, ErrArg("ERR Unrecognized parameter %RFOO"));
 }
 
+TEST_F(AclFamilyTest, TestPubSub) {
+  TestInitAclFam();
+
+  auto resp = Run({"ACL", "SETUSER", "temp", "&foo", "&b*r"});
+  EXPECT_THAT(resp, "OK");
+
+  resp = Run({"ACL", "GETUSER", "temp"});
+  auto vec = resp.GetVec();
+  EXPECT_THAT(vec[8], "channels");
+  EXPECT_THAT(vec[9], "resetchannels &foo &b*r");
+
+  resp = Run({"ACL", "SETUSER", "temp", "allchannels", "&bar"});
+  EXPECT_THAT(resp, ErrArg("ERR Error in ACL SETUSER modifier '&bar': Adding a pattern after the * "
+                           "pattern (or the 'allchannels' flag) is "
+                           "not valid and does not have any effect. Try 'resetchannels' to start "
+                           "with an empty list of channels"));
+
+  resp = Run({"ACL", "SETUSER", "temp", "allchannels"});
+  EXPECT_THAT(resp, "OK");
+
+  resp = Run({"ACL", "GETUSER", "temp"});
+  vec = resp.GetVec();
+  EXPECT_THAT(vec[8], "channels");
+  EXPECT_THAT(vec[9], "&*");
+
+  resp = Run({"ACL", "SETUSER", "temp", "resetchannels", "&foo"});
+  EXPECT_THAT(resp, "OK");
+
+  resp = Run({"ACL", "GETUSER", "temp"});
+  vec = resp.GetVec();
+  EXPECT_THAT(vec[8], "channels");
+  EXPECT_THAT(vec[9], "resetchannels &foo");
+}
 }  // namespace dfly
diff --git a/tests/dragonfly/acl_family_test.py b/tests/dragonfly/acl_family_test.py
index f7ae8ecead3b..81ee14ea61ec 100644
--- a/tests/dragonfly/acl_family_test.py
+++ b/tests/dragonfly/acl_family_test.py
@@ -7,60 +7,69 @@
 import asyncio
 import os
 from . import dfly_args
+import async_timeout
 
 
 @pytest.mark.asyncio
 async def test_acl_setuser(async_client):
     await async_client.execute_command("ACL SETUSER kostas")
-    result = await async_client.execute_command("ACL list")
+    result = await async_client.execute_command("ACL LIST")
     assert 2 == len(result)
-    assert "user kostas off -@all" in result
+    assert "user kostas off resetchannels -@all" in result
 
     await async_client.execute_command("ACL SETUSER kostas ON")
-    result = await async_client.execute_command("ACL list")
-    assert "user kostas on -@all" in result
+    result = await async_client.execute_command("ACL LIST")
+    assert "user kostas on resetchannels -@all" in result
 
     await async_client.execute_command("ACL SETUSER kostas +@list +@string +@admin")
-    result = await async_client.execute_command("ACL list")
+    result = await async_client.execute_command("ACL LIST")
     # TODO consider printing to lowercase
-    assert "user kostas on -@all +@list +@string +@admin" in result
+    assert "user kostas on resetchannels -@all +@list +@string +@admin" in result
 
     await async_client.execute_command("ACL SETUSER kostas -@list -@admin")
-    result = await async_client.execute_command("ACL list")
-    assert "user kostas on -@all +@string -@list -@admin" in result
+    result = await async_client.execute_command("ACL LIST")
+    assert "user kostas on resetchannels -@all +@string -@list -@admin" in result
 
     # mix and match
     await async_client.execute_command("ACL SETUSER kostas +@list -@string")
-    result = await async_client.execute_command("ACL list")
-    assert "user kostas on -@all -@admin +@list -@string" in result
+    result = await async_client.execute_command("ACL LIST")
+    assert "user kostas on resetchannels -@all -@admin +@list -@string" in result
 
     # mix and match interleaved
     await async_client.execute_command("ACL SETUSER kostas +@set -@set +@set")
-    result = await async_client.execute_command("ACL list")
-    assert "user kostas on -@all -@admin +@list -@string +@set" in result
+    result = await async_client.execute_command("ACL LIST")
+    assert "user kostas on resetchannels -@all -@admin +@list -@string +@set" in result
 
     await async_client.execute_command("ACL SETUSER kostas +@all")
-    result = await async_client.execute_command("ACL list")
-    assert "user kostas on -@admin +@list -@string +@set +@all" in result
+    result = await async_client.execute_command("ACL LIST")
+    assert "user kostas on resetchannels -@admin +@list -@string +@set +@all" in result
 
     # commands
     await async_client.execute_command("ACL SETUSER kostas +set +get +hset")
-    result = await async_client.execute_command("ACL list")
-    assert "user kostas on -@admin +@list -@string +@set +@all +set +get +hset" in result
+    result = await async_client.execute_command("ACL LIST")
+    assert (
+        "user kostas on resetchannels -@admin +@list -@string +@set +@all +set +get +hset" in result
+    )
 
     await async_client.execute_command("ACL SETUSER kostas -set -get +hset")
-    result = await async_client.execute_command("ACL list")
-    assert "user kostas on -@admin +@list -@string +@set +@all -set -get +hset" in result
+    result = await async_client.execute_command("ACL LIST")
+    assert (
+        "user kostas on resetchannels -@admin +@list -@string +@set +@all -set -get +hset" in result
+    )
 
     # interleaved
     await async_client.execute_command("ACL SETUSER kostas -hset +get -get -@all")
-    result = await async_client.execute_command("ACL list")
-    assert "user kostas on -@admin +@list -@string +@set -set -hset -get -@all" in result
+    result = await async_client.execute_command("ACL LIST")
+    assert (
+        "user kostas on resetchannels -@admin +@list -@string +@set -set -hset -get -@all" in result
+    )
 
     # interleaved with categories
     await async_client.execute_command("ACL SETUSER kostas +@string +get -get +set")
-    result = await async_client.execute_command("ACL list")
-    assert "user kostas on -@admin +@list +@set -hset -@all +@string -get +set" in result
+    result = await async_client.execute_command("ACL LIST")
+    assert (
+        "user kostas on resetchannels -@admin +@list +@set -hset -@all +@string -get +set" in result
+    )
 
 
 @pytest.mark.asyncio
@@ -324,7 +333,7 @@ async def test_bad_acl_file(df_factory, tmp_dir):
 async def test_good_acl_file(df_factory, tmp_dir):
     # The hash below is password temp
     acl = create_temp_file(
-        "USER MrFoo ON #a6864eb339b0e1f6e00d75293a8840abf069a2c0fe82e6e53af6ac099793c1d5 >mypass",
+        "USER MrFoo ON #a6864eb339b0e1f6e00d75293a8840abf069a2c0fe82e6e53af6ac099793c1d5 >mypass &bar &r*nd",
         tmp_dir,
     )
     df = df_factory.create(aclfile=acl)
@@ -333,13 +342,14 @@ async def test_good_acl_file(df_factory, tmp_dir):
     client = df.client()
 
     await client.execute_command("ACL LOAD")
-    result = await client.execute_command("ACL list")
+    result = await client.execute_command("ACL LIST")
     assert 2 == len(result)
     assert (
-        "user MrFoo on #ea71c25a7a60224 #a6864eb339b0e1f -@all" in result
-        or "user MrFoo on #a6864eb339b0e1f #ea71c25a7a60224 -@all" in result
+        "user MrFoo on #ea71c25a7a60224 #a6864eb339b0e1f resetchannels &bar &r*nd -@all" in result
+        or "user MrFoo on #a6864eb339b0e1f #ea71c25a7a60224 resetchannels &bar &r*nd -@all"
+        in result
     )
-    assert "user default on nopass ~* +@all" in result
+    assert "user default on nopass ~* &* +@all" in result
     await client.execute_command("ACL SETUSER MrFoo +@all")
     # Check multiple passwords work
     assert "OK" == await client.execute_command("AUTH mypass")
@@ -351,12 +361,12 @@ async def test_good_acl_file(df_factory, tmp_dir):
     await client.execute_command("ACL SETUSER shahar >mypass +@set")
     await client.execute_command("ACL SETUSER vlad ~foo ~bar* +@string")
 
-    result = await client.execute_command("ACL list")
+    result = await client.execute_command("ACL LIST")
     assert 4 == len(result)
-    assert "user roy on #ea71c25a7a60224 -@all +@string +hset" in result
-    assert "user shahar off #ea71c25a7a60224 -@all +@set" in result
-    assert "user vlad off ~foo ~bar* -@all +@string" in result
-    assert "user default on nopass ~* +@all" in result
+    assert "user roy on #ea71c25a7a60224 resetchannels -@all +@string +hset" in result
+    assert "user shahar off #ea71c25a7a60224 resetchannels -@all +@set" in result
+    assert "user vlad off ~foo ~bar* resetchannels -@all +@string" in result
+    assert "user default on nopass ~* &* +@all" in result
 
     result = await client.execute_command("ACL DELUSER shahar")
     assert result == 1
@@ -365,11 +375,11 @@ async def test_good_acl_file(df_factory, tmp_dir):
 
     result = await client.execute_command("ACL LOAD")
 
-    result = await client.execute_command("ACL list")
+    result = await client.execute_command("ACL LIST")
     assert 3 == len(result)
-    assert "user roy on #ea71c25a7a60224 -@all +@string +hset" in result
-    assert "user vlad off ~foo ~bar* -@all +@string" in result
-    assert "user default on nopass ~* +@all" in result
+    assert "user roy on #ea71c25a7a60224 resetchannels -@all +@string +hset" in result
+    assert "user vlad off ~foo ~bar* resetchannels -@all +@string" in result
+    assert "user default on nopass ~* &* +@all" in result
 
     await client.close()
 
@@ -483,7 +493,7 @@ async def test_set_acl_file(async_client: aioredis.Redis, tmp_dir):
 
     await async_client.execute_command("ACL LOAD")
 
-    result = await async_client.execute_command("ACL list")
+    result = await async_client.execute_command("ACL LIST")
     assert 3 == len(result)
 
     result = await async_client.execute_command("AUTH roy mypass")
@@ -635,3 +645,83 @@ async def test_auth_resp3_bug(df_factory):
     }
 
     await client.close()
+
+
+@pytest.mark.asyncio
+async def test_acl_pub_sub_auth(df_factory):
+    df = df_factory.create()
+    df.start()
+    client = df.client()
+    await client.execute_command("ACL SETUSER kostas on >tmp +subscribe +psubscribe &f*o &bar")
+    assert await client.execute_command("AUTH kostas tmp") == "OK"
+
+    res = await client.execute_command("SUBSCRIBE bar")
+    assert res == ["subscribe", "bar", 1]
+
+    res = await client.execute_command("SUBSCRIBE foo")
+    assert res == ["subscribe", "foo", 2]
+
+    with pytest.raises(redis.exceptions.NoPermissionError):
+        res = await client.execute_command("SUBSCRIBE my_channel")
+
+    # PSUBSCRIBE only matches pure literals, no asterisks
+    with pytest.raises(redis.exceptions.NoPermissionError):
+        res = await client.execute_command("PSUBSCRIBE foo")
+
+    # my_channel is not in our list so the command should fail
+    with pytest.raises(redis.exceptions.NoPermissionError):
+        res = await client.execute_command("PSUBSCRIBE bar my_channel")
+
+    res = await client.execute_command("PSUBSCRIBE bar")
+    assert res == ["psubscribe", "bar", 3]
+
+
+@pytest.mark.asyncio
+async def test_acl_revoke_pub_sub_while_subscribed(df_factory):
+    df = df_factory.create()
+    df.start()
+    publisher = df.client()
+
+    async def publish_worker(client):
+        for i in range(0, 10):
+            await client.publish("channel", "message")
+
+    async def subscribe_worker(channel: aioredis.client.PubSub):
+        total_msgs = 1
+        async with async_timeout.timeout(10):
+            while total_msgs != 10:
+                res = await channel.get_message(ignore_subscribe_messages=True, timeout=5)
+                if total_msgs is not None:
+                    total_msgs = total_msgs + 1
+
+    await publisher.execute_command("ACL SETUSER kostas >tmp ON +@slow +SUBSCRIBE allchannels")
+
+    subscriber = aioredis.Redis(
+        username="kostas", password="tmp", port=df.port, decode_responses=True
+    )
+    subscriber_obj = subscriber.pubsub()
+    await subscriber_obj.subscribe("channel")
+
+    subscribe_task = asyncio.create_task(subscribe_worker(subscriber_obj))
+    await publish_worker(publisher)
+    await subscribe_task
+
+    subscribe_task = asyncio.create_task(subscribe_worker(subscriber_obj))
+    # Already subscribed, we should still be able to receive messages on channel
+    # We should not be able to unsubscribe
+    await publisher.execute_command("ACL SETUSER kostas -SUBSCRIBE -UNSUBSCRIBE")
+    await publish_worker(publisher)
+    await subscribe_task
+    # unsubscribe is not marked async and it's such a mess that it throws the error
+    # once we try to resubscribe. Instead I use the raw execute command to check that
+    # permission changes work
+    with pytest.raises(redis.exceptions.NoPermissionError):
+        await subscriber.execute_command("UNSUBSCRIBE channel")
+
+    await publisher.execute_command("ACL SETUSER kostas +SUBSCRIBE +UNSUBSCRIBE")
+
+    subscribe_task = asyncio.create_task(subscribe_worker(subscriber_obj))
+    await publisher.execute_command("ACL SETUSER kostas resetchannels")
+    await publish_worker(publisher)
+    with pytest.raises(redis.exceptions.ConnectionError):
+        await subscribe_task
