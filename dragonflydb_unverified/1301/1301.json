{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1301,
  "instance_id": "dragonflydb__dragonfly-1301",
  "issue_numbers": [
    "1270"
  ],
  "base_commit": "cc067dede998324528d159a0a79d6f70fb485d78",
  "patch": "diff --git a/src/server/cluster/cluster_config.cc b/src/server/cluster/cluster_config.cc\nindex ca646ec71edb..13ae9189a85e 100644\n--- a/src/server/cluster/cluster_config.cc\n+++ b/src/server/cluster/cluster_config.cc\n@@ -109,6 +109,12 @@ optional<SlotSet> ClusterConfig::SetConfig(const vector<ClusterShard>& new_confi\n     return nullopt;\n   }\n \n+  // When set config is called the first time, deleted_slots will contain all slots which are not\n+  // allocated to this node. This makes sure that if there is data in server that was loaded from\n+  // disk (rdb_load), then after the call to set config the server data will contain only data from\n+  // the node owned slots.\n+  bool is_first_config = !IsConfigured();\n+\n   lock_guard gu(mu_);\n \n   config_ = new_config;\n@@ -120,7 +126,7 @@ optional<SlotSet> ClusterConfig::SetConfig(const vector<ClusterShard>& new_confi\n           shard.master.id == my_id_ || any_of(shard.replicas.begin(), shard.replicas.end(),\n                                               [&](const Node& node) { return node.id == my_id_; });\n       for (SlotId i = slot_range.start; i <= slot_range.end; ++i) {\n-        if (slots_[i].owned_by_me && !owned_by_me) {\n+        if ((slots_[i].owned_by_me || is_first_config) && !owned_by_me) {\n           deleted_slots.insert(i);\n         }\n         slots_[i] = {.shard = &shard, .owned_by_me = owned_by_me};\n",
  "test_patch": "diff --git a/src/server/cluster_config_test.cc b/src/server/cluster_config_test.cc\nindex 70777c64045a..5a07c134d513 100644\n--- a/src/server/cluster_config_test.cc\n+++ b/src/server/cluster_config_test.cc\n@@ -129,44 +129,36 @@ TEST_F(ClusterConfigTest, ConfigSetMultipleInstances) {\n \n TEST_F(ClusterConfigTest, ConfigSetGetDeletedSlots) {\n   auto ds =\n-      config_.SetConfig({{.slot_ranges = {{.start = 0, .end = 5'000}},\n+      config_.SetConfig({{.slot_ranges = {{.start = 0, .end = 16'380}},\n                           .master = {.id = kMyId, .ip = \"192.168.0.100\", .port = 7000},\n                           .replicas = {}},\n-                         {.slot_ranges = {{.start = 5'001, .end = 10'000}},\n-                          .master = {.id = \"other-master\", .ip = \"192.168.0.102\", .port = 7002},\n-                          .replicas = {}},\n-                         {.slot_ranges = {{.start = 10'001, .end = 0x3FFF}},\n+                         {.slot_ranges = {{.start = 16'381, .end = 0x3FFF}},\n                           .master = {.id = \"other-master2\", .ip = \"192.168.0.104\", .port = 7004},\n                           .replicas = {}}});\n \n   EXPECT_TRUE(ds.has_value());\n-  EXPECT_TRUE(ds.value().empty());  // On first config set no deleted slots.\n+  // On first config non owned slots are returned as deleted\n+  EXPECT_THAT(ds.value(), UnorderedElementsAre(16'381, 16'382, 16'383));\n \n-  ds = config_.SetConfig({{.slot_ranges = {{.start = 0, .end = 6'000}},\n+  ds = config_.SetConfig({{.slot_ranges = {{.start = 0, .end = 16'381}},\n                            .master = {.id = kMyId, .ip = \"192.168.0.100\", .port = 7000},\n                            .replicas = {}},\n-                          {.slot_ranges = {{.start = 6'001, .end = 10'000}},\n-                           .master = {.id = \"other-master\", .ip = \"192.168.0.102\", .port = 7002},\n-                           .replicas = {}},\n-                          {.slot_ranges = {{.start = 10'001, .end = 0x3FFF}},\n+                          {.slot_ranges = {{.start = 16'382, .end = 0x3FFF}},\n                            .master = {.id = \"other-master2\", .ip = \"192.168.0.104\", .port = 7004},\n                            .replicas = {}}});\n \n   EXPECT_TRUE(ds.has_value());\n   EXPECT_TRUE(ds.value().empty());  // On second config no slots taken from ownership\n \n-  ds = config_.SetConfig({{.slot_ranges = {{.start = 0, .end = 5'997}},\n+  ds = config_.SetConfig({{.slot_ranges = {{.start = 0, .end = 16'378}},\n                            .master = {.id = kMyId, .ip = \"192.168.0.100\", .port = 7000},\n                            .replicas = {}},\n-                          {.slot_ranges = {{.start = 5'998, .end = 10'000}},\n-                           .master = {.id = \"other-master\", .ip = \"192.168.0.102\", .port = 7002},\n-                           .replicas = {}},\n-                          {.slot_ranges = {{.start = 10'001, .end = 0x3FFF}},\n+                          {.slot_ranges = {{.start = 16'379, .end = 0x3FFF}},\n                            .master = {.id = \"other-master2\", .ip = \"192.168.0.104\", .port = 7004},\n                            .replicas = {}}});\n \n   EXPECT_TRUE(ds.has_value());\n-  EXPECT_THAT(ds.value(), UnorderedElementsAre(5'998, 5'999, 6'000));\n+  EXPECT_THAT(ds.value(), UnorderedElementsAre(16'379, 16'380, 16'381));\n }\n \n TEST_F(ClusterConfigTest, ConfigSetInvalidSlotRanges) {\ndiff --git a/src/server/cluster_family_test.cc b/src/server/cluster_family_test.cc\nindex 0f6279d43f59..81288756b4f1 100644\n--- a/src/server/cluster_family_test.cc\n+++ b/src/server/cluster_family_test.cc\n@@ -498,6 +498,46 @@ TEST_F(ClusterFamilyTest, ClusterModeSelectNotAllowed) {\n   EXPECT_EQ(Run({\"select\", \"0\"}), \"OK\");\n }\n \n+TEST_F(ClusterFamilyTest, ClusterFirstConfigCallDropsEntriesNotOwnedByNode) {\n+  Run({\"debug\", \"populate\", \"50000\"});\n+\n+  EXPECT_EQ(Run({\"save\", \"df\"}), \"OK\");\n+\n+  auto save_info = service_->server_family().GetLastSaveInfo();\n+  EXPECT_EQ(Run({\"debug\", \"load\", save_info->file_name}), \"OK\");\n+  EXPECT_EQ(CheckedInt({\"dbsize\"}), 50000);\n+\n+  EXPECT_EQ(RunAdmin({\"dflycluster\", \"config\", R\"json(\n+      [\n+        {\n+          \"slot_ranges\": [\n+            {\n+              \"start\": 0,\n+              \"end\": 16383\n+            }\n+          ],\n+          \"master\": {\n+            \"id\": \"abcd1234\",\n+            \"ip\": \"10.0.0.1\",\n+            \"port\": 7000\n+          },\n+          \"replicas\": []\n+        }\n+      ])json\"}),\n+            \"OK\");\n+\n+  // Make sure `dbsize` all slots were removed\n+  constexpr absl::Duration kMaxTime = absl::Seconds(5);\n+  absl::Time deadline = absl::Now() + kMaxTime;\n+  while (deadline > absl::Now()) {\n+    if (CheckedInt({\"dbsize\"}) == 0) {\n+      break;\n+    }\n+    sleep(1);\n+  }\n+  EXPECT_LE(absl::Now(), deadline);\n+}\n+\n class ClusterFamilyEmulatedTest : public BaseFamilyTest {\n  public:\n   ClusterFamilyEmulatedTest() {\n",
  "problem_statement": "support rdb load for cluster mode\nWhen the server loads with data from file it should load all data\nOn the first config update it gets it should delete keys that are not assiged to its slot ownership\n",
  "hints_text": "",
  "created_at": "2023-05-28T14:02:44Z",
  "modified_files": [
    "src/server/cluster/cluster_config.cc"
  ],
  "modified_test_files": [
    "src/server/cluster_config_test.cc",
    "src/server/cluster_family_test.cc"
  ]
}