{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1650,
  "instance_id": "dragonflydb__dragonfly-1650",
  "issue_numbers": [
    "1634"
  ],
  "base_commit": "5ccc519b5c22d09539f7610ca0dd65f87f0bbe7d",
  "patch": "diff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex 3e7439b11047..6eab7c7a2e1a 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -77,6 +77,9 @@ ABSL_FLAG(MaxMemoryFlag, maxmemory, MaxMemoryFlag{},\n           \"Limit on maximum-memory that is used by the database. \"\n           \"0 - means the program will automatically determine its maximum memory usage. \"\n           \"default: 0\");\n+ABSL_FLAG(double, oom_deny_ratio, 1.1,\n+          \"commands with flag denyoom will return OOM when the ratio between maxmemory and used \"\n+          \"memory is above this value\");\n \n bool AbslParseFlag(std::string_view in, MaxMemoryFlag* flag, std::string* err) {\n   int64_t val;\n@@ -893,6 +896,14 @@ void Service::DispatchCommand(CmdArgList args, facade::ConnectionContext* cntx)\n \n   uint64_t start_ns = ProactorBase::GetMonotonicTimeNs(), end_ns;\n \n+  if (cid->opt_mask() & CO::DENYOOM) {\n+    int64_t used_memory = etl.GetUsedMemory(start_ns);\n+    double oom_deny_ratio = GetFlag(FLAGS_oom_deny_ratio);\n+    if (used_memory > (max_memory_limit * oom_deny_ratio)) {\n+      return (*cntx)->SendError(kOutOfMemory);\n+    }\n+  }\n+\n   // Create command transaction\n   intrusive_ptr<Transaction> dist_trans;\n \ndiff --git a/src/server/server_state.cc b/src/server/server_state.cc\nindex f32c0c07ad6b..ded063fb0b95 100644\n--- a/src/server/server_state.cc\n+++ b/src/server/server_state.cc\n@@ -71,6 +71,15 @@ void ServerState::Destroy() {\n   state_ = nullptr;\n }\n \n+uint64_t ServerState::GetUsedMemory(uint64_t now_ns) {\n+  static constexpr uint64_t kCacheEveryNs = 1000;\n+  if (now_ns > used_mem_last_update_ + kCacheEveryNs) {\n+    used_mem_last_update_ = now_ns;\n+    used_mem_cached_ = used_mem_current.load(std::memory_order_relaxed);\n+  }\n+  return used_mem_cached_;\n+}\n+\n bool ServerState::AllowInlineScheduling() const {\n   // We can't allow inline scheduling during a full sync, because then journaling transactions\n   // will be scheduled before RdbLoader::LoadItemsBuffer is finished. We can't use the regular\ndiff --git a/src/server/server_state.h b/src/server/server_state.h\nindex dc9d0040b6f7..3a378e0997b7 100644\n--- a/src/server/server_state.h\n+++ b/src/server/server_state.h\n@@ -130,6 +130,8 @@ class ServerState {  // public struct - to allow initialization.\n     gstate_ = s;\n   }\n \n+  uint64_t GetUsedMemory(uint64_t now_ns);\n+\n   bool AllowInlineScheduling() const;\n \n   // Borrow interpreter from internal manager. Return int with ReturnInterpreter.\n@@ -226,6 +228,8 @@ class ServerState {  // public struct - to allow initialization.\n \n   absl::flat_hash_map<std::string, base::Histogram> call_latency_histos_;\n   uint32_t thread_index_ = 0;\n+  uint64_t used_mem_cached_ = 0;  // thread local cache of used_mem_current\n+  uint64_t used_mem_last_update_ = 0;\n \n   static __thread ServerState* state_;\n };\n",
  "test_patch": "diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc\nindex 5ce45f92c8cd..2f3d9af3737c 100644\n--- a/src/server/dragonfly_test.cc\n+++ b/src/server/dragonfly_test.cc\n@@ -22,6 +22,7 @@ extern \"C\" {\n \n ABSL_DECLARE_FLAG(float, mem_defrag_threshold);\n ABSL_DECLARE_FLAG(std::vector<std::string>, rename_command);\n+ABSL_DECLARE_FLAG(double, oom_deny_ratio);\n \n namespace dfly {\n \n@@ -99,6 +100,11 @@ class DflyRenameCommandTest : public DflyEngineTest {\n     absl::SetFlag(&FLAGS_rename_command,\n                   std::vector<std::string>({\"flushall=myflushall\", \"flushdb=\"}));\n   }\n+\n+  void TearDown() {\n+    absl::SetFlag(&FLAGS_rename_command, std::vector<std::string>({\"\"}));\n+    DflyEngineTest::TearDown();\n+  }\n };\n \n TEST_F(DflyRenameCommandTest, RenameCommand) {\n@@ -335,10 +341,10 @@ TEST_F(DflyEngineTest, FlushAll) {\n \n TEST_F(DflyEngineTest, OOM) {\n   shard_set->TEST_EnableHeartBeat();\n-  max_memory_limit = 0;\n+  max_memory_limit = 300000;\n   size_t i = 0;\n   RespExpr resp;\n-  for (; i < 5000; i += 3) {\n+  for (; i < 10000; i += 3) {\n     resp = Run({\"mset\", StrCat(\"key\", i), \"bar\", StrCat(\"key\", i + 1), \"bar\", StrCat(\"key\", i + 2),\n                 \"bar\"});\n     if (resp != \"OK\")\n@@ -376,25 +382,41 @@ TEST_F(DflyEngineTest, OOM) {\n TEST_F(DflyEngineTest, Bug207) {\n   shard_set->TEST_EnableHeartBeat();\n   shard_set->TEST_EnableCacheMode();\n+  absl::FlagSaver fs;\n+  absl::SetFlag(&FLAGS_oom_deny_ratio, 4);\n \n-  max_memory_limit = 0;\n+  max_memory_limit = 300000;\n \n   ssize_t i = 0;\n   RespExpr resp;\n   for (; i < 5000; ++i) {\n     resp = Run({\"setex\", StrCat(\"key\", i), \"30\", \"bar\"});\n-    // we evict some items because 5000 is too much when max_memory_limit is zero.\n+    // we evict some items because 5000 is too much when max_memory_limit is 300000.\n     ASSERT_EQ(resp, \"OK\");\n   }\n \n+  auto evicted_count = [](const string& str) -> size_t {\n+    const string matcher = \"evicted_keys:\";\n+    const auto pos = str.find(matcher) + matcher.size();\n+    const auto sub = str.substr(pos, 1);\n+    return atoi(sub.c_str());\n+  };\n+\n+  resp = Run({\"info\", \"stats\"});\n+  EXPECT_GT(evicted_count(resp.GetString()), 0);\n+\n   for (; i > 0; --i) {\n     resp = Run({\"setex\", StrCat(\"key\", i), \"30\", \"bar\"});\n+    ASSERT_EQ(resp, \"OK\");\n   }\n }\n \n TEST_F(DflyEngineTest, StickyEviction) {\n   shard_set->TEST_EnableHeartBeat();\n   shard_set->TEST_EnableCacheMode();\n+  absl::FlagSaver fs;\n+  absl::SetFlag(&FLAGS_oom_deny_ratio, 4);\n+\n   max_memory_limit = 300000;\n \n   string tmp_val(100, '.');\ndiff --git a/src/server/test_utils.cc b/src/server/test_utils.cc\nindex 74f1d1fbd868..13feb72c0c38 100644\n--- a/src/server/test_utils.cc\n+++ b/src/server/test_utils.cc\n@@ -167,6 +167,7 @@ void BaseFamilyTest::ResetService() {\n   Service::InitOpts opts;\n   opts.disable_time_update = true;\n   service_->Init(nullptr, {}, opts);\n+  used_mem_current = 0;\n \n   TEST_current_time_ms = absl::GetCurrentTimeNanos() / 1000000;\n   auto cb = [&](EngineShard* s) { s->db_slice().UpdateExpireBase(TEST_current_time_ms - 1000, 0); };\n",
  "problem_statement": "chore: update helio\n\n",
  "hints_text": "",
  "created_at": "2023-08-06T07:44:27Z",
  "modified_files": [
    "src/server/main_service.cc",
    "src/server/server_state.cc",
    "src/server/server_state.h"
  ],
  "modified_test_files": [
    "src/server/dragonfly_test.cc",
    "src/server/test_utils.cc"
  ]
}