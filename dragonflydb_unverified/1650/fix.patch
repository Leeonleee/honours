diff --git a/src/server/main_service.cc b/src/server/main_service.cc
index 3e7439b11047..6eab7c7a2e1a 100644
--- a/src/server/main_service.cc
+++ b/src/server/main_service.cc
@@ -77,6 +77,9 @@ ABSL_FLAG(MaxMemoryFlag, maxmemory, MaxMemoryFlag{},
           "Limit on maximum-memory that is used by the database. "
           "0 - means the program will automatically determine its maximum memory usage. "
           "default: 0");
+ABSL_FLAG(double, oom_deny_ratio, 1.1,
+          "commands with flag denyoom will return OOM when the ratio between maxmemory and used "
+          "memory is above this value");
 
 bool AbslParseFlag(std::string_view in, MaxMemoryFlag* flag, std::string* err) {
   int64_t val;
@@ -893,6 +896,14 @@ void Service::DispatchCommand(CmdArgList args, facade::ConnectionContext* cntx)
 
   uint64_t start_ns = ProactorBase::GetMonotonicTimeNs(), end_ns;
 
+  if (cid->opt_mask() & CO::DENYOOM) {
+    int64_t used_memory = etl.GetUsedMemory(start_ns);
+    double oom_deny_ratio = GetFlag(FLAGS_oom_deny_ratio);
+    if (used_memory > (max_memory_limit * oom_deny_ratio)) {
+      return (*cntx)->SendError(kOutOfMemory);
+    }
+  }
+
   // Create command transaction
   intrusive_ptr<Transaction> dist_trans;
 
diff --git a/src/server/server_state.cc b/src/server/server_state.cc
index f32c0c07ad6b..ded063fb0b95 100644
--- a/src/server/server_state.cc
+++ b/src/server/server_state.cc
@@ -71,6 +71,15 @@ void ServerState::Destroy() {
   state_ = nullptr;
 }
 
+uint64_t ServerState::GetUsedMemory(uint64_t now_ns) {
+  static constexpr uint64_t kCacheEveryNs = 1000;
+  if (now_ns > used_mem_last_update_ + kCacheEveryNs) {
+    used_mem_last_update_ = now_ns;
+    used_mem_cached_ = used_mem_current.load(std::memory_order_relaxed);
+  }
+  return used_mem_cached_;
+}
+
 bool ServerState::AllowInlineScheduling() const {
   // We can't allow inline scheduling during a full sync, because then journaling transactions
   // will be scheduled before RdbLoader::LoadItemsBuffer is finished. We can't use the regular
diff --git a/src/server/server_state.h b/src/server/server_state.h
index dc9d0040b6f7..3a378e0997b7 100644
--- a/src/server/server_state.h
+++ b/src/server/server_state.h
@@ -130,6 +130,8 @@ class ServerState {  // public struct - to allow initialization.
     gstate_ = s;
   }
 
+  uint64_t GetUsedMemory(uint64_t now_ns);
+
   bool AllowInlineScheduling() const;
 
   // Borrow interpreter from internal manager. Return int with ReturnInterpreter.
@@ -226,6 +228,8 @@ class ServerState {  // public struct - to allow initialization.
 
   absl::flat_hash_map<std::string, base::Histogram> call_latency_histos_;
   uint32_t thread_index_ = 0;
+  uint64_t used_mem_cached_ = 0;  // thread local cache of used_mem_current
+  uint64_t used_mem_last_update_ = 0;
 
   static __thread ServerState* state_;
 };
