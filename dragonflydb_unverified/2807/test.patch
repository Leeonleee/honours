diff --git a/src/server/dragonfly_test.cc b/src/server/dragonfly_test.cc
index ed8875d724f2..a2a2d4eaf4cf 100644
--- a/src/server/dragonfly_test.cc
+++ b/src/server/dragonfly_test.cc
@@ -347,6 +347,15 @@ TEST_F(DflyEngineTest, Memcache) {
   EXPECT_THAT(resp, ElementsAre("END"));
 }
 
+TEST_F(DflyEngineTest, MemcacheFlags) {
+  using MP = MemcacheParser;
+
+  auto resp = Run("resp", {"SET", "key", "bar", "_MCFLAGS", "42"});
+  ASSERT_EQ(resp, "OK");
+  MCResponse resp2 = RunMC(MP::GET, "key");
+  EXPECT_THAT(resp2, ElementsAre("VALUE key 42 3", "bar", "END"));
+}
+
 TEST_F(DflyEngineTest, LimitMemory) {
   mi_option_enable(mi_option_limit_os_alloc);
   string blob(128, 'a');
diff --git a/src/server/test_utils.cc b/src/server/test_utils.cc
index 815c44f168ea..05870dfb22f9 100644
--- a/src/server/test_utils.cc
+++ b/src/server/test_utils.cc
@@ -365,6 +365,10 @@ RespExpr BaseFamilyTest::Run(absl::Span<std::string> span) {
 }
 
 RespExpr BaseFamilyTest::Run(std::string_view id, ArgSlice slice) {
+  if (!ProactorBase::IsProactorThread()) {
+    return pp_->at(0)->Await([&] { return this->Run(id, slice); });
+  }
+
   TestConnWrapper* conn_wrapper = AddFindConn(Protocol::REDIS, id);
 
   CmdArgVec args = conn_wrapper->Args(slice);
@@ -601,6 +605,8 @@ ConnectionContext::DebugInfo BaseFamilyTest::GetDebugInfo(const std::string& id)
 }
 
 auto BaseFamilyTest::AddFindConn(Protocol proto, std::string_view id) -> TestConnWrapper* {
+  DCHECK(ProactorBase::IsProactorThread());
+
   unique_lock lk(mu_);
 
   auto [it, inserted] = connections_.emplace(id, nullptr);
