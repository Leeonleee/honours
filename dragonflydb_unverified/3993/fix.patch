diff --git a/src/core/bptree_set.h b/src/core/bptree_set.h
index ae5240b742db..930187cabbb4 100644
--- a/src/core/bptree_set.h
+++ b/src/core/bptree_set.h
@@ -104,6 +104,10 @@ template <typename T, typename Policy = BPTreePolicy<T>> class BPTree {
   /// @param path
   void Delete(BPTreePath path);
 
+  /// @brief Forces an update to the key. Assumes key has the same value.
+  /// Replaces old with new_obj.
+  void ForceUpdate(KeyT old, KeyT new_obj);
+
  private:
   BPTreeNode* CreateNode(bool leaf);
 
@@ -589,4 +593,15 @@ template <typename T, typename Policy> void BPTree<T, Policy>::DestroyNode(BPTre
   num_nodes_--;
 }
 
+template <typename T, typename Policy> void BPTree<T, Policy>::ForceUpdate(KeyT old, KeyT new_obj) {
+  BPTreePath path;
+  [[maybe_unused]] bool found = Locate(old, &path);
+
+  assert(path.Depth() > 0u);
+  assert(found);
+
+  BPTreeNode* node = path.Last().first;
+  node->SetKey(path.Last().second, new_obj);
+}
+
 }  // namespace dfly
diff --git a/src/core/score_map.cc b/src/core/score_map.cc
index a905f752172e..fa5fc4f39106 100644
--- a/src/core/score_map.cc
+++ b/src/core/score_map.cc
@@ -148,7 +148,7 @@ detail::SdsScorePair ScoreMap::iterator::BreakToPair(void* obj) {
 
 namespace {
 // Does not Release obj. Callers must do so explicitly if a `Reallocation` happened
-pair<sds, bool> ReallocIfNeededGeneric(void* obj, float ratio) {
+pair<sds, bool> DuplicateEntryIfFragmented(void* obj, float ratio) {
   sds key = (sds)obj;
   size_t key_len = sdslen(key);
 
@@ -167,15 +167,15 @@ bool ScoreMap::iterator::ReallocIfNeeded(float ratio, std::function<void(sds, sd
   bool reallocated = false;
   auto body = [ratio, &cb, &reallocated](auto* ptr) {
     auto* obj = ptr->GetObject();
-    auto [new_obj, realloc] = ReallocIfNeededGeneric(obj, ratio);
-    if (realloc) {
+    auto [new_obj, duplicate] = DuplicateEntryIfFragmented(obj, ratio);
+    if (duplicate) {
       if (cb) {
         cb((sds)obj, (sds)new_obj);
       }
       sdsfree((sds)obj);
       ptr->SetObject(new_obj);
     }
-    reallocated |= realloc;
+    reallocated |= duplicate;
   };
 
   TraverseApply(curr_entry_, body);
diff --git a/src/core/sorted_map.cc b/src/core/sorted_map.cc
index 497565525291..60cd43e5c75c 100644
--- a/src/core/sorted_map.cc
+++ b/src/core/sorted_map.cc
@@ -770,10 +770,7 @@ SortedMap* SortedMap::FromListPack(PMR_NS::memory_resource* res, const uint8_t*
 }
 
 bool SortedMap::DefragIfNeeded(float ratio) {
-  auto cb = [this](sds old_obj, sds new_obj) {
-    score_tree->Delete(old_obj);
-    score_tree->Insert(new_obj);
-  };
+  auto cb = [this](sds old_obj, sds new_obj) { score_tree->ForceUpdate(old_obj, new_obj); };
   bool reallocated = false;
 
   for (auto it = score_map->begin(); it != score_map->end(); ++it) {
