{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 3607,
  "instance_id": "dragonflydb__dragonfly-3607",
  "issue_numbers": [
    "3418"
  ],
  "base_commit": "41f7b611d005024f0c0a5ac1c18e3d959639761e",
  "patch": "diff --git a/src/facade/memcache_parser.h b/src/facade/memcache_parser.h\nindex 4f403ca44189..1906c3dedfed 100644\n--- a/src/facade/memcache_parser.h\n+++ b/src/facade/memcache_parser.h\n@@ -52,7 +52,8 @@ class MemcacheParser {\n       uint64_t delta;           // for DECR/INCR commands.\n     };\n \n-    uint32_t expire_ts = 0;  // relative time in seconds.\n+    uint32_t expire_ts =\n+        0;  // relative (expire_ts <= month) or unix time (expire_ts > month) in seconds\n     uint32_t bytes_len = 0;\n     uint32_t flags = 0;\n     bool no_reply = false;\ndiff --git a/src/server/generic_family.cc b/src/server/generic_family.cc\nindex 06b4fd626294..09061be3968a 100644\n--- a/src/server/generic_family.cc\n+++ b/src/server/generic_family.cc\n@@ -691,23 +691,6 @@ OpResult<long> OpFieldTtl(Transaction* t, EngineShard* shard, string_view key, s\n   return res <= 0 ? res : int32_t(res - MemberTimeSeconds(db_cntx.time_now_ms));\n }\n \n-OpResult<uint32_t> OpDel(const OpArgs& op_args, const ShardArgs& keys) {\n-  DVLOG(1) << \"Del: \" << keys.Front();\n-  auto& db_slice = op_args.GetDbSlice();\n-\n-  uint32_t res = 0;\n-\n-  for (string_view key : keys) {\n-    auto fres = db_slice.FindMutable(op_args.db_cntx, key);\n-    if (!IsValid(fres.it))\n-      continue;\n-    fres.post_updater.Run();\n-    res += int(db_slice.Del(op_args.db_cntx, fres.it));\n-  }\n-\n-  return res;\n-}\n-\n OpResult<uint32_t> OpStick(const OpArgs& op_args, const ShardArgs& keys) {\n   DVLOG(1) << \"Stick: \" << keys.Front();\n \n@@ -727,6 +710,23 @@ OpResult<uint32_t> OpStick(const OpArgs& op_args, const ShardArgs& keys) {\n \n }  // namespace\n \n+OpResult<uint32_t> GenericFamily::OpDel(const OpArgs& op_args, const ShardArgs& keys) {\n+  DVLOG(1) << \"Del: \" << keys.Front();\n+  auto& db_slice = op_args.GetDbSlice();\n+\n+  uint32_t res = 0;\n+\n+  for (string_view key : keys) {\n+    auto fres = db_slice.FindMutable(op_args.db_cntx, key);\n+    if (!IsValid(fres.it))\n+      continue;\n+    fres.post_updater.Run();\n+    res += int(db_slice.Del(op_args.db_cntx, fres.it));\n+  }\n+\n+  return res;\n+}\n+\n void GenericFamily::Del(CmdArgList args, ConnectionContext* cntx) {\n   Transaction* transaction = cntx->transaction;\n   VLOG(1) << \"Del \" << ArgS(args, 0);\ndiff --git a/src/server/generic_family.h b/src/server/generic_family.h\nindex 207d68009146..4e380850d10c 100644\n--- a/src/server/generic_family.h\n+++ b/src/server/generic_family.h\n@@ -39,6 +39,7 @@ class GenericFamily {\n \n   // Accessed by Service::Exec and Service::Watch as an utility.\n   static OpResult<uint32_t> OpExists(const OpArgs& op_args, const ShardArgs& keys);\n+  static OpResult<uint32_t> OpDel(const OpArgs& op_args, const ShardArgs& keys);\n \n  private:\n   static void Del(CmdArgList args, ConnectionContext* cntx);\ndiff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex ef60679e0397..9c01145b9554 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -1495,7 +1495,7 @@ void Service::DispatchMC(const MemcacheParser::Command& cmd, std::string_view va\n   char cmd_name[16];\n   char ttl[16];\n   char store_opt[32] = {0};\n-  char ttl_op[] = \"EX\";\n+  char ttl_op[] = \"EXAT\";\n \n   MCReplyBuilder* mc_builder = static_cast<MCReplyBuilder*>(cntx->reply_builder());\n   mc_builder->SetNoreply(cmd.no_reply);\n@@ -1566,9 +1566,15 @@ void Service::DispatchMC(const MemcacheParser::Command& cmd, std::string_view va\n       args.emplace_back(store_opt, strlen(store_opt));\n     }\n \n-    if (cmd.expire_ts && memcmp(cmd_name, \"SET\", 3) == 0) {\n-      char* next = absl::numbers_internal::FastIntToBuffer(cmd.expire_ts, ttl);\n-      args.emplace_back(ttl_op, 2);\n+    // if expire_ts is greater than month it's a unix timestamp\n+    // https://github.com/memcached/memcached/blob/master/doc/protocol.txt#L139\n+    constexpr uint32_t kExpireLimit = 60 * 60 * 24 * 30;\n+    const uint64_t expire_ts = cmd.expire_ts && cmd.expire_ts <= kExpireLimit\n+                                   ? cmd.expire_ts + time(nullptr)\n+                                   : cmd.expire_ts;\n+    if (expire_ts && memcmp(cmd_name, \"SET\", 3) == 0) {\n+      char* next = absl::numbers_internal::FastIntToBuffer(expire_ts, ttl);\n+      args.emplace_back(ttl_op, 4);\n       args.emplace_back(ttl, next - ttl);\n     }\n     dfly_cntx->conn_state.memcache_flag = cmd.flags;\ndiff --git a/src/server/string_family.cc b/src/server/string_family.cc\nindex e43f18a40a9f..3049514dec8f 100644\n--- a/src/server/string_family.cc\n+++ b/src/server/string_family.cc\n@@ -28,6 +28,7 @@\n #include \"server/conn_context.h\"\n #include \"server/engine_shard_set.h\"\n #include \"server/error.h\"\n+#include \"server/generic_family.h\"\n #include \"server/journal/journal.h\"\n #include \"server/table.h\"\n #include \"server/tiered_storage.h\"\n@@ -787,9 +788,15 @@ void StringFamily::Set(CmdArgList args, ConnectionContext* cntx) {\n       if (abs_ms < 0)\n         return cntx->SendError(InvalidExpireTime(\"set\"));\n \n-      // Redis reports just OK in this case\n-      if (rel_ms < 0)\n+      // Remove existed key if the key is expired already\n+      if (rel_ms < 0) {\n+        cntx->transaction->ScheduleSingleHop([key](const Transaction* tx, EngineShard* es) {\n+          ShardArgs args = tx->GetShardArgs(es->shard_id());\n+          GenericFamily::OpDel(tx->GetOpArgs(es), args);\n+          return OpStatus::OK;\n+        });\n         return builder->SendStored();\n+      }\n \n       tie(sparams.expire_after_ms, ignore) = expiry.Calculate(now_ms, true);\n     } else if (parser.Check(\"_MCFLAGS\").ExpectTail(1)) {\n",
  "test_patch": "diff --git a/tests/dragonfly/pymemcached_test.py b/tests/dragonfly/pymemcached_test.py\nindex 4f605b5f3556..5cd92e2c2e16 100644\n--- a/tests/dragonfly/pymemcached_test.py\n+++ b/tests/dragonfly/pymemcached_test.py\n@@ -3,6 +3,7 @@\n from redis import Redis\n import socket\n import random\n+import time\n \n from . import dfly_args\n from .instance import DflyInstance\n@@ -141,3 +142,24 @@ def test_flags(memcached_client: MCClient):\n         # workaround sometimes memcached_client.raw_command returns empty str\n         if len(res) > 0:\n             assert res[2].decode() == str(flags)\n+\n+\n+@dfly_args(DEFAULT_ARGS)\n+def test_expiration(memcached_client: MCClient):\n+    assert not memcached_client.default_noreply\n+\n+    assert memcached_client.set(\"key1\", \"value1\", 2)\n+    assert memcached_client.set(\"key2\", \"value2\", int(time.time()) + 2)\n+    assert memcached_client.set(\"key3\", \"value3\", int(time.time()) + 200)\n+    assert memcached_client.get(\"key1\") == b\"value1\"\n+    assert memcached_client.get(\"key2\") == b\"value2\"\n+    assert memcached_client.get(\"key3\") == b\"value3\"\n+    time.sleep(1)\n+    assert memcached_client.set(\"key3\", \"value3\", int(time.time()) - 200)\n+    assert memcached_client.get(\"key1\") == b\"value1\"\n+    assert memcached_client.get(\"key2\") == b\"value2\"\n+    assert memcached_client.get(\"key3\") == None\n+    time.sleep(1)\n+    assert memcached_client.get(\"key1\") == None\n+    assert memcached_client.get(\"key2\") == None\n+    assert memcached_client.get(\"key3\") == None\n",
  "problem_statement": "memcache mode does not accept unix timestamp\n**Describe the bug**\r\nThe memcache protocol support specifying the expiration time in unix timestamp format:\r\nhttps://github.com/memcached/memcached/blob/master/doc/protocol.txt#L139\r\nThe Dragonfly accepts unix timestamp as seconds of expiration.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior:\r\n<details>\r\n  <summary>Dockerfile</summary>\r\n\r\n```Dockerfile\r\nFROM php:7.4\r\nRUN apt-get -qq update && apt-get -qq --yes install libmemcached-dev zlib1g-dev \\\r\n    && pecl channel-update pecl.php.net \\\r\n    && pecl install memcached \\\r\n    && docker-php-ext-enable memcached\r\n```\r\n</details>\r\n<details>\r\n  <summary>compose.yaml</summary>\r\n\r\n```yaml\r\nservices:\r\n  php:\r\n    build:\r\n      context: .\r\n    tty: true\r\n    volumes:\r\n      - ./test.php:/test.php\r\n  memcached:\r\n    image: memcached:latest\r\n  dragonfly:\r\n    image: docker.dragonflydb.io/dragonflydb/dragonfly:v1.20.1\r\n    ulimits:\r\n      memlock: -1\r\n    command: [\r\n      \"--max_log_size=20\",\r\n      \"--memcached_port=11211\",\r\n      \"--maxmemory=1gb\",\r\n      \"--cache_mode=true\",\r\n      \"--alsologtostderr=true\",\r\n      \"--dbnum=1\",\r\n      \"--proactor_threads=1\"\r\n    ]\r\n```\r\n</details>\r\n<details>\r\n  <summary>test.php</summary>\r\n\r\n\r\n```php\r\n<?php\r\n\r\n$memcached = new Memcached();\r\n$memcached->addServers([['host' => 'memcached','port' => '11211',]]);\r\n\r\n$dragonfly = new Memcached();\r\n$dragonfly->addServers([['host' => 'dragonfly','port' => '11211',]]);\r\n\r\necho \"memcached set \" . time() . \" +10s\\n\";\r\n$memcached->set('key', time() + 10, time() + 10);\r\n\r\necho \"dragonfly set \" . time() . \" +10s\\n\";\r\n$dragonfly->set('key', time() + 10, time() + 10);\r\n\r\nsleep(9);\r\necho \"\\nAfter 9 seconds\\n\";\r\necho 'memcached ' . $memcached->get('key') . \"\\n\";\r\necho 'dragonfly ' . $dragonfly->get('key') . \"\\n\";\r\n\r\nsleep(2);\r\necho \"\\nAfter 11 seconds\\n\";\r\necho 'memcached ' . $memcached->get('key') . \"\\n\";\r\necho 'dragonfly ' . $dragonfly->get('key') . \"\\n\";\r\n```\r\n</details>\r\n\r\n```bash\r\ndocker compose up --detach --build\r\ndocker compose exec php php test.php\r\n```\r\n\r\n**Expected behavior**\r\nThe key expires after the unix timestamp.\r\n\r\n**Additional context**\r\n```\r\nmemcached set 1722444217 +10s\r\ndragonfly set 1722444217 +10s\r\n\r\nAfter 9 seconds\r\nmemcached 1722444227\r\ndragonfly 1722444227\r\n\r\nAfter 11 seconds\r\nmemcached\r\ndragonfly 1722444227\r\n```\r\n\n",
  "hints_text": "",
  "created_at": "2024-08-30T13:36:35Z",
  "modified_files": [
    "src/facade/memcache_parser.h",
    "src/server/generic_family.cc",
    "src/server/generic_family.h",
    "src/server/main_service.cc",
    "src/server/string_family.cc"
  ],
  "modified_test_files": [
    "tests/dragonfly/pymemcached_test.py"
  ]
}