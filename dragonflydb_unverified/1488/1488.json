{
  "repo": "dragonflydb/dragonfly",
  "pull_number": 1488,
  "instance_id": "dragonflydb__dragonfly-1488",
  "issue_numbers": [
    "1487"
  ],
  "base_commit": "bf363661e44da73537e32bb862d80d9547c8b65c",
  "patch": "diff --git a/src/server/main_service.cc b/src/server/main_service.cc\nindex 8edf56daf4d4..1bd2d1c0a219 100644\n--- a/src/server/main_service.cc\n+++ b/src/server/main_service.cc\n@@ -611,7 +611,7 @@ bool Service::CheckKeysOwnership(const CommandId* cid, CmdArgList args,\n   optional<SlotId> keys_slot;\n   bool cross_slot = false;\n   // Iterate keys and check to which slot they belong.\n-  for (unsigned i = key_index.start; i < key_index.end; ++i) {\n+  for (unsigned i = key_index.start; i < key_index.end; i += key_index.step) {\n     string_view key = ArgS(args, i);\n     SlotId slot = ClusterConfig::KeySlot(key);\n     if (keys_slot && slot != *keys_slot) {\n",
  "test_patch": "diff --git a/src/server/cluster/cluster_family_test.cc b/src/server/cluster/cluster_family_test.cc\nindex fa32430a5fb3..92c886e767a6 100644\n--- a/src/server/cluster/cluster_family_test.cc\n+++ b/src/server/cluster/cluster_family_test.cc\n@@ -733,6 +733,40 @@ TEST_F(ClusterFamilyTest, Keyslot) {\n             CheckedInt({\"cluster\", \"keyslot\", \"123{def}456\"}));\n }\n \n+TEST_F(ClusterFamilyTest, ClusterCrossSlot) {\n+  string config_template = R\"json(\n+      [\n+        {\n+          \"slot_ranges\": [\n+            {\n+              \"start\": 0,\n+              \"end\": 16383\n+            }\n+          ],\n+          \"master\": {\n+            \"id\": \"$0\",\n+            \"ip\": \"10.0.0.1\",\n+            \"port\": 7000\n+          },\n+          \"replicas\": []\n+        }\n+      ])json\";\n+  string config = absl::Substitute(config_template, RunAdmin({\"dflycluster\", \"myid\"}).GetString());\n+\n+  EXPECT_EQ(RunAdmin({\"dflycluster\", \"config\", config}), \"OK\");\n+  EXPECT_EQ(Run({\"SET\", \"key\", \"value\"}), \"OK\");\n+  EXPECT_EQ(Run({\"GET\", \"key\"}), \"value\");\n+\n+  EXPECT_EQ(Run({\"MSET\", \"key\", \"value2\"}), \"OK\");\n+  EXPECT_EQ(Run({\"MGET\", \"key\"}), \"value2\");\n+\n+  EXPECT_THAT(Run({\"MSET\", \"key\", \"value\", \"key2\", \"value2\"}), ErrArg(\"CROSSSLOT\"));\n+  EXPECT_THAT(Run({\"MGET\", \"key\", \"key2\"}), ErrArg(\"CROSSSLOT\"));\n+\n+  EXPECT_EQ(Run({\"MSET\", \"key{tag}\", \"value\", \"key2{tag}\", \"value2\"}), \"OK\");\n+  EXPECT_THAT(Run({\"MGET\", \"key{tag}\", \"key2{tag}\"}), RespArray(ElementsAre(\"value\", \"value2\")));\n+}\n+\n class ClusterFamilyEmulatedTest : public BaseFamilyTest {\n  public:\n   ClusterFamilyEmulatedTest() {\n",
  "problem_statement": "Getting `CROSSSLOT` error for `mset`\nIn a cluster, we should(?) be able to use `mset` with hash tags to set multiple values.\r\nHowever, I get an error: `(error) CROSSSLOT Keys in request don't hash to the same slot`\r\n\r\nExample:\r\n```\r\n127.0.0.1:7001> set x3 a\r\nOK\r\n127.0.0.1:7001> mset a{x3} a b{x3} a c{x3} a\r\n(error) CROSSSLOT Keys in request don't hash to the same slot\r\n127.0.0.1:7001> mset a{x3} a b{x3} a\r\n(error) CROSSSLOT Keys in request don't hash to the same slot\r\n127.0.0.1:7001> set x3 a\r\nOK\r\n127.0.0.1:7001> mset a{x3} a\r\n(error) CROSSSLOT Keys in request don't hash to the same slot\r\n```\r\n\r\nAs per above, even calling an `mset` with a single key doesn't work.\n",
  "hints_text": "The issue is in this line:\r\nhttps://github.com/dragonflydb/dragonfly/blob/278263ee363a50eab2771a83aac1a5b49f2e2934/src/server/main_service.cc#L614\r\n\r\nSpecifically we do not need to do `++i`, but do `i += key_index.step` instead. I'm working on a fix which includes tests.",
  "created_at": "2023-06-28T09:47:19Z",
  "modified_files": [
    "src/server/main_service.cc"
  ],
  "modified_test_files": [
    "src/server/cluster/cluster_family_test.cc"
  ]
}