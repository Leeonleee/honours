diff --git a/src/core/interpreter_test.cc b/src/core/interpreter_test.cc
index 57bba3a446a9..13250117afa6 100644
--- a/src/core/interpreter_test.cc
+++ b/src/core/interpreter_test.cc
@@ -276,19 +276,19 @@ TEST_F(InterpreterTest, Call) {
   };
 
   intptr_.SetRedisFunc(cb);
-  ASSERT_TRUE(Execute("local var = redis.call('string'); return {type(var), var}"));
+  ASSERT_TRUE(Execute("local var = redis.pcall('string'); return {type(var), var}"));
   EXPECT_EQ("[str(string) str(foo)]", ser_.res);
 
-  EXPECT_TRUE(Execute("local var = redis.call('double'); return {type(var), var}"));
+  EXPECT_TRUE(Execute("local var = redis.pcall('double'); return {type(var), var}"));
   EXPECT_EQ("[str(number) d(3.1415)]", ser_.res);
 
-  EXPECT_TRUE(Execute("local var = redis.call('int'); return {type(var), var}"));
+  EXPECT_TRUE(Execute("local var = redis.pcall('int'); return {type(var), var}"));
   EXPECT_EQ("[str(number) i(42)]", ser_.res);
 
-  EXPECT_TRUE(Execute("local var = redis.call('err'); return {type(var), var}"));
+  EXPECT_TRUE(Execute("local var = redis.pcall('err'); return {type(var), var}"));
   EXPECT_EQ("[str(table) err(myerr)]", ser_.res);
 
-  EXPECT_TRUE(Execute("local var = redis.call('status'); return {type(var), var}"));
+  EXPECT_TRUE(Execute("local var = redis.pcall('status'); return {type(var), var}"));
   EXPECT_EQ("[str(table) status(mystatus)]", ser_.res);
 }
 
diff --git a/tests/dragonfly/eval_test.py b/tests/dragonfly/eval_test.py
index c1d09544a42b..941e67ed2fa0 100644
--- a/tests/dragonfly/eval_test.py
+++ b/tests/dragonfly/eval_test.py
@@ -201,3 +201,21 @@ async def dequeue_worker():
 
     for job in jobs:
         await job
+
+ERROR_CALL_SCRIPT = """
+redis.call('ECHO', 'I', 'want', 'an', 'error')
+"""
+
+ERROR_PCALL_SCRIPT = """
+redis.pcall('ECHO', 'I', 'want', 'an', 'error')
+"""
+
+@pytest.mark.asyncio
+async def test_eval_error_propagation(async_client):
+    assert await async_client.eval(ERROR_PCALL_SCRIPT, 0) is None
+
+    try:
+        await async_client.eval(ERROR_CALL_SCRIPT, 0)
+        assert False, "Eval must have thrown an error"
+    except aioredis.RedisError as e:
+        pass
