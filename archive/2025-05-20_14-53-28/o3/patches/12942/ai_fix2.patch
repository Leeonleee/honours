--- a/src/catalog/default/default_views.cpp
+++ b/src/catalog/default/default_views.cpp
@@
-	{"information_schema", "referential_constraints", "SELECT f.database_name constraint_catalog, f.schema_name constraint_schema, f.constraint_name constraint_name, c.database_name unique_constraint_catalog, c.schema_name unique_constraint_schema, c.constraint_name unique_constraint_name, 'NONE' match_option, 'NO ACTION' update_rule, 'NO ACTION' delete_rule FROM duckdb_constraints() c, duckdb_constraints() f WHERE f.constraint_type = 'FOREIGN KEY' AND (c.constraint_type = 'UNIQUE' OR c.constraint_type = 'PRIMARY KEY') AND f.database_oid = c.database_oid AND f.schema_oid = c.schema_oid AND lower(f.referenced_table) = lower(c.table_name) AND [lower(x) for x in f.referenced_column_names] = [lower(x) for x in c.constraint_column_names]"},
-	{"information_schema", "key_column_usage", "SELECT database_name constraint_catalog, schema_name constraint_schema, constraint_name, database_name table_catalog, schema_name table_schema, table_name, UNNEST(constraint_column_names) column_name, UNNEST(generate_series(1, len(constraint_column_names))) ordinal_position, CASE constraint_type WHEN 'FOREIGN KEY' THEN 1 ELSE NULL END position_in_unique_constraint FROM duckdb_constraints() WHERE constraint_type = 'FOREIGN KEY' OR constraint_type = 'PRIMARY KEY' OR constraint_type = 'UNIQUE';"},
-	{"information_schema", "table_constraints", "SELECT database_name constraint_catalog, schema_name constraint_schema, constraint_name, database_name table_catalog, schema_name table_schema, table_name, CASE constraint_type WHEN 'NOT NULL' THEN 'CHECK' ELSE constraint_type END constraint_type, 'NO' is_deferrable, 'NO' initially_deferred, 'YES' enforced, 'YES' nulls_distinct FROM duckdb_constraints() WHERE constraint_type = 'PRIMARY KEY' OR constraint_type = 'FOREIGN KEY' OR constraint_type = 'UNIQUE' OR constraint_type = 'CHECK' OR constraint_type = 'NOT NULL';"},
+	{"information_schema", "referential_constraints", "SELECT f.database_name AS constraint_catalog, f.schema_name AS constraint_schema, f.constraint_name AS constraint_name, c.database_name AS unique_constraint_catalog, c.schema_name AS unique_constraint_schema, c.constraint_name AS unique_constraint_name, 'NONE' AS match_option, 'NO ACTION' AS update_rule, 'NO ACTION' AS delete_rule FROM duckdb_constraints() f JOIN duckdb_constraints() c ON c.database_oid = f.database_oid AND c.schema_oid = f.schema_oid AND lower(c.table_name) = lower(f.referenced_table) AND c.constraint_type IN ('UNIQUE','PRIMARY KEY') AND lower(list_to_string(c.constraint_column_names, ',')) = lower(list_to_string(f.referenced_column_names, ',')) WHERE f.constraint_type = 'FOREIGN KEY'"},
+	{"information_schema", "key_column_usage", "SELECT d.database_name AS constraint_catalog, d.schema_name AS constraint_schema, d.constraint_name, d.database_name AS table_catalog, d.schema_name AS table_schema, d.table_name, u.column_name, u.ordinality AS ordinal_position, CASE d.constraint_type WHEN 'FOREIGN KEY' THEN NULL ELSE NULL END AS position_in_unique_constraint FROM duckdb_constraints() d, UNNEST(d.constraint_column_names) WITH ORDINALITY AS u(column_name, ordinality) WHERE d.constraint_type IN ('FOREIGN KEY','PRIMARY KEY','UNIQUE')"},
+	{"information_schema", "table_constraints", "SELECT database_name AS constraint_catalog, schema_name AS constraint_schema, constraint_name, database_name AS table_catalog, schema_name AS table_schema, table_name, CASE constraint_type WHEN 'NOT NULL' THEN 'CHECK' ELSE constraint_type END AS constraint_type, 'NO' AS is_deferrable, 'NO' AS initially_deferred, 'YES' AS enforced, 'YES' AS nulls_distinct FROM duckdb_constraints() WHERE constraint_type IN ('PRIMARY KEY','FOREIGN KEY','UNIQUE','CHECK','NOT NULL')"},
@@