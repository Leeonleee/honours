--- a/src/planner/binder/statement/bind_export.cpp
+++ b/src/planner/binder/statement/bind_export.cpp
@@
 		info->file_path = info->file_path;
@@
-		info->table = table->name;
+		info->table = table->name;
+		/* Exclude generated columns from the data export.
+		   The generated columns are re-computed upon import when the
+		   CREATE TABLE statement (contained in the schema.sql of the
+		   exported database) is executed. Trying to COPY the generated
+		   values back into the table will fail because those columns are
+		   not writable. Therefore, we construct an explicit column list
+		   that only contains the non-generated columns of the table,
+		   and attach that list to the CopyInfo so that only base columns
+		   are written to the data files. */
+		for (auto &col : table->columns) {
+			if (!col.Generated()) {
+				info->select_list.push_back(col.Name());
+			}
+		}
@@
 		exported_tables.data.push_back(table_info);
 		id++;
 
 		// generate the copy statement and bind it
 		CopyStatement copy_stmt;
 		copy_stmt.info = move(info);
@@
 		}
 	}
 
 	// try to create the directory, if it doesn't exist yet
 	// a bit hacky to do it here, but we need to create the directory BEFORE the copy statements run
 	if (!fs.DirectoryExists(stmt.info->file_path)) {
 	}
@@
 	return result;
 }
 
 } // namespace duckdb

