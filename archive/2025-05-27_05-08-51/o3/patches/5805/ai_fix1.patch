--- a/src/common/types/vector.cpp
+++ b/src/common/types/vector.cpp
@@ -1673,6 +1673,9 @@
 	case PhysicalType::VARCHAR:
 		SearchStringInMap(list, StringValue::Get(key), offsets, key.IsNull(), entry.offset, entry.length);
 		break;
+	case PhysicalType::INTERVAL:
+		TemplatedSearchInMap<interval_t>(list, key, offsets, key.IsNull(), entry.offset, entry.length);
+		break;
 	default:
 		throw InvalidTypeException(list.GetType().id(), "Invalid type for List Vector Search");
 	}
@@ 	return offsets;
 	}
 	return offsets;
 }
 
-
+
 	Value ListVector::GetValuesFromOffsets(Vector &list, vector<idx_t> &offsets) {
 		auto &child_vec = ListVector::GetEntry(list);
 		vector<Value> list_values;
 		list_values.reserve(offsets.size());
 		for (auto &offset : offsets) {
