--- a/src/storage/single_file_block_manager.cpp
+++ b/src/storage/single_file_block_manager.cpp
@@
-void SingleFileBlockManager::LoadFreeList() {
-	if (options.read_only) {
-		// no need to load free list for read only db
-		return;
-	}
+void SingleFileBlockManager::LoadFreeList() {
+	// Always load the free list, even in read-only mode, so that
+	// free/used block statistics remain accurate (e.g., for
+	// PRAGMA database_size). In read-only mode we will never
+	// modify or write back the free list, hence loading it here
+	// is safe and does not violate the read-only guarantees.
 	if (free_list_id == INVALID_BLOCK) {
 		// no free list
 		return;
 	}
 
@@
 	for (idx_t i = 0; i < multi_use_blocks_count; i++) {
 		auto block_id = reader.Read<block_id_t>();
 		auto usage_count = reader.Read<uint32_t>();
 		multi_use_blocks[block_id] = usage_count;
 	}
 }
 
---