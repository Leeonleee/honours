--- a/src/storage/single_file_block_manager.cpp
+++ b/src/storage/single_file_block_manager.cpp
@@
 void SingleFileBlockManager::LoadFreeList() {
-	if (options.read_only) {
-		// no need to load free list for read only db
-		return;
-	}
+	// In read-only mode we still load the free-list in order to be able to
+	// correctly report free/used blocks (e.g., in PRAGMA database_size).
+	// While we will never modify the free list in read-only mode, keeping the
+	// information available is harmless and avoids incorrect statistics.
 	if (free_list_id == INVALID_BLOCK) {
 		// no free list
 		return;
 	}
+
@@
 	for (idx_t i = 0; i < multi_use_blocks_count; i++) {
 		auto block_id = reader.Read<block_id_t>();
 		auto usage_count = reader.Read<uint32_t>();
 		multi_use_blocks[block_id] = usage_count;
 	}
 }
 
 bool SingleFileBlockManager::IsRootBlock(block_id_t root) {
 	return root == meta_block;
 }
 
