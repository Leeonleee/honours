--- a/src/parser/transform/helpers/transform_cte.cpp
+++ b/src/parser/transform/helpers/transform_cte.cpp
@@ for (auto cte_ele = de_with_clause->ctes->head; cte_ele != nullptr; cte_ele = cte_ele->next) {
 		cte_map.map[cte_name] = move(info);
+
+		// Window definitions are scoped to the query level. Any named windows that were
+		// introduced while transforming this CTE should *not* be visible to subsequent
+		// CTEs (or the outer query). The Transformer keeps the current set of named
+		// windows inside the `named_windows` map. Clear this map after each individual
+		// CTE has been processed so that window names do not leak into the next CTE.
+		named_windows.clear();
 	}
 }
 
 unique_ptr<SelectStatement> Transformer::TransformRecursiveCTE(duckdb_libpgquery::PGCommonTableExpr *cte,
                                                                 CommonTableExpressionInfo &info) {
@@
 	return select;
 }
 
 } // namespace duckdb

