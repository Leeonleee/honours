--- a/src/function/scalar/date/date_diff.cpp
+++ b/src/function/scalar/date/date_diff.cpp
@@
 	struct YearOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::ExtractYear(enddate) - Date::ExtractYear(startdate);
+			return static_cast<TR>(static_cast<int64_t>(Date::ExtractYear(enddate)) -
+			                       static_cast<int64_t>(Date::ExtractYear(startdate)));
 		}
 	};
 
 	struct MonthOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
 			int32_t start_year, start_month, start_day;
 			Date::Convert(startdate, start_year, start_month, start_day);
 			int32_t end_year, end_month, end_day;
 			Date::Convert(enddate, end_year, end_month, end_day);
 
-			return (end_year * 12 + end_month - 1) - (start_year * 12 + start_month - 1);
+			int64_t start_total = static_cast<int64_t>(start_year) * 12 + (start_month - 1);
+			int64_t end_total = static_cast<int64_t>(end_year) * 12 + (end_month - 1);
+			return static_cast<TR>(end_total - start_total);
 		}
 	};
 
 	struct DayOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::EpochDays(enddate) - Date::EpochDays(startdate);
+			return static_cast<TR>(static_cast<int64_t>(Date::EpochDays(enddate)) -
+			                       static_cast<int64_t>(Date::EpochDays(startdate)));
 		}
 	};
 
 	struct DecadeOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::ExtractYear(enddate) / 10 - Date::ExtractYear(startdate) / 10;
+			return static_cast<TR>((static_cast<int64_t>(Date::ExtractYear(enddate)) / 10) -
+			                       (static_cast<int64_t>(Date::ExtractYear(startdate)) / 10));
 		}
 	};
 
 	struct CenturyOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::ExtractYear(enddate) / 100 - Date::ExtractYear(startdate) / 100;
+			return static_cast<TR>((static_cast<int64_t>(Date::ExtractYear(enddate)) / 100) -
+			                       (static_cast<int64_t>(Date::ExtractYear(startdate)) / 100));
 		}
 	};
 
 	struct MilleniumOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::ExtractYear(enddate) / 1000 - Date::ExtractYear(startdate) / 1000;
+			return static_cast<TR>((static_cast<int64_t>(Date::ExtractYear(enddate)) / 1000) -
+			                       (static_cast<int64_t>(Date::ExtractYear(startdate)) / 1000));
 		}
 	};
 
 	struct QuarterOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
 			int32_t start_year, start_month, start_day;
 			Date::Convert(startdate, start_year, start_month, start_day);
 			int32_t end_year, end_month, end_day;
 			Date::Convert(enddate, end_year, end_month, end_day);
 
-			return (end_year * 12 + end_month - 1) / Interval::MONTHS_PER_QUARTER -
-			       (start_year * 12 + start_month - 1) / Interval::MONTHS_PER_QUARTER;
+			int64_t start_total = static_cast<int64_t>(start_year) * 12 + (start_month - 1);
+			int64_t end_total = static_cast<int64_t>(end_year) * 12 + (end_month - 1);
+
+			return static_cast<TR>(end_total / Interval::MONTHS_PER_QUARTER -
+			                       start_total / Interval::MONTHS_PER_QUARTER);
 		}
 	};
 
 	struct WeekOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::Epoch(Date::GetMondayOfCurrentWeek(enddate)) / Interval::SECS_PER_WEEK -
-			       Date::Epoch(Date::GetMondayOfCurrentWeek(startdate)) / Interval::SECS_PER_WEEK;
+			return static_cast<TR>((static_cast<int64_t>(Date::Epoch(Date::GetMondayOfCurrentWeek(enddate))) /
+			                        Interval::SECS_PER_WEEK) -
+			                       (static_cast<int64_t>(Date::Epoch(Date::GetMondayOfCurrentWeek(startdate))) /
+			                        Interval::SECS_PER_WEEK));
 		}
 	};
 
 	struct ISOYearOperator {
@@
 
 	struct MicrosecondsOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::EpochMicroseconds(enddate) - Date::EpochMicroseconds(startdate);
+			return static_cast<TR>(static_cast<int64_t>(Date::EpochMicroseconds(enddate)) -
+			                       static_cast<int64_t>(Date::EpochMicroseconds(startdate)));
 		}
 	};
 
 	struct MillisecondsOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::EpochMicroseconds(enddate) / Interval::MICROS_PER_MSEC -
-			       Date::EpochMicroseconds(startdate) / Interval::MICROS_PER_MSEC;
+			return static_cast<TR>((static_cast<int64_t>(Date::EpochMicroseconds(enddate)) / Interval::MICROS_PER_MSEC) -
+			                       (static_cast<int64_t>(Date::EpochMicroseconds(startdate)) / Interval::MICROS_PER_MSEC));
 		}
 	};
 
 	struct SecondsOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::Epoch(enddate) - Date::Epoch(startdate);
+			return static_cast<TR>(static_cast<int64_t>(Date::Epoch(enddate)) -
+			                       static_cast<int64_t>(Date::Epoch(startdate)));
 		}
 	};
 
 	struct MinutesOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::Epoch(enddate) / Interval::SECS_PER_MINUTE -
-			       Date::Epoch(startdate) / Interval::SECS_PER_MINUTE;
+			return static_cast<TR>((static_cast<int64_t>(Date::Epoch(enddate)) / Interval::SECS_PER_MINUTE) -
+			                       (static_cast<int64_t>(Date::Epoch(startdate)) / Interval::SECS_PER_MINUTE));
 		}
 	};
 
 	struct HoursOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::Epoch(enddate) / Interval::SECS_PER_HOUR - Date::Epoch(startdate) / Interval::SECS_PER_HOUR;
+			return static_cast<TR>((static_cast<int64_t>(Date::Epoch(enddate)) / Interval::SECS_PER_HOUR) -
+			                       (static_cast<int64_t>(Date::Epoch(startdate)) / Interval::SECS_PER_HOUR));
 		}
 	};
 };
 
