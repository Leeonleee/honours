--- a/src/function/scalar/date/date_diff.cpp
+++ b/src/function/scalar/date/date_diff.cpp
@@
 	struct YearOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::ExtractYear(enddate) - Date::ExtractYear(startdate);
+			return (int64_t)Date::ExtractYear(enddate) - (int64_t)Date::ExtractYear(startdate);
 		}
 	};
@@
 	struct MonthOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
 			int32_t start_year, start_month, start_day;
 			Date::Convert(startdate, start_year, start_month, start_day);
 			int32_t end_year, end_month, end_day;
 			Date::Convert(enddate, end_year, end_month, end_day);
 
-			return (end_year * 12 + end_month - 1) - (start_year * 12 + start_month - 1);
+			return ((int64_t)end_year * 12 + end_month - 1) - ((int64_t)start_year * 12 + start_month - 1);
 		}
 	};
@@
 	struct DayOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::EpochDays(enddate) - Date::EpochDays(startdate);
+			return (int64_t)Date::EpochDays(enddate) - (int64_t)Date::EpochDays(startdate);
 		}
 	};
@@
 	struct QuarterOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
 			int32_t start_year, start_month, start_day;
 			Date::Convert(startdate, start_year, start_month, start_day);
 			int32_t end_year, end_month, end_day;
 			Date::Convert(enddate, end_year, end_month, end_day);
 
-			return (end_year * 12 + end_month - 1) / Interval::MONTHS_PER_QUARTER -
-			       (start_year * 12 + start_month - 1) / Interval::MONTHS_PER_QUARTER;
+			return ((int64_t)end_year * 12 + end_month - 1) / Interval::MONTHS_PER_QUARTER -
+			       ((int64_t)start_year * 12 + start_month - 1) / Interval::MONTHS_PER_QUARTER;
 		}
 	};
 
@@
 	struct WeekOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::Epoch(Date::GetMondayOfCurrentWeek(enddate)) / Interval::SECS_PER_WEEK -
-			       Date::Epoch(Date::GetMondayOfCurrentWeek(startdate)) / Interval::SECS_PER_WEEK;
+			return (int64_t)Date::Epoch(Date::GetMondayOfCurrentWeek(enddate)) / Interval::SECS_PER_WEEK -
+			       (int64_t)Date::Epoch(Date::GetMondayOfCurrentWeek(startdate)) / Interval::SECS_PER_WEEK;
 		}
 	};
 
@@
 	struct MicrosecondsOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::EpochMicroseconds(enddate) - Date::EpochMicroseconds(startdate);
+			return (int64_t)Date::EpochMicroseconds(enddate) - (int64_t)Date::EpochMicroseconds(startdate);
 		}
 	};
@@
 	struct MillisecondsOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::EpochMicroseconds(enddate) / Interval::MICROS_PER_MSEC -
-			       Date::EpochMicroseconds(startdate) / Interval::MICROS_PER_MSEC;
+			return (int64_t)Date::EpochMicroseconds(enddate) / Interval::MICROS_PER_MSEC -
+			       (int64_t)Date::EpochMicroseconds(startdate) / Interval::MICROS_PER_MSEC;
 		}
 	};
@@
 	struct SecondsOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::Epoch(enddate) - Date::Epoch(startdate);
+			return (int64_t)Date::Epoch(enddate) - (int64_t)Date::Epoch(startdate);
 		}
 	};
@@
 	struct MinutesOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::Epoch(enddate) / Interval::SECS_PER_MINUTE -
-			       Date::Epoch(startdate) / Interval::SECS_PER_MINUTE;
+			return (int64_t)Date::Epoch(enddate) / Interval::SECS_PER_MINUTE -
+			       (int64_t)Date::Epoch(startdate) / Interval::SECS_PER_MINUTE;
 		}
 	};
@@
 	struct HoursOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::Epoch(enddate) / Interval::SECS_PER_HOUR - Date::Epoch(startdate) / Interval::SECS_PER_HOUR;
+			return (int64_t)Date::Epoch(enddate) / Interval::SECS_PER_HOUR -
+			       (int64_t)Date::Epoch(startdate) / Interval::SECS_PER_HOUR;
 		}
 	};
 
--- a/src/function/scalar/date/date_diff.cpp
+++ b/src/function/scalar/date/date_diff.cpp
@@
 	struct ISOYearOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::ExtractISOYearNumber(enddate) - Date::ExtractISOYearNumber(startdate);
+			return (int64_t)Date::ExtractISOYearNumber(enddate) - (int64_t)Date::ExtractISOYearNumber(startdate);
 		}
 	};
 
@@
 	struct DecadeOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::ExtractYear(enddate) / 10 - Date::ExtractYear(startdate) / 10;
+			return (int64_t)Date::ExtractYear(enddate) / 10 - (int64_t)Date::ExtractYear(startdate) / 10;
 		}
 	};
 
@@
 	struct CenturyOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::ExtractYear(enddate) / 100 - Date::ExtractYear(startdate) / 100;
+			return (int64_t)Date::ExtractYear(enddate) / 100 - (int64_t)Date::ExtractYear(startdate) / 100;
 		}
 	};
 
@@
 	struct MilleniumOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::ExtractYear(enddate) / 1000 - Date::ExtractYear(startdate) / 1000;
+			return (int64_t)Date::ExtractYear(enddate) / 1000 - (int64_t)Date::ExtractYear(startdate) / 1000;
 		}
 	};
 
@@
 	struct YearOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::ExtractYear(enddate) - Date::ExtractYear(startdate);
+			return (int64_t)Date::ExtractYear(enddate) - (int64_t)Date::ExtractYear(startdate);
 		}
 	};
 
@@
 	struct DecadeOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::ExtractYear(enddate) / 10 - Date::ExtractYear(startdate) / 10;
+			return (int64_t)Date::ExtractYear(enddate) / 10 - (int64_t)Date::ExtractYear(startdate) / 10;
 		}
 	};
 
@@
 	struct CenturyOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::ExtractYear(enddate) / 100 - Date::ExtractYear(startdate) / 100;
+			return (int64_t)Date::ExtractYear(enddate) / 100 - (int64_t)Date::ExtractYear(startdate) / 100;
 		}
 	};
 
@@
 	struct MilleniumOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
-			return Date::ExtractYear(enddate) / 1000 - Date::ExtractYear(startdate) / 1000;
+			return (int64_t)Date::ExtractYear(enddate) / 1000 - (int64_t)Date::ExtractYear(startdate) / 1000;
 		}
 	};
 
@@
 	struct MonthOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
 			int32_t start_year, start_month, start_day;
 			Date::Convert(startdate, start_year, start_month, start_day);
 			int32_t end_year, end_month, end_day;
 			Date::Convert(enddate, end_year, end_month, end_day);
 
-			return (end_year * 12 + end_month - 1) - (start_year * 12 + start_month - 1);
+			return ((int64_t)end_year * 12 + end_month - 1) - ((int64_t)start_year * 12 + start_month - 1);
 		}
 	};
 
@@
 	struct QuarterOperator {
 		template <class TA, class TB, class TR>
 		static inline TR Operation(TA startdate, TB enddate) {
 			int32_t start_year, start_month, start_day;
 			Date::Convert(startdate, start_year, start_month, start_day);
 			int32_t end_year, end_month, end_day;
 			Date::Convert(enddate, end_year, end_month, end_day);
 
-			return (end_year * 12 + end_month - 1) / Interval::MONTHS_PER_QUARTER -
-			       (start_year * 12 + start_month - 1) / Interval::MONTHS_PER_QUARTER;
+			return ((int64_t)end_year * 12 + end_month - 1) / Interval::MONTHS_PER_QUARTER -
+			       ((int64_t)start_year * 12 + start_month - 1) / Interval::MONTHS_PER_QUARTER;
 		}
 	};
 
 	
