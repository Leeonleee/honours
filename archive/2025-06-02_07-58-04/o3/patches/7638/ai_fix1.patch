--- a/src/parser/transform/expression/transform_function.cpp
+++ b/src/parser/transform/expression/transform_function.cpp
@@
 	auto order_bys = make_uniq<OrderModifier>();
 	TransformOrderBy(root.agg_order, order_bys->orders);
+	bool agg_distinct = root.agg_distinct;
 
 	// Ordered aggregates can be either WITHIN GROUP or after the function arguments
 	if (root.agg_within_group) {
@@
 			auto nulls = make_uniq<ConstantExpression>(EnumUtil::ToChars(order_by.null_order));
 			order_bys = nullptr;
 			auto unordered = make_uniq<FunctionExpression>(catalog, schema, lowercase_name.c_str(), std::move(children),
-			                                               std::move(filter_expr), std::move(order_bys),
-			                                               root.agg_distinct, false, root.export_state);
+			                                               std::move(filter_expr), std::move(order_bys),
+			                                               agg_distinct, false, root.export_state);
 			lowercase_name = "list_sort";
+			agg_distinct = false;
 			order_bys.reset();   // NOLINT
 			filter_expr.reset(); // NOLINT
 			children.clear();    // NOLINT
@@
 	auto function = make_uniq<FunctionExpression>(std::move(catalog), std::move(schema), lowercase_name.c_str(),
 	                                              std::move(children), std::move(filter_expr), std::move(order_bys),
-	                                              root.agg_distinct, false, root.export_state);
+	                                              agg_distinct, false, root.export_state);
 	function->query_location = root.location;
 
 	return std::move(function);
 
