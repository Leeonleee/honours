--- a/src/parser/transform/expression/transform_function.cpp
+++ b/src/parser/transform/expression/transform_function.cpp
@@
 			auto nulls = make_uniq<ConstantExpression>(EnumUtil::ToChars(order_by.null_order));
 			order_bys = nullptr;
 			auto unordered = make_uniq<FunctionExpression>(catalog, schema, lowercase_name.c_str(), std::move(children),
 			                                               std::move(filter_expr), std::move(order_bys),
 			                                               root.agg_distinct, false, root.export_state);
+			// The DISTINCT clause has been applied to the inner list() aggregate.
+			// Clear the DISTINCT flag so the outer list_sort() scalar function
+			// is not erroneously treated as an aggregate with DISTINCT.
+			root.agg_distinct = false;
 			lowercase_name = "list_sort";
 			order_bys.reset();   // NOLINT
 			filter_expr.reset(); // NOLINT
 			children.clear();    // NOLINT
 			children.emplace_back(std::move(unordered));
 			children.emplace_back(std::move(sense));
			children.emplace_back(std::move(nulls));
 		}
 	}
 
 	auto function = make_uniq<FunctionExpression>(std::move(catalog), std::move(schema), lowercase_name.c_str(),
 	                                              std::move(children), std::move(filter_expr), std::move(order_bys),
 	                                              root.agg_distinct, false, root.export_state);
	                                             
