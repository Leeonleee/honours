{
  "repo": "duckdb/duckdb",
  "pull_number": 9842,
  "instance_id": "duckdb__duckdb-9842",
  "issue_numbers": [
    "9745"
  ],
  "base_commit": "3f96a90635d351089a0214b8f1d11b7c7244e3bd",
  "patch": "diff --git a/.github/patches/extensions/postgres_scanner/default_value.patch b/.github/patches/extensions/postgres_scanner/default_value.patch\nnew file mode 100644\nindex 000000000000..366691c31c27\n--- /dev/null\n+++ b/.github/patches/extensions/postgres_scanner/default_value.patch\n@@ -0,0 +1,15 @@\n+diff --git a/src/storage/postgres_table_set.cpp b/src/storage/postgres_table_set.cpp\n+index 88786cf..bfd37ab 100644\n+--- a/src/storage/postgres_table_set.cpp\n++++ b/src/storage/postgres_table_set.cpp\n+@@ -205,8 +205,8 @@ string PostgresColumnsToSQL(const ColumnList &columns, const vector<unique_ptr<C\n+ \t\t}\n+ \t\tif (column.Generated()) {\n+ \t\t\tss << \" GENERATED ALWAYS AS(\" << column.GeneratedExpression().ToString() << \")\";\n+-\t\t} else if (column.DefaultValue()) {\n+-\t\t\tss << \" DEFAULT(\" << column.DefaultValue()->ToString() << \")\";\n++\t\t} else if (column.HasDefaultValue()) {\n++\t\t\tss << \" DEFAULT(\" << column.DefaultValue().ToString() << \")\";\n+ \t\t}\n+ \t}\n+ \t// print any extra constraints that still need to be printed\ndiff --git a/src/catalog/catalog_entry/table_catalog_entry.cpp b/src/catalog/catalog_entry/table_catalog_entry.cpp\nindex a652a6d737bc..eabcab062ce9 100644\n--- a/src/catalog/catalog_entry/table_catalog_entry.cpp\n+++ b/src/catalog/catalog_entry/table_catalog_entry.cpp\n@@ -136,8 +136,8 @@ string TableCatalogEntry::ColumnsToSQL(const ColumnList &columns, const vector<u\n \t\t}\n \t\tif (column.Generated()) {\n \t\t\tss << \" GENERATED ALWAYS AS(\" << column.GeneratedExpression().ToString() << \")\";\n-\t\t} else if (column.DefaultValue()) {\n-\t\t\tss << \" DEFAULT(\" << column.DefaultValue()->ToString() << \")\";\n+\t\t} else if (column.HasDefaultValue()) {\n+\t\t\tss << \" DEFAULT(\" << column.DefaultValue().ToString() << \")\";\n \t\t}\n \t}\n \t// print any extra constraints that still need to be printed\ndiff --git a/src/function/table/system/duckdb_columns.cpp b/src/function/table/system/duckdb_columns.cpp\nindex 42d8203e7966..fe3e3e637e09 100644\n--- a/src/function/table/system/duckdb_columns.cpp\n+++ b/src/function/table/system/duckdb_columns.cpp\n@@ -133,8 +133,8 @@ class TableColumnHelper : public ColumnHelper {\n \t\tauto &column = entry.GetColumn(LogicalIndex(col));\n \t\tif (column.Generated()) {\n \t\t\treturn Value(column.GeneratedExpression().ToString());\n-\t\t} else if (column.DefaultValue()) {\n-\t\t\treturn Value(column.DefaultValue()->ToString());\n+\t\t} else if (column.HasDefaultValue()) {\n+\t\t\treturn Value(column.DefaultValue().ToString());\n \t\t}\n \t\treturn Value();\n \t}\ndiff --git a/src/function/table/system/pragma_table_info.cpp b/src/function/table/system/pragma_table_info.cpp\nindex 38c36098f811..a7a7bc4f9f80 100644\n--- a/src/function/table/system/pragma_table_info.cpp\n+++ b/src/function/table/system/pragma_table_info.cpp\n@@ -95,6 +95,17 @@ static void CheckConstraints(TableCatalogEntry &table, const ColumnDefinition &c\n \t}\n }\n \n+static Value DefaultValue(const ColumnDefinition &def) {\n+\tif (def.Generated()) {\n+\t\treturn Value(def.GeneratedExpression().ToString());\n+\t}\n+\tif (!def.HasDefaultValue()) {\n+\t\treturn Value();\n+\t}\n+\tauto &value = def.DefaultValue();\n+\treturn Value(value.ToString());\n+}\n+\n static void PragmaTableInfoTable(PragmaTableOperatorData &data, TableCatalogEntry &table, DataChunk &output) {\n \tif (data.offset >= table.GetColumns().LogicalColumnCount()) {\n \t\t// finished returning values\n@@ -122,8 +133,7 @@ static void PragmaTableInfoTable(PragmaTableOperatorData &data, TableCatalogEntr\n \t\t// \"notnull\", PhysicalType::BOOL\n \t\toutput.SetValue(3, index, Value::BOOLEAN(not_null));\n \t\t// \"dflt_value\", PhysicalType::VARCHAR\n-\t\tValue def_value = column.DefaultValue() ? Value(column.DefaultValue()->ToString()) : Value();\n-\t\toutput.SetValue(4, index, def_value);\n+\t\toutput.SetValue(4, index, DefaultValue(column));\n \t\t// \"pk\", PhysicalType::BOOL\n \t\toutput.SetValue(5, index, Value::BOOLEAN(pk));\n \t}\ndiff --git a/src/include/duckdb/parser/column_definition.hpp b/src/include/duckdb/parser/column_definition.hpp\nindex 1510186aa494..9c0ae77f4319 100644\n--- a/src/include/duckdb/parser/column_definition.hpp\n+++ b/src/include/duckdb/parser/column_definition.hpp\n@@ -31,7 +31,8 @@ class ColumnDefinition {\n \n public:\n \t//! default_value\n-\tconst unique_ptr<ParsedExpression> &DefaultValue() const;\n+\tconst ParsedExpression &DefaultValue() const;\n+\tbool HasDefaultValue() const;\n \tvoid SetDefaultValue(unique_ptr<ParsedExpression> default_value);\n \n \t//! type\ndiff --git a/src/parser/column_definition.cpp b/src/parser/column_definition.cpp\nindex 93dfee0b8761..713618efe04e 100644\n--- a/src/parser/column_definition.cpp\n+++ b/src/parser/column_definition.cpp\n@@ -25,11 +25,21 @@ ColumnDefinition ColumnDefinition::Copy() const {\n \treturn copy;\n }\n \n-const unique_ptr<ParsedExpression> &ColumnDefinition::DefaultValue() const {\n+const ParsedExpression &ColumnDefinition::DefaultValue() const {\n+\tif (!HasDefaultValue()) {\n+\t\tif (Generated()) {\n+\t\t\tthrow InternalException(\"Calling DefaultValue() on a generated column\");\n+\t\t}\n+\t\tthrow InternalException(\"DefaultValue() called on a column without a default value\");\n+\t}\n+\treturn *expression;\n+}\n+\n+bool ColumnDefinition::HasDefaultValue() const {\n \tif (Generated()) {\n-\t\tthrow InternalException(\"Calling DefaultValue() on a generated column\");\n+\t\treturn false;\n \t}\n-\treturn expression;\n+\treturn expression != nullptr;\n }\n \n void ColumnDefinition::SetDefaultValue(unique_ptr<ParsedExpression> default_value) {\ndiff --git a/src/parser/transform/constraint/transform_constraint.cpp b/src/parser/transform/constraint/transform_constraint.cpp\nindex 84b8a409685b..ef601ac47f25 100644\n--- a/src/parser/transform/constraint/transform_constraint.cpp\n+++ b/src/parser/transform/constraint/transform_constraint.cpp\n@@ -113,8 +113,9 @@ unique_ptr<Constraint> Transformer::TransformConstraint(duckdb_libpgquery::PGLis\n \tcase duckdb_libpgquery::PG_CONSTR_NULL:\n \t\treturn nullptr;\n \tcase duckdb_libpgquery::PG_CONSTR_GENERATED_VIRTUAL: {\n-\t\tif (column.DefaultValue()) {\n-\t\t\tthrow InvalidInputException(\"DEFAULT constraint on GENERATED column \\\"%s\\\" is not allowed\", column.Name());\n+\t\tif (column.HasDefaultValue()) {\n+\t\t\tthrow InvalidInputException(\"\\\"%s\\\" has a DEFAULT value set, it can not become a GENERATED column\",\n+\t\t\t                            column.Name());\n \t\t}\n \t\tcolumn.SetGeneratedExpression(TransformExpression(constraint->raw_expr));\n \t\treturn nullptr;\ndiff --git a/src/planner/binder/statement/bind_create_table.cpp b/src/planner/binder/statement/bind_create_table.cpp\nindex 2801fad7ac4a..83f49b64a7d1 100644\n--- a/src/planner/binder/statement/bind_create_table.cpp\n+++ b/src/planner/binder/statement/bind_create_table.cpp\n@@ -212,10 +212,10 @@ void Binder::BindGeneratedColumns(BoundCreateTableInfo &info) {\n void Binder::BindDefaultValues(const ColumnList &columns, vector<unique_ptr<Expression>> &bound_defaults) {\n \tfor (auto &column : columns.Physical()) {\n \t\tunique_ptr<Expression> bound_default;\n-\t\tif (column.DefaultValue()) {\n+\t\tif (column.HasDefaultValue()) {\n \t\t\t// we bind a copy of the DEFAULT value because binding is destructive\n \t\t\t// and we want to keep the original expression around for serialization\n-\t\t\tauto default_copy = column.DefaultValue()->Copy();\n+\t\t\tauto default_copy = column.DefaultValue().Copy();\n \t\t\tConstantBinder default_binder(*this, context, \"DEFAULT value\");\n \t\t\tdefault_binder.target_type = column.Type();\n \t\t\tbound_default = default_binder.Bind(default_copy);\ndiff --git a/src/planner/binder/statement/bind_insert.cpp b/src/planner/binder/statement/bind_insert.cpp\nindex 784823debe46..6ea5f1363974 100644\n--- a/src/planner/binder/statement/bind_insert.cpp\n+++ b/src/planner/binder/statement/bind_insert.cpp\n@@ -42,8 +42,8 @@ static void CheckInsertColumnCountMismatch(int64_t expected_columns, int64_t res\n }\n \n unique_ptr<ParsedExpression> ExpandDefaultExpression(const ColumnDefinition &column) {\n-\tif (column.DefaultValue()) {\n-\t\treturn column.DefaultValue()->Copy();\n+\tif (column.HasDefaultValue()) {\n+\t\treturn column.DefaultValue().Copy();\n \t} else {\n \t\treturn make_uniq<ConstantExpression>(Value(column.Type()));\n \t}\n",
  "test_patch": "diff --git a/test/sql/pragma/test_table_info.test b/test/sql/pragma/test_table_info.test\nindex 1218f1dd6661..b1f725f92e90 100644\n--- a/test/sql/pragma/test_table_info.test\n+++ b/test/sql/pragma/test_table_info.test\n@@ -95,3 +95,15 @@ PRAGMA table_info(tconstraint2)\n # incorrect number of parameters\n statement error\n PRAGMA table_info(1,2,3);\n+\n+statement ok\n+create table t1 (\n+\tc1 int,\n+\tc2 int generated always as (c1 + 1)\n+);\n+\n+query IIIIII\n+SELECT * FROM pragma_table_info(t1);\n+----\n+0\tc1\tINTEGER\tfalse\tNULL\tfalse\n+1\tc2\tINTEGER\tfalse\tCAST((c1 + 1) AS INTEGER)\tfalse\n\\ No newline at end of file\n",
  "problem_statement": "Error: INTERNAL Error: Calling DefaultValue() on a generated column\n### What happens?\n\nI clone the package and build the latest release. When executing `pragma_table_info` on a table with generated columns through the DuckDB CLI, an error is returned, ` Error: INTERNAL Error: Calling DefaultValue() on a generated column`.\r\n\r\nI've noticed that a similar bug that has been fixed in https://github.com/duckdb/duckdb/issues/8833.\r\nSince we can properly return the stringified generated expression.\r\nA suggested Fix may be removing the IF branch in the following code.\r\n```c++\r\n// in src/parser/column_definition.cpp\r\n// Remove the IF branch\r\nconst unique_ptr<ParsedExpression> &ColumnDefinition::DefaultValue() const {\r\n\tif (Generated()) {\r\n\t\tthrow InternalException(\"Calling DefaultValue() on a generated column\");\r\n\t}\r\n\treturn expression;\r\n}\r\n```\n\n### To Reproduce\n\n```SQL\r\ncreate table t1 (c1 int, c2 int generated always as (c1 + 1));\r\nSELECT * FROM pragma_table_info(t1); -- Error: INTERNAL Error: Calling DefaultValue() on a generated column\r\n```\n\n### OS:\n\nUbuntu 22.04LTS x86\n\n### DuckDB Version:\n\nv0.9.3-dev668 802c71dafc\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nJiansen Song\n\n### Affiliation:\n\nInstitute of Software Chinese Academy of Sciences\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2023-11-29T09:35:55Z",
  "modified_files": [
    "b/.github/patches/extensions/postgres_scanner/default_value.patch",
    "a/src/catalog/catalog_entry/table_catalog_entry.cpp",
    "a/src/function/table/system/duckdb_columns.cpp",
    "a/src/function/table/system/pragma_table_info.cpp",
    "a/src/include/duckdb/parser/column_definition.hpp",
    "a/src/parser/column_definition.cpp",
    "a/src/parser/transform/constraint/transform_constraint.cpp",
    "a/src/planner/binder/statement/bind_create_table.cpp",
    "a/src/planner/binder/statement/bind_insert.cpp"
  ]
}