{
  "repo": "duckdb/duckdb",
  "pull_number": 9279,
  "instance_id": "duckdb__duckdb-9279",
  "issue_numbers": [
    "7672"
  ],
  "base_commit": "1cfcaca040ac37e4ec2519ef0d59083e1d0e4cc6",
  "patch": "diff --git a/src/common/operator/cast_operators.cpp b/src/common/operator/cast_operators.cpp\nindex 8de8cd5b1107..3877a1dca279 100644\n--- a/src/common/operator/cast_operators.cpp\n+++ b/src/common/operator/cast_operators.cpp\n@@ -1368,11 +1368,17 @@ timestamp_t CastTimestampUsToSec::Operation(timestamp_t input) {\n \ttimestamp_t cast_timestamp(Timestamp::GetEpochSeconds(input));\n \treturn cast_timestamp;\n }\n+\n template <>\n timestamp_t CastTimestampMsToUs::Operation(timestamp_t input) {\n \treturn Timestamp::FromEpochMs(input.value);\n }\n \n+template <>\n+date_t CastTimestampMsToDate::Operation(timestamp_t input) {\n+\treturn Timestamp::GetDate(Timestamp::FromEpochMs(input.value));\n+}\n+\n template <>\n timestamp_t CastTimestampMsToNs::Operation(timestamp_t input) {\n \tauto us = CastTimestampMsToUs::Operation<timestamp_t, timestamp_t>(input);\n@@ -1385,8 +1391,9 @@ timestamp_t CastTimestampNsToUs::Operation(timestamp_t input) {\n }\n \n template <>\n-timestamp_t CastTimestampSecToUs::Operation(timestamp_t input) {\n-\treturn Timestamp::FromEpochSeconds(input.value);\n+date_t CastTimestampNsToDate::Operation(timestamp_t input) {\n+\tconst auto us = CastTimestampNsToUs::Operation<timestamp_t, timestamp_t>(input);\n+\treturn Timestamp::GetDate(us);\n }\n \n template <>\n@@ -1395,12 +1402,23 @@ timestamp_t CastTimestampSecToMs::Operation(timestamp_t input) {\n \treturn CastTimestampUsToMs::Operation<timestamp_t, timestamp_t>(us);\n }\n \n+template <>\n+timestamp_t CastTimestampSecToUs::Operation(timestamp_t input) {\n+\treturn Timestamp::FromEpochSeconds(input.value);\n+}\n+\n template <>\n timestamp_t CastTimestampSecToNs::Operation(timestamp_t input) {\n \tauto us = CastTimestampSecToUs::Operation<timestamp_t, timestamp_t>(input);\n \treturn CastTimestampUsToNs::Operation<timestamp_t, timestamp_t>(us);\n }\n \n+template <>\n+date_t CastTimestampSecToDate::Operation(timestamp_t input) {\n+\tconst auto us = CastTimestampSecToUs::Operation<timestamp_t, timestamp_t>(input);\n+\treturn Timestamp::GetDate(us);\n+}\n+\n //===--------------------------------------------------------------------===//\n // Cast To Timestamp\n //===--------------------------------------------------------------------===//\ndiff --git a/src/function/cast/time_casts.cpp b/src/function/cast/time_casts.cpp\nindex 3586247a4401..acd12798f660 100644\n--- a/src/function/cast/time_casts.cpp\n+++ b/src/function/cast/time_casts.cpp\n@@ -114,6 +114,9 @@ BoundCastInfo DefaultCasts::TimestampNsCastSwitch(BindCastInput &input, const Lo\n \tcase LogicalTypeId::VARCHAR:\n \t\t// timestamp (ns) to varchar\n \t\treturn BoundCastInfo(&VectorCastHelpers::StringCast<timestamp_t, duckdb::CastFromTimestampNS>);\n+\tcase LogicalTypeId::DATE:\n+\t\t// timestamp (ns) to date\n+\t\treturn BoundCastInfo(&VectorCastHelpers::TemplatedCastLoop<timestamp_t, date_t, duckdb::CastTimestampNsToDate>);\n \tcase LogicalTypeId::TIMESTAMP:\n \t\t// timestamp (ns) to timestamp (us)\n \t\treturn BoundCastInfo(\n@@ -130,6 +133,9 @@ BoundCastInfo DefaultCasts::TimestampMsCastSwitch(BindCastInput &input, const Lo\n \tcase LogicalTypeId::VARCHAR:\n \t\t// timestamp (ms) to varchar\n \t\treturn BoundCastInfo(&VectorCastHelpers::StringCast<timestamp_t, duckdb::CastFromTimestampMS>);\n+\tcase LogicalTypeId::DATE:\n+\t\t// timestamp (ms) to date\n+\t\treturn BoundCastInfo(&VectorCastHelpers::TemplatedCastLoop<timestamp_t, date_t, duckdb::CastTimestampMsToDate>);\n \tcase LogicalTypeId::TIMESTAMP:\n \t\t// timestamp (ms) to timestamp (us)\n \t\treturn BoundCastInfo(\n@@ -148,8 +154,12 @@ BoundCastInfo DefaultCasts::TimestampSecCastSwitch(BindCastInput &input, const L\n \t// now switch on the result type\n \tswitch (target.id()) {\n \tcase LogicalTypeId::VARCHAR:\n-\t\t// timestamp (sec) to varchar\n+\t\t// timestamp (s) to varchar\n \t\treturn BoundCastInfo(&VectorCastHelpers::StringCast<timestamp_t, duckdb::CastFromTimestampSec>);\n+\tcase LogicalTypeId::DATE:\n+\t\t// timestamp (s) to date\n+\t\treturn BoundCastInfo(\n+\t\t    &VectorCastHelpers::TemplatedCastLoop<timestamp_t, date_t, duckdb::CastTimestampSecToDate>);\n \tcase LogicalTypeId::TIMESTAMP_MS:\n \t\t// timestamp (s) to timestamp (ms)\n \t\treturn BoundCastInfo(\ndiff --git a/src/include/duckdb/common/operator/cast_operators.hpp b/src/include/duckdb/common/operator/cast_operators.hpp\nindex fdcc90cd8d28..62fdb54f5259 100644\n--- a/src/include/duckdb/common/operator/cast_operators.hpp\n+++ b/src/include/duckdb/common/operator/cast_operators.hpp\n@@ -580,27 +580,27 @@ template <>\n DUCKDB_API bool TryCastToTimestampSec::Operation(date_t input, timestamp_t &result, bool strict);\n \n //===--------------------------------------------------------------------===//\n-// Non-Standard Timestamps -> string/standard timestamp\n+// Non-Standard Timestamps -> string/timestamp types\n //===--------------------------------------------------------------------===//\n \n struct CastFromTimestampNS {\n \ttemplate <class SRC>\n \tstatic inline string_t Operation(SRC input, Vector &result) {\n-\t\tthrow duckdb::NotImplementedException(\"Cast to timestamp could not be performed!\");\n+\t\tthrow duckdb::NotImplementedException(\"Cast to string could not be performed!\");\n \t}\n };\n \n struct CastFromTimestampMS {\n \ttemplate <class SRC>\n \tstatic inline string_t Operation(SRC input, Vector &result) {\n-\t\tthrow duckdb::NotImplementedException(\"Cast to timestamp could not be performed!\");\n+\t\tthrow duckdb::NotImplementedException(\"Cast to string could not be performed!\");\n \t}\n };\n \n struct CastFromTimestampSec {\n \ttemplate <class SRC>\n \tstatic inline string_t Operation(SRC input, Vector &result) {\n-\t\tthrow duckdb::NotImplementedException(\"Cast to timestamp could not be performed!\");\n+\t\tthrow duckdb::NotImplementedException(\"Cast to string could not be performed!\");\n \t}\n };\n \n@@ -625,6 +625,13 @@ struct CastTimestampUsToSec {\n \t}\n };\n \n+struct CastTimestampMsToDate {\n+\ttemplate <class SRC, class DST>\n+\tstatic inline DST Operation(SRC input) {\n+\t\tthrow duckdb::NotImplementedException(\"Cast to DATE could not be performed!\");\n+\t}\n+};\n+\n struct CastTimestampMsToUs {\n \ttemplate <class SRC, class DST>\n \tstatic inline DST Operation(SRC input) {\n@@ -639,6 +646,12 @@ struct CastTimestampMsToNs {\n \t}\n };\n \n+struct CastTimestampNsToDate {\n+\ttemplate <class SRC, class DST>\n+\tstatic inline DST Operation(SRC input) {\n+\t\tthrow duckdb::NotImplementedException(\"Cast to DATE could not be performed!\");\n+\t}\n+};\n struct CastTimestampNsToUs {\n \ttemplate <class SRC, class DST>\n \tstatic inline DST Operation(SRC input) {\n@@ -646,6 +659,12 @@ struct CastTimestampNsToUs {\n \t}\n };\n \n+struct CastTimestampSecToDate {\n+\ttemplate <class SRC, class DST>\n+\tstatic inline DST Operation(SRC input) {\n+\t\tthrow duckdb::NotImplementedException(\"Cast to DATE could not be performed!\");\n+\t}\n+};\n struct CastTimestampSecToMs {\n \ttemplate <class SRC, class DST>\n \tstatic inline DST Operation(SRC input) {\n@@ -667,19 +686,25 @@ struct CastTimestampSecToNs {\n \t}\n };\n \n+template <>\n+duckdb::timestamp_t CastTimestampUsToSec::Operation(duckdb::timestamp_t input);\n template <>\n duckdb::timestamp_t CastTimestampUsToMs::Operation(duckdb::timestamp_t input);\n template <>\n duckdb::timestamp_t CastTimestampUsToNs::Operation(duckdb::timestamp_t input);\n template <>\n-duckdb::timestamp_t CastTimestampUsToSec::Operation(duckdb::timestamp_t input);\n+duckdb::date_t CastTimestampMsToDate::Operation(duckdb::timestamp_t input);\n template <>\n duckdb::timestamp_t CastTimestampMsToUs::Operation(duckdb::timestamp_t input);\n template <>\n duckdb::timestamp_t CastTimestampMsToNs::Operation(duckdb::timestamp_t input);\n template <>\n+duckdb::date_t CastTimestampNsToDate::Operation(duckdb::timestamp_t input);\n+template <>\n duckdb::timestamp_t CastTimestampNsToUs::Operation(duckdb::timestamp_t input);\n template <>\n+duckdb::date_t CastTimestampSecToDate::Operation(duckdb::timestamp_t input);\n+template <>\n duckdb::timestamp_t CastTimestampSecToMs::Operation(duckdb::timestamp_t input);\n template <>\n duckdb::timestamp_t CastTimestampSecToUs::Operation(duckdb::timestamp_t input);\n",
  "test_patch": "diff --git a/test/sql/types/timestamp/test_timestamp_types.test b/test/sql/types/timestamp/test_timestamp_types.test\nindex 9cc79da0419e..74dbd1df1d2e 100644\n--- a/test/sql/types/timestamp/test_timestamp_types.test\n+++ b/test/sql/types/timestamp/test_timestamp_types.test\n@@ -46,16 +46,7 @@ INSERT INTO timestamp VALUES ('2008-01-01 00:00:11','2008-01-01 00:00:01.794','2\n statement error\n select '90000-01-19 03:14:07.999999'::TIMESTAMP_US::TIMESTAMP_NS\n \n-#DATE/TIME conversions are not directly supported yet\n-statement error\n-select sec::DATE from timestamp;\n-\n-statement error\n-select milli::DATE from timestamp;\n-\n-statement error\n-select nano::DATE from timestamp;\n-\n+# TIME conversions are not directly supported yet\n statement error\n select sec::TIME from timestamp;\n \n@@ -79,6 +70,18 @@ endloop\n \n endloop\n \n+# Cast to DATE\n+foreach src sec milli micro nano\n+\n+query I\n+SELECT ${src}::DATE from timestamp\n+----\n+2008-01-01\n+2008-01-01\n+2008-01-01\n+\n+endloop\n+\n #Sorting on the timestamps\n query T\n select sec from timestamp order by sec;\n",
  "problem_statement": "Cannot cast `TIMESTAMP_NS` to `date` using `::` syntax\n### What happens?\n\nA cast of the form `<TIMESTAMP_NS>::date` will result in an error, whereas `<TIMESTAMP>::date` works, as does `date_trunc('day', <TIMESTAMP_NS>)`.\n\n### To Reproduce\n\nWorks:\r\n```sql\r\nwith tbl as (\r\n    select\r\n        '2023-01-01 00:00:00'::TIMESTAMP\r\n        as c1\r\n)\r\nselect c1::date\r\nfrom tbl\r\n```\r\n\r\nAlso works:\r\n```sql\r\nwith tbl as (\r\n    select\r\n        '2023-01-01 00:00:00'::TIMESTAMP_NS\r\n        as c1\r\n)\r\nselect date_trunc('day', c1)\r\nfrom tbl\r\n```\r\n\r\nBut this doesn't work:\r\n```sql\r\nwith tbl as (\r\n    select\r\n        '2023-01-01 00:00:00'::TIMESTAMP_NS\r\n        as c1\r\n)\r\nselect c1::date\r\nfrom tbl\r\n```\r\n```\r\nConversion Error: Unimplemented type for cast (TIMESTAMP_NS -> DATE)\r\n```\n\n### OS:\n\nLinux\n\n### DuckDB Version:\n\n0.8.1.dev96\n\n### DuckDB Client:\n\nAny\n\n### Full Name:\n\nDavid Cortes\n\n### Affiliation:\n\nNone\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "This issue is stale because it has been open 90 days with no activity. Remove stale label or comment or this will be closed in 30 days.\nThis issue was closed because it has been stale for 30 days with no activity.\ni'm getting this issue as well\r\n\r\n```python\r\nimport duckdb\r\nimport pandas as pd\r\n\r\ndf = pd.DataFrame({\"ds\": [\"2022-01-01\"]})\r\ndf[\"ds\"] = pd.to_datetime(df[\"ds\"])\r\n\r\ncurr = duckdb.connect()\r\n\r\ncurr.execute(\"select cast(ds as date) from df\").fetchdf()\r\n```\r\n\r\nConversionException: Conversion Error: Unimplemented type for cast (TIMESTAMP_NS -> DATE)\nI am getting this error as well, using SQLAlchemy core's casts: `sa.cast(<col>, sa.DATE)`  results in `CAST(<col> AS DATE)`. Is there a current workaround while this is not implemented?\nThese types are supported for interoperability with Python and R, so there are some rough edges and oversights.",
  "created_at": "2023-10-09T15:37:05Z"
}