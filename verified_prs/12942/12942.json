{
  "repo": "duckdb/duckdb",
  "pull_number": 12942,
  "instance_id": "duckdb__duckdb-12942",
  "issue_numbers": [
    "4343"
  ],
  "base_commit": "1832d2c26ca1404675805ba172b99a43cdaa0943",
  "patch": "diff --git a/src/catalog/default/default_views.cpp b/src/catalog/default/default_views.cpp\nindex 6da1854ee356..71869647151f 100644\n--- a/src/catalog/default/default_views.cpp\n+++ b/src/catalog/default/default_views.cpp\n@@ -53,6 +53,10 @@ static const DefaultView internal_views[] = {\n \t{\"information_schema\", \"referential_constraints\", \"SELECT f.database_name constraint_catalog, f.schema_name constraint_schema, f.constraint_name constraint_name, c.database_name unique_constraint_catalog, c.schema_name unique_constraint_schema, c.constraint_name unique_constraint_name, 'NONE' match_option, 'NO ACTION' update_rule, 'NO ACTION' delete_rule FROM duckdb_constraints() c, duckdb_constraints() f WHERE f.constraint_type = 'FOREIGN KEY' AND (c.constraint_type = 'UNIQUE' OR c.constraint_type = 'PRIMARY KEY') AND f.database_oid = c.database_oid AND f.schema_oid = c.schema_oid AND lower(f.referenced_table) = lower(c.table_name) AND [lower(x) for x in f.referenced_column_names] = [lower(x) for x in c.constraint_column_names]\"},\n \t{\"information_schema\", \"key_column_usage\", \"SELECT database_name constraint_catalog, schema_name constraint_schema, constraint_name, database_name table_catalog, schema_name table_schema, table_name, UNNEST(constraint_column_names) column_name, UNNEST(generate_series(1, len(constraint_column_names))) ordinal_position, CASE constraint_type WHEN 'FOREIGN KEY' THEN 1 ELSE NULL END position_in_unique_constraint FROM duckdb_constraints() WHERE constraint_type = 'FOREIGN KEY' OR constraint_type = 'PRIMARY KEY' OR constraint_type = 'UNIQUE';\"},\n \t{\"information_schema\", \"table_constraints\", \"SELECT database_name constraint_catalog, schema_name constraint_schema, constraint_name, database_name table_catalog, schema_name table_schema, table_name, CASE constraint_type WHEN 'NOT NULL' THEN 'CHECK' ELSE constraint_type END constraint_type, 'NO' is_deferrable, 'NO' initially_deferred, 'YES' enforced, 'YES' nulls_distinct FROM duckdb_constraints() WHERE constraint_type = 'PRIMARY KEY' OR constraint_type = 'FOREIGN KEY' OR constraint_type = 'UNIQUE' OR constraint_type = 'CHECK' OR constraint_type = 'NOT NULL';\"},\n+    {\"information_schema\", \"constraint_column_usage\", \"SELECT database_name AS table_catalog, schema_name AS table_schema, table_name, column_name, database_name AS constraint_catalog, schema_name AS constraint_schema, constraint_name, constraint_type, constraint_text FROM (SELECT dc.*, UNNEST(dc.constraint_column_names) AS column_name FROM duckdb_constraints() AS dc WHERE constraint_type NOT IN ('NOT NULL') );\"},\n+    {\"information_schema\", \"constraint_table_usage\", \"SELECT database_name AS table_catalog, schema_name AS table_schema, table_name, database_name AS constraint_catalog, schema_name AS constraint_schema, constraint_name, constraint_type FROM duckdb_constraints() WHERE constraint_type NOT IN ('NOT NULL');\"},\n+    {\"information_schema\", \"check_constraints\", \"SELECT database_name AS constraint_catalog, schema_name AS constraint_schema, constraint_name, CASE constraint_type WHEN 'NOT NULL' THEN column_name || ' IS NOT NULL' ELSE constraint_text END AS check_clause FROM (SELECT dc.*, UNNEST(dc.constraint_column_names) AS column_name FROM duckdb_constraints() AS dc WHERE constraint_type IN ('CHECK', 'NOT NULL'));\"},\n+    {\"information_schema\", \"views\", \"SELECT database_name AS table_catalog, schema_name AS table_schema, view_name AS table_name, sql AS view_definition, 'NONE' AS check_option, 'NO' AS is_updatable, 'NO' AS is_insertable_into, 'NO' AS is_trigger_updatable, 'NO' AS is_trigger_deletable, 'NO' AS is_trigger_insertable_into FROM duckdb_views();\"},\n     {nullptr, nullptr, nullptr}};\n \n static unique_ptr<CreateViewInfo> GetDefaultView(ClientContext &context, const string &input_schema, const string &input_name) {\n",
  "test_patch": "diff --git a/test/sql/binder/similar_to.test b/test/sql/binder/similar_to.test\nindex 4113267022f8..3ae9db76770d 100644\n--- a/test/sql/binder/similar_to.test\n+++ b/test/sql/binder/similar_to.test\n@@ -21,10 +21,11 @@ depdelay_minutes\n statement ok\n CREATE TABLE lineitem(i INTEGER);\n \n-statement error\n-SELECT * FROM li\n-----\n-lineitem\n+# Commenting for now to allow CI to pass\n+# statement error\n+# SELECT * FROM li\n+# ----\n+# lineitem\n \n statement error\n SELECT * FROM lineitem_long\ndiff --git a/test/sql/table_function/information_schema.test b/test/sql/table_function/information_schema.test\nindex 910b896f20d6..7acc17fad0bd 100644\n--- a/test/sql/table_function/information_schema.test\n+++ b/test/sql/table_function/information_schema.test\n@@ -2,8 +2,7 @@\n # description: Test information_schema functions\n # group: [table_function]\n \n-require skip_reload\n-\n+require noforcestorage\n \n statement ok\n SELECT * FROM INFORMATION_SCHEMA.SCHEMATA;\n@@ -73,6 +72,55 @@ SELECT ordinal_position, column_name, data_type FROM information_schema.columns\n ----\n 1\ti\tINTEGER\n \n+query IIII\n+SELECT character_set_name, character_repertoire, form_of_use, default_collate_name FROM information_schema.character_sets\n+----\n+UTF8\tUCS\tUTF8\tucs_basic\n+\n+statement ok\n+SELECT * FROM information_schema.referential_constraints\n+\n+statement ok\n+SELECT * FROM information_schema.key_column_usage\n+\n+statement ok\n+SELECT * FROM information_schema.table_constraints\n+\n+statement ok\n+CREATE TABLE scheme.dept (dept_id INT PRIMARY KEY, dept_name VARCHAR(100) NOT NULL)\n+\n+statement ok\n+CREATE TABLE scheme.emp (emp_id INT PRIMARY KEY, first_name VARCHAR(100) NOT NULL, last_name VARCHAR(100) NOT NULL, ssn INT NOT NULL UNIQUE, salary DECIMAL(10, 2) NOT NULL CHECK (salary > 0), dept_id INT REFERENCES scheme.dept(dept_id))\n+\n+query IIIIIII\n+SELECT table_catalog, table_schema, table_name, column_name, constraint_catalog, constraint_schema, constraint_name FROM information_schema.constraint_column_usage WHERE table_schema = 'scheme' AND table_name = 'emp' ORDER BY column_name ASC\n+----\n+memory\tscheme\temp\tdept_id\tmemory\tscheme\temp_dept_id_dept_id_fkey\n+memory\tscheme\temp\temp_id\tmemory\tscheme\temp_emp_id_pkey\n+memory\tscheme\temp\tsalary\tmemory\tscheme\temp_salary_check\n+memory\tscheme\temp\tssn\tmemory\tscheme\temp_ssn_key\n+\n+query IIIIII\n+SELECT table_catalog, table_schema, table_name, constraint_catalog, constraint_schema, constraint_name FROM information_schema.constraint_table_usage WHERE table_schema = 'scheme' AND table_name = 'emp' ORDER BY constraint_name ASC\n+----\n+memory\tscheme\temp\tmemory\tscheme\temp_dept_id_dept_id_fkey\n+memory\tscheme\temp\tmemory\tscheme\temp_emp_id_pkey\n+memory\tscheme\temp\tmemory\tscheme\temp_salary_check\n+memory\tscheme\temp\tmemory\tscheme\temp_ssn_key\n+\n+query IIII\n+SELECT constraint_catalog, constraint_schema, constraint_name, check_clause FROM information_schema.check_constraints WHERE constraint_schema = 'scheme' AND check_clause LIKE 'CHECK%'\n+----\n+memory\tscheme\temp_salary_check\tCHECK((salary > 0))\n+\n+statement ok\n+CREATE OR REPLACE VIEW scheme.emp_dept_view AS SELECT emp.*, dept.dept_name FROM scheme.emp JOIN scheme.dept ON emp.dept_id = dept.dept_id;\n+\n+query IIIIIIIIII\n+SELECT table_catalog, table_schema, table_name, SUBSTR (view_definition, 1, 32) AS view_definition_substr, check_option, is_updatable, is_insertable_into, is_trigger_updatable, is_trigger_deletable, is_trigger_insertable_into FROM information_schema.views WHERE table_schema = 'scheme' AND table_name = 'emp_dept_view';\n+----\n+memory\tscheme\temp_dept_view\tCREATE VIEW scheme.emp_dept_view\tNONE\tNO\tNO\tNO\tNO\tNO\n+\n statement ok\n DROP SCHEMA scheme CASCADE;\n \n@@ -90,17 +138,3 @@ query I\n SELECT COUNT(*) FROM information_schema.columns WHERE table_schema='scheme'\n ----\n 0\n-\n-query IIII\n-SELECT character_set_name, character_repertoire, form_of_use, default_collate_name FROM information_schema.character_sets\n-----\n-UTF8\tUCS\tUTF8\tucs_basic\n-\n-statement ok\n-SELECT * FROM information_schema.referential_constraints\n-\n-statement ok\n-SELECT * FROM information_schema.key_column_usage\n-\n-statement ok\n-SELECT * FROM information_schema.table_constraints\n\\ No newline at end of file\n",
  "problem_statement": "Feature request: Please populate additional information_schema tables related to referential constraints\nPlease add Table constraint (Primary Key, Unique Key, NOT NULL) as well as Referential constraint (Foreign Key) metadata to the \"information_schema\" data dictionary.\r\n\r\nI believe these tables would need to be populated (from https://www.postgresql.org/docs/current/information-schema.html):\r\n\"table_constraints\": https://www.postgresql.org/docs/current/infoschema-table-constraints.html\r\n\"referential_constraints\": https://www.postgresql.org/docs/current/infoschema-referential-constraints.html\r\n\"constraint_column_usage\": https://www.postgresql.org/docs/current/infoschema-constraint-column-usage.html\r\n\"constraint_table_usage\": https://www.postgresql.org/docs/current/infoschema-constraint-table-usage.html\r\n\"check_constraints\": https://www.postgresql.org/docs/current/infoschema-check-constraints.html\r\n... and possibly more...\r\n\r\nThank you!\n",
  "hints_text": "Thanks. For now there's `duckdb_constraints()` that should have all the information you're looking for (with #4346).\n> Thanks. For now there's `duckdb_constraints()` that should have all the information you're looking for (with #4346).\r\n\r\nThanks @krlmlr ! - my reason for requesting the additional information_schema dictionary tables is to allow tools which generate Entity Relationship Diagrams (ERD) - such as PyCharm to glean table relationships.  I was able to generate an ERD with table / column (data type) information from DuckDB, but PK/FK relationships didn't render.  After exporting the DDL SQL and running in PostgreSQL - the ERD generated with all relationships, etc. reflected in the diagram.\r\n\r\nIt would just be nice to have \"one-stop-shopping\" to generate ERD's without the overhead of PostgreSQL...\nThis issue is stale because it has been open 90 days with no activity. Remove stale label or comment or this will be closed in 30 days.\nThis issue was closed because it has been stale for 30 days with no activity.\nUgh, a stale bot :(\r\n\r\nI think this is a valid feature request. I've ended up here because my ERD in PyCharm is missing all the relationship information, which makes it useless.\n@dhirschfeld - FWIW - I've added PK/FK metadata end-points to the [Flight SQL server example](https://github.com/voltrondata/flight-sql-server-example) (running DuckDB under the covers).  Using the Flight SQL JDBC driver with PyCharm does show PK/FK information...\n> FWIW - I've added PK/FK metadata end-points to the [Flight SQL server example](https://github.com/voltrondata/flight-sql-server-example) (running DuckDB under the covers). Using the Flight SQL JDBC driver with PyCharm does show PK/FK information...\r\n\r\nThanks @prmoore77! That seems a round-a-bout way to get there, but whatever works! \ud83d\ude04 \nThis issue is stale because it has been open 90 days with no activity. Remove stale label or comment or this will be closed in 30 days.\nACK\nThis issue is stale because it has been open 90 days with no activity. Remove stale label or comment or this will be closed in 30 days.\n`table_constraints`,  `referential_constraints` and `key_column_usage` exist now - so this is at least partially implemented",
  "created_at": "2024-07-10T22:14:45Z",
  "modified_files": [
    "src/catalog/default/default_views.cpp"
  ]
}