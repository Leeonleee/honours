You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
created ARRAYS are not ordered
### What happens?

Creating an Array will shuffle the elements randomly, which:
a) does not match the documentation, stating: 

[Ordering](https://duckdb.org/docs/sql/data_types/array#ordering)

The ordering of ARRAY instances is defined using a lexicographical order. NULL values compare greater than all other values and are considered equal to each other.

b) becomes a problem when accessing the elements

### To Reproduce

```sql

-- repeat a few times
SELECT ARRAY
  (SELECT 1 UNION ALL
   SELECT 2 UNION ALL
   SELECT 3
   ORDER by 1) AS new_array;

/* outputs are:
┌───────────┐
│ new_array │
├───────────┤
│ [2, 3, 1] │
└───────────┘

┌───────────┐
│ new_array │
├───────────┤
│ [2, 1, 3] │
└───────────┘

┌───────────┐
│ new_array │
├───────────┤
│ [3, 1, 2] │
└───────────┘

*/

```

### OS:

Linux

### DuckDB Version:

0.10.0 .. 0.11-Snapshot

### DuckDB Client:

Java

### Full Name:

Andreas Reichel

### Affiliation:

Reichel

### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?

I have tested with a nightly build

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
18: 
19: ## Installation
20: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
21: 
22: ## Data Import
23: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
24: 
25: ```sql
26: SELECT * FROM 'myfile.csv';
27: SELECT * FROM 'myfile.parquet';
28: ```
29: 
30: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
31: 
32: ## SQL Reference
33: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
34: 
35: ## Development
36: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
37: 
38: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
39: 
40: ## Support
41: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/parser/transform/expression/transform_subquery.cpp]
1: #include "duckdb/parser/expression/list.hpp"
2: #include "duckdb/parser/transformer.hpp"
3: #include "duckdb/parser/query_node/select_node.hpp"
4: #include "duckdb/parser/tableref/subqueryref.hpp"
5: 
6: namespace duckdb {
7: 
8: unique_ptr<ParsedExpression> Transformer::TransformSubquery(duckdb_libpgquery::PGSubLink &root) {
9: 	auto subquery_expr = make_uniq<SubqueryExpression>();
10: 
11: 	subquery_expr->subquery = TransformSelect(root.subselect);
12: 	SetQueryLocation(*subquery_expr, root.location);
13: 	D_ASSERT(subquery_expr->subquery);
14: 	D_ASSERT(!subquery_expr->subquery->node->GetSelectList().empty());
15: 
16: 	switch (root.subLinkType) {
17: 	case duckdb_libpgquery::PG_EXISTS_SUBLINK: {
18: 		subquery_expr->subquery_type = SubqueryType::EXISTS;
19: 		break;
20: 	}
21: 	case duckdb_libpgquery::PG_ANY_SUBLINK:
22: 	case duckdb_libpgquery::PG_ALL_SUBLINK: {
23: 		// comparison with ANY() or ALL()
24: 		subquery_expr->subquery_type = SubqueryType::ANY;
25: 		subquery_expr->child = TransformExpression(root.testexpr);
26: 		// get the operator name
27: 		if (!root.operName) {
28: 			// simple IN
29: 			subquery_expr->comparison_type = ExpressionType::COMPARE_EQUAL;
30: 		} else {
31: 			auto operator_name =
32: 			    string((PGPointerCast<duckdb_libpgquery::PGValue>(root.operName->head->data.ptr_value))->val.str);
33: 			subquery_expr->comparison_type = OperatorToExpressionType(operator_name);
34: 		}
35: 		if (subquery_expr->comparison_type != ExpressionType::COMPARE_EQUAL &&
36: 		    subquery_expr->comparison_type != ExpressionType::COMPARE_NOTEQUAL &&
37: 		    subquery_expr->comparison_type != ExpressionType::COMPARE_GREATERTHAN &&
38: 		    subquery_expr->comparison_type != ExpressionType::COMPARE_GREATERTHANOREQUALTO &&
39: 		    subquery_expr->comparison_type != ExpressionType::COMPARE_LESSTHAN &&
40: 		    subquery_expr->comparison_type != ExpressionType::COMPARE_LESSTHANOREQUALTO) {
41: 			throw ParserException("ANY and ALL operators require one of =,<>,>,<,>=,<= comparisons!");
42: 		}
43: 		if (root.subLinkType == duckdb_libpgquery::PG_ALL_SUBLINK) {
44: 			// ALL sublink is equivalent to NOT(ANY) with inverted comparison
45: 			// e.g. [= ALL()] is equivalent to [NOT(<> ANY())]
46: 			// first invert the comparison type
47: 			subquery_expr->comparison_type = NegateComparisonExpression(subquery_expr->comparison_type);
48: 			return make_uniq<OperatorExpression>(ExpressionType::OPERATOR_NOT, std::move(subquery_expr));
49: 		}
50: 		break;
51: 	}
52: 	case duckdb_libpgquery::PG_EXPR_SUBLINK: {
53: 		// return a single scalar value from the subquery
54: 		// no child expression to compare to
55: 		subquery_expr->subquery_type = SubqueryType::SCALAR;
56: 		break;
57: 	}
58: 	case duckdb_libpgquery::PG_ARRAY_SUBLINK: {
59: 		// ARRAY expression
60: 		// wrap subquery into
61: 		// "SELECT CASE WHEN ARRAY_AGG(COLUMNS(*)) IS NULL THEN [] ELSE ARRAY_AGG(COLUMNS(*)) END FROM (...) tbl"
62: 		auto select_node = make_uniq<SelectNode>();
63: 
64: 		// COLUMNS(*)
65: 		auto columns_star = make_uniq<StarExpression>();
66: 		columns_star->columns = true;
67: 
68: 		// ARRAY_AGG(COLUMNS(*))
69: 		vector<unique_ptr<ParsedExpression>> children;
70: 		children.push_back(std::move(columns_star));
71: 		auto aggr = make_uniq<FunctionExpression>("array_agg", std::move(children));
72: 		for (auto &modifier : subquery_expr->subquery->node->modifiers) {
73: 			if (modifier->type == ResultModifierType::ORDER_MODIFIER) {
74: 				aggr->order_bys = unique_ptr_cast<ResultModifier, OrderModifier>(modifier->Copy());
75: 				break;
76: 			}
77: 		}
78: 		// ARRAY_AGG(COLUMNS(*)) IS NULL
79: 		auto agg_is_null = make_uniq<OperatorExpression>(ExpressionType::OPERATOR_IS_NULL, aggr->Copy());
80: 		// empty list
81: 		vector<unique_ptr<ParsedExpression>> list_children;
82: 		auto empty_list = make_uniq<FunctionExpression>("list_value", std::move(list_children));
83: 		// CASE
84: 		auto case_expr = make_uniq<CaseExpression>();
85: 		CaseCheck check;
86: 		check.when_expr = std::move(agg_is_null);
87: 		check.then_expr = std::move(empty_list);
88: 		case_expr->case_checks.push_back(std::move(check));
89: 		case_expr->else_expr = std::move(aggr);
90: 
91: 		select_node->select_list.push_back(std::move(case_expr));
92: 
93: 		// FROM (...) tbl
94: 		auto child_subquery = make_uniq<SubqueryRef>(std::move(subquery_expr->subquery));
95: 		select_node->from_table = std::move(child_subquery);
96: 
97: 		auto new_subquery = make_uniq<SelectStatement>();
98: 		new_subquery->node = std::move(select_node);
99: 		subquery_expr->subquery = std::move(new_subquery);
100: 
101: 		subquery_expr->subquery_type = SubqueryType::SCALAR;
102: 		break;
103: 	}
104: 	default:
105: 		throw NotImplementedException("Subquery of type %d not implemented\n", (int)root.subLinkType);
106: 	}
107: 	return std::move(subquery_expr);
108: }
109: 
110: } // namespace duckdb
[end of src/parser/transform/expression/transform_subquery.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: