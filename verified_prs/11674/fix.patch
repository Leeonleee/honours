diff --git a/src/parser/transform/expression/transform_subquery.cpp b/src/parser/transform/expression/transform_subquery.cpp
index 33a9b1604bc4..c8dbe23a48c8 100644
--- a/src/parser/transform/expression/transform_subquery.cpp
+++ b/src/parser/transform/expression/transform_subquery.cpp
@@ -2,6 +2,8 @@
 #include "duckdb/parser/transformer.hpp"
 #include "duckdb/parser/query_node/select_node.hpp"
 #include "duckdb/parser/tableref/subqueryref.hpp"
+#include "duckdb/parser/expression/constant_expression.hpp"
+#include "duckdb/parser/expression/positional_reference_expression.hpp"
 
 namespace duckdb {
 
@@ -69,12 +71,28 @@ unique_ptr<ParsedExpression> Transformer::TransformSubquery(duckdb_libpgquery::P
 		vector<unique_ptr<ParsedExpression>> children;
 		children.push_back(std::move(columns_star));
 		auto aggr = make_uniq<FunctionExpression>("array_agg", std::move(children));
+		// push ORDER BY modifiers into the array_agg
 		for (auto &modifier : subquery_expr->subquery->node->modifiers) {
 			if (modifier->type == ResultModifierType::ORDER_MODIFIER) {
 				aggr->order_bys = unique_ptr_cast<ResultModifier, OrderModifier>(modifier->Copy());
 				break;
 			}
 		}
+		// transform constants (e.g. ORDER BY 1) into positional references (ORDER BY #1)
+		if (aggr->order_bys) {
+			for (auto &order : aggr->order_bys->orders) {
+				if (order.expression->type == ExpressionType::VALUE_CONSTANT) {
+					auto &constant_expr = order.expression->Cast<ConstantExpression>();
+					Value bigint_value;
+					string error;
+					if (constant_expr.value.DefaultTryCastAs(LogicalType::BIGINT, bigint_value, &error)) {
+						int64_t order_index = BigIntValue::Get(bigint_value);
+						idx_t positional_index = order_index < 0 ? NumericLimits<idx_t>::Maximum() : idx_t(order_index);
+						order.expression = make_uniq<PositionalReferenceExpression>(positional_index);
+					}
+				}
+			}
+		}
 		// ARRAY_AGG(COLUMNS(*)) IS NULL
 		auto agg_is_null = make_uniq<OperatorExpression>(ExpressionType::OPERATOR_IS_NULL, aggr->Copy());
 		// empty list
