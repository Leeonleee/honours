You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
summarize fails on blob columns
### What happens?

Attempt to run `summarize` on a query with Blob columns fails with a binder error.

### To Reproduce

The minimal repro is:

```sql
summarize select * from test_all_types();
```

This fails with the error:

```
Error: Binder Error: No function matches the given name and argument types 'approx_count_distinct(BLOB)'. [...]
```

Have verified that this occurs in both the native CLI and DuckDb WASM.

### OS:

MacOS

### DuckDB Version:

v0.8.0 e8e4cea5ec

### DuckDB Client:

CLI (DuckDb shell) and DuckDb WASM

### Full Name:

Antony Courtney

### Affiliation:

MotherDuck

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree
summarize fails on blob columns
### What happens?

Attempt to run `summarize` on a query with Blob columns fails with a binder error.

### To Reproduce

The minimal repro is:

```sql
summarize select * from test_all_types();
```

This fails with the error:

```
Error: Binder Error: No function matches the given name and argument types 'approx_count_distinct(BLOB)'. [...]
```

Have verified that this occurs in both the native CLI and DuckDb WASM.

### OS:

MacOS

### DuckDB Version:

v0.8.0 e8e4cea5ec

### DuckDB Client:

CLI (DuckDb shell) and DuckDb WASM

### Full Name:

Antony Courtney

### Affiliation:

MotherDuck

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=master" alt="Github Actions Badge">
9:   </a>
10:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
11:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
12:   </a>
13:   <a href="https://discord.gg/tcvwpjfnZx">
14:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
15:   </a>
16:   <a href="https://github.com/duckdb/duckdb/releases/">
17:     <img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release">
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of .github/workflows/lcov_exclude]
1: /usr*
2: */cl.hpp
3: */tools/jdbc/*
4: */tools/nodejs/*
5: */tools/odbc/*
6: */tools/rest/*
7: */tools/rpkg/*
8: */tools/shell/*
9: */tools/sqlite3_api_wrapper/*
10: */benchmark/*
11: */examples/*
12: */third_party/*
13: */test/*
14: */extension/autocomplete/*
15: */extension/fts/*
16: */extension/icu/*
17: */extension/jemalloc/*
18: */extension/tpcds/*
19: */extension/tpch/*
20: */extension/visualizer/*
21: */extension/json/yyjson/*
22: src/main/extension_helper.cpp
23: *extension_oote*
24: */adbc/*
25: src/common/enum_util.cpp
26: src/common/enums/expression_type.cpp
[end of .github/workflows/lcov_exclude]
[start of src/core_functions/aggregate/distributive/approx_count.cpp]
1: #include "duckdb/core_functions/aggregate/distributive_functions.hpp"
2: #include "duckdb/common/exception.hpp"
3: #include "duckdb/common/types/hash.hpp"
4: #include "duckdb/common/types/hyperloglog.hpp"
5: #include "duckdb/function/function_set.hpp"
6: #include "duckdb/planner/expression/bound_aggregate_expression.hpp"
7: 
8: namespace duckdb {
9: 
10: struct ApproxDistinctCountState {
11: 	ApproxDistinctCountState() : log(nullptr) {
12: 	}
13: 	~ApproxDistinctCountState() {
14: 		if (log) {
15: 			delete log;
16: 		}
17: 	}
18: 
19: 	HyperLogLog *log;
20: };
21: 
22: struct ApproxCountDistinctFunction {
23: 	template <class STATE>
24: 	static void Initialize(STATE &state) {
25: 		state.log = nullptr;
26: 	}
27: 
28: 	template <class STATE, class OP>
29: 	static void Combine(const STATE &source, STATE &target, AggregateInputData &) {
30: 		if (!source.log) {
31: 			return;
32: 		}
33: 		if (!target.log) {
34: 			target.log = new HyperLogLog();
35: 		}
36: 		D_ASSERT(target.log);
37: 		D_ASSERT(source.log);
38: 		auto new_log = target.log->MergePointer(*source.log);
39: 		delete target.log;
40: 		target.log = new_log;
41: 	}
42: 
43: 	template <class T, class STATE>
44: 	static void Finalize(STATE &state, T &target, AggregateFinalizeData &finalize_data) {
45: 		if (state.log) {
46: 			target = state.log->Count();
47: 		} else {
48: 			target = 0;
49: 		}
50: 	}
51: 
52: 	static bool IgnoreNull() {
53: 		return true;
54: 	}
55: 
56: 	template <class STATE>
57: 	static void Destroy(STATE &state, AggregateInputData &aggr_input_data) {
58: 		if (state.log) {
59: 			delete state.log;
60: 			state.log = nullptr;
61: 		}
62: 	}
63: };
64: 
65: static void ApproxCountDistinctSimpleUpdateFunction(Vector inputs[], AggregateInputData &, idx_t input_count,
66:                                                     data_ptr_t state, idx_t count) {
67: 	D_ASSERT(input_count == 1);
68: 
69: 	auto agg_state = reinterpret_cast<ApproxDistinctCountState *>(state);
70: 	if (!agg_state->log) {
71: 		agg_state->log = new HyperLogLog();
72: 	}
73: 
74: 	UnifiedVectorFormat vdata;
75: 	inputs[0].ToUnifiedFormat(count, vdata);
76: 
77: 	if (count > STANDARD_VECTOR_SIZE) {
78: 		throw InternalException("ApproxCountDistinct - count must be at most vector size");
79: 	}
80: 	uint64_t indices[STANDARD_VECTOR_SIZE];
81: 	uint8_t counts[STANDARD_VECTOR_SIZE];
82: 	HyperLogLog::ProcessEntries(vdata, inputs[0].GetType(), indices, counts, count);
83: 	agg_state->log->AddToLog(vdata, count, indices, counts);
84: }
85: 
86: static void ApproxCountDistinctUpdateFunction(Vector inputs[], AggregateInputData &, idx_t input_count,
87:                                               Vector &state_vector, idx_t count) {
88: 	D_ASSERT(input_count == 1);
89: 
90: 	UnifiedVectorFormat sdata;
91: 	state_vector.ToUnifiedFormat(count, sdata);
92: 	auto states = UnifiedVectorFormat::GetDataNoConst<ApproxDistinctCountState *>(sdata);
93: 
94: 	for (idx_t i = 0; i < count; i++) {
95: 		auto agg_state = states[sdata.sel->get_index(i)];
96: 		if (!agg_state->log) {
97: 			agg_state->log = new HyperLogLog();
98: 		}
99: 	}
100: 
101: 	UnifiedVectorFormat vdata;
102: 	inputs[0].ToUnifiedFormat(count, vdata);
103: 
104: 	if (count > STANDARD_VECTOR_SIZE) {
105: 		throw InternalException("ApproxCountDistinct - count must be at most vector size");
106: 	}
107: 	uint64_t indices[STANDARD_VECTOR_SIZE];
108: 	uint8_t counts[STANDARD_VECTOR_SIZE];
109: 	HyperLogLog::ProcessEntries(vdata, inputs[0].GetType(), indices, counts, count);
110: 	HyperLogLog::AddToLogs(vdata, count, indices, counts, reinterpret_cast<HyperLogLog ***>(states), sdata.sel);
111: }
112: 
113: AggregateFunction GetApproxCountDistinctFunction(const LogicalType &input_type) {
114: 	auto fun = AggregateFunction(
115: 	    {input_type}, LogicalTypeId::BIGINT, AggregateFunction::StateSize<ApproxDistinctCountState>,
116: 	    AggregateFunction::StateInitialize<ApproxDistinctCountState, ApproxCountDistinctFunction>,
117: 	    ApproxCountDistinctUpdateFunction,
118: 	    AggregateFunction::StateCombine<ApproxDistinctCountState, ApproxCountDistinctFunction>,
119: 	    AggregateFunction::StateFinalize<ApproxDistinctCountState, int64_t, ApproxCountDistinctFunction>,
120: 	    ApproxCountDistinctSimpleUpdateFunction, nullptr,
121: 	    AggregateFunction::StateDestroy<ApproxDistinctCountState, ApproxCountDistinctFunction>);
122: 	fun.null_handling = FunctionNullHandling::SPECIAL_HANDLING;
123: 	return fun;
124: }
125: 
126: AggregateFunctionSet ApproxCountDistinctFun::GetFunctions() {
127: 	AggregateFunctionSet approx_count("approx_count_distinct");
128: 	approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::UTINYINT));
129: 	approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::USMALLINT));
130: 	approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::UINTEGER));
131: 	approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::UBIGINT));
132: 	approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::TINYINT));
133: 	approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::SMALLINT));
134: 	approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::BIGINT));
135: 	approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::HUGEINT));
136: 	approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::FLOAT));
137: 	approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::DOUBLE));
138: 	approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::VARCHAR));
139: 	approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::TIMESTAMP));
140: 	approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::TIMESTAMP_TZ));
141: 	return approx_count;
142: }
143: 
144: } // namespace duckdb
[end of src/core_functions/aggregate/distributive/approx_count.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: