{
  "repo": "duckdb/duckdb",
  "pull_number": 7907,
  "instance_id": "duckdb__duckdb-7907",
  "issue_numbers": [
    "7902",
    "7902"
  ],
  "base_commit": "b0a1a5aec2aeae4ea49a11efa8cd5f0bdbc6d312",
  "patch": "diff --git a/.github/workflows/lcov_exclude b/.github/workflows/lcov_exclude\nindex 085c8d6d8db7..68e5d747320d 100644\n--- a/.github/workflows/lcov_exclude\n+++ b/.github/workflows/lcov_exclude\n@@ -19,8 +19,8 @@\n */extension/tpch/*\n */extension/visualizer/*\n */extension/json/yyjson/*\n-src/main/extension_helper.cpp\n+main/extension_helper.cpp\n *extension_oote*\n */adbc/*\n-src/common/enum_util.cpp\n-src/common/enums/expression_type.cpp\n+common/enum_util.cpp\n+common/enums/expression_type.cpp\ndiff --git a/src/core_functions/aggregate/distributive/approx_count.cpp b/src/core_functions/aggregate/distributive/approx_count.cpp\nindex ba5055d76926..599ecb7d180d 100644\n--- a/src/core_functions/aggregate/distributive/approx_count.cpp\n+++ b/src/core_functions/aggregate/distributive/approx_count.cpp\n@@ -138,6 +138,7 @@ AggregateFunctionSet ApproxCountDistinctFun::GetFunctions() {\n \tapprox_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::VARCHAR));\n \tapprox_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::TIMESTAMP));\n \tapprox_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::TIMESTAMP_TZ));\n+\tapprox_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::BLOB));\n \treturn approx_count;\n }\n \n",
  "test_patch": "diff --git a/test/sql/function/list/aggregates/types.test b/test/sql/function/list/aggregates/types.test\nindex 1a1c50ceadd0..358c64cf43d0 100644\n--- a/test/sql/function/list/aggregates/types.test\n+++ b/test/sql/function/list/aggregates/types.test\n@@ -319,7 +319,7 @@ SELECT list_aggr([NULL::BLOB], '${func_name}')\n endloop\n \n # statement error for BLOB\n-foreach func_name approx_count_distinct avg favg bit_and bit_or bit_xor bool_and bool_or entropy histogram kurtosis mad median mode product sem skewness string_agg group_concat sum fsum sumKahan kahan_sum var_samp var_pop stddev stddev_pop variance stddev_samp\n+foreach func_name avg favg bit_and bit_or bit_xor bool_and bool_or entropy histogram kurtosis mad median mode product sem skewness string_agg group_concat sum fsum sumKahan kahan_sum var_samp var_pop stddev stddev_pop variance stddev_samp\n \n statement error\n SELECT list_aggr(['{a: 1}'::BLOB], '${func_name}')\ndiff --git a/test/sql/show_select/test_summarize.test b/test/sql/show_select/test_summarize.test\nindex 84e0bb6b68ed..931fcc856b02 100644\n--- a/test/sql/show_select/test_summarize.test\n+++ b/test/sql/show_select/test_summarize.test\n@@ -6,22 +6,23 @@ statement ok\n PRAGMA enable_verification\n \n statement ok\n-CREATE TABLE types(i INTEGER, j VARCHAR, k HUGEINT, d DOUBLE)\n+CREATE TABLE types(i INTEGER, j VARCHAR, k HUGEINT, d DOUBLE, e BLOB)\n \n statement ok\n-INSERT INTO types VALUES (1, 'hello', 12, 0.5), (2, 'world', -12, -0.5), (3, NULL, NULL, NULL);\n+INSERT INTO types VALUES (1, 'hello', 12, 0.5, BLOB 'a\\x00b\\x00c'), (2, 'world', -12, -0.5, BLOB ''), (3, NULL, NULL, NULL, NULL);\n \n query IIII\n-SELECT UNNEST(['i', 'j', 'k', 'd']) column_names,\n-       UNNEST(['INTEGER', 'VARCHAR', 'HUGEINT', 'DOUBLE']) column_types,\n-       UNNEST([MIN(i)::VARCHAR, MIN(j)::VARCHAR, MIN(k)::VARCHAR, MIN(d)::VARCHAR]) min,\n-\t   UNNEST([MAX(i)::VARCHAR, MAX(j)::VARCHAR, MAX(k)::VARCHAR, MAX(d)::VARCHAR]) max\n+SELECT UNNEST(['i', 'j', 'k', 'd', 'e']) column_names,\n+       UNNEST(['INTEGER', 'VARCHAR', 'HUGEINT', 'DOUBLE', 'BLOB']) column_types,\n+       UNNEST([MIN(i)::VARCHAR, MIN(j)::VARCHAR, MIN(k)::VARCHAR, MIN(d)::VARCHAR, MIN(e)::VARCHAR]) min,\n+\t   UNNEST([MAX(i)::VARCHAR, MAX(j)::VARCHAR, MAX(k)::VARCHAR, MAX(d)::VARCHAR, MAX(e)::VARCHAR]) max\n FROM (SELECT * FROM types) tbl\n ----\n i\tINTEGER\t1\t3\n j\tVARCHAR\thello\tworld\n k\tHUGEINT\t-12\t12\n d\tDOUBLE\t-0.5\t0.5\n+e\tBLOB\t(empty)\ta\\x00b\\x00c\n \n query IIIIIIIIIIII\n SUMMARIZE types;\n@@ -30,6 +31,7 @@ i\tINTEGER\t1\t3\t3\t2.0\t1.0\t1\t2\t3\t3\t0.0%\n j\tVARCHAR\thello\tworld\t2\tNULL\tNULL\tNULL\tNULL\tNULL\t3\t33.33%\n k\tHUGEINT\t-12\t12\t2\t0.0\t16.97056274847714\t-12\t0\t12\t3\t33.33%\n d\tDOUBLE\t-0.5\t0.5\t2\t0.0\t0.7071067811865476\t-0.5\t0.0\t0.5\t3\t33.33%\n+e\tBLOB\t(empty)\ta\\x00b\\x00c\t2\tNULL\tNULL\tNULL\tNULL\tNULL\t3\t33.33%\n \n query IIIIIIIIIIII\n SUMMARIZE SELECT * FROM types;\n@@ -38,6 +40,7 @@ i\tINTEGER\t1\t3\t3\t2.0\t1.0\t1\t2\t3\t3\t0.0%\n j\tVARCHAR\thello\tworld\t2\tNULL\tNULL\tNULL\tNULL\tNULL\t3\t33.33%\n k\tHUGEINT\t-12\t12\t2\t0.0\t16.97056274847714\t-12\t0\t12\t3\t33.33%\n d\tDOUBLE\t-0.5\t0.5\t2\t0.0\t0.7071067811865476\t-0.5\t0.0\t0.5\t3\t33.33%\n+e\tBLOB\t(empty)\ta\\x00b\\x00c\t2\tNULL\tNULL\tNULL\tNULL\tNULL\t3\t33.33%\n \n statement ok\n SUMMARIZE VALUES (1.0),(6754950520);\n",
  "problem_statement": "summarize fails on blob columns\n### What happens?\n\nAttempt to run `summarize` on a query with Blob columns fails with a binder error.\n\n### To Reproduce\n\nThe minimal repro is:\r\n\r\n```sql\r\nsummarize select * from test_all_types();\r\n```\r\n\r\nThis fails with the error:\r\n\r\n```\r\nError: Binder Error: No function matches the given name and argument types 'approx_count_distinct(BLOB)'. [...]\r\n```\r\n\r\nHave verified that this occurs in both the native CLI and DuckDb WASM.\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\nv0.8.0 e8e4cea5ec\n\n### DuckDB Client:\n\nCLI (DuckDb shell) and DuckDb WASM\n\n### Full Name:\n\nAntony Courtney\n\n### Affiliation:\n\nMotherDuck\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\nsummarize fails on blob columns\n### What happens?\n\nAttempt to run `summarize` on a query with Blob columns fails with a binder error.\n\n### To Reproduce\n\nThe minimal repro is:\r\n\r\n```sql\r\nsummarize select * from test_all_types();\r\n```\r\n\r\nThis fails with the error:\r\n\r\n```\r\nError: Binder Error: No function matches the given name and argument types 'approx_count_distinct(BLOB)'. [...]\r\n```\r\n\r\nHave verified that this occurs in both the native CLI and DuckDb WASM.\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\nv0.8.0 e8e4cea5ec\n\n### DuckDB Client:\n\nCLI (DuckDb shell) and DuckDb WASM\n\n### Full Name:\n\nAntony Courtney\n\n### Affiliation:\n\nMotherDuck\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "Also confirmed this is happening in the latest nightly build (`v0.8.1-dev416 9d5158ccd2`)\nHi @antonycourtney, I can confirm this reproduce, reduced repro is `summarize select blob from test_all_types();`.\r\n\r\nI am not sure of the rational here, since to some extent BLOBs and VARCHARs are 'the same' they should probably also behave the same here, and applying this patch does apparently solve the problem:\r\n```git\r\n--- a/src/core_functions/aggregate/distributive/approx_count.cpp\r\n+++ b/src/core_functions/aggregate/distributive/approx_count.cpp\r\n@@ -136,6 +136,7 @@ AggregateFunctionSet ApproxCountDistinctFun::GetFunctions() {\r\n        approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::FLOAT));\r\n        approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::DOUBLE));\r\n        approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::VARCHAR));\r\n+       approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::BLOB));\r\n        approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::TIMESTAMP));\r\n        approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::TIMESTAMP_TZ));\r\n        return approx_count;\r\n```\r\n\r\nOnce done that (+ adding the test case + testing that there are no unintended changes in behaviour) this could potentially be a PR, feel free to send it, but I have to stress I miss some context to be able to make an appropriate judgement.\r\n\r\nAlso note that even this line still has `summarize select * from test_all_types();` failing due to a separate issue with repro:\r\n```\r\nD summarize select date from test_all_types();\r\nError: Conversion Error: Type INT32 with value 5877642-06-25 (BC) can't be cast to the destination type INT64\r\n```\r\n(This looks like a completely separate problem tied potentially to the very wide date, feel free to open another issue)\nAlso confirmed this is happening in the latest nightly build (`v0.8.1-dev416 9d5158ccd2`)\nHi @antonycourtney, I can confirm this reproduce, reduced repro is `summarize select blob from test_all_types();`.\r\n\r\nI am not sure of the rational here, since to some extent BLOBs and VARCHARs are 'the same' they should probably also behave the same here, and applying this patch does apparently solve the problem:\r\n```git\r\n--- a/src/core_functions/aggregate/distributive/approx_count.cpp\r\n+++ b/src/core_functions/aggregate/distributive/approx_count.cpp\r\n@@ -136,6 +136,7 @@ AggregateFunctionSet ApproxCountDistinctFun::GetFunctions() {\r\n        approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::FLOAT));\r\n        approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::DOUBLE));\r\n        approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::VARCHAR));\r\n+       approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::BLOB));\r\n        approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::TIMESTAMP));\r\n        approx_count.AddFunction(GetApproxCountDistinctFunction(LogicalType::TIMESTAMP_TZ));\r\n        return approx_count;\r\n```\r\n\r\nOnce done that (+ adding the test case + testing that there are no unintended changes in behaviour) this could potentially be a PR, feel free to send it, but I have to stress I miss some context to be able to make an appropriate judgement.\r\n\r\nAlso note that even this line still has `summarize select * from test_all_types();` failing due to a separate issue with repro:\r\n```\r\nD summarize select date from test_all_types();\r\nError: Conversion Error: Type INT32 with value 5877642-06-25 (BC) can't be cast to the destination type INT64\r\n```\r\n(This looks like a completely separate problem tied potentially to the very wide date, feel free to open another issue)",
  "created_at": "2023-06-11T09:54:50Z",
  "modified_files": [
    ".github/workflows/lcov_exclude",
    "src/core_functions/aggregate/distributive/approx_count.cpp"
  ]
}