You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
the map() returns wrong value
### What happens?

map(list1,list2)[item of list1] return empty or wrong value of list2

### To Reproduce

see https://github.com/duckdb/duckdb/discussions/8986

### OS:

windows7 x64

### DuckDB Version:

0.8.1

### DuckDB Client:

CLI

### Full Name:

lutao

### Affiliation:

study

### Have you tried this on the latest `main` branch?

I have tested with a main build

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/logo-dl/DuckDB_Logo.png" height="120">
3: </div>
4: <br>
5: 
6: 
7: 
8: 
9: <p align="center">
10:   <a href="https://github.com/duckdb/duckdb/actions">
11:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge">
12:   </a>
13:   <a href="https://discord.gg/tcvwpjfnZx">
14:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
15:   </a>
16:   <a href="https://github.com/duckdb/duckdb/releases/">
17:     <img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release">
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of src/core_functions/scalar/map/map.cpp]
1: #include "duckdb/core_functions/scalar/map_functions.hpp"
2: #include "duckdb/planner/expression/bound_function_expression.hpp"
3: #include "duckdb/common/string_util.hpp"
4: #include "duckdb/parser/expression/bound_expression.hpp"
5: #include "duckdb/common/types/data_chunk.hpp"
6: #include "duckdb/common/pair.hpp"
7: #include "duckdb/common/types/value_map.hpp"
8: #include "duckdb/function/scalar/nested_functions.hpp"
9: 
10: namespace duckdb {
11: 
12: // Example:
13: // source: [1,2,3], expansion_factor: 4
14: // target (result): [1,2,3,1,2,3,1,2,3,1,2,3]
15: static void CreateExpandedVector(const Vector &source, Vector &target, idx_t expansion_factor) {
16: 	idx_t count = ListVector::GetListSize(source);
17: 	auto &entry = ListVector::GetEntry(source);
18: 
19: 	idx_t target_idx = 0;
20: 	for (idx_t copy = 0; copy < expansion_factor; copy++) {
21: 		for (idx_t key_idx = 0; key_idx < count; key_idx++) {
22: 			target.SetValue(target_idx, entry.GetValue(key_idx));
23: 			target_idx++;
24: 		}
25: 	}
26: 	D_ASSERT(target_idx == count * expansion_factor);
27: }
28: 
29: static void AlignVectorToReference(const Vector &original, const Vector &reference, idx_t tuple_count, Vector &result) {
30: 	auto original_length = ListVector::GetListSize(original);
31: 	auto new_length = ListVector::GetListSize(reference);
32: 
33: 	Vector expanded_const(ListType::GetChildType(original.GetType()), new_length);
34: 
35: 	auto expansion_factor = new_length / original_length;
36: 	if (expansion_factor != tuple_count) {
37: 		throw InvalidInputException("Error in MAP creation: key list and value list do not align. i.e. different "
38: 		                            "size or incompatible structure");
39: 	}
40: 	CreateExpandedVector(original, expanded_const, expansion_factor);
41: 	result.Reference(expanded_const);
42: }
43: 
44: static bool ListEntriesEqual(Vector &keys, Vector &values, idx_t count) {
45: 	auto key_count = ListVector::GetListSize(keys);
46: 	auto value_count = ListVector::GetListSize(values);
47: 	bool same_vector_type = keys.GetVectorType() == values.GetVectorType();
48: 
49: 	D_ASSERT(keys.GetType().id() == LogicalTypeId::LIST);
50: 	D_ASSERT(values.GetType().id() == LogicalTypeId::LIST);
51: 
52: 	UnifiedVectorFormat keys_data;
53: 	UnifiedVectorFormat values_data;
54: 
55: 	keys.ToUnifiedFormat(count, keys_data);
56: 	values.ToUnifiedFormat(count, values_data);
57: 
58: 	auto keys_entries = UnifiedVectorFormat::GetData<list_entry_t>(keys_data);
59: 	auto values_entries = UnifiedVectorFormat::GetData<list_entry_t>(values_data);
60: 
61: 	if (same_vector_type) {
62: 		const auto key_data = keys_data.data;
63: 		const auto value_data = values_data.data;
64: 
65: 		if (keys.GetVectorType() == VectorType::CONSTANT_VECTOR) {
66: 			D_ASSERT(values.GetVectorType() == VectorType::CONSTANT_VECTOR);
67: 			// Only need to compare one entry in this case
68: 			return memcmp(key_data, value_data, sizeof(list_entry_t)) == 0;
69: 		}
70: 
71: 		// Fast path if the vector types are equal, can just check if the entries are the same
72: 		if (key_count != value_count) {
73: 			return false;
74: 		}
75: 		return memcmp(key_data, value_data, count * sizeof(list_entry_t)) == 0;
76: 	}
77: 
78: 	// Compare the list_entries one by one
79: 	for (idx_t i = 0; i < count; i++) {
80: 		auto keys_idx = keys_data.sel->get_index(i);
81: 		auto values_idx = values_data.sel->get_index(i);
82: 
83: 		if (keys_entries[keys_idx] != values_entries[values_idx]) {
84: 			return false;
85: 		}
86: 	}
87: 	return true;
88: }
89: 
90: static void MapFunction(DataChunk &args, ExpressionState &state, Vector &result) {
91: 	D_ASSERT(result.GetType().id() == LogicalTypeId::MAP);
92: 
93: 	auto &key_vector = MapVector::GetKeys(result);
94: 	auto &value_vector = MapVector::GetValues(result);
95: 	auto result_data = ListVector::GetData(result);
96: 
97: 	result.SetVectorType(VectorType::CONSTANT_VECTOR);
98: 	if (args.data.empty()) {
99: 		ListVector::SetListSize(result, 0);
100: 		result_data->offset = 0;
101: 		result_data->length = 0;
102: 		result.Verify(args.size());
103: 		return;
104: 	}
105: 
106: 	bool keys_are_const = args.data[0].GetVectorType() == VectorType::CONSTANT_VECTOR;
107: 	bool values_are_const = args.data[1].GetVectorType() == VectorType::CONSTANT_VECTOR;
108: 	if (!keys_are_const || !values_are_const) {
109: 		result.SetVectorType(VectorType::FLAT_VECTOR);
110: 	}
111: 
112: 	auto key_count = ListVector::GetListSize(args.data[0]);
113: 	auto value_count = ListVector::GetListSize(args.data[1]);
114: 	auto key_data = ListVector::GetData(args.data[0]);
115: 	auto value_data = ListVector::GetData(args.data[1]);
116: 	auto src_data = key_data;
117: 
118: 	if (keys_are_const && !values_are_const) {
119: 		AlignVectorToReference(args.data[0], args.data[1], args.size(), key_vector);
120: 		src_data = value_data;
121: 	} else if (values_are_const && !keys_are_const) {
122: 		AlignVectorToReference(args.data[1], args.data[0], args.size(), value_vector);
123: 	} else {
124: 		if (!ListEntriesEqual(args.data[0], args.data[1], args.size())) {
125: 			throw InvalidInputException("Error in MAP creation: key list and value list do not align. i.e. different "
126: 			                            "size or incompatible structure");
127: 		}
128: 	}
129: 
130: 	ListVector::SetListSize(result, MaxValue(key_count, value_count));
131: 
132: 	result_data = ListVector::GetData(result);
133: 	for (idx_t i = 0; i < args.size(); i++) {
134: 		result_data[i] = src_data[i];
135: 	}
136: 
137: 	// check whether one of the vectors has already been referenced to an expanded vector in the case of const/non-const
138: 	// combination. If not, then referencing is still necessary
139: 	if (!(keys_are_const && !values_are_const)) {
140: 		key_vector.Reference(ListVector::GetEntry(args.data[0]));
141: 	}
142: 	if (!(values_are_const && !keys_are_const)) {
143: 		value_vector.Reference(ListVector::GetEntry(args.data[1]));
144: 	}
145: 
146: 	MapVector::MapConversionVerify(result, args.size());
147: 	result.Verify(args.size());
148: }
149: 
150: static unique_ptr<FunctionData> MapBind(ClientContext &context, ScalarFunction &bound_function,
151:                                         vector<unique_ptr<Expression>> &arguments) {
152: 	child_list_t<LogicalType> child_types;
153: 
154: 	if (arguments.size() != 2 && !arguments.empty()) {
155: 		throw Exception("We need exactly two lists for a map");
156: 	}
157: 	if (arguments.size() == 2) {
158: 		if (arguments[0]->return_type.id() != LogicalTypeId::LIST) {
159: 			throw Exception("First argument is not a list");
160: 		}
161: 		if (arguments[1]->return_type.id() != LogicalTypeId::LIST) {
162: 			throw Exception("Second argument is not a list");
163: 		}
164: 		child_types.push_back(make_pair("key", arguments[0]->return_type));
165: 		child_types.push_back(make_pair("value", arguments[1]->return_type));
166: 	}
167: 
168: 	if (arguments.empty()) {
169: 		auto empty = LogicalType::LIST(LogicalTypeId::SQLNULL);
170: 		child_types.push_back(make_pair("key", empty));
171: 		child_types.push_back(make_pair("value", empty));
172: 	}
173: 
174: 	bound_function.return_type =
175: 	    LogicalType::MAP(ListType::GetChildType(child_types[0].second), ListType::GetChildType(child_types[1].second));
176: 
177: 	return make_uniq<VariableReturnBindData>(bound_function.return_type);
178: }
179: 
180: ScalarFunction MapFun::GetFunction() {
181: 	//! the arguments and return types are actually set in the binder function
182: 	ScalarFunction fun({}, LogicalTypeId::MAP, MapFunction, MapBind);
183: 	fun.varargs = LogicalType::ANY;
184: 	fun.null_handling = FunctionNullHandling::SPECIAL_HANDLING;
185: 	return fun;
186: }
187: 
188: } // namespace duckdb
[end of src/core_functions/scalar/map/map.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: