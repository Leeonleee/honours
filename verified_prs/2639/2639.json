{
  "repo": "duckdb/duckdb",
  "pull_number": 2639,
  "instance_id": "duckdb__duckdb-2639",
  "issue_numbers": [
    "2586",
    "2586"
  ],
  "base_commit": "770f7d2cc32ac535977467fedc8e831866461904",
  "patch": "diff --git a/src/common/types/interval.cpp b/src/common/types/interval.cpp\nindex 74ab5f3c40a7..77bb846a55e5 100644\n--- a/src/common/types/interval.cpp\n+++ b/src/common/types/interval.cpp\n@@ -430,4 +430,50 @@ bool Interval::GreaterThanEquals(interval_t left, interval_t right) {\n \treturn GreaterThan(left, right) || Equals(left, right);\n }\n \n+date_t Interval::Add(date_t left, interval_t right) {\n+\tdate_t result;\n+\tif (right.months != 0) {\n+\t\tint32_t year, month, day;\n+\t\tDate::Convert(left, year, month, day);\n+\t\tint32_t year_diff = right.months / Interval::MONTHS_PER_YEAR;\n+\t\tyear += year_diff;\n+\t\tmonth += right.months - year_diff * Interval::MONTHS_PER_YEAR;\n+\t\tif (month > Interval::MONTHS_PER_YEAR) {\n+\t\t\tyear++;\n+\t\t\tmonth -= Interval::MONTHS_PER_YEAR;\n+\t\t} else if (month <= 0) {\n+\t\t\tyear--;\n+\t\t\tmonth += Interval::MONTHS_PER_YEAR;\n+\t\t}\n+\t\tday = MinValue<int32_t>(day, Date::MonthDays(year, month));\n+\t\tresult = Date::FromDate(year, month, day);\n+\t} else {\n+\t\tresult = left;\n+\t}\n+\tif (right.days != 0) {\n+\t\tif (!TryAddOperator::Operation(result.days, right.days, result.days)) {\n+\t\t\tthrow OutOfRangeException(\"Date out of range\");\n+\t\t}\n+\t}\n+\tif (right.micros != 0) {\n+\t\tif (!TryAddOperator::Operation(result.days, int32_t(right.micros / Interval::MICROS_PER_DAY), result.days)) {\n+\t\t\tthrow OutOfRangeException(\"Date out of range\");\n+\t\t}\n+\t}\n+\treturn result;\n+}\n+\n+dtime_t Interval::Add(dtime_t left, interval_t right, date_t &date) {\n+\tint64_t diff = right.micros - ((right.micros / Interval::MICROS_PER_DAY) * Interval::MICROS_PER_DAY);\n+\tleft += diff;\n+\tif (left.micros >= Interval::MICROS_PER_DAY) {\n+\t\tleft.micros -= Interval::MICROS_PER_DAY;\n+\t\tdate.days++;\n+\t} else if (left.micros < 0) {\n+\t\tleft.micros += Interval::MICROS_PER_DAY;\n+\t\tdate.days--;\n+\t}\n+\treturn left;\n+}\n+\n } // namespace duckdb\ndiff --git a/src/function/scalar/date/date_part.cpp b/src/function/scalar/date/date_part.cpp\nindex e330c411f323..ebb65c17820b 100644\n--- a/src/function/scalar/date/date_part.cpp\n+++ b/src/function/scalar/date/date_part.cpp\n@@ -540,7 +540,7 @@ int64_t DatePart::MicrosecondsOperator::Operation(timestamp_t input) {\n template <>\n int64_t DatePart::MicrosecondsOperator::Operation(interval_t input) {\n \t// remove everything but the second & microsecond part\n-\treturn input.micros;\n+\treturn input.micros % Interval::MICROS_PER_MINUTE;\n }\n \n template <>\n@@ -620,8 +620,17 @@ int64_t DatePart::EpochOperator::Operation(timestamp_t input) {\n \n template <>\n int64_t DatePart::EpochOperator::Operation(interval_t input) {\n-\tauto secs = SecondsOperator::Operation<interval_t, int64_t>(input);\n-\treturn (input.months * Interval::DAYS_PER_MONTH + input.days) * Interval::SECS_PER_DAY + secs;\n+\tint64_t interval_years = input.months / Interval::MONTHS_PER_YEAR;\n+\tint64_t interval_days;\n+\tinterval_days = Interval::DAYS_PER_YEAR * interval_years;\n+\tinterval_days += Interval::DAYS_PER_MONTH * (input.months % Interval::MONTHS_PER_YEAR);\n+\tinterval_days += input.days;\n+\tint64_t interval_epoch;\n+\tinterval_epoch = interval_days * Interval::SECS_PER_DAY;\n+\t// we add 0.25 days per year to sort of account for leap days\n+\tinterval_epoch += interval_years * (Interval::SECS_PER_DAY / 4);\n+\tinterval_epoch += input.micros / Interval::MICROS_PER_SEC;\n+\treturn interval_epoch;\n }\n \n template <>\ndiff --git a/src/function/scalar/operators/add.cpp b/src/function/scalar/operators/add.cpp\nindex 363b2bcf7539..45c2c978236f 100644\n--- a/src/function/scalar/operators/add.cpp\n+++ b/src/function/scalar/operators/add.cpp\n@@ -58,36 +58,7 @@ date_t AddOperator::Operation(int32_t left, date_t right) {\n \n template <>\n date_t AddOperator::Operation(date_t left, interval_t right) {\n-\tdate_t result;\n-\tif (right.months != 0) {\n-\t\tint32_t year, month, day;\n-\t\tDate::Convert(left, year, month, day);\n-\t\tint32_t year_diff = right.months / Interval::MONTHS_PER_YEAR;\n-\t\tyear += year_diff;\n-\t\tmonth += right.months - year_diff * Interval::MONTHS_PER_YEAR;\n-\t\tif (month > Interval::MONTHS_PER_YEAR) {\n-\t\t\tyear++;\n-\t\t\tmonth -= Interval::MONTHS_PER_YEAR;\n-\t\t} else if (month <= 0) {\n-\t\t\tyear--;\n-\t\t\tmonth += Interval::MONTHS_PER_YEAR;\n-\t\t}\n-\t\tday = MinValue<int32_t>(day, Date::MonthDays(year, month));\n-\t\tresult = Date::FromDate(year, month, day);\n-\t} else {\n-\t\tresult = left;\n-\t}\n-\tif (right.days != 0) {\n-\t\tif (!TryAddOperator::Operation(result.days, right.days, result.days)) {\n-\t\t\tthrow OutOfRangeException(\"Date out of range\");\n-\t\t}\n-\t}\n-\tif (right.micros != 0) {\n-\t\tif (!TryAddOperator::Operation(result.days, int32_t(right.micros / Interval::MICROS_PER_DAY), result.days)) {\n-\t\t\tthrow OutOfRangeException(\"Date out of range\");\n-\t\t}\n-\t}\n-\treturn result;\n+\treturn Interval::Add(left, right);\n }\n \n template <>\n@@ -95,26 +66,13 @@ date_t AddOperator::Operation(interval_t left, date_t right) {\n \treturn AddOperator::Operation<date_t, interval_t, date_t>(right, left);\n }\n \n-dtime_t AddIntervalToTimeOperation(dtime_t left, interval_t right, date_t &date) {\n-\tint64_t diff = right.micros - ((right.micros / Interval::MICROS_PER_DAY) * Interval::MICROS_PER_DAY);\n-\tleft += diff;\n-\tif (left.micros >= Interval::MICROS_PER_DAY) {\n-\t\tleft.micros -= Interval::MICROS_PER_DAY;\n-\t\tdate.days++;\n-\t} else if (left.micros < 0) {\n-\t\tleft.micros += Interval::MICROS_PER_DAY;\n-\t\tdate.days--;\n-\t}\n-\treturn left;\n-}\n-\n template <>\n timestamp_t AddOperator::Operation(timestamp_t left, interval_t right) {\n \tdate_t date;\n \tdtime_t time;\n \tTimestamp::Convert(left, date, time);\n-\tauto new_date = AddOperator::Operation<date_t, interval_t, date_t>(date, right);\n-\tauto new_time = AddIntervalToTimeOperation(time, right, new_date);\n+\tauto new_date = Interval::Add(date, right);\n+\tauto new_time = Interval::Add(time, right, new_date);\n \treturn Timestamp::FromDatetime(new_date, new_time);\n }\n \n@@ -247,7 +205,7 @@ hugeint_t DecimalAddOverflowCheck::Operation(hugeint_t left, hugeint_t right) {\n template <>\n dtime_t AddTimeOperator::Operation(dtime_t left, interval_t right) {\n \tdate_t date(0);\n-\treturn AddIntervalToTimeOperation(left, right, date);\n+\treturn Interval::Add(left, right, date);\n }\n \n template <>\ndiff --git a/src/include/duckdb/common/types/interval.hpp b/src/include/duckdb/common/types/interval.hpp\nindex 3c63fda322d3..1ffc7b6a166b 100644\n--- a/src/include/duckdb/common/types/interval.hpp\n+++ b/src/include/duckdb/common/types/interval.hpp\n@@ -22,8 +22,9 @@ class Interval {\n \tstatic constexpr const int32_t MONTHS_PER_YEAR = 12;\n \tstatic constexpr const int32_t MONTHS_PER_QUARTER = 3;\n \tstatic constexpr const int32_t DAYS_PER_WEEK = 7;\n-\tstatic constexpr const int64_t DAYS_PER_MONTH =\n-\t    30; // only used for interval comparison/ordering purposes, in which case a month counts as 30 days\n+\t//! only used for interval comparison/ordering purposes, in which case a month counts as 30 days\n+\tstatic constexpr const int64_t DAYS_PER_MONTH = 30;\n+\tstatic constexpr const int64_t DAYS_PER_YEAR = 365;\n \tstatic constexpr const int64_t MSECS_PER_SEC = 1000;\n \tstatic constexpr const int32_t SECS_PER_MINUTE = 60;\n \tstatic constexpr const int32_t MINS_PER_HOUR = 60;\n@@ -74,6 +75,12 @@ class Interval {\n \t//! Returns the exact difference between two timestamps (days and seconds)\n \tstatic interval_t GetDifference(timestamp_t timestamp_1, timestamp_t timestamp_2);\n \n+\t//! Add an interval to a date\n+\tstatic date_t Add(date_t left, interval_t right);\n+\t//! Add an interval to a time. In case the time overflows or underflows, modify the date by the overflow.\n+\t//! For example if we go from 23:00 to 02:00, we add a day to the date\n+\tstatic dtime_t Add(dtime_t left, interval_t right, date_t &date);\n+\n \t//! Comparison operators\n \tstatic bool Equals(interval_t left, interval_t right);\n \tstatic bool GreaterThan(interval_t left, interval_t right);\n",
  "test_patch": "diff --git a/test/sql/function/interval/test_date_part.test b/test/sql/function/interval/test_date_part.test\nindex 2b56862d2850..a39e3a6abcf7 100644\n--- a/test/sql/function/interval/test_date_part.test\n+++ b/test/sql/function/interval/test_date_part.test\n@@ -6,10 +6,10 @@ statement ok\n PRAGMA enable_verification\n \n statement ok\n-CREATE TABLE intervals(i INTERVAL, s VARCHAR)\n+CREATE TABLE intervals(i INTERVAL, s VARCHAR);\n \n statement ok\n-INSERT INTO intervals VALUES ('2 years', 'year'), ('16 months', 'quarter'), ('42 days', 'day'), ('2066343400 microseconds', 'minute')\n+INSERT INTO intervals VALUES ('2 years', 'year'), ('16 months', 'quarter'), ('42 days', 'day'), ('2066343400 microseconds', 'minute');\n \n # test date_part with different combinations of constant/non-constant columns\n query I\n@@ -51,6 +51,14 @@ SELECT date_part('seconds', i) FROM intervals;\n 0\n 0\n 0\n+26\n+\n+query I\n+SELECT date_part('epoch', i) FROM intervals;\n+----\n+63115200\n+41925600\n+3628800\n 2066\n \n query I\ndiff --git a/test/sql/function/interval/test_extract.test b/test/sql/function/interval/test_extract.test\nindex 8ff9c53181d9..de002e63b1fe 100644\n--- a/test/sql/function/interval/test_extract.test\n+++ b/test/sql/function/interval/test_extract.test\n@@ -6,10 +6,10 @@ statement ok\n PRAGMA enable_verification\n \n statement ok\n-CREATE TABLE intervals(i INTERVAL)\n+CREATE TABLE intervals(i INTERVAL);\n \n statement ok\n-INSERT INTO intervals VALUES ('2 years'), ('16 months'), ('42 days'), ('2066343400 microseconds'), (NULL)\n+INSERT INTO intervals VALUES ('2 years'), ('16 months'), ('42 days'), ('2066343400 microseconds'), (NULL);\n \n # extract various parts of the intervals\n query I\n@@ -93,8 +93,8 @@ SELECT EXTRACT(yearweek FROM i) FROM intervals\n query I\n SELECT EXTRACT(epoch FROM i) FROM intervals\n ----\n-62208000\n-41472000\n+63115200\n+41925600\n 3628800\n 2066\n NULL\n@@ -105,7 +105,7 @@ SELECT EXTRACT(microsecond FROM i) FROM intervals\n 0\n 0\n 0\n-2066343400\n+26343400\n NULL\n \n query I\n@@ -114,7 +114,7 @@ SELECT EXTRACT(millisecond FROM i) FROM intervals\n 0\n 0\n 0\n-2066343\n+26343\n NULL\n \n query I\n@@ -123,7 +123,7 @@ SELECT EXTRACT(second FROM i) FROM intervals\n 0\n 0\n 0\n-2066\n+26\n NULL\n \n query I\n",
  "problem_statement": "wrong results with extract(second from <interval>)\n#### What happens?\r\nWhen extracting the seconds component from an interval it returns the entire value in seconds. This is what `extract(epoch from <interval>)` should return.\r\n\r\n#### To Reproduce\r\n```\r\nD select extract( second from interval '2 hours 2 minutes 10 seconds' ) as value_should_be_10;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 value_should_be_10 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 7330               \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nD select extract( epoch from interval '2 hours 2 minutes 10 seconds' ) as value_should_be_7330;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 value_should_be_7330 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 7330                 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n#### Environment (please complete the following information):\r\n - OS: macOS 11.5.2\r\n - DuckDB Version: 0.3.0\r\n - DuckDB Client: duckdb-cli\r\n\r\n#### Before Submitting\r\n\r\n- [ ] **Have you tried this on the latest `master` branch?**\r\n\r\nNo, but it's also incorrect in the test file here as well\r\nhttps://github.com/duckdb/duckdb/blob/master/test/sql/function/interval/test_extract.test#L126\r\n\r\nPostgreSQL 13.2\r\n```\r\ngreg.rahn=# SELECT i, EXTRACT(second FROM i) FROM intervals;\r\n       i       | date_part\r\n---------------+-----------\r\n 2 years       |         0\r\n 1 year 4 mons |         0\r\n 42 days       |         0\r\n 00:34:26.3434 |   26.3434\r\n [NULL]        |    [NULL]\r\n```\r\n\r\nDuckDB\r\n```\r\nD SELECT i, EXTRACT(second FROM i) FROM intervals;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502        i        \u2502 date_part(second, i) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 2 years         \u2502 0                    \u2502\r\n\u2502 1 year 4 months \u2502 0                    \u2502\r\n\u2502 42 days         \u2502 0                    \u2502\r\n\u2502 00:34:26.3434   \u2502 2066                 \u2502 <<< should be 20.3434\r\n\u2502                 \u2502                      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\nwrong results with extract(second from <interval>)\n#### What happens?\r\nWhen extracting the seconds component from an interval it returns the entire value in seconds. This is what `extract(epoch from <interval>)` should return.\r\n\r\n#### To Reproduce\r\n```\r\nD select extract( second from interval '2 hours 2 minutes 10 seconds' ) as value_should_be_10;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 value_should_be_10 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 7330               \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nD select extract( epoch from interval '2 hours 2 minutes 10 seconds' ) as value_should_be_7330;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 value_should_be_7330 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 7330                 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n#### Environment (please complete the following information):\r\n - OS: macOS 11.5.2\r\n - DuckDB Version: 0.3.0\r\n - DuckDB Client: duckdb-cli\r\n\r\n#### Before Submitting\r\n\r\n- [ ] **Have you tried this on the latest `master` branch?**\r\n\r\nNo, but it's also incorrect in the test file here as well\r\nhttps://github.com/duckdb/duckdb/blob/master/test/sql/function/interval/test_extract.test#L126\r\n\r\nPostgreSQL 13.2\r\n```\r\ngreg.rahn=# SELECT i, EXTRACT(second FROM i) FROM intervals;\r\n       i       | date_part\r\n---------------+-----------\r\n 2 years       |         0\r\n 1 year 4 mons |         0\r\n 42 days       |         0\r\n 00:34:26.3434 |   26.3434\r\n [NULL]        |    [NULL]\r\n```\r\n\r\nDuckDB\r\n```\r\nD SELECT i, EXTRACT(second FROM i) FROM intervals;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502        i        \u2502 date_part(second, i) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 2 years         \u2502 0                    \u2502\r\n\u2502 1 year 4 months \u2502 0                    \u2502\r\n\u2502 42 days         \u2502 0                    \u2502\r\n\u2502 00:34:26.3434   \u2502 2066                 \u2502 <<< should be 20.3434\r\n\u2502                 \u2502                      \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\n",
  "hints_text": "Thanks for the report! Going to have a look at this.\nThanks for the report! Going to have a look at this.",
  "created_at": "2021-11-19T15:04:47Z"
}