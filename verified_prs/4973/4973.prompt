You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
[Fuzzer] Date diff overflow 2
### What happens?

As a follow-up to #4943. Run the following statement with UBSAN:
```
SELECT datediff('isodow',DATE '4765396-11-24',DATE '-4389735-12-13');
```

It reports: src/function/scalar/date/date_diff.cpp:53:36: runtime error: signed integer overflow: -1604036967 - 1739805949 cannot be represented in type 'int'

### To Reproduce

Run the statement above.

### OS:

Linux

### DuckDB Version:

latest from sources

### DuckDB Client:

Shell

### Full Name:

Pedro Ferreira

### Affiliation:

Huawei

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=master" alt="Github Actions Badge">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16:   <a href="https://discord.gg/tcvwpjfnZx">
17:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of src/function/scalar/date/date_diff.cpp]
1: #include "duckdb/function/scalar/date_functions.hpp"
2: #include "duckdb/common/enums/date_part_specifier.hpp"
3: #include "duckdb/common/exception.hpp"
4: #include "duckdb/common/types/date.hpp"
5: #include "duckdb/common/types/interval.hpp"
6: #include "duckdb/common/types/time.hpp"
7: #include "duckdb/common/types/timestamp.hpp"
8: #include "duckdb/common/vector_operations/ternary_executor.hpp"
9: #include "duckdb/common/vector_operations/vector_operations.hpp"
10: #include "duckdb/common/string_util.hpp"
11: #include "duckdb/storage/statistics/numeric_statistics.hpp"
12: 
13: namespace duckdb {
14: 
15: // This function is an implementation of the "period-crossing" date difference function from T-SQL
16: // https://docs.microsoft.com/en-us/sql/t-sql/functions/datediff-transact-sql?view=sql-server-ver15
17: struct DateDiff {
18: 	template <class TA, class TB, class TR, class OP>
19: 	static inline void BinaryExecute(Vector &left, Vector &right, Vector &result, idx_t count) {
20: 		BinaryExecutor::ExecuteWithNulls<TA, TB, TR>(
21: 		    left, right, result, count, [&](TA startdate, TB enddate, ValidityMask &mask, idx_t idx) {
22: 			    if (Value::IsFinite(startdate) && Value::IsFinite(enddate)) {
23: 				    return OP::template Operation<TA, TB, TR>(startdate, enddate);
24: 			    } else {
25: 				    mask.SetInvalid(idx);
26: 				    return TR();
27: 			    }
28: 		    });
29: 	}
30: 
31: 	struct YearOperator {
32: 		template <class TA, class TB, class TR>
33: 		static inline TR Operation(TA startdate, TB enddate) {
34: 			return Date::ExtractYear(enddate) - Date::ExtractYear(startdate);
35: 		}
36: 	};
37: 
38: 	struct MonthOperator {
39: 		template <class TA, class TB, class TR>
40: 		static inline TR Operation(TA startdate, TB enddate) {
41: 			int32_t start_year, start_month, start_day;
42: 			Date::Convert(startdate, start_year, start_month, start_day);
43: 			int32_t end_year, end_month, end_day;
44: 			Date::Convert(enddate, end_year, end_month, end_day);
45: 
46: 			return (end_year * 12 + end_month - 1) - (start_year * 12 + start_month - 1);
47: 		}
48: 	};
49: 
50: 	struct DayOperator {
51: 		template <class TA, class TB, class TR>
52: 		static inline TR Operation(TA startdate, TB enddate) {
53: 			return Date::EpochDays(enddate) - Date::EpochDays(startdate);
54: 		}
55: 	};
56: 
57: 	struct DecadeOperator {
58: 		template <class TA, class TB, class TR>
59: 		static inline TR Operation(TA startdate, TB enddate) {
60: 			return Date::ExtractYear(enddate) / 10 - Date::ExtractYear(startdate) / 10;
61: 		}
62: 	};
63: 
64: 	struct CenturyOperator {
65: 		template <class TA, class TB, class TR>
66: 		static inline TR Operation(TA startdate, TB enddate) {
67: 			return Date::ExtractYear(enddate) / 100 - Date::ExtractYear(startdate) / 100;
68: 		}
69: 	};
70: 
71: 	struct MilleniumOperator {
72: 		template <class TA, class TB, class TR>
73: 		static inline TR Operation(TA startdate, TB enddate) {
74: 			return Date::ExtractYear(enddate) / 1000 - Date::ExtractYear(startdate) / 1000;
75: 		}
76: 	};
77: 
78: 	struct QuarterOperator {
79: 		template <class TA, class TB, class TR>
80: 		static inline TR Operation(TA startdate, TB enddate) {
81: 			int32_t start_year, start_month, start_day;
82: 			Date::Convert(startdate, start_year, start_month, start_day);
83: 			int32_t end_year, end_month, end_day;
84: 			Date::Convert(enddate, end_year, end_month, end_day);
85: 
86: 			return (end_year * 12 + end_month - 1) / Interval::MONTHS_PER_QUARTER -
87: 			       (start_year * 12 + start_month - 1) / Interval::MONTHS_PER_QUARTER;
88: 		}
89: 	};
90: 
91: 	struct WeekOperator {
92: 		template <class TA, class TB, class TR>
93: 		static inline TR Operation(TA startdate, TB enddate) {
94: 			return Date::Epoch(Date::GetMondayOfCurrentWeek(enddate)) / Interval::SECS_PER_WEEK -
95: 			       Date::Epoch(Date::GetMondayOfCurrentWeek(startdate)) / Interval::SECS_PER_WEEK;
96: 		}
97: 	};
98: 
99: 	struct ISOYearOperator {
100: 		template <class TA, class TB, class TR>
101: 		static inline TR Operation(TA startdate, TB enddate) {
102: 			return Date::ExtractISOYearNumber(enddate) - Date::ExtractISOYearNumber(startdate);
103: 		}
104: 	};
105: 
106: 	struct MicrosecondsOperator {
107: 		template <class TA, class TB, class TR>
108: 		static inline TR Operation(TA startdate, TB enddate) {
109: 			return Date::EpochMicroseconds(enddate) - Date::EpochMicroseconds(startdate);
110: 		}
111: 	};
112: 
113: 	struct MillisecondsOperator {
114: 		template <class TA, class TB, class TR>
115: 		static inline TR Operation(TA startdate, TB enddate) {
116: 			return Date::EpochMicroseconds(enddate) / Interval::MICROS_PER_MSEC -
117: 			       Date::EpochMicroseconds(startdate) / Interval::MICROS_PER_MSEC;
118: 		}
119: 	};
120: 
121: 	struct SecondsOperator {
122: 		template <class TA, class TB, class TR>
123: 		static inline TR Operation(TA startdate, TB enddate) {
124: 			return Date::Epoch(enddate) - Date::Epoch(startdate);
125: 		}
126: 	};
127: 
128: 	struct MinutesOperator {
129: 		template <class TA, class TB, class TR>
130: 		static inline TR Operation(TA startdate, TB enddate) {
131: 			return Date::Epoch(enddate) / Interval::SECS_PER_MINUTE -
132: 			       Date::Epoch(startdate) / Interval::SECS_PER_MINUTE;
133: 		}
134: 	};
135: 
136: 	struct HoursOperator {
137: 		template <class TA, class TB, class TR>
138: 		static inline TR Operation(TA startdate, TB enddate) {
139: 			return Date::Epoch(enddate) / Interval::SECS_PER_HOUR - Date::Epoch(startdate) / Interval::SECS_PER_HOUR;
140: 		}
141: 	};
142: };
143: 
144: // TIMESTAMP specialisations
145: template <>
146: int64_t DateDiff::YearOperator::Operation(timestamp_t startdate, timestamp_t enddate) {
147: 	return YearOperator::Operation<date_t, date_t, int64_t>(Timestamp::GetDate(startdate), Timestamp::GetDate(enddate));
148: }
149: 
150: template <>
151: int64_t DateDiff::MonthOperator::Operation(timestamp_t startdate, timestamp_t enddate) {
152: 	return MonthOperator::Operation<date_t, date_t, int64_t>(Timestamp::GetDate(startdate),
153: 	                                                         Timestamp::GetDate(enddate));
154: }
155: 
156: template <>
157: int64_t DateDiff::DayOperator::Operation(timestamp_t startdate, timestamp_t enddate) {
158: 	return DayOperator::Operation<date_t, date_t, int64_t>(Timestamp::GetDate(startdate), Timestamp::GetDate(enddate));
159: }
160: 
161: template <>
162: int64_t DateDiff::DecadeOperator::Operation(timestamp_t startdate, timestamp_t enddate) {
163: 	return DecadeOperator::Operation<date_t, date_t, int64_t>(Timestamp::GetDate(startdate),
164: 	                                                          Timestamp::GetDate(enddate));
165: }
166: 
167: template <>
168: int64_t DateDiff::CenturyOperator::Operation(timestamp_t startdate, timestamp_t enddate) {
169: 	return CenturyOperator::Operation<date_t, date_t, int64_t>(Timestamp::GetDate(startdate),
170: 	                                                           Timestamp::GetDate(enddate));
171: }
172: 
173: template <>
174: int64_t DateDiff::MilleniumOperator::Operation(timestamp_t startdate, timestamp_t enddate) {
175: 	return MilleniumOperator::Operation<date_t, date_t, int64_t>(Timestamp::GetDate(startdate),
176: 	                                                             Timestamp::GetDate(enddate));
177: }
178: 
179: template <>
180: int64_t DateDiff::QuarterOperator::Operation(timestamp_t startdate, timestamp_t enddate) {
181: 	return QuarterOperator::Operation<date_t, date_t, int64_t>(Timestamp::GetDate(startdate),
182: 	                                                           Timestamp::GetDate(enddate));
183: }
184: 
185: template <>
186: int64_t DateDiff::WeekOperator::Operation(timestamp_t startdate, timestamp_t enddate) {
187: 	return WeekOperator::Operation<date_t, date_t, int64_t>(Timestamp::GetDate(startdate), Timestamp::GetDate(enddate));
188: }
189: 
190: template <>
191: int64_t DateDiff::ISOYearOperator::Operation(timestamp_t startdate, timestamp_t enddate) {
192: 	return ISOYearOperator::Operation<date_t, date_t, int64_t>(Timestamp::GetDate(startdate),
193: 	                                                           Timestamp::GetDate(enddate));
194: }
195: 
196: template <>
197: int64_t DateDiff::MicrosecondsOperator::Operation(timestamp_t startdate, timestamp_t enddate) {
198: 	return Timestamp::GetEpochMicroSeconds(enddate) - Timestamp::GetEpochMicroSeconds(startdate);
199: }
200: 
201: template <>
202: int64_t DateDiff::MillisecondsOperator::Operation(timestamp_t startdate, timestamp_t enddate) {
203: 	return Timestamp::GetEpochMs(enddate) - Timestamp::GetEpochMs(startdate);
204: }
205: 
206: template <>
207: int64_t DateDiff::SecondsOperator::Operation(timestamp_t startdate, timestamp_t enddate) {
208: 	return Timestamp::GetEpochSeconds(enddate) - Timestamp::GetEpochSeconds(startdate);
209: }
210: 
211: template <>
212: int64_t DateDiff::MinutesOperator::Operation(timestamp_t startdate, timestamp_t enddate) {
213: 	return Timestamp::GetEpochSeconds(enddate) / Interval::SECS_PER_MINUTE -
214: 	       Timestamp::GetEpochSeconds(startdate) / Interval::SECS_PER_MINUTE;
215: }
216: 
217: template <>
218: int64_t DateDiff::HoursOperator::Operation(timestamp_t startdate, timestamp_t enddate) {
219: 	return Timestamp::GetEpochSeconds(enddate) / Interval::SECS_PER_HOUR -
220: 	       Timestamp::GetEpochSeconds(startdate) / Interval::SECS_PER_HOUR;
221: }
222: 
223: // TIME specialisations
224: template <>
225: int64_t DateDiff::YearOperator::Operation(dtime_t startdate, dtime_t enddate) {
226: 	throw NotImplementedException("\"time\" units \"year\" not recognized");
227: }
228: 
229: template <>
230: int64_t DateDiff::MonthOperator::Operation(dtime_t startdate, dtime_t enddate) {
231: 	throw NotImplementedException("\"time\" units \"month\" not recognized");
232: }
233: 
234: template <>
235: int64_t DateDiff::DayOperator::Operation(dtime_t startdate, dtime_t enddate) {
236: 	throw NotImplementedException("\"time\" units \"day\" not recognized");
237: }
238: 
239: template <>
240: int64_t DateDiff::DecadeOperator::Operation(dtime_t startdate, dtime_t enddate) {
241: 	throw NotImplementedException("\"time\" units \"decade\" not recognized");
242: }
243: 
244: template <>
245: int64_t DateDiff::CenturyOperator::Operation(dtime_t startdate, dtime_t enddate) {
246: 	throw NotImplementedException("\"time\" units \"century\" not recognized");
247: }
248: 
249: template <>
250: int64_t DateDiff::MilleniumOperator::Operation(dtime_t startdate, dtime_t enddate) {
251: 	throw NotImplementedException("\"time\" units \"millennium\" not recognized");
252: }
253: 
254: template <>
255: int64_t DateDiff::QuarterOperator::Operation(dtime_t startdate, dtime_t enddate) {
256: 	throw NotImplementedException("\"time\" units \"quarter\" not recognized");
257: }
258: 
259: template <>
260: int64_t DateDiff::WeekOperator::Operation(dtime_t startdate, dtime_t enddate) {
261: 	throw NotImplementedException("\"time\" units \"week\" not recognized");
262: }
263: 
264: template <>
265: int64_t DateDiff::ISOYearOperator::Operation(dtime_t startdate, dtime_t enddate) {
266: 	throw NotImplementedException("\"time\" units \"isoyear\" not recognized");
267: }
268: 
269: template <>
270: int64_t DateDiff::MicrosecondsOperator::Operation(dtime_t startdate, dtime_t enddate) {
271: 	return enddate.micros - startdate.micros;
272: }
273: 
274: template <>
275: int64_t DateDiff::MillisecondsOperator::Operation(dtime_t startdate, dtime_t enddate) {
276: 	return enddate.micros / Interval::MICROS_PER_MSEC - startdate.micros / Interval::MICROS_PER_MSEC;
277: }
278: 
279: template <>
280: int64_t DateDiff::SecondsOperator::Operation(dtime_t startdate, dtime_t enddate) {
281: 	return enddate.micros / Interval::MICROS_PER_SEC - startdate.micros / Interval::MICROS_PER_SEC;
282: }
283: 
284: template <>
285: int64_t DateDiff::MinutesOperator::Operation(dtime_t startdate, dtime_t enddate) {
286: 	return enddate.micros / Interval::MICROS_PER_MINUTE - startdate.micros / Interval::MICROS_PER_MINUTE;
287: }
288: 
289: template <>
290: int64_t DateDiff::HoursOperator::Operation(dtime_t startdate, dtime_t enddate) {
291: 	return enddate.micros / Interval::MICROS_PER_HOUR - startdate.micros / Interval::MICROS_PER_HOUR;
292: }
293: 
294: template <typename TA, typename TB, typename TR>
295: static int64_t DifferenceDates(DatePartSpecifier type, TA startdate, TB enddate) {
296: 	switch (type) {
297: 	case DatePartSpecifier::YEAR:
298: 		return DateDiff::YearOperator::template Operation<TA, TB, TR>(startdate, enddate);
299: 	case DatePartSpecifier::MONTH:
300: 		return DateDiff::MonthOperator::template Operation<TA, TB, TR>(startdate, enddate);
301: 	case DatePartSpecifier::DAY:
302: 	case DatePartSpecifier::DOW:
303: 	case DatePartSpecifier::ISODOW:
304: 	case DatePartSpecifier::DOY:
305: 		return DateDiff::DayOperator::template Operation<TA, TB, TR>(startdate, enddate);
306: 	case DatePartSpecifier::DECADE:
307: 		return DateDiff::DecadeOperator::template Operation<TA, TB, TR>(startdate, enddate);
308: 	case DatePartSpecifier::CENTURY:
309: 		return DateDiff::CenturyOperator::template Operation<TA, TB, TR>(startdate, enddate);
310: 	case DatePartSpecifier::MILLENNIUM:
311: 		return DateDiff::MilleniumOperator::template Operation<TA, TB, TR>(startdate, enddate);
312: 	case DatePartSpecifier::QUARTER:
313: 		return DateDiff::QuarterOperator::template Operation<TA, TB, TR>(startdate, enddate);
314: 	case DatePartSpecifier::WEEK:
315: 	case DatePartSpecifier::YEARWEEK:
316: 		return DateDiff::WeekOperator::template Operation<TA, TB, TR>(startdate, enddate);
317: 	case DatePartSpecifier::ISOYEAR:
318: 		return DateDiff::ISOYearOperator::template Operation<TA, TB, TR>(startdate, enddate);
319: 	case DatePartSpecifier::MICROSECONDS:
320: 		return DateDiff::MicrosecondsOperator::template Operation<TA, TB, TR>(startdate, enddate);
321: 	case DatePartSpecifier::MILLISECONDS:
322: 		return DateDiff::MillisecondsOperator::template Operation<TA, TB, TR>(startdate, enddate);
323: 	case DatePartSpecifier::SECOND:
324: 	case DatePartSpecifier::EPOCH:
325: 		return DateDiff::SecondsOperator::template Operation<TA, TB, TR>(startdate, enddate);
326: 	case DatePartSpecifier::MINUTE:
327: 		return DateDiff::MinutesOperator::template Operation<TA, TB, TR>(startdate, enddate);
328: 	case DatePartSpecifier::HOUR:
329: 		return DateDiff::HoursOperator::template Operation<TA, TB, TR>(startdate, enddate);
330: 	default:
331: 		throw NotImplementedException("Specifier type not implemented for DATEDIFF");
332: 	}
333: }
334: 
335: struct DateDiffTernaryOperator {
336: 	template <typename TS, typename TA, typename TB, typename TR>
337: 	static inline TR Operation(TS part, TA startdate, TB enddate, ValidityMask &mask, idx_t idx) {
338: 		if (Value::IsFinite(startdate) && Value::IsFinite(enddate)) {
339: 			return DifferenceDates<TA, TB, TR>(GetDatePartSpecifier(part.GetString()), startdate, enddate);
340: 		} else {
341: 			mask.SetInvalid(idx);
342: 			return TR();
343: 		}
344: 	}
345: };
346: 
347: template <typename TA, typename TB, typename TR>
348: static void DateDiffBinaryExecutor(DatePartSpecifier type, Vector &left, Vector &right, Vector &result, idx_t count) {
349: 	switch (type) {
350: 	case DatePartSpecifier::YEAR:
351: 		DateDiff::BinaryExecute<TA, TB, TR, DateDiff::YearOperator>(left, right, result, count);
352: 		break;
353: 	case DatePartSpecifier::MONTH:
354: 		DateDiff::BinaryExecute<TA, TB, TR, DateDiff::MonthOperator>(left, right, result, count);
355: 		break;
356: 	case DatePartSpecifier::DAY:
357: 	case DatePartSpecifier::DOW:
358: 	case DatePartSpecifier::ISODOW:
359: 	case DatePartSpecifier::DOY:
360: 		DateDiff::BinaryExecute<TA, TB, TR, DateDiff::DayOperator>(left, right, result, count);
361: 		break;
362: 	case DatePartSpecifier::DECADE:
363: 		DateDiff::BinaryExecute<TA, TB, TR, DateDiff::DecadeOperator>(left, right, result, count);
364: 		break;
365: 	case DatePartSpecifier::CENTURY:
366: 		DateDiff::BinaryExecute<TA, TB, TR, DateDiff::CenturyOperator>(left, right, result, count);
367: 		break;
368: 	case DatePartSpecifier::MILLENNIUM:
369: 		DateDiff::BinaryExecute<TA, TB, TR, DateDiff::MilleniumOperator>(left, right, result, count);
370: 		break;
371: 	case DatePartSpecifier::QUARTER:
372: 		DateDiff::BinaryExecute<TA, TB, TR, DateDiff::QuarterOperator>(left, right, result, count);
373: 		break;
374: 	case DatePartSpecifier::WEEK:
375: 	case DatePartSpecifier::YEARWEEK:
376: 		DateDiff::BinaryExecute<TA, TB, TR, DateDiff::WeekOperator>(left, right, result, count);
377: 		break;
378: 	case DatePartSpecifier::ISOYEAR:
379: 		DateDiff::BinaryExecute<TA, TB, TR, DateDiff::ISOYearOperator>(left, right, result, count);
380: 		break;
381: 	case DatePartSpecifier::MICROSECONDS:
382: 		DateDiff::BinaryExecute<TA, TB, TR, DateDiff::MicrosecondsOperator>(left, right, result, count);
383: 		break;
384: 	case DatePartSpecifier::MILLISECONDS:
385: 		DateDiff::BinaryExecute<TA, TB, TR, DateDiff::MillisecondsOperator>(left, right, result, count);
386: 		break;
387: 	case DatePartSpecifier::SECOND:
388: 	case DatePartSpecifier::EPOCH:
389: 		DateDiff::BinaryExecute<TA, TB, TR, DateDiff::SecondsOperator>(left, right, result, count);
390: 		break;
391: 	case DatePartSpecifier::MINUTE:
392: 		DateDiff::BinaryExecute<TA, TB, TR, DateDiff::MinutesOperator>(left, right, result, count);
393: 		break;
394: 	case DatePartSpecifier::HOUR:
395: 		DateDiff::BinaryExecute<TA, TB, TR, DateDiff::HoursOperator>(left, right, result, count);
396: 		break;
397: 	default:
398: 		throw NotImplementedException("Specifier type not implemented for DATEDIFF");
399: 	}
400: }
401: 
402: template <typename T>
403: static void DateDiffFunction(DataChunk &args, ExpressionState &state, Vector &result) {
404: 	D_ASSERT(args.ColumnCount() == 3);
405: 	auto &part_arg = args.data[0];
406: 	auto &start_arg = args.data[1];
407: 	auto &end_arg = args.data[2];
408: 
409: 	if (part_arg.GetVectorType() == VectorType::CONSTANT_VECTOR) {
410: 		// Common case of constant part.
411: 		if (ConstantVector::IsNull(part_arg)) {
412: 			result.SetVectorType(VectorType::CONSTANT_VECTOR);
413: 			ConstantVector::SetNull(result, true);
414: 		} else {
415: 			const auto type = GetDatePartSpecifier(ConstantVector::GetData<string_t>(part_arg)->GetString());
416: 			DateDiffBinaryExecutor<T, T, int64_t>(type, start_arg, end_arg, result, args.size());
417: 		}
418: 	} else {
419: 		TernaryExecutor::ExecuteWithNulls<string_t, T, T, int64_t>(
420: 		    part_arg, start_arg, end_arg, result, args.size(),
421: 		    DateDiffTernaryOperator::Operation<string_t, T, T, int64_t>);
422: 	}
423: }
424: 
425: void DateDiffFun::RegisterFunction(BuiltinFunctions &set) {
426: 	ScalarFunctionSet date_diff("date_diff");
427: 	date_diff.AddFunction(ScalarFunction({LogicalType::VARCHAR, LogicalType::DATE, LogicalType::DATE},
428: 	                                     LogicalType::BIGINT, DateDiffFunction<date_t>));
429: 	date_diff.AddFunction(ScalarFunction({LogicalType::VARCHAR, LogicalType::TIMESTAMP, LogicalType::TIMESTAMP},
430: 	                                     LogicalType::BIGINT, DateDiffFunction<timestamp_t>));
431: 	date_diff.AddFunction(ScalarFunction({LogicalType::VARCHAR, LogicalType::TIME, LogicalType::TIME},
432: 	                                     LogicalType::BIGINT, DateDiffFunction<dtime_t>));
433: 	set.AddFunction(date_diff);
434: 
435: 	date_diff.name = "datediff";
436: 	set.AddFunction(date_diff);
437: }
438: 
439: } // namespace duckdb
[end of src/function/scalar/date/date_diff.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: