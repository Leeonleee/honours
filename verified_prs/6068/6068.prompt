You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
DESCRIBE does not show primary key
Version 0.2.4 on Linux

```
D CREATE TABLE t1(id INTEGER PRIMARY KEY, j VARCHAR);
D describe t1;
┌───────┬─────────┬──────┬─────┬─────────┬───────┐
│ Field │  Type   │ Null │ Key │ Default │ Extra │
├───────┼─────────┼──────┼─────┼─────────┼───────┤
│ id    │ INTEGER │ NO   │     │         │       │
│ j     │ VARCHAR │ YES  │     │         │       │
└───────┴─────────┴──────┴─────┴─────────┴───────┘
D PRAGMA table_info('t1');
┌─────┬──────┬─────────┬─────────┬────────────┬───────┐
│ cid │ name │  type   │ notnull │ dflt_value │  pk   │
├─────┼──────┼─────────┼─────────┼────────────┼───────┤
│ 0   │ id   │ INTEGER │ true    │            │ true  │
│ 1   │ j    │ VARCHAR │ false   │            │ false │
└─────┴──────┴─────────┴─────────┴────────────┴───────┘
```

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=master" alt="Github Actions Badge">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16:   <a href="https://discord.gg/tcvwpjfnZx">
17:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of src/function/pragma/pragma_queries.cpp]
1: #include "duckdb/function/pragma/pragma_functions.hpp"
2: #include "duckdb/common/string_util.hpp"
3: #include "duckdb/common/file_system.hpp"
4: #include "duckdb/parser/statement/export_statement.hpp"
5: #include "duckdb/parser/statement/copy_statement.hpp"
6: #include "duckdb/parser/parser.hpp"
7: #include "duckdb/main/config.hpp"
8: 
9: namespace duckdb {
10: 
11: string PragmaTableInfo(ClientContext &context, const FunctionParameters &parameters) {
12: 	return StringUtil::Format("SELECT * FROM pragma_table_info('%s');", parameters.values[0].ToString());
13: }
14: 
15: string PragmaShowTables(ClientContext &context, const FunctionParameters &parameters) {
16: 	return "SELECT name FROM sqlite_master ORDER BY name;";
17: }
18: 
19: string PragmaShowTablesExpanded(ClientContext &context, const FunctionParameters &parameters) {
20: 	return R"(
21: 			SELECT
22: 				t.table_name,
23: 				LIST(c.column_name order by c.column_name) AS column_names,
24: 				LIST(c.data_type order by c.column_name) AS column_types,
25: 				FIRST(t.temporary) AS temporary
26: 			FROM duckdb_tables t
27: 			JOIN duckdb_columns c
28: 			USING (table_oid)
29: 			GROUP BY t.table_name
30: 			ORDER BY t.table_name;
31: 	)";
32: }
33: 
34: string PragmaShowDatabases(ClientContext &context, const FunctionParameters &parameters) {
35: 	return "SELECT database_name FROM duckdb_databases() WHERE NOT internal ORDER BY database_name;";
36: }
37: 
38: string PragmaAllProfiling(ClientContext &context, const FunctionParameters &parameters) {
39: 	return "SELECT * FROM pragma_last_profiling_output() JOIN pragma_detailed_profiling_output() ON "
40: 	       "(pragma_last_profiling_output.operator_id);";
41: }
42: 
43: string PragmaDatabaseList(ClientContext &context, const FunctionParameters &parameters) {
44: 	return "SELECT * FROM pragma_database_list;";
45: }
46: 
47: string PragmaCollations(ClientContext &context, const FunctionParameters &parameters) {
48: 	return "SELECT * FROM pragma_collations() ORDER BY 1;";
49: }
50: 
51: string PragmaFunctionsQuery(ClientContext &context, const FunctionParameters &parameters) {
52: 	return "SELECT function_name AS name, upper(function_type) AS type, parameter_types AS parameters, varargs, "
53: 	       "return_type, has_side_effects AS side_effects"
54: 	       " FROM duckdb_functions()"
55: 	       " WHERE function_type IN ('scalar', 'aggregate')"
56: 	       " ORDER BY 1;";
57: }
58: 
59: string PragmaShow(ClientContext &context, const FunctionParameters &parameters) {
60: 	// PRAGMA table_info but with some aliases
61: 	return StringUtil::Format(
62: 	    "SELECT name AS \"column_name\", type as \"column_type\", CASE WHEN \"notnull\" THEN 'NO' ELSE 'YES' "
63: 	    "END AS \"null\", NULL AS \"key\", dflt_value AS \"default\", NULL AS \"extra\" FROM pragma_table_info('%s');",
64: 	    parameters.values[0].ToString());
65: }
66: 
67: string PragmaVersion(ClientContext &context, const FunctionParameters &parameters) {
68: 	return "SELECT * FROM pragma_version();";
69: }
70: 
71: string PragmaImportDatabase(ClientContext &context, const FunctionParameters &parameters) {
72: 	auto &config = DBConfig::GetConfig(context);
73: 	if (!config.options.enable_external_access) {
74: 		throw PermissionException("Import is disabled through configuration");
75: 	}
76: 	auto &fs = FileSystem::GetFileSystem(context);
77: 	auto *opener = FileSystem::GetFileOpener(context);
78: 
79: 	string final_query;
80: 	// read the "shema.sql" and "load.sql" files
81: 	vector<string> files = {"schema.sql", "load.sql"};
82: 	for (auto &file : files) {
83: 		auto file_path = fs.JoinPath(parameters.values[0].ToString(), file);
84: 		auto handle = fs.OpenFile(file_path, FileFlags::FILE_FLAGS_READ, FileSystem::DEFAULT_LOCK,
85: 		                          FileSystem::DEFAULT_COMPRESSION, opener);
86: 		auto fsize = fs.GetFileSize(*handle);
87: 		auto buffer = unique_ptr<char[]>(new char[fsize]);
88: 		fs.Read(*handle, buffer.get(), fsize);
89: 		auto query = string(buffer.get(), fsize);
90: 		// Replace the placeholder with the path provided to IMPORT
91: 		if (file == "load.sql") {
92: 			Parser parser;
93: 			parser.ParseQuery(query);
94: 			auto copy_statements = std::move(parser.statements);
95: 			query.clear();
96: 			for (auto &statement_p : copy_statements) {
97: 				D_ASSERT(statement_p->type == StatementType::COPY_STATEMENT);
98: 				auto &statement = (CopyStatement &)*statement_p;
99: 				auto &info = *statement.info;
100: 				auto file_name = fs.ExtractName(info.file_path);
101: 				info.file_path = fs.JoinPath(parameters.values[0].ToString(), file_name);
102: 				query += statement.ToString() + ";";
103: 			}
104: 		}
105: 		final_query += query;
106: 	}
107: 	return final_query;
108: }
109: 
110: string PragmaDatabaseSize(ClientContext &context, const FunctionParameters &parameters) {
111: 	return "SELECT * FROM pragma_database_size();";
112: }
113: 
114: string PragmaStorageInfo(ClientContext &context, const FunctionParameters &parameters) {
115: 	return StringUtil::Format("SELECT * FROM pragma_storage_info('%s');", parameters.values[0].ToString());
116: }
117: 
118: void PragmaQueries::RegisterFunction(BuiltinFunctions &set) {
119: 	set.AddFunction(PragmaFunction::PragmaCall("table_info", PragmaTableInfo, {LogicalType::VARCHAR}));
120: 	set.AddFunction(PragmaFunction::PragmaCall("storage_info", PragmaStorageInfo, {LogicalType::VARCHAR}));
121: 	set.AddFunction(PragmaFunction::PragmaStatement("show_tables", PragmaShowTables));
122: 	set.AddFunction(PragmaFunction::PragmaStatement("show_tables_expanded", PragmaShowTablesExpanded));
123: 	set.AddFunction(PragmaFunction::PragmaStatement("show_databases", PragmaShowDatabases));
124: 	set.AddFunction(PragmaFunction::PragmaStatement("database_list", PragmaDatabaseList));
125: 	set.AddFunction(PragmaFunction::PragmaStatement("collations", PragmaCollations));
126: 	set.AddFunction(PragmaFunction::PragmaCall("show", PragmaShow, {LogicalType::VARCHAR}));
127: 	set.AddFunction(PragmaFunction::PragmaStatement("version", PragmaVersion));
128: 	set.AddFunction(PragmaFunction::PragmaStatement("database_size", PragmaDatabaseSize));
129: 	set.AddFunction(PragmaFunction::PragmaStatement("functions", PragmaFunctionsQuery));
130: 	set.AddFunction(PragmaFunction::PragmaCall("import_database", PragmaImportDatabase, {LogicalType::VARCHAR}));
131: 	set.AddFunction(PragmaFunction::PragmaStatement("all_profiling_output", PragmaAllProfiling));
132: }
133: 
134: } // namespace duckdb
[end of src/function/pragma/pragma_queries.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: