{
  "repo": "duckdb/duckdb",
  "pull_number": 11056,
  "instance_id": "duckdb__duckdb-11056",
  "issue_numbers": [
    "11040"
  ],
  "base_commit": "0e1bd394d418ce6fb73578ee89b2e4bcdd489991",
  "patch": "diff --git a/data/csv/projection_buffer.csv b/data/csv/projection_buffer.csv\nnew file mode 100644\nindex 000000000000..80094a9aa9bb\n--- /dev/null\n+++ b/data/csv/projection_buffer.csv\n@@ -0,0 +1,28 @@\n+a,b,c,d\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n+\"a\"\"\",\"b\"\"\",\"c\"\"\",\"d\"\"\"\n\\ No newline at end of file\ndiff --git a/src/execution/operator/csv_scanner/scanner/string_value_scanner.cpp b/src/execution/operator/csv_scanner/scanner/string_value_scanner.cpp\nindex f08eadfca150..42737adc2339 100644\n--- a/src/execution/operator/csv_scanner/scanner/string_value_scanner.cpp\n+++ b/src/execution/operator/csv_scanner/scanner/string_value_scanner.cpp\n@@ -858,25 +858,37 @@ void StringValueScanner::ProcessOverbufferValue() {\n \t\t}\n \t\tj++;\n \t}\n-\tstring_t value;\n-\tif (result.quoted) {\n-\t\tvalue = string_t(overbuffer_string.c_str() + result.quoted_position,\n-\t\t                 UnsafeNumericCast<uint32_t>(overbuffer_string.size() - 1 - result.quoted_position));\n-\t\tif (result.escaped) {\n-\t\t\tconst auto str_ptr = static_cast<const char *>(overbuffer_string.c_str() + result.quoted_position);\n-\t\t\tvalue =\n-\t\t\t    StringValueScanner::RemoveEscape(str_ptr, overbuffer_string.size() - 2,\n-\t\t\t                                     state_machine->dialect_options.state_machine_options.escape.GetValue(),\n-\t\t\t                                     result.parse_chunk.data[result.chunk_col_id]);\n+\tbool skip_value = false;\n+\tif (result.projecting_columns) {\n+\t\tif (!result.projected_columns[result.cur_col_id]) {\n+\t\t\tresult.cur_col_id++;\n+\t\t\tskip_value = true;\n \t\t}\n-\t} else {\n-\t\tvalue = string_t(overbuffer_string.c_str(), UnsafeNumericCast<uint32_t>(overbuffer_string.size()));\n \t}\n-\n-\tif (states.EmptyLine() && state_machine->dialect_options.num_cols == 1) {\n-\t\tresult.EmptyLine(result, iterator.pos.buffer_pos);\n-\t} else if (!states.IsNotSet()) {\n-\t\tresult.AddValueToVector(value.GetData(), value.GetSize(), true);\n+\tif (!skip_value) {\n+\t\tstring_t value;\n+\t\tif (result.quoted) {\n+\t\t\tvalue = string_t(overbuffer_string.c_str() + result.quoted_position,\n+\t\t\t                 UnsafeNumericCast<uint32_t>(overbuffer_string.size() - 1 - result.quoted_position));\n+\t\t\tif (result.escaped) {\n+\t\t\t\tconst auto str_ptr = static_cast<const char *>(overbuffer_string.c_str() + result.quoted_position);\n+\t\t\t\tvalue = StringValueScanner::RemoveEscape(\n+\t\t\t\t    str_ptr, overbuffer_string.size() - 2,\n+\t\t\t\t    state_machine->dialect_options.state_machine_options.escape.GetValue(),\n+\t\t\t\t    result.parse_chunk.data[result.chunk_col_id]);\n+\t\t\t}\n+\t\t} else {\n+\t\t\tvalue = string_t(overbuffer_string.c_str(), UnsafeNumericCast<uint32_t>(overbuffer_string.size()));\n+\t\t}\n+\t\tif (states.EmptyLine() && state_machine->dialect_options.num_cols == 1) {\n+\t\t\tresult.EmptyLine(result, iterator.pos.buffer_pos);\n+\t\t} else if (!states.IsNotSet()) {\n+\t\t\tresult.AddValueToVector(value.GetData(), value.GetSize(), true);\n+\t\t}\n+\t} else {\n+\t\tif (states.EmptyLine() && state_machine->dialect_options.num_cols == 1) {\n+\t\t\tresult.EmptyLine(result, iterator.pos.buffer_pos);\n+\t\t}\n \t}\n \n \tif (states.NewRow() && !states.IsNotSet()) {\n",
  "test_patch": "diff --git a/test/sql/copy/csv/test_csv_projection_pushdown.test b/test/sql/copy/csv/test_csv_projection_pushdown.test\nindex 420d3f3b3581..1693bf7562bf 100644\n--- a/test/sql/copy/csv/test_csv_projection_pushdown.test\n+++ b/test/sql/copy/csv/test_csv_projection_pushdown.test\n@@ -115,3 +115,39 @@ SELECT COUNT(*) FROM ${lineitem}\n \n endloop\n \n+# Test Projection over multiple buffers\n+query I\n+select count(*) from read_csv('data/csv/projection_buffer.csv', quote = '\"', escape = '\"',  buffer_size=35)\n+----\n+27\n+\n+query III\n+select d,b,a from read_csv('data/csv/projection_buffer.csv', quote = '\"', escape = '\"',  buffer_size=35)\n+----\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n+d\"\tb\"\ta\"\n\\ No newline at end of file\n",
  "problem_statement": "CSV read, INTERNAL Error: Attempted to access index 1 within vector of size 1\n### What happens?\r\n\r\nHi,\r\nI try to read a big CSV file and I have INTERNAL Error.\r\n\r\n### To Reproduce\r\n\r\nI cannot attach a sample file, because it's big.\r\n\r\nThe source is a CSV, with delim=\";\" https://opencoesione.gov.it/media/open_data//progetti_esteso_20231231.zip\r\n\r\nDecompress it and get the top 290k lines:\r\n\r\n```bash\r\nprogetti_esteso_20231231.zip\r\n<progetti_esteso_20231231.csv head -n 290000 >tmp.csv\r\n```\r\n\r\nThen I run\r\n\r\n```\r\nduckdb --csv -c \"SET preserve_insertion_order=false;SELECT count(*) FROM read_csv_auto('tmp.csv',parallel=false,all_varchar=true)\"\r\n```\r\n\r\nand I have \r\n\r\n```\r\nError: INTERNAL Error: Attempted to access index 1 within vector of size 1\r\n```\r\n\r\n### OS:\r\n\r\nDebian 12\r\n\r\n### DuckDB Version:\r\n\r\nv0.10.0 20b1486d11\r\n\r\n### DuckDB Client:\r\n\r\n0.10.0\r\n\r\n### Full Name:\r\n\r\nAndrea Borruso\r\n\r\n### Affiliation:\r\n\r\nonData\r\n\r\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\r\n\r\nI have not tested with any build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "Thanks, we'll take a look.",
  "created_at": "2024-03-08T12:00:09Z",
  "modified_files": [
    "b/data/csv/projection_buffer.csv",
    "src/execution/operator/csv_scanner/scanner/string_value_scanner.cpp"
  ]
}