You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Triggered an INTERNAL Error: BoundExpression::GetExpression called on empty bound expression
### What happens?

When trying to query a JSON file and unnesting its contents, I encountered the above error message:

```sql
select list_transform(unnest(Item), x -> unnest(x)) from 'https://gist.githubusercontent.com/tobilg/9d7cb9422f3d65fd93fca23e93cb22dc/raw/0df6fbeddad395fb67dc0eac9c87fab6d55e78a3/ddb_export.json';
```

Error message:
`Error: INTERNAL Error: BoundExpression::GetExpression called on empty bound expression`

After that, when I try to run another query in the CLI, e.g. `select 1;`, I see the following error:

`Error: FATAL Error: Failed: database has been invalidated because of a previous fatal error. The database must be restarted prior to being used again.`

and have to restart the CLI to continue.

### To Reproduce

See the queries above.

### OS:

MacOS

### DuckDB Version:

0.9.2

### DuckDB Client:

CLI

### Full Name:

Tobi M.

### Affiliation:

none

### Have you tried this on the latest `main` branch?

I have tested with a release build (and could not test with a main build)

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/logo-dl/DuckDB_Logo-stacked.svg" height="120">
3: </div>
4: <br>
5: 
6: 
7: 
8: 
9: <p align="center">
10:   <a href="https://github.com/duckdb/duckdb/actions">
11:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge">
12:   </a>
13:   <a href="https://discord.gg/tcvwpjfnZx">
14:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
15:   </a>
16:   <a href="https://github.com/duckdb/duckdb/releases/">
17:     <img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release">
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of src/planner/binder/expression/bind_unnest_expression.cpp]
1: #include "duckdb/catalog/catalog_entry/aggregate_function_catalog_entry.hpp"
2: #include "duckdb/main/client_context.hpp"
3: #include "duckdb/parser/expression/function_expression.hpp"
4: #include "duckdb/planner/expression/bound_aggregate_expression.hpp"
5: #include "duckdb/planner/expression/bound_columnref_expression.hpp"
6: #include "duckdb/planner/expression/bound_constant_expression.hpp"
7: #include "duckdb/planner/expression/bound_function_expression.hpp"
8: #include "duckdb/planner/expression/bound_parameter_expression.hpp"
9: #include "duckdb/planner/expression_binder/aggregate_binder.hpp"
10: #include "duckdb/planner/expression_binder/select_binder.hpp"
11: #include "duckdb/planner/query_node/bound_select_node.hpp"
12: #include "duckdb/planner/expression/bound_unnest_expression.hpp"
13: #include "duckdb/planner/binder.hpp"
14: #include "duckdb/function/scalar/nested_functions.hpp"
15: #include "duckdb/execution/expression_executor.hpp"
16: 
17: namespace duckdb {
18: 
19: unique_ptr<Expression> CreateBoundStructExtract(ClientContext &context, unique_ptr<Expression> expr, string key) {
20: 	vector<unique_ptr<Expression>> arguments;
21: 	arguments.push_back(std::move(expr));
22: 	arguments.push_back(make_uniq<BoundConstantExpression>(Value(key)));
23: 	auto extract_function = StructExtractFun::GetFunction();
24: 	auto bind_info = extract_function.bind(context, extract_function, arguments);
25: 	auto return_type = extract_function.return_type;
26: 	auto result = make_uniq<BoundFunctionExpression>(return_type, std::move(extract_function), std::move(arguments),
27: 	                                                 std::move(bind_info));
28: 	result->alias = std::move(key);
29: 	return std::move(result);
30: }
31: 
32: BindResult SelectBinder::BindUnnest(FunctionExpression &function, idx_t depth, bool root_expression) {
33: 	// bind the children of the function expression
34: 	if (depth > 0) {
35: 		return BindResult(binder.FormatError(function, "UNNEST() for correlated expressions is not supported yet"));
36: 	}
37: 	string error;
38: 	if (function.children.empty()) {
39: 		return BindResult(binder.FormatError(function, "UNNEST() requires a single argument"));
40: 	}
41: 	idx_t max_depth = 1;
42: 	if (function.children.size() != 1) {
43: 		bool has_parameter = false;
44: 		bool supported_argument = false;
45: 		for (idx_t i = 1; i < function.children.size(); i++) {
46: 			if (has_parameter) {
47: 				return BindResult(binder.FormatError(function, "UNNEST() only supports a single additional argument"));
48: 			}
49: 			if (function.children[i]->HasParameter()) {
50: 				throw ParameterNotAllowedException("Parameter not allowed in unnest parameter");
51: 			}
52: 			if (!function.children[i]->IsScalar()) {
53: 				break;
54: 			}
55: 			auto alias = function.children[i]->alias;
56: 			BindChild(function.children[i], depth, error);
57: 			if (!error.empty()) {
58: 				return BindResult(error);
59: 			}
60: 			auto &const_child = BoundExpression::GetExpression(*function.children[i]);
61: 			auto value = ExpressionExecutor::EvaluateScalar(context, *const_child, true);
62: 			if (alias == "recursive") {
63: 				auto recursive = value.GetValue<bool>();
64: 				if (recursive) {
65: 					max_depth = NumericLimits<idx_t>::Maximum();
66: 				}
67: 			} else if (alias == "max_depth") {
68: 				max_depth = value.GetValue<uint32_t>();
69: 				if (max_depth == 0) {
70: 					throw BinderException("UNNEST cannot have a max depth of 0");
71: 				}
72: 			} else if (!alias.empty()) {
73: 				throw BinderException("Unsupported parameter \"%s\" for unnest", alias);
74: 			} else {
75: 				break;
76: 			}
77: 			has_parameter = true;
78: 			supported_argument = true;
79: 		}
80: 		if (!supported_argument) {
81: 			return BindResult(binder.FormatError(function, "UNNEST - unsupported extra argument, unnest only supports "
82: 			                                               "recursive := [true/false] or max_depth := #"));
83: 		}
84: 	}
85: 	unnest_level++;
86: 	BindChild(function.children[0], depth, error);
87: 	if (!error.empty()) {
88: 		// failed to bind
89: 		// try to bind correlated columns manually
90: 		auto result = BindCorrelatedColumns(function.children[0], error);
91: 		if (result.HasError()) {
92: 			return BindResult(result.error);
93: 		}
94: 		auto &bound_expr = BoundExpression::GetExpression(*function.children[0]);
95: 		ExtractCorrelatedExpressions(binder, *bound_expr);
96: 	}
97: 	auto &child = BoundExpression::GetExpression(*function.children[0]);
98: 	auto &child_type = child->return_type;
99: 	unnest_level--;
100: 
101: 	if (unnest_level > 0) {
102: 		throw BinderException(
103: 		    "Nested UNNEST calls are not supported - use UNNEST(x, recursive := true) to unnest multiple levels");
104: 	}
105: 
106: 	switch (child_type.id()) {
107: 	case LogicalTypeId::UNKNOWN:
108: 		throw ParameterNotResolvedException();
109: 	case LogicalTypeId::LIST:
110: 	case LogicalTypeId::STRUCT:
111: 	case LogicalTypeId::SQLNULL:
112: 		break;
113: 	default:
114: 		return BindResult(binder.FormatError(function, "UNNEST() can only be applied to lists, structs and NULL"));
115: 	}
116: 
117: 	idx_t list_unnests;
118: 	idx_t struct_unnests = 0;
119: 
120: 	auto unnest_expr = std::move(child);
121: 	if (child_type.id() == LogicalTypeId::SQLNULL) {
122: 		list_unnests = 1;
123: 	} else {
124: 		// perform all LIST unnests
125: 		auto type = child_type;
126: 		list_unnests = 0;
127: 		while (type.id() == LogicalTypeId::LIST) {
128: 			type = ListType::GetChildType(type);
129: 			list_unnests++;
130: 			if (list_unnests >= max_depth) {
131: 				break;
132: 			}
133: 		}
134: 		// unnest structs
135: 		if (type.id() == LogicalTypeId::STRUCT) {
136: 			struct_unnests = max_depth - list_unnests;
137: 		}
138: 	}
139: 	if (struct_unnests > 0 && !root_expression) {
140: 		return BindResult(binder.FormatError(
141: 		    function, "UNNEST() on a struct column can only be applied as the root element of a SELECT expression"));
142: 	}
143: 	// perform all LIST unnests
144: 	auto return_type = child_type;
145: 	for (idx_t current_depth = 0; current_depth < list_unnests; current_depth++) {
146: 		if (return_type.id() == LogicalTypeId::LIST) {
147: 			return_type = ListType::GetChildType(return_type);
148: 		}
149: 		auto result = make_uniq<BoundUnnestExpression>(return_type);
150: 		result->child = std::move(unnest_expr);
151: 		auto alias = function.alias.empty() ? result->ToString() : function.alias;
152: 
153: 		auto current_level = unnest_level + list_unnests - current_depth - 1;
154: 		auto entry = node.unnests.find(current_level);
155: 		idx_t unnest_table_index;
156: 		idx_t unnest_column_index;
157: 		if (entry == node.unnests.end()) {
158: 			BoundUnnestNode unnest_node;
159: 			unnest_node.index = binder.GenerateTableIndex();
160: 			unnest_node.expressions.push_back(std::move(result));
161: 			unnest_table_index = unnest_node.index;
162: 			unnest_column_index = 0;
163: 			node.unnests.insert(make_pair(current_level, std::move(unnest_node)));
164: 		} else {
165: 			unnest_table_index = entry->second.index;
166: 			unnest_column_index = entry->second.expressions.size();
167: 			entry->second.expressions.push_back(std::move(result));
168: 		}
169: 		// now create a column reference referring to the unnest
170: 		unnest_expr = make_uniq<BoundColumnRefExpression>(
171: 		    std::move(alias), return_type, ColumnBinding(unnest_table_index, unnest_column_index), depth);
172: 	}
173: 	// now perform struct unnests, if any
174: 	if (struct_unnests > 0) {
175: 		vector<unique_ptr<Expression>> struct_expressions;
176: 		struct_expressions.push_back(std::move(unnest_expr));
177: 
178: 		for (idx_t i = 0; i < struct_unnests; i++) {
179: 			vector<unique_ptr<Expression>> new_expressions;
180: 			// check if there are any structs left
181: 			bool has_structs = false;
182: 			for (auto &expr : struct_expressions) {
183: 				if (expr->return_type.id() == LogicalTypeId::STRUCT) {
184: 					// struct! push a struct_extract
185: 					auto &child_types = StructType::GetChildTypes(expr->return_type);
186: 					for (auto &entry : child_types) {
187: 						new_expressions.push_back(CreateBoundStructExtract(context, expr->Copy(), entry.first));
188: 					}
189: 					has_structs = true;
190: 				} else {
191: 					// not a struct - push as-is
192: 					new_expressions.push_back(std::move(expr));
193: 				}
194: 			}
195: 			struct_expressions = std::move(new_expressions);
196: 			if (!has_structs) {
197: 				break;
198: 			}
199: 		}
200: 		expanded_expressions = std::move(struct_expressions);
201: 		unnest_expr = make_uniq<BoundConstantExpression>(Value(42));
202: 	}
203: 	return BindResult(std::move(unnest_expr));
204: }
205: 
206: } // namespace duckdb
[end of src/planner/binder/expression/bind_unnest_expression.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: