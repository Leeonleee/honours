You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
list_zip does not support arrays (requires list)
### What happens?

If I pass in arrays as parameters to `list_zip`, I receive a binder error that their types must be list.

### To Reproduce

This works:
```sql
select list_zip([1, 2, 3]::int[], [1, 2, 3]::int[])
```

This does not work:
```sql
select list_zip([1, 2, 3]::int[3], [1, 2, 3]::int[3])
```
```
BinderException: Binder Error: Parameter type needs to be List
```
(Note that the error message is from running in Python, but the same error appears in the CLI also)

### OS:

MacOS

### DuckDB Version:

1.0.0

### DuckDB Client:

CLI, Python

### Full Name:

Alex Monahan

### Affiliation:

DuckDB Labs and MotherDuck

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have
list_zip does not support arrays (requires list)
### What happens?

If I pass in arrays as parameters to `list_zip`, I receive a binder error that their types must be list.

### To Reproduce

This works:
```sql
select list_zip([1, 2, 3]::int[], [1, 2, 3]::int[])
```

This does not work:
```sql
select list_zip([1, 2, 3]::int[3], [1, 2, 3]::int[3])
```
```
BinderException: Binder Error: Parameter type needs to be List
```
(Note that the error message is from running in Python, but the same error appears in the CLI also)

### OS:

MacOS

### DuckDB Version:

1.0.0

### DuckDB Client:

CLI, Python

### Full Name:

Alex Monahan

### Affiliation:

DuckDB Labs and MotherDuck

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://www.duckdb.org/docs/installation) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/function/scalar/list/list_zip.cpp]
1: #include "duckdb/common/types/data_chunk.hpp"
2: #include "duckdb/function/scalar/nested_functions.hpp"
3: #include "duckdb/planner/expression_binder.hpp"
4: #include "duckdb/planner/expression/bound_function_expression.hpp"
5: #include "duckdb/planner/expression/bound_parameter_expression.hpp"
6: #include "duckdb/common/to_string.hpp"
7: 
8: namespace duckdb {
9: 
10: static void ListZipFunction(DataChunk &args, ExpressionState &state, Vector &result) {
11: 	idx_t count = args.size();
12: 	idx_t args_size = args.ColumnCount();
13: 	auto *result_data = FlatVector::GetData<list_entry_t>(result);
14: 	auto &result_struct = ListVector::GetEntry(result);
15: 	auto &struct_entries = StructVector::GetEntries(result_struct);
16: 	bool truncate_flags_set = false;
17: 
18: 	// Check flag
19: 	if (args.data.back().GetType().id() == LogicalTypeId::BOOLEAN) {
20: 		truncate_flags_set = true;
21: 		args_size--;
22: 	}
23: 
24: 	vector<UnifiedVectorFormat> input_lists;
25: 	input_lists.resize(args.ColumnCount());
26: 	for (idx_t i = 0; i < args.ColumnCount(); i++) {
27: 		args.data[i].ToUnifiedFormat(count, input_lists[i]);
28: 	}
29: 
30: 	// Handling output row for each input row
31: 	idx_t result_size = 0;
32: 	vector<idx_t> lengths;
33: 	for (idx_t j = 0; j < count; j++) {
34: 		// Is flag for current row set
35: 		bool truncate_to_shortest = false;
36: 		if (truncate_flags_set) {
37: 			auto &flag_vec = input_lists.back();
38: 			idx_t flag_idx = flag_vec.sel->get_index(j);
39: 			if (flag_vec.validity.RowIsValid(flag_idx)) {
40: 				truncate_to_shortest = UnifiedVectorFormat::GetData<bool>(flag_vec)[flag_idx];
41: 			}
42: 		}
43: 
44: 		// Calculation of the outgoing list size
45: 		idx_t len = truncate_to_shortest ? NumericLimits<int>::Maximum() : 0;
46: 		for (idx_t i = 0; i < args_size; i++) {
47: 			idx_t curr_size;
48: 			if (args.data[i].GetType() == LogicalType::SQLNULL || ListVector::GetListSize(args.data[i]) == 0) {
49: 				curr_size = 0;
50: 			} else {
51: 				idx_t sel_idx = input_lists[i].sel->get_index(j);
52: 				auto curr_data = UnifiedVectorFormat::GetData<list_entry_t>(input_lists[i]);
53: 				curr_size = input_lists[i].validity.RowIsValid(sel_idx) ? curr_data[sel_idx].length : 0;
54: 			}
55: 
56: 			// Dependent on flag using gt or lt
57: 			if (truncate_to_shortest) {
58: 				len = len > curr_size ? curr_size : len;
59: 			} else {
60: 				len = len < curr_size ? curr_size : len;
61: 			}
62: 		}
63: 		lengths.push_back(len);
64: 		result_size += len;
65: 	}
66: 
67: 	ListVector::SetListSize(result, result_size);
68: 	ListVector::Reserve(result, result_size);
69: 	vector<SelectionVector> selections;
70: 	vector<ValidityMask> masks;
71: 	for (idx_t i = 0; i < args_size; i++) {
72: 		selections.push_back(SelectionVector(result_size));
73: 		masks.push_back(ValidityMask(result_size));
74: 	}
75: 
76: 	idx_t offset = 0;
77: 	for (idx_t j = 0; j < count; j++) {
78: 		idx_t len = lengths[j];
79: 		for (idx_t i = 0; i < args_size; i++) {
80: 			auto &curr = input_lists[i];
81: 			idx_t sel_idx = curr.sel->get_index(j);
82: 			idx_t curr_off = 0;
83: 			idx_t curr_len = 0;
84: 
85: 			// Copying values from the given lists
86: 			if (curr.validity.RowIsValid(sel_idx)) {
87: 				auto input_lists_data = UnifiedVectorFormat::GetData<list_entry_t>(curr);
88: 				curr_off = input_lists_data[sel_idx].offset;
89: 				curr_len = input_lists_data[sel_idx].length;
90: 				auto copy_len = len < curr_len ? len : curr_len;
91: 				idx_t entry = offset;
92: 				for (idx_t k = 0; k < copy_len; k++) {
93: 					if (!FlatVector::Validity(ListVector::GetEntry(args.data[i])).RowIsValid(curr_off + k)) {
94: 						masks[i].SetInvalid(entry + k);
95: 					}
96: 					selections[i].set_index(entry + k, curr_off + k);
97: 				}
98: 			}
99: 
100: 			// Set NULL values for list that are shorter than the output list
101: 			if (len > curr_len) {
102: 				for (idx_t d = curr_len; d < len; d++) {
103: 					masks[i].SetInvalid(d + offset);
104: 					selections[i].set_index(d + offset, 0);
105: 				}
106: 			}
107: 		}
108: 		result_data[j].length = len;
109: 		result_data[j].offset = offset;
110: 		offset += len;
111: 	}
112: 	for (idx_t child_idx = 0; child_idx < args_size; child_idx++) {
113: 		if (!(args.data[child_idx].GetType() == LogicalType::SQLNULL)) {
114: 			struct_entries[child_idx]->Slice(ListVector::GetEntry(args.data[child_idx]), selections[child_idx],
115: 			                                 result_size);
116: 		}
117: 		struct_entries[child_idx]->Flatten(result_size);
118: 		FlatVector::SetValidity((*struct_entries[child_idx]), masks[child_idx]);
119: 	}
120: 	result.SetVectorType(args.AllConstant() ? VectorType::CONSTANT_VECTOR : VectorType::FLAT_VECTOR);
121: }
122: 
123: static unique_ptr<FunctionData> ListZipBind(ClientContext &context, ScalarFunction &bound_function,
124:                                             vector<unique_ptr<Expression>> &arguments) {
125: 	child_list_t<LogicalType> struct_children;
126: 
127: 	// The last argument could be a flag to be set if we want a minimal list or a maximal list
128: 	idx_t size = arguments.size();
129: 	if (size == 0) {
130: 		throw BinderException("Provide at least one argument to " + bound_function.name);
131: 	}
132: 	if (arguments[size - 1]->return_type.id() == LogicalTypeId::BOOLEAN) {
133: 		size--;
134: 	}
135: 
136: 	case_insensitive_set_t struct_names;
137: 	for (idx_t i = 0; i < size; i++) {
138: 		auto &child = arguments[i];
139: 		switch (child->return_type.id()) {
140: 		case LogicalTypeId::LIST:
141: 			struct_children.push_back(make_pair(string(), ListType::GetChildType(child->return_type)));
142: 			break;
143: 		case LogicalTypeId::SQLNULL:
144: 			struct_children.push_back(make_pair(string(), LogicalTypeId::SQLNULL));
145: 			break;
146: 		case LogicalTypeId::UNKNOWN:
147: 			throw ParameterNotResolvedException();
148: 		default:
149: 			throw BinderException("Parameter type needs to be List");
150: 		}
151: 	}
152: 	bound_function.return_type = LogicalType::LIST(LogicalType::STRUCT(struct_children));
153: 	return make_uniq<VariableReturnBindData>(bound_function.return_type);
154: }
155: 
156: ScalarFunction ListZipFun::GetFunction() {
157: 
158: 	auto fun = ScalarFunction({}, LogicalType::LIST(LogicalTypeId::STRUCT), ListZipFunction, ListZipBind);
159: 	fun.varargs = LogicalType::ANY;
160: 	fun.null_handling = FunctionNullHandling::SPECIAL_HANDLING; // Special handling needed?
161: 	return fun;
162: }
163: 
164: void ListZipFun::RegisterFunction(BuiltinFunctions &set) {
165: 	set.AddFunction({"list_zip", "array_zip"}, GetFunction());
166: }
167: } // namespace duckdb
[end of src/function/scalar/list/list_zip.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: