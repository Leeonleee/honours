{
  "repo": "duckdb/duckdb",
  "pull_number": 7467,
  "instance_id": "duckdb__duckdb-7467",
  "issue_numbers": [
    "7444"
  ],
  "base_commit": "4a39a08b77ba4aafe36353498e15cd7cb6fe257b",
  "patch": "diff --git a/src/optimizer/unnest_rewriter.cpp b/src/optimizer/unnest_rewriter.cpp\nindex 93d46bfbfd65..e14f11019a97 100644\n--- a/src/optimizer/unnest_rewriter.cpp\n+++ b/src/optimizer/unnest_rewriter.cpp\n@@ -195,18 +195,24 @@ void UnnestRewriter::UpdateRHSBindings(unique_ptr<LogicalOperator> *plan_ptr, un\n \t\tupdater.replace_bindings.push_back(replace_binding);\n \t}\n \n-\t// temporarily remove the BOUND_UNNEST and the child of the LOGICAL_UNNEST from the plan\n+\t// temporarily remove the BOUND_UNNESTs and the child of the LOGICAL_UNNEST from the plan\n \tD_ASSERT(curr_op->get()->type == LogicalOperatorType::LOGICAL_UNNEST);\n \tauto &unnest = curr_op->get()->Cast<LogicalUnnest>();\n-\tauto temp_bound_unnest = std::move(unnest.expressions[0]);\n+\tvector<unique_ptr<Expression>> temp_bound_unnests;\n+\tfor (auto &temp_bound_unnest : unnest.expressions) {\n+\t\ttemp_bound_unnests.push_back(std::move(temp_bound_unnest));\n+\t}\n+\tD_ASSERT(unnest.children.size() == 1);\n \tauto temp_unnest_child = std::move(unnest.children[0]);\n \tunnest.expressions.clear();\n \tunnest.children.clear();\n \t// update the bindings of the plan\n \tupdater.VisitOperator(*plan_ptr->get());\n \tupdater.replace_bindings.clear();\n-\t// add the child again\n-\tunnest.expressions.push_back(std::move(temp_bound_unnest));\n+\t// add the children again\n+\tfor (auto &temp_bound_unnest : temp_bound_unnests) {\n+\t\tunnest.expressions.push_back(std::move(temp_bound_unnest));\n+\t}\n \tunnest.children.push_back(std::move(temp_unnest_child));\n \n \t// add the LHS expressions to each LOGICAL_PROJECTION\n@@ -256,6 +262,7 @@ void UnnestRewriter::UpdateBoundUnnestBindings(UnnestRewriterPlanUpdater &update\n \tD_ASSERT(curr_op->get()->type == LogicalOperatorType::LOGICAL_UNNEST);\n \tauto &unnest = curr_op->get()->Cast<LogicalUnnest>();\n \n+\tD_ASSERT(unnest.children.size() == 1);\n \tauto unnest_child_cols = unnest.children[0]->GetColumnBindings();\n \tfor (idx_t delim_col_idx = 0; delim_col_idx < delim_columns.size(); delim_col_idx++) {\n \t\tfor (idx_t child_col_idx = 0; child_col_idx < unnest_child_cols.size(); child_col_idx++) {\n@@ -268,8 +275,9 @@ void UnnestRewriter::UpdateBoundUnnestBindings(UnnestRewriterPlanUpdater &update\n \t}\n \n \t// update bindings\n-\tD_ASSERT(unnest.expressions.size() == 1);\n-\tupdater.VisitExpression(&unnest.expressions[0]);\n+\tfor (auto &unnest_expr : unnest.expressions) {\n+\t\tupdater.VisitExpression(&unnest_expr);\n+\t}\n \tupdater.replace_bindings.clear();\n }\n \n",
  "test_patch": "diff --git a/test/optimizer/unnest_rewriter.test b/test/optimizer/unnest_rewriter.test\nindex fde0352df469..dfe8f5cc9ac6 100644\n--- a/test/optimizer/unnest_rewriter.test\n+++ b/test/optimizer/unnest_rewriter.test\n@@ -126,4 +126,25 @@ logical_opt\t<REGEX>:.*DELIM_JOIN.*SINGLE.*\n query II\n EXPLAIN select * from (select [42, 43, 44]) t(a), (select unnest(t.a)) t2(b) where b=43;\n ----\n-logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n\\ No newline at end of file\n+logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n+\n+# test issue #7444\n+\n+statement ok\n+CREATE TABLE with_array(foo INT, arr DOUBLE[]);\n+\n+statement ok\n+INSERT INTO with_array VALUES(1, [1,2,3]), (2, [4,5,6]);\n+\n+query IIII\n+SELECT foo, arr, u1, u2 FROM with_array,\n+(SELECT UNNEST(with_array.arr) AS u1,\n+UNNEST(generate_series(1, len(with_array.arr), 1)) AS u2)\n+ORDER BY foo, u2;\n+----\n+1\t[1.0, 2.0, 3.0]\t1.0\t1\n+1\t[1.0, 2.0, 3.0]\t2.0\t2\n+1\t[1.0, 2.0, 3.0]\t3.0\t3\n+2\t[4.0, 5.0, 6.0]\t4.0\t1\n+2\t[4.0, 5.0, 6.0]\t5.0\t2\n+2\t[4.0, 5.0, 6.0]\t6.0\t3\n\\ No newline at end of file\n",
  "problem_statement": "Multiple unnests in lateral join error - failed to bind column reference\n### What happens?\n\nUsing multiple `UNNEST` clauses in a lateral join will cause a \"failed to bind column reference\" error.\r\n\n\n### To Reproduce\n\n\r\n```sql\r\nD CREATE TABLE with_array(foo INT, arr DOUBLE[]);\r\nD INSERT INTO with_array VALUES(1, [1,2,3]), (2, [4,5,6]);\r\nD SELECT * FROM with_array, (SELECT UNNEST(with_array.arr), UNNEST(generate_series(1, len(with_array.arr), 1)));\r\n-- Failed to bind column reference \"UNNEST(generate_series(CAST(1 AS BIGINT), len(arr), CAST(1 AS BIGINT)))\" [8.1] (bindings: [0.0 0.1 8.0])\r\n```\r\n\r\nDisabling the optimizer makes this work as intended - it is likely related to the unnest rewriter optimizer.\r\n\r\n```sql\r\npragma disable_optimizer;\r\nD CREATE TABLE with_array(foo INT, arr DOUBLE[]);\r\nD INSERT INTO with_array VALUES(1, [1,2,3]), (2, [4,5,6]);\r\nD SELECT * FROM with_array, (SELECT UNNEST(with_array.arr), UNNEST(generate_series(1, len(with_array.arr), 1)));\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  foo  \u2502       arr       \u2502 unnest(with_array.arr) \u2502 unnest(generate_series(1, len(with_array.arr), 1)) \u2502\r\n\u2502 int32 \u2502    double[]     \u2502         double         \u2502                       int64                        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502 [1.0, 2.0, 3.0] \u2502                    3.0 \u2502                                                  3 \u2502\r\n\u2502     2 \u2502 [4.0, 5.0, 6.0] \u2502                    6.0 \u2502                                                  3 \u2502\r\n\u2502     1 \u2502 [1.0, 2.0, 3.0] \u2502                    2.0 \u2502                                                  2 \u2502\r\n\u2502     2 \u2502 [4.0, 5.0, 6.0] \u2502                    5.0 \u2502                                                  2 \u2502\r\n\u2502     1 \u2502 [1.0, 2.0, 3.0] \u2502                    1.0 \u2502                                                  1 \u2502\r\n\u2502     2 \u2502 [4.0, 5.0, 6.0] \u2502                    4.0 \u2502                                                  1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\nLatest\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nMark Raasveldt\n\n### Affiliation:\n\nDuckDB Labs\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2023-05-11T18:52:45Z",
  "modified_files": [
    "src/optimizer/unnest_rewriter.cpp"
  ]
}