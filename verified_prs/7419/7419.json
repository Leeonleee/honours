{
  "repo": "duckdb/duckdb",
  "pull_number": 7419,
  "instance_id": "duckdb__duckdb-7419",
  "issue_numbers": [
    "7023",
    "7023"
  ],
  "base_commit": "c54a5ca25b722d4022a1968f55998936c0b15cc7",
  "patch": "diff --git a/src/function/pragma/pragma_queries.cpp b/src/function/pragma/pragma_queries.cpp\nindex 7f900b7ff294..2f0e06fa75b2 100644\n--- a/src/function/pragma/pragma_queries.cpp\n+++ b/src/function/pragma/pragma_queries.cpp\n@@ -22,20 +22,26 @@ string PragmaShowTables(ClientContext &context, const FunctionParameters &parame\n \tauto schema = ClientData::Get(context).catalog_search_path->GetDefault().schema;\n \tschema = (schema == INVALID_SCHEMA) ? DEFAULT_SCHEMA : schema; // NOLINT\n \n-\tauto where_clause =\n-\t    StringUtil::Join({\"where database_name = '\", catalog, \"' and schema_name = '\", schema, \"'\"}, \"\");\n+\tauto where_clause = StringUtil::Format(\"where ((database_name = '%s') and (schema_name = '%s'))\", catalog, schema);\n \t// clang-format off\n-\tauto pragma_query = StringUtil::Join(\n-\t    {\"with tables as (\", \n-\t\t\t\t\t\t\"\tSELECT table_name as name FROM duckdb_tables \", where_clause, \n-\t\t\t \"), views as (\",\n-\t\t\t\t\t\t\"\tSELECT view_name as name FROM duckdb_views \", where_clause, \n-\t\t\t \"), indexes as (\",\n-\t\t\t\t\t\t\"\tSELECT index_name as name FROM duckdb_indexes \", where_clause, \n-\t\t\t \"), db_objects as (\",\n-\t\t\t\t\t\t\"\tSELECT name FROM tables UNION ALL SELECT name FROM views UNION ALL SELECT name FROM indexes\",\n-\t     \") SELECT name FROM db_objects ORDER BY name;\"\n-\t\t\t}, \"\");\n+\tauto pragma_query = StringUtil::Format(R\"EOF(\n+\twith \"tables\" as\n+\t(\n+\t\tSELECT table_name as \"name\"\n+\t\tFROM duckdb_tables %s\n+\t), \"views\" as\n+\t(\n+\t\tSELECT view_name as \"name\"\n+\t\tFROM duckdb_views %s\n+\t), db_objects as\n+\t(\n+\t\tSELECT \"name\" FROM \"tables\"\n+\t\tUNION ALL\n+\t\tSELECT \"name\" FROM \"views\"\n+\t)\n+\tSELECT \"name\"\n+\tFROM db_objects\n+\tORDER BY \"name\";)EOF\", where_clause, where_clause, where_clause);\n \t// clang-format on\n \n \treturn pragma_query;\n",
  "test_patch": "diff --git a/test/sql/pragma/test_show_tables.test b/test/sql/pragma/test_show_tables.test\nindex ad5fb0e1e337..17a2bf825cbe 100644\n--- a/test/sql/pragma/test_show_tables.test\n+++ b/test/sql/pragma/test_show_tables.test\n@@ -20,9 +20,15 @@ CREATE SCHEMA s1;\n statement ok\n CREATE TABLE s1.tbl(i INTEGER UNIQUE);\n \n+statement ok\n+CREATE INDEX my_index ON s1.tbl(i);\n+\n statement ok\n CREATE TABLE tbl(i INTEGER PRIMARY KEY);\n \n+statement ok\n+CREATE INDEX not_a_table ON tbl(i);\n+\n # We test that right table is described (from s1 schema)\n # column_name | column_type | null | key | default | extra\n query TTTITI\n@@ -30,6 +36,10 @@ DESCRIBE s1.tbl;\n ----\n i\tINTEGER\tYES\tUNI\tNULL\tNULL\n \n+# We test that the index can't be described\n+statement error\n+DESCRIBE my_index;\n+\n # We test that right table is described (from main schema)\n # column_name | column_type | null | key | default | extra\n query TTTITI\n",
  "problem_statement": "Index appears like a table\n### What happens?\r\n\r\nWhen we create an index on a table, it appears like a table with the\r\n\r\n```sql\r\nshow tables;\r\n```\r\n\r\n\r\n\r\n### To Reproduce\r\n\r\nCreate table and index : \r\n\r\n```sql\r\nCREATE TABLE mobitag_audit(date TIMESTAMP NOT NULL,\r\n    message_length INTEGER NOT NULL,\r\n    day_name VARCHAR);\r\n\r\ncreate index mobitag_date on mobitag_audit(date);\r\n```\r\n\r\nget tables : \r\n\r\n```sql\r\nshow tables;\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/5235127/231057712-fb50e704-b849-42ea-a6a1-c17a87042c2f.png)\r\n\r\n\r\n### OS:\r\n\r\nLinux Mint 21.1 Vera\r\n\r\n### DuckDB Version:\r\n\r\nv0.7.1 b00b93f0b1\r\n\r\n### DuckDB Client:\r\n\r\nduckdb\r\n\r\n### Full Name:\r\n\r\nAdrien SALES\r\n\r\n### Affiliation:\r\n\r\nadriens\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\nIndex appears like a table\n### What happens?\r\n\r\nWhen we create an index on a table, it appears like a table with the\r\n\r\n```sql\r\nshow tables;\r\n```\r\n\r\n\r\n\r\n### To Reproduce\r\n\r\nCreate table and index : \r\n\r\n```sql\r\nCREATE TABLE mobitag_audit(date TIMESTAMP NOT NULL,\r\n    message_length INTEGER NOT NULL,\r\n    day_name VARCHAR);\r\n\r\ncreate index mobitag_date on mobitag_audit(date);\r\n```\r\n\r\nget tables : \r\n\r\n```sql\r\nshow tables;\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/5235127/231057712-fb50e704-b849-42ea-a6a1-c17a87042c2f.png)\r\n\r\n\r\n### OS:\r\n\r\nLinux Mint 21.1 Vera\r\n\r\n### DuckDB Version:\r\n\r\nv0.7.1 b00b93f0b1\r\n\r\n### DuckDB Client:\r\n\r\nduckdb\r\n\r\n### Full Name:\r\n\r\nAdrien SALES\r\n\r\n### Affiliation:\r\n\r\nadriens\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "Good Morning,\r\n\r\nSuggest using the catalog instead:\r\n\r\n`select * from information_schema.tables as s`\r\n\r\nI believe technically an index is indeed a table but not exposed in the same way.  In terms of a cover index with multiple fields.\r\n\r\nHope this helps.\nGood Morning,\r\n\r\nSuggest using the catalog instead:\r\n\r\n`select * from information_schema.tables as s`\r\n\r\nI believe technically an index is indeed a table but not exposed in the same way.  In terms of a cover index with multiple fields.\r\n\r\nHope this helps.",
  "created_at": "2023-05-09T09:57:52Z",
  "modified_files": [
    "src/function/pragma/pragma_queries.cpp"
  ]
}