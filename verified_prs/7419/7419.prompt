You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Index appears like a table
### What happens?

When we create an index on a table, it appears like a table with the

```sql
show tables;
```



### To Reproduce

Create table and index : 

```sql
CREATE TABLE mobitag_audit(date TIMESTAMP NOT NULL,
    message_length INTEGER NOT NULL,
    day_name VARCHAR);

create index mobitag_date on mobitag_audit(date);
```

get tables : 

```sql
show tables;
```

![image](https://user-images.githubusercontent.com/5235127/231057712-fb50e704-b849-42ea-a6a1-c17a87042c2f.png)


### OS:

Linux Mint 21.1 Vera

### DuckDB Version:

v0.7.1 b00b93f0b1

### DuckDB Client:

duckdb

### Full Name:

Adrien SALES

### Affiliation:

adriens

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree
Index appears like a table
### What happens?

When we create an index on a table, it appears like a table with the

```sql
show tables;
```



### To Reproduce

Create table and index : 

```sql
CREATE TABLE mobitag_audit(date TIMESTAMP NOT NULL,
    message_length INTEGER NOT NULL,
    day_name VARCHAR);

create index mobitag_date on mobitag_audit(date);
```

get tables : 

```sql
show tables;
```

![image](https://user-images.githubusercontent.com/5235127/231057712-fb50e704-b849-42ea-a6a1-c17a87042c2f.png)


### OS:

Linux Mint 21.1 Vera

### DuckDB Version:

v0.7.1 b00b93f0b1

### DuckDB Client:

duckdb

### Full Name:

Adrien SALES

### Affiliation:

adriens

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=master" alt="Github Actions Badge">
9:   </a>
10:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
11:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
12:   </a>
13:   <a href="https://discord.gg/tcvwpjfnZx">
14:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
15:   </a>
16:   <a href="https://github.com/duckdb/duckdb/releases/">
17:     <img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release">
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of src/function/pragma/pragma_queries.cpp]
1: #include "duckdb/catalog/catalog_search_path.hpp"
2: #include "duckdb/common/constants.hpp"
3: #include "duckdb/common/file_system.hpp"
4: #include "duckdb/common/string_util.hpp"
5: #include "duckdb/function/pragma/pragma_functions.hpp"
6: #include "duckdb/main/config.hpp"
7: #include "duckdb/main/database_manager.hpp"
8: #include "duckdb/main/client_data.hpp"
9: #include "duckdb/parser/parser.hpp"
10: #include "duckdb/parser/qualified_name.hpp"
11: #include "duckdb/parser/statement/copy_statement.hpp"
12: #include "duckdb/parser/statement/export_statement.hpp"
13: 
14: namespace duckdb {
15: 
16: string PragmaTableInfo(ClientContext &context, const FunctionParameters &parameters) {
17: 	return StringUtil::Format("SELECT * FROM pragma_table_info('%s');", parameters.values[0].ToString());
18: }
19: 
20: string PragmaShowTables(ClientContext &context, const FunctionParameters &parameters) {
21: 	auto catalog = DatabaseManager::GetDefaultDatabase(context);
22: 	auto schema = ClientData::Get(context).catalog_search_path->GetDefault().schema;
23: 	schema = (schema == INVALID_SCHEMA) ? DEFAULT_SCHEMA : schema; // NOLINT
24: 
25: 	auto where_clause =
26: 	    StringUtil::Join({"where database_name = '", catalog, "' and schema_name = '", schema, "'"}, "");
27: 	// clang-format off
28: 	auto pragma_query = StringUtil::Join(
29: 	    {"with tables as (",
30: 						"	SELECT table_name as name FROM duckdb_tables ", where_clause,
31: 			 "), views as (",
32: 						"	SELECT view_name as name FROM duckdb_views ", where_clause,
33: 			 "), indexes as (",
34: 						"	SELECT index_name as name FROM duckdb_indexes ", where_clause,
35: 			 "), db_objects as (",
36: 						"	SELECT name FROM tables UNION ALL SELECT name FROM views UNION ALL SELECT name FROM indexes",
37: 	     ") SELECT name FROM db_objects ORDER BY name;"
38: 			}, "");
39: 	// clang-format on
40: 
41: 	return pragma_query;
42: }
43: 
44: string PragmaShowTablesExpanded(ClientContext &context, const FunctionParameters &parameters) {
45: 	return R"(
46: 			SELECT
47: 				t.table_name,
48: 				LIST(c.column_name order by c.column_index) AS column_names,
49: 				LIST(c.data_type order by c.column_index) AS column_types,
50: 				FIRST(t.temporary) AS temporary
51: 			FROM duckdb_tables t
52: 			JOIN duckdb_columns c
53: 			USING (table_oid)
54: 			GROUP BY t.table_name
55: 			ORDER BY t.table_name;
56: 	)";
57: }
58: 
59: string PragmaShowDatabases(ClientContext &context, const FunctionParameters &parameters) {
60: 	return "SELECT database_name FROM duckdb_databases() WHERE NOT internal ORDER BY database_name;";
61: }
62: 
63: string PragmaAllProfiling(ClientContext &context, const FunctionParameters &parameters) {
64: 	return "SELECT * FROM pragma_last_profiling_output() JOIN pragma_detailed_profiling_output() ON "
65: 	       "(pragma_last_profiling_output.operator_id);";
66: }
67: 
68: string PragmaDatabaseList(ClientContext &context, const FunctionParameters &parameters) {
69: 	return "SELECT * FROM pragma_database_list;";
70: }
71: 
72: string PragmaCollations(ClientContext &context, const FunctionParameters &parameters) {
73: 	return "SELECT * FROM pragma_collations() ORDER BY 1;";
74: }
75: 
76: string PragmaFunctionsQuery(ClientContext &context, const FunctionParameters &parameters) {
77: 	return "SELECT function_name AS name, upper(function_type) AS type, parameter_types AS parameters, varargs, "
78: 	       "return_type, has_side_effects AS side_effects"
79: 	       " FROM duckdb_functions()"
80: 	       " WHERE function_type IN ('scalar', 'aggregate')"
81: 	       " ORDER BY 1;";
82: }
83: 
84: string PragmaShow(ClientContext &context, const FunctionParameters &parameters) {
85: 	// PRAGMA table_info but with some aliases
86: 	auto table = QualifiedName::Parse(parameters.values[0].ToString());
87: 
88: 	// clang-format off
89:     string sql = R"(
90: 	SELECT
91: 		name AS "column_name",
92: 		type as "column_type",
93: 		CASE WHEN "notnull" THEN 'NO' ELSE 'YES' END AS "null",
94: 		(SELECT
95: 			MIN(CASE
96: 				WHEN constraint_type='PRIMARY KEY' THEN 'PRI'
97: 				WHEN constraint_type='UNIQUE' THEN 'UNI'
98: 				ELSE NULL END)
99: 		FROM duckdb_constraints() c
100: 		WHERE c.table_oid=cols.table_oid
101: 		AND list_contains(constraint_column_names, cols.column_name)) AS "key",
102: 		dflt_value AS "default",
103: 		NULL AS "extra"
104: 	FROM pragma_table_info('%func_param_table%')
105: 	LEFT JOIN duckdb_columns cols
106: 	ON cols.column_name = pragma_table_info.name
107: 	AND cols.table_name='%table_name%'
108: 	AND cols.schema_name='%table_schema%';)";
109: 	// clang-format on
110: 
111: 	sql = StringUtil::Replace(sql, "%func_param_table%", parameters.values[0].ToString());
112: 	sql = StringUtil::Replace(sql, "%table_name%", table.name);
113: 	sql = StringUtil::Replace(sql, "%table_schema%", table.schema.empty() ? DEFAULT_SCHEMA : table.schema);
114: 	return sql;
115: }
116: 
117: string PragmaVersion(ClientContext &context, const FunctionParameters &parameters) {
118: 	return "SELECT * FROM pragma_version();";
119: }
120: 
121: string PragmaImportDatabase(ClientContext &context, const FunctionParameters &parameters) {
122: 	auto &config = DBConfig::GetConfig(context);
123: 	if (!config.options.enable_external_access) {
124: 		throw PermissionException("Import is disabled through configuration");
125: 	}
126: 	auto &fs = FileSystem::GetFileSystem(context);
127: 	auto *opener = FileSystem::GetFileOpener(context);
128: 
129: 	string final_query;
130: 	// read the "shema.sql" and "load.sql" files
131: 	vector<string> files = {"schema.sql", "load.sql"};
132: 	for (auto &file : files) {
133: 		auto file_path = fs.JoinPath(parameters.values[0].ToString(), file);
134: 		auto handle = fs.OpenFile(file_path, FileFlags::FILE_FLAGS_READ, FileSystem::DEFAULT_LOCK,
135: 		                          FileSystem::DEFAULT_COMPRESSION, opener);
136: 		auto fsize = fs.GetFileSize(*handle);
137: 		auto buffer = unique_ptr<char[]>(new char[fsize]);
138: 		fs.Read(*handle, buffer.get(), fsize);
139: 		auto query = string(buffer.get(), fsize);
140: 		// Replace the placeholder with the path provided to IMPORT
141: 		if (file == "load.sql") {
142: 			Parser parser;
143: 			parser.ParseQuery(query);
144: 			auto copy_statements = std::move(parser.statements);
145: 			query.clear();
146: 			for (auto &statement_p : copy_statements) {
147: 				D_ASSERT(statement_p->type == StatementType::COPY_STATEMENT);
148: 				auto &statement = statement_p->Cast<CopyStatement>();
149: 				auto &info = *statement.info;
150: 				auto file_name = fs.ExtractName(info.file_path);
151: 				info.file_path = fs.JoinPath(parameters.values[0].ToString(), file_name);
152: 				query += statement.ToString() + ";";
153: 			}
154: 		}
155: 		final_query += query;
156: 	}
157: 	return final_query;
158: }
159: 
160: string PragmaDatabaseSize(ClientContext &context, const FunctionParameters &parameters) {
161: 	return "SELECT * FROM pragma_database_size();";
162: }
163: 
164: string PragmaStorageInfo(ClientContext &context, const FunctionParameters &parameters) {
165: 	return StringUtil::Format("SELECT * FROM pragma_storage_info('%s');", parameters.values[0].ToString());
166: }
167: 
168: void PragmaQueries::RegisterFunction(BuiltinFunctions &set) {
169: 	set.AddFunction(PragmaFunction::PragmaCall("table_info", PragmaTableInfo, {LogicalType::VARCHAR}));
170: 	set.AddFunction(PragmaFunction::PragmaCall("storage_info", PragmaStorageInfo, {LogicalType::VARCHAR}));
171: 	set.AddFunction(PragmaFunction::PragmaStatement("show_tables", PragmaShowTables));
172: 	set.AddFunction(PragmaFunction::PragmaStatement("show_tables_expanded", PragmaShowTablesExpanded));
173: 	set.AddFunction(PragmaFunction::PragmaStatement("show_databases", PragmaShowDatabases));
174: 	set.AddFunction(PragmaFunction::PragmaStatement("database_list", PragmaDatabaseList));
175: 	set.AddFunction(PragmaFunction::PragmaStatement("collations", PragmaCollations));
176: 	set.AddFunction(PragmaFunction::PragmaCall("show", PragmaShow, {LogicalType::VARCHAR}));
177: 	set.AddFunction(PragmaFunction::PragmaStatement("version", PragmaVersion));
178: 	set.AddFunction(PragmaFunction::PragmaStatement("database_size", PragmaDatabaseSize));
179: 	set.AddFunction(PragmaFunction::PragmaStatement("functions", PragmaFunctionsQuery));
180: 	set.AddFunction(PragmaFunction::PragmaCall("import_database", PragmaImportDatabase, {LogicalType::VARCHAR}));
181: 	set.AddFunction(PragmaFunction::PragmaStatement("all_profiling_output", PragmaAllProfiling));
182: }
183: 
184: } // namespace duckdb
[end of src/function/pragma/pragma_queries.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: