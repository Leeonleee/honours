You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Zero-based index in `list_reduce`
### What happens?

```sql
SELECT list_reduce(['a', 'b'], (x, y, i) -> x || y || i)
```
```
┌──────────────────────────────────────────────────────────────────────────────────┐
│ list_reduce(main.list_value('a', 'b'), (main."row"(x, y, i) -> ((x || y) || i))) │
│                                     varchar                                      │
├──────────────────────────────────────────────────────────────────────────────────┤
│ ab1                                                                              │
└──────────────────────────────────────────────────────────────────────────────────┘
```
but according to https://duckdb.org/docs/sql/functions/lambda.html 

> All lambda functions accept an optional extra parameter that represents the index of the current element. This is always the last parameter of the lambda function, and is 1-based (i.e., the first element has index 1).

which strongly suggests that `y = 'b'` should be accompanied with `i = 2`, since `2` is the correct index of `b` in the list `['a', 'b']`.

### To Reproduce

.

### OS:

Linux

### DuckDB Version:

1.1.0

### DuckDB Client:

Python

### Hardware:

i5, AMD64

### Full Name:

Soeren Wolfers

### Affiliation:

G-Research

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have
Inconsistent Index Origin in list_transform() and list_reduce() 
### What happens?

In a nutshell, list_transform() uses 1 as its index-origin (IO=1)
whereas list_reduce() uses 0 instead:
```
D select list_transform([10,20,30], (x,ix) -> ix) as ix;
┌───────────┐
│    ix     │
│  int64[]  │
├───────────┤
│ [1, 2, 3] │
└───────────┘

D select list_reduce([10,20,30], (acc,x,ix) -> ix) as ix;
┌───────┐
│  ix   │
│ int32 │
├───────┤
│     2 │
└───────┘
```


### To Reproduce

```
select list_transform([10,20,30], (x,ix) -> ix) as ix;
select list_reduce([10,20,30], (acc,x,ix) -> ix) as ix;
```

### OS:

MacOS

### DuckDB Version:

v1.1.3-dev75 c73cfca650 et al

### DuckDB Client:

CLI

### Hardware:

_No response_

### Full Name:

Peter Koppstein

### Affiliation:

Princeton University

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a source build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
