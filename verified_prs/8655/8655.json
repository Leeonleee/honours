{
  "repo": "duckdb/duckdb",
  "pull_number": 8655,
  "instance_id": "duckdb__duckdb-8655",
  "issue_numbers": [
    "8616"
  ],
  "base_commit": "ce647e0ff3e9af413f464cf0cd77047e98baf625",
  "patch": "diff --git a/src/function/cast/vector_cast_helpers.cpp b/src/function/cast/vector_cast_helpers.cpp\nindex 3b160e5f3376..876f3841b674 100644\n--- a/src/function/cast/vector_cast_helpers.cpp\n+++ b/src/function/cast/vector_cast_helpers.cpp\n@@ -20,10 +20,16 @@ inline static void SkipWhitespace(const char *buf, idx_t &pos, idx_t len) {\n static bool SkipToCloseQuotes(idx_t &pos, const char *buf, idx_t &len) {\n \tchar quote = buf[pos];\n \tpos++;\n+\tbool escaped = false;\n \n \twhile (pos < len) {\n-\t\tif (buf[pos] == quote) {\n-\t\t\treturn true;\n+\t\tif (buf[pos] == '\\\\') {\n+\t\t\tescaped = !escaped;\n+\t\t} else {\n+\t\t\tif (buf[pos] == quote && !escaped) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\tescaped = false;\n \t\t}\n \t\tpos++;\n \t}\n",
  "test_patch": "diff --git a/test/sql/cast/string_to_list_cast.test b/test/sql/cast/string_to_list_cast.test\nindex 329fba782162..2abb56daf887 100644\n--- a/test/sql/cast/string_to_list_cast.test\n+++ b/test/sql/cast/string_to_list_cast.test\n@@ -487,3 +487,28 @@ query III\n SELECT * FROM assorted_lists;\n ----\n [8, 7, 6]\t[hello, Duck'DB]\t[2022-12-02, 1929-01-25]\n+\n+#              Escape tests\n+#---------------------------------------------------\n+\n+# regular escape\n+query I\n+select '[{\"bar\":\"\\\"\"}]'::VARCHAR[];\n+----\n+[{\"bar\":\"\\\"\"}]\n+\n+# escaped '\\', does not count as an escape for \"\n+statement error\n+select '[{\"bar\":\"\\\\\"\"}]'::VARCHAR[];\n+\n+# uneven amount of escapes does escape the \"\n+query I\n+select '[{\"bar\":\"\\\\\\\"\"}]'::VARCHAR[];\n+----\n+[{\"bar\":\"\\\\\\\"\"}]\n+\n+# all are escaped except for the last one\n+query I\n+select '[{\"bar\":\"\\\"\\\"\\\\\\\"\\\"\\\"\\\\\"}]'::VARCHAR[];\n+----\n+[{\"bar\":\"\\\"\\\"\\\\\\\"\\\"\\\"\\\\\"}]\n",
  "problem_statement": "Casting to JSON[] fails with extra double quotation (::JSON vs ::JSON[])\n### What happens?\r\n\r\nLets say I try to turn this `r'[{\"bar\":\"a\",\"baz\":\"\\\"01.01.1\"}]'` into a json array so that I can unnest it. The expected output would be `[r'[{\"bar\":\"a\",\"baz\":\"\\\"01.01.1\"}]']` if I use ::JSON[] however instead I get: \r\n\r\n`duckdb.ConversionException: Conversion Error: Type VARCHAR with value '[{\"bar\":\"a\",\"baz\":\"\\\"01.01.1\"}]' can't be cast to the destination type LIST`\r\n\r\nIf I instead remove the extra `\"` DuckDB has no problems turning the VARCHAR into a list.\r\n\r\n### To Reproduce\r\n\r\nMinimal reproducible example:\r\n```py\r\nimport duckdb # duckdb==0.8.1\r\nimport pandas as pd # pandas==2.0.1 but should not matter\r\nimport pytest # pytest==6.2.5 but should not matter\r\nfrom duckdb import ConversionException\r\n\r\n\r\n@pytest.fixture()\r\ndef get_input_data():\r\n    # We are escaping the quote in the string to make it valid JSON.\r\n    # Now we get an issue of not being able to convert VARCHAR to a LIST\r\n    # unless we first convert it to a JSON object first.\r\n    df = pd.DataFrame({\"foo\": [r'[{\"bar\":\"a\",\"baz\":\"\\\"01.01.1\"}]']})\r\n    return df\r\n\r\n\r\n@pytest.fixture()\r\ndef get_expected_data():\r\n    expected = pd.DataFrame({\"col\": [[r'{\"bar\":\"a\",\"baz\":\"\\\"01.01.1\"}']]})\r\n    return expected\r\n\r\n\r\n@pytest.fixture()\r\ndef get_input_data_without_quote():\r\n    df = pd.DataFrame({\"foo\": ['[{\"bar\":\"a\",\"baz\":\"01.01.1\"}]']})\r\n    return df\r\n\r\n\r\n@pytest.fixture()\r\ndef get_expected_data_without_quote():\r\n    expected = pd.DataFrame({\"col\": [[r'{\"bar\":\"a\",\"baz\":\"01.01.1\"}']]})\r\n    return expected\r\n\r\n\r\nclass TestDuckDBJson:\r\n    def test_json_json_array(self, get_input_data, get_expected_data):\r\n        # Positive test case of potential solution\r\n        arr = [get_input_data]\r\n        expected = get_expected_data\r\n        for df in arr:  # noqa: F841\r\n            con = duckdb.connect()\r\n            actual = con.sql(\"\"\"SELECT foo::JSON::JSON[] AS col FROM df\"\"\").to_df()\r\n            print(actual.values[0], expected.values[0])\r\n            assert actual.equals(expected)\r\n\r\n    def test_json_array_fail(self, get_input_data, get_input_data_2):\r\n        # Negative test case\r\n        arr = [get_input_data, get_input_data_2]\r\n        for df in arr:  # noqa: F841\r\n            con = duckdb.connect()\r\n            try:\r\n                con.sql(\"\"\"SELECT foo::json[] AS col FROM df\"\"\")\r\n            except Exception as e:\r\n                assert isinstance(e, ConversionException)\r\n\r\n    def test_json_array_without_quote(self, get_input_data_without_quote, get_expected_data_without_quote):\r\n        # Positive test case\r\n        arr = [get_input_data_without_quote]\r\n        expected = get_expected_data_without_quote\r\n        for df in arr:  # noqa: F841\r\n            con = duckdb.connect()\r\n            actual = con.sql(\"\"\"SELECT foo::JSON[] AS col FROM df\"\"\").to_df()\r\n            print(actual.values[0], expected.values[0])\r\n            assert actual.equals(expected)\r\n```\r\n\r\n\r\n### OS:\r\n\r\nMacOS x64, Alpine x64\r\n\r\n### DuckDB Version:\r\n\r\n0.8.1\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Full Name:\r\n\r\nTimothy Lindblom\r\n\r\n### Affiliation:\r\n\r\nNorthvolt\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\nI have tested with a master build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2023-08-22T15:09:12Z",
  "modified_files": [
    "a/src/function/cast/vector_cast_helpers.cpp"
  ]
}