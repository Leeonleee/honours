You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Casting to JSON[] fails with extra double quotation (::JSON vs ::JSON[])
### What happens?

Lets say I try to turn this `r'[{"bar":"a","baz":"\"01.01.1"}]'` into a json array so that I can unnest it. The expected output would be `[r'[{"bar":"a","baz":"\"01.01.1"}]']` if I use ::JSON[] however instead I get: 

`duckdb.ConversionException: Conversion Error: Type VARCHAR with value '[{"bar":"a","baz":"\"01.01.1"}]' can't be cast to the destination type LIST`

If I instead remove the extra `"` DuckDB has no problems turning the VARCHAR into a list.

### To Reproduce

Minimal reproducible example:
```py
import duckdb # duckdb==0.8.1
import pandas as pd # pandas==2.0.1 but should not matter
import pytest # pytest==6.2.5 but should not matter
from duckdb import ConversionException


@pytest.fixture()
def get_input_data():
    # We are escaping the quote in the string to make it valid JSON.
    # Now we get an issue of not being able to convert VARCHAR to a LIST
    # unless we first convert it to a JSON object first.
    df = pd.DataFrame({"foo": [r'[{"bar":"a","baz":"\"01.01.1"}]']})
    return df


@pytest.fixture()
def get_expected_data():
    expected = pd.DataFrame({"col": [[r'{"bar":"a","baz":"\"01.01.1"}']]})
    return expected


@pytest.fixture()
def get_input_data_without_quote():
    df = pd.DataFrame({"foo": ['[{"bar":"a","baz":"01.01.1"}]']})
    return df


@pytest.fixture()
def get_expected_data_without_quote():
    expected = pd.DataFrame({"col": [[r'{"bar":"a","baz":"01.01.1"}']]})
    return expected


class TestDuckDBJson:
    def test_json_json_array(self, get_input_data, get_expected_data):
        # Positive test case of potential solution
        arr = [get_input_data]
        expected = get_expected_data
        for df in arr:  # noqa: F841
            con = duckdb.connect()
            actual = con.sql("""SELECT foo::JSON::JSON[] AS col FROM df""").to_df()
            print(actual.values[0], expected.values[0])
            assert actual.equals(expected)

    def test_json_array_fail(self, get_input_data, get_input_data_2):
        # Negative test case
        arr = [get_input_data, get_input_data_2]
        for df in arr:  # noqa: F841
            con = duckdb.connect()
            try:
                con.sql("""SELECT foo::json[] AS col FROM df""")
            except Exception as e:
                assert isinstance(e, ConversionException)

    def test_json_array_without_quote(self, get_input_data_without_quote, get_expected_data_without_quote):
        # Positive test case
        arr = [get_input_data_without_quote]
        expected = get_expected_data_without_quote
        for df in arr:  # noqa: F841
            con = duckdb.connect()
            actual = con.sql("""SELECT foo::JSON[] AS col FROM df""").to_df()
            print(actual.values[0], expected.values[0])
            assert actual.equals(expected)
```


### OS:

MacOS x64, Alpine x64

### DuckDB Version:

0.8.1

### DuckDB Client:

Python

### Full Name:

Timothy Lindblom

### Affiliation:

Northvolt

### Have you tried this on the latest `master` branch?

I have tested with a master build

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: 
7: 
8: 
9: <p align="center">
10:   <a href="https://github.com/duckdb/duckdb/actions">
11:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge">
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/main/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16:   <a href="https://discord.gg/tcvwpjfnZx">
17:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
18:   </a>
19:   <a href="https://github.com/duckdb/duckdb/releases/">
20:     <img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release">
21:   </a>
22: </p>
23: 
24: ## DuckDB
25: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
26: 
27: ## Installation
28: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
29: 
30: ## Data Import
31: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
32: 
33: ```sql
34: SELECT * FROM 'myfile.csv';
35: SELECT * FROM 'myfile.parquet';
36: ```
37: 
38: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
39: 
40: ## SQL Reference
41: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
42: 
43: ## Development
44: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
45: 
46: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of src/function/cast/vector_cast_helpers.cpp]
1: #include "duckdb/function/cast/vector_cast_helpers.hpp"
2: 
3: namespace duckdb {
4: 
5: // ------- Helper functions for splitting string nested types  -------
6: static bool IsNull(const char *buf, idx_t start_pos, Vector &child, idx_t row_idx) {
7: 	if (buf[start_pos] == 'N' && buf[start_pos + 1] == 'U' && buf[start_pos + 2] == 'L' && buf[start_pos + 3] == 'L') {
8: 		FlatVector::SetNull(child, row_idx, true);
9: 		return true;
10: 	}
11: 	return false;
12: }
13: 
14: inline static void SkipWhitespace(const char *buf, idx_t &pos, idx_t len) {
15: 	while (pos < len && StringUtil::CharacterIsSpace(buf[pos])) {
16: 		pos++;
17: 	}
18: }
19: 
20: static bool SkipToCloseQuotes(idx_t &pos, const char *buf, idx_t &len) {
21: 	char quote = buf[pos];
22: 	pos++;
23: 
24: 	while (pos < len) {
25: 		if (buf[pos] == quote) {
26: 			return true;
27: 		}
28: 		pos++;
29: 	}
30: 	return false;
31: }
32: 
33: static bool SkipToClose(idx_t &idx, const char *buf, idx_t &len, idx_t &lvl, char close_bracket) {
34: 	idx++;
35: 
36: 	while (idx < len) {
37: 		if (buf[idx] == '"' || buf[idx] == '\'') {
38: 			if (!SkipToCloseQuotes(idx, buf, len)) {
39: 				return false;
40: 			}
41: 		} else if (buf[idx] == '{') {
42: 			if (!SkipToClose(idx, buf, len, lvl, '}')) {
43: 				return false;
44: 			}
45: 		} else if (buf[idx] == '[') {
46: 			if (!SkipToClose(idx, buf, len, lvl, ']')) {
47: 				return false;
48: 			}
49: 			lvl++;
50: 		} else if (buf[idx] == close_bracket) {
51: 			if (close_bracket == ']') {
52: 				lvl--;
53: 			}
54: 			return true;
55: 		}
56: 		idx++;
57: 	}
58: 	return false;
59: }
60: 
61: static idx_t StringTrim(const char *buf, idx_t &start_pos, idx_t pos) {
62: 	idx_t trailing_whitespace = 0;
63: 	while (StringUtil::CharacterIsSpace(buf[pos - trailing_whitespace - 1])) {
64: 		trailing_whitespace++;
65: 	}
66: 	if ((buf[start_pos] == '"' && buf[pos - trailing_whitespace - 1] == '"') ||
67: 	    (buf[start_pos] == '\'' && buf[pos - trailing_whitespace - 1] == '\'')) {
68: 		start_pos++;
69: 		trailing_whitespace++;
70: 	}
71: 	return (pos - trailing_whitespace);
72: }
73: 
74: struct CountPartOperation {
75: 	idx_t count = 0;
76: 
77: 	bool HandleKey(const char *buf, idx_t start_pos, idx_t pos) {
78: 		count++;
79: 		return true;
80: 	}
81: 	void HandleValue(const char *buf, idx_t start_pos, idx_t pos) {
82: 		count++;
83: 	}
84: };
85: 
86: // ------- LIST SPLIT -------
87: struct SplitStringListOperation {
88: 	SplitStringListOperation(string_t *child_data, idx_t &child_start, Vector &child)
89: 	    : child_data(child_data), child_start(child_start), child(child) {
90: 	}
91: 
92: 	string_t *child_data;
93: 	idx_t &child_start;
94: 	Vector &child;
95: 
96: 	void HandleValue(const char *buf, idx_t start_pos, idx_t pos) {
97: 		if ((pos - start_pos) == 4 && IsNull(buf, start_pos, child, child_start)) {
98: 			child_start++;
99: 			return;
100: 		}
101: 		if (start_pos > pos) {
102: 			pos = start_pos;
103: 		}
104: 		child_data[child_start] = StringVector::AddString(child, buf + start_pos, pos - start_pos);
105: 		child_start++;
106: 	}
107: };
108: 
109: template <class OP>
110: static bool SplitStringListInternal(const string_t &input, OP &state) {
111: 	const char *buf = input.GetData();
112: 	idx_t len = input.GetSize();
113: 	idx_t lvl = 1;
114: 	idx_t pos = 0;
115: 	bool seen_value = false;
116: 
117: 	SkipWhitespace(buf, pos, len);
118: 	if (pos == len || buf[pos] != '[') {
119: 		return false;
120: 	}
121: 
122: 	SkipWhitespace(buf, ++pos, len);
123: 	idx_t start_pos = pos;
124: 	while (pos < len) {
125: 		if (buf[pos] == '[') {
126: 			if (!SkipToClose(pos, buf, len, ++lvl, ']')) {
127: 				return false;
128: 			}
129: 		} else if ((buf[pos] == '"' || buf[pos] == '\'') && pos == start_pos) {
130: 			SkipToCloseQuotes(pos, buf, len);
131: 		} else if (buf[pos] == '{') {
132: 			idx_t struct_lvl = 0;
133: 			SkipToClose(pos, buf, len, struct_lvl, '}');
134: 		} else if (buf[pos] == ',' || buf[pos] == ']') {
135: 			idx_t trailing_whitespace = 0;
136: 			while (StringUtil::CharacterIsSpace(buf[pos - trailing_whitespace - 1])) {
137: 				trailing_whitespace++;
138: 			}
139: 			if (buf[pos] != ']' || start_pos != pos || seen_value) {
140: 				state.HandleValue(buf, start_pos, pos - trailing_whitespace);
141: 				seen_value = true;
142: 			}
143: 			if (buf[pos] == ']') {
144: 				lvl--;
145: 				break;
146: 			}
147: 			SkipWhitespace(buf, ++pos, len);
148: 			start_pos = pos;
149: 			continue;
150: 		}
151: 		pos++;
152: 	}
153: 	SkipWhitespace(buf, ++pos, len);
154: 	return (pos == len && lvl == 0);
155: }
156: 
157: bool VectorStringToList::SplitStringList(const string_t &input, string_t *child_data, idx_t &child_start,
158:                                          Vector &child) {
159: 	SplitStringListOperation state(child_data, child_start, child);
160: 	return SplitStringListInternal<SplitStringListOperation>(input, state);
161: }
162: 
163: idx_t VectorStringToList::CountPartsList(const string_t &input) {
164: 	CountPartOperation state;
165: 	SplitStringListInternal<CountPartOperation>(input, state);
166: 	return state.count;
167: }
168: 
169: // ------- MAP SPLIT -------
170: struct SplitStringMapOperation {
171: 	SplitStringMapOperation(string_t *child_key_data, string_t *child_val_data, idx_t &child_start, Vector &varchar_key,
172: 	                        Vector &varchar_val)
173: 	    : child_key_data(child_key_data), child_val_data(child_val_data), child_start(child_start),
174: 	      varchar_key(varchar_key), varchar_val(varchar_val) {
175: 	}
176: 
177: 	string_t *child_key_data;
178: 	string_t *child_val_data;
179: 	idx_t &child_start;
180: 	Vector &varchar_key;
181: 	Vector &varchar_val;
182: 
183: 	bool HandleKey(const char *buf, idx_t start_pos, idx_t pos) {
184: 		if ((pos - start_pos) == 4 && IsNull(buf, start_pos, varchar_key, child_start)) {
185: 			FlatVector::SetNull(varchar_val, child_start, true);
186: 			child_start++;
187: 			return false;
188: 		}
189: 		child_key_data[child_start] = StringVector::AddString(varchar_key, buf + start_pos, pos - start_pos);
190: 		return true;
191: 	}
192: 
193: 	void HandleValue(const char *buf, idx_t start_pos, idx_t pos) {
194: 		if ((pos - start_pos) == 4 && IsNull(buf, start_pos, varchar_val, child_start)) {
195: 			child_start++;
196: 			return;
197: 		}
198: 		child_val_data[child_start] = StringVector::AddString(varchar_val, buf + start_pos, pos - start_pos);
199: 		child_start++;
200: 	}
201: };
202: 
203: template <class OP>
204: static bool FindKeyOrValueMap(const char *buf, idx_t len, idx_t &pos, OP &state, bool key) {
205: 	auto start_pos = pos;
206: 	idx_t lvl = 0;
207: 	while (pos < len) {
208: 		if (buf[pos] == '"' || buf[pos] == '\'') {
209: 			SkipToCloseQuotes(pos, buf, len);
210: 		} else if (buf[pos] == '{') {
211: 			SkipToClose(pos, buf, len, lvl, '}');
212: 		} else if (buf[pos] == '[') {
213: 			SkipToClose(pos, buf, len, lvl, ']');
214: 		} else if (key && buf[pos] == '=') {
215: 			idx_t end_pos = StringTrim(buf, start_pos, pos);
216: 			return state.HandleKey(buf, start_pos, end_pos); // put string in KEY_child_vector
217: 		} else if (!key && (buf[pos] == ',' || buf[pos] == '}')) {
218: 			idx_t end_pos = StringTrim(buf, start_pos, pos);
219: 			state.HandleValue(buf, start_pos, end_pos); // put string in VALUE_child_vector
220: 			return true;
221: 		}
222: 		pos++;
223: 	}
224: 	return false;
225: }
226: 
227: template <class OP>
228: static bool SplitStringMapInternal(const string_t &input, OP &state) {
229: 	const char *buf = input.GetData();
230: 	idx_t len = input.GetSize();
231: 	idx_t pos = 0;
232: 
233: 	SkipWhitespace(buf, pos, len);
234: 	if (pos == len || buf[pos] != '{') {
235: 		return false;
236: 	}
237: 	SkipWhitespace(buf, ++pos, len);
238: 	if (pos == len) {
239: 		return false;
240: 	}
241: 	if (buf[pos] == '}') {
242: 		SkipWhitespace(buf, ++pos, len);
243: 		return (pos == len);
244: 	}
245: 	while (pos < len) {
246: 		if (!FindKeyOrValueMap(buf, len, pos, state, true)) {
247: 			return false;
248: 		}
249: 		SkipWhitespace(buf, ++pos, len);
250: 		if (!FindKeyOrValueMap(buf, len, pos, state, false)) {
251: 			return false;
252: 		}
253: 		SkipWhitespace(buf, ++pos, len);
254: 	}
255: 	return true;
256: }
257: 
258: bool VectorStringToMap::SplitStringMap(const string_t &input, string_t *child_key_data, string_t *child_val_data,
259:                                        idx_t &child_start, Vector &varchar_key, Vector &varchar_val) {
260: 	SplitStringMapOperation state(child_key_data, child_val_data, child_start, varchar_key, varchar_val);
261: 	return SplitStringMapInternal<SplitStringMapOperation>(input, state);
262: }
263: 
264: idx_t VectorStringToMap::CountPartsMap(const string_t &input) {
265: 	CountPartOperation state;
266: 	SplitStringMapInternal<CountPartOperation>(input, state);
267: 	return state.count;
268: }
269: 
270: // ------- STRUCT SPLIT -------
271: static bool FindKeyStruct(const char *buf, idx_t len, idx_t &pos) {
272: 	while (pos < len) {
273: 		if (buf[pos] == ':') {
274: 			return true;
275: 		}
276: 		pos++;
277: 	}
278: 	return false;
279: }
280: 
281: static bool FindValueStruct(const char *buf, idx_t len, idx_t &pos, Vector &varchar_child, idx_t &row_idx,
282:                             ValidityMask *child_mask) {
283: 	auto start_pos = pos;
284: 	idx_t lvl = 0;
285: 	while (pos < len) {
286: 		if (buf[pos] == '"' || buf[pos] == '\'') {
287: 			SkipToCloseQuotes(pos, buf, len);
288: 		} else if (buf[pos] == '{') {
289: 			SkipToClose(pos, buf, len, lvl, '}');
290: 		} else if (buf[pos] == '[') {
291: 			SkipToClose(pos, buf, len, lvl, ']');
292: 		} else if (buf[pos] == ',' || buf[pos] == '}') {
293: 			idx_t end_pos = StringTrim(buf, start_pos, pos);
294: 			if ((end_pos - start_pos) == 4 && IsNull(buf, start_pos, varchar_child, row_idx)) {
295: 				return true;
296: 			}
297: 			FlatVector::GetData<string_t>(varchar_child)[row_idx] =
298: 			    StringVector::AddString(varchar_child, buf + start_pos, end_pos - start_pos);
299: 			child_mask->SetValid(row_idx); // any child not set to valid will remain invalid
300: 			return true;
301: 		}
302: 		pos++;
303: 	}
304: 	return false;
305: }
306: 
307: bool VectorStringToStruct::SplitStruct(const string_t &input, vector<unique_ptr<Vector>> &varchar_vectors,
308:                                        idx_t &row_idx, string_map_t<idx_t> &child_names,
309:                                        vector<ValidityMask *> &child_masks) {
310: 	const char *buf = input.GetData();
311: 	idx_t len = input.GetSize();
312: 	idx_t pos = 0;
313: 	idx_t child_idx;
314: 
315: 	SkipWhitespace(buf, pos, len);
316: 	if (pos == len || buf[pos] != '{') {
317: 		return false;
318: 	}
319: 	SkipWhitespace(buf, ++pos, len);
320: 	if (buf[pos] == '}') {
321: 		pos++;
322: 	} else {
323: 		while (pos < len) {
324: 			auto key_start = pos;
325: 			if (!FindKeyStruct(buf, len, pos)) {
326: 				return false;
327: 			}
328: 			auto key_end = StringTrim(buf, key_start, pos);
329: 			string_t found_key(buf + key_start, key_end - key_start);
330: 
331: 			auto it = child_names.find(found_key);
332: 			if (it == child_names.end()) {
333: 				return false; // false key
334: 			}
335: 			child_idx = it->second;
336: 			SkipWhitespace(buf, ++pos, len);
337: 			if (!FindValueStruct(buf, len, pos, *varchar_vectors[child_idx], row_idx, child_masks[child_idx])) {
338: 				return false;
339: 			}
340: 			SkipWhitespace(buf, ++pos, len);
341: 		}
342: 	}
343: 	SkipWhitespace(buf, pos, len);
344: 	return (pos == len);
345: }
346: 
347: } // namespace duckdb
[end of src/function/cast/vector_cast_helpers.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: