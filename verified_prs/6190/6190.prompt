You will be provided with a partial code base and an issue statement explaining a problem to resolve.

<issue>
Check constraint using nested lambda functions error
### What happens?

When creating a check constraint on a table, using nested lambdas, an error is thrown.

I ran into this when adding support for lambdas to generated columns, I investigated it a little already:

It dies because the bound reference expressions are messed up, but it's not just a wrong index, the entire column it needs is missing.
this is missing the `j` column, which is needed by the expression.
j: `[4,8,6,1,2,4,5,8,5]`

```sql
list_count(list_filter(j, y -> y%2=0)) + x
```
``` Chunk - [4 Columns]
- FLAT BIGINT: 7 = [ 5, 6, 13, 3, 4, 42, 7]
- FLAT INTEGER: 7 = [ 2, 2, 2, 2, 2, 2, 2]
- FLAT INTEGER: 7 = [ 0, 0, 0, 0, 0, 0, 0]
- FLAT VARCHAR: 7 = [ count, count, count, count, count, count, count] 
```

The bound expression shows as:
`(list_aggr(list_filter(#1, #1, #2), #3) + #0)`

### To Reproduce

```sql

statement ok
create table lambda_check (
	i BIGINT[],
	j BIGINT[],
	CHECK ((list_apply(
		i,
		x -> list_count(
				list_filter(j, y -> y%2=0)
		) + x
	)) == [])
)

statement ok
insert into lambda_check values ([5,6,13,3,4,42,7], [4,8,6,1,2,4,5,8,5])
```
```
Constraint Error: CHECK constraint failed: lambda_check (Error: INTERNAL Error: Assertion triggered in file "/Users/thijs/DuckDBLabs/duckdb/src/common/types/vector.cpp" on line 98: other.GetType() == GetType())
```

### OS:

MacOS

### DuckDB Version:

master

### DuckDB Client:

unittest

### Full Name:

Thijs Bruineman

### Affiliation:

DuckDB Labs

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree
</issue>

I need you to solve the provided issue by generating a code fix that can be applied directly to the repository

Respond below:
