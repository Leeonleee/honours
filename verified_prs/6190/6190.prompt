You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Check constraint using nested lambda functions error
### What happens?

When creating a check constraint on a table, using nested lambdas, an error is thrown.

I ran into this when adding support for lambdas to generated columns, I investigated it a little already:

It dies because the bound reference expressions are messed up, but it's not just a wrong index, the entire column it needs is missing.
this is missing the `j` column, which is needed by the expression.
j: `[4,8,6,1,2,4,5,8,5]`

```sql
list_count(list_filter(j, y -> y%2=0)) + x
```
``` Chunk - [4 Columns]
- FLAT BIGINT: 7 = [ 5, 6, 13, 3, 4, 42, 7]
- FLAT INTEGER: 7 = [ 2, 2, 2, 2, 2, 2, 2]
- FLAT INTEGER: 7 = [ 0, 0, 0, 0, 0, 0, 0]
- FLAT VARCHAR: 7 = [ count, count, count, count, count, count, count] 
```

The bound expression shows as:
`(list_aggr(list_filter(#1, #1, #2), #3) + #0)`

### To Reproduce

```sql

statement ok
create table lambda_check (
	i BIGINT[],
	j BIGINT[],
	CHECK ((list_apply(
		i,
		x -> list_count(
				list_filter(j, y -> y%2=0)
		) + x
	)) == [])
)

statement ok
insert into lambda_check values ([5,6,13,3,4,42,7], [4,8,6,1,2,4,5,8,5])
```
```
Constraint Error: CHECK constraint failed: lambda_check (Error: INTERNAL Error: Assertion triggered in file "/Users/thijs/DuckDBLabs/duckdb/src/common/types/vector.cpp" on line 98: other.GetType() == GetType())
```

### OS:

MacOS

### DuckDB Version:

master

### DuckDB Client:

unittest

### Full Name:

Thijs Bruineman

### Affiliation:

DuckDB Labs

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=master" alt="Github Actions Badge">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16:   <a href="https://discord.gg/tcvwpjfnZx">
17:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of src/parser/column_definition.cpp]
1: #include "duckdb/parser/column_definition.hpp"
2: #include "duckdb/common/field_writer.hpp"
3: #include "duckdb/parser/parsed_expression_iterator.hpp"
4: #include "duckdb/parser/expression/columnref_expression.hpp"
5: #include "duckdb/parser/parsed_data/alter_table_info.hpp"
6: #include "duckdb/parser/expression/cast_expression.hpp"
7: 
8: namespace duckdb {
9: 
10: ColumnDefinition::ColumnDefinition(string name_p, LogicalType type_p)
11:     : name(std::move(name_p)), type(std::move(type_p)) {
12: }
13: 
14: ColumnDefinition::ColumnDefinition(string name_p, LogicalType type_p, unique_ptr<ParsedExpression> expression,
15:                                    TableColumnType category)
16:     : name(std::move(name_p)), type(std::move(type_p)), category(category) {
17: 	switch (category) {
18: 	case TableColumnType::STANDARD: {
19: 		default_value = std::move(expression);
20: 		break;
21: 	}
22: 	case TableColumnType::GENERATED: {
23: 		generated_expression = std::move(expression);
24: 		break;
25: 	}
26: 	default: {
27: 		throw InternalException("Type not implemented for TableColumnType");
28: 	}
29: 	}
30: }
31: 
32: ColumnDefinition ColumnDefinition::Copy() const {
33: 	ColumnDefinition copy(name, type);
34: 	copy.oid = oid;
35: 	copy.storage_oid = storage_oid;
36: 	copy.SetDefaultValue(default_value ? default_value->Copy() : nullptr);
37: 	copy.generated_expression = generated_expression ? generated_expression->Copy() : nullptr;
38: 	copy.compression_type = compression_type;
39: 	copy.category = category;
40: 	return copy;
41: }
42: 
43: void ColumnDefinition::Serialize(Serializer &serializer) const {
44: 	FieldWriter writer(serializer);
45: 	writer.WriteString(name);
46: 	writer.WriteSerializable(type);
47: 	if (Generated()) {
48: 		writer.WriteOptional(generated_expression);
49: 	} else {
50: 		writer.WriteOptional(default_value);
51: 	}
52: 	writer.WriteField<TableColumnType>(category);
53: 	writer.Finalize();
54: }
55: 
56: ColumnDefinition ColumnDefinition::Deserialize(Deserializer &source) {
57: 	FieldReader reader(source);
58: 	auto column_name = reader.ReadRequired<string>();
59: 	auto column_type = reader.ReadRequiredSerializable<LogicalType, LogicalType>();
60: 	auto expression = reader.ReadOptional<ParsedExpression>(nullptr);
61: 	auto category = reader.ReadField<TableColumnType>(TableColumnType::STANDARD);
62: 	reader.Finalize();
63: 
64: 	switch (category) {
65: 	case TableColumnType::STANDARD:
66: 		return ColumnDefinition(column_name, column_type, std::move(expression), TableColumnType::STANDARD);
67: 	case TableColumnType::GENERATED:
68: 		return ColumnDefinition(column_name, column_type, std::move(expression), TableColumnType::GENERATED);
69: 	default:
70: 		throw NotImplementedException("Type not implemented for TableColumnType");
71: 	}
72: }
73: 
74: const unique_ptr<ParsedExpression> &ColumnDefinition::DefaultValue() const {
75: 	return default_value;
76: }
77: 
78: void ColumnDefinition::SetDefaultValue(unique_ptr<ParsedExpression> default_value) {
79: 	this->default_value = std::move(default_value);
80: }
81: 
82: const LogicalType &ColumnDefinition::Type() const {
83: 	return type;
84: }
85: 
86: LogicalType &ColumnDefinition::TypeMutable() {
87: 	return type;
88: }
89: 
90: void ColumnDefinition::SetType(const LogicalType &type) {
91: 	this->type = type;
92: }
93: 
94: const string &ColumnDefinition::Name() const {
95: 	return name;
96: }
97: 
98: void ColumnDefinition::SetName(const string &name) {
99: 	this->name = name;
100: }
101: 
102: const duckdb::CompressionType &ColumnDefinition::CompressionType() const {
103: 	return compression_type;
104: }
105: 
106: void ColumnDefinition::SetCompressionType(duckdb::CompressionType compression_type) {
107: 	this->compression_type = compression_type;
108: }
109: 
110: const storage_t &ColumnDefinition::StorageOid() const {
111: 	return storage_oid;
112: }
113: 
114: LogicalIndex ColumnDefinition::Logical() const {
115: 	return LogicalIndex(oid);
116: }
117: 
118: PhysicalIndex ColumnDefinition::Physical() const {
119: 	return PhysicalIndex(storage_oid);
120: }
121: 
122: void ColumnDefinition::SetStorageOid(storage_t storage_oid) {
123: 	this->storage_oid = storage_oid;
124: }
125: 
126: const column_t &ColumnDefinition::Oid() const {
127: 	return oid;
128: }
129: 
130: void ColumnDefinition::SetOid(column_t oid) {
131: 	this->oid = oid;
132: }
133: 
134: const TableColumnType &ColumnDefinition::Category() const {
135: 	return category;
136: }
137: 
138: bool ColumnDefinition::Generated() const {
139: 	return category == TableColumnType::GENERATED;
140: }
141: 
142: //===--------------------------------------------------------------------===//
143: // Generated Columns (VIRTUAL)
144: //===--------------------------------------------------------------------===//
145: 
146: static void VerifyColumnRefs(ParsedExpression &expr) {
147: 	if (expr.type == ExpressionType::COLUMN_REF) {
148: 		auto &column_ref = (ColumnRefExpression &)expr;
149: 		if (column_ref.IsQualified()) {
150: 			throw ParserException(
151: 			    "Qualified (tbl.name) column references are not allowed inside of generated column expressions");
152: 		}
153: 	}
154: 	ParsedExpressionIterator::EnumerateChildren(
155: 	    expr, [&](const ParsedExpression &child) { VerifyColumnRefs((ParsedExpression &)child); });
156: }
157: 
158: static void InnerGetListOfDependencies(ParsedExpression &expr, vector<string> &dependencies) {
159: 	if (expr.type == ExpressionType::COLUMN_REF) {
160: 		auto columnref = (ColumnRefExpression &)expr;
161: 		auto &name = columnref.GetColumnName();
162: 		dependencies.push_back(name);
163: 	}
164: 	ParsedExpressionIterator::EnumerateChildren(expr, [&](const ParsedExpression &child) {
165: 		InnerGetListOfDependencies((ParsedExpression &)child, dependencies);
166: 	});
167: }
168: 
169: void ColumnDefinition::GetListOfDependencies(vector<string> &dependencies) const {
170: 	D_ASSERT(Generated());
171: 	InnerGetListOfDependencies(*generated_expression, dependencies);
172: }
173: 
174: string ColumnDefinition::GetName() const {
175: 	return name;
176: }
177: 
178: LogicalType ColumnDefinition::GetType() const {
179: 	return type;
180: }
181: 
182: void ColumnDefinition::SetGeneratedExpression(unique_ptr<ParsedExpression> expression) {
183: 	category = TableColumnType::GENERATED;
184: 
185: 	if (expression->HasSubquery()) {
186: 		throw ParserException("Expression of generated column \"%s\" contains a subquery, which isn't allowed", name);
187: 	}
188: 
189: 	VerifyColumnRefs(*expression);
190: 	if (type.id() == LogicalTypeId::ANY) {
191: 		generated_expression = std::move(expression);
192: 		return;
193: 	}
194: 	// Always wrap the expression in a cast, that way we can always update the cast when we change the type
195: 	// Except if the type is LogicalType::ANY (no type specified)
196: 	generated_expression = make_unique_base<ParsedExpression, CastExpression>(type, std::move(expression));
197: }
198: 
199: void ColumnDefinition::ChangeGeneratedExpressionType(const LogicalType &type) {
200: 	D_ASSERT(Generated());
201: 	// First time the type is set, add a cast around the expression
202: 	D_ASSERT(this->type.id() == LogicalTypeId::ANY);
203: 	generated_expression = make_unique_base<ParsedExpression, CastExpression>(type, std::move(generated_expression));
204: 	// Every generated expression should be wrapped in a cast on creation
205: 	// D_ASSERT(generated_expression->type == ExpressionType::OPERATOR_CAST);
206: 	// auto &cast_expr = (CastExpression &)*generated_expression;
207: 	// auto base_expr = std::move(cast_expr.child);
208: 	// generated_expression = make_unique_base<ParsedExpression, CastExpression>(type, std::move(base_expr));
209: }
210: 
211: const ParsedExpression &ColumnDefinition::GeneratedExpression() const {
212: 	D_ASSERT(Generated());
213: 	return *generated_expression;
214: }
215: 
216: ParsedExpression &ColumnDefinition::GeneratedExpressionMutable() {
217: 	D_ASSERT(Generated());
218: 	return *generated_expression;
219: }
220: 
221: } // namespace duckdb
[end of src/parser/column_definition.cpp]
[start of src/planner/expression_binder/check_binder.cpp]
1: #include "duckdb/planner/expression_binder/check_binder.hpp"
2: 
3: #include "duckdb/parser/expression/columnref_expression.hpp"
4: #include "duckdb/planner/expression/bound_reference_expression.hpp"
5: 
6: namespace duckdb {
7: 
8: CheckBinder::CheckBinder(Binder &binder, ClientContext &context, string table_p, const ColumnList &columns,
9:                          physical_index_set_t &bound_columns)
10:     : ExpressionBinder(binder, context), table(std::move(table_p)), columns(columns), bound_columns(bound_columns) {
11: 	target_type = LogicalType::INTEGER;
12: }
13: 
14: BindResult CheckBinder::BindExpression(unique_ptr<ParsedExpression> *expr_ptr, idx_t depth, bool root_expression) {
15: 	auto &expr = **expr_ptr;
16: 	switch (expr.GetExpressionClass()) {
17: 	case ExpressionClass::WINDOW:
18: 		return BindResult("window functions are not allowed in check constraints");
19: 	case ExpressionClass::SUBQUERY:
20: 		return BindResult("cannot use subquery in check constraint");
21: 	case ExpressionClass::COLUMN_REF:
22: 		return BindCheckColumn((ColumnRefExpression &)expr);
23: 	default:
24: 		return ExpressionBinder::BindExpression(expr_ptr, depth);
25: 	}
26: }
27: 
28: string CheckBinder::UnsupportedAggregateMessage() {
29: 	return "aggregate functions are not allowed in check constraints";
30: }
31: 
32: BindResult ExpressionBinder::BindQualifiedColumnName(ColumnRefExpression &colref, const string &table_name) {
33: 	idx_t struct_start = 0;
34: 	if (colref.column_names[0] == table_name) {
35: 		struct_start++;
36: 	}
37: 	auto result = make_unique_base<ParsedExpression, ColumnRefExpression>(colref.column_names.back());
38: 	for (idx_t i = struct_start; i + 1 < colref.column_names.size(); i++) {
39: 		result = CreateStructExtract(std::move(result), colref.column_names[i]);
40: 	}
41: 	return BindExpression(&result, 0);
42: }
43: 
44: BindResult CheckBinder::BindCheckColumn(ColumnRefExpression &colref) {
45: 	if (colref.column_names.size() > 1) {
46: 		return BindQualifiedColumnName(colref, table);
47: 	}
48: 	if (!columns.ColumnExists(colref.column_names[0])) {
49: 		throw BinderException("Table does not contain column %s referenced in check constraint!",
50: 		                      colref.column_names[0]);
51: 	}
52: 	auto &col = columns.GetColumn(colref.column_names[0]);
53: 	if (col.Generated()) {
54: 		auto bound_expression = col.GeneratedExpression().Copy();
55: 		return BindExpression(&bound_expression, 0, false);
56: 	}
57: 	bound_columns.insert(col.Physical());
58: 	D_ASSERT(col.StorageOid() != DConstants::INVALID_INDEX);
59: 	return BindResult(make_unique<BoundReferenceExpression>(col.Type(), col.StorageOid()));
60: }
61: 
62: } // namespace duckdb
[end of src/planner/expression_binder/check_binder.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: