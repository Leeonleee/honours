{
  "repo": "duckdb/duckdb",
  "pull_number": 6190,
  "instance_id": "duckdb__duckdb-6190",
  "issue_numbers": [
    "5816"
  ],
  "base_commit": "c0907528a318036cdd1a12de9dbd26bd7a354ef6",
  "patch": "diff --git a/src/parser/column_definition.cpp b/src/parser/column_definition.cpp\nindex cd1f57b073cf..f6f5cc6bc43f 100644\n--- a/src/parser/column_definition.cpp\n+++ b/src/parser/column_definition.cpp\n@@ -162,6 +162,9 @@ static void InnerGetListOfDependencies(ParsedExpression &expr, vector<string> &d\n \t\tdependencies.push_back(name);\n \t}\n \tParsedExpressionIterator::EnumerateChildren(expr, [&](const ParsedExpression &child) {\n+\t\tif (expr.type == ExpressionType::LAMBDA) {\n+\t\t\tthrow NotImplementedException(\"Lambda functions are currently not supported in generated columns.\");\n+\t\t}\n \t\tInnerGetListOfDependencies((ParsedExpression &)child, dependencies);\n \t});\n }\ndiff --git a/src/planner/expression_binder/check_binder.cpp b/src/planner/expression_binder/check_binder.cpp\nindex 2974867af13d..4ecf55103333 100644\n--- a/src/planner/expression_binder/check_binder.cpp\n+++ b/src/planner/expression_binder/check_binder.cpp\n@@ -1,5 +1,6 @@\n #include \"duckdb/planner/expression_binder/check_binder.hpp\"\n \n+#include \"duckdb/planner/table_binding.hpp\"\n #include \"duckdb/parser/expression/columnref_expression.hpp\"\n #include \"duckdb/planner/expression/bound_reference_expression.hpp\"\n \n@@ -42,6 +43,19 @@ BindResult ExpressionBinder::BindQualifiedColumnName(ColumnRefExpression &colref\n }\n \n BindResult CheckBinder::BindCheckColumn(ColumnRefExpression &colref) {\n+\n+\t// if this is a lambda parameters, then we temporarily add a BoundLambdaRef,\n+\t// which we capture and remove later\n+\tif (lambda_bindings) {\n+\t\tfor (idx_t i = 0; i < lambda_bindings->size(); i++) {\n+\t\t\tif (colref.GetColumnName() == (*lambda_bindings)[i].dummy_name) {\n+\t\t\t\t// FIXME: support lambdas in CHECK constraints\n+\t\t\t\t// FIXME: like so: return (*lambda_bindings)[i].Bind(colref, i, depth);\n+\t\t\t\tthrow NotImplementedException(\"Lambda functions are currently not supported in CHECK constraints.\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \tif (colref.column_names.size() > 1) {\n \t\treturn BindQualifiedColumnName(colref, table);\n \t}\n",
  "test_patch": "diff --git a/test/sql/function/list/lambdas/incorrect.test b/test/sql/function/list/lambdas/incorrect.test\nindex c9eb8338b9c1..ed2a0861cf21 100644\n--- a/test/sql/function/list/lambdas/incorrect.test\n+++ b/test/sql/function/list/lambdas/incorrect.test\n@@ -106,4 +106,44 @@ statement error\n SELECT cos(x -> x + 1)\n \n statement error\n-SELECT cos([1], x -> x + 1)\n\\ No newline at end of file\n+SELECT cos([1], x -> x + 1)\n+\n+# don't allow lambdas in check constraints\n+# FIXME: support lambdas in CHECK constraints\n+\n+statement error\n+create table lambda_check (i BIGINT[],\n+    CHECK (list_filter(i, x -> x % 2 = 0) == []));\n+----\n+Not implemented Error: Lambda functions are currently not supported in CHECK constraints.\n+\n+statement error\n+create table lambda_check (i BIGINT[],\n+    CHECK (list_transform(i, x -> x % 2) == []));\n+----\n+Not implemented Error: Lambda functions are currently not supported in CHECK constraints.\n+\n+statement error\n+create table lambda_check (i BIGINT[],\n+    CHECK ([x + 1 for x in i if i > 0] == []));\n+----\n+Not implemented Error: Lambda functions are currently not supported in CHECK constraints.\n+\n+statement error\n+create table lambda_check (\n+\ti BIGINT[],\n+\tj BIGINT[],\n+\tCHECK ((list_apply(i, x -> list_count(list_filter(j, y -> y%2=0)) + x)) == []));\n+----\n+Not implemented Error: Lambda functions are currently not supported in CHECK constraints.\n+\n+# don't allow lambdas in check constraints\n+# FIXME: allow lambdas in generated columns\n+\n+statement error\n+CREATE TABLE unit2(\n+\tprice INTEGER[],\n+\ttotal_price INTEGER GENERATED ALWAYS AS (list_transform(price, x -> x + 1)) VIRTUAL\n+);\n+----\n+Not implemented Error: Lambda functions are currently not supported in generated columns.\n\\ No newline at end of file\ndiff --git a/test/sql/function/list/lambdas/transform.test b/test/sql/function/list/lambdas/transform.test\nindex 5a70478404be..1981634f0e35 100644\n--- a/test/sql/function/list/lambdas/transform.test\n+++ b/test/sql/function/list/lambdas/transform.test\n@@ -286,4 +286,24 @@ from (select list(b) over wind as bb, first(b) over wind as b\n [[3, 3], [4, 3], [2, 3], [3, 3], [4, 3]]\t[3, 4, 2, 3, 4]\t3\n [[4, 4], [2, 4], [3, 4], [4, 4], [2, 4]]\t[4, 2, 3, 4, 2]\t4\n [[2, 2], [3, 2], [4, 2], [2, 2], [3, 2]]\t[2, 3, 4, 2, 3]\t2\n-[[3, 3], [4, 3], [2, 3], [3, 3], [4, 3]]\t[3, 4, 2, 3, 4]\t3\n\\ No newline at end of file\n+[[3, 3], [4, 3], [2, 3], [3, 3], [4, 3]]\t[3, 4, 2, 3, 4]\t3\n+\n+query I\n+SELECT list_transform([[2, 3], [4]], x -> list_transform([42], y -> y + 1))\n+----\n+[[43], [43]]\n+\n+query I\n+SELECT list_transform([[2, 3], [4]], x -> list_transform(x, y -> y + 1))\n+----\n+[[3, 4], [5]]\n+\n+query I\n+SELECT list_transform([[2, 3], [4]], x -> list_transform([1], y -> x || [y]))\n+----\n+[[[2, 3, 1]], [[4, 1]]]\n+\n+query I\n+SELECT list_transform([[2, 3], [4]], x -> list_transform(x, y -> x || [y]))\n+----\n+[[[2, 3, 2], [2, 3, 3]], [[4, 4]]]\n\\ No newline at end of file\n",
  "problem_statement": "Check constraint using nested lambda functions error\n### What happens?\r\n\r\nWhen creating a check constraint on a table, using nested lambdas, an error is thrown.\r\n\r\nI ran into this when adding support for lambdas to generated columns, I investigated it a little already:\r\n\r\nIt dies because the bound reference expressions are messed up, but it's not just a wrong index, the entire column it needs is missing.\r\nthis is missing the `j` column, which is needed by the expression.\r\nj: `[4,8,6,1,2,4,5,8,5]`\r\n\r\n```sql\r\nlist_count(list_filter(j, y -> y%2=0)) + x\r\n```\r\n```\u2028Chunk - [4 Columns]\r\n- FLAT BIGINT: 7 = [ 5, 6, 13, 3, 4, 42, 7]\r\n- FLAT INTEGER: 7 = [ 2, 2, 2, 2, 2, 2, 2]\r\n- FLAT INTEGER: 7 = [ 0, 0, 0, 0, 0, 0, 0]\r\n- FLAT VARCHAR: 7 = [ count, count, count, count, count, count, count]\u2028\r\n```\r\n\r\nThe bound expression shows as:\r\n`(list_aggr(list_filter(#1, #1, #2), #3) + #0)`\r\n\r\n### To Reproduce\r\n\r\n```sql\r\n\r\nstatement ok\r\ncreate table lambda_check (\r\n\ti BIGINT[],\r\n\tj BIGINT[],\r\n\tCHECK ((list_apply(\r\n\t\ti,\r\n\t\tx -> list_count(\r\n\t\t\t\tlist_filter(j, y -> y%2=0)\r\n\t\t) + x\r\n\t)) == [])\r\n)\r\n\r\nstatement ok\r\ninsert into lambda_check values ([5,6,13,3,4,42,7], [4,8,6,1,2,4,5,8,5])\r\n```\r\n```\r\nConstraint Error: CHECK constraint failed: lambda_check (Error: INTERNAL Error: Assertion triggered in file \"/Users/thijs/DuckDBLabs/duckdb/src/common/types/vector.cpp\" on line 98: other.GetType() == GetType())\r\n```\r\n\r\n### OS:\r\n\r\nMacOS\r\n\r\n### DuckDB Version:\r\n\r\nmaster\r\n\r\n### DuckDB Client:\r\n\r\nunittest\r\n\r\n### Full Name:\r\n\r\nThijs Bruineman\r\n\r\n### Affiliation:\r\n\r\nDuckDB Labs\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "Ah the issue is actually:\r\n`Binder Error: Table does not contain column x referenced in check constraint!`\r\n\r\nI attempted to fix this in the CheckBinder, and that's probably the reason it throws the error I mentioned in the post.\r\n\r\nI added:\r\n```c++\r\nbool IsLambdaBinding(vector<DummyBinding> *lambda_bindings_p, ColumnRefExpression &colref) {\r\n\tif (!lambda_bindings_p) {\r\n\t\treturn false;\r\n\t}\r\n\tauto &lambda_bindings = *lambda_bindings_p;\r\n\tfor (auto &binding : lambda_bindings) {\r\n\t\tif (binding.name_map.count(colref.GetColumnName())) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n\treturn false;\r\n}\r\n```\r\nand added it to the CheckBinder::BindCheckColumn\r\n```c++\r\n\tif (IsLambdaBinding(lambda_bindings, colref)) {\r\n\t\t// Found a lambda parameter!\r\n\t\treturn ExpressionBinder::BindExpression(colref, depth);\r\n\t}\r\n```\nWhile investigating, I found this. Will add it here and probably fix both bugs together.\r\n```sql\r\nstatement ok\r\ncreate table lambdas AS SELECT [5,6] AS col1, [4,8] AS col2;\r\n\r\nquery I\r\nSELECT list_apply(col1, x -> list_filter(col2, y -> y)) from lambdas;\r\n```\r\n\r\n```\r\n/Users/tania/DuckDB/duckdb/src/function/scalar/list/list_lambdas.cpp:74:8: runtime error: load of value 4, which is not a valid value for type 'bool'\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior /Users/tania/DuckDB/duckdb/src/function/scalar/list/list_lambdas.cpp:74:8 in \r\nzsh: abort      build/debug/duckdb\r\n```\nAs for the lambdas in check constraints, I will open a PR to throw a binder exception and add a FIXME. Except for @Tishj nobody uses lambdas in that way, afaik at the moment. I looked a bit into this, and it does not seem to be a trivial fix. We can cross that bridge when we come to it.\nThat kind of means we cant have lambas in generated columns\nI think both of those are reasonable restrictions for now",
  "created_at": "2023-02-10T09:25:51Z",
  "modified_files": [
    "src/parser/column_definition.cpp",
    "src/planner/expression_binder/check_binder.cpp"
  ]
}