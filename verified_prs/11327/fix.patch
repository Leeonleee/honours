diff --git a/src/execution/operator/schema/physical_attach.cpp b/src/execution/operator/schema/physical_attach.cpp
index 2c2b76a0fc11..c60e9b756d13 100644
--- a/src/execution/operator/schema/physical_attach.cpp
+++ b/src/execution/operator/schema/physical_attach.cpp
@@ -99,7 +99,7 @@ SourceResultType PhysicalAttach::GetData(ExecutionContext &context, DataChunk &c
 	// get the database type and attach the database
 	db_manager.GetDatabaseType(context.client, db_type, *info, config, unrecognized_option);
 	auto attached_db = db_manager.AttachDatabase(context.client, *info, db_type, access_mode);
-	attached_db->Initialize();
+	attached_db->Initialize(&context.client);
 	return SourceResultType::FINISHED;
 }
 
diff --git a/src/include/duckdb/main/attached_database.hpp b/src/include/duckdb/main/attached_database.hpp
index 63d9868416ba..a66217d46585 100644
--- a/src/include/duckdb/main/attached_database.hpp
+++ b/src/include/duckdb/main/attached_database.hpp
@@ -43,7 +43,7 @@ class AttachedDatabase : public CatalogEntry {
 	                 const AttachInfo &info, AccessMode access_mode);
 	~AttachedDatabase() override;
 
-	void Initialize();
+	void Initialize(optional_ptr<ClientContext> context = nullptr);
 	void Close();
 
 	Catalog &ParentCatalog() override;
diff --git a/src/include/duckdb/storage/checkpoint_manager.hpp b/src/include/duckdb/storage/checkpoint_manager.hpp
index d434e50d3b63..1c456c10c4a6 100644
--- a/src/include/duckdb/storage/checkpoint_manager.hpp
+++ b/src/include/duckdb/storage/checkpoint_manager.hpp
@@ -80,7 +80,7 @@ class SingleFileCheckpointReader final : public CheckpointReader {
 	    : CheckpointReader(Catalog::GetCatalog(storage.GetAttached())), storage(storage) {
 	}
 
-	void LoadFromStorage();
+	void LoadFromStorage(optional_ptr<ClientContext> context = nullptr);
 	MetadataManager &GetMetadataManager();
 
 	//! The database
diff --git a/src/include/duckdb/storage/storage_manager.hpp b/src/include/duckdb/storage/storage_manager.hpp
index 0f5ffeb2f8e8..91fc96755719 100644
--- a/src/include/duckdb/storage/storage_manager.hpp
+++ b/src/include/duckdb/storage/storage_manager.hpp
@@ -46,7 +46,7 @@ class StorageManager {
 	static StorageManager &Get(Catalog &catalog);
 
 	//! Initialize a database or load an existing database from the given path
-	void Initialize();
+	void Initialize(optional_ptr<ClientContext> context);
 
 	DatabaseInstance &GetDatabase();
 	AttachedDatabase &GetAttached() {
@@ -73,7 +73,7 @@ class StorageManager {
 	virtual shared_ptr<TableIOManager> GetTableIOManager(BoundCreateTableInfo *info) = 0;
 
 protected:
-	virtual void LoadDatabase() = 0;
+	virtual void LoadDatabase(optional_ptr<ClientContext> context = nullptr) = 0;
 
 protected:
 	//! The database this storage manager belongs to
@@ -121,6 +121,6 @@ class SingleFileStorageManager : public StorageManager {
 	shared_ptr<TableIOManager> GetTableIOManager(BoundCreateTableInfo *info) override;
 
 protected:
-	void LoadDatabase() override;
+	void LoadDatabase(optional_ptr<ClientContext> context = nullptr) override;
 };
 } // namespace duckdb
diff --git a/src/main/attached_database.cpp b/src/main/attached_database.cpp
index d9a287ef86e4..b323b81f9e5b 100644
--- a/src/main/attached_database.cpp
+++ b/src/main/attached_database.cpp
@@ -96,14 +96,14 @@ string AttachedDatabase::ExtractDatabaseName(const string &dbpath, FileSystem &f
 	return name;
 }
 
-void AttachedDatabase::Initialize() {
+void AttachedDatabase::Initialize(optional_ptr<ClientContext> context) {
 	if (IsSystem()) {
 		catalog->Initialize(true);
 	} else {
 		catalog->Initialize(false);
 	}
 	if (storage) {
-		storage->Initialize();
+		storage->Initialize(context);
 	}
 }
 
diff --git a/src/storage/checkpoint_manager.cpp b/src/storage/checkpoint_manager.cpp
index 1f97b538ff80..574fc0660d1b 100644
--- a/src/storage/checkpoint_manager.cpp
+++ b/src/storage/checkpoint_manager.cpp
@@ -229,7 +229,7 @@ MetadataManager &SingleFileCheckpointReader::GetMetadataManager() {
 	return storage.block_manager->GetMetadataManager();
 }
 
-void SingleFileCheckpointReader::LoadFromStorage() {
+void SingleFileCheckpointReader::LoadFromStorage(optional_ptr<ClientContext> context) {
 	auto &block_manager = *storage.block_manager;
 	auto &metadata_manager = GetMetadataManager();
 	MetaBlockPointer meta_block(block_manager.GetMetaBlock(), 0);
@@ -238,13 +238,20 @@ void SingleFileCheckpointReader::LoadFromStorage() {
 		return;
 	}
 
-	Connection con(storage.GetDatabase());
-	con.BeginTransaction();
-	// create the MetadataReader to read from the storage
-	MetadataReader reader(metadata_manager, meta_block);
-	//	reader.SetContext(*con.context);
-	LoadCheckpoint(*con.context, reader);
-	con.Commit();
+	if (context) {
+		// create the MetadataReader to read from the storage
+		MetadataReader reader(metadata_manager, meta_block);
+		//	reader.SetContext(*con.context);
+		LoadCheckpoint(*context, reader);
+	} else {
+		Connection con(storage.GetDatabase());
+		con.BeginTransaction();
+		// create the MetadataReader to read from the storage
+		MetadataReader reader(metadata_manager, meta_block);
+		//	reader.SetContext(*con.context);
+		LoadCheckpoint(*con.context, reader);
+		con.Commit();
+	}
 }
 
 void CheckpointWriter::WriteEntry(CatalogEntry &entry, Serializer &serializer) {
diff --git a/src/storage/storage_manager.cpp b/src/storage/storage_manager.cpp
index 87007d3acc90..1a798e3c9a06 100644
--- a/src/storage/storage_manager.cpp
+++ b/src/storage/storage_manager.cpp
@@ -83,14 +83,14 @@ bool StorageManager::InMemory() {
 	return path == IN_MEMORY_PATH;
 }
 
-void StorageManager::Initialize() {
+void StorageManager::Initialize(optional_ptr<ClientContext> context) {
 	bool in_memory = InMemory();
 	if (in_memory && read_only) {
 		throw CatalogException("Cannot launch in-memory database in read-only mode!");
 	}
 
 	// create or load the database from disk, if not in-memory mode
-	LoadDatabase();
+	LoadDatabase(context);
 }
 
 ///////////////////////////////////////////////////////////////////////////
@@ -117,7 +117,7 @@ SingleFileStorageManager::SingleFileStorageManager(AttachedDatabase &db, string
     : StorageManager(db, std::move(path), read_only) {
 }
 
-void SingleFileStorageManager::LoadDatabase() {
+void SingleFileStorageManager::LoadDatabase(optional_ptr<ClientContext> context) {
 	if (InMemory()) {
 		block_manager = make_uniq<InMemoryBlockManager>(BufferManager::GetBufferManager(db));
 		table_io_manager = make_uniq<SingleFileTableIOManager>(*block_manager);
@@ -167,7 +167,7 @@ void SingleFileStorageManager::LoadDatabase() {
 
 		// load the db from storage
 		auto checkpoint_reader = SingleFileCheckpointReader(*this);
-		checkpoint_reader.LoadFromStorage();
+		checkpoint_reader.LoadFromStorage(context);
 
 		// check if the WAL file exists
 		auto wal_path = GetWALPath();
