{
  "repo": "duckdb/duckdb",
  "pull_number": 11327,
  "instance_id": "duckdb__duckdb-11327",
  "issue_numbers": [
    "10263"
  ],
  "base_commit": "5d065f3a19e4ae1ff8d1f465ac5211de88cb172d",
  "patch": "diff --git a/src/execution/operator/schema/physical_attach.cpp b/src/execution/operator/schema/physical_attach.cpp\nindex 2c2b76a0fc11..c60e9b756d13 100644\n--- a/src/execution/operator/schema/physical_attach.cpp\n+++ b/src/execution/operator/schema/physical_attach.cpp\n@@ -99,7 +99,7 @@ SourceResultType PhysicalAttach::GetData(ExecutionContext &context, DataChunk &c\n \t// get the database type and attach the database\n \tdb_manager.GetDatabaseType(context.client, db_type, *info, config, unrecognized_option);\n \tauto attached_db = db_manager.AttachDatabase(context.client, *info, db_type, access_mode);\n-\tattached_db->Initialize();\n+\tattached_db->Initialize(&context.client);\n \treturn SourceResultType::FINISHED;\n }\n \ndiff --git a/src/include/duckdb/main/attached_database.hpp b/src/include/duckdb/main/attached_database.hpp\nindex 63d9868416ba..a66217d46585 100644\n--- a/src/include/duckdb/main/attached_database.hpp\n+++ b/src/include/duckdb/main/attached_database.hpp\n@@ -43,7 +43,7 @@ class AttachedDatabase : public CatalogEntry {\n \t                 const AttachInfo &info, AccessMode access_mode);\n \t~AttachedDatabase() override;\n \n-\tvoid Initialize();\n+\tvoid Initialize(optional_ptr<ClientContext> context = nullptr);\n \tvoid Close();\n \n \tCatalog &ParentCatalog() override;\ndiff --git a/src/include/duckdb/storage/checkpoint_manager.hpp b/src/include/duckdb/storage/checkpoint_manager.hpp\nindex d434e50d3b63..1c456c10c4a6 100644\n--- a/src/include/duckdb/storage/checkpoint_manager.hpp\n+++ b/src/include/duckdb/storage/checkpoint_manager.hpp\n@@ -80,7 +80,7 @@ class SingleFileCheckpointReader final : public CheckpointReader {\n \t    : CheckpointReader(Catalog::GetCatalog(storage.GetAttached())), storage(storage) {\n \t}\n \n-\tvoid LoadFromStorage();\n+\tvoid LoadFromStorage(optional_ptr<ClientContext> context = nullptr);\n \tMetadataManager &GetMetadataManager();\n \n \t//! The database\ndiff --git a/src/include/duckdb/storage/storage_manager.hpp b/src/include/duckdb/storage/storage_manager.hpp\nindex 0f5ffeb2f8e8..91fc96755719 100644\n--- a/src/include/duckdb/storage/storage_manager.hpp\n+++ b/src/include/duckdb/storage/storage_manager.hpp\n@@ -46,7 +46,7 @@ class StorageManager {\n \tstatic StorageManager &Get(Catalog &catalog);\n \n \t//! Initialize a database or load an existing database from the given path\n-\tvoid Initialize();\n+\tvoid Initialize(optional_ptr<ClientContext> context);\n \n \tDatabaseInstance &GetDatabase();\n \tAttachedDatabase &GetAttached() {\n@@ -73,7 +73,7 @@ class StorageManager {\n \tvirtual shared_ptr<TableIOManager> GetTableIOManager(BoundCreateTableInfo *info) = 0;\n \n protected:\n-\tvirtual void LoadDatabase() = 0;\n+\tvirtual void LoadDatabase(optional_ptr<ClientContext> context = nullptr) = 0;\n \n protected:\n \t//! The database this storage manager belongs to\n@@ -121,6 +121,6 @@ class SingleFileStorageManager : public StorageManager {\n \tshared_ptr<TableIOManager> GetTableIOManager(BoundCreateTableInfo *info) override;\n \n protected:\n-\tvoid LoadDatabase() override;\n+\tvoid LoadDatabase(optional_ptr<ClientContext> context = nullptr) override;\n };\n } // namespace duckdb\ndiff --git a/src/main/attached_database.cpp b/src/main/attached_database.cpp\nindex d9a287ef86e4..b323b81f9e5b 100644\n--- a/src/main/attached_database.cpp\n+++ b/src/main/attached_database.cpp\n@@ -96,14 +96,14 @@ string AttachedDatabase::ExtractDatabaseName(const string &dbpath, FileSystem &f\n \treturn name;\n }\n \n-void AttachedDatabase::Initialize() {\n+void AttachedDatabase::Initialize(optional_ptr<ClientContext> context) {\n \tif (IsSystem()) {\n \t\tcatalog->Initialize(true);\n \t} else {\n \t\tcatalog->Initialize(false);\n \t}\n \tif (storage) {\n-\t\tstorage->Initialize();\n+\t\tstorage->Initialize(context);\n \t}\n }\n \ndiff --git a/src/storage/checkpoint_manager.cpp b/src/storage/checkpoint_manager.cpp\nindex 1f97b538ff80..574fc0660d1b 100644\n--- a/src/storage/checkpoint_manager.cpp\n+++ b/src/storage/checkpoint_manager.cpp\n@@ -229,7 +229,7 @@ MetadataManager &SingleFileCheckpointReader::GetMetadataManager() {\n \treturn storage.block_manager->GetMetadataManager();\n }\n \n-void SingleFileCheckpointReader::LoadFromStorage() {\n+void SingleFileCheckpointReader::LoadFromStorage(optional_ptr<ClientContext> context) {\n \tauto &block_manager = *storage.block_manager;\n \tauto &metadata_manager = GetMetadataManager();\n \tMetaBlockPointer meta_block(block_manager.GetMetaBlock(), 0);\n@@ -238,13 +238,20 @@ void SingleFileCheckpointReader::LoadFromStorage() {\n \t\treturn;\n \t}\n \n-\tConnection con(storage.GetDatabase());\n-\tcon.BeginTransaction();\n-\t// create the MetadataReader to read from the storage\n-\tMetadataReader reader(metadata_manager, meta_block);\n-\t//\treader.SetContext(*con.context);\n-\tLoadCheckpoint(*con.context, reader);\n-\tcon.Commit();\n+\tif (context) {\n+\t\t// create the MetadataReader to read from the storage\n+\t\tMetadataReader reader(metadata_manager, meta_block);\n+\t\t//\treader.SetContext(*con.context);\n+\t\tLoadCheckpoint(*context, reader);\n+\t} else {\n+\t\tConnection con(storage.GetDatabase());\n+\t\tcon.BeginTransaction();\n+\t\t// create the MetadataReader to read from the storage\n+\t\tMetadataReader reader(metadata_manager, meta_block);\n+\t\t//\treader.SetContext(*con.context);\n+\t\tLoadCheckpoint(*con.context, reader);\n+\t\tcon.Commit();\n+\t}\n }\n \n void CheckpointWriter::WriteEntry(CatalogEntry &entry, Serializer &serializer) {\ndiff --git a/src/storage/storage_manager.cpp b/src/storage/storage_manager.cpp\nindex 87007d3acc90..1a798e3c9a06 100644\n--- a/src/storage/storage_manager.cpp\n+++ b/src/storage/storage_manager.cpp\n@@ -83,14 +83,14 @@ bool StorageManager::InMemory() {\n \treturn path == IN_MEMORY_PATH;\n }\n \n-void StorageManager::Initialize() {\n+void StorageManager::Initialize(optional_ptr<ClientContext> context) {\n \tbool in_memory = InMemory();\n \tif (in_memory && read_only) {\n \t\tthrow CatalogException(\"Cannot launch in-memory database in read-only mode!\");\n \t}\n \n \t// create or load the database from disk, if not in-memory mode\n-\tLoadDatabase();\n+\tLoadDatabase(context);\n }\n \n ///////////////////////////////////////////////////////////////////////////\n@@ -117,7 +117,7 @@ SingleFileStorageManager::SingleFileStorageManager(AttachedDatabase &db, string\n     : StorageManager(db, std::move(path), read_only) {\n }\n \n-void SingleFileStorageManager::LoadDatabase() {\n+void SingleFileStorageManager::LoadDatabase(optional_ptr<ClientContext> context) {\n \tif (InMemory()) {\n \t\tblock_manager = make_uniq<InMemoryBlockManager>(BufferManager::GetBufferManager(db));\n \t\ttable_io_manager = make_uniq<SingleFileTableIOManager>(*block_manager);\n@@ -167,7 +167,7 @@ void SingleFileStorageManager::LoadDatabase() {\n \n \t\t// load the db from storage\n \t\tauto checkpoint_reader = SingleFileCheckpointReader(*this);\n-\t\tcheckpoint_reader.LoadFromStorage();\n+\t\tcheckpoint_reader.LoadFromStorage(context);\n \n \t\t// check if the WAL file exists\n \t\tauto wal_path = GetWALPath();\n",
  "test_patch": "diff --git a/test/sql/attach/attach_sequence.test b/test/sql/attach/attach_sequence.test\nindex 542eb48a18f0..90e2ef852d73 100644\n--- a/test/sql/attach/attach_sequence.test\n+++ b/test/sql/attach/attach_sequence.test\n@@ -5,7 +5,7 @@\n require skip_reload\n \n statement ok\n-ATTACH DATABASE ':memory:' AS db1;\n+ATTACH DATABASE '__TEST_DIR__/attach_seq.db' AS db1;\n \n statement ok\n CREATE SEQUENCE seq;\n@@ -35,3 +35,9 @@ statement error\n CREATE TABLE integers(i INTEGER DEFAULT nextval('db1.seq'))\n ----\n Cross catalog dependencies are not supported\n+\n+statement ok\n+detach db1;\n+\n+statement ok\n+ATTACH DATABASE '__TEST_DIR__/attach_seq.db' AS db1;\n",
  "problem_statement": "Sequence missing from catalog with ATTACH\n### What happens?\r\n\r\nI'm not sure this is an issue or expected behavior, but I found the following suprising.\r\n\r\nAttaching to database with `ATTACH` for a database with a sequence raises a Catalog Error (for a missing sequence).\r\n\r\n\r\n### To Reproduce\r\n\r\n\r\n**Create DB**\r\n\r\n```sh\r\nduckdb db.duckdb\r\n```\r\n\r\n```sql\r\nCREATE SEQUENCE 'id_seq';\r\nCREATE TABLE person (id INT DEFAULT nextval('id_seq'), age INT NOT NULL);\r\nINSERT INTO person (age) VALUES (10);\r\n```\r\n\r\n**Attach in a new session**\r\n\r\n```sh\r\nduckdb\r\n```\r\n\r\n```sql\r\nATTACH 'db.duckdb';\r\n# Error: Catalog Error: Sequence with name id_seq does not exist!\r\n```\r\n\r\nEverything works fine connecting to existing db when starting cli:\r\n\r\n```\r\nduckdb db.duckdb\r\n```\r\n\r\n\r\n### OS:\r\n\r\nmacOS 14.2 \r\n\r\n### DuckDB Version:\r\n\r\nv0.9.2 3c695d7ba9\r\n\r\n### DuckDB Client:\r\n\r\nCLI\r\n\r\n### Full Name:\r\n\r\nTrevor Manz\r\n\r\n### Affiliation:\r\n\r\nHarvard Medical School\r\n\r\n### Have you tried this on the latest `main` branch?\r\n\r\nI have tested with a main build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "Hello, this is fixed on main \u2013 can you please try it on the latest nightly build from \r\n https://duckdb.org/docs/installation/?\nI tried a fresh build on `main` as well as the latest binary from the link you shared:\r\n\r\n```\r\n~/downloads/duckdb-binaries-osx on \ue0a0 main took 13s\r\n\u276f ./duckdb\r\nv0.9.3-dev2907 64ce105793\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD attach 'db.duckdb';\r\nError: Catalog Error: Sequence with name id_seq does not exist!\r\nD\r\n```\nYes, I was just looking at this issue again. There was a minor inconsistency in the original reproducer (hcc.duckdb vs. db.duckdb). I edited that and the reproduction now works.\nAh, my apologies! Thanks.\nHi ! Having the exact same issue here on any DuckDB index on Hugging Face, e.g. using nvidia/HelpSteer [index.duckdb](https://huggingface.co/datasets/nvidia/HelpSteer/resolve/refs%2Fconvert%2Fduckdb/default/validation/index.duckdb)\r\n\r\nDo you know a workaround we could use in the meantime ? We are experimenting with using ATTACH and remote DuckDB files\nI have the same issue - duckdb 0.10\r\n\nFacing the same issue. Any idea when this will get fixed or any workaround that we can use meanwhile. @szarnyasg ",
  "created_at": "2024-03-23T19:33:16Z",
  "modified_files": [
    "src/execution/operator/schema/physical_attach.cpp",
    "src/include/duckdb/main/attached_database.hpp",
    "src/include/duckdb/storage/checkpoint_manager.hpp",
    "src/include/duckdb/storage/storage_manager.hpp",
    "src/main/attached_database.cpp",
    "src/storage/checkpoint_manager.cpp",
    "src/storage/storage_manager.cpp"
  ]
}