You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Improve error message for databases named 'system'
### What happens?

When naming a database `system` the error resulting message [1] is unhelpful.
As a result, users unaware of https://duckdb.org/docs/sql/keywords_and_identifiers.html may spend many hours debugging.
In addition to improving the error message, the documentation should say "mandatory" instead "best practice".

[1] BinderException: Binder Error: Cannot create entry in system catalog

### To Reproduce

# python file
import duckdb
con = duckdb.connect(database="system.db")
con.execute("CREATE TABLE test (name varchar)")

### OS:

iOS

### DuckDB Version:

0.10

### DuckDB Client:

Python

### Full Name:

Dirk Petzoldt

### Affiliation:

founder

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [ ] Yes, I have
Improve error message for databases named 'system'
### What happens?

When naming a database `system` the error resulting message [1] is unhelpful.
As a result, users unaware of https://duckdb.org/docs/sql/keywords_and_identifiers.html may spend many hours debugging.
In addition to improving the error message, the documentation should say "mandatory" instead "best practice".

[1] BinderException: Binder Error: Cannot create entry in system catalog

### To Reproduce

# python file
import duckdb
con = duckdb.connect(database="system.db")
con.execute("CREATE TABLE test (name varchar)")

### OS:

iOS

### DuckDB Version:

0.10

### DuckDB Client:

Python

### Full Name:

Dirk Petzoldt

### Affiliation:

founder

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [ ] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
18: 
19: ## Installation
20: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
21: 
22: ## Data Import
23: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
24: 
25: ```sql
26: SELECT * FROM 'myfile.csv';
27: SELECT * FROM 'myfile.parquet';
28: ```
29: 
30: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
31: 
32: ## SQL Reference
33: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
34: 
35: ## Development
36: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
37: 
38: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
39: 
40: ## Support
41: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/main/attached_database.cpp]
1: #include "duckdb/main/attached_database.hpp"
2: 
3: #include "duckdb/catalog/duck_catalog.hpp"
4: #include "duckdb/common/constants.hpp"
5: #include "duckdb/common/file_system.hpp"
6: #include "duckdb/main/database.hpp"
7: #include "duckdb/main/database_manager.hpp"
8: #include "duckdb/parser/parsed_data/attach_info.hpp"
9: #include "duckdb/storage/storage_extension.hpp"
10: #include "duckdb/storage/storage_manager.hpp"
11: #include "duckdb/transaction/duck_transaction_manager.hpp"
12: #include "duckdb/main/database_path_and_type.hpp"
13: 
14: namespace duckdb {
15: 
16: AttachedDatabase::AttachedDatabase(DatabaseInstance &db, AttachedDatabaseType type)
17:     : CatalogEntry(CatalogType::DATABASE_ENTRY,
18:                    type == AttachedDatabaseType::SYSTEM_DATABASE ? SYSTEM_CATALOG : TEMP_CATALOG, 0),
19:       db(db), type(type) {
20: 
21: 	D_ASSERT(type == AttachedDatabaseType::TEMP_DATABASE || type == AttachedDatabaseType::SYSTEM_DATABASE);
22: 	if (type == AttachedDatabaseType::TEMP_DATABASE) {
23: 		storage = make_uniq<SingleFileStorageManager>(*this, string(IN_MEMORY_PATH), false);
24: 	}
25: 
26: 	catalog = make_uniq<DuckCatalog>(*this);
27: 	transaction_manager = make_uniq<DuckTransactionManager>(*this);
28: 	internal = true;
29: }
30: 
31: AttachedDatabase::AttachedDatabase(DatabaseInstance &db, Catalog &catalog_p, string name_p, string file_path_p,
32:                                    AccessMode access_mode)
33:     : CatalogEntry(CatalogType::DATABASE_ENTRY, catalog_p, std::move(name_p)), db(db), parent_catalog(&catalog_p) {
34: 	type = access_mode == AccessMode::READ_ONLY ? AttachedDatabaseType::READ_ONLY_DATABASE
35: 	                                            : AttachedDatabaseType::READ_WRITE_DATABASE;
36: 	catalog = make_uniq<DuckCatalog>(*this);
37: 	// do this after catalog to guarnatee we allow extension to instantionate DuckCatalog causing creation
38: 	// of the storage
39: 	storage = make_uniq<SingleFileStorageManager>(*this, std::move(file_path_p), access_mode == AccessMode::READ_ONLY);
40: 	transaction_manager = make_uniq<DuckTransactionManager>(*this);
41: 	internal = true;
42: }
43: 
44: AttachedDatabase::AttachedDatabase(DatabaseInstance &db, Catalog &catalog_p, StorageExtension &storage_extension,
45:                                    ClientContext &context, string name_p, const AttachInfo &info,
46:                                    AccessMode access_mode)
47:     : CatalogEntry(CatalogType::DATABASE_ENTRY, catalog_p, std::move(name_p)), db(db), parent_catalog(&catalog_p) {
48: 	type = access_mode == AccessMode::READ_ONLY ? AttachedDatabaseType::READ_ONLY_DATABASE
49: 	                                            : AttachedDatabaseType::READ_WRITE_DATABASE;
50: 	catalog =
51: 	    storage_extension.attach(storage_extension.storage_info.get(), context, *this, name, *info.Copy(), access_mode);
52: 	if (!catalog) {
53: 		throw InternalException("AttachedDatabase - attach function did not return a catalog");
54: 	}
55: 	if (catalog->IsDuckCatalog()) {
56: 		// DuckCatalog, instantiate storage
57: 		storage = make_uniq<SingleFileStorageManager>(*this, info.path, access_mode == AccessMode::READ_ONLY);
58: 	}
59: 	transaction_manager =
60: 	    storage_extension.create_transaction_manager(storage_extension.storage_info.get(), *this, *catalog);
61: 	if (!transaction_manager) {
62: 		throw InternalException(
63: 		    "AttachedDatabase - create_transaction_manager function did not return a transaction manager");
64: 	}
65: 	internal = true;
66: }
67: 
68: AttachedDatabase::~AttachedDatabase() {
69: 	Close();
70: }
71: 
72: bool AttachedDatabase::IsSystem() const {
73: 	D_ASSERT(!storage || type != AttachedDatabaseType::SYSTEM_DATABASE);
74: 	return type == AttachedDatabaseType::SYSTEM_DATABASE;
75: }
76: 
77: bool AttachedDatabase::IsTemporary() const {
78: 	return type == AttachedDatabaseType::TEMP_DATABASE;
79: }
80: bool AttachedDatabase::IsReadOnly() const {
81: 	return type == AttachedDatabaseType::READ_ONLY_DATABASE;
82: }
83: 
84: bool AttachedDatabase::NameIsReserved(const string &name) {
85: 	return name == DEFAULT_SCHEMA || name == TEMP_CATALOG;
86: }
87: 
88: string AttachedDatabase::ExtractDatabaseName(const string &dbpath, FileSystem &fs) {
89: 	if (dbpath.empty() || dbpath == IN_MEMORY_PATH) {
90: 		return "memory";
91: 	}
92: 	auto name = fs.ExtractBaseName(dbpath);
93: 	if (NameIsReserved(name)) {
94: 		name += "_db";
95: 	}
96: 	return name;
97: }
98: 
99: void AttachedDatabase::Initialize() {
100: 	if (IsSystem()) {
101: 		catalog->Initialize(true);
102: 	} else {
103: 		catalog->Initialize(false);
104: 	}
105: 	if (storage) {
106: 		storage->Initialize();
107: 	}
108: }
109: 
110: StorageManager &AttachedDatabase::GetStorageManager() {
111: 	if (!storage) {
112: 		throw InternalException("Internal system catalog does not have storage");
113: 	}
114: 	return *storage;
115: }
116: 
117: Catalog &AttachedDatabase::GetCatalog() {
118: 	return *catalog;
119: }
120: 
121: TransactionManager &AttachedDatabase::GetTransactionManager() {
122: 	return *transaction_manager;
123: }
124: 
125: Catalog &AttachedDatabase::ParentCatalog() {
126: 	return *parent_catalog;
127: }
128: 
129: const Catalog &AttachedDatabase::ParentCatalog() const {
130: 	return *parent_catalog;
131: }
132: 
133: bool AttachedDatabase::IsInitialDatabase() const {
134: 	return is_initial_database;
135: }
136: 
137: void AttachedDatabase::SetInitialDatabase() {
138: 	is_initial_database = true;
139: }
140: 
141: void AttachedDatabase::SetReadOnlyDatabase() {
142: 	type = AttachedDatabaseType::READ_ONLY_DATABASE;
143: }
144: 
145: void AttachedDatabase::Close() {
146: 	D_ASSERT(catalog);
147: 	if (is_closed) {
148: 		return;
149: 	}
150: 	is_closed = true;
151: 
152: 	if (!IsSystem() && !catalog->InMemory()) {
153: 		db.GetDatabaseManager().EraseDatabasePath(catalog->GetDBPath());
154: 	}
155: 
156: 	if (Exception::UncaughtException()) {
157: 		return;
158: 	}
159: 	if (!storage) {
160: 		return;
161: 	}
162: 
163: 	// shutting down: attempt to checkpoint the database
164: 	// but only if we are not cleaning up as part of an exception unwind
165: 	try {
166: 		if (!storage->InMemory()) {
167: 			auto &config = DBConfig::GetConfig(db);
168: 			if (!config.options.checkpoint_on_shutdown) {
169: 				return;
170: 			}
171: 			CheckpointOptions options;
172: 			options.wal_action = CheckpointWALAction::DELETE_WAL;
173: 			storage->CreateCheckpoint(options);
174: 		}
175: 	} catch (...) { // NOLINT
176: 	}
177: }
178: 
179: } // namespace duckdb
[end of src/main/attached_database.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: