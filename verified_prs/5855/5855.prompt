You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Error when trying to join to alias
### What happens?

This query fails with `Serialization Error: Cannot copy BoundSubqueryExpression`

### To Reproduce

```sql
create table orders as
select 
    cast(random()*100 as integer) + 1 as customer_id, 
    date '2020-01-01' + interval (cast(random()*365*10 as integer)) days as order_date,
    cast(random()*1000 as integer) as order_amount,
from range(0, 1000)
order by order_date;

select 
    (select distinct date_trunc('month', order_date) from orders) as month,
    (select sum(order_amount) from orders where date_trunc('month', order_date) = month) as revenue;
```

### OS:

macOS

### DuckDB Version:

v0.6.1 919cad22e8

### DuckDB Client:

CLI

### Full Name:

George Fraser

### Affiliation:

Fivetran

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree
Error when trying to join to alias
### What happens?

This query fails with `Serialization Error: Cannot copy BoundSubqueryExpression`

### To Reproduce

```sql
create table orders as
select 
    cast(random()*100 as integer) + 1 as customer_id, 
    date '2020-01-01' + interval (cast(random()*365*10 as integer)) days as order_date,
    cast(random()*1000 as integer) as order_amount,
from range(0, 1000)
order by order_date;

select 
    (select distinct date_trunc('month', order_date) from orders) as month,
    (select sum(order_amount) from orders where date_trunc('month', order_date) = month) as revenue;
```

### OS:

macOS

### DuckDB Version:

v0.6.1 919cad22e8

### DuckDB Client:

CLI

### Full Name:

George Fraser

### Affiliation:

Fivetran

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=master" alt="Github Actions Badge">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16:   <a href="https://discord.gg/tcvwpjfnZx">
17:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of src/planner/expression_binder/select_binder.cpp]
1: #include "duckdb/planner/expression_binder/select_binder.hpp"
2: 
3: #include "duckdb/parser/expression/columnref_expression.hpp"
4: #include "duckdb/parser/expression/window_expression.hpp"
5: #include "duckdb/parser/parsed_expression_iterator.hpp"
6: #include "duckdb/planner/expression/bound_columnref_expression.hpp"
7: #include "duckdb/planner/expression/bound_window_expression.hpp"
8: #include "duckdb/planner/expression_binder/aggregate_binder.hpp"
9: #include "duckdb/planner/query_node/bound_select_node.hpp"
10: #include "duckdb/parser/expression/operator_expression.hpp"
11: #include "duckdb/common/string_util.hpp"
12: #include "duckdb/planner/binder.hpp"
13: 
14: namespace duckdb {
15: 
16: SelectBinder::SelectBinder(Binder &binder, ClientContext &context, BoundSelectNode &node, BoundGroupInformation &info,
17:                            case_insensitive_map_t<idx_t> alias_map)
18:     : ExpressionBinder(binder, context), inside_window(false), node(node), info(info), alias_map(move(alias_map)) {
19: }
20: 
21: SelectBinder::SelectBinder(Binder &binder, ClientContext &context, BoundSelectNode &node, BoundGroupInformation &info)
22:     : SelectBinder(binder, context, node, info, case_insensitive_map_t<idx_t>()) {
23: }
24: 
25: BindResult SelectBinder::BindExpression(unique_ptr<ParsedExpression> *expr_ptr, idx_t depth, bool root_expression) {
26: 	auto &expr = **expr_ptr;
27: 	// check if the expression binds to one of the groups
28: 	auto group_index = TryBindGroup(expr, depth);
29: 	if (group_index != DConstants::INVALID_INDEX) {
30: 		return BindGroup(expr, depth, group_index);
31: 	}
32: 	switch (expr.expression_class) {
33: 	case ExpressionClass::COLUMN_REF:
34: 		return BindColumnRef(expr_ptr, depth);
35: 	case ExpressionClass::DEFAULT:
36: 		return BindResult("SELECT clause cannot contain DEFAULT clause");
37: 	case ExpressionClass::WINDOW:
38: 		return BindWindow((WindowExpression &)expr, depth);
39: 	default:
40: 		return ExpressionBinder::BindExpression(expr_ptr, depth);
41: 	}
42: }
43: 
44: idx_t SelectBinder::TryBindGroup(ParsedExpression &expr, idx_t depth) {
45: 	// first check the group alias map, if expr is a ColumnRefExpression
46: 	if (expr.type == ExpressionType::COLUMN_REF) {
47: 		auto &colref = (ColumnRefExpression &)expr;
48: 		if (!colref.IsQualified()) {
49: 			auto alias_entry = info.alias_map.find(colref.column_names[0]);
50: 			if (alias_entry != info.alias_map.end()) {
51: 				// found entry!
52: 				return alias_entry->second;
53: 			}
54: 		}
55: 	}
56: 	// no alias reference found
57: 	// check the list of group columns for a match
58: 	auto entry = info.map.find(&expr);
59: 	if (entry != info.map.end()) {
60: 		return entry->second;
61: 	}
62: #ifdef DEBUG
63: 	for (auto entry : info.map) {
64: 		D_ASSERT(!entry.first->Equals(&expr));
65: 		D_ASSERT(!expr.Equals(entry.first));
66: 	}
67: #endif
68: 	return DConstants::INVALID_INDEX;
69: }
70: 
71: BindResult SelectBinder::BindColumnRef(unique_ptr<ParsedExpression> *expr_ptr, idx_t depth) {
72: 	// first try to bind the column reference regularly
73: 	auto result = ExpressionBinder::BindExpression(expr_ptr, depth);
74: 	if (!result.HasError()) {
75: 		return result;
76: 	}
77: 	// binding failed
78: 	// check in the alias map
79: 	auto &colref = (ColumnRefExpression &)**expr_ptr;
80: 	if (!colref.IsQualified()) {
81: 		auto alias_entry = alias_map.find(colref.column_names[0]);
82: 		if (alias_entry != alias_map.end()) {
83: 			// found entry!
84: 			auto index = alias_entry->second;
85: 			if (index >= node.select_list.size()) {
86: 				throw BinderException("Column \"%s\" referenced that exists in the SELECT clause - but this column "
87: 				                      "cannot be referenced before it is defined",
88: 				                      colref.column_names[0]);
89: 			}
90: 			if (node.select_list[index]->HasSideEffects()) {
91: 				throw BinderException("Alias \"%s\" referenced in a SELECT clause - but the expression has side "
92: 				                      "effects. This is not yet supported.",
93: 				                      colref.column_names[0]);
94: 			}
95: 			auto result = BindResult(node.select_list[index]->Copy());
96: 			if (result.expression->type == ExpressionType::BOUND_COLUMN_REF) {
97: 				auto &result_expr = (BoundColumnRefExpression &)*result.expression;
98: 				result_expr.depth = depth;
99: 			}
100: 			return result;
101: 		}
102: 	}
103: 	// entry was not found in the alias map: return the original error
104: 	return result;
105: }
106: 
107: BindResult SelectBinder::BindGroupingFunction(OperatorExpression &op, idx_t depth) {
108: 	if (op.children.empty()) {
109: 		throw InternalException("GROUPING requires at least one child");
110: 	}
111: 	if (node.groups.group_expressions.empty()) {
112: 		return BindResult(binder.FormatError(op, "GROUPING statement cannot be used without groups"));
113: 	}
114: 	if (op.children.size() >= 64) {
115: 		return BindResult(binder.FormatError(op, "GROUPING statement cannot have more than 64 groups"));
116: 	}
117: 	vector<idx_t> group_indexes;
118: 	group_indexes.reserve(op.children.size());
119: 	for (auto &child : op.children) {
120: 		ExpressionBinder::QualifyColumnNames(binder, child);
121: 		auto idx = TryBindGroup(*child, depth);
122: 		if (idx == DConstants::INVALID_INDEX) {
123: 			return BindResult(binder.FormatError(
124: 			    op, StringUtil::Format("GROUPING child \"%s\" must be a grouping column", child->GetName())));
125: 		}
126: 		group_indexes.push_back(idx);
127: 	}
128: 	auto col_idx = node.grouping_functions.size();
129: 	node.grouping_functions.push_back(move(group_indexes));
130: 	return BindResult(make_unique<BoundColumnRefExpression>(op.GetName(), LogicalType::BIGINT,
131: 	                                                        ColumnBinding(node.groupings_index, col_idx), depth));
132: }
133: 
134: BindResult SelectBinder::BindGroup(ParsedExpression &expr, idx_t depth, idx_t group_index) {
135: 	auto &group = node.groups.group_expressions[group_index];
136: 	return BindResult(make_unique<BoundColumnRefExpression>(expr.GetName(), group->return_type,
137: 	                                                        ColumnBinding(node.group_index, group_index), depth));
138: }
139: 
140: } // namespace duckdb
[end of src/planner/expression_binder/select_binder.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: