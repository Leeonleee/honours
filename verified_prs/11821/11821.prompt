You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
CREATE UNIQUE INDEX IF NOT EXISTS doesn't work any more
### What happens?

`CREATE UNIQUE INDEX IF NOT EXISTS` works as expected on `0.9.2`, but throws `Catalog Error` on `0.10.1`.

Note: this only occurs with `UNIQUE`, otherwise it's okay ü§î 

---

I'll concede that `CREATE INDEX IF NOT EXISTS` [it isn't 'explicitly mentioned in the docs](https://duckdb.org/docs/sql/statements/create_index),
but it is covered by tests (albeit not the failing `UNIQUE` case) ‚¨áÔ∏è,
and since it worked as expected in 0.9.2 I'm hoping we can call this a Real Bug ü§ûüèª 

https://github.com/duckdb/duckdb/blob/4750ce2d7abb05792e34a5c9200af7e60b8ff9a0/test/sql/catalog/test_catalog_errors.test#L36-L46

### To Reproduce

Now:
```
v0.10.1 4a89d97db8
```
```sql
create table foo(bar int);
create unique index foo_bar_unique on foo(bar);
create unique index if not exists foo_bar_unique on foo(bar);
```
```
Catalog Error: An index with the name foo_bar_uniquealready exists!
```

But previously:
```
v0.9.2 3c695d7ba9
```
```sql
create table foo(bar int);
create unique index foo_bar_unique on foo(bar);
create unique index if not exists foo_bar_unique on foo(bar);
```

### OS:

Ubuntu

### DuckDB Version:

20.04.6

### DuckDB Client:

Python and CLI

### Full Name:

Dave Tapley

### Affiliation:

JE Fuller

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
18: 
19: ## Installation
20: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
21: 
22: ## Data Import
23: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
24: 
25: ```sql
26: SELECT * FROM 'myfile.csv';
27: SELECT * FROM 'myfile.parquet';
28: ```
29: 
30: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
31: 
32: ## SQL Reference
33: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
34: 
35: ## Development
36: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
37: 
38: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
39: 
40: ## Support
41: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/catalog/catalog_entry/duck_schema_entry.cpp]
1: #include "duckdb/catalog/catalog_entry/duck_schema_entry.hpp"
2: #include "duckdb/catalog/default/default_functions.hpp"
3: #include "duckdb/catalog/default/default_types.hpp"
4: #include "duckdb/catalog/default/default_views.hpp"
5: #include "duckdb/catalog/catalog_entry/collate_catalog_entry.hpp"
6: #include "duckdb/catalog/catalog_entry/copy_function_catalog_entry.hpp"
7: #include "duckdb/catalog/catalog_entry/duck_index_entry.hpp"
8: #include "duckdb/catalog/catalog_entry/pragma_function_catalog_entry.hpp"
9: #include "duckdb/catalog/catalog_entry/sequence_catalog_entry.hpp"
10: #include "duckdb/catalog/catalog_entry/table_function_catalog_entry.hpp"
11: #include "duckdb/catalog/catalog_entry/type_catalog_entry.hpp"
12: #include "duckdb/catalog/catalog_entry/view_catalog_entry.hpp"
13: #include "duckdb/catalog/catalog_entry/aggregate_function_catalog_entry.hpp"
14: #include "duckdb/catalog/catalog_entry/scalar_function_catalog_entry.hpp"
15: #include "duckdb/catalog/catalog_entry/scalar_macro_catalog_entry.hpp"
16: #include "duckdb/catalog/catalog_entry/table_macro_catalog_entry.hpp"
17: #include "duckdb/catalog/catalog_entry/duck_table_entry.hpp"
18: #include "duckdb/catalog/catalog_entry/table_catalog_entry.hpp"
19: #include "duckdb/catalog/dependency_list.hpp"
20: #include "duckdb/planner/constraints/bound_foreign_key_constraint.hpp"
21: #include "duckdb/parser/constraints/foreign_key_constraint.hpp"
22: #include "duckdb/parser/parsed_data/alter_table_info.hpp"
23: #include "duckdb/parser/parsed_data/create_scalar_function_info.hpp"
24: #include "duckdb/storage/data_table.hpp"
25: #include "duckdb/planner/parsed_data/bound_create_table_info.hpp"
26: #include "duckdb/parser/parsed_data/create_collation_info.hpp"
27: #include "duckdb/parser/parsed_data/create_copy_function_info.hpp"
28: #include "duckdb/parser/parsed_data/create_index_info.hpp"
29: #include "duckdb/parser/parsed_data/create_pragma_function_info.hpp"
30: #include "duckdb/parser/parsed_data/create_schema_info.hpp"
31: #include "duckdb/parser/parsed_data/create_sequence_info.hpp"
32: #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
33: #include "duckdb/parser/parsed_data/create_type_info.hpp"
34: #include "duckdb/parser/parsed_data/create_view_info.hpp"
35: #include "duckdb/parser/parsed_data/drop_info.hpp"
36: 
37: namespace duckdb {
38: 
39: static void FindForeignKeyInformation(CatalogEntry &entry, AlterForeignKeyType alter_fk_type,
40:                                       vector<unique_ptr<AlterForeignKeyInfo>> &fk_arrays) {
41: 	if (entry.type != CatalogType::TABLE_ENTRY) {
42: 		return;
43: 	}
44: 	auto &table_entry = entry.Cast<TableCatalogEntry>();
45: 	auto &constraints = table_entry.GetConstraints();
46: 	for (idx_t i = 0; i < constraints.size(); i++) {
47: 		auto &cond = constraints[i];
48: 		if (cond->type != ConstraintType::FOREIGN_KEY) {
49: 			continue;
50: 		}
51: 		auto &fk = cond->Cast<ForeignKeyConstraint>();
52: 		if (fk.info.type == ForeignKeyType::FK_TYPE_FOREIGN_KEY_TABLE) {
53: 			AlterEntryData alter_data(entry.ParentCatalog().GetName(), fk.info.schema, fk.info.table,
54: 			                          OnEntryNotFound::THROW_EXCEPTION);
55: 			fk_arrays.push_back(make_uniq<AlterForeignKeyInfo>(std::move(alter_data), entry.name, fk.pk_columns,
56: 			                                                   fk.fk_columns, fk.info.pk_keys, fk.info.fk_keys,
57: 			                                                   alter_fk_type));
58: 		} else if (fk.info.type == ForeignKeyType::FK_TYPE_PRIMARY_KEY_TABLE &&
59: 		           alter_fk_type == AlterForeignKeyType::AFT_DELETE) {
60: 			throw CatalogException("Could not drop the table because this table is main key table of the table \"%s\"",
61: 			                       fk.info.table);
62: 		}
63: 	}
64: }
65: 
66: static void LazyLoadIndexes(ClientContext &context, CatalogEntry &entry) {
67: 	if (entry.type == CatalogType::TABLE_ENTRY) {
68: 		auto &table_entry = entry.Cast<TableCatalogEntry>();
69: 		table_entry.GetStorage().info->InitializeIndexes(context);
70: 	} else if (entry.type == CatalogType::INDEX_ENTRY) {
71: 		auto &index_entry = entry.Cast<IndexCatalogEntry>();
72: 		auto &table_entry = Catalog::GetEntry(context, CatalogType::TABLE_ENTRY, index_entry.catalog.GetName(),
73: 		                                      index_entry.GetSchemaName(), index_entry.GetTableName())
74: 		                        .Cast<TableCatalogEntry>();
75: 		table_entry.GetStorage().info->InitializeIndexes(context);
76: 	}
77: }
78: 
79: DuckSchemaEntry::DuckSchemaEntry(Catalog &catalog, CreateSchemaInfo &info)
80:     : SchemaCatalogEntry(catalog, info), tables(catalog, make_uniq<DefaultViewGenerator>(catalog, *this)),
81:       indexes(catalog), table_functions(catalog), copy_functions(catalog), pragma_functions(catalog),
82:       functions(catalog, make_uniq<DefaultFunctionGenerator>(catalog, *this)), sequences(catalog), collations(catalog),
83:       types(catalog, make_uniq<DefaultTypeGenerator>(catalog, *this)) {
84: }
85: 
86: unique_ptr<CatalogEntry> DuckSchemaEntry::Copy(ClientContext &context) const {
87: 	auto info_copy = GetInfo();
88: 	auto &cast_info = info_copy->Cast<CreateSchemaInfo>();
89: 
90: 	auto result = make_uniq<DuckSchemaEntry>(catalog, cast_info);
91: 
92: 	return std::move(result);
93: }
94: 
95: optional_ptr<CatalogEntry> DuckSchemaEntry::AddEntryInternal(CatalogTransaction transaction,
96:                                                              unique_ptr<StandardEntry> entry,
97:                                                              OnCreateConflict on_conflict,
98:                                                              LogicalDependencyList dependencies) {
99: 	auto entry_name = entry->name;
100: 	auto entry_type = entry->type;
101: 	auto result = entry.get();
102: 
103: 	// first find the set for this entry
104: 	auto &set = GetCatalogSet(entry_type);
105: 	dependencies.AddDependency(*this);
106: 	if (on_conflict == OnCreateConflict::REPLACE_ON_CONFLICT) {
107: 		// CREATE OR REPLACE: first try to drop the entry
108: 		auto old_entry = set.GetEntry(transaction, entry_name);
109: 		if (old_entry) {
110: 			if (old_entry->type != entry_type) {
111: 				throw CatalogException("Existing object %s is of type %s, trying to replace with type %s", entry_name,
112: 				                       CatalogTypeToString(old_entry->type), CatalogTypeToString(entry_type));
113: 			}
114: 			(void)set.DropEntry(transaction, entry_name, false, entry->internal);
115: 		}
116: 	}
117: 	// now try to add the entry
118: 	if (!set.CreateEntry(transaction, entry_name, std::move(entry), dependencies)) {
119: 		// entry already exists!
120: 		if (on_conflict == OnCreateConflict::ERROR_ON_CONFLICT) {
121: 			throw CatalogException::EntryAlreadyExists(entry_type, entry_name);
122: 		} else {
123: 			return nullptr;
124: 		}
125: 	}
126: 	return result;
127: }
128: 
129: optional_ptr<CatalogEntry> DuckSchemaEntry::CreateTable(CatalogTransaction transaction, BoundCreateTableInfo &info) {
130: 	auto table = make_uniq<DuckTableEntry>(catalog, *this, info);
131: 	auto &storage = table->GetStorage();
132: 	storage.info->cardinality = storage.GetTotalRows();
133: 
134: 	auto entry = AddEntryInternal(transaction, std::move(table), info.Base().on_conflict, info.dependencies);
135: 	if (!entry) {
136: 		return nullptr;
137: 	}
138: 
139: 	// add a foreign key constraint in main key table if there is a foreign key constraint
140: 	vector<unique_ptr<AlterForeignKeyInfo>> fk_arrays;
141: 	FindForeignKeyInformation(*entry, AlterForeignKeyType::AFT_ADD, fk_arrays);
142: 	for (idx_t i = 0; i < fk_arrays.size(); i++) {
143: 		// alter primary key table
144: 		auto &fk_info = *fk_arrays[i];
145: 		catalog.Alter(transaction.GetContext(), fk_info);
146: 
147: 		// make a dependency between this table and referenced table
148: 		auto &set = GetCatalogSet(CatalogType::TABLE_ENTRY);
149: 		info.dependencies.AddDependency(*set.GetEntry(transaction, fk_info.name));
150: 	}
151: 	return entry;
152: }
153: 
154: optional_ptr<CatalogEntry> DuckSchemaEntry::CreateFunction(CatalogTransaction transaction, CreateFunctionInfo &info) {
155: 	if (info.on_conflict == OnCreateConflict::ALTER_ON_CONFLICT) {
156: 		// check if the original entry exists
157: 		auto &catalog_set = GetCatalogSet(info.type);
158: 		auto current_entry = catalog_set.GetEntry(transaction, info.name);
159: 		if (current_entry) {
160: 			// the current entry exists - alter it instead
161: 			auto alter_info = info.GetAlterInfo();
162: 			Alter(transaction.GetContext(), *alter_info);
163: 			return nullptr;
164: 		}
165: 	}
166: 	unique_ptr<StandardEntry> function;
167: 	switch (info.type) {
168: 	case CatalogType::SCALAR_FUNCTION_ENTRY:
169: 		function = make_uniq_base<StandardEntry, ScalarFunctionCatalogEntry>(catalog, *this,
170: 		                                                                     info.Cast<CreateScalarFunctionInfo>());
171: 		break;
172: 	case CatalogType::TABLE_FUNCTION_ENTRY:
173: 		function = make_uniq_base<StandardEntry, TableFunctionCatalogEntry>(catalog, *this,
174: 		                                                                    info.Cast<CreateTableFunctionInfo>());
175: 		break;
176: 	case CatalogType::MACRO_ENTRY:
177: 		// create a macro function
178: 		function = make_uniq_base<StandardEntry, ScalarMacroCatalogEntry>(catalog, *this, info.Cast<CreateMacroInfo>());
179: 		break;
180: 
181: 	case CatalogType::TABLE_MACRO_ENTRY:
182: 		// create a macro table function
183: 		function = make_uniq_base<StandardEntry, TableMacroCatalogEntry>(catalog, *this, info.Cast<CreateMacroInfo>());
184: 		break;
185: 	case CatalogType::AGGREGATE_FUNCTION_ENTRY:
186: 		D_ASSERT(info.type == CatalogType::AGGREGATE_FUNCTION_ENTRY);
187: 		// create an aggregate function
188: 		function = make_uniq_base<StandardEntry, AggregateFunctionCatalogEntry>(
189: 		    catalog, *this, info.Cast<CreateAggregateFunctionInfo>());
190: 		break;
191: 	default:
192: 		throw InternalException("Unknown function type \"%s\"", CatalogTypeToString(info.type));
193: 	}
194: 	function->internal = info.internal;
195: 	return AddEntry(transaction, std::move(function), info.on_conflict);
196: }
197: 
198: optional_ptr<CatalogEntry> DuckSchemaEntry::AddEntry(CatalogTransaction transaction, unique_ptr<StandardEntry> entry,
199:                                                      OnCreateConflict on_conflict) {
200: 	LogicalDependencyList dependencies;
201: 	return AddEntryInternal(transaction, std::move(entry), on_conflict, dependencies);
202: }
203: 
204: optional_ptr<CatalogEntry> DuckSchemaEntry::CreateSequence(CatalogTransaction transaction, CreateSequenceInfo &info) {
205: 	auto sequence = make_uniq<SequenceCatalogEntry>(catalog, *this, info);
206: 	return AddEntry(transaction, std::move(sequence), info.on_conflict);
207: }
208: 
209: optional_ptr<CatalogEntry> DuckSchemaEntry::CreateType(CatalogTransaction transaction, CreateTypeInfo &info) {
210: 	auto type_entry = make_uniq<TypeCatalogEntry>(catalog, *this, info);
211: 	return AddEntry(transaction, std::move(type_entry), info.on_conflict);
212: }
213: 
214: optional_ptr<CatalogEntry> DuckSchemaEntry::CreateView(CatalogTransaction transaction, CreateViewInfo &info) {
215: 	auto view = make_uniq<ViewCatalogEntry>(catalog, *this, info);
216: 	return AddEntry(transaction, std::move(view), info.on_conflict);
217: }
218: 
219: optional_ptr<CatalogEntry> DuckSchemaEntry::CreateIndex(ClientContext &context, CreateIndexInfo &info,
220:                                                         TableCatalogEntry &table) {
221: 	LogicalDependencyList dependencies;
222: 	dependencies.AddDependency(table);
223: 
224: 	// currently, we can not alter PK/FK/UNIQUE constraints
225: 	// concurrency-safe name checks against other INDEX catalog entries happens in the catalog
226: 	if (!table.GetStorage().IndexNameIsUnique(info.index_name)) {
227: 		throw CatalogException("An index with the name " + info.index_name + " already exists!");
228: 	}
229: 
230: 	auto index = make_uniq<DuckIndexEntry>(catalog, *this, info);
231: 	return AddEntryInternal(GetCatalogTransaction(context), std::move(index), info.on_conflict, dependencies);
232: }
233: 
234: optional_ptr<CatalogEntry> DuckSchemaEntry::CreateCollation(CatalogTransaction transaction, CreateCollationInfo &info) {
235: 	auto collation = make_uniq<CollateCatalogEntry>(catalog, *this, info);
236: 	collation->internal = info.internal;
237: 	return AddEntry(transaction, std::move(collation), info.on_conflict);
238: }
239: 
240: optional_ptr<CatalogEntry> DuckSchemaEntry::CreateTableFunction(CatalogTransaction transaction,
241:                                                                 CreateTableFunctionInfo &info) {
242: 	auto table_function = make_uniq<TableFunctionCatalogEntry>(catalog, *this, info);
243: 	table_function->internal = info.internal;
244: 	return AddEntry(transaction, std::move(table_function), info.on_conflict);
245: }
246: 
247: optional_ptr<CatalogEntry> DuckSchemaEntry::CreateCopyFunction(CatalogTransaction transaction,
248:                                                                CreateCopyFunctionInfo &info) {
249: 	auto copy_function = make_uniq<CopyFunctionCatalogEntry>(catalog, *this, info);
250: 	copy_function->internal = info.internal;
251: 	return AddEntry(transaction, std::move(copy_function), info.on_conflict);
252: }
253: 
254: optional_ptr<CatalogEntry> DuckSchemaEntry::CreatePragmaFunction(CatalogTransaction transaction,
255:                                                                  CreatePragmaFunctionInfo &info) {
256: 	auto pragma_function = make_uniq<PragmaFunctionCatalogEntry>(catalog, *this, info);
257: 	pragma_function->internal = info.internal;
258: 	return AddEntry(transaction, std::move(pragma_function), info.on_conflict);
259: }
260: 
261: void DuckSchemaEntry::Alter(ClientContext &context, AlterInfo &info) {
262: 	CatalogType type = info.GetCatalogType();
263: 
264: 	auto &set = GetCatalogSet(type);
265: 	auto transaction = GetCatalogTransaction(context);
266: 	if (info.type == AlterType::CHANGE_OWNERSHIP) {
267: 		if (!set.AlterOwnership(transaction, info.Cast<ChangeOwnershipInfo>())) {
268: 			throw CatalogException("Couldn't change ownership!");
269: 		}
270: 	} else {
271: 		string name = info.name;
272: 		if (!set.AlterEntry(transaction, name, info)) {
273: 			throw CatalogException::MissingEntry(type, name, string());
274: 		}
275: 	}
276: }
277: 
278: void DuckSchemaEntry::Scan(ClientContext &context, CatalogType type,
279:                            const std::function<void(CatalogEntry &)> &callback) {
280: 	auto &set = GetCatalogSet(type);
281: 	set.Scan(GetCatalogTransaction(context), callback);
282: }
283: 
284: void DuckSchemaEntry::Scan(CatalogType type, const std::function<void(CatalogEntry &)> &callback) {
285: 	auto &set = GetCatalogSet(type);
286: 	set.Scan(callback);
287: }
288: 
289: void DuckSchemaEntry::DropEntry(ClientContext &context, DropInfo &info) {
290: 	auto &set = GetCatalogSet(info.type);
291: 
292: 	// first find the entry
293: 	auto transaction = GetCatalogTransaction(context);
294: 	auto existing_entry = set.GetEntry(transaction, info.name);
295: 	if (!existing_entry) {
296: 		throw InternalException("Failed to drop entry \"%s\" - entry could not be found", info.name);
297: 	}
298: 	if (existing_entry->type != info.type) {
299: 		throw CatalogException("Existing object %s is of type %s, trying to replace with type %s", info.name,
300: 		                       CatalogTypeToString(existing_entry->type), CatalogTypeToString(info.type));
301: 	}
302: 
303: 	// if this is a index or table with indexes, initialize any unknown index instances
304: 	LazyLoadIndexes(context, *existing_entry);
305: 
306: 	// if there is a foreign key constraint, get that information
307: 	vector<unique_ptr<AlterForeignKeyInfo>> fk_arrays;
308: 	FindForeignKeyInformation(*existing_entry, AlterForeignKeyType::AFT_DELETE, fk_arrays);
309: 
310: 	if (!set.DropEntry(transaction, info.name, info.cascade, info.allow_drop_internal)) {
311: 		throw InternalException("Could not drop element because of an internal error");
312: 	}
313: 
314: 	// remove the foreign key constraint in main key table if main key table's name is valid
315: 	for (idx_t i = 0; i < fk_arrays.size(); i++) {
316: 		// alter primary key table
317: 		catalog.Alter(context, *fk_arrays[i]);
318: 	}
319: }
320: 
321: optional_ptr<CatalogEntry> DuckSchemaEntry::GetEntry(CatalogTransaction transaction, CatalogType type,
322:                                                      const string &name) {
323: 	return GetCatalogSet(type).GetEntry(transaction, name);
324: }
325: 
326: SimilarCatalogEntry DuckSchemaEntry::GetSimilarEntry(CatalogTransaction transaction, CatalogType type,
327:                                                      const string &name) {
328: 	return GetCatalogSet(type).SimilarEntry(transaction, name);
329: }
330: 
331: CatalogSet &DuckSchemaEntry::GetCatalogSet(CatalogType type) {
332: 	switch (type) {
333: 	case CatalogType::VIEW_ENTRY:
334: 	case CatalogType::TABLE_ENTRY:
335: 		return tables;
336: 	case CatalogType::INDEX_ENTRY:
337: 		return indexes;
338: 	case CatalogType::TABLE_FUNCTION_ENTRY:
339: 	case CatalogType::TABLE_MACRO_ENTRY:
340: 		return table_functions;
341: 	case CatalogType::COPY_FUNCTION_ENTRY:
342: 		return copy_functions;
343: 	case CatalogType::PRAGMA_FUNCTION_ENTRY:
344: 		return pragma_functions;
345: 	case CatalogType::AGGREGATE_FUNCTION_ENTRY:
346: 	case CatalogType::SCALAR_FUNCTION_ENTRY:
347: 	case CatalogType::MACRO_ENTRY:
348: 		return functions;
349: 	case CatalogType::SEQUENCE_ENTRY:
350: 		return sequences;
351: 	case CatalogType::COLLATION_ENTRY:
352: 		return collations;
353: 	case CatalogType::TYPE_ENTRY:
354: 		return types;
355: 	default:
356: 		throw InternalException("Unsupported catalog type in schema");
357: 	}
358: }
359: 
360: void DuckSchemaEntry::Verify(Catalog &catalog) {
361: 	InCatalogEntry::Verify(catalog);
362: 
363: 	tables.Verify(catalog);
364: 	indexes.Verify(catalog);
365: 	table_functions.Verify(catalog);
366: 	copy_functions.Verify(catalog);
367: 	pragma_functions.Verify(catalog);
368: 	functions.Verify(catalog);
369: 	sequences.Verify(catalog);
370: 	collations.Verify(catalog);
371: 	types.Verify(catalog);
372: }
373: 
374: } // namespace duckdb
[end of src/catalog/catalog_entry/duck_schema_entry.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: