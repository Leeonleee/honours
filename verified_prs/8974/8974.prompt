You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Unimplemented type for cast (TIMESTAMP_S -> TIMESTAMP_MS)
### What happens?

Cannot compare timestamp values with different precisions.

### To Reproduce

v0.8.1 6536a77232
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.
D CREATE TABLE EXAMPLE (TS TIMESTAMP_S, TMS TIMESTAMP_MS);
D INSERT INTO EXAMPLE VALUES('2019-10-10 15:30:05', '2019-10-10 15:30:05.123') ;
D SELECT * FROM EXAMPLE WHERE TS = TMS;
Error: Conversion Error: Unimplemented type for cast (TIMESTAMP_S -> TIMESTAMP_MS)


### OS:

Linux

### DuckDB Version:

v0.8.1

### DuckDB Client:

cli

### Full Name:

Leonid Chistov

### Affiliation:

Querify Labs

### Have you tried this on the latest `main` branch?

I have tested with a main build

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: 
7: 
8: 
9: <p align="center">
10:   <a href="https://github.com/duckdb/duckdb/actions">
11:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge">
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/main/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16:   <a href="https://discord.gg/tcvwpjfnZx">
17:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
18:   </a>
19:   <a href="https://github.com/duckdb/duckdb/releases/">
20:     <img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release">
21:   </a>
22: </p>
23: 
24: ## DuckDB
25: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
26: 
27: ## Installation
28: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
29: 
30: ## Data Import
31: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
32: 
33: ```sql
34: SELECT * FROM 'myfile.csv';
35: SELECT * FROM 'myfile.parquet';
36: ```
37: 
38: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
39: 
40: ## SQL Reference
41: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
42: 
43: ## Development
44: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
45: 
46: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of src/common/operator/cast_operators.cpp]
1: #include "duckdb/common/operator/cast_operators.hpp"
2: #include "duckdb/common/hugeint.hpp"
3: #include "duckdb/common/operator/string_cast.hpp"
4: #include "duckdb/common/operator/numeric_cast.hpp"
5: #include "duckdb/common/operator/decimal_cast_operators.hpp"
6: #include "duckdb/common/operator/multiply.hpp"
7: 
8: #include "duckdb/common/exception.hpp"
9: #include "duckdb/common/limits.hpp"
10: #include "duckdb/common/string_util.hpp"
11: #include "duckdb/common/types/blob.hpp"
12: #include "duckdb/common/types/cast_helpers.hpp"
13: #include "duckdb/common/types/date.hpp"
14: #include "duckdb/common/types/decimal.hpp"
15: #include "duckdb/common/types/hugeint.hpp"
16: #include "duckdb/common/types/uuid.hpp"
17: #include "duckdb/common/types/interval.hpp"
18: #include "duckdb/common/types/time.hpp"
19: #include "duckdb/common/types/timestamp.hpp"
20: #include "duckdb/common/types/vector.hpp"
21: #include "duckdb/common/types.hpp"
22: #include "fast_float/fast_float.h"
23: #include "fmt/format.h"
24: #include "duckdb/common/types/bit.hpp"
25: 
26: #include <cctype>
27: #include <cmath>
28: #include <cstdlib>
29: 
30: namespace duckdb {
31: 
32: //===--------------------------------------------------------------------===//
33: // Cast bool -> Numeric
34: //===--------------------------------------------------------------------===//
35: template <>
36: bool TryCast::Operation(bool input, bool &result, bool strict) {
37: 	return NumericTryCast::Operation<bool, bool>(input, result, strict);
38: }
39: 
40: template <>
41: bool TryCast::Operation(bool input, int8_t &result, bool strict) {
42: 	return NumericTryCast::Operation<bool, int8_t>(input, result, strict);
43: }
44: 
45: template <>
46: bool TryCast::Operation(bool input, int16_t &result, bool strict) {
47: 	return NumericTryCast::Operation<bool, int16_t>(input, result, strict);
48: }
49: 
50: template <>
51: bool TryCast::Operation(bool input, int32_t &result, bool strict) {
52: 	return NumericTryCast::Operation<bool, int32_t>(input, result, strict);
53: }
54: 
55: template <>
56: bool TryCast::Operation(bool input, int64_t &result, bool strict) {
57: 	return NumericTryCast::Operation<bool, int64_t>(input, result, strict);
58: }
59: 
60: template <>
61: bool TryCast::Operation(bool input, hugeint_t &result, bool strict) {
62: 	return NumericTryCast::Operation<bool, hugeint_t>(input, result, strict);
63: }
64: 
65: template <>
66: bool TryCast::Operation(bool input, uint8_t &result, bool strict) {
67: 	return NumericTryCast::Operation<bool, uint8_t>(input, result, strict);
68: }
69: 
70: template <>
71: bool TryCast::Operation(bool input, uint16_t &result, bool strict) {
72: 	return NumericTryCast::Operation<bool, uint16_t>(input, result, strict);
73: }
74: 
75: template <>
76: bool TryCast::Operation(bool input, uint32_t &result, bool strict) {
77: 	return NumericTryCast::Operation<bool, uint32_t>(input, result, strict);
78: }
79: 
80: template <>
81: bool TryCast::Operation(bool input, uint64_t &result, bool strict) {
82: 	return NumericTryCast::Operation<bool, uint64_t>(input, result, strict);
83: }
84: 
85: template <>
86: bool TryCast::Operation(bool input, float &result, bool strict) {
87: 	return NumericTryCast::Operation<bool, float>(input, result, strict);
88: }
89: 
90: template <>
91: bool TryCast::Operation(bool input, double &result, bool strict) {
92: 	return NumericTryCast::Operation<bool, double>(input, result, strict);
93: }
94: 
95: //===--------------------------------------------------------------------===//
96: // Cast int8_t -> Numeric
97: //===--------------------------------------------------------------------===//
98: template <>
99: bool TryCast::Operation(int8_t input, bool &result, bool strict) {
100: 	return NumericTryCast::Operation<int8_t, bool>(input, result, strict);
101: }
102: 
103: template <>
104: bool TryCast::Operation(int8_t input, int8_t &result, bool strict) {
105: 	return NumericTryCast::Operation<int8_t, int8_t>(input, result, strict);
106: }
107: 
108: template <>
109: bool TryCast::Operation(int8_t input, int16_t &result, bool strict) {
110: 	return NumericTryCast::Operation<int8_t, int16_t>(input, result, strict);
111: }
112: 
113: template <>
114: bool TryCast::Operation(int8_t input, int32_t &result, bool strict) {
115: 	return NumericTryCast::Operation<int8_t, int32_t>(input, result, strict);
116: }
117: 
118: template <>
119: bool TryCast::Operation(int8_t input, int64_t &result, bool strict) {
120: 	return NumericTryCast::Operation<int8_t, int64_t>(input, result, strict);
121: }
122: 
123: template <>
124: bool TryCast::Operation(int8_t input, hugeint_t &result, bool strict) {
125: 	return NumericTryCast::Operation<int8_t, hugeint_t>(input, result, strict);
126: }
127: 
128: template <>
129: bool TryCast::Operation(int8_t input, uint8_t &result, bool strict) {
130: 	return NumericTryCast::Operation<int8_t, uint8_t>(input, result, strict);
131: }
132: 
133: template <>
134: bool TryCast::Operation(int8_t input, uint16_t &result, bool strict) {
135: 	return NumericTryCast::Operation<int8_t, uint16_t>(input, result, strict);
136: }
137: 
138: template <>
139: bool TryCast::Operation(int8_t input, uint32_t &result, bool strict) {
140: 	return NumericTryCast::Operation<int8_t, uint32_t>(input, result, strict);
141: }
142: 
143: template <>
144: bool TryCast::Operation(int8_t input, uint64_t &result, bool strict) {
145: 	return NumericTryCast::Operation<int8_t, uint64_t>(input, result, strict);
146: }
147: 
148: template <>
149: bool TryCast::Operation(int8_t input, float &result, bool strict) {
150: 	return NumericTryCast::Operation<int8_t, float>(input, result, strict);
151: }
152: 
153: template <>
154: bool TryCast::Operation(int8_t input, double &result, bool strict) {
155: 	return NumericTryCast::Operation<int8_t, double>(input, result, strict);
156: }
157: 
158: //===--------------------------------------------------------------------===//
159: // Cast int16_t -> Numeric
160: //===--------------------------------------------------------------------===//
161: template <>
162: bool TryCast::Operation(int16_t input, bool &result, bool strict) {
163: 	return NumericTryCast::Operation<int16_t, bool>(input, result, strict);
164: }
165: 
166: template <>
167: bool TryCast::Operation(int16_t input, int8_t &result, bool strict) {
168: 	return NumericTryCast::Operation<int16_t, int8_t>(input, result, strict);
169: }
170: 
171: template <>
172: bool TryCast::Operation(int16_t input, int16_t &result, bool strict) {
173: 	return NumericTryCast::Operation<int16_t, int16_t>(input, result, strict);
174: }
175: 
176: template <>
177: bool TryCast::Operation(int16_t input, int32_t &result, bool strict) {
178: 	return NumericTryCast::Operation<int16_t, int32_t>(input, result, strict);
179: }
180: 
181: template <>
182: bool TryCast::Operation(int16_t input, int64_t &result, bool strict) {
183: 	return NumericTryCast::Operation<int16_t, int64_t>(input, result, strict);
184: }
185: 
186: template <>
187: bool TryCast::Operation(int16_t input, hugeint_t &result, bool strict) {
188: 	return NumericTryCast::Operation<int16_t, hugeint_t>(input, result, strict);
189: }
190: 
191: template <>
192: bool TryCast::Operation(int16_t input, uint8_t &result, bool strict) {
193: 	return NumericTryCast::Operation<int16_t, uint8_t>(input, result, strict);
194: }
195: 
196: template <>
197: bool TryCast::Operation(int16_t input, uint16_t &result, bool strict) {
198: 	return NumericTryCast::Operation<int16_t, uint16_t>(input, result, strict);
199: }
200: 
201: template <>
202: bool TryCast::Operation(int16_t input, uint32_t &result, bool strict) {
203: 	return NumericTryCast::Operation<int16_t, uint32_t>(input, result, strict);
204: }
205: 
206: template <>
207: bool TryCast::Operation(int16_t input, uint64_t &result, bool strict) {
208: 	return NumericTryCast::Operation<int16_t, uint64_t>(input, result, strict);
209: }
210: 
211: template <>
212: bool TryCast::Operation(int16_t input, float &result, bool strict) {
213: 	return NumericTryCast::Operation<int16_t, float>(input, result, strict);
214: }
215: 
216: template <>
217: bool TryCast::Operation(int16_t input, double &result, bool strict) {
218: 	return NumericTryCast::Operation<int16_t, double>(input, result, strict);
219: }
220: 
221: //===--------------------------------------------------------------------===//
222: // Cast int32_t -> Numeric
223: //===--------------------------------------------------------------------===//
224: template <>
225: bool TryCast::Operation(int32_t input, bool &result, bool strict) {
226: 	return NumericTryCast::Operation<int32_t, bool>(input, result, strict);
227: }
228: 
229: template <>
230: bool TryCast::Operation(int32_t input, int8_t &result, bool strict) {
231: 	return NumericTryCast::Operation<int32_t, int8_t>(input, result, strict);
232: }
233: 
234: template <>
235: bool TryCast::Operation(int32_t input, int16_t &result, bool strict) {
236: 	return NumericTryCast::Operation<int32_t, int16_t>(input, result, strict);
237: }
238: 
239: template <>
240: bool TryCast::Operation(int32_t input, int32_t &result, bool strict) {
241: 	return NumericTryCast::Operation<int32_t, int32_t>(input, result, strict);
242: }
243: 
244: template <>
245: bool TryCast::Operation(int32_t input, int64_t &result, bool strict) {
246: 	return NumericTryCast::Operation<int32_t, int64_t>(input, result, strict);
247: }
248: 
249: template <>
250: bool TryCast::Operation(int32_t input, hugeint_t &result, bool strict) {
251: 	return NumericTryCast::Operation<int32_t, hugeint_t>(input, result, strict);
252: }
253: 
254: template <>
255: bool TryCast::Operation(int32_t input, uint8_t &result, bool strict) {
256: 	return NumericTryCast::Operation<int32_t, uint8_t>(input, result, strict);
257: }
258: 
259: template <>
260: bool TryCast::Operation(int32_t input, uint16_t &result, bool strict) {
261: 	return NumericTryCast::Operation<int32_t, uint16_t>(input, result, strict);
262: }
263: 
264: template <>
265: bool TryCast::Operation(int32_t input, uint32_t &result, bool strict) {
266: 	return NumericTryCast::Operation<int32_t, uint32_t>(input, result, strict);
267: }
268: 
269: template <>
270: bool TryCast::Operation(int32_t input, uint64_t &result, bool strict) {
271: 	return NumericTryCast::Operation<int32_t, uint64_t>(input, result, strict);
272: }
273: 
274: template <>
275: bool TryCast::Operation(int32_t input, float &result, bool strict) {
276: 	return NumericTryCast::Operation<int32_t, float>(input, result, strict);
277: }
278: 
279: template <>
280: bool TryCast::Operation(int32_t input, double &result, bool strict) {
281: 	return NumericTryCast::Operation<int32_t, double>(input, result, strict);
282: }
283: 
284: //===--------------------------------------------------------------------===//
285: // Cast int64_t -> Numeric
286: //===--------------------------------------------------------------------===//
287: template <>
288: bool TryCast::Operation(int64_t input, bool &result, bool strict) {
289: 	return NumericTryCast::Operation<int64_t, bool>(input, result, strict);
290: }
291: 
292: template <>
293: bool TryCast::Operation(int64_t input, int8_t &result, bool strict) {
294: 	return NumericTryCast::Operation<int64_t, int8_t>(input, result, strict);
295: }
296: 
297: template <>
298: bool TryCast::Operation(int64_t input, int16_t &result, bool strict) {
299: 	return NumericTryCast::Operation<int64_t, int16_t>(input, result, strict);
300: }
301: 
302: template <>
303: bool TryCast::Operation(int64_t input, int32_t &result, bool strict) {
304: 	return NumericTryCast::Operation<int64_t, int32_t>(input, result, strict);
305: }
306: 
307: template <>
308: bool TryCast::Operation(int64_t input, int64_t &result, bool strict) {
309: 	return NumericTryCast::Operation<int64_t, int64_t>(input, result, strict);
310: }
311: 
312: template <>
313: bool TryCast::Operation(int64_t input, hugeint_t &result, bool strict) {
314: 	return NumericTryCast::Operation<int64_t, hugeint_t>(input, result, strict);
315: }
316: 
317: template <>
318: bool TryCast::Operation(int64_t input, uint8_t &result, bool strict) {
319: 	return NumericTryCast::Operation<int64_t, uint8_t>(input, result, strict);
320: }
321: 
322: template <>
323: bool TryCast::Operation(int64_t input, uint16_t &result, bool strict) {
324: 	return NumericTryCast::Operation<int64_t, uint16_t>(input, result, strict);
325: }
326: 
327: template <>
328: bool TryCast::Operation(int64_t input, uint32_t &result, bool strict) {
329: 	return NumericTryCast::Operation<int64_t, uint32_t>(input, result, strict);
330: }
331: 
332: template <>
333: bool TryCast::Operation(int64_t input, uint64_t &result, bool strict) {
334: 	return NumericTryCast::Operation<int64_t, uint64_t>(input, result, strict);
335: }
336: 
337: template <>
338: bool TryCast::Operation(int64_t input, float &result, bool strict) {
339: 	return NumericTryCast::Operation<int64_t, float>(input, result, strict);
340: }
341: 
342: template <>
343: bool TryCast::Operation(int64_t input, double &result, bool strict) {
344: 	return NumericTryCast::Operation<int64_t, double>(input, result, strict);
345: }
346: 
347: //===--------------------------------------------------------------------===//
348: // Cast hugeint_t -> Numeric
349: //===--------------------------------------------------------------------===//
350: template <>
351: bool TryCast::Operation(hugeint_t input, bool &result, bool strict) {
352: 	return NumericTryCast::Operation<hugeint_t, bool>(input, result, strict);
353: }
354: 
355: template <>
356: bool TryCast::Operation(hugeint_t input, int8_t &result, bool strict) {
357: 	return NumericTryCast::Operation<hugeint_t, int8_t>(input, result, strict);
358: }
359: 
360: template <>
361: bool TryCast::Operation(hugeint_t input, int16_t &result, bool strict) {
362: 	return NumericTryCast::Operation<hugeint_t, int16_t>(input, result, strict);
363: }
364: 
365: template <>
366: bool TryCast::Operation(hugeint_t input, int32_t &result, bool strict) {
367: 	return NumericTryCast::Operation<hugeint_t, int32_t>(input, result, strict);
368: }
369: 
370: template <>
371: bool TryCast::Operation(hugeint_t input, int64_t &result, bool strict) {
372: 	return NumericTryCast::Operation<hugeint_t, int64_t>(input, result, strict);
373: }
374: 
375: template <>
376: bool TryCast::Operation(hugeint_t input, hugeint_t &result, bool strict) {
377: 	return NumericTryCast::Operation<hugeint_t, hugeint_t>(input, result, strict);
378: }
379: 
380: template <>
381: bool TryCast::Operation(hugeint_t input, uint8_t &result, bool strict) {
382: 	return NumericTryCast::Operation<hugeint_t, uint8_t>(input, result, strict);
383: }
384: 
385: template <>
386: bool TryCast::Operation(hugeint_t input, uint16_t &result, bool strict) {
387: 	return NumericTryCast::Operation<hugeint_t, uint16_t>(input, result, strict);
388: }
389: 
390: template <>
391: bool TryCast::Operation(hugeint_t input, uint32_t &result, bool strict) {
392: 	return NumericTryCast::Operation<hugeint_t, uint32_t>(input, result, strict);
393: }
394: 
395: template <>
396: bool TryCast::Operation(hugeint_t input, uint64_t &result, bool strict) {
397: 	return NumericTryCast::Operation<hugeint_t, uint64_t>(input, result, strict);
398: }
399: 
400: template <>
401: bool TryCast::Operation(hugeint_t input, float &result, bool strict) {
402: 	return NumericTryCast::Operation<hugeint_t, float>(input, result, strict);
403: }
404: 
405: template <>
406: bool TryCast::Operation(hugeint_t input, double &result, bool strict) {
407: 	return NumericTryCast::Operation<hugeint_t, double>(input, result, strict);
408: }
409: 
410: //===--------------------------------------------------------------------===//
411: // Cast uint8_t -> Numeric
412: //===--------------------------------------------------------------------===//
413: template <>
414: bool TryCast::Operation(uint8_t input, bool &result, bool strict) {
415: 	return NumericTryCast::Operation<uint8_t, bool>(input, result, strict);
416: }
417: 
418: template <>
419: bool TryCast::Operation(uint8_t input, int8_t &result, bool strict) {
420: 	return NumericTryCast::Operation<uint8_t, int8_t>(input, result, strict);
421: }
422: 
423: template <>
424: bool TryCast::Operation(uint8_t input, int16_t &result, bool strict) {
425: 	return NumericTryCast::Operation<uint8_t, int16_t>(input, result, strict);
426: }
427: 
428: template <>
429: bool TryCast::Operation(uint8_t input, int32_t &result, bool strict) {
430: 	return NumericTryCast::Operation<uint8_t, int32_t>(input, result, strict);
431: }
432: 
433: template <>
434: bool TryCast::Operation(uint8_t input, int64_t &result, bool strict) {
435: 	return NumericTryCast::Operation<uint8_t, int64_t>(input, result, strict);
436: }
437: 
438: template <>
439: bool TryCast::Operation(uint8_t input, hugeint_t &result, bool strict) {
440: 	return NumericTryCast::Operation<uint8_t, hugeint_t>(input, result, strict);
441: }
442: 
443: template <>
444: bool TryCast::Operation(uint8_t input, uint8_t &result, bool strict) {
445: 	return NumericTryCast::Operation<uint8_t, uint8_t>(input, result, strict);
446: }
447: 
448: template <>
449: bool TryCast::Operation(uint8_t input, uint16_t &result, bool strict) {
450: 	return NumericTryCast::Operation<uint8_t, uint16_t>(input, result, strict);
451: }
452: 
453: template <>
454: bool TryCast::Operation(uint8_t input, uint32_t &result, bool strict) {
455: 	return NumericTryCast::Operation<uint8_t, uint32_t>(input, result, strict);
456: }
457: 
458: template <>
459: bool TryCast::Operation(uint8_t input, uint64_t &result, bool strict) {
460: 	return NumericTryCast::Operation<uint8_t, uint64_t>(input, result, strict);
461: }
462: 
463: template <>
464: bool TryCast::Operation(uint8_t input, float &result, bool strict) {
465: 	return NumericTryCast::Operation<uint8_t, float>(input, result, strict);
466: }
467: 
468: template <>
469: bool TryCast::Operation(uint8_t input, double &result, bool strict) {
470: 	return NumericTryCast::Operation<uint8_t, double>(input, result, strict);
471: }
472: 
473: //===--------------------------------------------------------------------===//
474: // Cast uint16_t -> Numeric
475: //===--------------------------------------------------------------------===//
476: template <>
477: bool TryCast::Operation(uint16_t input, bool &result, bool strict) {
478: 	return NumericTryCast::Operation<uint16_t, bool>(input, result, strict);
479: }
480: 
481: template <>
482: bool TryCast::Operation(uint16_t input, int8_t &result, bool strict) {
483: 	return NumericTryCast::Operation<uint16_t, int8_t>(input, result, strict);
484: }
485: 
486: template <>
487: bool TryCast::Operation(uint16_t input, int16_t &result, bool strict) {
488: 	return NumericTryCast::Operation<uint16_t, int16_t>(input, result, strict);
489: }
490: 
491: template <>
492: bool TryCast::Operation(uint16_t input, int32_t &result, bool strict) {
493: 	return NumericTryCast::Operation<uint16_t, int32_t>(input, result, strict);
494: }
495: 
496: template <>
497: bool TryCast::Operation(uint16_t input, int64_t &result, bool strict) {
498: 	return NumericTryCast::Operation<uint16_t, int64_t>(input, result, strict);
499: }
500: 
501: template <>
502: bool TryCast::Operation(uint16_t input, hugeint_t &result, bool strict) {
503: 	return NumericTryCast::Operation<uint16_t, hugeint_t>(input, result, strict);
504: }
505: 
506: template <>
507: bool TryCast::Operation(uint16_t input, uint8_t &result, bool strict) {
508: 	return NumericTryCast::Operation<uint16_t, uint8_t>(input, result, strict);
509: }
510: 
511: template <>
512: bool TryCast::Operation(uint16_t input, uint16_t &result, bool strict) {
513: 	return NumericTryCast::Operation<uint16_t, uint16_t>(input, result, strict);
514: }
515: 
516: template <>
517: bool TryCast::Operation(uint16_t input, uint32_t &result, bool strict) {
518: 	return NumericTryCast::Operation<uint16_t, uint32_t>(input, result, strict);
519: }
520: 
521: template <>
522: bool TryCast::Operation(uint16_t input, uint64_t &result, bool strict) {
523: 	return NumericTryCast::Operation<uint16_t, uint64_t>(input, result, strict);
524: }
525: 
526: template <>
527: bool TryCast::Operation(uint16_t input, float &result, bool strict) {
528: 	return NumericTryCast::Operation<uint16_t, float>(input, result, strict);
529: }
530: 
531: template <>
532: bool TryCast::Operation(uint16_t input, double &result, bool strict) {
533: 	return NumericTryCast::Operation<uint16_t, double>(input, result, strict);
534: }
535: 
536: //===--------------------------------------------------------------------===//
537: // Cast uint32_t -> Numeric
538: //===--------------------------------------------------------------------===//
539: template <>
540: bool TryCast::Operation(uint32_t input, bool &result, bool strict) {
541: 	return NumericTryCast::Operation<uint32_t, bool>(input, result, strict);
542: }
543: 
544: template <>
545: bool TryCast::Operation(uint32_t input, int8_t &result, bool strict) {
546: 	return NumericTryCast::Operation<uint32_t, int8_t>(input, result, strict);
547: }
548: 
549: template <>
550: bool TryCast::Operation(uint32_t input, int16_t &result, bool strict) {
551: 	return NumericTryCast::Operation<uint32_t, int16_t>(input, result, strict);
552: }
553: 
554: template <>
555: bool TryCast::Operation(uint32_t input, int32_t &result, bool strict) {
556: 	return NumericTryCast::Operation<uint32_t, int32_t>(input, result, strict);
557: }
558: 
559: template <>
560: bool TryCast::Operation(uint32_t input, int64_t &result, bool strict) {
561: 	return NumericTryCast::Operation<uint32_t, int64_t>(input, result, strict);
562: }
563: 
564: template <>
565: bool TryCast::Operation(uint32_t input, hugeint_t &result, bool strict) {
566: 	return NumericTryCast::Operation<uint32_t, hugeint_t>(input, result, strict);
567: }
568: 
569: template <>
570: bool TryCast::Operation(uint32_t input, uint8_t &result, bool strict) {
571: 	return NumericTryCast::Operation<uint32_t, uint8_t>(input, result, strict);
572: }
573: 
574: template <>
575: bool TryCast::Operation(uint32_t input, uint16_t &result, bool strict) {
576: 	return NumericTryCast::Operation<uint32_t, uint16_t>(input, result, strict);
577: }
578: 
579: template <>
580: bool TryCast::Operation(uint32_t input, uint32_t &result, bool strict) {
581: 	return NumericTryCast::Operation<uint32_t, uint32_t>(input, result, strict);
582: }
583: 
584: template <>
585: bool TryCast::Operation(uint32_t input, uint64_t &result, bool strict) {
586: 	return NumericTryCast::Operation<uint32_t, uint64_t>(input, result, strict);
587: }
588: 
589: template <>
590: bool TryCast::Operation(uint32_t input, float &result, bool strict) {
591: 	return NumericTryCast::Operation<uint32_t, float>(input, result, strict);
592: }
593: 
594: template <>
595: bool TryCast::Operation(uint32_t input, double &result, bool strict) {
596: 	return NumericTryCast::Operation<uint32_t, double>(input, result, strict);
597: }
598: 
599: //===--------------------------------------------------------------------===//
600: // Cast uint64_t -> Numeric
601: //===--------------------------------------------------------------------===//
602: template <>
603: bool TryCast::Operation(uint64_t input, bool &result, bool strict) {
604: 	return NumericTryCast::Operation<uint64_t, bool>(input, result, strict);
605: }
606: 
607: template <>
608: bool TryCast::Operation(uint64_t input, int8_t &result, bool strict) {
609: 	return NumericTryCast::Operation<uint64_t, int8_t>(input, result, strict);
610: }
611: 
612: template <>
613: bool TryCast::Operation(uint64_t input, int16_t &result, bool strict) {
614: 	return NumericTryCast::Operation<uint64_t, int16_t>(input, result, strict);
615: }
616: 
617: template <>
618: bool TryCast::Operation(uint64_t input, int32_t &result, bool strict) {
619: 	return NumericTryCast::Operation<uint64_t, int32_t>(input, result, strict);
620: }
621: 
622: template <>
623: bool TryCast::Operation(uint64_t input, int64_t &result, bool strict) {
624: 	return NumericTryCast::Operation<uint64_t, int64_t>(input, result, strict);
625: }
626: 
627: template <>
628: bool TryCast::Operation(uint64_t input, hugeint_t &result, bool strict) {
629: 	return NumericTryCast::Operation<uint64_t, hugeint_t>(input, result, strict);
630: }
631: 
632: template <>
633: bool TryCast::Operation(uint64_t input, uint8_t &result, bool strict) {
634: 	return NumericTryCast::Operation<uint64_t, uint8_t>(input, result, strict);
635: }
636: 
637: template <>
638: bool TryCast::Operation(uint64_t input, uint16_t &result, bool strict) {
639: 	return NumericTryCast::Operation<uint64_t, uint16_t>(input, result, strict);
640: }
641: 
642: template <>
643: bool TryCast::Operation(uint64_t input, uint32_t &result, bool strict) {
644: 	return NumericTryCast::Operation<uint64_t, uint32_t>(input, result, strict);
645: }
646: 
647: template <>
648: bool TryCast::Operation(uint64_t input, uint64_t &result, bool strict) {
649: 	return NumericTryCast::Operation<uint64_t, uint64_t>(input, result, strict);
650: }
651: 
652: template <>
653: bool TryCast::Operation(uint64_t input, float &result, bool strict) {
654: 	return NumericTryCast::Operation<uint64_t, float>(input, result, strict);
655: }
656: 
657: template <>
658: bool TryCast::Operation(uint64_t input, double &result, bool strict) {
659: 	return NumericTryCast::Operation<uint64_t, double>(input, result, strict);
660: }
661: 
662: //===--------------------------------------------------------------------===//
663: // Cast float -> Numeric
664: //===--------------------------------------------------------------------===//
665: template <>
666: bool TryCast::Operation(float input, bool &result, bool strict) {
667: 	return NumericTryCast::Operation<float, bool>(input, result, strict);
668: }
669: 
670: template <>
671: bool TryCast::Operation(float input, int8_t &result, bool strict) {
672: 	return NumericTryCast::Operation<float, int8_t>(input, result, strict);
673: }
674: 
675: template <>
676: bool TryCast::Operation(float input, int16_t &result, bool strict) {
677: 	return NumericTryCast::Operation<float, int16_t>(input, result, strict);
678: }
679: 
680: template <>
681: bool TryCast::Operation(float input, int32_t &result, bool strict) {
682: 	return NumericTryCast::Operation<float, int32_t>(input, result, strict);
683: }
684: 
685: template <>
686: bool TryCast::Operation(float input, int64_t &result, bool strict) {
687: 	return NumericTryCast::Operation<float, int64_t>(input, result, strict);
688: }
689: 
690: template <>
691: bool TryCast::Operation(float input, hugeint_t &result, bool strict) {
692: 	return NumericTryCast::Operation<float, hugeint_t>(input, result, strict);
693: }
694: 
695: template <>
696: bool TryCast::Operation(float input, uint8_t &result, bool strict) {
697: 	return NumericTryCast::Operation<float, uint8_t>(input, result, strict);
698: }
699: 
700: template <>
701: bool TryCast::Operation(float input, uint16_t &result, bool strict) {
702: 	return NumericTryCast::Operation<float, uint16_t>(input, result, strict);
703: }
704: 
705: template <>
706: bool TryCast::Operation(float input, uint32_t &result, bool strict) {
707: 	return NumericTryCast::Operation<float, uint32_t>(input, result, strict);
708: }
709: 
710: template <>
711: bool TryCast::Operation(float input, uint64_t &result, bool strict) {
712: 	return NumericTryCast::Operation<float, uint64_t>(input, result, strict);
713: }
714: 
715: template <>
716: bool TryCast::Operation(float input, float &result, bool strict) {
717: 	return NumericTryCast::Operation<float, float>(input, result, strict);
718: }
719: 
720: template <>
721: bool TryCast::Operation(float input, double &result, bool strict) {
722: 	return NumericTryCast::Operation<float, double>(input, result, strict);
723: }
724: 
725: //===--------------------------------------------------------------------===//
726: // Cast double -> Numeric
727: //===--------------------------------------------------------------------===//
728: template <>
729: bool TryCast::Operation(double input, bool &result, bool strict) {
730: 	return NumericTryCast::Operation<double, bool>(input, result, strict);
731: }
732: 
733: template <>
734: bool TryCast::Operation(double input, int8_t &result, bool strict) {
735: 	return NumericTryCast::Operation<double, int8_t>(input, result, strict);
736: }
737: 
738: template <>
739: bool TryCast::Operation(double input, int16_t &result, bool strict) {
740: 	return NumericTryCast::Operation<double, int16_t>(input, result, strict);
741: }
742: 
743: template <>
744: bool TryCast::Operation(double input, int32_t &result, bool strict) {
745: 	return NumericTryCast::Operation<double, int32_t>(input, result, strict);
746: }
747: 
748: template <>
749: bool TryCast::Operation(double input, int64_t &result, bool strict) {
750: 	return NumericTryCast::Operation<double, int64_t>(input, result, strict);
751: }
752: 
753: template <>
754: bool TryCast::Operation(double input, hugeint_t &result, bool strict) {
755: 	return NumericTryCast::Operation<double, hugeint_t>(input, result, strict);
756: }
757: 
758: template <>
759: bool TryCast::Operation(double input, uint8_t &result, bool strict) {
760: 	return NumericTryCast::Operation<double, uint8_t>(input, result, strict);
761: }
762: 
763: template <>
764: bool TryCast::Operation(double input, uint16_t &result, bool strict) {
765: 	return NumericTryCast::Operation<double, uint16_t>(input, result, strict);
766: }
767: 
768: template <>
769: bool TryCast::Operation(double input, uint32_t &result, bool strict) {
770: 	return NumericTryCast::Operation<double, uint32_t>(input, result, strict);
771: }
772: 
773: template <>
774: bool TryCast::Operation(double input, uint64_t &result, bool strict) {
775: 	return NumericTryCast::Operation<double, uint64_t>(input, result, strict);
776: }
777: 
778: template <>
779: bool TryCast::Operation(double input, float &result, bool strict) {
780: 	return NumericTryCast::Operation<double, float>(input, result, strict);
781: }
782: 
783: template <>
784: bool TryCast::Operation(double input, double &result, bool strict) {
785: 	return NumericTryCast::Operation<double, double>(input, result, strict);
786: }
787: 
788: //===--------------------------------------------------------------------===//
789: // Cast String -> Numeric
790: //===--------------------------------------------------------------------===//
791: template <typename T>
792: struct IntegerCastData {
793: 	using Result = T;
794: 	Result result;
795: 	bool seen_decimal;
796: };
797: 
798: struct IntegerCastOperation {
799: 	template <class T, bool NEGATIVE>
800: 	static bool HandleDigit(T &state, uint8_t digit) {
801: 		using result_t = typename T::Result;
802: 		if (NEGATIVE) {
803: 			if (state.result < (NumericLimits<result_t>::Minimum() + digit) / 10) {
804: 				return false;
805: 			}
806: 			state.result = state.result * 10 - digit;
807: 		} else {
808: 			if (state.result > (NumericLimits<result_t>::Maximum() - digit) / 10) {
809: 				return false;
810: 			}
811: 			state.result = state.result * 10 + digit;
812: 		}
813: 		return true;
814: 	}
815: 
816: 	template <class T, bool NEGATIVE>
817: 	static bool HandleHexDigit(T &state, uint8_t digit) {
818: 		using result_t = typename T::Result;
819: 		if (state.result > (NumericLimits<result_t>::Maximum() - digit) / 16) {
820: 			return false;
821: 		}
822: 		state.result = state.result * 16 + digit;
823: 		return true;
824: 	}
825: 
826: 	template <class T, bool NEGATIVE>
827: 	static bool HandleBinaryDigit(T &state, uint8_t digit) {
828: 		using result_t = typename T::Result;
829: 		if (state.result > (NumericLimits<result_t>::Maximum() - digit) / 2) {
830: 			return false;
831: 		}
832: 		state.result = state.result * 2 + digit;
833: 		return true;
834: 	}
835: 
836: 	template <class T, bool NEGATIVE>
837: 	static bool HandleExponent(T &state, int32_t exponent) {
838: 		using result_t = typename T::Result;
839: 		double dbl_res = state.result * std::pow(10.0L, exponent);
840: 		if (dbl_res < (double)NumericLimits<result_t>::Minimum() ||
841: 		    dbl_res > (double)NumericLimits<result_t>::Maximum()) {
842: 			return false;
843: 		}
844: 		state.result = (result_t)std::nearbyint(dbl_res);
845: 		return true;
846: 	}
847: 
848: 	template <class T, bool NEGATIVE, bool ALLOW_EXPONENT>
849: 	static bool HandleDecimal(T &state, uint8_t digit) {
850: 		if (state.seen_decimal) {
851: 			return true;
852: 		}
853: 		state.seen_decimal = true;
854: 		// round the integer based on what is after the decimal point
855: 		// if digit >= 5, then we round up (or down in case of negative numbers)
856: 		auto increment = digit >= 5;
857: 		if (!increment) {
858: 			return true;
859: 		}
860: 		if (NEGATIVE) {
861: 			if (state.result == NumericLimits<typename T::Result>::Minimum()) {
862: 				return false;
863: 			}
864: 			state.result--;
865: 		} else {
866: 			if (state.result == NumericLimits<typename T::Result>::Maximum()) {
867: 				return false;
868: 			}
869: 			state.result++;
870: 		}
871: 		return true;
872: 	}
873: 
874: 	template <class T, bool NEGATIVE>
875: 	static bool Finalize(T &state) {
876: 		return true;
877: 	}
878: };
879: 
880: template <class T, bool NEGATIVE, bool ALLOW_EXPONENT, class OP = IntegerCastOperation, char decimal_separator = '.'>
881: static bool IntegerCastLoop(const char *buf, idx_t len, T &result, bool strict) {
882: 	idx_t start_pos;
883: 	if (NEGATIVE) {
884: 		start_pos = 1;
885: 	} else {
886: 		if (*buf == '+') {
887: 			if (strict) {
888: 				// leading plus is not allowed in strict mode
889: 				return false;
890: 			}
891: 			start_pos = 1;
892: 		} else {
893: 			start_pos = 0;
894: 		}
895: 	}
896: 	idx_t pos = start_pos;
897: 	while (pos < len) {
898: 		if (!StringUtil::CharacterIsDigit(buf[pos])) {
899: 			// not a digit!
900: 			if (buf[pos] == decimal_separator) {
901: 				if (strict) {
902: 					return false;
903: 				}
904: 				bool number_before_period = pos > start_pos;
905: 				// decimal point: we accept decimal values for integers as well
906: 				// we just truncate them
907: 				// make sure everything after the period is a number
908: 				pos++;
909: 				idx_t start_digit = pos;
910: 				while (pos < len) {
911: 					if (!StringUtil::CharacterIsDigit(buf[pos])) {
912: 						break;
913: 					}
914: 					if (!OP::template HandleDecimal<T, NEGATIVE, ALLOW_EXPONENT>(result, buf[pos] - '0')) {
915: 						return false;
916: 					}
917: 					pos++;
918: 				}
919: 				// make sure there is either (1) one number after the period, or (2) one number before the period
920: 				// i.e. we accept "1." and ".1" as valid numbers, but not "."
921: 				if (!(number_before_period || pos > start_digit)) {
922: 					return false;
923: 				}
924: 				if (pos >= len) {
925: 					break;
926: 				}
927: 			}
928: 			if (StringUtil::CharacterIsSpace(buf[pos])) {
929: 				// skip any trailing spaces
930: 				while (++pos < len) {
931: 					if (!StringUtil::CharacterIsSpace(buf[pos])) {
932: 						return false;
933: 					}
934: 				}
935: 				break;
936: 			}
937: 			if (ALLOW_EXPONENT) {
938: 				if (buf[pos] == 'e' || buf[pos] == 'E') {
939: 					if (pos == start_pos) {
940: 						return false;
941: 					}
942: 					pos++;
943: 					if (pos >= len) {
944: 						return false;
945: 					}
946: 					using ExponentData = IntegerCastData<int32_t>;
947: 					ExponentData exponent {0, false};
948: 					int negative = buf[pos] == '-';
949: 					if (negative) {
950: 						if (!IntegerCastLoop<ExponentData, true, false, IntegerCastOperation, decimal_separator>(
951: 						        buf + pos, len - pos, exponent, strict)) {
952: 							return false;
953: 						}
954: 					} else {
955: 						if (!IntegerCastLoop<ExponentData, false, false, IntegerCastOperation, decimal_separator>(
956: 						        buf + pos, len - pos, exponent, strict)) {
957: 							return false;
958: 						}
959: 					}
960: 					return OP::template HandleExponent<T, NEGATIVE>(result, exponent.result);
961: 				}
962: 			}
963: 			return false;
964: 		}
965: 		uint8_t digit = buf[pos++] - '0';
966: 		if (!OP::template HandleDigit<T, NEGATIVE>(result, digit)) {
967: 			return false;
968: 		}
969: 	}
970: 	if (!OP::template Finalize<T, NEGATIVE>(result)) {
971: 		return false;
972: 	}
973: 	return pos > start_pos;
974: }
975: 
976: template <class T, bool NEGATIVE, bool ALLOW_EXPONENT, class OP = IntegerCastOperation>
977: static bool IntegerHexCastLoop(const char *buf, idx_t len, T &result, bool strict) {
978: 	if (ALLOW_EXPONENT || NEGATIVE) {
979: 		return false;
980: 	}
981: 	idx_t start_pos = 1;
982: 	idx_t pos = start_pos;
983: 	char current_char;
984: 	while (pos < len) {
985: 		current_char = StringUtil::CharacterToLower(buf[pos]);
986: 		if (!StringUtil::CharacterIsHex(current_char)) {
987: 			return false;
988: 		}
989: 		uint8_t digit;
990: 		if (current_char >= 'a') {
991: 			digit = current_char - 'a' + 10;
992: 		} else {
993: 			digit = current_char - '0';
994: 		}
995: 		pos++;
996: 		if (!OP::template HandleHexDigit<T, NEGATIVE>(result, digit)) {
997: 			return false;
998: 		}
999: 	}
1000: 	if (!OP::template Finalize<T, NEGATIVE>(result)) {
1001: 		return false;
1002: 	}
1003: 	return pos > start_pos;
1004: }
1005: 
1006: template <class T, bool NEGATIVE, bool ALLOW_EXPONENT, class OP = IntegerCastOperation>
1007: static bool IntegerBinaryCastLoop(const char *buf, idx_t len, T &result, bool strict) {
1008: 	if (ALLOW_EXPONENT || NEGATIVE) {
1009: 		return false;
1010: 	}
1011: 	idx_t start_pos = 1;
1012: 	idx_t pos = start_pos;
1013: 	uint8_t digit;
1014: 	char current_char;
1015: 	while (pos < len) {
1016: 		current_char = buf[pos];
1017: 		if (current_char == '_' && pos > start_pos) {
1018: 			// skip underscore, if it is not the first character
1019: 			pos++;
1020: 			if (pos == len) {
1021: 				// we cant end on an underscore either
1022: 				return false;
1023: 			}
1024: 			continue;
1025: 		} else if (current_char == '0') {
1026: 			digit = 0;
1027: 		} else if (current_char == '1') {
1028: 			digit = 1;
1029: 		} else {
1030: 			return false;
1031: 		}
1032: 		pos++;
1033: 		if (!OP::template HandleBinaryDigit<T, NEGATIVE>(result, digit)) {
1034: 			return false;
1035: 		}
1036: 	}
1037: 	if (!OP::template Finalize<T, NEGATIVE>(result)) {
1038: 		return false;
1039: 	}
1040: 	return pos > start_pos;
1041: }
1042: 
1043: template <class T, bool IS_SIGNED = true, bool ALLOW_EXPONENT = true, class OP = IntegerCastOperation,
1044:           bool ZERO_INITIALIZE = true, char decimal_separator = '.'>
1045: static bool TryIntegerCast(const char *buf, idx_t len, T &result, bool strict) {
1046: 	// skip any spaces at the start
1047: 	while (len > 0 && StringUtil::CharacterIsSpace(*buf)) {
1048: 		buf++;
1049: 		len--;
1050: 	}
1051: 	if (len == 0) {
1052: 		return false;
1053: 	}
1054: 	if (ZERO_INITIALIZE) {
1055: 		memset(&result, 0, sizeof(T));
1056: 	}
1057: 	// if the number is negative, we set the negative flag and skip the negative sign
1058: 	if (*buf == '-') {
1059: 		if (!IS_SIGNED) {
1060: 			// Need to check if its not -0
1061: 			idx_t pos = 1;
1062: 			while (pos < len) {
1063: 				if (buf[pos++] != '0') {
1064: 					return false;
1065: 				}
1066: 			}
1067: 		}
1068: 		return IntegerCastLoop<T, true, ALLOW_EXPONENT, OP, decimal_separator>(buf, len, result, strict);
1069: 	}
1070: 	if (len > 1 && *buf == '0') {
1071: 		if (buf[1] == 'x' || buf[1] == 'X') {
1072: 			// If it starts with 0x or 0X, we parse it as a hex value
1073: 			buf++;
1074: 			len--;
1075: 			return IntegerHexCastLoop<T, false, false, OP>(buf, len, result, strict);
1076: 		} else if (buf[1] == 'b' || buf[1] == 'B') {
1077: 			// If it starts with 0b or 0B, we parse it as a binary value
1078: 			buf++;
1079: 			len--;
1080: 			return IntegerBinaryCastLoop<T, false, false, OP>(buf, len, result, strict);
1081: 		} else if (strict && StringUtil::CharacterIsDigit(buf[1])) {
1082: 			// leading zeros are not allowed in strict mode
1083: 			return false;
1084: 		}
1085: 	}
1086: 	return IntegerCastLoop<T, false, ALLOW_EXPONENT, OP, decimal_separator>(buf, len, result, strict);
1087: }
1088: 
1089: template <typename T, bool IS_SIGNED = true>
1090: static inline bool TrySimpleIntegerCast(const char *buf, idx_t len, T &result, bool strict) {
1091: 	IntegerCastData<T> data;
1092: 	if (TryIntegerCast<IntegerCastData<T>, IS_SIGNED>(buf, len, data, strict)) {
1093: 		result = data.result;
1094: 		return true;
1095: 	}
1096: 	return false;
1097: }
1098: 
1099: template <>
1100: bool TryCast::Operation(string_t input, bool &result, bool strict) {
1101: 	auto input_data = input.GetData();
1102: 	auto input_size = input.GetSize();
1103: 
1104: 	switch (input_size) {
1105: 	case 1: {
1106: 		char c = std::tolower(*input_data);
1107: 		if (c == 't' || (!strict && c == '1')) {
1108: 			result = true;
1109: 			return true;
1110: 		} else if (c == 'f' || (!strict && c == '0')) {
1111: 			result = false;
1112: 			return true;
1113: 		}
1114: 		return false;
1115: 	}
1116: 	case 4: {
1117: 		char t = std::tolower(input_data[0]);
1118: 		char r = std::tolower(input_data[1]);
1119: 		char u = std::tolower(input_data[2]);
1120: 		char e = std::tolower(input_data[3]);
1121: 		if (t == 't' && r == 'r' && u == 'u' && e == 'e') {
1122: 			result = true;
1123: 			return true;
1124: 		}
1125: 		return false;
1126: 	}
1127: 	case 5: {
1128: 		char f = std::tolower(input_data[0]);
1129: 		char a = std::tolower(input_data[1]);
1130: 		char l = std::tolower(input_data[2]);
1131: 		char s = std::tolower(input_data[3]);
1132: 		char e = std::tolower(input_data[4]);
1133: 		if (f == 'f' && a == 'a' && l == 'l' && s == 's' && e == 'e') {
1134: 			result = false;
1135: 			return true;
1136: 		}
1137: 		return false;
1138: 	}
1139: 	default:
1140: 		return false;
1141: 	}
1142: }
1143: template <>
1144: bool TryCast::Operation(string_t input, int8_t &result, bool strict) {
1145: 	return TrySimpleIntegerCast<int8_t>(input.GetData(), input.GetSize(), result, strict);
1146: }
1147: template <>
1148: bool TryCast::Operation(string_t input, int16_t &result, bool strict) {
1149: 	return TrySimpleIntegerCast<int16_t>(input.GetData(), input.GetSize(), result, strict);
1150: }
1151: template <>
1152: bool TryCast::Operation(string_t input, int32_t &result, bool strict) {
1153: 	return TrySimpleIntegerCast<int32_t>(input.GetData(), input.GetSize(), result, strict);
1154: }
1155: template <>
1156: bool TryCast::Operation(string_t input, int64_t &result, bool strict) {
1157: 	return TrySimpleIntegerCast<int64_t>(input.GetData(), input.GetSize(), result, strict);
1158: }
1159: 
1160: template <>
1161: bool TryCast::Operation(string_t input, uint8_t &result, bool strict) {
1162: 	return TrySimpleIntegerCast<uint8_t, false>(input.GetData(), input.GetSize(), result, strict);
1163: }
1164: template <>
1165: bool TryCast::Operation(string_t input, uint16_t &result, bool strict) {
1166: 	return TrySimpleIntegerCast<uint16_t, false>(input.GetData(), input.GetSize(), result, strict);
1167: }
1168: template <>
1169: bool TryCast::Operation(string_t input, uint32_t &result, bool strict) {
1170: 	return TrySimpleIntegerCast<uint32_t, false>(input.GetData(), input.GetSize(), result, strict);
1171: }
1172: template <>
1173: bool TryCast::Operation(string_t input, uint64_t &result, bool strict) {
1174: 	return TrySimpleIntegerCast<uint64_t, false>(input.GetData(), input.GetSize(), result, strict);
1175: }
1176: 
1177: template <class T, char decimal_separator = '.'>
1178: static bool TryDoubleCast(const char *buf, idx_t len, T &result, bool strict) {
1179: 	// skip any spaces at the start
1180: 	while (len > 0 && StringUtil::CharacterIsSpace(*buf)) {
1181: 		buf++;
1182: 		len--;
1183: 	}
1184: 	if (len == 0) {
1185: 		return false;
1186: 	}
1187: 	if (*buf == '+') {
1188: 		if (strict) {
1189: 			// plus is not allowed in strict mode
1190: 			return false;
1191: 		}
1192: 		buf++;
1193: 		len--;
1194: 	}
1195: 	if (strict && len >= 2) {
1196: 		if (buf[0] == '0' && StringUtil::CharacterIsDigit(buf[1])) {
1197: 			// leading zeros are not allowed in strict mode
1198: 			return false;
1199: 		}
1200: 	}
1201: 	auto endptr = buf + len;
1202: 	auto parse_result = duckdb_fast_float::from_chars(buf, buf + len, result, decimal_separator);
1203: 	if (parse_result.ec != std::errc()) {
1204: 		return false;
1205: 	}
1206: 	auto current_end = parse_result.ptr;
1207: 	if (!strict) {
1208: 		while (current_end < endptr && StringUtil::CharacterIsSpace(*current_end)) {
1209: 			current_end++;
1210: 		}
1211: 	}
1212: 	return current_end == endptr;
1213: }
1214: 
1215: template <>
1216: bool TryCast::Operation(string_t input, float &result, bool strict) {
1217: 	return TryDoubleCast<float>(input.GetData(), input.GetSize(), result, strict);
1218: }
1219: 
1220: template <>
1221: bool TryCast::Operation(string_t input, double &result, bool strict) {
1222: 	return TryDoubleCast<double>(input.GetData(), input.GetSize(), result, strict);
1223: }
1224: 
1225: template <>
1226: bool TryCastErrorMessageCommaSeparated::Operation(string_t input, float &result, string *error_message, bool strict) {
1227: 	if (!TryDoubleCast<float, ','>(input.GetData(), input.GetSize(), result, strict)) {
1228: 		HandleCastError::AssignError(StringUtil::Format("Could not cast string to float: \"%s\"", input.GetString()),
1229: 		                             error_message);
1230: 		return false;
1231: 	}
1232: 	return true;
1233: }
1234: 
1235: template <>
1236: bool TryCastErrorMessageCommaSeparated::Operation(string_t input, double &result, string *error_message, bool strict) {
1237: 	if (!TryDoubleCast<double, ','>(input.GetData(), input.GetSize(), result, strict)) {
1238: 		HandleCastError::AssignError(StringUtil::Format("Could not cast string to double: \"%s\"", input.GetString()),
1239: 		                             error_message);
1240: 		return false;
1241: 	}
1242: 	return true;
1243: }
1244: 
1245: //===--------------------------------------------------------------------===//
1246: // Cast From Date
1247: //===--------------------------------------------------------------------===//
1248: template <>
1249: bool TryCast::Operation(date_t input, date_t &result, bool strict) {
1250: 	result = input;
1251: 	return true;
1252: }
1253: 
1254: template <>
1255: bool TryCast::Operation(date_t input, timestamp_t &result, bool strict) {
1256: 	if (input == date_t::infinity()) {
1257: 		result = timestamp_t::infinity();
1258: 		return true;
1259: 	} else if (input == date_t::ninfinity()) {
1260: 		result = timestamp_t::ninfinity();
1261: 		return true;
1262: 	}
1263: 	return Timestamp::TryFromDatetime(input, Time::FromTime(0, 0, 0), result);
1264: }
1265: 
1266: //===--------------------------------------------------------------------===//
1267: // Cast From Time
1268: //===--------------------------------------------------------------------===//
1269: template <>
1270: bool TryCast::Operation(dtime_t input, dtime_t &result, bool strict) {
1271: 	result = input;
1272: 	return true;
1273: }
1274: 
1275: template <>
1276: bool TryCast::Operation(dtime_t input, dtime_tz_t &result, bool strict) {
1277: 	result = dtime_tz_t(input, 0);
1278: 	return true;
1279: }
1280: 
1281: //===--------------------------------------------------------------------===//
1282: // Cast From Time With Time Zone (Offset)
1283: //===--------------------------------------------------------------------===//
1284: template <>
1285: bool TryCast::Operation(dtime_tz_t input, dtime_tz_t &result, bool strict) {
1286: 	result = input;
1287: 	return true;
1288: }
1289: 
1290: template <>
1291: bool TryCast::Operation(dtime_tz_t input, dtime_t &result, bool strict) {
1292: 	result = input.time();
1293: 	return true;
1294: }
1295: 
1296: //===--------------------------------------------------------------------===//
1297: // Cast From Timestamps
1298: //===--------------------------------------------------------------------===//
1299: template <>
1300: bool TryCast::Operation(timestamp_t input, date_t &result, bool strict) {
1301: 	result = Timestamp::GetDate(input);
1302: 	return true;
1303: }
1304: 
1305: template <>
1306: bool TryCast::Operation(timestamp_t input, dtime_t &result, bool strict) {
1307: 	if (!Timestamp::IsFinite(input)) {
1308: 		return false;
1309: 	}
1310: 	result = Timestamp::GetTime(input);
1311: 	return true;
1312: }
1313: 
1314: template <>
1315: bool TryCast::Operation(timestamp_t input, timestamp_t &result, bool strict) {
1316: 	result = input;
1317: 	return true;
1318: }
1319: 
1320: template <>
1321: bool TryCast::Operation(timestamp_t input, dtime_tz_t &result, bool strict) {
1322: 	if (!Timestamp::IsFinite(input)) {
1323: 		return false;
1324: 	}
1325: 	result = dtime_tz_t(Timestamp::GetTime(input), 0);
1326: 	return true;
1327: }
1328: 
1329: //===--------------------------------------------------------------------===//
1330: // Cast from Interval
1331: //===--------------------------------------------------------------------===//
1332: template <>
1333: bool TryCast::Operation(interval_t input, interval_t &result, bool strict) {
1334: 	result = input;
1335: 	return true;
1336: }
1337: 
1338: //===--------------------------------------------------------------------===//
1339: // Non-Standard Timestamps
1340: //===--------------------------------------------------------------------===//
1341: template <>
1342: duckdb::string_t CastFromTimestampNS::Operation(duckdb::timestamp_t input, Vector &result) {
1343: 	return StringCast::Operation<timestamp_t>(Timestamp::FromEpochNanoSeconds(input.value), result);
1344: }
1345: template <>
1346: duckdb::string_t CastFromTimestampMS::Operation(duckdb::timestamp_t input, Vector &result) {
1347: 	return StringCast::Operation<timestamp_t>(Timestamp::FromEpochMs(input.value), result);
1348: }
1349: template <>
1350: duckdb::string_t CastFromTimestampSec::Operation(duckdb::timestamp_t input, Vector &result) {
1351: 	return StringCast::Operation<timestamp_t>(Timestamp::FromEpochSeconds(input.value), result);
1352: }
1353: 
1354: template <>
1355: timestamp_t CastTimestampUsToMs::Operation(timestamp_t input) {
1356: 	timestamp_t cast_timestamp(Timestamp::GetEpochMs(input));
1357: 	return cast_timestamp;
1358: }
1359: 
1360: template <>
1361: timestamp_t CastTimestampUsToNs::Operation(timestamp_t input) {
1362: 	timestamp_t cast_timestamp(Timestamp::GetEpochNanoSeconds(input));
1363: 	return cast_timestamp;
1364: }
1365: 
1366: template <>
1367: timestamp_t CastTimestampUsToSec::Operation(timestamp_t input) {
1368: 	timestamp_t cast_timestamp(Timestamp::GetEpochSeconds(input));
1369: 	return cast_timestamp;
1370: }
1371: template <>
1372: timestamp_t CastTimestampMsToUs::Operation(timestamp_t input) {
1373: 	return Timestamp::FromEpochMs(input.value);
1374: }
1375: 
1376: template <>
1377: timestamp_t CastTimestampNsToUs::Operation(timestamp_t input) {
1378: 	return Timestamp::FromEpochNanoSeconds(input.value);
1379: }
1380: 
1381: template <>
1382: timestamp_t CastTimestampSecToUs::Operation(timestamp_t input) {
1383: 	return Timestamp::FromEpochSeconds(input.value);
1384: }
1385: 
1386: //===--------------------------------------------------------------------===//
1387: // Cast To Timestamp
1388: //===--------------------------------------------------------------------===//
1389: template <>
1390: bool TryCastToTimestampNS::Operation(string_t input, timestamp_t &result, bool strict) {
1391: 	if (!TryCast::Operation<string_t, timestamp_t>(input, result, strict)) {
1392: 		return false;
1393: 	}
1394: 	result = Timestamp::GetEpochNanoSeconds(result);
1395: 	return true;
1396: }
1397: 
1398: template <>
1399: bool TryCastToTimestampMS::Operation(string_t input, timestamp_t &result, bool strict) {
1400: 	if (!TryCast::Operation<string_t, timestamp_t>(input, result, strict)) {
1401: 		return false;
1402: 	}
1403: 	result = Timestamp::GetEpochMs(result);
1404: 	return true;
1405: }
1406: 
1407: template <>
1408: bool TryCastToTimestampSec::Operation(string_t input, timestamp_t &result, bool strict) {
1409: 	if (!TryCast::Operation<string_t, timestamp_t>(input, result, strict)) {
1410: 		return false;
1411: 	}
1412: 	result = Timestamp::GetEpochSeconds(result);
1413: 	return true;
1414: }
1415: 
1416: template <>
1417: bool TryCastToTimestampNS::Operation(date_t input, timestamp_t &result, bool strict) {
1418: 	if (!TryCast::Operation<date_t, timestamp_t>(input, result, strict)) {
1419: 		return false;
1420: 	}
1421: 	if (!TryMultiplyOperator::Operation(result.value, Interval::NANOS_PER_MICRO, result.value)) {
1422: 		return false;
1423: 	}
1424: 	return true;
1425: }
1426: 
1427: template <>
1428: bool TryCastToTimestampMS::Operation(date_t input, timestamp_t &result, bool strict) {
1429: 	if (!TryCast::Operation<date_t, timestamp_t>(input, result, strict)) {
1430: 		return false;
1431: 	}
1432: 	result.value /= Interval::MICROS_PER_MSEC;
1433: 	return true;
1434: }
1435: 
1436: template <>
1437: bool TryCastToTimestampSec::Operation(date_t input, timestamp_t &result, bool strict) {
1438: 	if (!TryCast::Operation<date_t, timestamp_t>(input, result, strict)) {
1439: 		return false;
1440: 	}
1441: 	result.value /= Interval::MICROS_PER_MSEC * Interval::MSECS_PER_SEC;
1442: 	return true;
1443: }
1444: 
1445: //===--------------------------------------------------------------------===//
1446: // Cast From Blob
1447: //===--------------------------------------------------------------------===//
1448: template <>
1449: string_t CastFromBlob::Operation(string_t input, Vector &vector) {
1450: 	idx_t result_size = Blob::GetStringSize(input);
1451: 
1452: 	string_t result = StringVector::EmptyString(vector, result_size);
1453: 	Blob::ToString(input, result.GetDataWriteable());
1454: 	result.Finalize();
1455: 
1456: 	return result;
1457: }
1458: 
1459: template <>
1460: string_t CastFromBlobToBit::Operation(string_t input, Vector &vector) {
1461: 	idx_t result_size = input.GetSize() + 1;
1462: 	if (result_size <= 1) {
1463: 		throw ConversionException("Cannot cast empty BLOB to BIT");
1464: 	}
1465: 	return StringVector::AddStringOrBlob(vector, Bit::BlobToBit(input));
1466: }
1467: 
1468: //===--------------------------------------------------------------------===//
1469: // Cast From Bit
1470: //===--------------------------------------------------------------------===//
1471: template <>
1472: string_t CastFromBitToString::Operation(string_t input, Vector &vector) {
1473: 
1474: 	idx_t result_size = Bit::BitLength(input);
1475: 	string_t result = StringVector::EmptyString(vector, result_size);
1476: 	Bit::ToString(input, result.GetDataWriteable());
1477: 	result.Finalize();
1478: 
1479: 	return result;
1480: }
1481: 
1482: //===--------------------------------------------------------------------===//
1483: // Cast From Pointer
1484: //===--------------------------------------------------------------------===//
1485: template <>
1486: string_t CastFromPointer::Operation(uintptr_t input, Vector &vector) {
1487: 	std::string s = duckdb_fmt::format("0x{:x}", input);
1488: 	return StringVector::AddString(vector, s);
1489: }
1490: 
1491: //===--------------------------------------------------------------------===//
1492: // Cast To Blob
1493: //===--------------------------------------------------------------------===//
1494: template <>
1495: bool TryCastToBlob::Operation(string_t input, string_t &result, Vector &result_vector, string *error_message,
1496:                               bool strict) {
1497: 	idx_t result_size;
1498: 	if (!Blob::TryGetBlobSize(input, result_size, error_message)) {
1499: 		return false;
1500: 	}
1501: 
1502: 	result = StringVector::EmptyString(result_vector, result_size);
1503: 	Blob::ToBlob(input, data_ptr_cast(result.GetDataWriteable()));
1504: 	result.Finalize();
1505: 	return true;
1506: }
1507: 
1508: //===--------------------------------------------------------------------===//
1509: // Cast To Bit
1510: //===--------------------------------------------------------------------===//
1511: template <>
1512: bool TryCastToBit::Operation(string_t input, string_t &result, Vector &result_vector, string *error_message,
1513:                              bool strict) {
1514: 	idx_t result_size;
1515: 	if (!Bit::TryGetBitStringSize(input, result_size, error_message)) {
1516: 		return false;
1517: 	}
1518: 
1519: 	result = StringVector::EmptyString(result_vector, result_size);
1520: 	Bit::ToBit(input, result);
1521: 	result.Finalize();
1522: 	return true;
1523: }
1524: 
1525: template <>
1526: bool CastFromBitToNumeric::Operation(string_t input, bool &result, bool strict) {
1527: 	D_ASSERT(input.GetSize() > 1);
1528: 
1529: 	uint8_t value;
1530: 	bool success = CastFromBitToNumeric::Operation(input, value, strict);
1531: 	result = (value > 0);
1532: 	return (success);
1533: }
1534: 
1535: template <>
1536: bool CastFromBitToNumeric::Operation(string_t input, hugeint_t &result, bool strict) {
1537: 	D_ASSERT(input.GetSize() > 1);
1538: 
1539: 	if (input.GetSize() - 1 > sizeof(hugeint_t)) {
1540: 		throw ConversionException("Bitstring doesn't fit inside of %s", GetTypeId<hugeint_t>());
1541: 	}
1542: 	Bit::BitToNumeric(input, result);
1543: 	if (result < NumericLimits<hugeint_t>::Minimum()) {
1544: 		throw ConversionException("Minimum limit for HUGEINT is %s", NumericLimits<hugeint_t>::Minimum().ToString());
1545: 	}
1546: 	return (true);
1547: }
1548: 
1549: //===--------------------------------------------------------------------===//
1550: // Cast From UUID
1551: //===--------------------------------------------------------------------===//
1552: template <>
1553: string_t CastFromUUID::Operation(hugeint_t input, Vector &vector) {
1554: 	string_t result = StringVector::EmptyString(vector, 36);
1555: 	UUID::ToString(input, result.GetDataWriteable());
1556: 	result.Finalize();
1557: 	return result;
1558: }
1559: 
1560: //===--------------------------------------------------------------------===//
1561: // Cast To UUID
1562: //===--------------------------------------------------------------------===//
1563: template <>
1564: bool TryCastToUUID::Operation(string_t input, hugeint_t &result, Vector &result_vector, string *error_message,
1565:                               bool strict) {
1566: 	return UUID::FromString(input.GetString(), result);
1567: }
1568: 
1569: //===--------------------------------------------------------------------===//
1570: // Cast To Date
1571: //===--------------------------------------------------------------------===//
1572: template <>
1573: bool TryCastErrorMessage::Operation(string_t input, date_t &result, string *error_message, bool strict) {
1574: 	if (!TryCast::Operation<string_t, date_t>(input, result, strict)) {
1575: 		HandleCastError::AssignError(Date::ConversionError(input), error_message);
1576: 		return false;
1577: 	}
1578: 	return true;
1579: }
1580: 
1581: template <>
1582: bool TryCast::Operation(string_t input, date_t &result, bool strict) {
1583: 	idx_t pos;
1584: 	bool special = false;
1585: 	return Date::TryConvertDate(input.GetData(), input.GetSize(), pos, result, special, strict);
1586: }
1587: 
1588: template <>
1589: date_t Cast::Operation(string_t input) {
1590: 	return Date::FromCString(input.GetData(), input.GetSize());
1591: }
1592: 
1593: //===--------------------------------------------------------------------===//
1594: // Cast To Time
1595: //===--------------------------------------------------------------------===//
1596: template <>
1597: bool TryCastErrorMessage::Operation(string_t input, dtime_t &result, string *error_message, bool strict) {
1598: 	if (!TryCast::Operation<string_t, dtime_t>(input, result, strict)) {
1599: 		HandleCastError::AssignError(Time::ConversionError(input), error_message);
1600: 		return false;
1601: 	}
1602: 	return true;
1603: }
1604: 
1605: template <>
1606: bool TryCast::Operation(string_t input, dtime_t &result, bool strict) {
1607: 	idx_t pos;
1608: 	return Time::TryConvertTime(input.GetData(), input.GetSize(), pos, result, strict);
1609: }
1610: 
1611: template <>
1612: dtime_t Cast::Operation(string_t input) {
1613: 	return Time::FromCString(input.GetData(), input.GetSize());
1614: }
1615: 
1616: //===--------------------------------------------------------------------===//
1617: // Cast To TimeTZ
1618: //===--------------------------------------------------------------------===//
1619: template <>
1620: bool TryCastErrorMessage::Operation(string_t input, dtime_tz_t &result, string *error_message, bool strict) {
1621: 	if (!TryCast::Operation<string_t, dtime_tz_t>(input, result, strict)) {
1622: 		HandleCastError::AssignError(Time::ConversionError(input), error_message);
1623: 		return false;
1624: 	}
1625: 	return true;
1626: }
1627: 
1628: template <>
1629: bool TryCast::Operation(string_t input, dtime_tz_t &result, bool strict) {
1630: 	idx_t pos;
1631: 	return Time::TryConvertTimeTZ(input.GetData(), input.GetSize(), pos, result, strict);
1632: }
1633: 
1634: template <>
1635: dtime_tz_t Cast::Operation(string_t input) {
1636: 	dtime_tz_t result;
1637: 	if (!TryCast::Operation(input, result, false)) {
1638: 		throw ConversionException(Time::ConversionError(input));
1639: 	}
1640: 	return result;
1641: }
1642: 
1643: //===--------------------------------------------------------------------===//
1644: // Cast To Timestamp
1645: //===--------------------------------------------------------------------===//
1646: template <>
1647: bool TryCastErrorMessage::Operation(string_t input, timestamp_t &result, string *error_message, bool strict) {
1648: 	auto cast_result = Timestamp::TryConvertTimestamp(input.GetData(), input.GetSize(), result);
1649: 	if (cast_result == TimestampCastResult::SUCCESS) {
1650: 		return true;
1651: 	}
1652: 	if (cast_result == TimestampCastResult::ERROR_INCORRECT_FORMAT) {
1653: 		HandleCastError::AssignError(Timestamp::ConversionError(input), error_message);
1654: 	} else {
1655: 		HandleCastError::AssignError(Timestamp::UnsupportedTimezoneError(input), error_message);
1656: 	}
1657: 	return false;
1658: }
1659: 
1660: template <>
1661: bool TryCast::Operation(string_t input, timestamp_t &result, bool strict) {
1662: 	return Timestamp::TryConvertTimestamp(input.GetData(), input.GetSize(), result) == TimestampCastResult::SUCCESS;
1663: }
1664: 
1665: template <>
1666: timestamp_t Cast::Operation(string_t input) {
1667: 	return Timestamp::FromCString(input.GetData(), input.GetSize());
1668: }
1669: 
1670: //===--------------------------------------------------------------------===//
1671: // Cast From Interval
1672: //===--------------------------------------------------------------------===//
1673: template <>
1674: bool TryCastErrorMessage::Operation(string_t input, interval_t &result, string *error_message, bool strict) {
1675: 	return Interval::FromCString(input.GetData(), input.GetSize(), result, error_message, strict);
1676: }
1677: 
1678: //===--------------------------------------------------------------------===//
1679: // Cast From Hugeint
1680: //===--------------------------------------------------------------------===//
1681: // parsing hugeint from string is done a bit differently for performance reasons
1682: // for other integer types we keep track of a single value
1683: // and multiply that value by 10 for every digit we read
1684: // however, for hugeints, multiplication is very expensive (>20X as expensive as for int64)
1685: // for that reason, we parse numbers first into an int64 value
1686: // when that value is full, we perform a HUGEINT multiplication to flush it into the hugeint
1687: // this takes the number of HUGEINT multiplications down from [0-38] to [0-2]
1688: struct HugeIntCastData {
1689: 	hugeint_t hugeint;
1690: 	int64_t intermediate;
1691: 	uint8_t digits;
1692: 	bool decimal;
1693: 
1694: 	bool Flush() {
1695: 		if (digits == 0 && intermediate == 0) {
1696: 			return true;
1697: 		}
1698: 		if (hugeint.lower != 0 || hugeint.upper != 0) {
1699: 			if (digits > 38) {
1700: 				return false;
1701: 			}
1702: 			if (!Hugeint::TryMultiply(hugeint, Hugeint::POWERS_OF_TEN[digits], hugeint)) {
1703: 				return false;
1704: 			}
1705: 		}
1706: 		if (!Hugeint::AddInPlace(hugeint, hugeint_t(intermediate))) {
1707: 			return false;
1708: 		}
1709: 		digits = 0;
1710: 		intermediate = 0;
1711: 		return true;
1712: 	}
1713: };
1714: 
1715: struct HugeIntegerCastOperation {
1716: 	template <class T, bool NEGATIVE>
1717: 	static bool HandleDigit(T &result, uint8_t digit) {
1718: 		if (NEGATIVE) {
1719: 			if (result.intermediate < (NumericLimits<int64_t>::Minimum() + digit) / 10) {
1720: 				// intermediate is full: need to flush it
1721: 				if (!result.Flush()) {
1722: 					return false;
1723: 				}
1724: 			}
1725: 			result.intermediate = result.intermediate * 10 - digit;
1726: 		} else {
1727: 			if (result.intermediate > (NumericLimits<int64_t>::Maximum() - digit) / 10) {
1728: 				if (!result.Flush()) {
1729: 					return false;
1730: 				}
1731: 			}
1732: 			result.intermediate = result.intermediate * 10 + digit;
1733: 		}
1734: 		result.digits++;
1735: 		return true;
1736: 	}
1737: 
1738: 	template <class T, bool NEGATIVE>
1739: 	static bool HandleHexDigit(T &result, uint8_t digit) {
1740: 		return false;
1741: 	}
1742: 
1743: 	template <class T, bool NEGATIVE>
1744: 	static bool HandleBinaryDigit(T &result, uint8_t digit) {
1745: 		if (result.intermediate > (NumericLimits<int64_t>::Maximum() - digit) / 2) {
1746: 			// intermediate is full: need to flush it
1747: 			if (!result.Flush()) {
1748: 				return false;
1749: 			}
1750: 		}
1751: 		result.intermediate = result.intermediate * 2 + digit;
1752: 		result.digits++;
1753: 		return true;
1754: 	}
1755: 
1756: 	template <class T, bool NEGATIVE>
1757: 	static bool HandleExponent(T &result, int32_t exponent) {
1758: 		if (!result.Flush()) {
1759: 			return false;
1760: 		}
1761: 		if (exponent < -38 || exponent > 38) {
1762: 			// out of range for exact exponent: use double and convert
1763: 			double dbl_res = Hugeint::Cast<double>(result.hugeint) * std::pow(10.0L, exponent);
1764: 			if (dbl_res < Hugeint::Cast<double>(NumericLimits<hugeint_t>::Minimum()) ||
1765: 			    dbl_res > Hugeint::Cast<double>(NumericLimits<hugeint_t>::Maximum())) {
1766: 				return false;
1767: 			}
1768: 			result.hugeint = Hugeint::Convert(dbl_res);
1769: 			return true;
1770: 		}
1771: 		if (exponent < 0) {
1772: 			// negative exponent: divide by power of 10
1773: 			result.hugeint = Hugeint::Divide(result.hugeint, Hugeint::POWERS_OF_TEN[-exponent]);
1774: 			return true;
1775: 		} else {
1776: 			// positive exponent: multiply by power of 10
1777: 			return Hugeint::TryMultiply(result.hugeint, Hugeint::POWERS_OF_TEN[exponent], result.hugeint);
1778: 		}
1779: 	}
1780: 
1781: 	template <class T, bool NEGATIVE, bool ALLOW_EXPONENT>
1782: 	static bool HandleDecimal(T &result, uint8_t digit) {
1783: 		// Integer casts round
1784: 		if (!result.decimal) {
1785: 			if (!result.Flush()) {
1786: 				return false;
1787: 			}
1788: 			if (NEGATIVE) {
1789: 				result.intermediate = -(digit >= 5);
1790: 			} else {
1791: 				result.intermediate = (digit >= 5);
1792: 			}
1793: 		}
1794: 		result.decimal = true;
1795: 
1796: 		return true;
1797: 	}
1798: 
1799: 	template <class T, bool NEGATIVE>
1800: 	static bool Finalize(T &result) {
1801: 		return result.Flush();
1802: 	}
1803: };
1804: 
1805: template <>
1806: bool TryCast::Operation(string_t input, hugeint_t &result, bool strict) {
1807: 	HugeIntCastData data;
1808: 	if (!TryIntegerCast<HugeIntCastData, true, true, HugeIntegerCastOperation>(input.GetData(), input.GetSize(), data,
1809: 	                                                                           strict)) {
1810: 		return false;
1811: 	}
1812: 	result = data.hugeint;
1813: 	return true;
1814: }
1815: 
1816: //===--------------------------------------------------------------------===//
1817: // Decimal String Cast
1818: //===--------------------------------------------------------------------===//
1819: 
1820: template <class TYPE>
1821: struct DecimalCastData {
1822: 	typedef TYPE type_t;
1823: 	TYPE result;
1824: 	uint8_t width;
1825: 	uint8_t scale;
1826: 	uint8_t digit_count;
1827: 	uint8_t decimal_count;
1828: 	//! Whether we have determined if the result should be rounded
1829: 	bool round_set;
1830: 	//! If the result should be rounded
1831: 	bool should_round;
1832: 	//! Only set when ALLOW_EXPONENT is enabled
1833: 	enum class ExponentType : uint8_t { NONE, POSITIVE, NEGATIVE };
1834: 	uint8_t excessive_decimals;
1835: 	ExponentType exponent_type;
1836: };
1837: 
1838: struct DecimalCastOperation {
1839: 	template <class T, bool NEGATIVE>
1840: 	static bool HandleDigit(T &state, uint8_t digit) {
1841: 		if (state.result == 0 && digit == 0) {
1842: 			// leading zero's don't count towards the digit count
1843: 			return true;
1844: 		}
1845: 		if (state.digit_count == state.width - state.scale) {
1846: 			// width of decimal type is exceeded!
1847: 			return false;
1848: 		}
1849: 		state.digit_count++;
1850: 		if (NEGATIVE) {
1851: 			if (state.result < (NumericLimits<typename T::type_t>::Minimum() / 10)) {
1852: 				return false;
1853: 			}
1854: 			state.result = state.result * 10 - digit;
1855: 		} else {
1856: 			if (state.result > (NumericLimits<typename T::type_t>::Maximum() / 10)) {
1857: 				return false;
1858: 			}
1859: 			state.result = state.result * 10 + digit;
1860: 		}
1861: 		return true;
1862: 	}
1863: 
1864: 	template <class T, bool NEGATIVE>
1865: 	static bool HandleHexDigit(T &state, uint8_t digit) {
1866: 		return false;
1867: 	}
1868: 
1869: 	template <class T, bool NEGATIVE>
1870: 	static bool HandleBinaryDigit(T &state, uint8_t digit) {
1871: 		return false;
1872: 	}
1873: 
1874: 	template <class T, bool NEGATIVE>
1875: 	static void RoundUpResult(T &state) {
1876: 		if (NEGATIVE) {
1877: 			state.result -= 1;
1878: 		} else {
1879: 			state.result += 1;
1880: 		}
1881: 	}
1882: 
1883: 	template <class T, bool NEGATIVE>
1884: 	static bool HandleExponent(T &state, int32_t exponent) {
1885: 		auto decimal_excess = (state.decimal_count > state.scale) ? state.decimal_count - state.scale : 0;
1886: 		if (exponent > 0) {
1887: 			state.exponent_type = T::ExponentType::POSITIVE;
1888: 			// Positive exponents need up to 'exponent' amount of digits
1889: 			// Everything beyond that amount needs to be truncated
1890: 			if (decimal_excess > exponent) {
1891: 				// We've allowed too many decimals
1892: 				state.excessive_decimals = decimal_excess - exponent;
1893: 				exponent = 0;
1894: 			} else {
1895: 				exponent -= decimal_excess;
1896: 			}
1897: 			D_ASSERT(exponent >= 0);
1898: 		} else if (exponent < 0) {
1899: 			state.exponent_type = T::ExponentType::NEGATIVE;
1900: 		}
1901: 		if (!Finalize<T, NEGATIVE>(state)) {
1902: 			return false;
1903: 		}
1904: 		if (exponent < 0) {
1905: 			bool round_up = false;
1906: 			for (idx_t i = 0; i < idx_t(-int64_t(exponent)); i++) {
1907: 				auto mod = state.result % 10;
1908: 				round_up = NEGATIVE ? mod <= -5 : mod >= 5;
1909: 				state.result /= 10;
1910: 				if (state.result == 0) {
1911: 					break;
1912: 				}
1913: 			}
1914: 			if (round_up) {
1915: 				RoundUpResult<T, NEGATIVE>(state);
1916: 			}
1917: 			return true;
1918: 		} else {
1919: 			// positive exponent: append 0's
1920: 			for (idx_t i = 0; i < idx_t(exponent); i++) {
1921: 				if (!HandleDigit<T, NEGATIVE>(state, 0)) {
1922: 					return false;
1923: 				}
1924: 			}
1925: 			return true;
1926: 		}
1927: 	}
1928: 
1929: 	template <class T, bool NEGATIVE, bool ALLOW_EXPONENT>
1930: 	static bool HandleDecimal(T &state, uint8_t digit) {
1931: 		if (state.decimal_count == state.scale && !state.round_set) {
1932: 			// Determine whether the last registered decimal should be rounded or not
1933: 			state.round_set = true;
1934: 			state.should_round = digit >= 5;
1935: 		}
1936: 		if (!ALLOW_EXPONENT && state.decimal_count == state.scale) {
1937: 			// we exceeded the amount of supported decimals
1938: 			// however, we don't throw an error here
1939: 			// we just truncate the decimal
1940: 			return true;
1941: 		}
1942: 		//! If we expect an exponent, we need to preserve the decimals
1943: 		//! But we don't want to overflow, so we prevent overflowing the result with this check
1944: 		if (state.digit_count + state.decimal_count >= DecimalWidth<decltype(state.result)>::max) {
1945: 			return true;
1946: 		}
1947: 		state.decimal_count++;
1948: 		if (NEGATIVE) {
1949: 			state.result = state.result * 10 - digit;
1950: 		} else {
1951: 			state.result = state.result * 10 + digit;
1952: 		}
1953: 		return true;
1954: 	}
1955: 
1956: 	template <class T, bool NEGATIVE>
1957: 	static bool TruncateExcessiveDecimals(T &state) {
1958: 		D_ASSERT(state.excessive_decimals);
1959: 		bool round_up = false;
1960: 		for (idx_t i = 0; i < state.excessive_decimals; i++) {
1961: 			auto mod = state.result % 10;
1962: 			round_up = NEGATIVE ? mod <= -5 : mod >= 5;
1963: 			state.result /= 10.0;
1964: 		}
1965: 		//! Only round up when exponents are involved
1966: 		if (state.exponent_type == T::ExponentType::POSITIVE && round_up) {
1967: 			RoundUpResult<T, NEGATIVE>(state);
1968: 		}
1969: 		D_ASSERT(state.decimal_count > state.scale);
1970: 		state.decimal_count = state.scale;
1971: 		return true;
1972: 	}
1973: 
1974: 	template <class T, bool NEGATIVE>
1975: 	static bool Finalize(T &state) {
1976: 		if (state.exponent_type != T::ExponentType::POSITIVE && state.decimal_count > state.scale) {
1977: 			//! Did not encounter an exponent, but ALLOW_EXPONENT was on
1978: 			state.excessive_decimals = state.decimal_count - state.scale;
1979: 		}
1980: 		if (state.excessive_decimals && !TruncateExcessiveDecimals<T, NEGATIVE>(state)) {
1981: 			return false;
1982: 		}
1983: 		if (state.exponent_type == T::ExponentType::NONE && state.round_set && state.should_round) {
1984: 			RoundUpResult<T, NEGATIVE>(state);
1985: 		}
1986: 		//  if we have not gotten exactly "scale" decimals, we need to multiply the result
1987: 		//  e.g. if we have a string "1.0" that is cast to a DECIMAL(9,3), the value needs to be 1000
1988: 		//  but we have only gotten the value "10" so far, so we multiply by 1000
1989: 		for (uint8_t i = state.decimal_count; i < state.scale; i++) {
1990: 			state.result *= 10;
1991: 		}
1992: 		return true;
1993: 	}
1994: };
1995: 
1996: template <class T, char decimal_separator = '.'>
1997: bool TryDecimalStringCast(string_t input, T &result, string *error_message, uint8_t width, uint8_t scale) {
1998: 	DecimalCastData<T> state;
1999: 	state.result = 0;
2000: 	state.width = width;
2001: 	state.scale = scale;
2002: 	state.digit_count = 0;
2003: 	state.decimal_count = 0;
2004: 	state.excessive_decimals = 0;
2005: 	state.exponent_type = DecimalCastData<T>::ExponentType::NONE;
2006: 	state.round_set = false;
2007: 	state.should_round = false;
2008: 	if (!TryIntegerCast<DecimalCastData<T>, true, true, DecimalCastOperation, false, decimal_separator>(
2009: 	        input.GetData(), input.GetSize(), state, false)) {
2010: 		string error = StringUtil::Format("Could not convert string \"%s\" to DECIMAL(%d,%d)", input.GetString(),
2011: 		                                  (int)width, (int)scale);
2012: 		HandleCastError::AssignError(error, error_message);
2013: 		return false;
2014: 	}
2015: 	result = state.result;
2016: 	return true;
2017: }
2018: 
2019: template <>
2020: bool TryCastToDecimal::Operation(string_t input, int16_t &result, string *error_message, uint8_t width, uint8_t scale) {
2021: 	return TryDecimalStringCast<int16_t>(input, result, error_message, width, scale);
2022: }
2023: 
2024: template <>
2025: bool TryCastToDecimal::Operation(string_t input, int32_t &result, string *error_message, uint8_t width, uint8_t scale) {
2026: 	return TryDecimalStringCast<int32_t>(input, result, error_message, width, scale);
2027: }
2028: 
2029: template <>
2030: bool TryCastToDecimal::Operation(string_t input, int64_t &result, string *error_message, uint8_t width, uint8_t scale) {
2031: 	return TryDecimalStringCast<int64_t>(input, result, error_message, width, scale);
2032: }
2033: 
2034: template <>
2035: bool TryCastToDecimal::Operation(string_t input, hugeint_t &result, string *error_message, uint8_t width,
2036:                                  uint8_t scale) {
2037: 	return TryDecimalStringCast<hugeint_t>(input, result, error_message, width, scale);
2038: }
2039: 
2040: template <>
2041: bool TryCastToDecimalCommaSeparated::Operation(string_t input, int16_t &result, string *error_message, uint8_t width,
2042:                                                uint8_t scale) {
2043: 	return TryDecimalStringCast<int16_t, ','>(input, result, error_message, width, scale);
2044: }
2045: 
2046: template <>
2047: bool TryCastToDecimalCommaSeparated::Operation(string_t input, int32_t &result, string *error_message, uint8_t width,
2048:                                                uint8_t scale) {
2049: 	return TryDecimalStringCast<int32_t, ','>(input, result, error_message, width, scale);
2050: }
2051: 
2052: template <>
2053: bool TryCastToDecimalCommaSeparated::Operation(string_t input, int64_t &result, string *error_message, uint8_t width,
2054:                                                uint8_t scale) {
2055: 	return TryDecimalStringCast<int64_t, ','>(input, result, error_message, width, scale);
2056: }
2057: 
2058: template <>
2059: bool TryCastToDecimalCommaSeparated::Operation(string_t input, hugeint_t &result, string *error_message, uint8_t width,
2060:                                                uint8_t scale) {
2061: 	return TryDecimalStringCast<hugeint_t, ','>(input, result, error_message, width, scale);
2062: }
2063: 
2064: template <>
2065: string_t StringCastFromDecimal::Operation(int16_t input, uint8_t width, uint8_t scale, Vector &result) {
2066: 	return DecimalToString::Format<int16_t, uint16_t>(input, width, scale, result);
2067: }
2068: 
2069: template <>
2070: string_t StringCastFromDecimal::Operation(int32_t input, uint8_t width, uint8_t scale, Vector &result) {
2071: 	return DecimalToString::Format<int32_t, uint32_t>(input, width, scale, result);
2072: }
2073: 
2074: template <>
2075: string_t StringCastFromDecimal::Operation(int64_t input, uint8_t width, uint8_t scale, Vector &result) {
2076: 	return DecimalToString::Format<int64_t, uint64_t>(input, width, scale, result);
2077: }
2078: 
2079: template <>
2080: string_t StringCastFromDecimal::Operation(hugeint_t input, uint8_t width, uint8_t scale, Vector &result) {
2081: 	return HugeintToStringCast::FormatDecimal(input, width, scale, result);
2082: }
2083: 
2084: //===--------------------------------------------------------------------===//
2085: // Decimal Casts
2086: //===--------------------------------------------------------------------===//
2087: // Decimal <-> Bool
2088: //===--------------------------------------------------------------------===//
2089: template <class T, class OP = NumericHelper>
2090: bool TryCastBoolToDecimal(bool input, T &result, string *error_message, uint8_t width, uint8_t scale) {
2091: 	if (width > scale) {
2092: 		result = input ? OP::POWERS_OF_TEN[scale] : 0;
2093: 		return true;
2094: 	} else {
2095: 		return TryCast::Operation<bool, T>(input, result);
2096: 	}
2097: }
2098: 
2099: template <>
2100: bool TryCastToDecimal::Operation(bool input, int16_t &result, string *error_message, uint8_t width, uint8_t scale) {
2101: 	return TryCastBoolToDecimal<int16_t>(input, result, error_message, width, scale);
2102: }
2103: 
2104: template <>
2105: bool TryCastToDecimal::Operation(bool input, int32_t &result, string *error_message, uint8_t width, uint8_t scale) {
2106: 	return TryCastBoolToDecimal<int32_t>(input, result, error_message, width, scale);
2107: }
2108: 
2109: template <>
2110: bool TryCastToDecimal::Operation(bool input, int64_t &result, string *error_message, uint8_t width, uint8_t scale) {
2111: 	return TryCastBoolToDecimal<int64_t>(input, result, error_message, width, scale);
2112: }
2113: 
2114: template <>
2115: bool TryCastToDecimal::Operation(bool input, hugeint_t &result, string *error_message, uint8_t width, uint8_t scale) {
2116: 	return TryCastBoolToDecimal<hugeint_t, Hugeint>(input, result, error_message, width, scale);
2117: }
2118: 
2119: template <>
2120: bool TryCastFromDecimal::Operation(int16_t input, bool &result, string *error_message, uint8_t width, uint8_t scale) {
2121: 	return TryCast::Operation<int16_t, bool>(input, result);
2122: }
2123: 
2124: template <>
2125: bool TryCastFromDecimal::Operation(int32_t input, bool &result, string *error_message, uint8_t width, uint8_t scale) {
2126: 	return TryCast::Operation<int32_t, bool>(input, result);
2127: }
2128: 
2129: template <>
2130: bool TryCastFromDecimal::Operation(int64_t input, bool &result, string *error_message, uint8_t width, uint8_t scale) {
2131: 	return TryCast::Operation<int64_t, bool>(input, result);
2132: }
2133: 
2134: template <>
2135: bool TryCastFromDecimal::Operation(hugeint_t input, bool &result, string *error_message, uint8_t width, uint8_t scale) {
2136: 	return TryCast::Operation<hugeint_t, bool>(input, result);
2137: }
2138: 
2139: //===--------------------------------------------------------------------===//
2140: // Numeric -> Decimal Cast
2141: //===--------------------------------------------------------------------===//
2142: struct SignedToDecimalOperator {
2143: 	template <class SRC, class DST>
2144: 	static bool Operation(SRC input, DST max_width) {
2145: 		return int64_t(input) >= int64_t(max_width) || int64_t(input) <= int64_t(-max_width);
2146: 	}
2147: };
2148: 
2149: struct UnsignedToDecimalOperator {
2150: 	template <class SRC, class DST>
2151: 	static bool Operation(SRC input, DST max_width) {
2152: 		return uint64_t(input) >= uint64_t(max_width);
2153: 	}
2154: };
2155: 
2156: template <class SRC, class DST, class OP = SignedToDecimalOperator>
2157: bool StandardNumericToDecimalCast(SRC input, DST &result, string *error_message, uint8_t width, uint8_t scale) {
2158: 	// check for overflow
2159: 	DST max_width = NumericHelper::POWERS_OF_TEN[width - scale];
2160: 	if (OP::template Operation<SRC, DST>(input, max_width)) {
2161: 		string error = StringUtil::Format("Could not cast value %d to DECIMAL(%d,%d)", input, width, scale);
2162: 		HandleCastError::AssignError(error, error_message);
2163: 		return false;
2164: 	}
2165: 	result = DST(input) * NumericHelper::POWERS_OF_TEN[scale];
2166: 	return true;
2167: }
2168: 
2169: template <class SRC>
2170: bool NumericToHugeDecimalCast(SRC input, hugeint_t &result, string *error_message, uint8_t width, uint8_t scale) {
2171: 	// check for overflow
2172: 	hugeint_t max_width = Hugeint::POWERS_OF_TEN[width - scale];
2173: 	hugeint_t hinput = Hugeint::Convert(input);
2174: 	if (hinput >= max_width || hinput <= -max_width) {
2175: 		string error = StringUtil::Format("Could not cast value %s to DECIMAL(%d,%d)", hinput.ToString(), width, scale);
2176: 		HandleCastError::AssignError(error, error_message);
2177: 		return false;
2178: 	}
2179: 	result = hinput * Hugeint::POWERS_OF_TEN[scale];
2180: 	return true;
2181: }
2182: 
2183: //===--------------------------------------------------------------------===//
2184: // Cast int8_t -> Decimal
2185: //===--------------------------------------------------------------------===//
2186: template <>
2187: bool TryCastToDecimal::Operation(int8_t input, int16_t &result, string *error_message, uint8_t width, uint8_t scale) {
2188: 	return StandardNumericToDecimalCast<int8_t, int16_t>(input, result, error_message, width, scale);
2189: }
2190: template <>
2191: bool TryCastToDecimal::Operation(int8_t input, int32_t &result, string *error_message, uint8_t width, uint8_t scale) {
2192: 	return StandardNumericToDecimalCast<int8_t, int32_t>(input, result, error_message, width, scale);
2193: }
2194: template <>
2195: bool TryCastToDecimal::Operation(int8_t input, int64_t &result, string *error_message, uint8_t width, uint8_t scale) {
2196: 	return StandardNumericToDecimalCast<int8_t, int64_t>(input, result, error_message, width, scale);
2197: }
2198: template <>
2199: bool TryCastToDecimal::Operation(int8_t input, hugeint_t &result, string *error_message, uint8_t width, uint8_t scale) {
2200: 	return NumericToHugeDecimalCast<int8_t>(input, result, error_message, width, scale);
2201: }
2202: 
2203: //===--------------------------------------------------------------------===//
2204: // Cast int16_t -> Decimal
2205: //===--------------------------------------------------------------------===//
2206: template <>
2207: bool TryCastToDecimal::Operation(int16_t input, int16_t &result, string *error_message, uint8_t width, uint8_t scale) {
2208: 	return StandardNumericToDecimalCast<int16_t, int16_t>(input, result, error_message, width, scale);
2209: }
2210: template <>
2211: bool TryCastToDecimal::Operation(int16_t input, int32_t &result, string *error_message, uint8_t width, uint8_t scale) {
2212: 	return StandardNumericToDecimalCast<int16_t, int32_t>(input, result, error_message, width, scale);
2213: }
2214: template <>
2215: bool TryCastToDecimal::Operation(int16_t input, int64_t &result, string *error_message, uint8_t width, uint8_t scale) {
2216: 	return StandardNumericToDecimalCast<int16_t, int64_t>(input, result, error_message, width, scale);
2217: }
2218: template <>
2219: bool TryCastToDecimal::Operation(int16_t input, hugeint_t &result, string *error_message, uint8_t width,
2220:                                  uint8_t scale) {
2221: 	return NumericToHugeDecimalCast<int16_t>(input, result, error_message, width, scale);
2222: }
2223: 
2224: //===--------------------------------------------------------------------===//
2225: // Cast int32_t -> Decimal
2226: //===--------------------------------------------------------------------===//
2227: template <>
2228: bool TryCastToDecimal::Operation(int32_t input, int16_t &result, string *error_message, uint8_t width, uint8_t scale) {
2229: 	return StandardNumericToDecimalCast<int32_t, int16_t>(input, result, error_message, width, scale);
2230: }
2231: template <>
2232: bool TryCastToDecimal::Operation(int32_t input, int32_t &result, string *error_message, uint8_t width, uint8_t scale) {
2233: 	return StandardNumericToDecimalCast<int32_t, int32_t>(input, result, error_message, width, scale);
2234: }
2235: template <>
2236: bool TryCastToDecimal::Operation(int32_t input, int64_t &result, string *error_message, uint8_t width, uint8_t scale) {
2237: 	return StandardNumericToDecimalCast<int32_t, int64_t>(input, result, error_message, width, scale);
2238: }
2239: template <>
2240: bool TryCastToDecimal::Operation(int32_t input, hugeint_t &result, string *error_message, uint8_t width,
2241:                                  uint8_t scale) {
2242: 	return NumericToHugeDecimalCast<int32_t>(input, result, error_message, width, scale);
2243: }
2244: 
2245: //===--------------------------------------------------------------------===//
2246: // Cast int64_t -> Decimal
2247: //===--------------------------------------------------------------------===//
2248: template <>
2249: bool TryCastToDecimal::Operation(int64_t input, int16_t &result, string *error_message, uint8_t width, uint8_t scale) {
2250: 	return StandardNumericToDecimalCast<int64_t, int16_t>(input, result, error_message, width, scale);
2251: }
2252: template <>
2253: bool TryCastToDecimal::Operation(int64_t input, int32_t &result, string *error_message, uint8_t width, uint8_t scale) {
2254: 	return StandardNumericToDecimalCast<int64_t, int32_t>(input, result, error_message, width, scale);
2255: }
2256: template <>
2257: bool TryCastToDecimal::Operation(int64_t input, int64_t &result, string *error_message, uint8_t width, uint8_t scale) {
2258: 	return StandardNumericToDecimalCast<int64_t, int64_t>(input, result, error_message, width, scale);
2259: }
2260: template <>
2261: bool TryCastToDecimal::Operation(int64_t input, hugeint_t &result, string *error_message, uint8_t width,
2262:                                  uint8_t scale) {
2263: 	return NumericToHugeDecimalCast<int64_t>(input, result, error_message, width, scale);
2264: }
2265: 
2266: //===--------------------------------------------------------------------===//
2267: // Cast uint8_t -> Decimal
2268: //===--------------------------------------------------------------------===//
2269: template <>
2270: bool TryCastToDecimal::Operation(uint8_t input, int16_t &result, string *error_message, uint8_t width, uint8_t scale) {
2271: 	return StandardNumericToDecimalCast<uint8_t, int16_t, UnsignedToDecimalOperator>(input, result, error_message,
2272: 	                                                                                 width, scale);
2273: }
2274: template <>
2275: bool TryCastToDecimal::Operation(uint8_t input, int32_t &result, string *error_message, uint8_t width, uint8_t scale) {
2276: 	return StandardNumericToDecimalCast<uint8_t, int32_t, UnsignedToDecimalOperator>(input, result, error_message,
2277: 	                                                                                 width, scale);
2278: }
2279: template <>
2280: bool TryCastToDecimal::Operation(uint8_t input, int64_t &result, string *error_message, uint8_t width, uint8_t scale) {
2281: 	return StandardNumericToDecimalCast<uint8_t, int64_t, UnsignedToDecimalOperator>(input, result, error_message,
2282: 	                                                                                 width, scale);
2283: }
2284: template <>
2285: bool TryCastToDecimal::Operation(uint8_t input, hugeint_t &result, string *error_message, uint8_t width,
2286:                                  uint8_t scale) {
2287: 	return NumericToHugeDecimalCast<uint8_t>(input, result, error_message, width, scale);
2288: }
2289: 
2290: //===--------------------------------------------------------------------===//
2291: // Cast uint16_t -> Decimal
2292: //===--------------------------------------------------------------------===//
2293: template <>
2294: bool TryCastToDecimal::Operation(uint16_t input, int16_t &result, string *error_message, uint8_t width, uint8_t scale) {
2295: 	return StandardNumericToDecimalCast<uint16_t, int16_t, UnsignedToDecimalOperator>(input, result, error_message,
2296: 	                                                                                  width, scale);
2297: }
2298: template <>
2299: bool TryCastToDecimal::Operation(uint16_t input, int32_t &result, string *error_message, uint8_t width, uint8_t scale) {
2300: 	return StandardNumericToDecimalCast<uint16_t, int32_t, UnsignedToDecimalOperator>(input, result, error_message,
2301: 	                                                                                  width, scale);
2302: }
2303: template <>
2304: bool TryCastToDecimal::Operation(uint16_t input, int64_t &result, string *error_message, uint8_t width, uint8_t scale) {
2305: 	return StandardNumericToDecimalCast<uint16_t, int64_t, UnsignedToDecimalOperator>(input, result, error_message,
2306: 	                                                                                  width, scale);
2307: }
2308: template <>
2309: bool TryCastToDecimal::Operation(uint16_t input, hugeint_t &result, string *error_message, uint8_t width,
2310:                                  uint8_t scale) {
2311: 	return NumericToHugeDecimalCast<uint16_t>(input, result, error_message, width, scale);
2312: }
2313: 
2314: //===--------------------------------------------------------------------===//
2315: // Cast uint32_t -> Decimal
2316: //===--------------------------------------------------------------------===//
2317: template <>
2318: bool TryCastToDecimal::Operation(uint32_t input, int16_t &result, string *error_message, uint8_t width, uint8_t scale) {
2319: 	return StandardNumericToDecimalCast<uint32_t, int16_t, UnsignedToDecimalOperator>(input, result, error_message,
2320: 	                                                                                  width, scale);
2321: }
2322: template <>
2323: bool TryCastToDecimal::Operation(uint32_t input, int32_t &result, string *error_message, uint8_t width, uint8_t scale) {
2324: 	return StandardNumericToDecimalCast<uint32_t, int32_t, UnsignedToDecimalOperator>(input, result, error_message,
2325: 	                                                                                  width, scale);
2326: }
2327: template <>
2328: bool TryCastToDecimal::Operation(uint32_t input, int64_t &result, string *error_message, uint8_t width, uint8_t scale) {
2329: 	return StandardNumericToDecimalCast<uint32_t, int64_t, UnsignedToDecimalOperator>(input, result, error_message,
2330: 	                                                                                  width, scale);
2331: }
2332: template <>
2333: bool TryCastToDecimal::Operation(uint32_t input, hugeint_t &result, string *error_message, uint8_t width,
2334:                                  uint8_t scale) {
2335: 	return NumericToHugeDecimalCast<uint32_t>(input, result, error_message, width, scale);
2336: }
2337: 
2338: //===--------------------------------------------------------------------===//
2339: // Cast uint64_t -> Decimal
2340: //===--------------------------------------------------------------------===//
2341: template <>
2342: bool TryCastToDecimal::Operation(uint64_t input, int16_t &result, string *error_message, uint8_t width, uint8_t scale) {
2343: 	return StandardNumericToDecimalCast<uint64_t, int16_t, UnsignedToDecimalOperator>(input, result, error_message,
2344: 	                                                                                  width, scale);
2345: }
2346: template <>
2347: bool TryCastToDecimal::Operation(uint64_t input, int32_t &result, string *error_message, uint8_t width, uint8_t scale) {
2348: 	return StandardNumericToDecimalCast<uint64_t, int32_t, UnsignedToDecimalOperator>(input, result, error_message,
2349: 	                                                                                  width, scale);
2350: }
2351: template <>
2352: bool TryCastToDecimal::Operation(uint64_t input, int64_t &result, string *error_message, uint8_t width, uint8_t scale) {
2353: 	return StandardNumericToDecimalCast<uint64_t, int64_t, UnsignedToDecimalOperator>(input, result, error_message,
2354: 	                                                                                  width, scale);
2355: }
2356: template <>
2357: bool TryCastToDecimal::Operation(uint64_t input, hugeint_t &result, string *error_message, uint8_t width,
2358:                                  uint8_t scale) {
2359: 	return NumericToHugeDecimalCast<uint64_t>(input, result, error_message, width, scale);
2360: }
2361: 
2362: //===--------------------------------------------------------------------===//
2363: // Hugeint -> Decimal Cast
2364: //===--------------------------------------------------------------------===//
2365: template <class DST>
2366: bool HugeintToDecimalCast(hugeint_t input, DST &result, string *error_message, uint8_t width, uint8_t scale) {
2367: 	// check for overflow
2368: 	hugeint_t max_width = Hugeint::POWERS_OF_TEN[width - scale];
2369: 	if (input >= max_width || input <= -max_width) {
2370: 		string error = StringUtil::Format("Could not cast value %s to DECIMAL(%d,%d)", input.ToString(), width, scale);
2371: 		HandleCastError::AssignError(error, error_message);
2372: 		return false;
2373: 	}
2374: 	result = Hugeint::Cast<DST>(input * Hugeint::POWERS_OF_TEN[scale]);
2375: 	return true;
2376: }
2377: 
2378: template <>
2379: bool TryCastToDecimal::Operation(hugeint_t input, int16_t &result, string *error_message, uint8_t width,
2380:                                  uint8_t scale) {
2381: 	return HugeintToDecimalCast<int16_t>(input, result, error_message, width, scale);
2382: }
2383: 
2384: template <>
2385: bool TryCastToDecimal::Operation(hugeint_t input, int32_t &result, string *error_message, uint8_t width,
2386:                                  uint8_t scale) {
2387: 	return HugeintToDecimalCast<int32_t>(input, result, error_message, width, scale);
2388: }
2389: 
2390: template <>
2391: bool TryCastToDecimal::Operation(hugeint_t input, int64_t &result, string *error_message, uint8_t width,
2392:                                  uint8_t scale) {
2393: 	return HugeintToDecimalCast<int64_t>(input, result, error_message, width, scale);
2394: }
2395: 
2396: template <>
2397: bool TryCastToDecimal::Operation(hugeint_t input, hugeint_t &result, string *error_message, uint8_t width,
2398:                                  uint8_t scale) {
2399: 	return HugeintToDecimalCast<hugeint_t>(input, result, error_message, width, scale);
2400: }
2401: 
2402: //===--------------------------------------------------------------------===//
2403: // Float/Double -> Decimal Cast
2404: //===--------------------------------------------------------------------===//
2405: template <class SRC, class DST>
2406: bool DoubleToDecimalCast(SRC input, DST &result, string *error_message, uint8_t width, uint8_t scale) {
2407: 	double value = input * NumericHelper::DOUBLE_POWERS_OF_TEN[scale];
2408: 	// Add the sign (-1, 0, 1) times a tiny value to fix floating point issues (issue 3091)
2409: 	double sign = (double(0) < value) - (value < double(0));
2410: 	value += 1e-9 * sign;
2411: 	if (value <= -NumericHelper::DOUBLE_POWERS_OF_TEN[width] || value >= NumericHelper::DOUBLE_POWERS_OF_TEN[width]) {
2412: 		string error = StringUtil::Format("Could not cast value %f to DECIMAL(%d,%d)", value, width, scale);
2413: 		HandleCastError::AssignError(error, error_message);
2414: 		return false;
2415: 	}
2416: 	result = Cast::Operation<SRC, DST>(value);
2417: 	return true;
2418: }
2419: 
2420: template <>
2421: bool TryCastToDecimal::Operation(float input, int16_t &result, string *error_message, uint8_t width, uint8_t scale) {
2422: 	return DoubleToDecimalCast<float, int16_t>(input, result, error_message, width, scale);
2423: }
2424: 
2425: template <>
2426: bool TryCastToDecimal::Operation(float input, int32_t &result, string *error_message, uint8_t width, uint8_t scale) {
2427: 	return DoubleToDecimalCast<float, int32_t>(input, result, error_message, width, scale);
2428: }
2429: 
2430: template <>
2431: bool TryCastToDecimal::Operation(float input, int64_t &result, string *error_message, uint8_t width, uint8_t scale) {
2432: 	return DoubleToDecimalCast<float, int64_t>(input, result, error_message, width, scale);
2433: }
2434: 
2435: template <>
2436: bool TryCastToDecimal::Operation(float input, hugeint_t &result, string *error_message, uint8_t width, uint8_t scale) {
2437: 	return DoubleToDecimalCast<float, hugeint_t>(input, result, error_message, width, scale);
2438: }
2439: 
2440: template <>
2441: bool TryCastToDecimal::Operation(double input, int16_t &result, string *error_message, uint8_t width, uint8_t scale) {
2442: 	return DoubleToDecimalCast<double, int16_t>(input, result, error_message, width, scale);
2443: }
2444: 
2445: template <>
2446: bool TryCastToDecimal::Operation(double input, int32_t &result, string *error_message, uint8_t width, uint8_t scale) {
2447: 	return DoubleToDecimalCast<double, int32_t>(input, result, error_message, width, scale);
2448: }
2449: 
2450: template <>
2451: bool TryCastToDecimal::Operation(double input, int64_t &result, string *error_message, uint8_t width, uint8_t scale) {
2452: 	return DoubleToDecimalCast<double, int64_t>(input, result, error_message, width, scale);
2453: }
2454: 
2455: template <>
2456: bool TryCastToDecimal::Operation(double input, hugeint_t &result, string *error_message, uint8_t width, uint8_t scale) {
2457: 	return DoubleToDecimalCast<double, hugeint_t>(input, result, error_message, width, scale);
2458: }
2459: 
2460: //===--------------------------------------------------------------------===//
2461: // Decimal -> Numeric Cast
2462: //===--------------------------------------------------------------------===//
2463: template <class SRC, class DST>
2464: bool TryCastDecimalToNumeric(SRC input, DST &result, string *error_message, uint8_t scale) {
2465: 	// Round away from 0.
2466: 	const auto power = NumericHelper::POWERS_OF_TEN[scale];
2467: 	// https://graphics.stanford.edu/~seander/bithacks.html#ConditionalNegate
2468: 	const auto fNegate = int64_t(input < 0);
2469: 	const auto rounding = ((power ^ -fNegate) + fNegate) / 2;
2470: 	const auto scaled_value = (input + rounding) / power;
2471: 	if (!TryCast::Operation<SRC, DST>(scaled_value, result)) {
2472: 		string error = StringUtil::Format("Failed to cast decimal value %d to type %s", scaled_value, GetTypeId<DST>());
2473: 		HandleCastError::AssignError(error, error_message);
2474: 		return false;
2475: 	}
2476: 	return true;
2477: }
2478: 
2479: template <class DST>
2480: bool TryCastHugeDecimalToNumeric(hugeint_t input, DST &result, string *error_message, uint8_t scale) {
2481: 	const auto power = Hugeint::POWERS_OF_TEN[scale];
2482: 	const auto rounding = ((input < 0) ? -power : power) / 2;
2483: 	auto scaled_value = (input + rounding) / power;
2484: 	if (!TryCast::Operation<hugeint_t, DST>(scaled_value, result)) {
2485: 		string error = StringUtil::Format("Failed to cast decimal value %s to type %s",
2486: 		                                  ConvertToString::Operation(scaled_value), GetTypeId<DST>());
2487: 		HandleCastError::AssignError(error, error_message);
2488: 		return false;
2489: 	}
2490: 	return true;
2491: }
2492: 
2493: //===--------------------------------------------------------------------===//
2494: // Cast Decimal -> int8_t
2495: //===--------------------------------------------------------------------===//
2496: template <>
2497: bool TryCastFromDecimal::Operation(int16_t input, int8_t &result, string *error_message, uint8_t width, uint8_t scale) {
2498: 	return TryCastDecimalToNumeric<int16_t, int8_t>(input, result, error_message, scale);
2499: }
2500: template <>
2501: bool TryCastFromDecimal::Operation(int32_t input, int8_t &result, string *error_message, uint8_t width, uint8_t scale) {
2502: 	return TryCastDecimalToNumeric<int32_t, int8_t>(input, result, error_message, scale);
2503: }
2504: template <>
2505: bool TryCastFromDecimal::Operation(int64_t input, int8_t &result, string *error_message, uint8_t width, uint8_t scale) {
2506: 	return TryCastDecimalToNumeric<int64_t, int8_t>(input, result, error_message, scale);
2507: }
2508: template <>
2509: bool TryCastFromDecimal::Operation(hugeint_t input, int8_t &result, string *error_message, uint8_t width,
2510:                                    uint8_t scale) {
2511: 	return TryCastHugeDecimalToNumeric<int8_t>(input, result, error_message, scale);
2512: }
2513: 
2514: //===--------------------------------------------------------------------===//
2515: // Cast Decimal -> int16_t
2516: //===--------------------------------------------------------------------===//
2517: template <>
2518: bool TryCastFromDecimal::Operation(int16_t input, int16_t &result, string *error_message, uint8_t width,
2519:                                    uint8_t scale) {
2520: 	return TryCastDecimalToNumeric<int16_t, int16_t>(input, result, error_message, scale);
2521: }
2522: template <>
2523: bool TryCastFromDecimal::Operation(int32_t input, int16_t &result, string *error_message, uint8_t width,
2524:                                    uint8_t scale) {
2525: 	return TryCastDecimalToNumeric<int32_t, int16_t>(input, result, error_message, scale);
2526: }
2527: template <>
2528: bool TryCastFromDecimal::Operation(int64_t input, int16_t &result, string *error_message, uint8_t width,
2529:                                    uint8_t scale) {
2530: 	return TryCastDecimalToNumeric<int64_t, int16_t>(input, result, error_message, scale);
2531: }
2532: template <>
2533: bool TryCastFromDecimal::Operation(hugeint_t input, int16_t &result, string *error_message, uint8_t width,
2534:                                    uint8_t scale) {
2535: 	return TryCastHugeDecimalToNumeric<int16_t>(input, result, error_message, scale);
2536: }
2537: 
2538: //===--------------------------------------------------------------------===//
2539: // Cast Decimal -> int32_t
2540: //===--------------------------------------------------------------------===//
2541: template <>
2542: bool TryCastFromDecimal::Operation(int16_t input, int32_t &result, string *error_message, uint8_t width,
2543:                                    uint8_t scale) {
2544: 	return TryCastDecimalToNumeric<int16_t, int32_t>(input, result, error_message, scale);
2545: }
2546: template <>
2547: bool TryCastFromDecimal::Operation(int32_t input, int32_t &result, string *error_message, uint8_t width,
2548:                                    uint8_t scale) {
2549: 	return TryCastDecimalToNumeric<int32_t, int32_t>(input, result, error_message, scale);
2550: }
2551: template <>
2552: bool TryCastFromDecimal::Operation(int64_t input, int32_t &result, string *error_message, uint8_t width,
2553:                                    uint8_t scale) {
2554: 	return TryCastDecimalToNumeric<int64_t, int32_t>(input, result, error_message, scale);
2555: }
2556: template <>
2557: bool TryCastFromDecimal::Operation(hugeint_t input, int32_t &result, string *error_message, uint8_t width,
2558:                                    uint8_t scale) {
2559: 	return TryCastHugeDecimalToNumeric<int32_t>(input, result, error_message, scale);
2560: }
2561: 
2562: //===--------------------------------------------------------------------===//
2563: // Cast Decimal -> int64_t
2564: //===--------------------------------------------------------------------===//
2565: template <>
2566: bool TryCastFromDecimal::Operation(int16_t input, int64_t &result, string *error_message, uint8_t width,
2567:                                    uint8_t scale) {
2568: 	return TryCastDecimalToNumeric<int16_t, int64_t>(input, result, error_message, scale);
2569: }
2570: template <>
2571: bool TryCastFromDecimal::Operation(int32_t input, int64_t &result, string *error_message, uint8_t width,
2572:                                    uint8_t scale) {
2573: 	return TryCastDecimalToNumeric<int32_t, int64_t>(input, result, error_message, scale);
2574: }
2575: template <>
2576: bool TryCastFromDecimal::Operation(int64_t input, int64_t &result, string *error_message, uint8_t width,
2577:                                    uint8_t scale) {
2578: 	return TryCastDecimalToNumeric<int64_t, int64_t>(input, result, error_message, scale);
2579: }
2580: template <>
2581: bool TryCastFromDecimal::Operation(hugeint_t input, int64_t &result, string *error_message, uint8_t width,
2582:                                    uint8_t scale) {
2583: 	return TryCastHugeDecimalToNumeric<int64_t>(input, result, error_message, scale);
2584: }
2585: 
2586: //===--------------------------------------------------------------------===//
2587: // Cast Decimal -> uint8_t
2588: //===--------------------------------------------------------------------===//
2589: template <>
2590: bool TryCastFromDecimal::Operation(int16_t input, uint8_t &result, string *error_message, uint8_t width,
2591:                                    uint8_t scale) {
2592: 	return TryCastDecimalToNumeric<int16_t, uint8_t>(input, result, error_message, scale);
2593: }
2594: template <>
2595: bool TryCastFromDecimal::Operation(int32_t input, uint8_t &result, string *error_message, uint8_t width,
2596:                                    uint8_t scale) {
2597: 	return TryCastDecimalToNumeric<int32_t, uint8_t>(input, result, error_message, scale);
2598: }
2599: template <>
2600: bool TryCastFromDecimal::Operation(int64_t input, uint8_t &result, string *error_message, uint8_t width,
2601:                                    uint8_t scale) {
2602: 	return TryCastDecimalToNumeric<int64_t, uint8_t>(input, result, error_message, scale);
2603: }
2604: template <>
2605: bool TryCastFromDecimal::Operation(hugeint_t input, uint8_t &result, string *error_message, uint8_t width,
2606:                                    uint8_t scale) {
2607: 	return TryCastHugeDecimalToNumeric<uint8_t>(input, result, error_message, scale);
2608: }
2609: 
2610: //===--------------------------------------------------------------------===//
2611: // Cast Decimal -> uint16_t
2612: //===--------------------------------------------------------------------===//
2613: template <>
2614: bool TryCastFromDecimal::Operation(int16_t input, uint16_t &result, string *error_message, uint8_t width,
2615:                                    uint8_t scale) {
2616: 	return TryCastDecimalToNumeric<int16_t, uint16_t>(input, result, error_message, scale);
2617: }
2618: template <>
2619: bool TryCastFromDecimal::Operation(int32_t input, uint16_t &result, string *error_message, uint8_t width,
2620:                                    uint8_t scale) {
2621: 	return TryCastDecimalToNumeric<int32_t, uint16_t>(input, result, error_message, scale);
2622: }
2623: template <>
2624: bool TryCastFromDecimal::Operation(int64_t input, uint16_t &result, string *error_message, uint8_t width,
2625:                                    uint8_t scale) {
2626: 	return TryCastDecimalToNumeric<int64_t, uint16_t>(input, result, error_message, scale);
2627: }
2628: template <>
2629: bool TryCastFromDecimal::Operation(hugeint_t input, uint16_t &result, string *error_message, uint8_t width,
2630:                                    uint8_t scale) {
2631: 	return TryCastHugeDecimalToNumeric<uint16_t>(input, result, error_message, scale);
2632: }
2633: 
2634: //===--------------------------------------------------------------------===//
2635: // Cast Decimal -> uint32_t
2636: //===--------------------------------------------------------------------===//
2637: template <>
2638: bool TryCastFromDecimal::Operation(int16_t input, uint32_t &result, string *error_message, uint8_t width,
2639:                                    uint8_t scale) {
2640: 	return TryCastDecimalToNumeric<int16_t, uint32_t>(input, result, error_message, scale);
2641: }
2642: template <>
2643: bool TryCastFromDecimal::Operation(int32_t input, uint32_t &result, string *error_message, uint8_t width,
2644:                                    uint8_t scale) {
2645: 	return TryCastDecimalToNumeric<int32_t, uint32_t>(input, result, error_message, scale);
2646: }
2647: template <>
2648: bool TryCastFromDecimal::Operation(int64_t input, uint32_t &result, string *error_message, uint8_t width,
2649:                                    uint8_t scale) {
2650: 	return TryCastDecimalToNumeric<int64_t, uint32_t>(input, result, error_message, scale);
2651: }
2652: template <>
2653: bool TryCastFromDecimal::Operation(hugeint_t input, uint32_t &result, string *error_message, uint8_t width,
2654:                                    uint8_t scale) {
2655: 	return TryCastHugeDecimalToNumeric<uint32_t>(input, result, error_message, scale);
2656: }
2657: 
2658: //===--------------------------------------------------------------------===//
2659: // Cast Decimal -> uint64_t
2660: //===--------------------------------------------------------------------===//
2661: template <>
2662: bool TryCastFromDecimal::Operation(int16_t input, uint64_t &result, string *error_message, uint8_t width,
2663:                                    uint8_t scale) {
2664: 	return TryCastDecimalToNumeric<int16_t, uint64_t>(input, result, error_message, scale);
2665: }
2666: template <>
2667: bool TryCastFromDecimal::Operation(int32_t input, uint64_t &result, string *error_message, uint8_t width,
2668:                                    uint8_t scale) {
2669: 	return TryCastDecimalToNumeric<int32_t, uint64_t>(input, result, error_message, scale);
2670: }
2671: template <>
2672: bool TryCastFromDecimal::Operation(int64_t input, uint64_t &result, string *error_message, uint8_t width,
2673:                                    uint8_t scale) {
2674: 	return TryCastDecimalToNumeric<int64_t, uint64_t>(input, result, error_message, scale);
2675: }
2676: template <>
2677: bool TryCastFromDecimal::Operation(hugeint_t input, uint64_t &result, string *error_message, uint8_t width,
2678:                                    uint8_t scale) {
2679: 	return TryCastHugeDecimalToNumeric<uint64_t>(input, result, error_message, scale);
2680: }
2681: 
2682: //===--------------------------------------------------------------------===//
2683: // Cast Decimal -> hugeint_t
2684: //===--------------------------------------------------------------------===//
2685: template <>
2686: bool TryCastFromDecimal::Operation(int16_t input, hugeint_t &result, string *error_message, uint8_t width,
2687:                                    uint8_t scale) {
2688: 	return TryCastDecimalToNumeric<int16_t, hugeint_t>(input, result, error_message, scale);
2689: }
2690: template <>
2691: bool TryCastFromDecimal::Operation(int32_t input, hugeint_t &result, string *error_message, uint8_t width,
2692:                                    uint8_t scale) {
2693: 	return TryCastDecimalToNumeric<int32_t, hugeint_t>(input, result, error_message, scale);
2694: }
2695: template <>
2696: bool TryCastFromDecimal::Operation(int64_t input, hugeint_t &result, string *error_message, uint8_t width,
2697:                                    uint8_t scale) {
2698: 	return TryCastDecimalToNumeric<int64_t, hugeint_t>(input, result, error_message, scale);
2699: }
2700: template <>
2701: bool TryCastFromDecimal::Operation(hugeint_t input, hugeint_t &result, string *error_message, uint8_t width,
2702:                                    uint8_t scale) {
2703: 	return TryCastHugeDecimalToNumeric<hugeint_t>(input, result, error_message, scale);
2704: }
2705: 
2706: //===--------------------------------------------------------------------===//
2707: // Decimal -> Float/Double Cast
2708: //===--------------------------------------------------------------------===//
2709: template <class SRC, class DST>
2710: bool TryCastDecimalToFloatingPoint(SRC input, DST &result, uint8_t scale) {
2711: 	result = Cast::Operation<SRC, DST>(input) / DST(NumericHelper::DOUBLE_POWERS_OF_TEN[scale]);
2712: 	return true;
2713: }
2714: 
2715: // DECIMAL -> FLOAT
2716: template <>
2717: bool TryCastFromDecimal::Operation(int16_t input, float &result, string *error_message, uint8_t width, uint8_t scale) {
2718: 	return TryCastDecimalToFloatingPoint<int16_t, float>(input, result, scale);
2719: }
2720: 
2721: template <>
2722: bool TryCastFromDecimal::Operation(int32_t input, float &result, string *error_message, uint8_t width, uint8_t scale) {
2723: 	return TryCastDecimalToFloatingPoint<int32_t, float>(input, result, scale);
2724: }
2725: 
2726: template <>
2727: bool TryCastFromDecimal::Operation(int64_t input, float &result, string *error_message, uint8_t width, uint8_t scale) {
2728: 	return TryCastDecimalToFloatingPoint<int64_t, float>(input, result, scale);
2729: }
2730: 
2731: template <>
2732: bool TryCastFromDecimal::Operation(hugeint_t input, float &result, string *error_message, uint8_t width,
2733:                                    uint8_t scale) {
2734: 	return TryCastDecimalToFloatingPoint<hugeint_t, float>(input, result, scale);
2735: }
2736: 
2737: // DECIMAL -> DOUBLE
2738: template <>
2739: bool TryCastFromDecimal::Operation(int16_t input, double &result, string *error_message, uint8_t width, uint8_t scale) {
2740: 	return TryCastDecimalToFloatingPoint<int16_t, double>(input, result, scale);
2741: }
2742: 
2743: template <>
2744: bool TryCastFromDecimal::Operation(int32_t input, double &result, string *error_message, uint8_t width, uint8_t scale) {
2745: 	return TryCastDecimalToFloatingPoint<int32_t, double>(input, result, scale);
2746: }
2747: 
2748: template <>
2749: bool TryCastFromDecimal::Operation(int64_t input, double &result, string *error_message, uint8_t width, uint8_t scale) {
2750: 	return TryCastDecimalToFloatingPoint<int64_t, double>(input, result, scale);
2751: }
2752: 
2753: template <>
2754: bool TryCastFromDecimal::Operation(hugeint_t input, double &result, string *error_message, uint8_t width,
2755:                                    uint8_t scale) {
2756: 	return TryCastDecimalToFloatingPoint<hugeint_t, double>(input, result, scale);
2757: }
2758: 
2759: } // namespace duckdb
[end of src/common/operator/cast_operators.cpp]
[start of src/function/cast/time_casts.cpp]
1: #include "duckdb/function/cast/default_casts.hpp"
2: #include "duckdb/function/cast/vector_cast_helpers.hpp"
3: #include "duckdb/common/operator/string_cast.hpp"
4: namespace duckdb {
5: 
6: BoundCastInfo DefaultCasts::DateCastSwitch(BindCastInput &input, const LogicalType &source, const LogicalType &target) {
7: 	// now switch on the result type
8: 	switch (target.id()) {
9: 	case LogicalTypeId::VARCHAR:
10: 		// date to varchar
11: 		return BoundCastInfo(&VectorCastHelpers::StringCast<date_t, duckdb::StringCast>);
12: 	case LogicalTypeId::TIMESTAMP:
13: 	case LogicalTypeId::TIMESTAMP_TZ:
14: 		// date to timestamp
15: 		return BoundCastInfo(&VectorCastHelpers::TryCastLoop<date_t, timestamp_t, duckdb::TryCast>);
16: 	case LogicalTypeId::TIMESTAMP_NS:
17: 		return BoundCastInfo(&VectorCastHelpers::TryCastLoop<date_t, timestamp_t, duckdb::TryCastToTimestampNS>);
18: 	case LogicalTypeId::TIMESTAMP_SEC:
19: 		return BoundCastInfo(&VectorCastHelpers::TryCastLoop<date_t, timestamp_t, duckdb::TryCastToTimestampSec>);
20: 	case LogicalTypeId::TIMESTAMP_MS:
21: 		return BoundCastInfo(&VectorCastHelpers::TryCastLoop<date_t, timestamp_t, duckdb::TryCastToTimestampMS>);
22: 	default:
23: 		return TryVectorNullCast;
24: 	}
25: }
26: 
27: BoundCastInfo DefaultCasts::TimeCastSwitch(BindCastInput &input, const LogicalType &source, const LogicalType &target) {
28: 	// now switch on the result type
29: 	switch (target.id()) {
30: 	case LogicalTypeId::VARCHAR:
31: 		// time to varchar
32: 		return BoundCastInfo(&VectorCastHelpers::StringCast<dtime_t, duckdb::StringCast>);
33: 	case LogicalTypeId::TIME_TZ:
34: 		// time to time with time zone
35: 		return BoundCastInfo(&VectorCastHelpers::TemplatedCastLoop<dtime_t, dtime_tz_t, duckdb::Cast>);
36: 	default:
37: 		return TryVectorNullCast;
38: 	}
39: }
40: 
41: BoundCastInfo DefaultCasts::TimeTzCastSwitch(BindCastInput &input, const LogicalType &source,
42:                                              const LogicalType &target) {
43: 	// now switch on the result type
44: 	switch (target.id()) {
45: 	case LogicalTypeId::VARCHAR:
46: 		// time with time zone to varchar
47: 		return BoundCastInfo(&VectorCastHelpers::StringCast<dtime_tz_t, duckdb::StringCastTZ>);
48: 	case LogicalTypeId::TIME:
49: 		// time with time zone to time
50: 		return BoundCastInfo(&VectorCastHelpers::TemplatedCastLoop<dtime_tz_t, dtime_t, duckdb::Cast>);
51: 	default:
52: 		return TryVectorNullCast;
53: 	}
54: }
55: 
56: BoundCastInfo DefaultCasts::TimestampCastSwitch(BindCastInput &input, const LogicalType &source,
57:                                                 const LogicalType &target) {
58: 	// now switch on the result type
59: 	switch (target.id()) {
60: 	case LogicalTypeId::VARCHAR:
61: 		// timestamp to varchar
62: 		return BoundCastInfo(&VectorCastHelpers::StringCast<timestamp_t, duckdb::StringCast>);
63: 	case LogicalTypeId::DATE:
64: 		// timestamp to date
65: 		return BoundCastInfo(&VectorCastHelpers::TemplatedCastLoop<timestamp_t, date_t, duckdb::Cast>);
66: 	case LogicalTypeId::TIME:
67: 		// timestamp to time
68: 		return BoundCastInfo(&VectorCastHelpers::TemplatedCastLoop<timestamp_t, dtime_t, duckdb::Cast>);
69: 	case LogicalTypeId::TIME_TZ:
70: 		// timestamp to time_tz
71: 		return BoundCastInfo(&VectorCastHelpers::TemplatedCastLoop<timestamp_t, dtime_tz_t, duckdb::Cast>);
72: 	case LogicalTypeId::TIMESTAMP_TZ:
73: 		// timestamp (us) to timestamp with time zone
74: 		return ReinterpretCast;
75: 	case LogicalTypeId::TIMESTAMP_NS:
76: 		// timestamp (us) to timestamp (ns)
77: 		return BoundCastInfo(
78: 		    &VectorCastHelpers::TemplatedCastLoop<timestamp_t, timestamp_t, duckdb::CastTimestampUsToNs>);
79: 	case LogicalTypeId::TIMESTAMP_MS:
80: 		// timestamp (us) to timestamp (ms)
81: 		return BoundCastInfo(
82: 		    &VectorCastHelpers::TemplatedCastLoop<timestamp_t, timestamp_t, duckdb::CastTimestampUsToMs>);
83: 	case LogicalTypeId::TIMESTAMP_SEC:
84: 		// timestamp (us) to timestamp (s)
85: 		return BoundCastInfo(
86: 		    &VectorCastHelpers::TemplatedCastLoop<timestamp_t, timestamp_t, duckdb::CastTimestampUsToSec>);
87: 	default:
88: 		return TryVectorNullCast;
89: 	}
90: }
91: 
92: BoundCastInfo DefaultCasts::TimestampTzCastSwitch(BindCastInput &input, const LogicalType &source,
93:                                                   const LogicalType &target) {
94: 	// now switch on the result type
95: 	switch (target.id()) {
96: 	case LogicalTypeId::VARCHAR:
97: 		// timestamp with time zone to varchar
98: 		return BoundCastInfo(&VectorCastHelpers::StringCast<timestamp_t, duckdb::StringCastTZ>);
99: 	case LogicalTypeId::TIME_TZ:
100: 		// timestamp with time zone to time with time zone.
101: 		return BoundCastInfo(&VectorCastHelpers::TemplatedCastLoop<timestamp_t, dtime_tz_t, duckdb::Cast>);
102: 	case LogicalTypeId::TIMESTAMP:
103: 		// timestamp with time zone to timestamp (us)
104: 		return ReinterpretCast;
105: 	default:
106: 		return TryVectorNullCast;
107: 	}
108: }
109: 
110: BoundCastInfo DefaultCasts::TimestampNsCastSwitch(BindCastInput &input, const LogicalType &source,
111:                                                   const LogicalType &target) {
112: 	// now switch on the result type
113: 	switch (target.id()) {
114: 	case LogicalTypeId::VARCHAR:
115: 		// timestamp (ns) to varchar
116: 		return BoundCastInfo(&VectorCastHelpers::StringCast<timestamp_t, duckdb::CastFromTimestampNS>);
117: 	case LogicalTypeId::TIMESTAMP:
118: 		// timestamp (ns) to timestamp (us)
119: 		return BoundCastInfo(
120: 		    &VectorCastHelpers::TemplatedCastLoop<timestamp_t, timestamp_t, duckdb::CastTimestampNsToUs>);
121: 	default:
122: 		return TryVectorNullCast;
123: 	}
124: }
125: 
126: BoundCastInfo DefaultCasts::TimestampMsCastSwitch(BindCastInput &input, const LogicalType &source,
127:                                                   const LogicalType &target) {
128: 	// now switch on the result type
129: 	switch (target.id()) {
130: 	case LogicalTypeId::VARCHAR:
131: 		// timestamp (ms) to varchar
132: 		return BoundCastInfo(&VectorCastHelpers::StringCast<timestamp_t, duckdb::CastFromTimestampMS>);
133: 	case LogicalTypeId::TIMESTAMP:
134: 		// timestamp (ms) to timestamp (us)
135: 		return BoundCastInfo(
136: 		    &VectorCastHelpers::TemplatedCastLoop<timestamp_t, timestamp_t, duckdb::CastTimestampMsToUs>);
137: 	default:
138: 		return TryVectorNullCast;
139: 	}
140: }
141: 
142: BoundCastInfo DefaultCasts::TimestampSecCastSwitch(BindCastInput &input, const LogicalType &source,
143:                                                    const LogicalType &target) {
144: 	// now switch on the result type
145: 	switch (target.id()) {
146: 	case LogicalTypeId::VARCHAR:
147: 		// timestamp (sec) to varchar
148: 		return BoundCastInfo(&VectorCastHelpers::StringCast<timestamp_t, duckdb::CastFromTimestampSec>);
149: 	case LogicalTypeId::TIMESTAMP:
150: 		// timestamp (s) to timestamp (us)
151: 		return BoundCastInfo(
152: 		    &VectorCastHelpers::TemplatedCastLoop<timestamp_t, timestamp_t, duckdb::CastTimestampSecToUs>);
153: 	default:
154: 		return TryVectorNullCast;
155: 	}
156: }
157: BoundCastInfo DefaultCasts::IntervalCastSwitch(BindCastInput &input, const LogicalType &source,
158:                                                const LogicalType &target) {
159: 	// now switch on the result type
160: 	switch (target.id()) {
161: 	case LogicalTypeId::VARCHAR:
162: 		// time to varchar
163: 		return BoundCastInfo(&VectorCastHelpers::StringCast<interval_t, duckdb::StringCast>);
164: 	default:
165: 		return TryVectorNullCast;
166: 	}
167: }
168: 
169: } // namespace duckdb
[end of src/function/cast/time_casts.cpp]
[start of src/include/duckdb/common/operator/cast_operators.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/common/operator/cast_operators.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/common/assert.hpp"
12: #include "duckdb/common/constants.hpp"
13: #include "duckdb/common/hugeint.hpp"
14: #include "duckdb/common/limits.hpp"
15: #include "duckdb/common/exception.hpp"
16: #include "duckdb/common/typedefs.hpp"
17: #include "duckdb/common/types/string_type.hpp"
18: #include "duckdb/common/types.hpp"
19: #include "duckdb/common/operator/convert_to_string.hpp"
20: #include "duckdb/common/types/null_value.hpp"
21: #include "duckdb/common/types/bit.hpp"
22: #include "duckdb/common/types/vector.hpp"
23: 
24: namespace duckdb {
25: struct ValidityMask;
26: class Vector;
27: 
28: struct TryCast {
29: 	template <class SRC, class DST>
30: 	static inline bool Operation(SRC input, DST &result, bool strict = false) {
31: 		throw NotImplementedException("Unimplemented type for cast (%s -> %s)", GetTypeId<SRC>(), GetTypeId<DST>());
32: 	}
33: };
34: 
35: struct TryCastErrorMessage {
36: 	template <class SRC, class DST>
37: 	static inline bool Operation(SRC input, DST &result, string *error_message, bool strict = false) {
38: 		throw NotImplementedException("Unimplemented type for cast (%s -> %s)", GetTypeId<SRC>(), GetTypeId<DST>());
39: 	}
40: };
41: 
42: struct TryCastErrorMessageCommaSeparated {
43: 	template <class SRC, class DST>
44: 	static inline bool Operation(SRC input, DST &result, string *error_message, bool strict = false) {
45: 		throw NotImplementedException("Unimplemented type for cast (%s -> %s)", GetTypeId<SRC>(), GetTypeId<DST>());
46: 	}
47: };
48: 
49: template <class SRC, class DST>
50: static string CastExceptionText(SRC input) {
51: 	if (std::is_same<SRC, string_t>()) {
52: 		return "Could not convert string '" + ConvertToString::Operation<SRC>(input) + "' to " +
53: 		       TypeIdToString(GetTypeId<DST>());
54: 	}
55: 	if (TypeIsNumber<SRC>() && TypeIsNumber<DST>()) {
56: 		return "Type " + TypeIdToString(GetTypeId<SRC>()) + " with value " + ConvertToString::Operation<SRC>(input) +
57: 		       " can't be cast because the value is out of range for the destination type " +
58: 		       TypeIdToString(GetTypeId<DST>());
59: 	}
60: 	return "Type " + TypeIdToString(GetTypeId<SRC>()) + " with value " + ConvertToString::Operation<SRC>(input) +
61: 	       " can't be cast to the destination type " + TypeIdToString(GetTypeId<DST>());
62: }
63: 
64: struct Cast {
65: 	template <class SRC, class DST>
66: 	static inline DST Operation(SRC input) {
67: 		DST result;
68: 		if (!TryCast::Operation(input, result)) {
69: 			throw InvalidInputException(CastExceptionText<SRC, DST>(input));
70: 		}
71: 		return result;
72: 	}
73: };
74: 
75: struct HandleCastError {
76: 	static void AssignError(const string &error_message, string *error_message_ptr) {
77: 		if (!error_message_ptr) {
78: 			throw ConversionException(error_message);
79: 		}
80: 		if (error_message_ptr->empty()) {
81: 			*error_message_ptr = error_message;
82: 		}
83: 	}
84: };
85: 
86: //===--------------------------------------------------------------------===//
87: // Cast bool -> Numeric
88: //===--------------------------------------------------------------------===//
89: template <>
90: DUCKDB_API bool TryCast::Operation(bool input, bool &result, bool strict);
91: template <>
92: DUCKDB_API bool TryCast::Operation(bool input, int8_t &result, bool strict);
93: template <>
94: DUCKDB_API bool TryCast::Operation(bool input, int16_t &result, bool strict);
95: template <>
96: DUCKDB_API bool TryCast::Operation(bool input, int32_t &result, bool strict);
97: template <>
98: DUCKDB_API bool TryCast::Operation(bool input, int64_t &result, bool strict);
99: template <>
100: DUCKDB_API bool TryCast::Operation(bool input, hugeint_t &result, bool strict);
101: template <>
102: DUCKDB_API bool TryCast::Operation(bool input, uint8_t &result, bool strict);
103: template <>
104: DUCKDB_API bool TryCast::Operation(bool input, uint16_t &result, bool strict);
105: template <>
106: DUCKDB_API bool TryCast::Operation(bool input, uint32_t &result, bool strict);
107: template <>
108: DUCKDB_API bool TryCast::Operation(bool input, uint64_t &result, bool strict);
109: template <>
110: DUCKDB_API bool TryCast::Operation(bool input, float &result, bool strict);
111: template <>
112: DUCKDB_API bool TryCast::Operation(bool input, double &result, bool strict);
113: 
114: //===--------------------------------------------------------------------===//
115: // Cast int8_t -> Numeric
116: //===--------------------------------------------------------------------===//
117: template <>
118: DUCKDB_API bool TryCast::Operation(int8_t input, bool &result, bool strict);
119: template <>
120: DUCKDB_API bool TryCast::Operation(int8_t input, int8_t &result, bool strict);
121: template <>
122: DUCKDB_API bool TryCast::Operation(int8_t input, int16_t &result, bool strict);
123: template <>
124: DUCKDB_API bool TryCast::Operation(int8_t input, int32_t &result, bool strict);
125: template <>
126: DUCKDB_API bool TryCast::Operation(int8_t input, int64_t &result, bool strict);
127: template <>
128: DUCKDB_API bool TryCast::Operation(int8_t input, hugeint_t &result, bool strict);
129: template <>
130: DUCKDB_API bool TryCast::Operation(int8_t input, uint8_t &result, bool strict);
131: template <>
132: DUCKDB_API bool TryCast::Operation(int8_t input, uint16_t &result, bool strict);
133: template <>
134: DUCKDB_API bool TryCast::Operation(int8_t input, uint32_t &result, bool strict);
135: template <>
136: DUCKDB_API bool TryCast::Operation(int8_t input, uint64_t &result, bool strict);
137: template <>
138: DUCKDB_API bool TryCast::Operation(int8_t input, float &result, bool strict);
139: template <>
140: DUCKDB_API bool TryCast::Operation(int8_t input, double &result, bool strict);
141: 
142: //===--------------------------------------------------------------------===//
143: // Cast int16_t -> Numeric
144: //===--------------------------------------------------------------------===//
145: template <>
146: DUCKDB_API bool TryCast::Operation(int16_t input, bool &result, bool strict);
147: template <>
148: DUCKDB_API bool TryCast::Operation(int16_t input, int8_t &result, bool strict);
149: template <>
150: DUCKDB_API bool TryCast::Operation(int16_t input, int16_t &result, bool strict);
151: template <>
152: DUCKDB_API bool TryCast::Operation(int16_t input, int32_t &result, bool strict);
153: template <>
154: DUCKDB_API bool TryCast::Operation(int16_t input, int64_t &result, bool strict);
155: template <>
156: DUCKDB_API bool TryCast::Operation(int16_t input, hugeint_t &result, bool strict);
157: template <>
158: DUCKDB_API bool TryCast::Operation(int16_t input, uint8_t &result, bool strict);
159: template <>
160: DUCKDB_API bool TryCast::Operation(int16_t input, uint16_t &result, bool strict);
161: template <>
162: DUCKDB_API bool TryCast::Operation(int16_t input, uint32_t &result, bool strict);
163: template <>
164: DUCKDB_API bool TryCast::Operation(int16_t input, uint64_t &result, bool strict);
165: template <>
166: DUCKDB_API bool TryCast::Operation(int16_t input, float &result, bool strict);
167: template <>
168: DUCKDB_API bool TryCast::Operation(int16_t input, double &result, bool strict);
169: 
170: //===--------------------------------------------------------------------===//
171: // Cast int32_t -> Numeric
172: //===--------------------------------------------------------------------===//
173: template <>
174: DUCKDB_API bool TryCast::Operation(int32_t input, bool &result, bool strict);
175: template <>
176: DUCKDB_API bool TryCast::Operation(int32_t input, int8_t &result, bool strict);
177: template <>
178: DUCKDB_API bool TryCast::Operation(int32_t input, int16_t &result, bool strict);
179: template <>
180: DUCKDB_API bool TryCast::Operation(int32_t input, int32_t &result, bool strict);
181: template <>
182: DUCKDB_API bool TryCast::Operation(int32_t input, int64_t &result, bool strict);
183: template <>
184: DUCKDB_API bool TryCast::Operation(int32_t input, hugeint_t &result, bool strict);
185: template <>
186: DUCKDB_API bool TryCast::Operation(int32_t input, uint8_t &result, bool strict);
187: template <>
188: DUCKDB_API bool TryCast::Operation(int32_t input, uint16_t &result, bool strict);
189: template <>
190: DUCKDB_API bool TryCast::Operation(int32_t input, uint32_t &result, bool strict);
191: template <>
192: DUCKDB_API bool TryCast::Operation(int32_t input, uint64_t &result, bool strict);
193: template <>
194: DUCKDB_API bool TryCast::Operation(int32_t input, float &result, bool strict);
195: template <>
196: DUCKDB_API bool TryCast::Operation(int32_t input, double &result, bool strict);
197: 
198: //===--------------------------------------------------------------------===//
199: // Cast int64_t -> Numeric
200: //===--------------------------------------------------------------------===//
201: template <>
202: DUCKDB_API bool TryCast::Operation(int64_t input, bool &result, bool strict);
203: template <>
204: DUCKDB_API bool TryCast::Operation(int64_t input, int8_t &result, bool strict);
205: template <>
206: DUCKDB_API bool TryCast::Operation(int64_t input, int16_t &result, bool strict);
207: template <>
208: DUCKDB_API bool TryCast::Operation(int64_t input, int32_t &result, bool strict);
209: template <>
210: DUCKDB_API bool TryCast::Operation(int64_t input, int64_t &result, bool strict);
211: template <>
212: DUCKDB_API bool TryCast::Operation(int64_t input, hugeint_t &result, bool strict);
213: template <>
214: DUCKDB_API bool TryCast::Operation(int64_t input, uint8_t &result, bool strict);
215: template <>
216: DUCKDB_API bool TryCast::Operation(int64_t input, uint16_t &result, bool strict);
217: template <>
218: DUCKDB_API bool TryCast::Operation(int64_t input, uint32_t &result, bool strict);
219: template <>
220: DUCKDB_API bool TryCast::Operation(int64_t input, uint64_t &result, bool strict);
221: template <>
222: DUCKDB_API bool TryCast::Operation(int64_t input, float &result, bool strict);
223: template <>
224: DUCKDB_API bool TryCast::Operation(int64_t input, double &result, bool strict);
225: 
226: //===--------------------------------------------------------------------===//
227: // Cast hugeint_t -> Numeric
228: //===--------------------------------------------------------------------===//
229: template <>
230: DUCKDB_API bool TryCast::Operation(hugeint_t input, bool &result, bool strict);
231: template <>
232: DUCKDB_API bool TryCast::Operation(hugeint_t input, int8_t &result, bool strict);
233: template <>
234: DUCKDB_API bool TryCast::Operation(hugeint_t input, int16_t &result, bool strict);
235: template <>
236: DUCKDB_API bool TryCast::Operation(hugeint_t input, int32_t &result, bool strict);
237: template <>
238: DUCKDB_API bool TryCast::Operation(hugeint_t input, int64_t &result, bool strict);
239: template <>
240: DUCKDB_API bool TryCast::Operation(hugeint_t input, hugeint_t &result, bool strict);
241: template <>
242: DUCKDB_API bool TryCast::Operation(hugeint_t input, uint8_t &result, bool strict);
243: template <>
244: DUCKDB_API bool TryCast::Operation(hugeint_t input, uint16_t &result, bool strict);
245: template <>
246: DUCKDB_API bool TryCast::Operation(hugeint_t input, uint32_t &result, bool strict);
247: template <>
248: DUCKDB_API bool TryCast::Operation(hugeint_t input, uint64_t &result, bool strict);
249: template <>
250: DUCKDB_API bool TryCast::Operation(hugeint_t input, float &result, bool strict);
251: template <>
252: DUCKDB_API bool TryCast::Operation(hugeint_t input, double &result, bool strict);
253: 
254: //===--------------------------------------------------------------------===//
255: // Cast uint8_t -> Numeric
256: //===--------------------------------------------------------------------===//
257: template <>
258: DUCKDB_API bool TryCast::Operation(uint8_t input, bool &result, bool strict);
259: template <>
260: DUCKDB_API bool TryCast::Operation(uint8_t input, int8_t &result, bool strict);
261: template <>
262: DUCKDB_API bool TryCast::Operation(uint8_t input, int16_t &result, bool strict);
263: template <>
264: DUCKDB_API bool TryCast::Operation(uint8_t input, int32_t &result, bool strict);
265: template <>
266: DUCKDB_API bool TryCast::Operation(uint8_t input, int64_t &result, bool strict);
267: template <>
268: DUCKDB_API bool TryCast::Operation(uint8_t input, hugeint_t &result, bool strict);
269: template <>
270: DUCKDB_API bool TryCast::Operation(uint8_t input, uint8_t &result, bool strict);
271: template <>
272: DUCKDB_API bool TryCast::Operation(uint8_t input, uint16_t &result, bool strict);
273: template <>
274: DUCKDB_API bool TryCast::Operation(uint8_t input, uint32_t &result, bool strict);
275: template <>
276: DUCKDB_API bool TryCast::Operation(uint8_t input, uint64_t &result, bool strict);
277: template <>
278: DUCKDB_API bool TryCast::Operation(uint8_t input, float &result, bool strict);
279: template <>
280: DUCKDB_API bool TryCast::Operation(uint8_t input, double &result, bool strict);
281: 
282: //===--------------------------------------------------------------------===//
283: // Cast uint16_t -> Numeric
284: //===--------------------------------------------------------------------===//
285: template <>
286: DUCKDB_API bool TryCast::Operation(uint16_t input, bool &result, bool strict);
287: template <>
288: DUCKDB_API bool TryCast::Operation(uint16_t input, int8_t &result, bool strict);
289: template <>
290: DUCKDB_API bool TryCast::Operation(uint16_t input, int16_t &result, bool strict);
291: template <>
292: DUCKDB_API bool TryCast::Operation(uint16_t input, int32_t &result, bool strict);
293: template <>
294: DUCKDB_API bool TryCast::Operation(uint16_t input, int64_t &result, bool strict);
295: template <>
296: DUCKDB_API bool TryCast::Operation(uint16_t input, hugeint_t &result, bool strict);
297: template <>
298: DUCKDB_API bool TryCast::Operation(uint16_t input, uint8_t &result, bool strict);
299: template <>
300: DUCKDB_API bool TryCast::Operation(uint16_t input, uint16_t &result, bool strict);
301: template <>
302: DUCKDB_API bool TryCast::Operation(uint16_t input, uint32_t &result, bool strict);
303: template <>
304: DUCKDB_API bool TryCast::Operation(uint16_t input, uint64_t &result, bool strict);
305: template <>
306: DUCKDB_API bool TryCast::Operation(uint16_t input, float &result, bool strict);
307: template <>
308: DUCKDB_API bool TryCast::Operation(uint16_t input, double &result, bool strict);
309: 
310: //===--------------------------------------------------------------------===//
311: // Cast uint32_t -> Numeric
312: //===--------------------------------------------------------------------===//
313: template <>
314: DUCKDB_API bool TryCast::Operation(uint32_t input, bool &result, bool strict);
315: template <>
316: DUCKDB_API bool TryCast::Operation(uint32_t input, int8_t &result, bool strict);
317: template <>
318: DUCKDB_API bool TryCast::Operation(uint32_t input, int16_t &result, bool strict);
319: template <>
320: DUCKDB_API bool TryCast::Operation(uint32_t input, int32_t &result, bool strict);
321: template <>
322: DUCKDB_API bool TryCast::Operation(uint32_t input, int64_t &result, bool strict);
323: template <>
324: DUCKDB_API bool TryCast::Operation(uint32_t input, hugeint_t &result, bool strict);
325: template <>
326: DUCKDB_API bool TryCast::Operation(uint32_t input, uint8_t &result, bool strict);
327: template <>
328: DUCKDB_API bool TryCast::Operation(uint32_t input, uint16_t &result, bool strict);
329: template <>
330: DUCKDB_API bool TryCast::Operation(uint32_t input, uint32_t &result, bool strict);
331: template <>
332: DUCKDB_API bool TryCast::Operation(uint32_t input, uint64_t &result, bool strict);
333: template <>
334: DUCKDB_API bool TryCast::Operation(uint32_t input, float &result, bool strict);
335: template <>
336: DUCKDB_API bool TryCast::Operation(uint32_t input, double &result, bool strict);
337: 
338: //===--------------------------------------------------------------------===//
339: // Cast uint64_t -> Numeric
340: //===--------------------------------------------------------------------===//
341: template <>
342: DUCKDB_API bool TryCast::Operation(uint64_t input, bool &result, bool strict);
343: template <>
344: DUCKDB_API bool TryCast::Operation(uint64_t input, int8_t &result, bool strict);
345: template <>
346: DUCKDB_API bool TryCast::Operation(uint64_t input, int16_t &result, bool strict);
347: template <>
348: DUCKDB_API bool TryCast::Operation(uint64_t input, int32_t &result, bool strict);
349: template <>
350: DUCKDB_API bool TryCast::Operation(uint64_t input, int64_t &result, bool strict);
351: template <>
352: DUCKDB_API bool TryCast::Operation(uint64_t input, hugeint_t &result, bool strict);
353: template <>
354: DUCKDB_API bool TryCast::Operation(uint64_t input, uint8_t &result, bool strict);
355: template <>
356: DUCKDB_API bool TryCast::Operation(uint64_t input, uint16_t &result, bool strict);
357: template <>
358: DUCKDB_API bool TryCast::Operation(uint64_t input, uint32_t &result, bool strict);
359: template <>
360: DUCKDB_API bool TryCast::Operation(uint64_t input, uint64_t &result, bool strict);
361: template <>
362: DUCKDB_API bool TryCast::Operation(uint64_t input, float &result, bool strict);
363: template <>
364: DUCKDB_API bool TryCast::Operation(uint64_t input, double &result, bool strict);
365: 
366: //===--------------------------------------------------------------------===//
367: // Cast float -> Numeric
368: //===--------------------------------------------------------------------===//
369: template <>
370: DUCKDB_API bool TryCast::Operation(float input, bool &result, bool strict);
371: template <>
372: DUCKDB_API bool TryCast::Operation(float input, int8_t &result, bool strict);
373: template <>
374: DUCKDB_API bool TryCast::Operation(float input, int16_t &result, bool strict);
375: template <>
376: DUCKDB_API bool TryCast::Operation(float input, int32_t &result, bool strict);
377: template <>
378: DUCKDB_API bool TryCast::Operation(float input, int64_t &result, bool strict);
379: template <>
380: DUCKDB_API bool TryCast::Operation(float input, hugeint_t &result, bool strict);
381: template <>
382: DUCKDB_API bool TryCast::Operation(float input, uint8_t &result, bool strict);
383: template <>
384: DUCKDB_API bool TryCast::Operation(float input, uint16_t &result, bool strict);
385: template <>
386: DUCKDB_API bool TryCast::Operation(float input, uint32_t &result, bool strict);
387: template <>
388: DUCKDB_API bool TryCast::Operation(float input, uint64_t &result, bool strict);
389: template <>
390: DUCKDB_API bool TryCast::Operation(float input, float &result, bool strict);
391: template <>
392: DUCKDB_API bool TryCast::Operation(float input, double &result, bool strict);
393: 
394: //===--------------------------------------------------------------------===//
395: // Cast double -> Numeric
396: //===--------------------------------------------------------------------===//
397: template <>
398: DUCKDB_API bool TryCast::Operation(double input, bool &result, bool strict);
399: template <>
400: DUCKDB_API bool TryCast::Operation(double input, int8_t &result, bool strict);
401: template <>
402: DUCKDB_API bool TryCast::Operation(double input, int16_t &result, bool strict);
403: template <>
404: DUCKDB_API bool TryCast::Operation(double input, int32_t &result, bool strict);
405: template <>
406: DUCKDB_API bool TryCast::Operation(double input, int64_t &result, bool strict);
407: template <>
408: DUCKDB_API bool TryCast::Operation(double input, hugeint_t &result, bool strict);
409: template <>
410: DUCKDB_API bool TryCast::Operation(double input, uint8_t &result, bool strict);
411: template <>
412: DUCKDB_API bool TryCast::Operation(double input, uint16_t &result, bool strict);
413: template <>
414: DUCKDB_API bool TryCast::Operation(double input, uint32_t &result, bool strict);
415: template <>
416: DUCKDB_API bool TryCast::Operation(double input, uint64_t &result, bool strict);
417: template <>
418: DUCKDB_API bool TryCast::Operation(double input, float &result, bool strict);
419: template <>
420: DUCKDB_API bool TryCast::Operation(double input, double &result, bool strict);
421: 
422: //===--------------------------------------------------------------------===//
423: // String -> Numeric Casts
424: //===--------------------------------------------------------------------===//
425: template <>
426: DUCKDB_API bool TryCast::Operation(string_t input, bool &result, bool strict);
427: template <>
428: DUCKDB_API bool TryCast::Operation(string_t input, int8_t &result, bool strict);
429: template <>
430: DUCKDB_API bool TryCast::Operation(string_t input, int16_t &result, bool strict);
431: template <>
432: DUCKDB_API bool TryCast::Operation(string_t input, int32_t &result, bool strict);
433: template <>
434: DUCKDB_API bool TryCast::Operation(string_t input, int64_t &result, bool strict);
435: template <>
436: DUCKDB_API bool TryCast::Operation(string_t input, uint8_t &result, bool strict);
437: template <>
438: DUCKDB_API bool TryCast::Operation(string_t input, uint16_t &result, bool strict);
439: template <>
440: DUCKDB_API bool TryCast::Operation(string_t input, uint32_t &result, bool strict);
441: template <>
442: DUCKDB_API bool TryCast::Operation(string_t input, uint64_t &result, bool strict);
443: template <>
444: DUCKDB_API bool TryCast::Operation(string_t input, hugeint_t &result, bool strict);
445: template <>
446: DUCKDB_API bool TryCast::Operation(string_t input, float &result, bool strict);
447: template <>
448: DUCKDB_API bool TryCast::Operation(string_t input, double &result, bool strict);
449: template <>
450: DUCKDB_API bool TryCastErrorMessage::Operation(string_t input, float &result, string *error_message, bool strict);
451: template <>
452: DUCKDB_API bool TryCastErrorMessage::Operation(string_t input, double &result, string *error_message, bool strict);
453: template <>
454: DUCKDB_API bool TryCastErrorMessageCommaSeparated::Operation(string_t input, float &result, string *error_message,
455:                                                              bool strict);
456: template <>
457: DUCKDB_API bool TryCastErrorMessageCommaSeparated::Operation(string_t input, double &result, string *error_message,
458:                                                              bool strict);
459: 
460: //===--------------------------------------------------------------------===//
461: // Date Casts
462: //===--------------------------------------------------------------------===//
463: template <>
464: DUCKDB_API bool TryCast::Operation(date_t input, date_t &result, bool strict);
465: template <>
466: DUCKDB_API bool TryCast::Operation(date_t input, timestamp_t &result, bool strict);
467: 
468: //===--------------------------------------------------------------------===//
469: // Time Casts
470: //===--------------------------------------------------------------------===//
471: template <>
472: DUCKDB_API bool TryCast::Operation(dtime_t input, dtime_t &result, bool strict);
473: template <>
474: DUCKDB_API bool TryCast::Operation(dtime_t input, dtime_tz_t &result, bool strict);
475: 
476: //===--------------------------------------------------------------------===//
477: // Time With Time Zone Casts (Offset)
478: //===--------------------------------------------------------------------===//
479: template <>
480: DUCKDB_API bool TryCast::Operation(dtime_tz_t input, dtime_t &result, bool strict);
481: template <>
482: DUCKDB_API bool TryCast::Operation(dtime_tz_t input, dtime_tz_t &result, bool strict);
483: 
484: //===--------------------------------------------------------------------===//
485: // Timestamp Casts
486: //===--------------------------------------------------------------------===//
487: template <>
488: DUCKDB_API bool TryCast::Operation(timestamp_t input, date_t &result, bool strict);
489: template <>
490: DUCKDB_API bool TryCast::Operation(timestamp_t input, dtime_t &result, bool strict);
491: template <>
492: DUCKDB_API bool TryCast::Operation(timestamp_t input, dtime_tz_t &result, bool strict);
493: template <>
494: DUCKDB_API bool TryCast::Operation(timestamp_t input, timestamp_t &result, bool strict);
495: 
496: //===--------------------------------------------------------------------===//
497: // Interval Casts
498: //===--------------------------------------------------------------------===//
499: template <>
500: DUCKDB_API bool TryCast::Operation(interval_t input, interval_t &result, bool strict);
501: 
502: //===--------------------------------------------------------------------===//
503: // String -> Date Casts
504: //===--------------------------------------------------------------------===//
505: template <>
506: DUCKDB_API bool TryCastErrorMessage::Operation(string_t input, date_t &result, string *error_message, bool strict);
507: template <>
508: DUCKDB_API bool TryCast::Operation(string_t input, date_t &result, bool strict);
509: template <>
510: date_t Cast::Operation(string_t input);
511: //===--------------------------------------------------------------------===//
512: // String -> Time Casts
513: //===--------------------------------------------------------------------===//
514: template <>
515: DUCKDB_API bool TryCastErrorMessage::Operation(string_t input, dtime_t &result, string *error_message, bool strict);
516: template <>
517: DUCKDB_API bool TryCast::Operation(string_t input, dtime_t &result, bool strict);
518: template <>
519: dtime_t Cast::Operation(string_t input);
520: //===--------------------------------------------------------------------===//
521: // String -> TimeTZ Casts
522: //===--------------------------------------------------------------------===//
523: template <>
524: DUCKDB_API bool TryCastErrorMessage::Operation(string_t input, dtime_tz_t &result, string *error_message, bool strict);
525: template <>
526: DUCKDB_API bool TryCast::Operation(string_t input, dtime_tz_t &result, bool strict);
527: template <>
528: dtime_tz_t Cast::Operation(string_t input);
529: //===--------------------------------------------------------------------===//
530: // String -> Timestamp Casts
531: //===--------------------------------------------------------------------===//
532: template <>
533: DUCKDB_API bool TryCastErrorMessage::Operation(string_t input, timestamp_t &result, string *error_message, bool strict);
534: template <>
535: DUCKDB_API bool TryCast::Operation(string_t input, timestamp_t &result, bool strict);
536: template <>
537: timestamp_t Cast::Operation(string_t input);
538: //===--------------------------------------------------------------------===//
539: // String -> Interval Casts
540: //===--------------------------------------------------------------------===//
541: template <>
542: DUCKDB_API bool TryCastErrorMessage::Operation(string_t input, interval_t &result, string *error_message, bool strict);
543: 
544: //===--------------------------------------------------------------------===//
545: // string -> Non-Standard Timestamps
546: //===--------------------------------------------------------------------===//
547: struct TryCastToTimestampNS {
548: 	template <class SRC, class DST>
549: 	static inline bool Operation(SRC input, DST &result, bool strict = false) {
550: 		throw InternalException("Unsupported type for try cast to timestamp (ns)");
551: 	}
552: };
553: 
554: struct TryCastToTimestampMS {
555: 	template <class SRC, class DST>
556: 	static inline bool Operation(SRC input, DST &result, bool strict = false) {
557: 		throw InternalException("Unsupported type for try cast to timestamp (ms)");
558: 	}
559: };
560: 
561: struct TryCastToTimestampSec {
562: 	template <class SRC, class DST>
563: 	static inline bool Operation(SRC input, DST &result, bool strict = false) {
564: 		throw InternalException("Unsupported type for try cast to timestamp (s)");
565: 	}
566: };
567: 
568: template <>
569: DUCKDB_API bool TryCastToTimestampNS::Operation(string_t input, timestamp_t &result, bool strict);
570: template <>
571: DUCKDB_API bool TryCastToTimestampMS::Operation(string_t input, timestamp_t &result, bool strict);
572: template <>
573: DUCKDB_API bool TryCastToTimestampSec::Operation(string_t input, timestamp_t &result, bool strict);
574: 
575: template <>
576: DUCKDB_API bool TryCastToTimestampNS::Operation(date_t input, timestamp_t &result, bool strict);
577: template <>
578: DUCKDB_API bool TryCastToTimestampMS::Operation(date_t input, timestamp_t &result, bool strict);
579: template <>
580: DUCKDB_API bool TryCastToTimestampSec::Operation(date_t input, timestamp_t &result, bool strict);
581: 
582: //===--------------------------------------------------------------------===//
583: // Non-Standard Timestamps -> string/standard timestamp
584: //===--------------------------------------------------------------------===//
585: 
586: struct CastFromTimestampNS {
587: 	template <class SRC>
588: 	static inline string_t Operation(SRC input, Vector &result) {
589: 		throw duckdb::NotImplementedException("Cast to timestamp could not be performed!");
590: 	}
591: };
592: 
593: struct CastFromTimestampMS {
594: 	template <class SRC>
595: 	static inline string_t Operation(SRC input, Vector &result) {
596: 		throw duckdb::NotImplementedException("Cast to timestamp could not be performed!");
597: 	}
598: };
599: 
600: struct CastFromTimestampSec {
601: 	template <class SRC>
602: 	static inline string_t Operation(SRC input, Vector &result) {
603: 		throw duckdb::NotImplementedException("Cast to timestamp could not be performed!");
604: 	}
605: };
606: 
607: struct CastTimestampUsToMs {
608: 	template <class SRC, class DST>
609: 	static inline DST Operation(SRC input) {
610: 		throw duckdb::NotImplementedException("Cast to timestamp could not be performed!");
611: 	}
612: };
613: 
614: struct CastTimestampUsToNs {
615: 	template <class SRC, class DST>
616: 	static inline DST Operation(SRC input) {
617: 		throw duckdb::NotImplementedException("Cast to timestamp could not be performed!");
618: 	}
619: };
620: 
621: struct CastTimestampUsToSec {
622: 	template <class SRC, class DST>
623: 	static inline DST Operation(SRC input) {
624: 		throw duckdb::NotImplementedException("Cast to timestamp could not be performed!");
625: 	}
626: };
627: 
628: struct CastTimestampMsToUs {
629: 	template <class SRC, class DST>
630: 	static inline DST Operation(SRC input) {
631: 		throw duckdb::NotImplementedException("Cast to timestamp could not be performed!");
632: 	}
633: };
634: 
635: struct CastTimestampNsToUs {
636: 	template <class SRC, class DST>
637: 	static inline DST Operation(SRC input) {
638: 		throw duckdb::NotImplementedException("Cast to timestamp could not be performed!");
639: 	}
640: };
641: 
642: struct CastTimestampSecToUs {
643: 	template <class SRC, class DST>
644: 	static inline DST Operation(SRC input) {
645: 		throw duckdb::NotImplementedException("Cast to timestamp could not be performed!");
646: 	}
647: };
648: 
649: template <>
650: duckdb::timestamp_t CastTimestampUsToMs::Operation(duckdb::timestamp_t input);
651: template <>
652: duckdb::timestamp_t CastTimestampUsToNs::Operation(duckdb::timestamp_t input);
653: template <>
654: duckdb::timestamp_t CastTimestampUsToSec::Operation(duckdb::timestamp_t input);
655: template <>
656: duckdb::timestamp_t CastTimestampMsToUs::Operation(duckdb::timestamp_t input);
657: template <>
658: duckdb::timestamp_t CastTimestampNsToUs::Operation(duckdb::timestamp_t input);
659: template <>
660: duckdb::timestamp_t CastTimestampSecToUs::Operation(duckdb::timestamp_t input);
661: 
662: template <>
663: duckdb::string_t CastFromTimestampNS::Operation(duckdb::timestamp_t input, Vector &result);
664: template <>
665: duckdb::string_t CastFromTimestampMS::Operation(duckdb::timestamp_t input, Vector &result);
666: template <>
667: duckdb::string_t CastFromTimestampSec::Operation(duckdb::timestamp_t input, Vector &result);
668: 
669: //===--------------------------------------------------------------------===//
670: // Blobs
671: //===--------------------------------------------------------------------===//
672: struct CastFromBlob {
673: 	template <class SRC>
674: 	static inline string_t Operation(SRC input, Vector &result) {
675: 		throw duckdb::NotImplementedException("Cast from blob could not be performed!");
676: 	}
677: };
678: template <>
679: duckdb::string_t CastFromBlob::Operation(duckdb::string_t input, Vector &vector);
680: 
681: struct CastFromBlobToBit {
682: 	template <class SRC>
683: 	static inline string_t Operation(SRC input, Vector &result) {
684: 		throw NotImplementedException("Cast from blob could not be performed!");
685: 	}
686: };
687: template <>
688: string_t CastFromBlobToBit::Operation(string_t input, Vector &result);
689: 
690: struct TryCastToBlob {
691: 	template <class SRC, class DST>
692: 	static inline bool Operation(SRC input, DST &result, Vector &result_vector, string *error_message,
693: 	                             bool strict = false) {
694: 		throw InternalException("Unsupported type for try cast to blob");
695: 	}
696: };
697: template <>
698: bool TryCastToBlob::Operation(string_t input, string_t &result, Vector &result_vector, string *error_message,
699:                               bool strict);
700: 
701: //===--------------------------------------------------------------------===//
702: // Bits
703: //===--------------------------------------------------------------------===//
704: struct CastFromBitToString {
705: 	template <class SRC>
706: 	static inline string_t Operation(SRC input, Vector &result) {
707: 		throw duckdb::NotImplementedException("Cast from bit could not be performed!");
708: 	}
709: };
710: template <>
711: duckdb::string_t CastFromBitToString::Operation(duckdb::string_t input, Vector &vector);
712: 
713: struct CastFromBitToNumeric {
714: 	template <class SRC = string_t, class DST>
715: 	static inline bool Operation(SRC input, DST &result, bool strict = false) {
716: 		D_ASSERT(input.GetSize() > 1);
717: 
718: 		// TODO: Allow conversion if the significant bytes of the bitstring can be cast to the target type
719: 		// Currently only allows bitstring -> numeric if the full bitstring fits inside the numeric type
720: 		if (input.GetSize() - 1 > sizeof(DST)) {
721: 			throw ConversionException("Bitstring doesn't fit inside of %s", GetTypeId<DST>());
722: 		}
723: 		Bit::BitToNumeric(input, result);
724: 		return (true);
725: 	}
726: };
727: template <>
728: bool CastFromBitToNumeric::Operation(string_t input, bool &result, bool strict);
729: template <>
730: bool CastFromBitToNumeric::Operation(string_t input, hugeint_t &result, bool strict);
731: 
732: struct CastFromBitToBlob {
733: 	template <class SRC>
734: 	static inline string_t Operation(SRC input, Vector &result) {
735: 		D_ASSERT(input.GetSize() > 1);
736: 		return StringVector::AddStringOrBlob(result, Bit::BitToBlob(input));
737: 	}
738: };
739: 
740: struct TryCastToBit {
741: 	template <class SRC, class DST>
742: 	static inline bool Operation(SRC input, DST &result, Vector &result_vector, string *error_message,
743: 	                             bool strict = false) {
744: 		throw InternalException("Unsupported type for try cast to bit");
745: 	}
746: };
747: 
748: template <>
749: bool TryCastToBit::Operation(string_t input, string_t &result, Vector &result_vector, string *error_message,
750:                              bool strict);
751: 
752: //===--------------------------------------------------------------------===//
753: // UUID
754: //===--------------------------------------------------------------------===//
755: struct CastFromUUID {
756: 	template <class SRC>
757: 	static inline string_t Operation(SRC input, Vector &result) {
758: 		throw duckdb::NotImplementedException("Cast from uuid could not be performed!");
759: 	}
760: };
761: template <>
762: duckdb::string_t CastFromUUID::Operation(duckdb::hugeint_t input, Vector &vector);
763: 
764: struct TryCastToUUID {
765: 	template <class SRC, class DST>
766: 	static inline bool Operation(SRC input, DST &result, Vector &result_vector, string *error_message,
767: 	                             bool strict = false) {
768: 		throw InternalException("Unsupported type for try cast to uuid");
769: 	}
770: };
771: 
772: template <>
773: DUCKDB_API bool TryCastToUUID::Operation(string_t input, hugeint_t &result, Vector &result_vector,
774:                                          string *error_message, bool strict);
775: 
776: //===--------------------------------------------------------------------===//
777: // Pointers
778: //===--------------------------------------------------------------------===//
779: struct CastFromPointer {
780: 	template <class SRC>
781: 	static inline string_t Operation(SRC input, Vector &result) {
782: 		throw duckdb::NotImplementedException("Cast from pointer could not be performed!");
783: 	}
784: };
785: template <>
786: duckdb::string_t CastFromPointer::Operation(uintptr_t input, Vector &vector);
787: 
788: } // namespace duckdb
[end of src/include/duckdb/common/operator/cast_operators.hpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: