{
  "repo": "duckdb/duckdb",
  "pull_number": 8974,
  "instance_id": "duckdb__duckdb-8974",
  "issue_numbers": [
    "8917"
  ],
  "base_commit": "52a47a6b311a8aa008e7c78d8472eb52a937fa62",
  "patch": "diff --git a/src/common/operator/cast_operators.cpp b/src/common/operator/cast_operators.cpp\nindex da4245c3c57c..8de8cd5b1107 100644\n--- a/src/common/operator/cast_operators.cpp\n+++ b/src/common/operator/cast_operators.cpp\n@@ -1373,6 +1373,12 @@ timestamp_t CastTimestampMsToUs::Operation(timestamp_t input) {\n \treturn Timestamp::FromEpochMs(input.value);\n }\n \n+template <>\n+timestamp_t CastTimestampMsToNs::Operation(timestamp_t input) {\n+\tauto us = CastTimestampMsToUs::Operation<timestamp_t, timestamp_t>(input);\n+\treturn CastTimestampUsToNs::Operation<timestamp_t, timestamp_t>(us);\n+}\n+\n template <>\n timestamp_t CastTimestampNsToUs::Operation(timestamp_t input) {\n \treturn Timestamp::FromEpochNanoSeconds(input.value);\n@@ -1383,6 +1389,18 @@ timestamp_t CastTimestampSecToUs::Operation(timestamp_t input) {\n \treturn Timestamp::FromEpochSeconds(input.value);\n }\n \n+template <>\n+timestamp_t CastTimestampSecToMs::Operation(timestamp_t input) {\n+\tauto us = CastTimestampSecToUs::Operation<timestamp_t, timestamp_t>(input);\n+\treturn CastTimestampUsToMs::Operation<timestamp_t, timestamp_t>(us);\n+}\n+\n+template <>\n+timestamp_t CastTimestampSecToNs::Operation(timestamp_t input) {\n+\tauto us = CastTimestampSecToUs::Operation<timestamp_t, timestamp_t>(input);\n+\treturn CastTimestampUsToNs::Operation<timestamp_t, timestamp_t>(us);\n+}\n+\n //===--------------------------------------------------------------------===//\n // Cast To Timestamp\n //===--------------------------------------------------------------------===//\ndiff --git a/src/function/cast/time_casts.cpp b/src/function/cast/time_casts.cpp\nindex 61f0f3bf4e46..3586247a4401 100644\n--- a/src/function/cast/time_casts.cpp\n+++ b/src/function/cast/time_casts.cpp\n@@ -134,6 +134,10 @@ BoundCastInfo DefaultCasts::TimestampMsCastSwitch(BindCastInput &input, const Lo\n \t\t// timestamp (ms) to timestamp (us)\n \t\treturn BoundCastInfo(\n \t\t    &VectorCastHelpers::TemplatedCastLoop<timestamp_t, timestamp_t, duckdb::CastTimestampMsToUs>);\n+\tcase LogicalTypeId::TIMESTAMP_NS:\n+\t\t// timestamp (ms) to timestamp (ns)\n+\t\treturn BoundCastInfo(\n+\t\t    &VectorCastHelpers::TemplatedCastLoop<timestamp_t, timestamp_t, duckdb::CastTimestampMsToNs>);\n \tdefault:\n \t\treturn TryVectorNullCast;\n \t}\n@@ -146,10 +150,18 @@ BoundCastInfo DefaultCasts::TimestampSecCastSwitch(BindCastInput &input, const L\n \tcase LogicalTypeId::VARCHAR:\n \t\t// timestamp (sec) to varchar\n \t\treturn BoundCastInfo(&VectorCastHelpers::StringCast<timestamp_t, duckdb::CastFromTimestampSec>);\n+\tcase LogicalTypeId::TIMESTAMP_MS:\n+\t\t// timestamp (s) to timestamp (ms)\n+\t\treturn BoundCastInfo(\n+\t\t    &VectorCastHelpers::TemplatedCastLoop<timestamp_t, timestamp_t, duckdb::CastTimestampSecToMs>);\n \tcase LogicalTypeId::TIMESTAMP:\n \t\t// timestamp (s) to timestamp (us)\n \t\treturn BoundCastInfo(\n \t\t    &VectorCastHelpers::TemplatedCastLoop<timestamp_t, timestamp_t, duckdb::CastTimestampSecToUs>);\n+\tcase LogicalTypeId::TIMESTAMP_NS:\n+\t\t// timestamp (s) to timestamp (ns)\n+\t\treturn BoundCastInfo(\n+\t\t    &VectorCastHelpers::TemplatedCastLoop<timestamp_t, timestamp_t, duckdb::CastTimestampSecToNs>);\n \tdefault:\n \t\treturn TryVectorNullCast;\n \t}\ndiff --git a/src/include/duckdb/common/operator/cast_operators.hpp b/src/include/duckdb/common/operator/cast_operators.hpp\nindex f2f82dd09642..fdcc90cd8d28 100644\n--- a/src/include/duckdb/common/operator/cast_operators.hpp\n+++ b/src/include/duckdb/common/operator/cast_operators.hpp\n@@ -632,6 +632,13 @@ struct CastTimestampMsToUs {\n \t}\n };\n \n+struct CastTimestampMsToNs {\n+\ttemplate <class SRC, class DST>\n+\tstatic inline DST Operation(SRC input) {\n+\t\tthrow duckdb::NotImplementedException(\"Cast to TIMESTAMP_NS could not be performed!\");\n+\t}\n+};\n+\n struct CastTimestampNsToUs {\n \ttemplate <class SRC, class DST>\n \tstatic inline DST Operation(SRC input) {\n@@ -639,6 +646,13 @@ struct CastTimestampNsToUs {\n \t}\n };\n \n+struct CastTimestampSecToMs {\n+\ttemplate <class SRC, class DST>\n+\tstatic inline DST Operation(SRC input) {\n+\t\tthrow duckdb::NotImplementedException(\"Cast to TIMESTAMP_MS could not be performed!\");\n+\t}\n+};\n+\n struct CastTimestampSecToUs {\n \ttemplate <class SRC, class DST>\n \tstatic inline DST Operation(SRC input) {\n@@ -646,6 +660,13 @@ struct CastTimestampSecToUs {\n \t}\n };\n \n+struct CastTimestampSecToNs {\n+\ttemplate <class SRC, class DST>\n+\tstatic inline DST Operation(SRC input) {\n+\t\tthrow duckdb::NotImplementedException(\"Cast to TIMESTAMP_NS could not be performed!\");\n+\t}\n+};\n+\n template <>\n duckdb::timestamp_t CastTimestampUsToMs::Operation(duckdb::timestamp_t input);\n template <>\n@@ -655,9 +676,15 @@ duckdb::timestamp_t CastTimestampUsToSec::Operation(duckdb::timestamp_t input);\n template <>\n duckdb::timestamp_t CastTimestampMsToUs::Operation(duckdb::timestamp_t input);\n template <>\n+duckdb::timestamp_t CastTimestampMsToNs::Operation(duckdb::timestamp_t input);\n+template <>\n duckdb::timestamp_t CastTimestampNsToUs::Operation(duckdb::timestamp_t input);\n template <>\n+duckdb::timestamp_t CastTimestampSecToMs::Operation(duckdb::timestamp_t input);\n+template <>\n duckdb::timestamp_t CastTimestampSecToUs::Operation(duckdb::timestamp_t input);\n+template <>\n+duckdb::timestamp_t CastTimestampSecToNs::Operation(duckdb::timestamp_t input);\n \n template <>\n duckdb::string_t CastFromTimestampNS::Operation(duckdb::timestamp_t input, Vector &result);\n",
  "test_patch": "diff --git a/test/sql/types/timestamp/test_timestamp_types.test b/test/sql/types/timestamp/test_timestamp_types.test\nindex 93327c7c4371..9cc79da0419e 100644\n--- a/test/sql/types/timestamp/test_timestamp_types.test\n+++ b/test/sql/types/timestamp/test_timestamp_types.test\n@@ -65,27 +65,19 @@ select milli::TIME from timestamp;\n statement error\n select nano::TIME from timestamp;\n \n-# Some timestamp direct conversions are not yet supported\n-statement error\n-select sec::TIMESTAMP_MS from timestamp;\n-\n-statement error\n-select sec::TIMESTAMP_NS from timestamp;\n-\n+# Direct timestamp promotions\n+foreach src sec milli micro nano\n \n-statement error\n-select milli::TIMESTAMP_SEC from timestamp;\n-\n-\n-statement error\n-select milli::TIMESTAMP_NS from timestamp;\n+foreach dst sec milli micro nano\n \n+statement ok\n+SELECT ${src}, ${dst} \n+FROM timestamp \n+WHERE ${src} = ${dst} ;\n \n-statement error\n-select nano::TIMESTAMP_SEC from timestamp;\n+endloop\n \n-statement error\n-select nano::TIMESTAMP_MS from timestamp;\n+endloop\n \n #Sorting on the timestamps\n query T\n@@ -195,23 +187,33 @@ select '2008-01-01 00:00:11.1'::TIMESTAMP_US = '2008-01-01 00:00:11.1'::TIMESTAM\n ----\n false\n \n-# Missing casts\n-statement error\n+# Precision casts\n+query I\n select '2008-01-01 00:00:11.1'::TIMESTAMP_MS = '2008-01-01 00:00:11'::TIMESTAMP_NS\n+----\n+false\n \n-\n-statement error\n+query I\n select '2008-01-01 00:00:11.1'::TIMESTAMP_MS = '2008-01-01 00:00:11'::TIMESTAMP_S\n+----\n+false\n \n-\n-statement error\n+query I\n select '2008-01-01 00:00:11.1'::TIMESTAMP_NS = '2008-01-01 00:00:11'::TIMESTAMP_S\n+----\n+false\n \n-statement error\n+query I\n select '2008-01-01 00:00:11'::TIMESTAMP_MS = '2008-01-01 00:00:11'::TIMESTAMP_NS\n+----\n+true\n \n-statement error\n+query I\n select '2008-01-01 00:00:11'::TIMESTAMP_MS = '2008-01-01 00:00:11'::TIMESTAMP_S\n+----\n+true\n \n-statement error\n-select '2008-01-01 00:00:11'::TIMESTAMP_NS = '2008-01-01 00:00:11'::TIMESTAMP_S\n\\ No newline at end of file\n+query I\n+select '2008-01-01 00:00:11'::TIMESTAMP_NS = '2008-01-01 00:00:11'::TIMESTAMP_S\n+----\n+true\n",
  "problem_statement": "Unimplemented type for cast (TIMESTAMP_S -> TIMESTAMP_MS)\n### What happens?\n\nCannot compare timestamp values with different precisions.\n\n### To Reproduce\n\nv0.8.1 6536a77232\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD CREATE TABLE EXAMPLE (TS TIMESTAMP_S, TMS TIMESTAMP_MS);\r\nD INSERT INTO EXAMPLE VALUES('2019-10-10 15:30:05', '2019-10-10 15:30:05.123') ;\r\nD SELECT * FROM EXAMPLE WHERE TS = TMS;\r\nError: Conversion Error: Unimplemented type for cast (TIMESTAMP_S -> TIMESTAMP_MS)\r\n\n\n### OS:\n\nLinux\n\n### DuckDB Version:\n\nv0.8.1\n\n### DuckDB Client:\n\ncli\n\n### Full Name:\n\nLeonid Chistov\n\n### Affiliation:\n\nQuerify Labs\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "Workaround:\r\ncast them both to `TIMESTAMP`\r\n\r\n```sql\r\nSELECT * FROM EXAMPLE WHERE TS::TIMESTAMP = TMS::TIMESTAMP\r\n```",
  "created_at": "2023-09-18T09:34:54Z",
  "modified_files": [
    "src/common/operator/cast_operators.cpp",
    "src/function/cast/time_casts.cpp",
    "src/include/duckdb/common/operator/cast_operators.hpp"
  ]
}