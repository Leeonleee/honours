You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Internal Error: Calling StringValue::Get on a NULL value
### What happens?

An unexpected internal error happened: `Error: INTERNAL Error: Calling StringValue::Get on a NULL value`

### To Reproduce

```sql
CREATE TABLE t0(c0 VARCHAR);
SELECT REGEXP_MATCHES(c0, NULL) FROM t0;
-- Error: INTERNAL Error: Calling StringValue::Get on a NULL value
```

### OS:

ubuntu 22.04

### DuckDB Version:

v0.9.3-dev1060 bc1bfd6f1b

### DuckDB Client:

CLI

### Full Name:

Suyang Zhong

### Affiliation:

NUS

### Have you tried this on the latest `main` branch?

I have tested with a main build

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/logo-dl/DuckDB_Logo-stacked.svg" height="120">
3: </div>
4: <br>
5: 
6: 
7: 
8: 
9: <p align="center">
10:   <a href="https://github.com/duckdb/duckdb/actions">
11:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge">
12:   </a>
13:   <a href="https://discord.gg/tcvwpjfnZx">
14:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
15:   </a>
16:   <a href="https://github.com/duckdb/duckdb/releases/">
17:     <img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release">
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of src/optimizer/rule/regex_optimizations.cpp]
1: #include "duckdb/optimizer/rule/regex_optimizations.hpp"
2: 
3: #include "duckdb/execution/expression_executor.hpp"
4: #include "duckdb/planner/expression/bound_function_expression.hpp"
5: #include "duckdb/planner/expression/bound_constant_expression.hpp"
6: #include "duckdb/function/scalar/string_functions.hpp"
7: #include "duckdb/function/scalar/regexp.hpp"
8: 
9: #include "re2/re2.h"
10: #include "re2/regexp.h"
11: 
12: namespace duckdb {
13: 
14: RegexOptimizationRule::RegexOptimizationRule(ExpressionRewriter &rewriter) : Rule(rewriter) {
15: 	auto func = make_uniq<FunctionExpressionMatcher>();
16: 	func->function = make_uniq<SpecificFunctionMatcher>("regexp_matches");
17: 	func->policy = SetMatcher::Policy::SOME_ORDERED;
18: 	func->matchers.push_back(make_uniq<ExpressionMatcher>());
19: 	func->matchers.push_back(make_uniq<ConstantExpressionMatcher>());
20: 
21: 	root = std::move(func);
22: }
23: 
24: struct LikeString {
25: 	bool exists = true;
26: 	bool escaped = false;
27: 	string like_string = "";
28: };
29: 
30: static void AddCharacter(char chr, LikeString &ret, bool contains) {
31: 	// if we are not converting into a contains, and the string has LIKE special characters
32: 	// then don't return a possible LIKE match
33: 	// same if the character is a control character
34: 	if (iscntrl(chr) || (!contains && (chr == '%' || chr == '_'))) {
35: 		ret.exists = false;
36: 		return;
37: 	}
38: 	auto run_as_str {chr};
39: 	ret.like_string += run_as_str;
40: }
41: 
42: static LikeString GetLikeStringEscaped(duckdb_re2::Regexp *regexp, bool contains = false) {
43: 	D_ASSERT(regexp->op() == duckdb_re2::kRegexpLiteralString || regexp->op() == duckdb_re2::kRegexpLiteral);
44: 	LikeString ret;
45: 
46: 	if (regexp->parse_flags() & duckdb_re2::Regexp::FoldCase ||
47: 	    !(regexp->parse_flags() & duckdb_re2::Regexp::OneLine)) {
48: 		// parse flags can turn on and off within a regex match, return no optimization
49: 		// For now, we just don't optimize if these every turn on.
50: 		// TODO: logic to attempt the optimization, then if the parse flags change, then abort
51: 		ret.exists = false;
52: 		return ret;
53: 	}
54: 
55: 	// case insensitivity may be on now, but it can also turn off.
56: 	if (regexp->op() == duckdb_re2::kRegexpLiteralString) {
57: 		auto nrunes = (idx_t)regexp->nrunes();
58: 		auto runes = regexp->runes();
59: 		for (idx_t i = 0; i < nrunes; i++) {
60: 			char chr = toascii(runes[i]);
61: 			AddCharacter(chr, ret, contains);
62: 			if (!ret.exists) {
63: 				return ret;
64: 			}
65: 		}
66: 	} else {
67: 		auto rune = regexp->rune();
68: 		char chr = toascii(rune);
69: 		AddCharacter(chr, ret, contains);
70: 	}
71: 	D_ASSERT(ret.like_string.size() >= 1 || !ret.exists);
72: 	return ret;
73: }
74: 
75: static LikeString LikeMatchFromRegex(duckdb_re2::RE2 &pattern) {
76: 	LikeString ret = LikeString();
77: 	auto num_subs = pattern.Regexp()->nsub();
78: 	auto subs = pattern.Regexp()->sub();
79: 	auto cur_sub_index = 0;
80: 	while (cur_sub_index < num_subs) {
81: 		switch (subs[cur_sub_index]->op()) {
82: 		case duckdb_re2::kRegexpAnyChar:
83: 			if (cur_sub_index == 0) {
84: 				ret.like_string += "%";
85: 			}
86: 			ret.like_string += "_";
87: 			if (cur_sub_index + 1 == num_subs) {
88: 				ret.like_string += "%";
89: 			}
90: 			break;
91: 		case duckdb_re2::kRegexpStar:
92: 			// .* is a Star operator is a anyChar operator as a child.
93: 			// any other child operator would represent a pattern LIKE cannot match.
94: 			if (subs[cur_sub_index]->nsub() == 1 && subs[cur_sub_index]->sub()[0]->op() == duckdb_re2::kRegexpAnyChar) {
95: 				ret.like_string += "%";
96: 				break;
97: 			}
98: 			ret.exists = false;
99: 			return ret;
100: 		case duckdb_re2::kRegexpLiteralString:
101: 		case duckdb_re2::kRegexpLiteral: {
102: 			// if this is the only matching op, we should have directly called
103: 			// GetEscapedLikeString
104: 			D_ASSERT(!(cur_sub_index == 0 && cur_sub_index + 1 == num_subs));
105: 			if (cur_sub_index == 0) {
106: 				ret.like_string += "%";
107: 			}
108: 			// if the kRegexpLiteral or kRegexpLiteralString is the only op to match
109: 			// the string can directly be converted into a contains
110: 			LikeString escaped_like_string = GetLikeStringEscaped(subs[cur_sub_index], false);
111: 			if (!escaped_like_string.exists) {
112: 				return escaped_like_string;
113: 			}
114: 			ret.like_string += escaped_like_string.like_string;
115: 			ret.escaped = escaped_like_string.escaped;
116: 			if (cur_sub_index + 1 == num_subs) {
117: 				ret.like_string += "%";
118: 			}
119: 			break;
120: 		}
121: 		case duckdb_re2::kRegexpEndText:
122: 		case duckdb_re2::kRegexpEmptyMatch:
123: 		case duckdb_re2::kRegexpBeginText: {
124: 			break;
125: 		}
126: 		default:
127: 			// some other regexp op that doesn't have an equivalent to a like string
128: 			// return false;
129: 			ret.exists = false;
130: 			return ret;
131: 		}
132: 		cur_sub_index += 1;
133: 	}
134: 	return ret;
135: }
136: 
137: unique_ptr<Expression> RegexOptimizationRule::Apply(LogicalOperator &op, vector<reference<Expression>> &bindings,
138:                                                     bool &changes_made, bool is_root) {
139: 	auto &root = bindings[0].get().Cast<BoundFunctionExpression>();
140: 	auto &constant_expr = bindings[2].get().Cast<BoundConstantExpression>();
141: 	D_ASSERT(root.children.size() == 2 || root.children.size() == 3);
142: 	auto regexp_bind_data = root.bind_info.get()->Cast<RegexpMatchesBindData>();
143: 
144: 	auto constant_value = ExpressionExecutor::EvaluateScalar(GetContext(), constant_expr);
145: 	D_ASSERT(constant_value.type() == constant_expr.return_type);
146: 	auto patt_str = StringValue::Get(constant_value);
147: 
148: 	duckdb_re2::RE2::Options parsed_options = regexp_bind_data.options;
149: 
150: 	if (constant_expr.value.IsNull()) {
151: 		return make_uniq<BoundConstantExpression>(Value(root.return_type));
152: 	}
153: 
154: 	// the constant_expr is a scalar expression that we have to fold
155: 	if (!constant_expr.IsFoldable()) {
156: 		return nullptr;
157: 	};
158: 
159: 	duckdb_re2::RE2 pattern(patt_str, parsed_options);
160: 	if (!pattern.ok()) {
161: 		return nullptr; // this should fail somewhere else
162: 	}
163: 
164: 	LikeString like_string;
165: 	// check for a like string. If we can convert it to a like string, the like string
166: 	// optimizer will further optimize suffix and prefix things.
167: 	if (pattern.Regexp()->op() == duckdb_re2::kRegexpLiteralString ||
168: 	    pattern.Regexp()->op() == duckdb_re2::kRegexpLiteral) {
169: 		// convert to contains.
170: 		LikeString escaped_like_string = GetLikeStringEscaped(pattern.Regexp(), true);
171: 		if (!escaped_like_string.exists) {
172: 			return nullptr;
173: 		}
174: 		auto parameter = make_uniq<BoundConstantExpression>(Value(std::move(escaped_like_string.like_string)));
175: 		auto contains = make_uniq<BoundFunctionExpression>(root.return_type, ContainsFun::GetFunction(),
176: 		                                                   std::move(root.children), nullptr);
177: 		contains->children[1] = std::move(parameter);
178: 
179: 		return std::move(contains);
180: 	} else if (pattern.Regexp()->op() == duckdb_re2::kRegexpConcat) {
181: 		like_string = LikeMatchFromRegex(pattern);
182: 	} else {
183: 		like_string.exists = false;
184: 	}
185: 
186: 	if (!like_string.exists) {
187: 		return nullptr;
188: 	}
189: 
190: 	// if regexp had options, remove them so the new Like Expression can be matched for other optimizers.
191: 	if (root.children.size() == 3) {
192: 		root.children.pop_back();
193: 		D_ASSERT(root.children.size() == 2);
194: 	}
195: 
196: 	auto like_expression = make_uniq<BoundFunctionExpression>(root.return_type, LikeFun::GetLikeFunction(),
197: 	                                                          std::move(root.children), nullptr);
198: 	auto parameter = make_uniq<BoundConstantExpression>(Value(std::move(like_string.like_string)));
199: 	like_expression->children[1] = std::move(parameter);
200: 	return std::move(like_expression);
201: }
202: 
203: } // namespace duckdb
[end of src/optimizer/rule/regex_optimizations.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: