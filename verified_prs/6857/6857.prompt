You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
flatten() segfaults when called on bad input
### What happens?

Calling `flatten` on a list of literals, as opposed to a list of lists, results in a segfault instead of a user readable error.
Have not tried this on trunk. This is trivially reproducible for v0.7.1 b00b93f0b1 and master.

### To Reproduce

Just try to `select flatten([1,2]);`. Here's a copy and paste from my duckdb session:

```
D select flatten([[1,2]]);
┌─────────────────────────────────────────────────┐
│ flatten(main.list_value(main.list_value(1, 2))) │
│                     int32[]                     │
├─────────────────────────────────────────────────┤
│ [1, 2]                                          │
└─────────────────────────────────────────────────┘
D select flatten([1, 2]);
zsh: segmentation fault  duckdb
```

### OS:

MacOS,  M1, arm64

### DuckDB Version:

v0.7.1 b00b93f0b1, 0.7.2-dev1034 

### DuckDB Client:

CLI

### Full Name:

Dmitriy Ryaboy

### Affiliation:

Ginkgo Bioworks

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree
flatten() segfaults when called on bad input
### What happens?

Calling `flatten` on a list of literals, as opposed to a list of lists, results in a segfault instead of a user readable error.
Have not tried this on trunk. This is trivially reproducible for v0.7.1 b00b93f0b1 and master.

### To Reproduce

Just try to `select flatten([1,2]);`. Here's a copy and paste from my duckdb session:

```
D select flatten([[1,2]]);
┌─────────────────────────────────────────────────┐
│ flatten(main.list_value(main.list_value(1, 2))) │
│                     int32[]                     │
├─────────────────────────────────────────────────┤
│ [1, 2]                                          │
└─────────────────────────────────────────────────┘
D select flatten([1, 2]);
zsh: segmentation fault  duckdb
```

### OS:

MacOS,  M1, arm64

### DuckDB Version:

v0.7.1 b00b93f0b1, 0.7.2-dev1034 

### DuckDB Client:

CLI

### Full Name:

Dmitriy Ryaboy

### Affiliation:

Ginkgo Bioworks

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=master" alt="Github Actions Badge">
9:   </a>
10:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
11:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
12:   </a>
13:   <a href="https://discord.gg/tcvwpjfnZx">
14:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
15:   </a>
16:   <a href="https://github.com/duckdb/duckdb/releases/">
17:     <img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release">
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of src/function/cast_rules.cpp]
1: #include "duckdb/function/cast_rules.hpp"
2: 
3: namespace duckdb {
4: 
5: //! The target type determines the preferred implicit casts
6: static int64_t TargetTypeCost(const LogicalType &type) {
7: 	switch (type.id()) {
8: 	case LogicalTypeId::INTEGER:
9: 		return 103;
10: 	case LogicalTypeId::BIGINT:
11: 		return 101;
12: 	case LogicalTypeId::DOUBLE:
13: 		return 102;
14: 	case LogicalTypeId::HUGEINT:
15: 		return 120;
16: 	case LogicalTypeId::TIMESTAMP:
17: 		return 120;
18: 	case LogicalTypeId::VARCHAR:
19: 		return 149;
20: 	case LogicalTypeId::DECIMAL:
21: 		return 104;
22: 	case LogicalTypeId::STRUCT:
23: 	case LogicalTypeId::MAP:
24: 	case LogicalTypeId::LIST:
25: 	case LogicalTypeId::UNION:
26: 		return 160;
27: 	default:
28: 		return 110;
29: 	}
30: }
31: 
32: static int64_t ImplicitCastTinyint(const LogicalType &to) {
33: 	switch (to.id()) {
34: 	case LogicalTypeId::SMALLINT:
35: 	case LogicalTypeId::INTEGER:
36: 	case LogicalTypeId::BIGINT:
37: 	case LogicalTypeId::HUGEINT:
38: 	case LogicalTypeId::FLOAT:
39: 	case LogicalTypeId::DOUBLE:
40: 	case LogicalTypeId::DECIMAL:
41: 		return TargetTypeCost(to);
42: 	default:
43: 		return -1;
44: 	}
45: }
46: 
47: static int64_t ImplicitCastSmallint(const LogicalType &to) {
48: 	switch (to.id()) {
49: 	case LogicalTypeId::INTEGER:
50: 	case LogicalTypeId::BIGINT:
51: 	case LogicalTypeId::HUGEINT:
52: 	case LogicalTypeId::FLOAT:
53: 	case LogicalTypeId::DOUBLE:
54: 	case LogicalTypeId::DECIMAL:
55: 		return TargetTypeCost(to);
56: 	default:
57: 		return -1;
58: 	}
59: }
60: 
61: static int64_t ImplicitCastInteger(const LogicalType &to) {
62: 	switch (to.id()) {
63: 	case LogicalTypeId::BIGINT:
64: 	case LogicalTypeId::HUGEINT:
65: 	case LogicalTypeId::FLOAT:
66: 	case LogicalTypeId::DOUBLE:
67: 	case LogicalTypeId::DECIMAL:
68: 		return TargetTypeCost(to);
69: 	default:
70: 		return -1;
71: 	}
72: }
73: 
74: static int64_t ImplicitCastBigint(const LogicalType &to) {
75: 	switch (to.id()) {
76: 	case LogicalTypeId::FLOAT:
77: 	case LogicalTypeId::DOUBLE:
78: 	case LogicalTypeId::HUGEINT:
79: 	case LogicalTypeId::DECIMAL:
80: 		return TargetTypeCost(to);
81: 	default:
82: 		return -1;
83: 	}
84: }
85: 
86: static int64_t ImplicitCastUTinyint(const LogicalType &to) {
87: 	switch (to.id()) {
88: 	case LogicalTypeId::USMALLINT:
89: 	case LogicalTypeId::UINTEGER:
90: 	case LogicalTypeId::UBIGINT:
91: 	case LogicalTypeId::SMALLINT:
92: 	case LogicalTypeId::INTEGER:
93: 	case LogicalTypeId::BIGINT:
94: 	case LogicalTypeId::HUGEINT:
95: 	case LogicalTypeId::FLOAT:
96: 	case LogicalTypeId::DOUBLE:
97: 	case LogicalTypeId::DECIMAL:
98: 		return TargetTypeCost(to);
99: 	default:
100: 		return -1;
101: 	}
102: }
103: 
104: static int64_t ImplicitCastUSmallint(const LogicalType &to) {
105: 	switch (to.id()) {
106: 	case LogicalTypeId::UINTEGER:
107: 	case LogicalTypeId::UBIGINT:
108: 	case LogicalTypeId::INTEGER:
109: 	case LogicalTypeId::BIGINT:
110: 	case LogicalTypeId::HUGEINT:
111: 	case LogicalTypeId::FLOAT:
112: 	case LogicalTypeId::DOUBLE:
113: 	case LogicalTypeId::DECIMAL:
114: 		return TargetTypeCost(to);
115: 	default:
116: 		return -1;
117: 	}
118: }
119: 
120: static int64_t ImplicitCastUInteger(const LogicalType &to) {
121: 	switch (to.id()) {
122: 
123: 	case LogicalTypeId::UBIGINT:
124: 	case LogicalTypeId::BIGINT:
125: 	case LogicalTypeId::HUGEINT:
126: 	case LogicalTypeId::FLOAT:
127: 	case LogicalTypeId::DOUBLE:
128: 	case LogicalTypeId::DECIMAL:
129: 		return TargetTypeCost(to);
130: 	default:
131: 		return -1;
132: 	}
133: }
134: 
135: static int64_t ImplicitCastUBigint(const LogicalType &to) {
136: 	switch (to.id()) {
137: 	case LogicalTypeId::FLOAT:
138: 	case LogicalTypeId::DOUBLE:
139: 	case LogicalTypeId::HUGEINT:
140: 	case LogicalTypeId::DECIMAL:
141: 		return TargetTypeCost(to);
142: 	default:
143: 		return -1;
144: 	}
145: }
146: 
147: static int64_t ImplicitCastFloat(const LogicalType &to) {
148: 	switch (to.id()) {
149: 	case LogicalTypeId::DOUBLE:
150: 		return TargetTypeCost(to);
151: 	default:
152: 		return -1;
153: 	}
154: }
155: 
156: static int64_t ImplicitCastDouble(const LogicalType &to) {
157: 	switch (to.id()) {
158: 	default:
159: 		return -1;
160: 	}
161: }
162: 
163: static int64_t ImplicitCastDecimal(const LogicalType &to) {
164: 	switch (to.id()) {
165: 	case LogicalTypeId::FLOAT:
166: 	case LogicalTypeId::DOUBLE:
167: 		return TargetTypeCost(to);
168: 	default:
169: 		return -1;
170: 	}
171: }
172: 
173: static int64_t ImplicitCastHugeint(const LogicalType &to) {
174: 	switch (to.id()) {
175: 	case LogicalTypeId::FLOAT:
176: 	case LogicalTypeId::DOUBLE:
177: 	case LogicalTypeId::DECIMAL:
178: 		return TargetTypeCost(to);
179: 	default:
180: 		return -1;
181: 	}
182: }
183: 
184: static int64_t ImplicitCastDate(const LogicalType &to) {
185: 	switch (to.id()) {
186: 	case LogicalTypeId::TIMESTAMP:
187: 		return TargetTypeCost(to);
188: 	default:
189: 		return -1;
190: 	}
191: }
192: 
193: int64_t CastRules::ImplicitCast(const LogicalType &from, const LogicalType &to) {
194: 	if (from.id() == LogicalTypeId::SQLNULL) {
195: 		// NULL expression can be cast to anything
196: 		return TargetTypeCost(to);
197: 	}
198: 	if (from.id() == LogicalTypeId::UNKNOWN) {
199: 		// parameter expression can be cast to anything for no cost
200: 		return 0;
201: 	}
202: 	if (to.id() == LogicalTypeId::ANY) {
203: 		// anything can be cast to ANY type for (almost no) cost
204: 		return 1;
205: 	}
206: 	if (from.GetAlias() != to.GetAlias()) {
207: 		// if aliases are different, an implicit cast is not possible
208: 		return -1;
209: 	}
210: 	if (from.id() == to.id()) {
211: 		// arguments match: do nothing
212: 		return 0;
213: 	}
214: 	if (from.id() == LogicalTypeId::BLOB && to.id() == LogicalTypeId::VARCHAR) {
215: 		// Implicit cast not allowed from BLOB to VARCHAR
216: 		return -1;
217: 	}
218: 	if (to.id() == LogicalTypeId::VARCHAR) {
219: 		// everything can be cast to VARCHAR, but this cast has a high cost
220: 		return TargetTypeCost(to);
221: 	}
222: 	if (from.id() == LogicalTypeId::LIST && to.id() == LogicalTypeId::LIST) {
223: 		// Lists can be cast if their child types can be cast
224: 		return ImplicitCast(ListType::GetChildType(from), ListType::GetChildType(to));
225: 	}
226: 
227: 	if (from.id() == LogicalTypeId::UNION && to.id() == LogicalTypeId::UNION) {
228: 		// Unions can be cast if the source tags are a subset of the target tags
229: 		// in which case the most expensive cost is used
230: 		int cost = -1;
231: 		for (idx_t from_member_idx = 0; from_member_idx < UnionType::GetMemberCount(from); from_member_idx++) {
232: 			auto &from_member_name = UnionType::GetMemberName(from, from_member_idx);
233: 
234: 			bool found = false;
235: 			for (idx_t to_member_idx = 0; to_member_idx < UnionType::GetMemberCount(to); to_member_idx++) {
236: 				auto &to_member_name = UnionType::GetMemberName(to, to_member_idx);
237: 
238: 				if (from_member_name == to_member_name) {
239: 					auto &from_member_type = UnionType::GetMemberType(from, from_member_idx);
240: 					auto &to_member_type = UnionType::GetMemberType(to, to_member_idx);
241: 
242: 					int child_cost = ImplicitCast(from_member_type, to_member_type);
243: 					if (child_cost > cost) {
244: 						cost = child_cost;
245: 					}
246: 					found = true;
247: 					break;
248: 				}
249: 			}
250: 			if (!found) {
251: 				return -1;
252: 			}
253: 		}
254: 		return cost;
255: 	}
256: 
257: 	if (to.id() == LogicalTypeId::UNION) {
258: 		// check that the union type is fully resolved.
259: 		if (to.AuxInfo() == nullptr) {
260: 			return -1;
261: 		}
262: 		// every type can be implicitly be cast to a union if the source type is a member of the union
263: 		for (idx_t i = 0; i < UnionType::GetMemberCount(to); i++) {
264: 			auto member = UnionType::GetMemberType(to, i);
265: 			if (from == member) {
266: 				return 0;
267: 			}
268: 		}
269: 	}
270: 
271: 	if ((from.id() == LogicalTypeId::TIMESTAMP_SEC || from.id() == LogicalTypeId::TIMESTAMP_MS ||
272: 	     from.id() == LogicalTypeId::TIMESTAMP_NS) &&
273: 	    to.id() == LogicalTypeId::TIMESTAMP) {
274: 		//! Any timestamp type can be converted to the default (us) type at low cost
275: 		return 101;
276: 	}
277: 	if ((to.id() == LogicalTypeId::TIMESTAMP_SEC || to.id() == LogicalTypeId::TIMESTAMP_MS ||
278: 	     to.id() == LogicalTypeId::TIMESTAMP_NS) &&
279: 	    from.id() == LogicalTypeId::TIMESTAMP) {
280: 		//! Any timestamp type can be converted to the default (us) type at low cost
281: 		return 100;
282: 	}
283: 	switch (from.id()) {
284: 	case LogicalTypeId::TINYINT:
285: 		return ImplicitCastTinyint(to);
286: 	case LogicalTypeId::SMALLINT:
287: 		return ImplicitCastSmallint(to);
288: 	case LogicalTypeId::INTEGER:
289: 		return ImplicitCastInteger(to);
290: 	case LogicalTypeId::BIGINT:
291: 		return ImplicitCastBigint(to);
292: 	case LogicalTypeId::UTINYINT:
293: 		return ImplicitCastUTinyint(to);
294: 	case LogicalTypeId::USMALLINT:
295: 		return ImplicitCastUSmallint(to);
296: 	case LogicalTypeId::UINTEGER:
297: 		return ImplicitCastUInteger(to);
298: 	case LogicalTypeId::UBIGINT:
299: 		return ImplicitCastUBigint(to);
300: 	case LogicalTypeId::HUGEINT:
301: 		return ImplicitCastHugeint(to);
302: 	case LogicalTypeId::FLOAT:
303: 		return ImplicitCastFloat(to);
304: 	case LogicalTypeId::DOUBLE:
305: 		return ImplicitCastDouble(to);
306: 	case LogicalTypeId::DATE:
307: 		return ImplicitCastDate(to);
308: 	case LogicalTypeId::DECIMAL:
309: 		return ImplicitCastDecimal(to);
310: 	default:
311: 		return -1;
312: 	}
313: }
314: 
315: } // namespace duckdb
[end of src/function/cast_rules.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: