{
  "repo": "duckdb/duckdb",
  "pull_number": 10152,
  "instance_id": "duckdb__duckdb-10152",
  "issue_numbers": [
    "10124"
  ],
  "base_commit": "a55f89cd9e956b3e575532e058c230461799ac64",
  "patch": "diff --git a/src/planner/expression/bound_window_expression.cpp b/src/planner/expression/bound_window_expression.cpp\nindex c2a194c89b42..7dd33ca82014 100644\n--- a/src/planner/expression/bound_window_expression.cpp\n+++ b/src/planner/expression/bound_window_expression.cpp\n@@ -46,6 +46,12 @@ bool BoundWindowExpression::Equals(const BaseExpression &other_p) const {\n \t\t\treturn false;\n \t\t}\n \t}\n+\t// If there's function data, check if they are equal\n+\tif (bind_info.get() != other.bind_info.get()) {\n+\t\tif (!bind_info || !other.bind_info || !bind_info->Equals(*other.bind_info)) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n \t// check if the child expressions are equivalent\n \tif (!Expression::ListEquals(children, other.children)) {\n \t\treturn false;\n",
  "test_patch": "diff --git a/test/sql/window/test_window_cse.test b/test/sql/window/test_window_cse.test\nindex 214869b3da71..6a1731f6807b 100644\n--- a/test/sql/window/test_window_cse.test\n+++ b/test/sql/window/test_window_cse.test\n@@ -62,3 +62,17 @@ query II\n EXPLAIN FROM cse;\n ----\n physical_plan\t<!REGEX>:.*sum\\(cnt_trace\\).*sum\\(cnt_trace\\).*sum\\(cnt_trace\\).*\n+\n+\n+statement ok\n+CREATE VIEW noncse AS\n+SELECT\n+    quantile(x, 0.3) over() as q3,\n+    quantile(x, 0.7) over() as q7\n+FROM generate_series(1, 10) as tbl(x);\n+\n+# Non-CSE should not eliminate the 2nd quantile computation\n+query II\n+EXPLAIN FROM noncse;\n+----\n+physical_plan\t<REGEX>:.*quantile\\(x\\).*quantile\\(x\\).*\n",
  "problem_statement": "False CSE elimination for quantile window functions\n### What happens?\n\nQUANTILE window functions are recognized as the same but they're not. The [CSE elimination](https://github.com/duckdb/duckdb/blob/25617f3135b5867819f32da06e9c846e3788644c/src/execution/physical_plan/plan_window.cpp#L101) seems to miss some information for functions with `bind_info`. \n\n### To Reproduce\n\n```python\r\nimport duckdb\r\n\r\ndf = duckdb.query(\"\"\"\r\n    select\r\n        quantile(x, 0.3) over() as q3,\r\n        quantile(x, 0.7) over() as q7\r\n    from generate_series(1, 10) as tbl(x)\r\n\"\"\").df()\r\nprint(df)\r\n```\r\nThe above code produces:\r\n```\r\n   q3  q7\r\n0   3   3\r\n1   3   3\r\n2   3   3\r\n3   3   3\r\n4   3   3\r\n5   3   3\r\n6   3   3\r\n7   3   3\r\n8   3   3\r\n9   3   3\r\n```\r\nBut `q7` should be `7`.\r\n\r\nAdding\r\n```c++\r\nif (bind_info.get() != other.bind_info.get()) {\r\n\tif (!bind_info || !other.bind_info || !bind_info->Equals(*other.bind_info)) {\r\n\t\treturn false;\r\n\t}\r\n}\r\n```\r\nto the [`BoundWindowExpression::Equals(const BaseExpression &other_p)`](https://github.com/duckdb/duckdb/blob/25617f3135b5867819f32da06e9c846e3788644c/src/planner/expression/bound_window_expression.cpp#L44) function appears to fix this problem.\n\n### OS:\n\nUbuntu 22.04.2 LTS, aarch64\n\n### DuckDB Version:\n\n0.9.3.dev2108\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nMark\n\n### Affiliation:\n\nbq\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a main build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "Thanks for reporting this. This is a regression from 0.9.2 where this error did not occur:\r\n\r\n```sql\r\nv0.9.2 3c695d7ba9\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\n\u26aa\u25d7 select\r\n>         quantile(x, 0.3) over() as q3,\r\n>         quantile(x, 0.7) over() as q7\r\n>     from generate_series(1, 10) as tbl(x)\r\n> ;\r\n```\r\n```text\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  q3   \u2502  q7   \u2502\r\n\u2502 int64 \u2502 int64 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     3 \u2502     7 \u2502\r\n\u2502     3 \u2502     7 \u2502\r\n\u2502     3 \u2502     7 \u2502\r\n\u2502     3 \u2502     7 \u2502\r\n\u2502     3 \u2502     7 \u2502\r\n\u2502     3 \u2502     7 \u2502\r\n\u2502     3 \u2502     7 \u2502\r\n\u2502     3 \u2502     7 \u2502\r\n\u2502     3 \u2502     7 \u2502\r\n\u2502     3 \u2502     7 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502    10 rows    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nThe proposed change indeed seems to fix the problem. Would you be interested in submitting a PR with a test case?",
  "created_at": "2024-01-05T15:57:02Z"
}