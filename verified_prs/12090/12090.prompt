You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
0.10.2 regression: Can no longer ORDER BY qualified column references in array value constructor by query
### What happens?

The standard SQL `<array value constructor by query>` syntax allowed for using qualified column references in `ORDER BY` in 0.10.1, but this no longer works in 0.10.2

### To Reproduce

This worked in 0.10.1:

```sql
create table t (i int);
insert into t values (1),(2);

select array(
  select t.i
  from t
  order by t.i desc
)
```

It no longer does in 0.10.2:

```
SQL Error: java.sql.SQLException: Binder Error: Referenced table "t" not found!
LINE 4:   order by t.i desc
                   ^
```

The workaround is to use unqualified column references:

```sql
select array(
  select t.i
  from t
  order by i desc
)
```

I don't see any reason for this limitation.

### OS:

Microsoft Windows [Version 10.0.22631.3447]

### DuckDB Version:

0.10.2

### DuckDB Client:

JDBC

### Full Name:

Lukas Eder

### Affiliation:

Data Geekery

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a stable release

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
18: 
19: ## Installation
20: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
21: 
22: ## Data Import
23: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
24: 
25: ```sql
26: SELECT * FROM 'myfile.csv';
27: SELECT * FROM 'myfile.parquet';
28: ```
29: 
30: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
31: 
32: ## SQL Reference
33: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
34: 
35: ## Development
36: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
37: 
38: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
39: 
40: ## Support
41: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/parser/transform/expression/transform_subquery.cpp]
1: #include "duckdb/parser/expression/list.hpp"
2: #include "duckdb/parser/transformer.hpp"
3: #include "duckdb/parser/query_node/select_node.hpp"
4: #include "duckdb/parser/tableref/subqueryref.hpp"
5: #include "duckdb/parser/expression/constant_expression.hpp"
6: #include "duckdb/parser/expression/positional_reference_expression.hpp"
7: 
8: namespace duckdb {
9: 
10: unique_ptr<ParsedExpression> Transformer::TransformSubquery(duckdb_libpgquery::PGSubLink &root) {
11: 	auto subquery_expr = make_uniq<SubqueryExpression>();
12: 
13: 	subquery_expr->subquery = TransformSelect(root.subselect);
14: 	SetQueryLocation(*subquery_expr, root.location);
15: 	D_ASSERT(subquery_expr->subquery);
16: 	D_ASSERT(!subquery_expr->subquery->node->GetSelectList().empty());
17: 
18: 	switch (root.subLinkType) {
19: 	case duckdb_libpgquery::PG_EXISTS_SUBLINK: {
20: 		subquery_expr->subquery_type = SubqueryType::EXISTS;
21: 		break;
22: 	}
23: 	case duckdb_libpgquery::PG_ANY_SUBLINK:
24: 	case duckdb_libpgquery::PG_ALL_SUBLINK: {
25: 		// comparison with ANY() or ALL()
26: 		subquery_expr->subquery_type = SubqueryType::ANY;
27: 		subquery_expr->child = TransformExpression(root.testexpr);
28: 		// get the operator name
29: 		if (!root.operName) {
30: 			// simple IN
31: 			subquery_expr->comparison_type = ExpressionType::COMPARE_EQUAL;
32: 		} else {
33: 			auto operator_name =
34: 			    string((PGPointerCast<duckdb_libpgquery::PGValue>(root.operName->head->data.ptr_value))->val.str);
35: 			subquery_expr->comparison_type = OperatorToExpressionType(operator_name);
36: 		}
37: 		if (subquery_expr->comparison_type != ExpressionType::COMPARE_EQUAL &&
38: 		    subquery_expr->comparison_type != ExpressionType::COMPARE_NOTEQUAL &&
39: 		    subquery_expr->comparison_type != ExpressionType::COMPARE_GREATERTHAN &&
40: 		    subquery_expr->comparison_type != ExpressionType::COMPARE_GREATERTHANOREQUALTO &&
41: 		    subquery_expr->comparison_type != ExpressionType::COMPARE_LESSTHAN &&
42: 		    subquery_expr->comparison_type != ExpressionType::COMPARE_LESSTHANOREQUALTO) {
43: 			throw ParserException("ANY and ALL operators require one of =,<>,>,<,>=,<= comparisons!");
44: 		}
45: 		if (root.subLinkType == duckdb_libpgquery::PG_ALL_SUBLINK) {
46: 			// ALL sublink is equivalent to NOT(ANY) with inverted comparison
47: 			// e.g. [= ALL()] is equivalent to [NOT(<> ANY())]
48: 			// first invert the comparison type
49: 			subquery_expr->comparison_type = NegateComparisonExpression(subquery_expr->comparison_type);
50: 			return make_uniq<OperatorExpression>(ExpressionType::OPERATOR_NOT, std::move(subquery_expr));
51: 		}
52: 		break;
53: 	}
54: 	case duckdb_libpgquery::PG_EXPR_SUBLINK: {
55: 		// return a single scalar value from the subquery
56: 		// no child expression to compare to
57: 		subquery_expr->subquery_type = SubqueryType::SCALAR;
58: 		break;
59: 	}
60: 	case duckdb_libpgquery::PG_ARRAY_SUBLINK: {
61: 		// ARRAY expression
62: 		// wrap subquery into
63: 		// "SELECT CASE WHEN ARRAY_AGG(COLUMNS(*)) IS NULL THEN [] ELSE ARRAY_AGG(COLUMNS(*)) END FROM (...) tbl"
64: 		auto select_node = make_uniq<SelectNode>();
65: 
66: 		// COLUMNS(*)
67: 		auto columns_star = make_uniq<StarExpression>();
68: 		columns_star->columns = true;
69: 
70: 		// ARRAY_AGG(COLUMNS(*))
71: 		vector<unique_ptr<ParsedExpression>> children;
72: 		children.push_back(std::move(columns_star));
73: 		auto aggr = make_uniq<FunctionExpression>("array_agg", std::move(children));
74: 		// push ORDER BY modifiers into the array_agg
75: 		for (auto &modifier : subquery_expr->subquery->node->modifiers) {
76: 			if (modifier->type == ResultModifierType::ORDER_MODIFIER) {
77: 				aggr->order_bys = unique_ptr_cast<ResultModifier, OrderModifier>(modifier->Copy());
78: 				break;
79: 			}
80: 		}
81: 		// transform constants (e.g. ORDER BY 1) into positional references (ORDER BY #1)
82: 		if (aggr->order_bys) {
83: 			for (auto &order : aggr->order_bys->orders) {
84: 				if (order.expression->type == ExpressionType::VALUE_CONSTANT) {
85: 					auto &constant_expr = order.expression->Cast<ConstantExpression>();
86: 					Value bigint_value;
87: 					string error;
88: 					if (constant_expr.value.DefaultTryCastAs(LogicalType::BIGINT, bigint_value, &error)) {
89: 						int64_t order_index = BigIntValue::Get(bigint_value);
90: 						idx_t positional_index = order_index < 0 ? NumericLimits<idx_t>::Maximum() : idx_t(order_index);
91: 						order.expression = make_uniq<PositionalReferenceExpression>(positional_index);
92: 					}
93: 				}
94: 			}
95: 		}
96: 		// ARRAY_AGG(COLUMNS(*)) IS NULL
97: 		auto agg_is_null = make_uniq<OperatorExpression>(ExpressionType::OPERATOR_IS_NULL, aggr->Copy());
98: 		// empty list
99: 		vector<unique_ptr<ParsedExpression>> list_children;
100: 		auto empty_list = make_uniq<FunctionExpression>("list_value", std::move(list_children));
101: 		// CASE
102: 		auto case_expr = make_uniq<CaseExpression>();
103: 		CaseCheck check;
104: 		check.when_expr = std::move(agg_is_null);
105: 		check.then_expr = std::move(empty_list);
106: 		case_expr->case_checks.push_back(std::move(check));
107: 		case_expr->else_expr = std::move(aggr);
108: 
109: 		select_node->select_list.push_back(std::move(case_expr));
110: 
111: 		// FROM (...) tbl
112: 		auto child_subquery = make_uniq<SubqueryRef>(std::move(subquery_expr->subquery));
113: 		select_node->from_table = std::move(child_subquery);
114: 
115: 		auto new_subquery = make_uniq<SelectStatement>();
116: 		new_subquery->node = std::move(select_node);
117: 		subquery_expr->subquery = std::move(new_subquery);
118: 
119: 		subquery_expr->subquery_type = SubqueryType::SCALAR;
120: 		break;
121: 	}
122: 	default:
123: 		throw NotImplementedException("Subquery of type %d not implemented\n", (int)root.subLinkType);
124: 	}
125: 	return std::move(subquery_expr);
126: }
127: 
128: } // namespace duckdb
[end of src/parser/transform/expression/transform_subquery.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: