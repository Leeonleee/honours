{
  "repo": "duckdb/duckdb",
  "pull_number": 12090,
  "instance_id": "duckdb__duckdb-12090",
  "issue_numbers": [
    "11780"
  ],
  "base_commit": "148a1025d1d486d4c2751728bb6ac70e4f3bea61",
  "patch": "diff --git a/src/parser/transform/expression/transform_subquery.cpp b/src/parser/transform/expression/transform_subquery.cpp\nindex c8dbe23a48c8..2a06d5907e92 100644\n--- a/src/parser/transform/expression/transform_subquery.cpp\n+++ b/src/parser/transform/expression/transform_subquery.cpp\n@@ -4,9 +4,23 @@\n #include \"duckdb/parser/tableref/subqueryref.hpp\"\n #include \"duckdb/parser/expression/constant_expression.hpp\"\n #include \"duckdb/parser/expression/positional_reference_expression.hpp\"\n+#include \"duckdb/parser/parsed_expression_iterator.hpp\"\n \n namespace duckdb {\n \n+void RemoveOrderQualificationRecursive(unique_ptr<ParsedExpression> &expr) {\n+\tif (expr->GetExpressionType() == ExpressionType::COLUMN_REF) {\n+\t\tauto &col_ref = expr->Cast<ColumnRefExpression>();\n+\t\tauto &col_names = col_ref.column_names;\n+\t\tif (col_names.size() > 1) {\n+\t\t\tcol_names = vector<string> {col_names.back()};\n+\t\t}\n+\t} else {\n+\t\tParsedExpressionIterator::EnumerateChildren(\n+\t\t    *expr, [](unique_ptr<ParsedExpression> &child) { RemoveOrderQualificationRecursive(child); });\n+\t}\n+}\n+\n unique_ptr<ParsedExpression> Transformer::TransformSubquery(duckdb_libpgquery::PGSubLink &root) {\n \tauto subquery_expr = make_uniq<SubqueryExpression>();\n \n@@ -90,6 +104,8 @@ unique_ptr<ParsedExpression> Transformer::TransformSubquery(duckdb_libpgquery::P\n \t\t\t\t\t\tidx_t positional_index = order_index < 0 ? NumericLimits<idx_t>::Maximum() : idx_t(order_index);\n \t\t\t\t\t\torder.expression = make_uniq<PositionalReferenceExpression>(positional_index);\n \t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tRemoveOrderQualificationRecursive(order.expression);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n",
  "test_patch": "diff --git a/test/sql/subquery/scalar/array_order_subquery.test b/test/sql/subquery/scalar/array_order_subquery.test\nindex 13af1aa1816d..759a93589e48 100644\n--- a/test/sql/subquery/scalar/array_order_subquery.test\n+++ b/test/sql/subquery/scalar/array_order_subquery.test\n@@ -19,7 +19,6 @@ select\n ----\n [4, 3, 2, 1]\t[4, 3, 2, 1]\t[4, 3, 2, 1]\n \n-\n # correlated\n query I\n select array(select unnest(l) AS i order by i desc nulls last) as a from (values ([NULL, 1, 2, 3, 4]), ([5, 6, NULL, 7, 8]), ([]), ([10, 11, 12])) t(l);\n@@ -47,6 +46,25 @@ SELECT ARRAY\n ----\n [1, 2, 3]\n \n+# qualified names\n+query I\n+select\n+  array(select distinct i from t order by t.i desc) as a\n+----\n+[4, 3, 2, 1]\n+\n+query I\n+select\n+  array(select distinct i from t union all select distinct i from t order by t.i desc) as a\n+----\n+[4, 4, 3, 3, 2, 2, 1, 1]\n+\n+statement error\n+select\n+  array(select distinct i from t order by x.i desc) as a\n+----\n+Referenced table \"x\" not found\n+\n query I\n SELECT ARRAY\n   (SELECT 1 UNION ALL\n",
  "problem_statement": "0.10.2 regression: Can no longer ORDER BY qualified column references in array value constructor by query\n### What happens?\n\nThe standard SQL `<array value constructor by query>` syntax allowed for using qualified column references in `ORDER BY` in 0.10.1, but this no longer works in 0.10.2\n\n### To Reproduce\n\nThis worked in 0.10.1:\r\n\r\n```sql\r\ncreate table t (i int);\r\ninsert into t values (1),(2);\r\n\r\nselect array(\r\n  select t.i\r\n  from t\r\n  order by t.i desc\r\n)\r\n```\r\n\r\nIt no longer does in 0.10.2:\r\n\r\n```\r\nSQL Error: java.sql.SQLException: Binder Error: Referenced table \"t\" not found!\r\nLINE 4:   order by t.i desc\r\n                   ^\r\n```\r\n\r\nThe workaround is to use unqualified column references:\r\n\r\n```sql\r\nselect array(\r\n  select t.i\r\n  from t\r\n  order by i desc\r\n)\r\n```\r\n\r\nI don't see any reason for this limitation.\n\n### OS:\n\nMicrosoft Windows [Version 10.0.22631.3447]\n\n### DuckDB Version:\n\n0.10.2\n\n### DuckDB Client:\n\nJDBC\n\n### Full Name:\n\nLukas Eder\n\n### Affiliation:\n\nData Geekery\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-05-16T14:25:50Z",
  "modified_files": [
    "a/src/parser/transform/expression/transform_subquery.cpp"
  ]
}