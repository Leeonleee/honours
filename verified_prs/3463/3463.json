{
  "repo": "duckdb/duckdb",
  "pull_number": 3463,
  "instance_id": "duckdb__duckdb-3463",
  "issue_numbers": [
    "3450",
    "3450"
  ],
  "base_commit": "ec827df5f0d5fc92840cde936c2a5b114e64e000",
  "patch": "diff --git a/src/function/scalar/list/contains_or_position.cpp b/src/function/scalar/list/contains_or_position.cpp\nindex d8c67367571f..f10dcaa5a71b 100644\n--- a/src/function/scalar/list/contains_or_position.cpp\n+++ b/src/function/scalar/list/contains_or_position.cpp\n@@ -63,6 +63,10 @@ static void TemplatedContainsOrPosition(DataChunk &args, ExpressionState &state,\n \tVectorData value_data;\n \tvalue_vector.Orrify(count, value_data);\n \n+\t// not required for a comparison of nested types\n+\tauto child_value = FlatVector::GetData<CHILD_TYPE>(child_vector);\n+\tauto values = FlatVector::GetData<CHILD_TYPE>(value_vector);\n+\n \tfor (idx_t i = 0; i < count; i++) {\n \t\tauto list_index = list_data.sel->get_index(i);\n \t\tauto value_index = value_data.sel->get_index(i);\n@@ -73,23 +77,18 @@ static void TemplatedContainsOrPosition(DataChunk &args, ExpressionState &state,\n \t\t}\n \n \t\tconst auto &list_entry = list_entries[list_index];\n-\t\tauto source_idx = child_data.sel->get_index(list_entry.offset);\n-\n-\t\t// not required for a comparison of nested types\n-\t\tauto child_value = FlatVector::GetData<CHILD_TYPE>(child_vector);\n-\t\tauto values = FlatVector::GetData<CHILD_TYPE>(value_vector);\n \n-\t\tresult_entries[list_index] = OP::Initialize();\n+\t\tresult_entries[i] = OP::Initialize();\n \t\tfor (idx_t child_idx = 0; child_idx < list_entry.length; child_idx++) {\n-\t\t\tauto child_value_idx = source_idx + child_idx;\n \n+\t\t\tauto child_value_idx = child_data.sel->get_index(list_entry.offset + child_idx);\n \t\t\tif (!child_data.validity.RowIsValid(child_value_idx)) {\n \t\t\t\tcontinue;\n \t\t\t}\n \n \t\t\tif (!is_nested) {\n \t\t\t\tif (ValueEqualsOrNot<CHILD_TYPE>(child_value[child_value_idx], values[value_index])) {\n-\t\t\t\t\tresult_entries[list_index] = OP::UpdateResultEntries(child_idx);\n+\t\t\t\t\tresult_entries[i] = OP::UpdateResultEntries(child_idx);\n \t\t\t\t\tbreak; // Found value in list, no need to look further\n \t\t\t\t}\n \t\t\t} else {\n@@ -97,7 +96,7 @@ static void TemplatedContainsOrPosition(DataChunk &args, ExpressionState &state,\n \t\t\t\t// to more efficiently compare nested types\n \t\t\t\tif (ValueEqualsOrNot<Value>(child_vector.GetValue(child_value_idx),\n \t\t\t\t                            value_vector.GetValue(value_index))) {\n-\t\t\t\t\tresult_entries[list_index] = OP::UpdateResultEntries(child_idx);\n+\t\t\t\t\tresult_entries[i] = OP::UpdateResultEntries(child_idx);\n \t\t\t\t\tbreak; // Found value in list, no need to look further\n \t\t\t\t}\n \t\t\t}\n",
  "test_patch": "diff --git a/test/sql/function/list/list_contains.test b/test/sql/function/list/list_contains.test\nindex 9101e587170c..2028d4df5afe 100644\n--- a/test/sql/function/list/list_contains.test\n+++ b/test/sql/function/list/list_contains.test\n@@ -376,4 +376,49 @@ PRAGMA debug_force_external=false\n \n endloop\n \n-endloop\n\\ No newline at end of file\n+endloop\n+\n+# issue 3450 test case\n+\n+statement ok\n+CREATE TABLE functions (function_name varchar, function_type varchar, parameter_types varchar[]);\n+\n+statement ok\n+INSERT INTO functions VALUES ('last_day', 'scalar', ['TIMESTAMP']), ('dayname', 'else', ['TIMESTAMP']),\n+\t('date_part', 'scalar', ['DATE', 'VARCHAR']), ('scalar_part', 'scalar', ['VARCHAR', 'TIMESTAMP']);\n+\n+query I\n+SELECT function_name FROM functions\n+WHERE function_type = 'scalar' AND list_has(parameter_types, 'TIMESTAMP');\n+----\n+last_day\n+scalar_part\n+\n+# issue 3457 test case\n+\n+statement ok\n+CREATE TABLE test (id int, name text[]);\n+\n+statement ok\n+INSERT INTO test VALUES (1, ['U2']), (2, ['Blur','Rock']), (3, ['Oasis','2Pac']);\n+\n+query II\n+SELECT id, name FROM test WHERE ARRAY_CONTAINS(name, '2Pac');\n+----\n+3\t[Oasis, 2Pac]\n+\n+query II\n+SELECT id, name FROM test WHERE id IN (2,3) AND ARRAY_CONTAINS(name, '2Pac');\n+----\n+3\t[Oasis, 2Pac]\n+\n+query II\n+WITH cte AS (SELECT id, name FROM test WHERE id IN (2,3))\n+SELECT id, name FROM cte WHERE ARRAY_CONTAINS(name, '2Pac');\n+----\n+3\t[Oasis, 2Pac]\n+\n+query II\n+SELECT id, name FROM test WHERE id IN (2,3) AND name::text ILIKE '%2Pac%';\n+----\n+3\t[Oasis, 2Pac]\n\\ No newline at end of file\n",
  "problem_statement": "list_contains doesn't handle prior selections correctly\n#### What happens?\r\nWhen `list_contains` is not the first predicate, it doesn't handle the previous selection correctly.\r\n\r\n#### To Reproduce\r\n```sql\r\nSELECT function_name, return_type, parameter_types\r\nFROM duckdb_functions()\r\nWHERE function_type = 'scalar' AND list_has(parameter_types, 'TIMESTAMP')\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: OSX\r\n - DuckDB Version: 0.3.3.-dev\r\n - DuckDB Client: Shell\r\n\r\n#### Before Submitting\r\n\r\n- [X] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [X] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\nlist_contains doesn't handle prior selections correctly\n#### What happens?\r\nWhen `list_contains` is not the first predicate, it doesn't handle the previous selection correctly.\r\n\r\n#### To Reproduce\r\n```sql\r\nSELECT function_name, return_type, parameter_types\r\nFROM duckdb_functions()\r\nWHERE function_type = 'scalar' AND list_has(parameter_types, 'TIMESTAMP')\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: OSX\r\n - DuckDB Version: 0.3.3.-dev\r\n - DuckDB Client: Shell\r\n\r\n#### Before Submitting\r\n\r\n- [X] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [X] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "Ah yes, I believe this happens because elements are accessed using a (incremented) index added to the source index of the list (first element). Instead, each child should be accessed through the selection vector.\nAh yes, I believe this happens because elements are accessed using a (incremented) index added to the source index of the list (first element). Instead, each child should be accessed through the selection vector.",
  "created_at": "2022-04-20T10:44:04Z",
  "modified_files": [
    "src/function/scalar/list/contains_or_position.cpp"
  ],
  "modified_test_files": [
    "test/sql/function/list/list_contains.test"
  ]
}