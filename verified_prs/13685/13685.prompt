You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Combining function chaining and reusable aliases fails in where clause
### What happens?

Howdy folks! 

I found a small issue when combining 2 of my favorite friendly SQL features. 

If I combine the use of function chaining and reusable aliases together in my select clause, then use that column in my where clause, I receive an error. 

### To Reproduce

It seems to be something to do with the combination of the two. Using just function chaining or just reusable aliases works correctly in the where clause. However, both together fails. 

```sql
-- Fails
with test as (
    select 'woot' as my_column
)
from test
select 
    my_column.substr(2) as partial_woot,
    partial_woot.substr(2) as more_partially_woot
where 
    more_partially_woot = 'ot'
;
```
```sql
Catalog Error: Scalar Function with name substr does not exist!
Did you mean "main.substr"?
LINE 7:     partial_woot.substr(2) as more_partially_woot
where 
    more_partially_woot = 'ot'
;...
            ^
```
```sql
-- Works: Multiple chains without reusable aliases
with test as (
    select 'woot' as my_column
)
from test
select 
    my_column.substr(2) as partial_woot,
    my_column.substr(2).substr(2) as more_partially_woot
where 
    more_partially_woot = 'ot'
;

-- Works: Single chain and reusing the alias in the where clause only
with test as (
    select 'woot' as my_column
)
from test
select 
    my_column.substr(2) as partial_woot,
where 
    partial_woot = 'oot'
;

-- Works: Reusable aliases that don't use function chaining
with test as (
    select 'woot' as my_column
)
from test
select 
    substr(my_column,2) as partial_woot,
    substr(partial_woot,2) as more_partially_woot
where 
    more_partially_woot = 'ot'
;
```

### OS:

MacOS

### DuckDB Version:

0.10.2, 0.10.3-dev388

### DuckDB Client:

CLI

### Full Name:

Alex Monahan

### Affiliation:

DuckDB Labs and MotherDuck (lol at Oracle placeholder)

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Not applicable - the reproduction does not require a data set

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://duckdb.org/docs/installation) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/include/duckdb/planner/expression_binder/column_alias_binder.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/planner/expression_binder/column_alias_binder.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/common/case_insensitive_map.hpp"
12: #include "duckdb/planner/expression_binder.hpp"
13: 
14: namespace duckdb {
15: 
16: class ColumnRefExpression;
17: struct SelectBindState;
18: 
19: //! A helper binder for WhereBinder and HavingBinder which support alias as a columnref.
20: class ColumnAliasBinder {
21: public:
22: 	explicit ColumnAliasBinder(SelectBindState &bind_state);
23: 
24: 	bool BindAlias(ExpressionBinder &enclosing_binder, unique_ptr<ParsedExpression> &expr_ptr, idx_t depth,
25: 	               bool root_expression, BindResult &result);
26: 
27: private:
28: 	SelectBindState &bind_state;
29: 	unordered_set<idx_t> visited_select_indexes;
30: };
31: 
32: } // namespace duckdb
[end of src/include/duckdb/planner/expression_binder/column_alias_binder.hpp]
[start of src/include/duckdb/planner/expression_binder/where_binder.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/planner/expression_binder/where_binder.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/planner/expression_binder.hpp"
12: 
13: namespace duckdb {
14: 
15: class ColumnAliasBinder;
16: 
17: //! The WHERE binder is responsible for binding an expression within the WHERE clause of a SQL statement
18: class WhereBinder : public ExpressionBinder {
19: public:
20: 	WhereBinder(Binder &binder, ClientContext &context, optional_ptr<ColumnAliasBinder> column_alias_binder = nullptr);
21: 
22: protected:
23: 	BindResult BindExpression(unique_ptr<ParsedExpression> &expr_ptr, idx_t depth,
24: 	                          bool root_expression = false) override;
25: 
26: 	string UnsupportedAggregateMessage() override;
27: 
28: private:
29: 	BindResult BindColumnRef(unique_ptr<ParsedExpression> &expr_ptr, idx_t depth, bool root_expression);
30: 
31: 	optional_ptr<ColumnAliasBinder> column_alias_binder;
32: };
33: 
34: } // namespace duckdb
[end of src/include/duckdb/planner/expression_binder/where_binder.hpp]
[start of src/planner/expression_binder/column_alias_binder.cpp]
1: #include "duckdb/planner/expression_binder/column_alias_binder.hpp"
2: 
3: #include "duckdb/parser/expression/columnref_expression.hpp"
4: #include "duckdb/common/string_util.hpp"
5: #include "duckdb/planner/expression_binder.hpp"
6: #include "duckdb/planner/binder.hpp"
7: #include "duckdb/planner/expression_binder/select_bind_state.hpp"
8: 
9: namespace duckdb {
10: 
11: ColumnAliasBinder::ColumnAliasBinder(SelectBindState &bind_state) : bind_state(bind_state), visited_select_indexes() {
12: }
13: 
14: bool ColumnAliasBinder::BindAlias(ExpressionBinder &enclosing_binder, unique_ptr<ParsedExpression> &expr_ptr,
15:                                   idx_t depth, bool root_expression, BindResult &result) {
16: 
17: 	D_ASSERT(expr_ptr->GetExpressionClass() == ExpressionClass::COLUMN_REF);
18: 	auto &expr = expr_ptr->Cast<ColumnRefExpression>();
19: 
20: 	// Qualified columns cannot be aliases.
21: 	if (expr.IsQualified()) {
22: 		return false;
23: 	}
24: 
25: 	// We try to find the alias in the alias_map and return false, if no alias exists.
26: 	auto alias_entry = bind_state.alias_map.find(expr.column_names[0]);
27: 	if (alias_entry == bind_state.alias_map.end()) {
28: 		return false;
29: 	}
30: 
31: 	if (visited_select_indexes.find(alias_entry->second) != visited_select_indexes.end()) {
32: 		// self-referential alias cannot be resolved
33: 		return false;
34: 	}
35: 
36: 	// We found an alias, so we copy the alias expression into this expression.
37: 	auto original_expr = bind_state.BindAlias(alias_entry->second);
38: 	expr_ptr = std::move(original_expr);
39: 	visited_select_indexes.insert(alias_entry->second);
40: 
41: 	result = enclosing_binder.BindExpression(expr_ptr, depth, root_expression);
42: 	visited_select_indexes.erase(alias_entry->second);
43: 	return true;
44: }
45: 
46: } // namespace duckdb
[end of src/planner/expression_binder/column_alias_binder.cpp]
[start of src/planner/expression_binder/where_binder.cpp]
1: #include "duckdb/planner/expression_binder/where_binder.hpp"
2: #include "duckdb/planner/expression_binder/column_alias_binder.hpp"
3: #include "duckdb/parser/expression/columnref_expression.hpp"
4: 
5: namespace duckdb {
6: 
7: WhereBinder::WhereBinder(Binder &binder, ClientContext &context, optional_ptr<ColumnAliasBinder> column_alias_binder)
8:     : ExpressionBinder(binder, context), column_alias_binder(column_alias_binder) {
9: 	target_type = LogicalType(LogicalTypeId::BOOLEAN);
10: }
11: 
12: BindResult WhereBinder::BindColumnRef(unique_ptr<ParsedExpression> &expr_ptr, idx_t depth, bool root_expression) {
13: 
14: 	auto result = ExpressionBinder::BindExpression(expr_ptr, depth);
15: 	if (!result.HasError() || !column_alias_binder) {
16: 		return result;
17: 	}
18: 
19: 	BindResult alias_result;
20: 	auto found_alias = column_alias_binder->BindAlias(*this, expr_ptr, depth, root_expression, alias_result);
21: 	if (found_alias) {
22: 		return alias_result;
23: 	}
24: 
25: 	return result;
26: }
27: 
28: BindResult WhereBinder::BindExpression(unique_ptr<ParsedExpression> &expr_ptr, idx_t depth, bool root_expression) {
29: 	auto &expr = *expr_ptr;
30: 	switch (expr.GetExpressionClass()) {
31: 	case ExpressionClass::DEFAULT:
32: 		return BindUnsupportedExpression(expr, depth, "WHERE clause cannot contain DEFAULT clause");
33: 	case ExpressionClass::WINDOW:
34: 		return BindUnsupportedExpression(expr, depth, "WHERE clause cannot contain window functions!");
35: 	case ExpressionClass::COLUMN_REF:
36: 		return BindColumnRef(expr_ptr, depth, root_expression);
37: 	default:
38: 		return ExpressionBinder::BindExpression(expr_ptr, depth);
39: 	}
40: }
41: 
42: string WhereBinder::UnsupportedAggregateMessage() {
43: 	return "WHERE clause cannot contain aggregates!";
44: }
45: 
46: } // namespace duckdb
[end of src/planner/expression_binder/where_binder.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: