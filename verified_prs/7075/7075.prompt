You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
Inconsistent Regexp Behavior with Inline (?i) Modifier
### What happens?

Using an inline modifier for case insensitive matches (?i), and a varchar value from a table containing a single value 'abc', the following expression returns false: `select regexp_matches(col1, '(?i)ABC')`

Yet, it returns True with a literal 'abc':  `select regexp_matches('abc', '(?i)ABC')`

Also returns True with other similar/equivalent formulations, like: `select regexp_matches(col1, '(?i)AB[C]')`

### To Reproduce

The first two regexp_matches expressions evaluate to False, yet the equivalent expressions written with literals evaluates to True. 

`regexp_matches(col1, '(?i)ABC'),` should evaluate to True, since "col1" contains a single value: abc
The equivalent version with literal 'abc' evaluates to True: `regexp_matches('abc', '(?i)ABC')`

```
CREATE OR REPLACE TABLE datatest as SELECT 'abc' as col1; 

SELECT 
    col1, 
    regexp_matches(col1, '(?i)ABC'), -- False??
    regexp_matches(col1, '(?i)AB[C]'), -- False??
    regexp_matches(col1, '(?i)abc') as t1_lower, -- False??

    -- Below this line everything evaluates to True, yet are more or less equivalent 
    -- to the first version
    regexp_matches(col1, 'ABC', 'i'), -- This should be same as #1
    regexp_matches(col1, '(?i)ABC$'), -- $ = end of input
    regexp_matches(col1, '(?i)AB[C]+'), 
    regexp_matches(col1, '(?i)AB[C]?'), 

    -- Using literal 'abc' works as expected
    regexp_matches('abc', '(?i)ABC'), 
    regexp_matches('abc', '(?i)AB[C]'), 
    regexp_matches('abc', '(?i)ABC$'), 
    regexp_matches('abc', '(?i)AB[C]+'), 
    regexp_matches('abc', '(?i)AB[C]?') 
FROM 
    datatest
```


### OS:

Windows

### DuckDB Version:

0.7.2-dev1734	

### DuckDB Client:

Python

### Full Name:

P Timmins

### Affiliation:

Iqmo

### Have you tried this on the latest `master` branch?

- [X] I agree

### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?

- [X] I agree

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=master" alt="Github Actions Badge">
9:   </a>
10:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
11:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
12:   </a>
13:   <a href="https://discord.gg/tcvwpjfnZx">
14:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
15:   </a>
16:   <a href="https://github.com/duckdb/duckdb/releases/">
17:     <img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release">
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The detail of benchmarks is in our [Benchmark Guide](benchmark/README.md).
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
[end of README.md]
[start of src/optimizer/rule/regex_optimizations.cpp]
1: #include "duckdb/optimizer/rule/regex_optimizations.hpp"
2: 
3: #include "duckdb/execution/expression_executor.hpp"
4: #include "duckdb/planner/expression/bound_function_expression.hpp"
5: #include "duckdb/planner/expression/bound_constant_expression.hpp"
6: 
7: #include "re2/re2.h"
8: #include "re2/regexp.h"
9: 
10: namespace duckdb {
11: 
12: RegexOptimizationRule::RegexOptimizationRule(ExpressionRewriter &rewriter) : Rule(rewriter) {
13: 	auto func = make_uniq<FunctionExpressionMatcher>();
14: 	func->function = make_uniq<SpecificFunctionMatcher>("regexp_matches");
15: 	func->policy = SetMatcher::Policy::ORDERED;
16: 	func->matchers.push_back(make_uniq<ExpressionMatcher>());
17: 	func->matchers.push_back(make_uniq<ConstantExpressionMatcher>());
18: 	root = std::move(func);
19: }
20: 
21: unique_ptr<Expression> RegexOptimizationRule::Apply(LogicalOperator &op, vector<Expression *> &bindings,
22:                                                     bool &changes_made, bool is_root) {
23: 	auto &root = bindings[0]->Cast<BoundFunctionExpression>();
24: 	auto &constant_expr = bindings[2]->Cast<BoundConstantExpression>();
25: 	D_ASSERT(root.children.size() == 2);
26: 
27: 	if (constant_expr.value.IsNull()) {
28: 		return make_uniq<BoundConstantExpression>(Value(root.return_type));
29: 	}
30: 
31: 	// the constant_expr is a scalar expression that we have to fold
32: 	if (!constant_expr.IsFoldable()) {
33: 		return nullptr;
34: 	}
35: 
36: 	auto constant_value = ExpressionExecutor::EvaluateScalar(GetContext(), constant_expr);
37: 	D_ASSERT(constant_value.type() == constant_expr.return_type);
38: 	auto patt_str = StringValue::Get(constant_value);
39: 
40: 	duckdb_re2::RE2 pattern(patt_str);
41: 	if (!pattern.ok()) {
42: 		return nullptr; // this should fail somewhere else
43: 	}
44: 
45: 	if (pattern.Regexp()->op() == duckdb_re2::kRegexpLiteralString ||
46: 	    pattern.Regexp()->op() == duckdb_re2::kRegexpLiteral) {
47: 		auto contains = make_uniq<BoundFunctionExpression>(root.return_type, ContainsFun::GetFunction(),
48: 		                                                   std::move(root.children), nullptr);
49: 
50: 		string min;
51: 		string max;
52: 		pattern.PossibleMatchRange(&min, &max, patt_str.size());
53: 		if (min == max) {
54: 			contains->children[1] = make_uniq<BoundConstantExpression>(Value(std::move(min)));
55: 		} else {
56: 			contains->children[1] = make_uniq<BoundConstantExpression>(Value(std::move(patt_str)));
57: 		}
58: 		return std::move(contains);
59: 	}
60: 	return nullptr;
61: }
62: 
63: } // namespace duckdb
[end of src/optimizer/rule/regex_optimizations.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: